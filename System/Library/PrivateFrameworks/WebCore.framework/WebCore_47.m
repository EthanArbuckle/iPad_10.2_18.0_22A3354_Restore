uint64_t WebCore::IDBObjectStore::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(*(_QWORD *)(this + 152) + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t WebCore::IDBTransaction::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebCore::IDBObjectStore::deref(WebCore::IDBObjectStore *this, WTF::StringImpl *a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;

  result = (unsigned int *)*((_QWORD *)this + 19);
  v3 = result + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    atomic_store(1u, result + 6);
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, a2);
    return (unsigned int *)bmalloc::api::isoDeallocate(v6, v7);
  }
  return result;
}

unsigned int *WebCore::IDBTransaction::deref(unsigned int *this, WTF::StringImpl *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  bmalloc::api *v5;
  void *v6;

  v2 = this + 6;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    atomic_store(1u, this + 6);
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)this, a2);
    return (unsigned int *)bmalloc::api::isoDeallocate(v5, v6);
  }
  return this;
}

_QWORD *WebCore::IDBOpenDBRequest::createDeleteRequest@<X0>(WebCore::IDBOpenDBRequest *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WebCore::IDBClient::IDBConnectionProxy *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v17;

  v9 = bmalloc::api::isoAllocate();
  v10 = (_QWORD *)WebCore::IDBRequest::IDBRequest(v9, this, (uint64_t)a2, 1);
  *v10 = off_1E3357DC8;
  v10[3] = &unk_1E3357E70;
  v11 = v10 + 3;
  v12 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v12 += 2;
  *(_QWORD *)(v9 + 376) = v12;
  *(_BYTE *)(v9 + 384) = 0;
  *(_DWORD *)(v9 + 408) = -1;
  v13 = *((unsigned int *)a3 + 8);
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(char *, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v13])(&v16, v9 + 384, (char *)a3 + 8);
    *(_DWORD *)(v9 + 408) = v13;
  }
  *(_BYTE *)(v9 + 416) = 0;
  *(_DWORD *)(v9 + 440) = -1;
  v14 = *((unsigned int *)a3 + 16);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(char *, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v14])(&v17, v9 + 416, (char *)a3 + 40);
    *(_DWORD *)(v9 + 440) = v14;
  }
  *(_BYTE *)(v9 + 448) = *((_BYTE *)a3 + 72);
  *(_QWORD *)(v9 + 456) = 0;
  *(_WORD *)(v9 + 464) = 0;
  *a4 = v9;
  return WebCore::ActiveDOMObject::suspendIfNeeded(v11);
}

_QWORD *WebCore::IDBOpenDBRequest::createOpenRequest@<X0>(WebCore::IDBOpenDBRequest *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WebCore::IDBClient::IDBConnectionProxy *a3@<X2>, const WebCore::IDBDatabaseIdentifier *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  char v18;

  v10 = bmalloc::api::isoAllocate();
  v11 = (_QWORD *)WebCore::IDBRequest::IDBRequest(v10, this, (uint64_t)a2, 0);
  *v11 = off_1E3357DC8;
  v11[3] = &unk_1E3357E70;
  v12 = v11 + 3;
  v13 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v13 += 2;
  *(_QWORD *)(v10 + 376) = v13;
  *(_BYTE *)(v10 + 384) = 0;
  *(_DWORD *)(v10 + 408) = -1;
  v14 = *((unsigned int *)a3 + 8);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(char *, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v14])(&v17, v10 + 384, (char *)a3 + 8);
    *(_DWORD *)(v10 + 408) = v14;
  }
  *(_BYTE *)(v10 + 416) = 0;
  *(_DWORD *)(v10 + 440) = -1;
  v15 = *((unsigned int *)a3 + 16);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(char *, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v15])(&v18, v10 + 416, (char *)a3 + 40);
    *(_DWORD *)(v10 + 440) = v15;
  }
  *(_BYTE *)(v10 + 448) = *((_BYTE *)a3 + 72);
  *(_QWORD *)(v10 + 456) = a4;
  *(_WORD *)(v10 + 464) = 0;
  *a5 = v10;
  return WebCore::ActiveDOMObject::suspendIfNeeded(v12);
}

uint64_t WebCore::IDBRequest::IDBRequest(uint64_t a1, WebCore::ScriptExecutionContext *a2, uint64_t a3, char a4)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v20;
  _QWORD *v21;

  v6 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E33A4FC0;
  v8 = (_QWORD *)(a1 + 24);
  if (!*((_BYTE *)a2 + 274))
  {
    v9 = (char *)a2 - 192;
    v10 = *((_QWORD *)a2 + 64);
    if (v10)
    {
      v11 = *(char **)(v10 + 8);
      if (v11)
        v9 = v11;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v9 + 192);
  }
  *(_QWORD *)(a1 + 24) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 32) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 24), v6);
  *(_QWORD *)(a1 + 24) = &off_1E33A0540;
  *(_QWORD *)(a1 + 40) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x19537E998);
  }
  v21 = v8;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v21, (uint64_t)&v20);
  *v8 = &off_1E3357608;
  v12 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12)
    v12 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 1;
  *(_QWORD *)a1 = off_1E3357EC8;
  *(_QWORD *)(a1 + 24) = &unk_1E3357F70;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 8);
  do
  {
    v14 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v15 = v14 + 2;
  }
  while (__stlxr(v15, &WebCore::nextClientResourceNumber(void)::currentNumber));
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = v15;
  __dmb(0xAu);
  v16 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v16)
    *(_QWORD *)(v16 + 8) = 3;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 1;
  *(_DWORD *)(a1 + 304) = 7;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v17 = *(unsigned int **)a3;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  *(_QWORD *)(a1 + 344) = a3;
  *(_DWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 356) = a4;
  *(_DWORD *)(a1 + 357) = 0x10000;
  *(_BYTE *)(a1 + 361) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  return a1;
}

void WebCore::IDBRequest::~IDBRequest(WebCore::IDBRequest *this)
{
  WebCore::IDBRequest *v1;
  char *v2;
  bmalloc::api *v3;
  WebCore::ActiveDOMObject *v4;
  uint64_t v5;
  void *v6;
  _DWORD *v7;
  bmalloc::api **v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  bmalloc::api *v25;
  void *v26;
  WTF *v27;
  void *v28;
  WebCore::IDBClient::IDBConnectionProxy *v29;
  bmalloc::api *v30;
  void *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  char *v36;
  char v37;
  char v38;

  *(_QWORD *)this = off_1E3357EC8;
  *((_QWORD *)this + 3) = &unk_1E3357F70;
  v4 = (WebCore::IDBRequest *)((char *)this + 24);
  v5 = *((unsigned int *)this + 76);
  if ((_DWORD)v5 == -1)
  {
    v32 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_47:
    atomic_store(1u, v32);
    WTF::fastFree((WTF *)v32, v6);
LABEL_45:
    bmalloc::api::isoDeallocate(v3, v6);
    goto LABEL_9;
  }
  v1 = this;
  v2 = (char *)this + 144;
  v36 = &v35;
  ((void (*)(char **, char *))off_1E33585E8[v5])(&v36, (char *)this + 144);
  v7 = (_DWORD *)*((_QWORD *)v1 + 46);
  *((_QWORD *)v1 + 46) = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[4];
  }
  v8 = (bmalloc::api **)*((_QWORD *)v1 + 43);
  *((_QWORD *)v1 + 43) = 0;
  if (v8)
  {
    v3 = *v8;
    do
    {
      v9 = __ldaxr((unsigned int *)v3);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v3));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v3);
      v29 = (WebCore::IDBClient::IDBConnectionProxy *)*((_QWORD *)v3 + 3);
      *((_QWORD *)v3 + 3) = 0;
      if (v29)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v29, v6);
        bmalloc::api::isoDeallocate(v30, v31);
      }
      v32 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (!v32)
        goto LABEL_45;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_45;
      goto LABEL_47;
    }
  }
LABEL_9:
  v11 = (_DWORD *)*((_QWORD *)v1 + 42);
  *((_QWORD *)v1 + 42) = 0;
  if (v11)
  {
    if (v11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[4];
  }
  if (*((_BYTE *)v1 + 328))
  {
    v12 = *((unsigned int *)v1 + 80);
    if ((_DWORD)v12 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_8IDBIndexENSA_ISF_EENSC_ISF_EEEENS7_INS8_9IDBCursorENSA_ISJ_EENSC_ISJ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v12])(&v37, (char *)v1 + 312);
    *((_DWORD *)v1 + 80) = -1;
  }
  v13 = *((unsigned int *)v1 + 76);
  if ((_DWORD)v13 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v13])(&v38, v2);
  *((_DWORD *)v1 + 76) = -1;
  v14 = *((_QWORD *)v1 + 16);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 3;
    *((_QWORD *)v1 + 16) = 0;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)v1 + 12);
  *((_QWORD *)v1 + 12) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (_DWORD *)*((_QWORD *)v1 + 9);
  *((_QWORD *)v1 + 9) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = (unsigned int *)*((_QWORD *)v1 + 8);
  *((_QWORD *)v1 + 8) = 0;
  if (v17)
  {
    v18 = v17 + 6;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v17, (WTF::StringImpl *)v6);
      bmalloc::api::isoDeallocate(v25, v26);
    }
  }
  *((_QWORD *)v1 + 3) = &off_1E3357608;
  v21 = (unsigned int *)*((_QWORD *)v1 + 6);
  *((_QWORD *)v1 + 6) = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::Thread::~Thread((WTF::Thread *)v21);
      WTF::fastFree(v27, v28);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(v4, v6);
  WebCore::EventTarget::~EventTarget(v1, v24);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::IDBRequest::~IDBRequest(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::IDBOpenDBRequest::~IDBOpenDBRequest(WebCore::IDBOpenDBRequest *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;
  char v7;

  v3 = *((unsigned int *)this + 110);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3358350[v3])(&v6, (char *)this + 416);
  *((_DWORD *)this + 110) = -1;
  v4 = *((unsigned int *)this + 102);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3358350[v4])(&v7, (char *)this + 384);
  *((_DWORD *)this + 102) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::IDBRequest::~IDBRequest(this);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  char v8;
  char v9;

  v3 = *((unsigned int *)this + 110);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3358350[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 110) = -1;
  v4 = *((unsigned int *)this + 102);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3358350[v4])(&v9, (char *)this + 384);
  *((_DWORD *)this + 102) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::IDBRequest::~IDBRequest(this);
  bmalloc::api::isoDeallocate(v6, v7);
}

void `non-virtual thunk to'WebCore::IDBOpenDBRequest::~IDBOpenDBRequest(WebCore::IDBOpenDBRequest *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;
  char v7;

  v3 = *((unsigned int *)this + 104);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3358350[v3])(&v6, (char *)this + 392);
  *((_DWORD *)this + 104) = -1;
  v4 = *((unsigned int *)this + 96);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3358350[v4])(&v7, (char *)this + 360);
  *((_DWORD *)this + 96) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::IDBRequest::~IDBRequest((WebCore::IDBOpenDBRequest *)((char *)this - 24));
}

{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  char v8;
  char v9;

  v3 = *((unsigned int *)this + 104);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3358350[v3])(&v8, (char *)this + 392);
  *((_DWORD *)this + 104) = -1;
  v4 = *((unsigned int *)this + 96);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3358350[v4])(&v9, (char *)this + 360);
  *((_DWORD *)this + 96) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::IDBRequest::~IDBRequest((WebCore::IDBOpenDBRequest *)((char *)this - 24));
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::IDBOpenDBRequest::onError(WebCore::IDBOpenDBRequest *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _DWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*((_BYTE *)a2 + 25))
  {
    WebCore::DOMException::create(*((unsigned __int8 *)a2 + 24), a2 + 4, &v16);
    v3 = v16;
  }
  else
  {
    v3 = 0;
  }
  v4 = (WebCore *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v3;
  if (v4)
  {
    if (*((_DWORD *)v4 + 2) == 1)
      v4 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v4 + 8))(v4);
    else
      --*((_DWORD *)v4 + 2);
  }
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow(v4);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  v8 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x1E8206 | (*(_QWORD *)(v7 + 784) != 0);
  v11 = *(_DWORD **)(v7 + 784);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(v8 + 24) = v11;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = 0;
  v12 = (unsigned int *)((char *)this + 60);
  *(_QWORD *)v8 = off_1E3357FC8;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(v8 + 72) = this;
  v16 = v8;
  v14 = *((_QWORD *)this + 4);
  if (!v14
    || (v15 = *(_QWORD *)(v14 + 8)) == 0
    || *(_BYTE *)(v15 + 180)
    || (result = (uint64_t)WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this, 1, &v16), (v8 = v16) != 0))
  {
    if (*(_DWORD *)(v8 + 16) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    else
      --*(_DWORD *)(v8 + 16);
  }
  return result;
}

uint64_t WebCore::IDBOpenDBRequest::fireErrorAfterVersionChangeCompletion(WebCore::IDBOpenDBRequest *this)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  WebCore *v23;

  WebCore::DOMException::create(0x10u, MEMORY[0x1E0CBF738], v22);
  v2 = v22[0];
  v22[0] = 0;
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v2;
  if (v3)
  {
    v4 = v3[2] - 1;
    if (v3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v3 = (_DWORD *)v22[0];
      v22[0] = 0;
      if (!v3)
        goto LABEL_4;
      v4 = v3[2] - 1;
      if (v3[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        goto LABEL_4;
      }
    }
    v3[2] = v4;
  }
LABEL_4:
  WebCore::IDBRequest::setResultToUndefined(this);
  v5 = (uint64_t *)(*((_QWORD *)this + 8) + 328);
  v6 = (unsigned int *)((char *)this + 60);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v23 = this;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)v22, v5, &v23);
  v8 = v23;
  v23 = 0;
  if (v8)
  {
    v9 = (unsigned int *)((char *)v8 + 60);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v8 + 15);
      v8 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v8 + 72))(v8);
    }
  }
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(v8);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  v15 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 16) = 1;
  *(_DWORD *)(v15 + 20) = *(_DWORD *)(v15 + 20) & 0xFFC00000 | 0x1E8206 | (*(_QWORD *)(v14 + 784) != 0);
  v18 = *(_DWORD **)(v14 + 784);
  if (v18)
    *v18 += 2;
  *(_QWORD *)(v15 + 24) = v18;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = v17;
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)v15 = off_1E3357FC8;
  do
    v19 = __ldaxr(v6);
  while (__stlxr(v19 + 1, v6));
  *(_QWORD *)(v15 + 72) = this;
  v22[0] = v15;
  v20 = *((_QWORD *)this + 4);
  if (!v20
    || (v21 = *(_QWORD *)(v20 + 8)) == 0
    || *(_BYTE *)(v21 + 180)
    || (result = (uint64_t)WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this, 1, v22), (v15 = v22[0]) != 0))
  {
    if (*(_DWORD *)(v15 + 16) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    else
      --*(_DWORD *)(v15 + 16);
  }
  return result;
}

_DWORD *WebCore::IDBRequest::setResultToUndefined(_DWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  _BYTE v11[15];
  char v12;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return this;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return this;
  v3 = this;
  v4 = v2 - 96;
  v5 = *(unsigned __int8 *)(v2 + 178);
  if (*(_BYTE *)(v2 + 178))
  {
    if (v5 == 1 || v5 == 2)
      ++*(_DWORD *)(v2 + 216);
  }
  else
  {
    *(_DWORD *)(v2 - 264) += 2;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 344))(v2 - 96);
  MEMORY[0x19AEA3294](v11, v6);
  v7 = v3[76];
  if ((_DWORD)v7 == -1)
    goto LABEL_9;
  v8 = v3 + 36;
  if ((_DWORD)v7 != 7)
  {
    ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v7])(&v12, v8);
LABEL_9:
    v3[36] = 1;
    v3[76] = 7;
    goto LABEL_10;
  }
  *v8 = 1;
LABEL_10:
  *((_QWORD *)v3 + 15) = 0;
  v9 = *((_QWORD *)v3 + 16);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)v3 + 16) = 0;
  }
  this = (_DWORD *)MEMORY[0x19AEA32A0](v11);
  v10 = *(unsigned __int8 *)(v2 + 178);
  if (*(_BYTE *)(v2 + 178))
  {
    if (v10 == 1)
    {
      if (*(_DWORD *)(v2 + 216) == 1)
        return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v2 - 96);
      else
        --*(_DWORD *)(v2 + 216);
    }
    else if (v10 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
    }
  }
  else if (*(_DWORD *)(v2 - 264) == 2)
  {
    if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
      return (_DWORD *)WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288));
  }
  else
  {
    *(_DWORD *)(v2 - 264) -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::IDBOpenDBRequest::cancelForStop(WTF::StringImpl **this)
{
  WebCore::IDBOpenDBRequest *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  int isMainThread;
  uint64_t v7;
  WTF::StringImpl *result;
  uint64_t v9[2];
  _QWORD v10[3];
  WTF::StringImpl *v11;
  _BYTE v12[24];
  int v13;
  _BYTE v14[24];
  int v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v1 = (WebCore::IDBOpenDBRequest *)this;
  v19 = *MEMORY[0x1E0C80C00];
  v2 = this[43];
  v10[0] = *((_QWORD *)v2 + 1);
  v10[1] = v10[0];
  v10[2] = this[14];
  v3 = this[47];
  if (v3)
    *(_DWORD *)v3 += 2;
  v11 = v3;
  v12[0] = 0;
  v13 = -1;
  v4 = *((unsigned int *)this + 102);
  if ((_DWORD)v4 != -1)
  {
    this = (WTF::StringImpl **)((uint64_t (*)(uint64_t *, _BYTE *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v4])(v9, v12, this + 48);
    v13 = v4;
  }
  v14[0] = 0;
  v15 = -1;
  v5 = *((unsigned int *)v1 + 110);
  if ((_DWORD)v5 != -1)
  {
    this = (WTF::StringImpl **)((uint64_t (*)(uint64_t *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v5])(v9, v14, (char *)v1 + 416);
    v15 = v5;
  }
  v16 = *((_BYTE *)v1 + 448);
  v17 = *((_QWORD *)v1 + 57);
  v18 = *((_BYTE *)v1 + 356);
  v9[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::openDBRequestCancelled;
  v9[1] = 0;
  isMainThread = WTF::isMainThread((WTF *)this);
  v7 = *(_QWORD *)v2;
  if (isMainThread)
  {
    if (*(_BYTE *)(v7 + 16))
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(v7 + 8) + 8) + 216))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8), v10);
  }
  else
  {
    WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData const&>((uint64_t)v2, (unsigned int *)v7, v9, (WebCore::IDBOpenRequestData *)v10);
  }
  if (v15 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E3358350[v15])(v9, v14);
  v15 = -1;
  if (v13 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E3358350[v13])(v9, v12);
  v13 = -1;
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore *WebCore::IDBOpenDBRequest::dispatchEvent(WebCore::IDBOpenDBRequest *this, WebCore::Event *a2)
{
  unsigned int *v4;
  unsigned int v5;
  WebCore *result;
  uint64_t v7;
  unint64_t StatusReg;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24[2];

  v4 = (unsigned int *)((char *)this + 60);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  result = WebCore::IDBRequest::dispatchEvent(this, a2);
  v7 = *((_QWORD *)this + 8);
  if (v7 && *(_BYTE *)(v7 + 96) == 2)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v9 = *(_QWORD *)(StatusReg + 736);
    if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    {
      result = (WebCore *)WebCore::threadGlobalDataSlow(result);
      v10 = (uint64_t)result;
    }
    v11 = *(_QWORD *)(v10 + 40);
    if (!v11)
    {
      result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
      v11 = *(_QWORD *)(v10 + 40);
    }
    if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v11 + 784))
      goto LABEL_17;
    v12 = *(_QWORD *)(StatusReg + 736);
    if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    {
      result = (WebCore *)WebCore::threadGlobalDataSlow(result);
      v13 = (uint64_t)result;
    }
    v14 = *(_QWORD *)(v13 + 40);
    if (!v14)
    {
      result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
      v14 = *(_QWORD *)(v13 + 40);
    }
    if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v14 + 2016))
    {
LABEL_17:
      v15 = *((_QWORD *)this + 8);
      v16 = *(_QWORD *)(v15 + 72);
      v17 = *(uint64_t **)(v16 + 72);
      v18 = *(_QWORD *)(v16 + 120);
      v19 = (uint64_t *)(v15 + 80);
      v23 = v18;
      v24[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::didFinishHandlingVersionChangeTransaction;
      v24[1] = 0;
      result = (WebCore *)WTF::isMainThread(result);
      v20 = *v17;
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(v20 + 16))
          result = (WebCore *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v20 + 8)
                                                                                                  + 8)
                                                                                    + 56))(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), v18, v19);
      }
      else
      {
        result = (WebCore *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,WebCore::IDBResourceIdentifier const&>((uint64_t)v17, (unsigned int *)v20, v24, &v23, v19);
      }
    }
  }
  do
  {
    v21 = __ldaxr(v4);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v4));
  if (!v22)
  {
    atomic_store(1u, (unsigned int *)this + 15);
    return (WebCore *)(*(uint64_t (**)(WebCore::IDBOpenDBRequest *))(*(_QWORD *)this + 72))(this);
  }
  return result;
}

WTF *WebCore::IDBRequest::dispatchEvent(WebCore::IDBRequest *this, WebCore::Event *a2)
{
  unsigned int *v4;
  unsigned int v5;
  void *v6;
  WTF *result;
  WebCore::EventNames **v8;
  unint64_t StatusReg;
  uint64_t v10;
  WebCore::EventNames **v11;
  WebCore::EventNames *v12;
  uint64_t v13;
  WebCore::EventNames **v14;
  WebCore::EventNames *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF **v33;
  _DWORD *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  WebCore::IDBRequest *v59;
  int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v71;
  WebCore::IDBOpenDBRequest *v72;
  const WebCore::IDBResultData *v73;
  WTF::StringImpl *v74;
  WTF *v75;
  uint64_t v76;
  WTF **v77;

  v4 = (unsigned int *)((char *)this + 60);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if ((*((_BYTE *)a2 + 21) & 2) != 0)
  {
    ++*((_DWORD *)a2 + 4);
    v8 = (WebCore::EventNames **)*((_QWORD *)this + 46);
    *((_QWORD *)this + 46) = a2;
    if (v8)
    {
      if (*((_DWORD *)v8 + 4) == 1)
        v8 = (WebCore::EventNames **)(*((uint64_t (**)(WebCore::EventNames **))*v8 + 1))(v8);
      else
        --*((_DWORD *)v8 + 4);
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = *(_QWORD *)(StatusReg + 736);
    if (!v10 || (v11 = *(WebCore::EventNames ***)(v10 + 96)) == 0)
    {
      v8 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v8);
      v11 = v8;
    }
    v12 = v11[5];
    if (!v12)
    {
      v8 = WebCore::ThreadGlobalData::initializeEventNames(v11);
      v12 = v11[5];
    }
    if (*((_QWORD *)a2 + 3) != *((_QWORD *)v12 + 37))
    {
      *((_DWORD *)this + 88) = 1;
      if (*((_BYTE *)this + 360) != 2)
      {
        v13 = *(_QWORD *)(StatusReg + 736);
        if (!v13 || (v14 = *(WebCore::EventNames ***)(v13 + 96)) == 0)
        {
          v8 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)v8);
          v14 = v8;
        }
        v15 = v14[5];
        if (!v15)
        {
          v8 = WebCore::ThreadGlobalData::initializeEventNames(v14);
          v15 = v14[5];
        }
        if (*((_QWORD *)a2 + 3) == *((_QWORD *)v15 + 252))
          goto LABEL_30;
        v16 = *(_QWORD *)(StatusReg + 736);
        if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
          v17 = WebCore::threadGlobalDataSlow((WebCore *)v8);
        v18 = *(_QWORD *)(v17 + 40);
        if (!v18)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
          v18 = *(_QWORD *)(v17 + 40);
        }
        if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v18 + 784))
        {
LABEL_30:
          v75 = this;
          v76 = (uint64_t)this;
          v19 = *((unsigned int *)this + 76);
          if ((_DWORD)v19 == -1)
          {
            v72 = (WebCore::IDBOpenDBRequest *)std::__throw_bad_variant_access[abi:sn180100]();
            return (WTF *)WebCore::IDBOpenDBRequest::onSuccess(v72, v73);
          }
          v77 = &v75;
          ((void (*)(WTF ***, char *))off_1E33586F0[v19])(&v77, (char *)this + 144);
        }
      }
    }
    v75 = 0;
    v76 = 0;
    v20 = (WTF *)WTF::fastMalloc((WTF *)8);
    LODWORD(v76) = 1;
    v75 = v20;
    v21 = HIDWORD(v76);
    *((_QWORD *)v20 + HIDWORD(v76)) = this;
    HIDWORD(v76) = v21 + 1;
    if (*((WebCore::Event **)this + 10) == a2)
    {
      *((_QWORD *)this + 10) = 0;
    }
    else
    {
      v22 = *((_QWORD *)this + 8);
      if (v22 && !*(_BYTE *)(v22 + 345))
      {
        v23 = *(_QWORD *)(v22 + 72);
        v25 = (WTF *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v25 = this;
        *((_QWORD *)v25 + 1) = v22;
        *((_QWORD *)v25 + 2) = v23;
        v26 = v75;
        if (v75)
        {
          v75 = 0;
          LODWORD(v76) = 0;
          WTF::fastFree(v26, v24);
        }
        v75 = v25;
        v76 = 0x300000003;
      }
    }
    v27 = *((_QWORD *)this + 8);
    if (v27)
    {
      if (*(unsigned __int8 *)(v27 + 136) - 2 >= 3)
        *(_BYTE *)(v27 + 136) = 0;
      WebCore::EventDispatcher::dispatchEvent((unsigned int *)&v75, a2);
      if (*(_BYTE *)(v27 + 136) == 1)
        goto LABEL_45;
      if (!*(_BYTE *)(v27 + 136))
      {
        *(_BYTE *)(v27 + 136) = 1;
LABEL_45:
        if (*(_BYTE *)(v27 + 137))
        {
          v29 = *(_QWORD *)(v27 + 296);
          if (!v29 || !*(_DWORD *)(v29 - 12))
          {
            v30 = *(_QWORD *)(v27 + 328);
            if (!v30 || !*(_DWORD *)(v30 - 12))
              WebCore::IDBTransaction::commitInternal((WebCore::IDBTransaction *)v27);
          }
        }
      }
    }
    else
    {
      WebCore::EventDispatcher::dispatchEvent((unsigned int *)&v75, a2);
    }
    v31 = (WTF::StringImpl *)*((_QWORD *)this + 46);
    *((_QWORD *)this + 46) = 0;
    if (v31)
    {
      if (*((_DWORD *)v31 + 4) == 1)
        v31 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v31 + 8))(v31);
      else
        --*((_DWORD *)v31 + 4);
    }
    v32 = *((_QWORD *)this + 8);
    if (v32)
    {
      if (*((_BYTE *)this + 361))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v74 = (WTF::StringImpl *)v77;
        WebCore::DOMException::create(0x10u, &v74, (uint64_t *)&v77);
        v33 = v77;
        if (*(unsigned __int8 *)(v32 + 136) - 2 >= 3)
        {
          ++*((_DWORD *)v77 + 2);
          v34 = *(_DWORD **)(v32 + 160);
          *(_QWORD *)(v32 + 160) = v33;
          if (v34)
          {
            if (v34[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
            else
              --v34[2];
          }
          WebCore::IDBTransaction::abortInternal((WebCore::IDBDatabase **)v32);
          v33 = v77;
        }
        v77 = 0;
        if (v33)
        {
          if (*((_DWORD *)v33 + 2) == 1)
            (*((void (**)(WTF **))*v33 + 1))(v33);
          else
            --*((_DWORD *)v33 + 2);
        }
        v31 = v74;
        v74 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            v31 = (WTF::StringImpl *)WTF::StringImpl::destroy(v31, v28);
          else
            *(_DWORD *)v31 -= 2;
        }
      }
      else if ((*((_BYTE *)a2 + 20) & 0x40) == 0)
      {
        v35 = *(_QWORD *)(StatusReg + 736);
        if (!v35 || (v36 = *(WTF::StringImpl **)(v35 + 96)) == 0)
        {
          v31 = (WTF::StringImpl *)WebCore::threadGlobalDataSlow(v31);
          v36 = v31;
        }
        v37 = *((_QWORD *)v36 + 5);
        if (!v37)
        {
          v31 = (WTF::StringImpl *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v36);
          v37 = *((_QWORD *)v36 + 5);
        }
        if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v37 + 784))
        {
          v38 = *((_QWORD *)this + 8);
          if (*(unsigned __int8 *)(v38 + 136) - 2 >= 3)
          {
            v39 = *((_QWORD *)this + 9);
            ++*(_DWORD *)(v39 + 8);
            v40 = *(_DWORD **)(v38 + 160);
            *(_QWORD *)(v38 + 160) = v39;
            if (v40)
            {
              if (v40[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
              else
                --v40[2];
            }
            v31 = (WTF::StringImpl *)WebCore::IDBTransaction::abortInternal((WebCore::IDBDatabase **)v38);
          }
        }
      }
      v41 = *((_QWORD *)this + 8);
      if (*(_BYTE *)(v41 + 136) != 4)
      {
        ++*(_QWORD *)(v41 + 408);
        v42 = *(unsigned int **)(v41 + 336);
        *(_QWORD *)(v41 + 336) = 0;
        if (v42)
        {
          v43 = v42 + 15;
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
          {
            atomic_store(1u, v42 + 15);
            (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 72))(v42);
          }
        }
        WebCore::IDBTransaction::handleOperationsCompletedOnServer((WebCore::IDBTransaction *)v41);
      }
      if (!*((_QWORD *)this + 42))
      {
        v48 = *(_QWORD *)(StatusReg + 736);
        if (!v48 || (v49 = *(_QWORD *)(v48 + 96)) == 0)
          v49 = WebCore::threadGlobalDataSlow(v31);
        v50 = *(_QWORD *)(v49 + 40);
        if (!v50)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v49);
          v50 = *(_QWORD *)(v49 + 40);
        }
        if (*((_QWORD *)a2 + 3) != *(_QWORD *)(v50 + 296))
        {
          v51 = *((_QWORD *)this + 8);
          if (*(WebCore::IDBRequest **)(v51 + 336) != this)
          {
            v52 = (uint64_t *)(v51 + 328);
            v53 = *(_QWORD *)(v51 + 328);
            if (v53)
            {
              v54 = *(_DWORD *)(v53 - 8);
              v55 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
              v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
              v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
              v58 = v54 & ((v57 >> 31) ^ v57);
              v59 = *(WebCore::IDBRequest **)(v53 + 8 * v58);
              if (v59 != this)
              {
                v60 = 1;
                while (v59)
                {
                  v58 = ((_DWORD)v58 + v60) & v54;
                  v59 = *(WebCore::IDBRequest **)(v53 + 8 * v58);
                  ++v60;
                  if (v59 == this)
                    goto LABEL_111;
                }
                v58 = *(unsigned int *)(v53 - 4);
              }
LABEL_111:
              if (v58 != *(_DWORD *)(v53 - 4))
              {
                v61 = *(unsigned int **)(v53 + 8 * v58);
                *(_QWORD *)(v53 + 8 * v58) = -1;
                if (v61)
                {
                  v62 = v61 + 15;
                  do
                  {
                    v63 = __ldaxr(v62);
                    v64 = v63 - 1;
                  }
                  while (__stlxr(v64, v62));
                  if (!v64)
                  {
                    atomic_store(1u, v61 + 15);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 72))(v61);
                  }
                }
                ++*(_DWORD *)(*v52 - 16);
                v65 = *v52;
                if (*v52)
                  v66 = *(_DWORD *)(v65 - 12) - 1;
                else
                  v66 = -1;
                *(_DWORD *)(v65 - 12) = v66;
                v67 = *v52;
                if (*v52)
                {
                  v68 = 6 * *(_DWORD *)(v67 - 12);
                  v69 = *(_DWORD *)(v67 - 4);
                  if (v68 < v69 && v69 >= 9)
                    WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::rehash((uint64_t *)(v51 + 328), v69 >> 1, 0);
                }
              }
            }
            if (*(_BYTE *)(v51 + 136) == 1)
            {
              if (*(_BYTE *)(v51 + 137))
              {
                v71 = *(_QWORD *)(v51 + 296);
                if ((!v71 || !*(_DWORD *)(v71 - 12)) && (!*v52 || !*(_DWORD *)(*v52 - 12)))
                  WebCore::IDBTransaction::commitInternal((WebCore::IDBTransaction *)v51);
              }
            }
          }
        }
      }
    }
    result = v75;
    if (v75)
    {
      v75 = 0;
      LODWORD(v76) = 0;
      result = (WTF *)WTF::fastFree(result, v28);
    }
    goto LABEL_92;
  }
  v75 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v75 = this;
  v76 = 0x100000001;
  WebCore::EventDispatcher::dispatchEvent((unsigned int *)&v75, a2);
  result = v75;
  if (v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    result = (WTF *)WTF::fastFree(result, v6);
  }
  if (this)
  {
    do
    {
LABEL_92:
      v46 = __ldaxr(v4);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v4));
    if (!v47)
    {
      atomic_store(1u, (unsigned int *)this + 15);
      return (WTF *)(*(uint64_t (**)(WebCore::IDBRequest *))(*(_QWORD *)this + 72))(this);
    }
  }
  return result;
}

uint64_t WebCore::IDBOpenDBRequest::onSuccess(WebCore::IDBOpenDBRequest *this, const WebCore::IDBResultData *a2)
{
  uint64_t v4;
  WebCore::ScriptExecutionContext *v5;
  unsigned int **v6;
  WebCore::IDBDatabase *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _DWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  bmalloc::api *v23;
  void *v24;
  WebCore *v25;

  v4 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v4)
    v5 = (WebCore::ScriptExecutionContext *)(v4 - 96);
  else
    v5 = 0;
  v6 = (unsigned int **)*((_QWORD *)this + 43);
  v7 = (WebCore::IDBDatabase *)bmalloc::api::isoAllocate();
  v25 = WebCore::IDBDatabase::IDBDatabase(v7, v5, v6, a2);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v25 + 4);
  WebCore::IDBRequest::setResult(this, (unsigned int **)&v25);
  v8 = (unsigned int *)v25;
  v25 = 0;
  if (v8)
  {
    v9 = v8 + 6;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 6);
      WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v8);
      v8 = (unsigned int *)bmalloc::api::isoDeallocate(v23, v24);
    }
  }
  *((_DWORD *)this + 88) = 1;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow((WebCore *)v8);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  v15 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 16) = 1;
  *(_DWORD *)(v15 + 20) = *(_DWORD *)(v15 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v14 + 2016) != 0);
  v18 = *(_DWORD **)(v14 + 2016);
  if (v18)
    *v18 += 2;
  *(_QWORD *)(v15 + 24) = v18;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = v17;
  *(_QWORD *)(v15 + 64) = 0;
  v19 = (unsigned int *)((char *)this + 60);
  *(_QWORD *)v15 = off_1E3357FC8;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *(_QWORD *)(v15 + 72) = this;
  v25 = (WebCore *)v15;
  v21 = *((_QWORD *)this + 4);
  if (!v21
    || (v22 = *(_QWORD *)(v21 + 8)) == 0
    || *(_BYTE *)(v22 + 180)
    || (result = (uint64_t)WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this, 1, (uint64_t *)&v25), (v15 = (uint64_t)v25) != 0))
  {
    if (*(_DWORD *)(v15 + 16) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    else
      --*(_DWORD *)(v15 + 16);
  }
  return result;
}

_DWORD *WebCore::IDBRequest::setResult(_DWORD *result, unsigned int **a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  bmalloc::api *v16;
  void *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[15];
  char v21;

  v2 = *((_QWORD *)result + 4);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return result;
  v5 = result;
  v6 = v3 - 96;
  v7 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v7 == 1 || v7 == 2)
      ++*(_DWORD *)(v3 + 216);
  }
  else
  {
    *(_DWORD *)(v3 - 264) += 2;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 344))(v3 - 96);
  MEMORY[0x19AEA3294](v20, v8);
  v9 = *a2;
  *a2 = 0;
  v10 = v5[76];
  if ((_DWORD)v10 != -1)
  {
    v11 = (unsigned int **)(v5 + 36);
    if ((_DWORD)v10 == 1)
    {
      v12 = *v11;
      *v11 = v9;
      if (v12)
      {
        v13 = v12 + 6;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v12 + 6);
          WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v12);
          bmalloc::api::isoDeallocate(v16, v17);
        }
      }
      goto LABEL_14;
    }
    ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v10])(&v21, v11);
  }
  *((_QWORD *)v5 + 18) = v9;
  v5[76] = 1;
LABEL_14:
  *((_QWORD *)v5 + 15) = 0;
  v18 = *((_QWORD *)v5 + 16);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 3;
    *((_QWORD *)v5 + 16) = 0;
  }
  result = (_DWORD *)MEMORY[0x19AEA32A0](v20);
  v19 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v19 == 1)
    {
      if (*(_DWORD *)(v3 + 216) == 1)
        return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v3 - 96);
      else
        --*(_DWORD *)(v3 + 216);
    }
    else if (v19 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
    }
  }
  else if (*(_DWORD *)(v3 - 264) == 2)
  {
    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
      return (_DWORD *)WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288));
  }
  else
  {
    *(_DWORD *)(v3 - 264) -= 2;
  }
  return result;
}

uint64_t WebCore::IDBRequest::scriptExecutionContext(WebCore::IDBRequest *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

unsigned int *WebCore::IDBOpenDBRequest::onUpgradeNeeded(WebCore::IDBOpenDBRequest *this, const WebCore::IDBTransactionInfo **a2)
{
  uint64_t v4;
  WebCore::ScriptExecutionContext *v5;
  unsigned int **v6;
  WebCore::IDBDatabase *v7;
  const WebCore::IDBTransactionInfo *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WebCore::IDBTransaction *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int *v18;
  unsigned int v19;
  WebCore *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *result;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  bmalloc::api *v41;
  void *v42;
  bmalloc::api *v43;
  void *v44;
  bmalloc::api *v45;
  void *v46;
  WebCore::IDBTransaction *v47;
  WebCore::IDBDatabase *v48;
  uint64_t v49[3];
  WebCore *v50;

  v4 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v4)
    v5 = (WebCore::ScriptExecutionContext *)(v4 - 96);
  else
    v5 = 0;
  v6 = (unsigned int **)*((_QWORD *)this + 43);
  v7 = (WebCore::IDBDatabase *)bmalloc::api::isoAllocate();
  v48 = WebCore::IDBDatabase::IDBDatabase(v7, v5, v6, (const WebCore::IDBResultData *)a2);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v48 + 4);
  v8 = a2[8];
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x195380528);
  }
  WebCore::IDBDatabase::startVersionChangeTransaction(v7, v8, this, &v47);
  v9 = *(_QWORD *)(*((_QWORD *)v47 + 16) + 8);
  v10 = *((_QWORD *)v47 + 13);
  WebCore::IDBRequest::setResult(this, (unsigned int **)&v48);
  *((_DWORD *)this + 88) = 1;
  v12 = v47;
  v47 = 0;
  v13 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v12;
  if (v13)
  {
    v14 = v13 + 6;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v13, v11);
      bmalloc::api::isoDeallocate(v41, v42);
    }
  }
  v17 = (uint64_t *)(*((_QWORD *)this + 8) + 328);
  v18 = (unsigned int *)((char *)this + 60);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v50 = this;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)v49, v17, &v50);
  v20 = v50;
  v50 = 0;
  if (v20)
  {
    v21 = (unsigned int *)((char *)v20 + 60);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v20 + 15);
      v20 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v20 + 72))(v20);
    }
  }
  v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v24 || (v25 = *(_QWORD *)(v24 + 96)) == 0)
    v25 = WebCore::threadGlobalDataSlow(v20);
  v26 = *(_QWORD *)(v25 + 40);
  if (!v26)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v25);
    v26 = *(_QWORD *)(v25 + 40);
  }
  v27 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v27);
  *(_QWORD *)(v27 + 8) = 0;
  *(_DWORD *)(v27 + 16) = 1;
  *(_DWORD *)(v27 + 20) = *(_DWORD *)(v27 + 20) & 0xFFC00000 | 0x230200 | (*(_QWORD *)(v26 + 2224) != 0);
  v29 = *(_DWORD **)(v26 + 2224);
  if (v29)
    *v29 += 2;
  *(_QWORD *)(v27 + 24) = v29;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 48) = 0;
  *(_QWORD *)(v27 + 56) = v28;
  *(_QWORD *)v27 = off_1E3358180;
  *(_QWORD *)(v27 + 64) = 0;
  *(_QWORD *)(v27 + 72) = 0;
  *(_QWORD *)(v27 + 80) = 0;
  *(_QWORD *)(v27 + 88) = v9;
  *(_BYTE *)(v27 + 96) = 0;
  *(_BYTE *)(v27 + 104) = 0;
  if (v10)
  {
    *(_QWORD *)(v27 + 96) = v10;
    *(_BYTE *)(v27 + 104) = 1;
  }
  v49[0] = v27;
  v30 = *((_QWORD *)this + 4);
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 8);
    if (v31)
    {
      if (!*(_BYTE *)(v31 + 180))
      {
        WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this, 1, v49);
        v27 = v49[0];
        if (!v49[0])
          goto LABEL_30;
        if (*(_DWORD *)(v49[0] + 16) != 1)
        {
          --*(_DWORD *)(v49[0] + 16);
          goto LABEL_30;
        }
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
LABEL_30:
  v33 = (unsigned int *)v47;
  v47 = 0;
  if (v33)
  {
    v34 = v33 + 6;
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v33 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v33, v32);
      bmalloc::api::isoDeallocate(v43, v44);
    }
  }
  result = (unsigned int *)v48;
  v48 = 0;
  if (result)
  {
    v38 = result + 6;
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)result);
      return (unsigned int *)bmalloc::api::isoDeallocate(v45, v46);
    }
  }
  return result;
}

_QWORD *WebCore::IDBOpenDBRequest::onDeleteDatabaseSuccess(WebCore::IDBOpenDBRequest *this, const WebCore::IDBResultData *a2)
{
  uint64_t v2;
  uint64_t v4;
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;

  v2 = *((_QWORD *)a2 + 7);
  if (!v2)
  {
    __break(0xC471u);
    JUMPOUT(0x19538070CLL);
  }
  v4 = *(_QWORD *)(v2 + 8);
  *((_DWORD *)this + 88) = 1;
  v5 = (WebCore *)WebCore::IDBRequest::setResultToUndefined(this);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(v5);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
  *(_QWORD *)(v9 + 8) = 0;
  v11 = *(_DWORD *)(v9 + 20) & 0xFFC00000 | 0x230200 | (*(_QWORD *)(v8 + 2016) != 0);
  *(_DWORD *)(v9 + 16) = 1;
  *(_DWORD *)(v9 + 20) = v11;
  v12 = *(_DWORD **)(v8 + 2016);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(v9 + 24) = v12;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = v10;
  *(_QWORD *)v9 = off_1E3358180;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = v4;
  *(_BYTE *)(v9 + 96) = 0;
  *(_BYTE *)(v9 + 104) = 0;
  v16 = v9;
  v13 = *((_QWORD *)this + 4);
  if (!v13)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14 || *(_BYTE *)(v14 + 180))
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this, 1, &v16);
  v9 = v16;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 16) == 1)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    --*(_DWORD *)(v16 + 16);
  }
  return result;
}

unsigned int *WebCore::IDBOpenDBRequest::requestCompleted(unsigned int *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13[2];

  *((_BYTE *)this + 465) = 0;
  v2 = *((_QWORD *)this + 4);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v4 = *(unsigned __int8 *)(v3 + 180);
    v5 = *(unsigned __int8 *)a2;
    if (!v4)
    {
      switch(*(_BYTE *)a2)
      {
        case 0:
          return (unsigned int *)WebCore::IDBOpenDBRequest::onError((WebCore::IDBOpenDBRequest *)this, a2);
        case 1:
          return (unsigned int *)WebCore::IDBOpenDBRequest::onSuccess((WebCore::IDBOpenDBRequest *)this, (const WebCore::IDBResultData *)a2);
        case 2:
          return WebCore::IDBOpenDBRequest::onUpgradeNeeded((WebCore::IDBOpenDBRequest *)this, a2);
        case 3:
          return (unsigned int *)WebCore::IDBOpenDBRequest::onDeleteDatabaseSuccess((WebCore::IDBOpenDBRequest *)this, (const WebCore::IDBResultData *)a2);
        default:
          __break(0xC471u);
          goto LABEL_24;
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)a2;
  }
  if (v5 == 2)
  {
    if (*((_BYTE *)a2 + 48))
    {
      v8 = a2[8];
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x19538088CLL);
      }
      v6 = (uint64_t *)*((_QWORD *)this + 43);
      v7 = (uint64_t)a2[5];
      v10 = *(_OWORD *)v8;
      v11 = 1;
      goto LABEL_14;
    }
LABEL_24:
    __break(1u);
    JUMPOUT(0x1953808B0);
  }
  if (v5 != 1)
    return this;
  if (!*((_BYTE *)a2 + 48))
    goto LABEL_24;
  v6 = (uint64_t *)*((_QWORD *)this + 43);
  v7 = (uint64_t)a2[5];
  LOBYTE(v10) = 0;
  v11 = 0;
LABEL_14:
  v12 = v7;
  v13[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::abortOpenAndUpgradeNeeded;
  v13[1] = 0;
  this = (unsigned int *)WTF::isMainThread((WTF *)this);
  v9 = *v6;
  if (!(_DWORD)this)
    return (unsigned int *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,std::optional<WebCore::IDBResourceIdentifier> const&>((uint64_t)v6, (unsigned int *)v9, v13, &v12, (uint64_t *)&v10);
  if (*(_BYTE *)(v9 + 16))
    return (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t, __int128 *))(**(_QWORD **)(*(_QWORD *)(v9 + 8)
                                                                                                + 8)
                                                                                  + 200))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8), v7, &v10);
  return this;
}

_QWORD *WebCore::IDBOpenDBRequest::requestBlocked(WebCore::IDBOpenDBRequest *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;

  *((_BYTE *)this + 465) = 1;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(this);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
  *(_QWORD *)(v9 + 8) = 0;
  v11 = *(_DWORD *)(v9 + 20) & 0xFFC00000 | 0x230200 | (*(_QWORD *)(v8 + 296) != 0);
  *(_DWORD *)(v9 + 16) = 1;
  *(_DWORD *)(v9 + 20) = v11;
  v12 = *(_DWORD **)(v8 + 296);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(v9 + 24) = v12;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = v10;
  *(_QWORD *)v9 = off_1E3358180;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = a2;
  *(_BYTE *)(v9 + 96) = 0;
  *(_BYTE *)(v9 + 104) = 0;
  if (a3)
  {
    *(_QWORD *)(v9 + 96) = a3;
    *(_BYTE *)(v9 + 104) = 1;
  }
  v16 = v9;
  v13 = *((_QWORD *)this + 4);
  if (!v13)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14 || *(_BYTE *)(v14 + 180))
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this, 1, &v16);
  v9 = v16;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 16) == 1)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    --*(_DWORD *)(v16 + 16);
  }
  return result;
}

WTF::StringImpl *WebCore::IDBOpenDBRequest::setIsContextSuspended(WTF::StringImpl *this, char a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int isMainThread;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  WTF::StringImpl *v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _BYTE v30[24];
  int v31;
  _BYTE v32[24];
  int v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 464) = a2;
  if (*((_BYTE *)this + 465))
  {
    v2 = (uint64_t)this;
    v26 = *(_QWORD *)(*((_QWORD *)this + 43) + 8);
    v27 = v26;
    v28 = *((_QWORD *)this + 14);
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 47);
    if (v3)
      *(_DWORD *)v3 += 2;
    v29 = v3;
    v30[0] = 0;
    v31 = -1;
    v4 = *((unsigned int *)this + 102);
    if ((_DWORD)v4 != -1)
    {
      this = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v4])(&v16, v30, (char *)this + 384);
      v31 = v4;
    }
    v32[0] = 0;
    v33 = -1;
    v5 = *(unsigned int *)(v2 + 440);
    if ((_DWORD)v5 != -1)
    {
      this = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v5])(&v16, v32, v2 + 416);
      v33 = v5;
    }
    v34 = *(_BYTE *)(v2 + 448);
    v35 = *(_QWORD *)(v2 + 456);
    v36 = *(_BYTE *)(v2 + 356);
    v6 = *(uint64_t **)(v2 + 344);
    v16 = (WTF::StringImpl *)WebCore::IDBClient::IDBConnectionToServer::openDBRequestCancelled;
    v17 = 0;
    isMainThread = WTF::isMainThread(this);
    v8 = *v6;
    if (isMainThread)
    {
      if (*(_BYTE *)(v8 + 16))
        (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 8) + 216))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8), &v26);
    }
    else
    {
      WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData const&>((uint64_t)v6, (unsigned int *)v8, (uint64_t *)&v16, (WebCore::IDBOpenRequestData *)&v26);
    }
    v9 = v27;
    v10 = v28;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v15;
    if (v15)
      *(_DWORD *)v15 += 2;
    v17 = v9;
    v18 = v10;
    v21 = 0;
    v22 = 0;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    LOBYTE(v16) = 0;
    v19 = 280;
    if (v15)
    {
      v13 = *(_DWORD *)v15;
      *(_DWORD *)v15 += 2;
      v20 = v15;
      if (v13)
      {
        *(_DWORD *)v15 = v13;
      }
      else
      {
        WTF::StringImpl::destroy(v15, v11);
        v12 = v15;
      }
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    else
    {
      v20 = 0;
    }
    WebCore::IDBOpenDBRequest::requestCompleted((unsigned int *)v2, &v16);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v16);
    if (v33 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3358350[v33])(&v16, v32);
    v33 = -1;
    if (v31 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3358350[v31])(&v16, v30);
    v31 = -1;
    this = v29;
    v29 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v14);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

WebCore::IDBRequest *WebCore::IDBRequest::IDBRequest(WebCore::IDBRequest *this, WebCore::ScriptExecutionContext *a2, WebCore::IDBObjectStore *a3, WebCore::IDBTransaction *a4)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v25;
  _QWORD *v26;

  v6 = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E33A4FC0;
  v8 = (_QWORD *)((char *)this + 24);
  if (!*((_BYTE *)a2 + 274))
  {
    v9 = (char *)a2 - 192;
    v10 = *((_QWORD *)a2 + 64);
    if (v10)
    {
      v11 = *(char **)(v10 + 8);
      if (v11)
        v9 = v11;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v9 + 192);
  }
  *((_QWORD *)this + 3) = &off_1E33A18C0;
  *((_QWORD *)this + 4) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::IDBRequest *)((char *)this + 24), v6);
  *((_QWORD *)this + 3) = &off_1E33A0540;
  *((_QWORD *)this + 5) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195380EE8);
  }
  v26 = v8;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v26, (uint64_t)&v25);
  *v8 = &off_1E3357608;
  v12 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12)
    v12 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *((_QWORD *)this + 6) = v12;
  *((_BYTE *)this + 56) = 0;
  *((_DWORD *)this + 15) = 1;
  *(_QWORD *)this = off_1E3357EC8;
  *((_QWORD *)this + 3) = &unk_1E3357F70;
  v14 = (unsigned int *)((char *)a4 + 24);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = a4;
  *((_WORD *)this + 44) = 0;
  *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 9) + 72) + 8);
  do
  {
    v16 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v17 = v16 + 2;
  }
  while (__stlxr(v17, &WebCore::nextClientResourceNumber(void)::currentNumber));
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = v17;
  __dmb(0xAu);
  v18 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v18)
    *(_QWORD *)(v18 + 8) = 3;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 1;
  *((_DWORD *)this + 76) = 7;
  v19 = (unsigned int *)(*((_QWORD *)a3 + 19) + 24);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *((_QWORD *)this + 39) = a3;
  *((_DWORD *)this + 80) = 0;
  *((_BYTE *)this + 328) = 1;
  *((_QWORD *)this + 42) = 0;
  v21 = *(unsigned int ***)(*((_QWORD *)a4 + 9) + 72);
  v22 = *v21;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  *((_QWORD *)this + 43) = v21;
  *((_DWORD *)this + 88) = 0;
  *((_DWORD *)this + 89) = 16777218;
  *((_WORD *)this + 180) = 0;
  *((_QWORD *)this + 46) = 0;
  return this;
}

WebCore::IDBRequest *WebCore::IDBRequest::IDBRequest(WebCore::IDBRequest *this, WebCore::ScriptExecutionContext *a2, WebCore::IDBIndex *a3, WebCore::IDBTransaction *a4)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v25;
  _QWORD *v26;

  v6 = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E33A4FC0;
  v8 = (_QWORD *)((char *)this + 24);
  if (!*((_BYTE *)a2 + 274))
  {
    v9 = (char *)a2 - 192;
    v10 = *((_QWORD *)a2 + 64);
    if (v10)
    {
      v11 = *(char **)(v10 + 8);
      if (v11)
        v9 = v11;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v9 + 192);
  }
  *((_QWORD *)this + 3) = &off_1E33A18C0;
  *((_QWORD *)this + 4) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::IDBRequest *)((char *)this + 24), v6);
  *((_QWORD *)this + 3) = &off_1E33A0540;
  *((_QWORD *)this + 5) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x19538110CLL);
  }
  v26 = v8;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v26, (uint64_t)&v25);
  *v8 = &off_1E3357608;
  v12 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12)
    v12 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *((_QWORD *)this + 6) = v12;
  *((_BYTE *)this + 56) = 0;
  *((_DWORD *)this + 15) = 1;
  *(_QWORD *)this = off_1E3357EC8;
  *((_QWORD *)this + 3) = &unk_1E3357F70;
  v14 = (unsigned int *)((char *)a4 + 24);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = a4;
  *((_WORD *)this + 44) = 0;
  *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 9) + 72) + 8);
  do
  {
    v16 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v17 = v16 + 2;
  }
  while (__stlxr(v17, &WebCore::nextClientResourceNumber(void)::currentNumber));
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = v17;
  __dmb(0xAu);
  v18 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v18)
    *(_QWORD *)(v18 + 8) = 3;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 1;
  *((_DWORD *)this + 76) = 7;
  v19 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)a3 + 18) + 152) + 24);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *((_QWORD *)this + 39) = a3;
  *((_DWORD *)this + 80) = 1;
  *((_BYTE *)this + 328) = 1;
  *((_QWORD *)this + 42) = 0;
  v21 = *(unsigned int ***)(*((_QWORD *)a4 + 9) + 72);
  v22 = *v21;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  *((_QWORD *)this + 43) = v21;
  *((_DWORD *)this + 88) = 0;
  *((_DWORD *)this + 89) = 16777218;
  *((_WORD *)this + 180) = 0;
  *((_QWORD *)this + 46) = 0;
  return this;
}

void `non-virtual thunk to'WebCore::IDBRequest::~IDBRequest(WebCore::IDBRequest *this)
{
  WebCore::IDBRequest::~IDBRequest((WebCore::IDBRequest *)((char *)this - 24));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::IDBRequest::~IDBRequest((WebCore::IDBRequest *)((char *)this - 24));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::IDBRequest::eventTargetInterface(WebCore::IDBRequest *this)
{
  return 62;
}

BOOL WebCore::IDBRequest::virtualHasPendingActivity(WebCore::IDBRequest *this)
{
  return *((_BYTE *)this + 360) != 2;
}

BOOL `non-virtual thunk to'WebCore::IDBRequest::virtualHasPendingActivity(WebCore::IDBRequest *this)
{
  return *((_BYTE *)this + 336) != 2;
}

unsigned int *WebCore::IDBRequest::stop(WebCore::IDBRequest *this)
{
  unsigned int *result;

  (*(void (**)(WebCore::IDBRequest *))(*(_QWORD *)this + 136))(this);
  (*(void (**)(WebCore::IDBRequest *))(*(_QWORD *)this + 40))(this);
  result = WebCore::IDBRequest::clearWrappers((unsigned int *)this);
  *((_BYTE *)this + 360) = 2;
  return result;
}

unsigned int *WebCore::IDBRequest::clearWrappers(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  WebCore::IDBRequest *v11;
  _BYTE v12[15];
  char v13;
  char *v14;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      v4 = v2 - 96;
      v5 = *(unsigned __int8 *)(v2 + 178);
      if (*(_BYTE *)(v2 + 178))
      {
        if (v5 == 1 || v5 == 2)
          ++*(_DWORD *)(v2 + 216);
      }
      else
      {
        *(_DWORD *)(v2 - 264) += 2;
      }
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 344))(v2 - 96);
      MEMORY[0x19AEA3294](v12, v6);
      *((_QWORD *)v3 + 15) = 0;
      v7 = *((_QWORD *)v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 3;
        *((_QWORD *)v3 + 16) = 0;
      }
      v8 = v3[76];
      if ((_DWORD)v8 == -1)
      {
        v11 = (WebCore::IDBRequest *)std::__throw_bad_variant_access[abi:sn180100]();
      }
      else
      {
        v14 = &v13;
        ((void (*)(char **, unsigned int *))off_1E3358778[v8])(&v14, v3 + 36);
        this = (unsigned int *)MEMORY[0x19AEA32A0](v12);
        v10 = *(unsigned __int8 *)(v2 + 178);
        if (*(_BYTE *)(v2 + 178))
        {
          if (v10 == 1)
          {
            if (*(_DWORD *)(v2 + 216) == 1)
              return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v2 - 96);
            else
              --*(_DWORD *)(v2 + 216);
          }
          else if (v10 == 2)
          {
            return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
          }
        }
        else if (*(_DWORD *)(v2 - 264) == 2)
        {
          if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v9);
        }
        else
        {
          *(_DWORD *)(v2 - 264) -= 2;
        }
      }
    }
  }
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::IDBRequest::stop(WebCore::IDBRequest *this)
{
  unsigned int *v1;
  unsigned int *result;

  v1 = (unsigned int *)((char *)this - 24);
  (*(void (**)(char *))(*((_QWORD *)this - 3) + 136))((char *)this - 24);
  (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 40))(v1);
  result = WebCore::IDBRequest::clearWrappers(v1);
  *((_BYTE *)v1 + 360) = 2;
  return result;
}

WTF::StringImpl *WebCore::IDBRequest::uncaughtExceptionInEventHandler(WTF::StringImpl *this)
{
  uint64_t v1;
  WTF::StringImpl *v3;
  _DWORD *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;

  if (*((_QWORD *)this + 46))
  {
    *((_BYTE *)this + 361) = 1;
  }
  else
  {
    v1 = *((_QWORD *)this + 8);
    if (v1)
    {
      if (*((unsigned __int16 *)this + 44) < 0x100u || *((_WORD *)this + 44) != 16)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::DOMException::create(0x10u, &v6, (uint64_t *)&v7);
        v4 = v7;
        if (*(unsigned __int8 *)(v1 + 136) - 2 >= 3)
        {
          ++v7[2];
          v5 = *(_DWORD **)(v1 + 160);
          *(_QWORD *)(v1 + 160) = v4;
          if (v5)
          {
            if (v5[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
            else
              --v5[2];
          }
          WebCore::IDBTransaction::abortInternal((WebCore::IDBDatabase **)v1);
          v4 = v7;
        }
        v7 = 0;
        if (v4)
        {
          if (v4[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
          else
            --v4[2];
        }
        this = v6;
        v6 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v3);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

unsigned int *WebCore::IDBRequest::setResult(unsigned int *this, const WebCore::IDBKeyData *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return this;
  v5 = this;
  v6 = v3 - 96;
  v7 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v7 == 1 || v7 == 2)
      ++*(_DWORD *)(v3 + 216);
  }
  else
  {
    *(_DWORD *)(v3 - 264) += 2;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 344))(v3 - 96);
  MEMORY[0x19AEA3294](&v17, v8);
  v9 = v5[76];
  if ((_DWORD)v9 == -1)
    goto LABEL_11;
  if ((_DWORD)v9 != 2)
  {
    ((void (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v9])(&v18, v5 + 36);
LABEL_11:
    v12 = *(_BYTE *)a2;
    *((_BYTE *)v5 + 152) = 0;
    v5[76] = -1;
    *((_BYTE *)v5 + 144) = v12;
    v5[42] = -1;
    v13 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v13])(&v18);
      v5[42] = v13;
    }
    v5[76] = 2;
    goto LABEL_16;
  }
  *((_BYTE *)v5 + 144) = *(_BYTE *)a2;
  v10 = v5[42];
  v11 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
LABEL_15:
    v18 = v5 + 38;
    ((void (*)(unsigned int **))off_1E3358730[v11])(&v18);
    goto LABEL_16;
  }
  if ((_DWORD)v11 != -1)
    goto LABEL_15;
  ((void (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v10])(&v18, v5 + 38);
  v5[42] = -1;
LABEL_16:
  *((_QWORD *)v5 + 15) = 0;
  v14 = *((_QWORD *)v5 + 16);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 3;
    *((_QWORD *)v5 + 16) = 0;
  }
  this = (unsigned int *)MEMORY[0x19AEA32A0](&v17);
  v16 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v16 == 1)
    {
      if (*(_DWORD *)(v3 + 216) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v3 - 96);
      else
        --*(_DWORD *)(v3 + 216);
    }
    else if (v16 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
    }
  }
  else if (*(_DWORD *)(v3 - 264) == 2)
  {
    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v15);
  }
  else
  {
    *(_DWORD *)(v3 - 264) -= 2;
  }
  return this;
}

unsigned int *WebCore::IDBRequest::willIterateCursor(WebCore::IDBRequest *this, WebCore::IDBCursor *a2)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  int v9;
  char v10;

  ++*((_DWORD *)a2 + 4);
  result = (unsigned int *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = a2;
  if (result)
  {
    if (result[4] == 1)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  v4 = *((unsigned int *)this + 76);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  a2 = (WebCore::IDBRequest *)((char *)this + 144);
  if ((_DWORD)v4 != 7)
  {
    result = (unsigned int *)((uint64_t (*)(char *, WebCore::IDBCursor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v4])(&v10, a2);
LABEL_8:
    *((_DWORD *)this + 36) = 1;
    *((_DWORD *)this + 76) = 7;
    goto LABEL_9;
  }
  *(_DWORD *)a2 = 1;
LABEL_9:
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(unsigned __int8 *)(v6 + 178);
      if (*(_BYTE *)(v6 + 178))
      {
        if (v7 == 1 || v7 == 2)
          ++*(_DWORD *)(v6 + 216);
      }
      else
      {
        *(_DWORD *)(v6 - 264) += 2;
      }
      *((_DWORD *)this + 88) = 0;
      v8 = (_DWORD *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      *((_WORD *)this + 44) = 0;
      result = (unsigned int *)*((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v9 = *(unsigned __int8 *)(v6 + 178);
      if (*(_BYTE *)(v6 + 178))
      {
        if (v9 == 1)
        {
          if (*(_DWORD *)(v6 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 - 96) + 40))(v6 - 96);
          else
            --*(_DWORD *)(v6 + 216);
        }
        else if (v9 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 216));
        }
      }
      else if (*(_DWORD *)(v6 - 264) == 2)
      {
        if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), a2);
      }
      else
      {
        *(_DWORD *)(v6 - 264) -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::IDBRequest::didOpenOrIterateCursor(unsigned int *this, const WebCore::IDBResultData *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  uint64_t v11;
  const WebCore::IDBGetResult *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  void *v25;
  int v26;
  _BYTE v27[14];
  char v28;
  char v29;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return this;
  v5 = (uint64_t)this;
  v6 = v3 - 96;
  v7 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v7 == 1 || v7 == 2)
      ++*(_DWORD *)(v3 + 216);
  }
  else
  {
    *(_DWORD *)(v3 - 264) += 2;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 344))(v3 - 96);
  MEMORY[0x19AEA3294](v27, v8);
  v10 = (_DWORD *)(v5 + 144);
  v11 = *(unsigned int *)(v5 + 304);
  if ((_DWORD)v11 != -1)
  {
    if ((_DWORD)v11 == 7)
    {
      *v10 = 0;
      goto LABEL_10;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v11])(&v28, v5 + 144);
  }
  *(_DWORD *)(v5 + 144) = 0;
  *(_DWORD *)(v5 + 304) = 7;
LABEL_10:
  if ((*(_BYTE *)a2 & 0xFE) != 0xE)
    goto LABEL_27;
  v12 = (const WebCore::IDBGetResult *)*((_QWORD *)a2 + 10);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x195381B3CLL);
  }
  WebCore::IDBCursor::setGetResult(*(WebCore::IDBCursor **)(v5 + 336), (WebCore::IDBRequest *)v5, v12, *(_QWORD *)(v5 + 136));
  v13 = *((_QWORD *)a2 + 10);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x195381B5CLL);
  }
  v14 = *(unsigned __int8 *)(v13 + 152);
  v15 = *(unsigned int *)(v5 + 304);
  if (!v14)
  {
LABEL_26:
    if ((_DWORD)v15 != 7)
      goto LABEL_29;
LABEL_27:
    *(_QWORD *)(v5 + 120) = 0;
    v19 = *(_QWORD *)(v5 + 128);
    if (v19)
    {
      *(_QWORD *)(v19 + 8) = 3;
      *(_QWORD *)(v5 + 128) = 0;
    }
    goto LABEL_29;
  }
  if ((_DWORD)v15 == -1)
  {
LABEL_22:
    v18 = *(_QWORD *)(v5 + 336);
    if (v18)
      ++*(_DWORD *)(v18 + 16);
    *(_QWORD *)(v5 + 144) = v18;
    *(_DWORD *)(v5 + 304) = 0;
    goto LABEL_29;
  }
  if ((_DWORD)v15)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v15])(&v29, v5 + 144);
    goto LABEL_22;
  }
  v16 = *(_QWORD *)(v5 + 336);
  if (v16)
    ++*(_DWORD *)(v16 + 16);
  v17 = *(_DWORD **)v10;
  *(_QWORD *)v10 = v16;
  if (!v17)
    goto LABEL_29;
  if (v17[4] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    LODWORD(v15) = *(_DWORD *)(v5 + 304);
    goto LABEL_26;
  }
  --v17[4];
LABEL_29:
  v20 = *(_DWORD **)(v5 + 336);
  *(_QWORD *)(v5 + 336) = 0;
  if (v20)
  {
    if (v20[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[4];
  }
  *(_DWORD *)(v5 + 352) = 1;
  v21 = *((unsigned __int16 *)a2 + 12);
  *(_WORD *)(v5 + 88) = v21;
  v22 = (_DWORD *)*((_QWORD *)a2 + 4);
  v23 = v21 >> 8;
  if (v22)
    *v22 += 2;
  v24 = *(WTF::StringImpl **)(v5 + 96);
  *(_QWORD *)(v5 + 96) = v22;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::destroy(v24, v9);
      v23 = *(unsigned __int8 *)(v5 + 89);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (v23)
    WebCore::IDBRequest::onError((WTF::StringImpl **)v5);
  else
    WebCore::IDBRequest::onSuccess((WebCore::IDBRequest *)v5);
  this = (unsigned int *)MEMORY[0x19AEA32A0](v27);
  v26 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v26 == 1)
    {
      if (*(_DWORD *)(v3 + 216) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v3 - 96);
      else
        --*(_DWORD *)(v3 + 216);
    }
    else if (v26 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
    }
  }
  else if (*(_DWORD *)(v3 - 264) == 2)
  {
    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v25);
  }
  else
  {
    *(_DWORD *)(v3 - 264) -= 2;
  }
  return this;
}

uint64_t WebCore::IDBRequest::onError(WTF::StringImpl **this)
{
  uint64_t v2;
  WebCore *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;

  if (*((_BYTE *)this + 89))
  {
    WebCore::DOMException::create(*((unsigned __int8 *)this + 88), this + 12, &v13);
    v2 = v13;
  }
  else
  {
    v2 = 0;
  }
  v3 = this[9];
  this[9] = (WTF::StringImpl *)v2;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
      v3 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v3 + 8))(v3);
    else
      --*((_DWORD *)v3 + 2);
  }
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(v3);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
  *(_DWORD *)(v7 + 16) = 1;
  *(_QWORD *)v7 = off_1E33A4B48;
  *(_QWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x1E8206 | (*(_QWORD *)(v6 + 784) != 0);
  v10 = *(_DWORD **)(v6 + 784);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v7 + 24) = v10;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = v9;
  *(_QWORD *)(v7 + 64) = 0;
  v13 = v7;
  v11 = this[4];
  if (v11)
  {
    v12 = *((_QWORD *)v11 + 1);
    if (v12 && !*(_BYTE *)(v12 + 180))
    {
      result = (uint64_t)WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(this + 3, (uint64_t)this, 1, &v13);
      v7 = v13;
      v13 = 0;
      if (!v7)
        return result;
    }
    else
    {
      v13 = 0;
    }
    if (*(_DWORD *)(v7 + 16) != 1)
    {
      --*(_DWORD *)(v7 + 16);
      return result;
    }
  }
  else
  {
    v13 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebCore::IDBRequest::onSuccess(WebCore::IDBRequest *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v8 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v9 = *(_QWORD *)(v4 + 2016) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v8 | v9;
  v10 = *(_DWORD **)(v4 + 2016);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = 0;
  v13 = v5;
  v11 = *((_QWORD *)this + 4);
  if (!v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12
    || *(_BYTE *)(v12 + 180)
    || (result = (uint64_t)WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this, 1, &v13), (v5 = v13) != 0))
  {
    if (*(_DWORD *)(v5 + 16) != 1)
    {
      --*(_DWORD *)(v5 + 16);
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WebCore::IDBTransaction::visitReferencedObjectStores<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 304);
  if (__ldaxr((unsigned __int8 *)(result + 304)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 304);
LABEL_5:
  v6 = *(_QWORD *)(v3 + 312);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = (_QWORD *)(v6 + 16 * v7);
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = *(_QWORD **)(v3 + 312);
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = *(_QWORD **)(v3 + 312);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v9 = (_QWORD *)(v6 + 16 * v7);
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = (_QWORD *)(v6 + 16 * v7);
  if (v6)
  {
LABEL_12:
    v11 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    goto LABEL_17;
  }
  v11 = 0;
LABEL_17:
  while (v9 != v11)
  {
    v12 = v9[1];
    if (v12)
      v13 = *(_BYTE *)(a2 + 130) == 0;
    else
      v13 = 0;
    if (v13)
    {
      result = *(_QWORD *)(a2 + 120);
      v14 = *(_QWORD *)(result + 48);
      v15 = *(_DWORD *)(v14 + 4);
      v16 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      v20 = v19;
      while (1)
      {
        v21 = *(_QWORD *)(v14 + 8 * v20 + 16);
        if (!v21)
          break;
        if (v12 == v21)
          goto LABEL_32;
        v20 = (v20 + 1) & v15;
        if (v20 == v19)
        {
LABEL_27:
          __break(0xC471u);
          JUMPOUT(0x195382200);
        }
      }
      result = WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(a2 + 131))
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v12);
        ++*(_QWORD *)(a2 + 72);
      }
    }
LABEL_32:
    v22 = v9 + 2;
    v9 = v8;
    if (v22 != v8)
    {
      v9 = v22;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  v23 = *(_QWORD *)(v3 + 320);
  if (v23)
  {
    v24 = *(unsigned int *)(v23 - 4);
    v25 = (_QWORD *)(v23 + 16 * v24);
    if (*(_DWORD *)(v23 - 12))
    {
      v26 = *(_QWORD **)(v3 + 320);
      if ((_DWORD)v24)
      {
        v27 = 16 * v24;
        v26 = *(_QWORD **)(v3 + 320);
        while ((unint64_t)(*v26 + 1) <= 1)
        {
          v26 += 2;
          v27 -= 16;
          if (!v27)
          {
            v26 = v25;
            goto LABEL_45;
          }
        }
      }
      goto LABEL_45;
    }
    v26 = (_QWORD *)(v23 + 16 * v24);
  }
  else
  {
    v26 = 0;
    v24 = 0;
  }
  v25 = (_QWORD *)(v23 + 16 * v24);
  if (v23)
  {
LABEL_45:
    v28 = (_QWORD *)(v23 + 16 * *(unsigned int *)(v23 - 4));
    goto LABEL_50;
  }
  v28 = 0;
LABEL_50:
  while (v26 != v28)
  {
    v29 = v26[1];
    if (v29)
      v30 = *(_BYTE *)(a2 + 130) == 0;
    else
      v30 = 0;
    if (v30)
    {
      result = *(_QWORD *)(a2 + 120);
      v31 = *(_QWORD *)(result + 48);
      v32 = *(_DWORD *)(v31 + 4);
      v33 = (~(v29 << 32) + v29) ^ ((unint64_t)(~(v29 << 32) + v29) >> 22);
      v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
      v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
      v36 = v32 & ((v35 >> 31) ^ v35);
      v37 = v36;
      while (1)
      {
        v38 = *(_QWORD *)(v31 + 8 * v37 + 16);
        if (!v38)
          break;
        if (v29 == v38)
          goto LABEL_65;
        v37 = (v37 + 1) & v32;
        if (v37 == v36)
          goto LABEL_27;
      }
      result = WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(a2 + 131))
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v29);
        ++*(_QWORD *)(a2 + 72);
      }
    }
LABEL_65:
    v39 = v26 + 2;
    v26 = v25;
    if (v39 != v25)
    {
      v26 = v39;
      while ((unint64_t)(*v26 + 1) <= 1)
      {
        v26 += 2;
        if (v26 == v25)
        {
          v26 = v25;
          break;
        }
      }
    }
  }
  v40 = __ldxr(v4);
  if (v40 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void *WebCore::IDBTransaction::bisoHeap(WebCore::IDBTransaction *this)
{
  return &WebCore::IDBTransaction::bisoHeap(void)::heap;
}

uint64_t WebCore::IDBTransaction::operator new(uint64_t this)
{
  if (this == 416)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

WebCore::IDBTransaction *WebCore::IDBTransaction::IDBTransaction(WebCore::IDBTransaction *this, WebCore::IDBDatabase *a2, const WebCore::IDBTransactionInfo *a3, WebCore::IDBOpenDBRequest *a4)
{
  unsigned int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  _OWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t *v36;
  unsigned int v37;
  _QWORD *v38;
  int v39;
  bmalloc::api *v41;
  void *v42;
  uint64_t v43[3];
  _QWORD *v44;

  *((_DWORD *)this + 6) = 1;
  v8 = (unsigned int *)((char *)this + 24);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E33A4FC0;
  v9 = (_QWORD *)((char *)this + 32);
  v10 = *((_QWORD *)a2 + 5);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
  {
    if (*(_BYTE *)(v11 + 178))
    {
      v12 = v11 - 96;
    }
    else
    {
      v13 = v11 - 288;
      v14 = *(_QWORD *)(v11 + 416);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
          v13 = v15;
      }
      v12 = v13 + 192;
    }
  }
  else
  {
    v12 = 0;
  }
  *((_QWORD *)this + 4) = &off_1E33A18C0;
  *((_QWORD *)this + 5) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::IDBTransaction *)((char *)this + 32), (WebCore::ScriptExecutionContext *)v12);
  *((_QWORD *)this + 4) = &off_1E33A0540;
  *((_QWORD *)this + 6) = 0;
  if (v12)
  {
    if (*(_BYTE *)(v12 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x19538259CLL);
    }
    v44 = v9;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v12 + 128), (uint64_t *)&v44, (uint64_t)v43);
  }
  *v9 = &off_1E3357608;
  v16 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v16)
    v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *((_QWORD *)this + 7) = v16;
  *((_BYTE *)this + 64) = 0;
  *(_QWORD *)this = off_1E3358090;
  *((_QWORD *)this + 4) = &unk_1E3358128;
  v18 = (unsigned int *)((char *)a2 + 24);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  *((_QWORD *)this + 9) = a2;
  WebCore::IDBTransactionInfo::IDBTransactionInfo((uint64_t)this + 80, a3);
  *((_WORD *)this + 68) = 1;
  *((_WORD *)this + 72) = 0;
  v21 = (_OWORD *)((char *)this + 168);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  if (a4)
  {
    v22 = (unsigned int *)((char *)a4 + 60);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
    *((_QWORD *)this + 21) = a4;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_BYTE *)this + 304) = 0;
    *((_QWORD *)this + 40) = 0;
    *((_QWORD *)this + 41) = 0;
    *((_QWORD *)this + 39) = 0;
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 + 1, v22));
  }
  else
  {
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 40) = 0;
    *((_QWORD *)this + 41) = 0;
    *v21 = 0u;
    *(_OWORD *)((char *)this + 184) = 0u;
    *(_OWORD *)((char *)this + 200) = 0u;
    *(_OWORD *)((char *)this + 216) = 0u;
    *(_OWORD *)((char *)this + 232) = 0u;
    *(_OWORD *)((char *)this + 248) = 0u;
    *(_OWORD *)((char *)this + 264) = 0u;
    *(_OWORD *)((char *)this + 280) = 0u;
    *(_OWORD *)((char *)this + 289) = 0u;
  }
  *((_QWORD *)this + 42) = a4;
  *((_WORD *)this + 172) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_BYTE *)this + 360) = 0;
  *((_BYTE *)this + 376) = 0;
  *((_BYTE *)this + 384) = 0;
  *((_BYTE *)this + 400) = 0;
  *((_QWORD *)this + 51) = 0;
  do
    v25 = __ldaxr(&WebCore::IDBTransaction::numberOfIDBTransactions);
  while (__stlxr(v25 + 1, &WebCore::IDBTransaction::numberOfIDBTransactions));
  if (*((_BYTE *)this + 96) == 2)
  {
    v26 = *(_QWORD *)v21;
    do
      v27 = __ldaxr(v8);
    while (__stlxr(v27 + 1, v8));
    v28 = *(unsigned int **)(v26 + 64);
    *(_QWORD *)(v26 + 64) = this;
    if (v28)
    {
      v29 = v28 + 6;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v28 + 6);
        WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v28, v20);
        bmalloc::api::isoDeallocate(v41, v42);
      }
    }
    *((_BYTE *)this + 137) = 1;
  }
  else
  {
    if (*((unsigned __int8 *)this + 136) - 2 >= 3)
      *((_BYTE *)this + 136) = 0;
    v32 = *((_QWORD *)this + 5);
    if (v32 && (v33 = *(_QWORD *)(v32 + 8)) != 0)
    {
      v34 = (unsigned __int8 *)(v33 - 96);
      v35 = *(unsigned __int8 *)(v33 + 178);
      if (*(_BYTE *)(v33 + 178))
      {
        if (v35 == 1 || v35 == 2)
          ++*(_DWORD *)(v33 + 216);
      }
      else
      {
        *(_DWORD *)(v33 - 264) += 2;
      }
    }
    else
    {
      v34 = 0;
    }
    v36 = (uint64_t *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v34 + 104))(v34);
    do
      v37 = __ldaxr(v8);
    while (__stlxr(v37 + 1, v8));
    v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v38 = &off_1E33587E8;
    v38[1] = this;
    v43[0] = (uint64_t)v38;
    WebCore::EventLoopTaskGroup::runAtEndOfMicrotaskCheckpoint(v36, v43);
    if (v43[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v43[0] + 8))(v43[0]);
    WebCore::IDBClient::IDBConnectionProxy::establishTransaction(*(WebCore::IDBClient::IDBConnectionProxy **)(*((_QWORD *)this + 9) + 72), this);
    v39 = v34[274];
    if (v34[274])
    {
      if (v39 == 1)
      {
        if (*((_DWORD *)v34 + 78) == 1)
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)v34 + 40))(v34);
        else
          --*((_DWORD *)v34 + 78);
      }
      else if (v39 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v34 + 78);
      }
    }
    else if (*((_DWORD *)v34 - 42) == 2)
    {
      if ((*((_WORD *)v34 - 81) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v34 - 192));
    }
    else
    {
      *((_DWORD *)v34 - 42) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::IDBTransaction::scriptExecutionContext(WebCore::IDBTransaction *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

void WebCore::IDBTransaction::~IDBTransaction(WebCore::IDBTransaction *this, WTF::StringImpl *a2)
{
  unsigned int v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::IDBObjectStore **v18;
  WebCore::IDBObjectStore *v19;
  bmalloc::api *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WebCore::IDBObjectStore *v26;
  bmalloc::api *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t k;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  WTF *v47;
  unsigned int **v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int **v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  WTF *v59;
  unint64_t v60;
  unint64_t v61;
  WTF *v62;
  unsigned int **v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int **v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  _DWORD *v79;
  WTF::StringImpl *v80;
  void *v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  void *v89;
  unsigned int **v90;
  unsigned int **v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int **v96;
  unsigned int **v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  WTF *v102;
  void *v103;
  bmalloc::api *v104;
  void *v105;

  do
    v3 = __ldaxr(&WebCore::IDBTransaction::numberOfIDBTransactions);
  while (__stlxr(v3 - 1, &WebCore::IDBTransaction::numberOfIDBTransactions));
  if (*((_BYTE *)this + 400))
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  v5 = (unsigned int *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v5)
  {
    v6 = v5 + 15;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 72))(v5);
    }
  }
  v9 = *((_QWORD *)this + 41);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 15;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 15);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 72))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  v16 = *((_QWORD *)this + 40);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = (WebCore::IDBObjectStore **)(v16 + 8);
      do
      {
        if (*(v18 - 1) != (WebCore::IDBObjectStore *)-1)
        {
          v19 = *v18;
          *v18 = 0;
          if (v19)
          {
            WebCore::IDBObjectStore::~IDBObjectStore(v19, a2);
            bmalloc::api::isoDeallocate(v20, v21);
          }
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  v22 = *((_QWORD *)this + 39);
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v23)
    {
      v24 = (WTF::StringImpl **)*((_QWORD *)this + 39);
      do
      {
        v25 = *v24;
        if (*v24 != (WTF::StringImpl *)-1)
        {
          v26 = v24[1];
          v24[1] = 0;
          if (v26)
          {
            WebCore::IDBObjectStore::~IDBObjectStore(v26, a2);
            bmalloc::api::isoDeallocate(v27, v28);
            v25 = *v24;
          }
          *v24 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, a2);
            else
              *(_DWORD *)v25 -= 2;
          }
        }
        v24 += 2;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree((WTF *)(v22 - 16), a2);
  }
  v29 = *((_QWORD *)this + 37);
  if (v29)
  {
    v30 = *(unsigned int *)(v29 - 4);
    if ((_DWORD)v30)
    {
      for (j = 0; j != v30; ++j)
      {
        if (*(_QWORD *)(v29 + 24 * j) != -1)
        {
          v32 = v29 + 24 * j;
          v33 = *(unsigned int **)(v32 + 16);
          *(_QWORD *)(v32 + 16) = 0;
          if (v33)
          {
            v34 = v33 + 2;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              atomic_store(1u, v33 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v29 - 16), a2);
  }
  v37 = *((_QWORD *)this + 36);
  if (v37)
  {
    v38 = *(unsigned int *)(v37 - 4);
    if ((_DWORD)v38)
    {
      for (k = 0; k != v38; ++k)
      {
        v40 = (unsigned int **)(v37 + 112 * k);
        if (*v40 != (unsigned int *)-1)
        {
          WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(v37 + 112 * k + 8));
          v41 = *v40;
          *v40 = 0;
          if (v41)
          {
            v42 = v41 + 2;
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              atomic_store(1u, v41 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v37 - 16), a2);
  }
  v45 = *((_QWORD *)this + 32);
  v46 = *((_QWORD *)this + 33);
  v47 = (WTF *)*((_QWORD *)this + 34);
  v48 = (unsigned int **)((char *)v47 + 8 * v46);
  if (v45 <= v46)
  {
    if (v45 == v46)
      goto LABEL_85;
    v53 = (unsigned int **)((char *)v47 + 8 * v45);
    do
    {
      v54 = *v53;
      *v53 = 0;
      if (v54)
      {
        v55 = v54 + 2;
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          atomic_store(1u, v54 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
        }
      }
      ++v53;
    }
    while (v53 != v48);
  }
  else
  {
    if (v46)
    {
      do
      {
        v49 = *(unsigned int **)v47;
        *(_QWORD *)v47 = 0;
        if (v49)
        {
          v50 = v49 + 2;
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            atomic_store(1u, v49 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
          }
        }
        v47 = (WTF *)((char *)v47 + 8);
      }
      while (v47 != (WTF *)v48);
      v47 = (WTF *)*((_QWORD *)this + 34);
      v45 = *((_QWORD *)this + 32);
    }
    v58 = *((unsigned int *)this + 70);
    if (v45 != v58)
    {
      v90 = (unsigned int **)((char *)v47 + 8 * v58);
      v91 = (unsigned int **)((char *)v47 + 8 * v45);
      do
      {
        v92 = *v91;
        *v91 = 0;
        if (v92)
        {
          v93 = v92 + 2;
          do
          {
            v94 = __ldaxr(v93);
            v95 = v94 - 1;
          }
          while (__stlxr(v95, v93));
          if (!v95)
          {
            atomic_store(1u, v92 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v92 + 8))(v92);
          }
        }
        ++v91;
      }
      while (v91 != v90);
    }
  }
  v47 = (WTF *)*((_QWORD *)this + 34);
LABEL_85:
  if (v47)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v47, a2);
  }
  v59 = (WTF *)*((_QWORD *)this + 30);
  if (v59)
  {
    *((_QWORD *)this + 30) = 0;
    *((_DWORD *)this + 62) = 0;
    WTF::fastFree(v59, a2);
  }
  v60 = *((_QWORD *)this + 24);
  v61 = *((_QWORD *)this + 25);
  v62 = (WTF *)*((_QWORD *)this + 26);
  v63 = (unsigned int **)((char *)v62 + 8 * v61);
  if (v60 <= v61)
  {
    if (v60 == v61)
      goto LABEL_109;
    v68 = (unsigned int **)((char *)v62 + 8 * v60);
    do
    {
      v69 = *v68;
      *v68 = 0;
      if (v69)
      {
        v70 = v69 + 2;
        do
        {
          v71 = __ldaxr(v70);
          v72 = v71 - 1;
        }
        while (__stlxr(v72, v70));
        if (!v72)
        {
          atomic_store(1u, v69 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v69 + 8))(v69);
        }
      }
      ++v68;
    }
    while (v68 != v63);
  }
  else
  {
    if (v61)
    {
      do
      {
        v64 = *(unsigned int **)v62;
        *(_QWORD *)v62 = 0;
        if (v64)
        {
          v65 = v64 + 2;
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            atomic_store(1u, v64 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 8))(v64);
          }
        }
        v62 = (WTF *)((char *)v62 + 8);
      }
      while (v62 != (WTF *)v63);
      v62 = (WTF *)*((_QWORD *)this + 26);
      v60 = *((_QWORD *)this + 24);
    }
    v73 = *((unsigned int *)this + 54);
    if (v60 != v73)
    {
      v96 = (unsigned int **)((char *)v62 + 8 * v73);
      v97 = (unsigned int **)((char *)v62 + 8 * v60);
      do
      {
        v98 = *v97;
        *v97 = 0;
        if (v98)
        {
          v99 = v98 + 2;
          do
          {
            v100 = __ldaxr(v99);
            v101 = v100 - 1;
          }
          while (__stlxr(v101, v99));
          if (!v101)
          {
            atomic_store(1u, v98 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 8))(v98);
          }
        }
        ++v97;
      }
      while (v97 != v96);
    }
  }
  v62 = (WTF *)*((_QWORD *)this + 26);
LABEL_109:
  if (v62)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v62, a2);
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 22, a2);
  v75 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v75)
  {
    v76 = v75 + 15;
    do
    {
      v77 = __ldaxr(v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v76));
    if (!v78)
    {
      atomic_store(1u, v75 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v75 + 72))(v75);
    }
  }
  v79 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v79)
  {
    if (v79[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v79 + 8))(v79);
    else
      --v79[2];
  }
  v80 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v74);
    else
      *(_DWORD *)v80 -= 2;
  }
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransaction *)((char *)this + 80), v74);
  v82 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v82)
  {
    v83 = v82 + 6;
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v82 + 6);
      WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v82);
      bmalloc::api::isoDeallocate(v104, v105);
    }
  }
  *((_QWORD *)this + 4) = &off_1E3357608;
  v86 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v86)
  {
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v86);
      WTF::Thread::~Thread((WTF::Thread *)v86);
      WTF::fastFree(v102, v103);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::IDBTransaction *)((char *)this + 32), v81);
  WebCore::EventTarget::~EventTarget(this, v89);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::IDBTransaction::~IDBTransaction(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::IDBTransaction::~IDBTransaction(WebCore::IDBTransaction *this, WTF::StringImpl *a2)
{
  WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::IDBTransaction::objectStoreNames@<X0>(WebCore::IDBTransaction *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  BOOL (*v27)(WTF *, const WTF::String *, const WTF::String *);

  if (*((_BYTE *)this + 96) != 2)
  {
    v13 = *((unsigned int *)this + 31);
    if (!(_DWORD)v13)
    {
      v8 = 0;
      LODWORD(v6) = 0;
      goto LABEL_16;
    }
    if (!(v13 >> 29))
    {
      v21 = WTF::fastMalloc((WTF *)(8 * v13));
      v8 = v21;
      v22 = *((unsigned int *)this + 31);
      if ((_DWORD)v22)
      {
        v23 = 0;
        v24 = *((_QWORD *)this + 14);
        v25 = 8 * v22;
        do
        {
          v26 = *(_DWORD **)(v24 + v23);
          if (v26)
            *v26 += 2;
          *(_QWORD *)(v21 + v23) = v26;
          v23 += 8;
        }
        while (v25 != v23);
      }
      LODWORD(v6) = v13;
      goto LABEL_16;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x195382F48);
  }
  v4 = *((_QWORD *)this + 9);
  v5 = *(_QWORD *)(v4 + 112);
  if (!v5)
  {
    v8 = 0;
    LODWORD(v6) = 0;
LABEL_15:
    LODWORD(v13) = 0;
    goto LABEL_16;
  }
  v6 = *(unsigned int *)(v5 - 12);
  if (!(_DWORD)v6)
  {
    v8 = 0;
    goto LABEL_15;
  }
  if (v6 >> 29)
    goto LABEL_39;
  v7 = WTF::fastMalloc((WTF *)(8 * v6));
  v8 = v7;
  v9 = *(_QWORD *)(v4 + 112);
  if (!v9 || !*(_DWORD *)(v9 - 12))
    goto LABEL_15;
  v10 = *(unsigned int *)(v9 - 4);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    v12 = *(_QWORD **)(v4 + 112);
    while ((unint64_t)(*v12 + 1) <= 1)
    {
      v12 += 9;
      v11 -= 72;
      if (!v11)
        goto LABEL_15;
    }
  }
  else
  {
    v12 = *(_QWORD **)(v4 + 112);
  }
  v18 = (_QWORD *)(v9 + 72 * v10);
  if (v12 == v18)
    goto LABEL_15;
  v19 = 0;
LABEL_23:
  v20 = (_DWORD *)v12[2];
  if (v20)
    *v20 += 2;
  LODWORD(v13) = v19 + 1;
  *(_QWORD *)(v7 + 8 * v19) = v20;
  while (1)
  {
    v12 += 9;
    if (v12 == v18)
      break;
    if ((unint64_t)(*v12 + 1) > 1)
    {
      ++v19;
      if (v12 != v18)
        goto LABEL_23;
      break;
    }
  }
LABEL_16:
  v14 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v8;
  *(_DWORD *)(v14 + 16) = v6;
  *(_DWORD *)(v14 + 20) = v13;
  *a2 = v14;
  v27 = WTF::codePointCompareLessThan;
  v15 = 126 - 2 * __clz(v13);
  if ((_DWORD)v13)
    v16 = v15;
  else
    v16 = 0;
  return std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>(v8, (WTF::StringImpl *)(v8 + 8 * v13), (uint64_t (**)(uint64_t *, uint64_t *))&v27, v16, 1);
}

uint64_t WebCore::IDBTransaction::objectStore@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int i;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  WTF **v22;
  uint64_t v23;
  WTF *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const WebCore::IDBObjectStoreInfo *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::ScriptExecutionContext *v44;
  WebCore::IDBObjectStore *v45;
  WebCore::IDBObjectStore *v46;
  unsigned int *v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  bmalloc::api *v50;
  void *v51;
  int v52;
  uint64_t v53;
  WebCore::IDBObjectStore *v54;

  v5 = *(_QWORD *)(this + 40);
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    *(_BYTE *)a4 = 8;
    *(_QWORD *)(a4 + 8) = 0;
    goto LABEL_6;
  }
  v6 = this;
  if (*(unsigned __int8 *)(this + 136) - 2 <= 2)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 8;
LABEL_6:
    *(_DWORD *)(a4 + 16) = 1;
    return this;
  }
  v8 = (unsigned __int8 *)(this + 304);
  if (__ldaxr((unsigned __int8 *)(this + 304)))
  {
    __clrex();
LABEL_11:
    MEMORY[0x19AEA534C](this + 304);
    goto LABEL_12;
  }
  if (__stxr(1u, v8))
    goto LABEL_11;
LABEL_12:
  v10 = *(_QWORD *)(v6 + 312);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 - 8);
    v12 = *((_DWORD *)*a2 + 4);
    v13 = v12 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v12 >> 8;
    for (i = 0; ; v13 = i + v15)
    {
      v15 = v13 & v11;
      v16 = *(WTF **)(v10 + 16 * v15);
      if (v16 != (WTF *)-1)
      {
        if (!v16)
          goto LABEL_25;
        this = WTF::equal(v16, *a2, a3);
        if ((this & 1) != 0)
          break;
      }
      ++i;
    }
    v17 = *(_QWORD *)(v10 + 16 * v15 + 8);
    if (v17)
    {
      v18 = (unsigned int *)(*(_QWORD *)(v17 + 152) + 24);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = 0;
      *(_QWORD *)a4 = v17;
      goto LABEL_87;
    }
  }
LABEL_25:
  v21 = *(unsigned int *)(v6 + 124);
  if (!(_DWORD)v21)
  {
    v32 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 112);
    if (v32)
    {
      v33 = *(unsigned int *)(v32 - 4);
      v34 = v32 + 72 * v33;
      if (*(_DWORD *)(v32 - 12))
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 112);
        if ((_DWORD)v33)
        {
          v36 = 72 * v33;
          v35 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 112);
          while ((unint64_t)(*(_QWORD *)v35 + 1) <= 1)
          {
            v35 += 72;
            v36 -= 72;
            if (!v36)
            {
              v35 = v34;
              goto LABEL_63;
            }
          }
        }
        goto LABEL_63;
      }
      v35 = v32 + 72 * v33;
    }
    else
    {
      v35 = 0;
      LODWORD(v33) = 0;
    }
    v34 = v32 + 72 * v33;
LABEL_63:
    if (v32)
      v40 = v32 + 72 * *(unsigned int *)(v32 - 4);
    else
      v40 = 0;
    if (v40 == v35)
      goto LABEL_86;
    while ((WTF::equal(*(WTF **)(v35 + 16), *a2, a3) & 1) == 0)
    {
      v41 = v35 + 72;
      v35 = v34;
      if (v41 != v34)
      {
        v35 = v41;
        while ((unint64_t)(*(_QWORD *)v35 + 1) <= 1)
        {
          v35 += 72;
          if (v35 == v34)
          {
            v35 = v34;
            break;
          }
        }
      }
      if (v35 == v40)
        goto LABEL_86;
    }
    v39 = (const WebCore::IDBObjectStoreInfo *)(v35 + 8);
    goto LABEL_76;
  }
  v22 = *(WTF ***)(v6 + 112);
  v23 = 8 * v21 - 8;
  do
  {
    v24 = *v22++;
    v25 = WTF::equal(v24, *a2, a3);
    if ((v25 & 1) != 0)
      break;
    v26 = v23;
    v23 -= 8;
  }
  while (v26);
  v27 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 112);
  if (v27)
  {
    v28 = *(unsigned int *)(v27 - 4);
    v29 = v27 + 72 * v28;
    if (*(_DWORD *)(v27 - 12))
    {
      v30 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 112);
      if ((_DWORD)v28)
      {
        v31 = 72 * v28;
        v30 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 112);
        while ((unint64_t)(*(_QWORD *)v30 + 1) <= 1)
        {
          v30 += 72;
          v31 -= 72;
          if (!v31)
          {
            v30 = v29;
            goto LABEL_46;
          }
        }
      }
      goto LABEL_46;
    }
    v30 = v27 + 72 * v28;
  }
  else
  {
    v30 = 0;
    LODWORD(v28) = 0;
  }
  v29 = v27 + 72 * v28;
LABEL_46:
  if (v27)
    v37 = v27 + 72 * *(unsigned int *)(v27 - 4);
  else
    v37 = 0;
  if (v37 == v30)
    goto LABEL_86;
  while ((WTF::equal(*(WTF **)(v30 + 16), *a2, a3) & 1) == 0)
  {
    v38 = v30 + 72;
    v30 = v29;
    if (v38 != v29)
    {
      v30 = v38;
      while ((unint64_t)(*(_QWORD *)v30 + 1) <= 1)
      {
        v30 += 72;
        if (v30 == v29)
        {
          v30 = v29;
          break;
        }
      }
    }
    if (v30 == v37)
      goto LABEL_86;
  }
  v39 = (const WebCore::IDBObjectStoreInfo *)(v30 + 8);
  if ((v25 & 1) != 0)
    goto LABEL_77;
LABEL_76:
  if (*(_BYTE *)(v6 + 96) != 2)
  {
LABEL_86:
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 5;
    v20 = 1;
    goto LABEL_87;
  }
LABEL_77:
  v42 = *(_QWORD *)(v6 + 40);
  if (v42)
  {
    v43 = *(_QWORD *)(v42 + 8);
    if (v43)
      v44 = (WebCore::ScriptExecutionContext *)(v43 - 96);
    else
      v44 = 0;
  }
  else
  {
    v44 = 0;
  }
  v45 = (WebCore::IDBObjectStore *)bmalloc::api::isoAllocate();
  v46 = WebCore::IDBObjectStore::IDBObjectStore(v45, v44, v39, (WebCore::IDBTransaction *)v6);
  WebCore::ActiveDOMObject::suspendIfNeeded(v46);
  v47 = (unsigned int *)(*((_QWORD *)v45 + 19) + 24);
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 + 1, v47));
  v54 = v45;
  WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,std::unique_ptr<WebCore::IDBObjectStore>>((uint64_t)&v53, (uint64_t *)(v6 + 312), a2, &v54);
  this = (uint64_t)v54;
  if (v54)
  {
    WebCore::IDBObjectStore::~IDBObjectStore(v54, v49);
    this = bmalloc::api::isoDeallocate(v50, v51);
  }
  v20 = 0;
  *(_QWORD *)a4 = v45;
LABEL_87:
  *(_DWORD *)(a4 + 16) = v20;
  v52 = __ldxr(v8);
  if (v52 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 304));
  }
  if (__stlxr(0, v8))
    return WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 304));
  return this;
}

unsigned int *WebCore::IDBTransaction::abortInternal(WebCore::IDBDatabase **this)
{
  WebCore::IDBTransaction *v1;
  WTF::StringImpl *v2;
  const WTF::StringImpl *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  WTF::StringImpl **v28;
  int i;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF *v32;
  WebCore::IDBObjectStore *v33;
  bmalloc::api *v34;
  void *v35;
  uint64_t v36;
  int v37;
  WebCore::IDBObjectStore *v38;
  uint64_t v39;
  char *v40;
  WTF *v41;
  uint64_t v42;
  WebCore::IDBObjectStore *v43;
  bmalloc::api *v44;
  void *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  WebCore::IDBObjectStore *v52;
  bmalloc::api *v53;
  void *v54;
  int v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _QWORD *v70;
  WebCore::IDBObjectStore *v71;
  bmalloc::api *v72;
  void *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  WebCore::IDBObjectStore **v90;
  uint64_t v91;
  bmalloc::api *v92;
  void *v93;
  WebCore::IDBObjectStore **v94;
  WebCore::IDBObjectStore *v95;
  bmalloc::api *v96;
  void *v97;
  WTF *v98;
  int v99;
  __int128 v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  _QWORD *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int *result;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned __int8 *v116;
  WebCore::IDBTransaction *v117;
  uint64_t *v118;
  char *v119;
  uint64_t v120;
  WebCore::IDBObjectStore *v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  WebCore::IDBObjectStore *v125[3];
  __int128 v126;

  v1 = (WebCore::IDBTransaction *)this;
  WebCore::IDBDatabase::willAbortTransaction(this[9], (WebCore::IDBTransaction *)this);
  if (*((_BYTE *)v1 + 96) != 2)
    goto LABEL_156;
  if (__ldaxr((unsigned __int8 *)v1 + 304))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1 + 304))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C]((char *)v1 + 304);
LABEL_6:
  v5 = *((_QWORD *)v1 + 9);
  v126 = 0uLL;
  v123 = 0;
  v124 = 0;
  v6 = *((_QWORD *)v1 + 40);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = (char *)(v6 + 16 * v7);
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = (char *)*((_QWORD *)v1 + 40);
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = (char *)*((_QWORD *)v1 + 40);
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 16;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_16;
          }
        }
      }
      goto LABEL_16;
    }
    v9 = (char *)(v6 + 16 * v7);
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = (char *)(v6 + 16 * v7);
LABEL_16:
  v116 = (unsigned __int8 *)v1 + 304;
  if (v6)
    v11 = (char *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v11 = 0;
  v117 = v1;
  v12 = (uint64_t *)((char *)v1 + 320);
  if (v11 == v9)
    goto LABEL_119;
  v13 = *(_QWORD *)(v5 + 112);
  if (!v13)
  {
    while (1)
    {
      v59 = v9 + 16;
      v9 = v8;
      if (v59 != v8)
      {
        v9 = v59;
        do
        {
          if ((unint64_t)(*(_QWORD *)v9 + 1) > 1)
            goto LABEL_92;
          v9 += 16;
        }
        while (v9 != v8);
        v9 = v8;
      }
LABEL_92:
      if (v9 == v11)
        goto LABEL_119;
    }
  }
  v14 = (uint64_t *)((char *)v1 + 312);
  v120 = v5;
  v118 = (uint64_t *)((char *)v1 + 312);
  v119 = v11;
LABEL_22:
  v15 = *(_DWORD *)(v13 - 8);
  v16 = *(_QWORD *)v9 + ~(*(_QWORD *)v9 << 32);
  v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
  v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
  v19 = v15 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
  v20 = (uint64_t *)(v13 + 72 * v19);
  v21 = *v20;
  if (*v20 != *(_QWORD *)v9)
  {
    v22 = 1;
    while (v21)
    {
      v19 = (v19 + v22) & v15;
      v20 = (uint64_t *)(v13 + 72 * v19);
      v21 = *v20;
      ++v22;
      if (*v20 == *(_QWORD *)v9)
        goto LABEL_28;
    }
    v20 = (uint64_t *)(v13 + 72 * *(unsigned int *)(v13 - 4));
  }
LABEL_28:
  if (v20 == (uint64_t *)(v13 + 72 * *(unsigned int *)(v13 - 4)))
    goto LABEL_76;
  v23 = *(WTF::StringImpl **)(*((_QWORD *)v9 + 1) + 32);
  if (v23)
    *(_DWORD *)v23 += 2;
  v24 = *v14;
  if (*v14
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v14, 8u, 0), (v24 = *v14) != 0))
  {
    v25 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v25 = 0;
  }
  v26 = *((_DWORD *)v23 + 4);
  if (v26 < 0x100)
    v27 = WTF::StringImpl::hashSlowCase(v23);
  else
    v27 = v26 >> 8;
  v28 = 0;
  for (i = 1; ; ++i)
  {
    v30 = v27 & v25;
    v31 = (WTF::StringImpl **)(v24 + 16 * v30);
    v32 = *v31;
    if (*v31 == (WTF::StringImpl *)-1)
    {
      v28 = (WTF::StringImpl **)(v24 + 16 * v30);
      goto LABEL_43;
    }
    if (!v32)
      break;
    if ((WTF::equal(v32, v23, v3) & 1) != 0)
    {
      v39 = v24 + 16 * v30;
      v38 = *(WebCore::IDBObjectStore **)(v39 + 8);
      v125[0] = v38;
      *(_QWORD *)(v39 + 8) = 0;
      LODWORD(v39) = HIDWORD(v124);
      if (HIDWORD(v124) == (_DWORD)v124)
      {
        v40 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v123, HIDWORD(v124) + 1, (unint64_t)v125);
        v39 = HIDWORD(v124);
        v41 = v123;
        v42 = *(_QWORD *)v40;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v41 + v39) = v42;
      }
      else
      {
        v125[0] = 0;
        *((_QWORD *)v123 + HIDWORD(v124)) = v38;
      }
      v5 = v120;
      v12 = (uint64_t *)((char *)v1 + 320);
      v14 = (uint64_t *)((char *)v1 + 312);
      v11 = v119;
      HIDWORD(v124) = v39 + 1;
      v43 = v125[0];
      v125[0] = 0;
      if (v43)
      {
        WebCore::IDBObjectStore::~IDBObjectStore(v43, v2);
        bmalloc::api::isoDeallocate(v44, v45);
      }
      goto LABEL_68;
    }
LABEL_43:
    v27 = i + v30;
  }
  v14 = (uint64_t *)((char *)v1 + 312);
  if (v28)
  {
    *v28 = 0;
    v28[1] = 0;
    --*(_DWORD *)(*v118 - 16);
    v31 = v28;
  }
  v12 = (uint64_t *)((char *)v1 + 320);
  v11 = v119;
  if (v23)
    *(_DWORD *)v23 += 2;
  *v31 = v23;
  v5 = v120;
  v33 = v31[1];
  v31[1] = 0;
  if (v33)
  {
    WebCore::IDBObjectStore::~IDBObjectStore(v33, v2);
    bmalloc::api::isoDeallocate(v34, v35);
  }
  v36 = *v118;
  if (*v118)
    v37 = *(_DWORD *)(v36 - 12) + 1;
  else
    v37 = 1;
  *(_DWORD *)(v36 - 12) = v37;
  v46 = *v118;
  if (*v118)
    v47 = *(_DWORD *)(v46 - 12);
  else
    v47 = 0;
  v48 = (*(_DWORD *)(v46 - 16) + v47);
  v49 = *(unsigned int *)(v46 - 4);
  if (v49 <= 0x400)
  {
    if (3 * v49 > 4 * v48)
      goto LABEL_68;
    if ((_DWORD)v49)
LABEL_64:
      v50 = (_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49));
    else
      v50 = 8;
    v31 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v118, v50, v31);
    goto LABEL_68;
  }
  if (v49 <= 2 * v48)
    goto LABEL_64;
LABEL_68:
  v51 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = 0;
  v52 = v31[1];
  v31[1] = v51;
  if (v52)
  {
    WebCore::IDBObjectStore::~IDBObjectStore(v52, v2);
    bmalloc::api::isoDeallocate(v53, v54);
  }
  v55 = HIDWORD(v126);
  if (HIDWORD(v126) == DWORD2(v126))
  {
    v56 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v126) + 1, (unint64_t)v9);
    v55 = HIDWORD(v126);
    v57 = (_QWORD *)(v126 + 8 * HIDWORD(v126));
  }
  else
  {
    v57 = (_QWORD *)(v126 + 8 * HIDWORD(v126));
    v56 = v9;
  }
  *v57 = *(_QWORD *)v56;
  HIDWORD(v126) = v55 + 1;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v2);
    else
      *(_DWORD *)v23 -= 2;
  }
  while (1)
  {
LABEL_76:
    v58 = v9 + 16;
    v9 = v8;
    if (v58 != v8)
    {
      v9 = v58;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 16;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
    if (v9 == v11)
      break;
    v13 = *(_QWORD *)(v5 + 112);
    if (v13)
      goto LABEL_22;
  }
  if (HIDWORD(v126))
  {
    v60 = *v12;
    if (*v12)
    {
      v61 = (_QWORD *)v126;
      v62 = (_QWORD *)(v126 + 8 * HIDWORD(v126));
LABEL_97:
      v63 = *(_DWORD *)(v60 - 8);
      v64 = *v61 + ~(*v61 << 32);
      v65 = (v64 ^ (v64 >> 22)) + ~((v64 ^ (v64 >> 22)) << 13);
      v66 = (9 * (v65 ^ (v65 >> 8))) ^ ((9 * (v65 ^ (v65 >> 8))) >> 15);
      v67 = v63 & (((v66 + ~(v66 << 27)) >> 31) ^ ((_DWORD)v66 + ~((_DWORD)v66 << 27)));
      v68 = *(_QWORD *)(v60 + 16 * v67);
      if (v68 != *v61)
      {
        v69 = 1;
        while (v68)
        {
          v67 = ((_DWORD)v67 + v69) & v63;
          v68 = *(_QWORD *)(v60 + 16 * v67);
          ++v69;
          if (v68 == *v61)
            goto LABEL_103;
        }
        v67 = *(unsigned int *)(v60 - 4);
      }
LABEL_103:
      if (v67 != *(_DWORD *)(v60 - 4))
      {
        v70 = (_QWORD *)(v60 + 16 * v67);
        v71 = (WebCore::IDBObjectStore *)v70[1];
        *v70 = -1;
        v70[1] = 0;
        if (v71)
        {
          WebCore::IDBObjectStore::~IDBObjectStore(v71, v2);
          bmalloc::api::isoDeallocate(v72, v73);
        }
        ++*(_DWORD *)(*v12 - 16);
        v74 = *v12;
        if (*v12)
          v75 = *(_DWORD *)(v74 - 12) - 1;
        else
          v75 = -1;
        *(_DWORD *)(v74 - 12) = v75;
        v76 = *v12;
        if (*v12)
        {
          v77 = 6 * *(_DWORD *)(v76 - 12);
          v78 = *(_DWORD *)(v76 - 4);
          if (v77 < v78 && v78 >= 9)
            WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v12, v78 >> 1, 0);
        }
      }
      while (++v61 != v62)
      {
        v60 = *v12;
        if (*v12)
          goto LABEL_97;
      }
    }
  }
LABEL_119:
  v80 = *((_QWORD *)v117 + 39);
  if (v80)
  {
    v81 = *(unsigned int *)(v80 - 4);
    v82 = v80 + 16 * v81;
    if (*(_DWORD *)(v80 - 12))
    {
      v83 = *((_QWORD *)v117 + 39);
      if ((_DWORD)v81)
      {
        v84 = 16 * v81;
        v83 = *((_QWORD *)v117 + 39);
        while ((unint64_t)(*(_QWORD *)v83 + 1) <= 1)
        {
          v83 += 16;
          v84 -= 16;
          if (!v84)
          {
            v83 = v82;
            break;
          }
        }
      }
LABEL_126:
      v85 = v80 + 16 * *(unsigned int *)(v80 - 4);
      goto LABEL_131;
    }
    v83 = v80 + 16 * v81;
  }
  else
  {
    v83 = 0;
    v81 = 0;
  }
  v82 = v80 + 16 * v81;
  if (v80)
    goto LABEL_126;
  v85 = 0;
LABEL_131:
  while (v83 != v85)
  {
    WebCore::IDBObjectStore::rollbackForVersionChangeAbort(*(WebCore::IDBObjectStore **)(v83 + 8));
    v86 = v83 + 16;
    v83 = v82;
    if (v86 != v82)
    {
      v83 = v86;
      while ((unint64_t)(*(_QWORD *)v83 + 1) <= 1)
      {
        v83 += 16;
        if (v83 == v82)
        {
          v83 = v82;
          break;
        }
      }
    }
  }
  v87 = v123;
  if (HIDWORD(v124))
  {
    v88 = 8 * HIDWORD(v124);
    v89 = v88;
    v90 = (WebCore::IDBObjectStore **)v123;
    do
    {
      WebCore::IDBObjectStore::rollbackForVersionChangeAbort(*v90);
      v91 = *((_QWORD *)*v90 + 3);
      v121 = *v90;
      v122 = v91;
      *v90 = 0;
      WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,std::unique_ptr<WebCore::IDBObjectStore>>((uint64_t)v125, v12, &v122, (uint64_t *)&v121);
      if (v121)
      {
        WebCore::IDBObjectStore::~IDBObjectStore(v121, v2);
        bmalloc::api::isoDeallocate(v92, v93);
      }
      ++v90;
      v89 -= 8;
    }
    while (v89);
    v94 = (WebCore::IDBObjectStore **)v87;
    do
    {
      v95 = *v94;
      *v94 = 0;
      if (v95)
      {
        WebCore::IDBObjectStore::~IDBObjectStore(v95, v2);
        bmalloc::api::isoDeallocate(v96, v97);
      }
      ++v94;
      v88 -= 8;
    }
    while (v88);
  }
  if (v87)
    WTF::fastFree(v87, v2);
  v98 = (WTF *)v126;
  v1 = v117;
  if ((_QWORD)v126)
  {
    *(_QWORD *)&v126 = 0;
    DWORD2(v126) = 0;
    WTF::fastFree(v98, v2);
  }
  v99 = __ldxr(v116);
  if (v99 == 1)
  {
    if (!__stlxr(0, v116))
      goto LABEL_156;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v116);
LABEL_156:
  WebCore::IDBTransaction::transitionedToFinishing((uint64_t)v1, 3);
  v100 = *((_OWORD *)v1 + 16);
  *((_OWORD *)v1 + 16) = *((_OWORD *)v1 + 12);
  *((_OWORD *)v1 + 12) = v100;
  v101 = *((_QWORD *)v1 + 34);
  *((_QWORD *)v1 + 34) = *((_QWORD *)v1 + 26);
  *((_QWORD *)v1 + 26) = v101;
  LODWORD(v101) = *((_DWORD *)v1 + 70);
  *((_DWORD *)v1 + 70) = *((_DWORD *)v1 + 54);
  *((_DWORD *)v1 + 54) = v101;
  v102 = (unsigned int *)((char *)v1 + 24);
  do
    v103 = __ldaxr(v102);
  while (__stlxr(v103 + 1, v102));
  v104 = bmalloc::api::isoAllocate();
  v125[0] = 0;
  v105 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v105 = &off_1E3358810;
  v105[1] = v1;
  *(_QWORD *)&v126 = v105;
  WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(v104, (uint64_t)v1, (uint64_t *)v125, (uint64_t *)&v126);
  if ((_QWORD)v126)
    (*(void (**)(_QWORD))(*(_QWORD *)v126 + 8))(v126);
  if (v125[0])
    (*(void (**)(WebCore::IDBObjectStore *))(*(_QWORD *)v125[0] + 8))(v125[0]);
  v123 = (WTF *)v104;
  v126 = *(_OWORD *)(v104 + 24);
  v106 = (unsigned int *)(v104 + 8);
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 + 1, v106));
  v125[0] = (WebCore::IDBObjectStore *)v104;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v1 + 192, (uint64_t *)v125);
  v108 = (unsigned int *)v125[0];
  v125[0] = 0;
  if (v108)
  {
    v109 = v108 + 2;
    do
    {
      v110 = __ldaxr(v109);
      v111 = v110 - 1;
    }
    while (__stlxr(v111, v109));
    if (!v111)
    {
      atomic_store(1u, v108 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v108 + 8))(v108);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v125, (uint64_t *)v1 + 37, &v126, (uint64_t *)&v123);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)v1);
  result = (unsigned int *)v123;
  v123 = 0;
  if (result)
  {
    v113 = result + 2;
    do
    {
      v114 = __ldaxr(v113);
      v115 = v114 - 1;
    }
    while (__stlxr(v115, v113));
    if (!v115)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::IDBTransaction::transitionedToFinishing(uint64_t result, char a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned __int8 *)(result + 136) - 2;
  *(_BYTE *)(result + 136) = a2;
  if (v2 < 3)
    return result;
  v3 = *(_QWORD *)(result + 176);
  if (!v3)
  {
    v4 = 0;
    v5 = 0;
LABEL_4:
    v6 = v4;
    v4 = v3 + 8 * v5;
    goto LABEL_5;
  }
  v5 = *(unsigned int *)(v3 - 4);
  v4 = v3 + 8 * v5;
  if (!*(_DWORD *)(v3 - 12))
    goto LABEL_4;
  if (!(_DWORD)v5)
  {
    v8 = 0;
    v6 = *(_QWORD *)(result + 176);
    goto LABEL_8;
  }
  v15 = 8 * v5;
  v6 = *(_QWORD *)(result + 176);
  while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
  {
    v6 += 8;
    v15 -= 8;
    if (!v15)
    {
      v6 = v4;
      break;
    }
  }
LABEL_5:
  if (v3)
  {
    v8 = *(unsigned int *)(v3 - 4);
LABEL_8:
    v7 = v3 + 8 * v8;
    goto LABEL_9;
  }
  v7 = 0;
LABEL_9:
  if (v7 != v6)
  {
    while (!*(_QWORD *)(*(_QWORD *)v6 + 8))
    {
      v9 = v6 + 8;
      v6 = v4;
      if (v9 != v4)
      {
        v6 = v9;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 8;
          if (v6 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
      if (v6 == v7)
      {
        v6 = v7;
        break;
      }
    }
  }
  if (v3)
    v3 += 8 * *(unsigned int *)(v3 - 4);
  if (v6 != v3)
  {
    v10 = *(_DWORD *)(result + 184);
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      if (*(_BYTE *)(v11 + 360) == 1)
        *(_BYTE *)(v11 + 360) = 2;
      v12 = v6 + 8;
      v13 = v4;
      if (v12 != v4)
      {
        v13 = v12;
        while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
        {
          v13 += 8;
          if (v13 == v4)
          {
            v13 = v4;
            break;
          }
        }
      }
      v6 = v7;
      if (v13 != v7)
      {
        v6 = v13;
        if (!*(_QWORD *)(*(_QWORD *)v13 + 8))
        {
          while (1)
          {
            v14 = v6 + 8;
            v6 = v4;
            if (v14 != v4)
            {
              v6 = v14;
              while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
              {
                v6 += 8;
                if (v6 == v4)
                {
                  v6 = v4;
                  break;
                }
              }
            }
            if (v6 == v7)
              break;
            if (*(_QWORD *)(*(_QWORD *)v6 + 8))
              goto LABEL_40;
          }
          v6 = v7;
        }
      }
LABEL_40:
      ++v10;
    }
    while (v6 != v3);
    *(_DWORD *)(result + 184) = v10;
  }
  return result;
}

uint64_t WebCore::IDBTransaction::abortInProgressOperations(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  WTF *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int **v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  void *v39;
  unsigned int **v40;
  unsigned int **v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  __int128 v47;
  __int16 v48;
  _DWORD *v49;
  char v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unsigned int **v55;
  uint64_t v56;

  v3 = result;
  v4 = *(_QWORD *)(result + 224);
  v5 = *(_QWORD *)(result + 232);
  v6 = (_QWORD *)(result + 224);
  v55 = 0;
  v56 = 0;
  v7 = *(unsigned int *)(result + 248);
  v8 = v5 - v4;
  if (v5 >= v4)
    v7 = 0;
  v9 = v7 + v8;
  if (v7 + v8)
  {
    if (v9 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v10 = WTF::fastMalloc((WTF *)(8 * v9));
    LODWORD(v56) = v9;
    v55 = (unsigned int **)v10;
    v4 = *(_QWORD *)(v3 + 224);
    v5 = *(_QWORD *)(v3 + 232);
  }
  else
  {
    v10 = 0;
  }
  if (v4 == v5)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v3 + 240) + 8 * v4);
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
        v11 = HIDWORD(v56);
        v10 = (uint64_t)v55;
      }
      *(_QWORD *)(v10 + 8 * v11++) = v12;
      HIDWORD(v56) = v11;
      v15 = *(unsigned int *)(v3 + 248);
      v4 += v15 + 1;
      do
        v4 -= v15;
      while (v4 >= v15);
    }
    while (v5 != v4);
  }
  *v6 = 0;
  v6[1] = 0;
  v16 = *(WTF **)(v3 + 240);
  if (v16)
  {
    *(_QWORD *)(v3 + 240) = 0;
    *(_DWORD *)(v3 + 248) = 0;
    WTF::fastFree(v16, a2);
  }
  if (v11)
  {
    v17 = v10 + 8 * v11;
    do
    {
      v46 = *(_QWORD *)v10;
      WTF::Deque<WebCore::SourceBufferPrivateAVFObjC *,0ul>::append<WebCore::SourceBufferPrivateAVFObjC *&>((uint64_t)v6, &v46);
      v18 = *(unsigned int **)(v3 + 336);
      *(_QWORD *)(v3 + 336) = 0;
      if (v18)
      {
        v19 = v18 + 15;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v18 + 15);
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 72))(v18);
        }
      }
      v22 = *(_QWORD *)v10;
      v47 = *(_OWORD *)(*(_QWORD *)v10 + 24);
      v50 = 0;
      v51 = 0;
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      LOBYTE(v46) = 0;
      v48 = *(_WORD *)a2;
      v23 = (_DWORD *)a2[1];
      if (v23)
        *v23 += 2;
      v49 = v23;
      v24 = *(_QWORD *)(v22 + 88);
      if (v24)
      {
        *(_QWORD *)(v22 + 88) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      if (!*(_BYTE *)(v22 + 121))
      {
        *(_BYTE *)(v22 + 121) = 1;
        v25 = *(_QWORD *)(v22 + 96);
        if (v25)
        {
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v25 + 16))(v25, &v46);
          v26 = *(_QWORD *)(v22 + 96);
          *(_QWORD *)(v22 + 96) = 0;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        }
        WebCore::IDBTransaction::operationCompletedOnClient(*(_QWORD *)(v22 + 16), (WebCore::IDBClient::TransactionOperation *)v22);
      }
      WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v46);
      v10 += 8;
    }
    while (v10 != v17);
  }
  v27 = *(_QWORD *)(v3 + 288);
  if (v27)
  {
    *(_QWORD *)(v3 + 288) = 0;
    v28 = *(unsigned int *)(v27 - 4);
    if ((_DWORD)v28)
    {
      for (i = 0; i != v28; ++i)
      {
        v30 = (unsigned int **)(v27 + 112 * i);
        if (*v30 != (unsigned int *)-1)
        {
          WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(v27 + 112 * i + 8));
          v31 = *v30;
          *v30 = 0;
          if (v31)
          {
            v32 = v31 + 2;
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              atomic_store(1u, v31 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v27 - 16), a2);
  }
  v35 = *(unsigned int **)(v3 + 336);
  *(_QWORD *)(v3 + 336) = 0;
  if (v35)
  {
    v36 = v35 + 15;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v35 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 72))(v35);
    }
  }
  WebCore::IDBClient::IDBConnectionProxy::forgetActiveOperations(*(char **)(*(_QWORD *)(v3 + 72) + 72), (uint64_t *)&v55);
  if (HIDWORD(v56))
  {
    v40 = v55;
    v41 = &v55[HIDWORD(v56)];
    do
    {
      v42 = *v40;
      *v40 = 0;
      if (v42)
      {
        v43 = v42 + 2;
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          atomic_store(1u, v42 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
        }
      }
      ++v40;
    }
    while (v40 != v41);
  }
  result = (uint64_t)v55;
  if (v55)
  {
    v55 = 0;
    LODWORD(v56) = 0;
    return WTF::fastFree((WTF *)result, v39);
  }
  return result;
}

BOOL WebCore::IDBTransaction::virtualHasPendingActivity(WebCore::IDBTransaction *this)
{
  return *((_BYTE *)this + 136) != 4;
}

BOOL `non-virtual thunk to'WebCore::IDBTransaction::virtualHasPendingActivity(WebCore::IDBTransaction *this)
{
  return *((_BYTE *)this + 104) != 4;
}

unsigned int *WebCore::IDBTransaction::stop(unsigned int *this, void *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (!*((_BYTE *)this + 344))
  {
    v2 = this;
    this = (unsigned int *)WebCore::EventTarget::removeAllEventListeners((uint64_t)this, a2);
    *((_BYTE *)v2 + 344) = 1;
    if (*((_BYTE *)v2 + 96) == 2)
    {
      this = (unsigned int *)*((_QWORD *)v2 + 21);
      *((_QWORD *)v2 + 21) = 0;
      if (this)
      {
        v3 = this + 15;
        do
        {
          v4 = __ldaxr(v3);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, v3));
        if (!v5)
        {
          atomic_store(1u, this + 15);
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 72))(this);
        }
      }
    }
    if (*((unsigned __int8 *)v2 + 136) - 2 >= 3)
      return WebCore::IDBTransaction::abortInternal((WebCore::IDBDatabase **)v2);
  }
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::IDBTransaction::stop(unsigned int *this, void *a2)
{
  unsigned int *v2;
  WebCore::IDBDatabase **v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (!*((_BYTE *)this + 312))
  {
    v2 = this;
    v3 = (WebCore::IDBDatabase **)(this - 8);
    this = (unsigned int *)WebCore::EventTarget::removeAllEventListeners((uint64_t)(this - 8), a2);
    *((_BYTE *)v2 + 312) = 1;
    if (*((_BYTE *)v2 + 64) == 2)
    {
      this = (unsigned int *)*((_QWORD *)v2 + 17);
      *((_QWORD *)v2 + 17) = 0;
      if (this)
      {
        v4 = this + 15;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, this + 15);
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 72))(this);
        }
      }
    }
    if (*((unsigned __int8 *)v2 + 104) - 2 >= 3)
      return WebCore::IDBTransaction::abortInternal(v3);
  }
  return this;
}

uint64_t WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    if (v4 + 1 != *(_QWORD *)result)
      goto LABEL_18;
    LODWORD(v5) = *(_DWORD *)(result + 24);
  }
  else
  {
    v5 = *(unsigned int *)(result + 24);
    if (v4)
    {
      if (v4 != v5 - 1)
        goto LABEL_18;
    }
    else if ((_DWORD)v5)
    {
      goto LABEL_18;
    }
  }
  v6 = v5;
  v7 = ((unint64_t)v5 >> 2) + v5;
  if (v7 <= 0xF)
    v7 = 15;
  if (v7 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  v8 = *(char **)(result + 16);
  v9 = v7 + 1;
  v10 = (char *)WTF::fastMalloc((WTF *)(8 * (v7 + 1)));
  *(_DWORD *)(v3 + 24) = v9;
  *(_QWORD *)(v3 + 16) = v10;
  v11 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)v3 > v11)
  {
    memcpy(v10, v8, 8 * v11);
    v12 = *(_QWORD *)v3 - v6 + *(unsigned int *)(v3 + 24);
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v3 + 16) + 8 * v12), &v8[8 * *(_QWORD *)v3], 8 * v6 - 8 * *(_QWORD *)v3);
    *(_QWORD *)v3 = v12;
    if (!v8)
      goto LABEL_18;
LABEL_15:
    if (*(char **)(v3 + 16) == v8)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
    }
    result = WTF::fastFree((WTF *)v8, v13);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy(&v10[8 * *(_QWORD *)v3], &v8[8 * *(_QWORD *)v3], 8 * v11 - 8 * *(_QWORD *)v3);
  if (v8)
    goto LABEL_15;
LABEL_18:
  v15 = *(_QWORD *)(v3 + 8);
  v14 = *(_QWORD *)(v3 + 16);
  v16 = *a2;
  *a2 = 0;
  *(_QWORD *)(v14 + 8 * v15) = v16;
  if (v15 == *(unsigned int *)(v3 + 24) - 1)
    v17 = 0;
  else
    v17 = v15 + 1;
  *(_QWORD *)(v3 + 8) = v17;
  return result;
}

uint64_t WebCore::IDBTransaction::handlePendingOperations(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  if (*(_BYTE *)(this + 137))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 232);
    v3 = this + 224;
    if (*(_QWORD *)(this + 224) == v2)
      goto LABEL_29;
    if (!v2)
      v2 = *(unsigned int *)(this + 248);
    v4 = *(_QWORD *)(*(_QWORD *)(this + 240) + 8 * v2 - 8);
    if (*(_BYTE *)(v4 + 120))
    {
      if (*(_QWORD *)(v4 + 112))
      {
LABEL_29:
        while (1)
        {
          v5 = *(_QWORD *)(v1 + 192);
          if (v5 == *(_QWORD *)(v1 + 200))
            break;
          v6 = *(_QWORD *)(v1 + 208);
          v7 = *(_QWORD *)(v6 + 8 * v5);
          *(_QWORD *)(v6 + 8 * v5) = 0;
          v8 = *(_QWORD *)(v1 + 208);
          v9 = *(unsigned int **)(v8 + 8 * v5);
          *(_QWORD *)(v8 + 8 * v5) = 0;
          if (v9)
          {
            v10 = v9 + 2;
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v9 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
            }
          }
          v13 = *(_QWORD *)(v1 + 192);
          if (v13 == *(unsigned int *)(v1 + 216) - 1)
            v14 = 0;
          else
            v14 = v13 + 1;
          *(_QWORD *)(v1 + 192) = v14;
          v19 = v7;
          WTF::Deque<WebCore::SourceBufferPrivateAVFObjC *,0ul>::append<WebCore::SourceBufferPrivateAVFObjC *&>(v3, &v19);
          (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 88) + 16))(*(_QWORD *)(v7 + 88));
          this = *(_QWORD *)(v7 + 88);
          *(_QWORD *)(v7 + 88) = 0;
          if (this)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          if (*(_BYTE *)(v7 + 120))
            v15 = *(_QWORD *)(v7 + 112) != 0;
          else
            v15 = 0;
          v16 = (unsigned int *)(v7 + 8);
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (v18)
          {
            if (!v15)
              return this;
          }
          else
          {
            atomic_store(1u, (unsigned int *)(v7 + 8));
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
            if (!v15)
              return this;
          }
        }
      }
    }
  }
  return this;
}

void WebCore::IDBTransaction::operationCompletedOnServer(WebCore::IDBTransaction *this, const WebCore::IDBResultData *a2, WebCore::IDBClient::TransactionOperation *a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE v12[24];
  __int128 v13[6];
  WebCore::IDBClient::TransactionOperation *v14;

  if (*((_QWORD *)this + 37)
    && WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>((uint64_t *)this + 37, (_QWORD *)a3 + 3))
  {
    v6 = (unsigned int *)((char *)a3 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v14 = a3;
    WebCore::IDBResultData::IDBResultData((WebCore::IDBResultData *)v13, a2);
    WTF::HashMap<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTraits<WebCore::IDBResultData>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData>((uint64_t *)this + 36, &v14, v13, (uint64_t)v12);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v13);
    v8 = (unsigned int *)v14;
    v14 = 0;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
    if (!*((_QWORD *)this + 42))
      WebCore::IDBTransaction::handleOperationsCompletedOnServer(this);
  }
}

void WebCore::IDBTransaction::handleOperationsCompletedOnServer(WebCore::IDBTransaction *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  __int128 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[24];
  __int16 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v1 = *((_QWORD *)this + 28);
  if (v1 != *((_QWORD *)this + 29))
  {
    v3 = (uint64_t *)((char *)this + 288);
    while (!*((_QWORD *)this + 42))
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 30) + 8 * v1);
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
      }
      v7 = *v3;
      if (!*v3)
        goto LABEL_50;
      v8 = *(_DWORD *)(v7 - 8);
      v9 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = v7 + 112 * v12;
      v14 = *(unsigned int **)v13;
      if (*(_QWORD *)v13 != v4)
      {
        v15 = 1;
        v16 = *(unsigned int **)v13;
        v17 = v12;
        while (v16)
        {
          v17 = (v17 + v15) & v8;
          v16 = *(unsigned int **)(v7 + 112 * v17);
          ++v15;
          if (v16 == (unsigned int *)v4)
          {
            v18 = 1;
            while (v14)
            {
              v12 = (v12 + v18) & v8;
              v13 = v7 + 112 * v12;
              v14 = *(unsigned int **)v13;
              ++v18;
              if (*(_QWORD *)v13 == v4)
                goto LABEL_17;
            }
            v13 = v7 + 112 * *(unsigned int *)(v7 - 4);
            goto LABEL_17;
          }
        }
LABEL_50:
        if (v4)
        {
          v43 = (unsigned int *)(v4 + 8);
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
          {
            atomic_store(1u, (unsigned int *)(v4 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
          }
        }
        return;
      }
LABEL_17:
      if (v7 + 112 * *(unsigned int *)(v7 - 4) == v13)
      {
        v54[0] = 0;
        LOBYTE(v57) = 0;
        BYTE8(v57) = 0;
        v55 = 0;
        *(_OWORD *)&v54[8] = 0u;
        v46 = *(_OWORD *)v54;
        v47 = 0;
        v48 = 0;
        v56 = 0;
        v49 = 0;
        v50 = v57;
        v58 = 0u;
        v51 = 0u;
        v59 = 0u;
        v52 = 0u;
        v60 = 0;
        v61 = 0;
        v53 = 0u;
        WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v54);
      }
      else
      {
        v19 = *(_QWORD *)(v13 + 24);
        v46 = *(_OWORD *)(v13 + 8);
        v20 = *(_WORD *)(v13 + 32);
        v21 = *(_QWORD *)(v13 + 40);
        *(_QWORD *)(v13 + 40) = 0;
        v22 = *(_OWORD *)(v13 + 64);
        v50 = *(_OWORD *)(v13 + 48);
        v23 = *(_OWORD *)(v13 + 80);
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 80) = 0u;
        v51 = v22;
        v47 = v19;
        v48 = v20;
        v49 = v21;
        v52 = v23;
        v24 = *(_QWORD *)(v13 + 96);
        v25 = *(_QWORD *)(v13 + 104);
        *(_QWORD *)(v13 + 96) = 0;
        *(_QWORD *)&v53 = v24;
        *((_QWORD *)&v53 + 1) = v25;
        v26 = *v3;
        if (!*v3 || (v26 += 112 * *(unsigned int *)(v26 - 4), v26 != v13))
        {
          if (v26 != v13)
          {
            v27 = *(unsigned int **)v13;
            *(_QWORD *)v13 = -1;
            if (v27)
            {
              v28 = v27 + 2;
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                atomic_store(1u, v27 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
              }
            }
            WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(v13 + 8));
            ++*(_DWORD *)(*v3 - 16);
            v31 = *v3;
            if (*v3)
              v32 = *(_DWORD *)(v31 - 12) - 1;
            else
              v32 = -1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v3;
            if (*v3)
            {
              v34 = 6 * *(_DWORD *)(v33 - 12);
              v35 = *(_DWORD *)(v33 - 4);
              if (v34 < v35 && v35 >= 9)
                WTF::HashTable<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashMap<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTraits<WebCore::IDBResultData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>::rehash(v3, v35 >> 1, 0);
            }
          }
        }
      }
      v37 = *(_QWORD *)(v4 + 88);
      if (v37)
      {
        *(_QWORD *)(v4 + 88) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      }
      if (!*(_BYTE *)(v4 + 121))
      {
        *(_BYTE *)(v4 + 121) = 1;
        v38 = *(_QWORD *)(v4 + 96);
        if (v38)
        {
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v38 + 16))(v38, &v46);
          v39 = *(_QWORD *)(v4 + 96);
          *(_QWORD *)(v4 + 96) = 0;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        }
        WebCore::IDBTransaction::operationCompletedOnClient(*(_QWORD *)(v4 + 16), (WebCore::IDBClient::TransactionOperation *)v4);
      }
      WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v46);
      v40 = (unsigned int *)(v4 + 8);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, (unsigned int *)(v4 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      }
      v1 = *((_QWORD *)this + 28);
      if (v1 == *((_QWORD *)this + 29))
        return;
    }
  }
}

uint64_t WebCore::IDBTransaction::commit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  WebCore::IDBTransaction *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(this + 136))
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 8;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    v3 = (WebCore::IDBTransaction *)this;
    v4 = *(_QWORD *)(this + 336);
    if (!v4)
      goto LABEL_13;
    v5 = *(_QWORD *)(v4 + 368);
    if (!v5)
      goto LABEL_13;
    if (!*(_BYTE *)(v4 + 361))
    {
      if ((*(_BYTE *)(v5 + 20) & 0x40) != 0)
        goto LABEL_13;
      v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v6 || (this = *(_QWORD *)(v6 + 96)) == 0)
        this = WebCore::threadGlobalDataSlow((WebCore *)this);
      v7 = *(_QWORD *)(this + 40);
      if (!v7)
      {
        v9 = v5;
        v8 = this;
        this = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
        v7 = *(_QWORD *)(v8 + 40);
        v5 = v9;
      }
      if (*(_QWORD *)(v5 + 24) != *(_QWORD *)(v7 + 784))
LABEL_13:
        this = (uint64_t)WebCore::IDBTransaction::commitInternal(v3);
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return this;
}

unsigned int *WebCore::IDBTransaction::commitInternal(WebCore::IDBTransaction *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::IDBTransaction *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *result;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  bmalloc::api *v22;
  void *v23;
  unsigned int *v24;
  WebCore::IDBTransaction *v25[2];
  uint64_t v26[3];

  WebCore::IDBTransaction::transitionedToFinishing((uint64_t)this, 2);
  v2 = *((_QWORD *)this + 9);
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::take((uint64_t *)(v2 + 144), (_QWORD *)this + 10, (uint64_t *)v25);
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>((uint64_t *)(v2 + 152), (WebCore::IDBTransaction *)((char *)this + 80), (uint64_t *)v25, (uint64_t)v26);
  v4 = (unsigned int *)v25[0];
  v25[0] = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, v3);
      bmalloc::api::isoDeallocate(v22, v23);
    }
  }
  v8 = (unsigned int *)((char *)this + 24);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = bmalloc::api::isoAllocate();
  v26[0] = 0;
  v11 = (WebCore::IDBTransaction *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = &off_1E33588A8;
  *((_QWORD *)v11 + 1) = this;
  v25[0] = v11;
  WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(v10, (uint64_t)this, v26, (uint64_t *)v25);
  if (v25[0])
    (*(void (**)(WebCore::IDBTransaction *))(*(_QWORD *)v25[0] + 8))(v25[0]);
  if (v26[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v26[0] + 8))(v26[0]);
  v24 = (unsigned int *)v10;
  *(_OWORD *)v25 = *(_OWORD *)(v10 + 24);
  v12 = (unsigned int *)(v10 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v26[0] = v10;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)this + 192, v26);
  v14 = (unsigned int *)v26[0];
  v26[0] = 0;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v26, (uint64_t *)this + 37, v25, (uint64_t *)&v24);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)this);
  result = v24;
  v24 = 0;
  if (result)
  {
    v19 = result + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WebCore::IDBTransaction::didStart(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(uint64_t **)(a1 + 72);
  if ((!v4[20]
     || (result = (unsigned int *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(v4 + 20, (_QWORD *)(a1 + 80))) == 0)&& (!v4[19]|| (result = (unsigned int *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(v4 + 19, (_QWORD *)(a1 + 80))) == 0))
  {
    v9 = a1;
    result = WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBTransaction*>(v4 + 18, (WTF::StringImpl *)(a1 + 80), &v9, (uint64_t)&v8);
  }
  *(_BYTE *)(a1 + 137) = 1;
  if (*(_BYTE *)(a2 + 1))
  {
    if (*(_BYTE *)(a1 + 136) != 4)
    {
      result = (unsigned int *)WebCore::IDBTransaction::notifyDidAbort((WebCore::IDBDatabase **)a1, a2);
      *(_BYTE *)(a1 + 136) = 4;
    }
  }
  else
  {
    result = (unsigned int *)WebCore::IDBTransaction::handlePendingOperations(a1);
    if (*(_BYTE *)(a1 + 136) == 1)
    {
      if (*(_BYTE *)(a1 + 137))
      {
        v6 = *(_QWORD *)(a1 + 296);
        if (!v6 || !*(_DWORD *)(v6 - 12))
        {
          v7 = *(_QWORD *)(a1 + 328);
          if (!v7 || !*(_DWORD *)(v7 - 12))
            return WebCore::IDBTransaction::commitInternal((WebCore::IDBTransaction *)a1);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::IDBTransaction::didAbort(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(result + 136) != 4)
  {
    v2 = result;
    result = WebCore::IDBTransaction::notifyDidAbort((WebCore::IDBDatabase **)result, a2);
    *(_BYTE *)(v2 + 136) = 4;
  }
  return result;
}

uint64_t WebCore::IDBTransaction::notifyDidAbort(WebCore::IDBDatabase **a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WebCore::IDBDatabase *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WebCore::IDBDatabase *v8;
  uint64_t v9;

  WebCore::IDBDatabase::didAbortTransaction(a1[9], (WebCore::IDBTransaction *)a1);
  *((_WORD *)a1 + 72) = *(_WORD *)a2;
  v5 = *(WebCore::IDBDatabase **)(a2 + 8);
  if (v5)
    *(_DWORD *)v5 += 2;
  v6 = a1[19];
  a1[19] = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = WebCore::IDBTransaction::fireOnAbort((WebCore::IDBTransaction *)a1);
  if (*((_BYTE *)a1 + 96) == 2)
  {
    v8 = a1[5];
    if (v8)
    {
      v9 = *((_QWORD *)v8 + 1);
      if (v9)
      {
        if (!*(_BYTE *)(v9 + 180))
          return WebCore::IDBOpenDBRequest::fireErrorAfterVersionChangeCompletion(a1[21]);
      }
    }
  }
  return result;
}

uint64_t WebCore::IDBTransaction::fireOnAbort(WebCore::IDBTransaction *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v8 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8202;
  v9 = *(_QWORD *)(v4 + 64) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v8 | v9;
  v10 = *(_DWORD **)(v4 + 64);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = 0;
  v13 = v5;
  v11 = *((_QWORD *)this + 5);
  if (!v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12
    || *(_BYTE *)(v12 + 180)
    || (result = (uint64_t)WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 4, (uint64_t)this, 1, &v13), (v5 = v13) != 0))
  {
    if (*(_DWORD *)(v5 + 16) != 1)
    {
      --*(_DWORD *)(v5 + 16);
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

WTF::StringImpl *WebCore::IDBTransaction::didCommit(WebCore::IDBTransaction *a1, uint64_t a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;

  if (*((_BYTE *)a1 + 376)
    && *((_QWORD *)a1 + 37)
    && (result = (WTF::StringImpl *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>((uint64_t *)a1 + 37, (_QWORD *)a1 + 45)) != 0)
  {
    v6 = *((unsigned __int8 *)a1 + 400);
    *((_WORD *)a1 + 192) = *(_WORD *)a2;
    if (v6)
    {
      v7 = *(_DWORD **)(a2 + 8);
      if (v7)
        *v7 += 2;
      result = (WTF::StringImpl *)*((_QWORD *)a1 + 49);
      *((_QWORD *)a1 + 49) = v7;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v9 = *(_DWORD **)(a2 + 8);
      if (v9)
        *v9 += 2;
      *((_QWORD *)a1 + 49) = v9;
      *((_BYTE *)a1 + 400) = 1;
    }
  }
  else
  {
    v8 = *((_QWORD *)a1 + 9);
    if (*(_BYTE *)(a2 + 1))
    {
      WebCore::IDBDatabase::willAbortTransaction((WebCore::IDBDatabase *)v8, a1);
      result = (WTF::StringImpl *)WebCore::IDBTransaction::notifyDidAbort((WebCore::IDBDatabase **)a1, a2);
    }
    else
    {
      if (*(WebCore::IDBTransaction **)(v8 + 136) == a1)
        *(_QWORD *)(v8 + 88) = *((_QWORD *)a1 + 13);
      WebCore::IDBDatabase::didCommitOrAbortTransaction((WebCore::IDBDatabase *)v8, a1);
      result = (WTF::StringImpl *)WebCore::IDBTransaction::fireOnComplete(a1);
    }
    *((_BYTE *)a1 + 136) = 4;
  }
  return result;
}

uint64_t WebCore::IDBTransaction::fireOnComplete(WebCore::IDBTransaction *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v8 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v9 = *(_QWORD *)(v4 + 424) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v8 | v9;
  v10 = *(_DWORD **)(v4 + 424);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = 0;
  v13 = v5;
  v11 = *((_QWORD *)this + 5);
  if (!v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12
    || *(_BYTE *)(v12 + 180)
    || (result = (uint64_t)WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 4, (uint64_t)this, 1, &v13), (v5 = v13) != 0))
  {
    if (*(_DWORD *)(v5 + 16) != 1)
    {
      --*(_DWORD *)(v5 + 16);
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

unsigned int *WebCore::IDBTransaction::dispatchEvent(WebCore::IDBTransaction *this, WebCore::Event *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  unsigned int *result;
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int *v23;
  unsigned int v24;
  WebCore *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  bmalloc::api *v38;
  void *v39;
  WTF *v40;
  uint64_t v41;
  WebCore *v42;

  v4 = (unsigned int *)((char *)this + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *((_QWORD *)this + 9);
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v40 = v7;
  *(_QWORD *)v7 = this;
  *((_QWORD *)v7 + 1) = v6;
  v41 = 0x200000002;
  WebCore::EventDispatcher::dispatchEvent((unsigned int *)&v40, a2);
  result = (unsigned int *)v40;
  if (v40)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
  }
  if ((*((_BYTE *)a2 + 21) & 2) != 0)
  {
    *((_BYTE *)this + 345) = 1;
    if (*((_BYTE *)this + 96) == 2)
    {
      v10 = *((_QWORD *)this + 21);
      if (v10)
      {
        *(_BYTE *)(v10 + 359) = 0;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v12 = *(_QWORD *)(StatusReg + 736);
        if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
          v13 = WebCore::threadGlobalDataSlow((WebCore *)result);
        v14 = *(_QWORD *)(v13 + 40);
        if (!v14)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
          v14 = *(_QWORD *)(v13 + 40);
        }
        if (*((_QWORD *)a2 + 3) != *(_QWORD *)(v14 + 424))
          goto LABEL_18;
        v15 = *((_QWORD *)this + 9);
        if (*(_BYTE *)(v15 + 128))
        {
          v16 = (unsigned int *)*((_QWORD *)this + 21);
        }
        else
        {
          v16 = (unsigned int *)*((_QWORD *)this + 21);
          if (!*(_BYTE *)(v15 + 129))
          {
            v22 = (uint64_t *)(*((_QWORD *)v16 + 8) + 328);
            v23 = v16 + 15;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 + 1, v23));
            v42 = (WebCore *)v16;
            WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)&v40, v22, &v42);
            v25 = v42;
            v42 = 0;
            if (v25)
            {
              v26 = (unsigned int *)((char *)v25 + 60);
              do
              {
                v27 = __ldaxr(v26);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, v26));
              if (!v28)
              {
                atomic_store(1u, (unsigned int *)v25 + 15);
                v25 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v25 + 72))(v25);
              }
            }
            v29 = *(_QWORD *)(StatusReg + 736);
            if (!v29 || (v30 = *(_QWORD *)(v29 + 96)) == 0)
              v30 = WebCore::threadGlobalDataSlow(v25);
            v31 = *(_QWORD *)(v30 + 40);
            if (!v31)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v30);
              v31 = *(_QWORD *)(v30 + 40);
            }
            v32 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v32);
            *(_QWORD *)(v32 + 8) = 0;
            *(_DWORD *)(v32 + 16) = 1;
            *(_DWORD *)(v32 + 20) = *(_DWORD *)(v32 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v31 + 2016) != 0);
            v34 = *(_DWORD **)(v31 + 2016);
            if (v34)
              *v34 += 2;
            *(_QWORD *)(v32 + 24) = v34;
            *(_QWORD *)(v32 + 32) = 0;
            *(_QWORD *)(v32 + 40) = 0;
            *(_QWORD *)(v32 + 48) = 0;
            *(_QWORD *)(v32 + 56) = v33;
            *(_QWORD *)(v32 + 64) = 0;
            *(_QWORD *)v32 = off_1E3357FC8;
            do
              v35 = __ldaxr(v23);
            while (__stlxr(v35 + 1, v23));
            *(_QWORD *)(v32 + 72) = v16;
            v40 = (WTF *)v32;
            *((_QWORD *)v16 + 10) = v32;
            v36 = *((_QWORD *)v16 + 4);
            if (!v36
              || (v37 = *(_QWORD *)(v36 + 8)) == 0
              || *(_BYTE *)(v37 + 180)
              || (WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v16 + 3, (uint64_t)v16, 1, (uint64_t *)&v40), (v32 = (uint64_t)v40) != 0))
            {
              if (*(_DWORD *)(v32 + 16) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
              else
                --*(_DWORD *)(v32 + 16);
            }
            goto LABEL_18;
          }
        }
        WebCore::IDBOpenDBRequest::fireErrorAfterVersionChangeCompletion((WebCore::IDBOpenDBRequest *)v16);
LABEL_18:
        result = (unsigned int *)*((_QWORD *)this + 21);
        *((_QWORD *)this + 21) = 0;
        if (result)
        {
          v17 = result + 15;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, result + 15);
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
          }
        }
        goto LABEL_23;
      }
    }
  }
  do
  {
LABEL_23:
    v20 = __ldaxr(v4);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v4));
  if (!v21)
  {
    atomic_store(1u, (unsigned int *)this + 6);
    WebCore::IDBTransaction::~IDBTransaction(this, (WTF::StringImpl *)v8);
    return (unsigned int *)bmalloc::api::isoDeallocate(v38, v39);
  }
  return result;
}

unsigned int *WebCore::IDBTransaction::createObjectStore@<X0>(WebCore::IDBTransaction *this@<X0>, WTF::StringImpl **a2@<X1>, WebCore::IDBObjectStore **a3@<X8>)
{
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  WebCore::IDBObjectStore *v11;
  WebCore::IDBObjectStore *v12;
  unsigned int *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  bmalloc::api *v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WebCore::IDBObjectStore *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  unsigned int *result;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  bmalloc::api *v45;
  void *v46;
  WebCore::IDBTransaction *v47[2];
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  unsigned int *v54;
  WebCore::IDBObjectStore *v55[3];
  __int128 v56;

  v6 = (unsigned __int8 *)this + 304;
  if (__ldaxr((unsigned __int8 *)this + 304))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 304);
LABEL_5:
  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = (WebCore::ScriptExecutionContext *)(v9 - 96);
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = (WebCore::IDBObjectStore *)bmalloc::api::isoAllocate();
  v12 = WebCore::IDBObjectStore::IDBObjectStore(v11, v10, (const WebCore::IDBObjectStoreInfo *)a2, this);
  WebCore::ActiveDOMObject::suspendIfNeeded(v12);
  v13 = (unsigned int *)(*((_QWORD *)v11 + 19) + 24);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *a3 = v11;
  v55[0] = v11;
  WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,std::unique_ptr<WebCore::IDBObjectStore>>((uint64_t)v47, (uint64_t *)this + 39, a2 + 1, v55);
  if (v55[0])
  {
    WebCore::IDBObjectStore::~IDBObjectStore(v55[0], v15);
    bmalloc::api::isoDeallocate(v16, v17);
  }
  v18 = (unsigned int *)((char *)this + 24);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 + 1, v18));
  v47[0] = this;
  WebCore::IDBObjectStoreInfo::isolatedCopy((uint64_t *)a2, (uint64_t)&v47[1]);
  v21 = bmalloc::api::isoAllocate();
  v22 = (WebCore::IDBObjectStore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v22 = &off_1E33588D0;
  *((_QWORD *)v22 + 1) = this;
  v55[0] = v22;
  v23 = WTF::fastMalloc((WTF *)0x50);
  v24 = v23;
  *(_QWORD *)v23 = off_1E33588F8;
  *(_OWORD *)(v23 + 8) = *(_OWORD *)v47;
  v25 = v48;
  v47[0] = 0;
  v48 = 0;
  *(_QWORD *)(v23 + 24) = v25;
  *(_BYTE *)(v23 + 32) = 0;
  *(_BYTE *)(v23 + 56) = 0;
  if (v51)
  {
    *(_DWORD *)(v23 + 48) = -1;
    v26 = v50;
    if (v50 != -1)
    {
      ((void (*)(__int128 *, uint64_t, uint64_t *))off_1E33586B0[v50])(&v56, v23 + 32, &v49);
      *(_DWORD *)(v24 + 48) = v26;
    }
    *(_BYTE *)(v24 + 56) = 1;
  }
  *(_BYTE *)(v24 + 64) = v52;
  v27 = v53;
  v53 = 0;
  *(_QWORD *)(v24 + 72) = v27;
  *(_QWORD *)&v56 = v24;
  WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(v21, (uint64_t)this, (uint64_t *)v55, (uint64_t *)&v56);
  if ((_QWORD)v56)
    (*(void (**)(_QWORD))(*(_QWORD *)v56 + 8))(v56);
  if (v55[0])
    (*(void (**)(WebCore::IDBObjectStore *))(*(_QWORD *)v55[0] + 8))(v55[0]);
  v54 = (unsigned int *)v21;
  *((_QWORD *)this + 44) = *(_QWORD *)(v21 + 128);
  v56 = *(_OWORD *)(v21 + 24);
  v28 = (unsigned int *)(v21 + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  v55[0] = (WebCore::IDBObjectStore *)v21;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)this + 192, (uint64_t *)v55);
  v30 = (unsigned int *)v55[0];
  v55[0] = 0;
  if (v30)
  {
    v31 = v30 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v55, (uint64_t *)this + 37, &v56, (uint64_t *)&v54);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)this);
  v35 = v54;
  v54 = 0;
  if (v35)
  {
    v36 = v35 + 2;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v35 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
    }
  }
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)&v47[1], v34);
  result = (unsigned int *)v47[0];
  v47[0] = 0;
  if (result)
  {
    v41 = result + 6;
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v39);
      result = (unsigned int *)bmalloc::api::isoDeallocate(v45, v46);
    }
  }
  v44 = __ldxr(v6);
  if (v44 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

WebCore::IDBObjectStore *WebCore::IDBTransaction::renameObjectStore(WebCore::IDBTransaction *this, WebCore::IDBObjectStore *a2, WTF::StringImpl **a3)
{
  unsigned __int8 *v6;
  WebCore::IDBObjectStore *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebCore::IDBObjectStore *result;
  bmalloc::api *v35;
  void *v36;
  int v37;
  bmalloc::api *v38;
  void *v39;
  WebCore::IDBObjectStore *v40[2];
  WTF::StringImpl *v41;
  unsigned int *v42;
  uint64_t v43[3];
  __int128 v44;

  v6 = (unsigned __int8 *)this + 304;
  if (__ldaxr((unsigned __int8 *)this + 304))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]((char *)this + 304);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  v8 = (WebCore::IDBObjectStore *)*((_QWORD *)a2 + 3);
  v9 = (unsigned int *)((char *)this + 24);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 + 1, v9));
  v40[0] = this;
  v40[1] = v8;
  WTF::String::isolatedCopy();
  v12 = bmalloc::api::isoAllocate();
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E3358920;
  v13[1] = this;
  v43[0] = (uint64_t)v13;
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v14 = &off_1E3358948;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)v40;
  v15 = v41;
  v40[0] = 0;
  v41 = 0;
  *(_QWORD *)(v14 + 24) = v15;
  *(_QWORD *)&v44 = v14;
  WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(v12, (uint64_t)this, v43, (uint64_t *)&v44);
  if ((_QWORD)v44)
    (*(void (**)(_QWORD))(*(_QWORD *)v44 + 8))(v44);
  if (v43[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v43[0] + 8))(v43[0]);
  v42 = (unsigned int *)v12;
  *((_QWORD *)this + 44) = *(_QWORD *)(v12 + 128);
  v44 = *(_OWORD *)(v12 + 24);
  v16 = (unsigned int *)(v12 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v43[0] = v12;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)this + 192, v43);
  v18 = (unsigned int *)v43[0];
  v43[0] = 0;
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v18 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v43, (uint64_t *)this + 37, &v44, (uint64_t *)&v42);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)this);
  v23 = v42;
  v42 = 0;
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v23 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
    }
  }
  v27 = v41;
  v41 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v22);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (unsigned int *)v40[0];
  v40[0] = 0;
  if (v28)
  {
    v29 = v28 + 6;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v28 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v28, v22);
      bmalloc::api::isoDeallocate(v38, v39);
    }
  }
  v32 = (WebCore::IDBTransaction *)((char *)this + 312);
  WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::take((uint64_t)v40, v32, (WTF::StringImpl **)a2 + 4);
  WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,std::unique_ptr<WebCore::IDBObjectStore>>((uint64_t)v43, (uint64_t *)v32, a3, v40);
  result = v40[0];
  if (v40[0])
  {
    WebCore::IDBObjectStore::~IDBObjectStore(v40[0], v33);
    result = (WebCore::IDBObjectStore *)bmalloc::api::isoDeallocate(v35, v36);
  }
  v37 = __ldxr(v6);
  if (v37 != 1)
  {
    __clrex();
    return (WebCore::IDBObjectStore *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (WebCore::IDBObjectStore *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

uint64_t WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::take(uint64_t result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  bmalloc::api *v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_26;
  v7 = *(_DWORD *)(v4 - 8);
  v8 = *((_DWORD *)*a3 + 4);
  v9 = v8 < 0x100 ? WTF::StringImpl::hashSlowCase(*a3) : v8 >> 8;
  for (i = 0; ; v9 = ++i + v11)
  {
    v11 = v9 & v7;
    result = *(_QWORD *)(v4 + 16 * v11);
    if (result != -1)
    {
      if (!result)
      {
        v12 = *(_QWORD *)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_26;
        v13 = *(unsigned int *)(v12 - 4);
        v14 = v12 + 16 * v13;
        goto LABEL_14;
      }
      result = WTF::equal((WTF *)result, *a3, (const WTF::StringImpl *)a3);
      if ((result & 1) != 0)
        break;
    }
  }
  v14 = v4 + 16 * v11;
  v12 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_15;
  v13 = *(unsigned int *)(v12 - 4);
LABEL_14:
  v12 += 16 * v13;
LABEL_15:
  if (v12 == v14)
  {
LABEL_26:
    *v3 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v14 + 8) = 0;
    *v3 = v15;
    v16 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2 || (v16 += 16 * *(unsigned int *)(v16 - 4), v16 != v14))
    {
      if (v16 != v14)
      {
        v17 = *(WTF::StringImpl **)v14;
        *(_QWORD *)v14 = -1;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, a2);
          else
            *(_DWORD *)v17 -= 2;
        }
        result = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = 0;
        if (result)
        {
          WebCore::IDBObjectStore::~IDBObjectStore((WebCore::IDBObjectStore *)result, a2);
          result = bmalloc::api::isoDeallocate(v18, v19);
        }
        ++*(_DWORD *)(*(_QWORD *)a2 - 16);
        v20 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
            return (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)a2, v24 >> 1, 0);
        }
      }
    }
  }
  return result;
}

unsigned int *WebCore::IDBTransaction::renameIndex(WebCore::IDBTransaction *this, WebCore::IDBIndex *a2, const WTF::String *a3)
{
  unsigned __int8 *v6;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  WebCore::IDBIndex *v26;
  bmalloc::api *v27;
  void *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WebCore::IDBIndex *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  unsigned int *result;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  bmalloc::api *v56;
  void *v57;
  WebCore::IDBTransaction *v58;
  __int128 v59;
  WTF::StringImpl *v60;
  unsigned int *v61;
  WebCore::IDBIndex *v62[3];
  __int128 v63;

  v6 = (unsigned __int8 *)this + 304;
  if (__ldaxr((unsigned __int8 *)this + 304))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 304);
LABEL_5:
  v8 = *((_QWORD *)a2 + 18);
  v9 = (unsigned __int8 *)(v8 + 161);
  if (__ldaxr((unsigned __int8 *)(v8 + 161)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v8 + 161);
LABEL_9:
  v11 = *(_QWORD *)(v8 + 80);
  if (v11)
  {
    v12 = *((_QWORD *)a2 + 3);
    v13 = *(_DWORD *)(v11 - 8);
    v14 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = *(_QWORD *)(v11 + ((unint64_t)v17 << 6));
    if (v18 != v12)
    {
      v19 = 1;
      while (v18)
      {
        v17 = ((_DWORD)v17 + v19) & v13;
        v18 = *(_QWORD *)(v11 + ((unint64_t)v17 << 6));
        ++v19;
        if (v18 == v12)
          goto LABEL_17;
      }
      v17 = *(unsigned int *)(v11 - 4);
    }
LABEL_17:
    v20 = v11 + (v17 << 6);
    v11 += (unint64_t)*(unsigned int *)(v11 - 4) << 6;
  }
  else
  {
    v20 = 0;
  }
  if (v20 == v11)
    v21 = 0;
  else
    v21 = v20 + 8;
  v22 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v22 += 2;
  v23 = *(WTF::StringImpl **)(v21 + 16);
  *(_QWORD *)(v21 + 16) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF *)(v8 + 168);
  WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::take(v24, (WTF::StringImpl **)a2 + 5, a3, v62);
  WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,std::unique_ptr<WebCore::IDBIndex>>((uint64_t)&v58, (uint64_t *)v24, (WTF::StringImpl **)a3, v62);
  v26 = v62[0];
  v62[0] = 0;
  if (v26)
  {
    WebCore::IDBIndex::~IDBIndex(v26, v25);
    bmalloc::api::isoDeallocate(v27, v28);
  }
  v29 = __ldxr(v9);
  if (v29 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_33;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_33:
  v30 = *(_QWORD *)(*((_QWORD *)a2 + 18) + 24);
  v31 = *((_QWORD *)a2 + 3);
  v32 = (unsigned int *)((char *)this + 24);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 + 1, v32));
  do
    v34 = __ldaxr(v32);
  while (__stlxr(v34 + 1, v32));
  v58 = this;
  *(_QWORD *)&v59 = v30;
  *((_QWORD *)&v59 + 1) = v31;
  WTF::String::isolatedCopy();
  v35 = bmalloc::api::isoAllocate();
  v36 = (WebCore::IDBIndex *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v36 = &off_1E33589C0;
  *((_QWORD *)v36 + 1) = this;
  v62[0] = v36;
  v37 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v37 = &off_1E33589E8;
  *(_QWORD *)(v37 + 8) = v58;
  *(_OWORD *)(v37 + 16) = v59;
  v38 = v60;
  v58 = 0;
  v60 = 0;
  *(_QWORD *)(v37 + 32) = v38;
  *(_QWORD *)&v63 = v37;
  WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(v35, (uint64_t)this, (uint64_t *)v62, (uint64_t *)&v63);
  if ((_QWORD)v63)
    (*(void (**)(_QWORD))(*(_QWORD *)v63 + 8))(v63);
  if (v62[0])
    (*(void (**)(WebCore::IDBIndex *))(*(_QWORD *)v62[0] + 8))(v62[0]);
  v61 = (unsigned int *)v35;
  *((_QWORD *)this + 44) = *(_QWORD *)(v35 + 128);
  v63 = *(_OWORD *)(v35 + 24);
  v39 = (unsigned int *)(v35 + 8);
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 + 1, v39));
  v62[0] = (WebCore::IDBIndex *)v35;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)this + 192, (uint64_t *)v62);
  v41 = (unsigned int *)v62[0];
  v62[0] = 0;
  if (v41)
  {
    v42 = v41 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v41 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v62, (uint64_t *)this + 37, &v63, (uint64_t *)&v61);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)this);
  v46 = v61;
  v61 = 0;
  if (v46)
  {
    v47 = v46 + 2;
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v46 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
    }
  }
  v50 = v60;
  v60 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v45);
    else
      *(_DWORD *)v50 -= 2;
  }
  result = (unsigned int *)v58;
  v58 = 0;
  if (result)
  {
    v52 = result + 6;
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v45);
      result = (unsigned int *)bmalloc::api::isoDeallocate(v56, v57);
    }
  }
  v55 = __ldxr(v6);
  if (v55 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

unsigned int *WebCore::IDBTransaction::doRequestOpenCursor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  void *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WebCore::IDBRequest *v44;
  uint64_t *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  void *v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  WebCore::IDBRequest *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  WebCore::IDBTransaction *v83;
  __int128 v84;
  __int128 v85;
  int v86;
  char v87;
  int v88;
  unsigned int *v89;
  unsigned int v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned int v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  WTF::StringImpl *v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int *result;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  double v116;
  double v117;
  double v118;
  unsigned int v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v122;
  WTF *v123;
  bmalloc::api *v124;
  void *v125;
  uint64_t v126;
  WTF *v127;
  uint64_t v128;
  WTF *v129;
  uint64_t v130;
  WTF *v131;
  WebCore::IDBTransaction *v132;
  _OWORD v133[3];
  char v134;
  _BYTE v135[16];
  int v136;
  char v137;
  uint64_t v138;
  int v139;
  __int16 v140;
  __int16 v141;
  char v142;
  unsigned int *v143;
  uint64_t v144[3];
  __int128 v145;

  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v8 = v7 - 96;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  v9 = *a2;
  v10 = (_QWORD *)bmalloc::api::isoAllocate();
  v11 = (uint64_t)v10;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &unk_1E33A4FC0;
  v12 = v10 + 3;
  if (!*(_BYTE *)(v8 + 274))
  {
    v13 = v8 - 192;
    v14 = *(_QWORD *)(v8 + 512);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
        v13 = v15;
    }
    v8 = v13 + 192;
  }
  v10[3] = &off_1E33A18C0;
  v10[4] = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v10 + 3), (WebCore::ScriptExecutionContext *)v8);
  *(_QWORD *)(v11 + 24) = &off_1E33A0540;
  *(_QWORD *)(v11 + 40) = 0;
  if (*(_BYTE *)(v8 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195386B24);
  }
  v144[0] = (uint64_t)v12;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v8 + 128), v144, (uint64_t)&v132);
  *v12 = &off_1E3357608;
  v16 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v16)
    v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(v11 + 48) = v16;
  *(_BYTE *)(v11 + 56) = 0;
  *(_DWORD *)(v11 + 60) = 1;
  v18 = (unsigned int *)(v11 + 60);
  *(_QWORD *)v11 = off_1E3357EC8;
  *(_QWORD *)(v11 + 24) = &unk_1E3357F70;
  v19 = (unsigned int *)(a1 + 24);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 64) = a1;
  *(_WORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 104) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 72) + 8);
  do
  {
    v21 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v22 = v21 + 2;
  }
  while (__stlxr(v22, &WebCore::nextClientResourceNumber(void)::currentNumber));
  *(_QWORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 112) = v22;
  __dmb(0xAu);
  v23 = *(_QWORD *)(v11 + 128);
  *(_QWORD *)(v11 + 128) = 0;
  if (v23)
    *(_QWORD *)(v23 + 8) = 3;
  *(_QWORD *)(v11 + 136) = 0;
  *(_DWORD *)(v11 + 144) = 1;
  *(_DWORD *)(v11 + 304) = 7;
  *(_BYTE *)(v11 + 312) = 0;
  *(_BYTE *)(v11 + 328) = 0;
  ++*(_DWORD *)(v9 + 16);
  *(_QWORD *)(v11 + 336) = v9;
  v24 = *(unsigned int ***)(*(_QWORD *)(a1 + 72) + 72);
  v25 = *v24;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  *(_QWORD *)(v11 + 344) = v24;
  *(_DWORD *)(v11 + 352) = 0;
  *(_DWORD *)(v11 + 356) = 16777218;
  *(_WORD *)(v11 + 360) = 0;
  *(_QWORD *)(v11 + 368) = 0;
  v144[0] = v11;
  v27 = *(unsigned int *)(v9 + 160);
  if ((_DWORD)v27 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_165;
  }
  v132 = (WebCore::IDBTransaction *)v144;
  ((void (*)(WebCore::IDBTransaction **, uint64_t))off_1E33585D8[v27])(&v132, v9 + 152);
  if ((*(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v29 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 16) = 0;
    *(_QWORD *)(v29 + 24) = 0;
    *(_QWORD *)(v29 + 8) = v11;
    *(_BYTE *)(v29 + 32) = 0;
    v30 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v11 + 16) = v30 & 0xFFFF000000000000 | v29;
    v31 = v30 & 0xFFFFFFFFFFFFLL;
    if ((v30 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v32 = __ldaxr((unsigned int *)v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, (unsigned int *)v31));
      if (!v33)
      {
        atomic_store(1u, (unsigned int *)v31);
        v126 = *(unsigned int *)(v31 + 28);
        if ((_DWORD)v126)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v31 + 16), (WTF::StringImpl *)(*(_QWORD *)(v31 + 16) + 32 * v126));
        v127 = *(WTF **)(v31 + 16);
        if (v127)
        {
          *(_QWORD *)(v31 + 16) = 0;
          *(_DWORD *)(v31 + 24) = 0;
          WTF::fastFree(v127, v28);
        }
        WTF::fastFree((WTF *)v31, v28);
      }
    }
  }
  v34 = (unsigned int *)(*(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFLL);
  if (v34)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  v8 = *(_QWORD *)(v9 + 168);
  *(_QWORD *)(v9 + 168) = v34;
  if (v8)
  {
    do
    {
      v36 = __ldaxr((unsigned int *)v8);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, (unsigned int *)v8));
    if (!v37)
    {
      atomic_store(1u, (unsigned int *)v8);
      v120 = *(unsigned int *)(v8 + 28);
      if (!(_DWORD)v120)
      {
LABEL_139:
        v121 = *(WTF **)(v8 + 16);
        if (v121)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = 0;
          WTF::fastFree(v121, v28);
        }
        WTF::fastFree((WTF *)v8, v28);
        goto LABEL_32;
      }
LABEL_165:
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v120));
      goto LABEL_139;
    }
  }
LABEL_32:
  *a3 = v11;
  WebCore::ActiveDOMObject::suspendIfNeeded(v12);
  do
    v38 = __ldaxr(v18);
  while (__stlxr(v38 + 1, v18));
  v144[0] = v11;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)&v132, (uint64_t *)(a1 + 328), v144);
  v40 = (unsigned int *)v144[0];
  v144[0] = 0;
  if (v40)
  {
    v41 = v40 + 15;
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v40 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 72))(v40);
    }
  }
  v44 = (WebCore::IDBRequest *)*a3;
  v45 = (uint64_t *)(a1 + 176);
  v46 = *(_DWORD *)(a1 + 188);
  v47 = *(_DWORD *)(a1 + 184) + 1;
  *(_DWORD *)(a1 + 184) = v47;
  if (v47 > v46)
  {
    v48 = *v45;
    if (*v45)
    {
      v49 = *(_DWORD *)(v48 - 4);
      if (!v49)
        goto LABEL_120;
      v50 = 0;
      do
      {
        while (1)
        {
          v51 = *(_QWORD *)(v48 + 8 * --v49);
          if ((unint64_t)(v51 + 1) >= 2 && !*(_QWORD *)(v51 + 8))
            break;
          if (!v49)
            goto LABEL_57;
        }
        *(_QWORD *)(v48 + 8 * v49) = 0;
        do
        {
          v52 = __ldaxr((unsigned int *)v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, (unsigned int *)v51));
        if (!v53)
        {
          atomic_store(1u, (unsigned int *)v51);
          v54 = *(unsigned int *)(v51 + 28);
          if ((_DWORD)v54)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v51 + 16), (WTF::StringImpl *)(*(_QWORD *)(v51 + 16) + 32 * v54));
          v55 = *(WTF **)(v51 + 16);
          if (v55)
          {
            *(_QWORD *)(v51 + 16) = 0;
            *(_DWORD *)(v51 + 24) = 0;
            WTF::fastFree(v55, v39);
          }
          WTF::fastFree((WTF *)v51, v39);
        }
        *(_QWORD *)(v48 + 8 * v49) = -1;
        ++v50;
      }
      while (v49);
LABEL_57:
      v48 = *v45;
      if (v50)
      {
        *(_DWORD *)(v48 - 16) += v50;
        v56 = *v45;
        if (*v45)
          v57 = *(_DWORD *)(v56 - 12);
        else
          v57 = 0;
        *(_DWORD *)(v56 - 12) = v57 - v50;
        v48 = *v45;
        if (!*v45)
          goto LABEL_61;
LABEL_115:
        v110 = *(_DWORD *)(v48 - 4);
        v111 = *(unsigned int *)(v48 - 12);
        if (v110 >= 9 && 6 * (int)v111 < v110)
        {
          v113 = (v111 - 1) | ((v111 - 1) >> 1) | ((((_DWORD)v111 - 1) | ((v111 - 1) >> 1)) >> 2);
          v114 = v113 | (v113 >> 4) | ((v113 | (v113 >> 4)) >> 8);
          v115 = (v114 | HIWORD(v114)) + 1;
          if (v115 > 0x400)
          {
            if (v115 > 2 * v111)
              goto LABEL_129;
          }
          else if (3 * v115 > 4 * v111)
          {
LABEL_126:
            v116 = (double)v111;
            v117 = (double)v115;
            v118 = 0.604166667;
            goto LABEL_130;
          }
          LODWORD(v115) = 2 * v115;
          if (v115 <= 0x400)
            goto LABEL_126;
LABEL_129:
          v116 = (double)v111;
          v117 = (double)v115;
          v118 = 0.416666667;
LABEL_130:
          if (v117 * v118 <= v116)
            LODWORD(v115) = 2 * v115;
          if (v115 <= 8)
            v119 = 8;
          else
            v119 = v115;
          WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)(a1 + 176), v119, 0);
          v58 = 0;
          v48 = *(_QWORD *)(a1 + 176);
          *(_DWORD *)(a1 + 184) = 0;
          if (!v48)
            goto LABEL_62;
LABEL_121:
          v58 = *(_DWORD *)(v48 - 12);
          v59 = 0x7FFFFFFF;
          if (v58 >= 0x7FFFFFFF)
            goto LABEL_63;
          goto LABEL_62;
        }
LABEL_120:
        *(_DWORD *)(a1 + 184) = 0;
        goto LABEL_121;
      }
      if (v48)
        goto LABEL_115;
    }
LABEL_61:
    v58 = 0;
    *(_DWORD *)(a1 + 184) = 0;
LABEL_62:
    v59 = v58;
LABEL_63:
    *(_DWORD *)(a1 + 188) = 2 * v59;
  }
  if ((*((_QWORD *)v44 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v60 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v60 = 1;
    *(_QWORD *)(v60 + 16) = 0;
    *(_QWORD *)(v60 + 24) = 0;
    *(_QWORD *)(v60 + 8) = v44;
    *(_BYTE *)(v60 + 32) = 0;
    v62 = *((_QWORD *)v44 + 2);
    *((_QWORD *)v44 + 2) = v62 & 0xFFFF000000000000 | v60;
    v63 = v62 & 0xFFFFFFFFFFFFLL;
    if ((v62 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v64 = __ldaxr((unsigned int *)v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, (unsigned int *)v63));
      if (!v65)
      {
        atomic_store(1u, (unsigned int *)v63);
        v128 = *(unsigned int *)(v63 + 28);
        if ((_DWORD)v128)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v63 + 16), (WTF::StringImpl *)(*(_QWORD *)(v63 + 16) + 32 * v128));
        v129 = *(WTF **)(v63 + 16);
        if (v129)
        {
          *(_QWORD *)(v63 + 16) = 0;
          *(_DWORD *)(v63 + 24) = 0;
          WTF::fastFree(v129, v61);
        }
        WTF::fastFree((WTF *)v63, v61);
      }
    }
  }
  v66 = *((_QWORD *)v44 + 2) & 0xFFFFFFFFFFFFLL;
  do
    v67 = __ldaxr((unsigned int *)v66);
  while (__stlxr(v67 + 1, (unsigned int *)v66));
  do
    v68 = __ldaxr((unsigned int *)v66);
  while (__stlxr(v68 + 1, (unsigned int *)v66));
  v144[0] = v66;
  WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)(a1 + 176), v144, (uint64_t)&v132);
  v70 = v144[0];
  v144[0] = 0;
  if (!v70)
    goto LABEL_74;
  do
  {
    v71 = __ldaxr((unsigned int *)v70);
    v72 = v71 - 1;
  }
  while (__stlxr(v72, (unsigned int *)v70));
  if (v72)
  {
LABEL_74:
    if (!v66)
      goto LABEL_77;
    goto LABEL_75;
  }
  atomic_store(1u, (unsigned int *)v70);
  v130 = *(unsigned int *)(v70 + 28);
  if ((_DWORD)v130)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v70 + 16), (WTF::StringImpl *)(*(_QWORD *)(v70 + 16) + 32 * v130));
  v131 = *(WTF **)(v70 + 16);
  if (v131)
  {
    *(_QWORD *)(v70 + 16) = 0;
    *(_DWORD *)(v70 + 24) = 0;
    WTF::fastFree(v131, v69);
  }
  WTF::fastFree((WTF *)v70, v69);
  if (v66)
  {
    do
    {
LABEL_75:
      v73 = __ldaxr((unsigned int *)v66);
      v74 = v73 - 1;
    }
    while (__stlxr(v74, (unsigned int *)v66));
    if (!v74)
    {
      atomic_store(1u, (unsigned int *)v66);
      v122 = *(unsigned int *)(v66 + 28);
      if ((_DWORD)v122)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v66 + 16), (WTF::StringImpl *)(*(_QWORD *)(v66 + 16) + 32 * v122));
      v123 = *(WTF **)(v66 + 16);
      if (v123)
      {
        *(_QWORD *)(v66 + 16) = 0;
        *(_DWORD *)(v66 + 24) = 0;
        WTF::fastFree(v123, v69);
      }
      WTF::fastFree((WTF *)v66, v69);
    }
    goto LABEL_77;
  }
  do
LABEL_77:
    v75 = __ldaxr(v19);
  while (__stlxr(v75 + 1, v19));
  v76 = (WebCore::IDBRequest *)*a3;
  v77 = (unsigned int *)(*a3 + 60);
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v78 + 1, v77));
  do
    v79 = __ldaxr(v19);
  while (__stlxr(v79 + 1, v19));
  v132 = (WebCore::IDBTransaction *)a1;
  WebCore::IDBCursorInfo::isolatedCopy((WebCore::IDBCursorInfo *)(*a2 + 24), (uint64_t)v133);
  v80 = bmalloc::api::isoAllocate();
  v81 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v81 = &off_1E3358A10;
  v81[1] = a1;
  v81[2] = v76;
  v82 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v82 = &off_1E3358A38;
  v83 = v132;
  v132 = 0;
  *(_QWORD *)(v82 + 8) = v83;
  v84 = v133[0];
  v85 = v133[2];
  *(_OWORD *)(v82 + 32) = v133[1];
  *(_OWORD *)(v82 + 48) = v85;
  *(_OWORD *)(v82 + 16) = v84;
  *(_BYTE *)(v82 + 64) = v134;
  *(_BYTE *)(v82 + 72) = 0;
  *(_DWORD *)(v82 + 88) = -1;
  v86 = v136;
  if (v136 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3358668[v136])(v144, v82 + 72, v135);
    *(_DWORD *)(v82 + 88) = v86;
  }
  v87 = v137;
  *(_BYTE *)(v82 + 104) = 0;
  *(_BYTE *)(v82 + 96) = v87;
  *(_DWORD *)(v82 + 120) = -1;
  v88 = v139;
  if (v139 != -1)
  {
    ((void (*)(uint64_t *))off_1E3358668[v139])(v144);
    *(_DWORD *)(v82 + 120) = v88;
  }
  *(_WORD *)(v82 + 128) = v140;
  *(_WORD *)(v82 + 136) = v141;
  *(_BYTE *)(v82 + 138) = v142;
  WebCore::IDBClient::TransactionOperation::TransactionOperation((WebCore::IDBClient::TransactionOperation *)v80, (WebCore::IDBTransaction *)a1, v44);
  *(_QWORD *)v80 = off_1E3358838;
  v89 = (unsigned int *)(v80 + 8);
  do
    v90 = __ldaxr(v89);
  while (__stlxr(v90 + 1, v89));
  v91 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v91 = &off_1E3358A60;
  v91[1] = v80;
  v91[2] = v82;
  v92 = *(_QWORD *)(v80 + 88);
  *(_QWORD *)(v80 + 88) = v91;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  do
    v93 = __ldaxr(v89);
  while (__stlxr(v93 + 1, v89));
  v94 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v94 = &off_1E3358A88;
  v94[1] = v80;
  v94[2] = v81;
  v95 = *(_QWORD *)(v80 + 96);
  *(_QWORD *)(v80 + 96) = v94;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  v143 = (unsigned int *)v80;
  v145 = *(_OWORD *)(v80 + 24);
  do
    v96 = __ldaxr(v89);
  while (__stlxr(v96 + 1, v89));
  v144[0] = v80;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(a1 + 192, v144);
  v97 = (unsigned int *)v144[0];
  v144[0] = 0;
  if (v97)
  {
    v98 = v97 + 2;
    do
    {
      v99 = __ldaxr(v98);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v98));
    if (!v100)
    {
      atomic_store(1u, v97 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v97 + 8))(v97);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v144, (uint64_t *)(a1 + 296), &v145, (uint64_t *)&v143);
  WebCore::IDBTransaction::handlePendingOperations(a1);
  v102 = v143;
  v143 = 0;
  if (v102)
  {
    v103 = v102 + 2;
    do
    {
      v104 = __ldaxr(v103);
      v105 = v104 - 1;
    }
    while (__stlxr(v105, v103));
    if (!v105)
    {
      atomic_store(1u, v102 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v102 + 8))(v102);
    }
  }
  if (v139 != -1)
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v139])(v144, &v138);
  v139 = -1;
  if (v136 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v136])(v144, v135);
  v136 = -1;
  result = (unsigned int *)v132;
  v132 = 0;
  if (result)
  {
    v107 = result + 6;
    do
    {
      v108 = __ldaxr(v107);
      v109 = v108 - 1;
    }
    while (__stlxr(v109, v107));
    if (!v109)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v101);
      return (unsigned int *)bmalloc::api::isoDeallocate(v124, v125);
    }
  }
  return result;
}

unsigned int *WebCore::IDBTransaction::requestOpenCursor@<X0>(WebCore::IDBTransaction *this@<X0>, WebCore::IDBIndex *a2@<X1>, const WebCore::IDBCursorInfo *a3@<X2>, uint64_t *a4@<X8>)
{
  _DWORD *v8;
  unsigned int *result;
  _QWORD *v10;
  _QWORD *v11;

  if (*((_BYTE *)a3 + 122))
  {
    v8 = (_DWORD *)bmalloc::api::isoAllocate();
    v11 = (_QWORD *)WebCore::IDBCursor::IDBCursor((uint64_t)v8, (uint64_t)a2, (__int128 *)a3);
    result = WebCore::IDBTransaction::doRequestOpenCursor((uint64_t)this, (uint64_t *)&v11, a4);
    if (!v8)
      return result;
  }
  else
  {
    v8 = (_DWORD *)bmalloc::api::isoAllocate();
    v10 = (_QWORD *)WebCore::IDBCursor::IDBCursor((uint64_t)v8, (uint64_t)a2, (__int128 *)a3);
    *v10 = off_1E3357288;
    v11 = v10;
    result = WebCore::IDBTransaction::doRequestOpenCursor((uint64_t)this, (uint64_t *)&v11, a4);
  }
  if (v8[4] == 1)
    return (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  --v8[4];
  return result;
}

unsigned int *WebCore::IDBTransaction::iterateCursor(WebCore::IDBTransaction *this, WebCore::IDBCursor *a2, const WebCore::IDBIterateCursorData *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::IDBRequest *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  WebCore::IDBTransaction *v25;
  int v26;
  char v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *result;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  bmalloc::api *v50;
  void *v51;
  WebCore::IDBTransaction *v52;
  _BYTE v53[8];
  _BYTE v54[16];
  int v55;
  char v56;
  uint64_t v57;
  int v58;
  int v59;
  char v60;
  unsigned int *v61;
  uint64_t v62[3];
  __int128 v63;

  v6 = *((_QWORD *)a2 + 21);
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  v7 = (unsigned int *)(v6 + 60);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v62[0] = v6;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)&v52, (uint64_t *)this + 41, v62);
  v9 = (unsigned int *)v62[0];
  v62[0] = 0;
  if (v9)
  {
    v10 = v9 + 15;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 72))(v9);
    }
  }
  v13 = *((_QWORD *)a2 + 21);
  if (v13)
    v14 = *(WebCore::IDBRequest **)(v13 + 8);
  else
    v14 = 0;
  v15 = (unsigned int *)((char *)this + 24);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = *((_QWORD *)a2 + 21);
  if (v17)
    v18 = *(_QWORD *)(v17 + 8);
  else
    v18 = 0;
  v19 = (unsigned int *)(v18 + 60);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v15);
  while (__stlxr(v21 + 1, v15));
  v52 = this;
  WebCore::IDBIterateCursorData::isolatedCopy(a3, (uint64_t)v53);
  v22 = bmalloc::api::isoAllocate();
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v23 = &off_1E3358AB0;
  v23[1] = this;
  v23[2] = v18;
  v24 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v24 = &off_1E3358AD8;
  v25 = v52;
  v52 = 0;
  *(_QWORD *)(v24 + 8) = v25;
  *(_BYTE *)(v24 + 16) = v53[0];
  *(_BYTE *)(v24 + 24) = 0;
  *(_DWORD *)(v24 + 40) = -1;
  v26 = v55;
  if (v55 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3358668[v55])(v62, v24 + 24, v54);
    *(_DWORD *)(v24 + 40) = v26;
  }
  v27 = v56;
  *(_BYTE *)(v24 + 56) = 0;
  *(_BYTE *)(v24 + 48) = v27;
  *(_DWORD *)(v24 + 72) = -1;
  v28 = v58;
  if (v58 != -1)
  {
    ((void (*)(uint64_t *))off_1E3358668[v58])(v62);
    *(_DWORD *)(v24 + 72) = v28;
  }
  *(_DWORD *)(v24 + 80) = v59;
  *(_BYTE *)(v24 + 84) = v60;
  WebCore::IDBClient::TransactionOperation::TransactionOperation((WebCore::IDBClient::TransactionOperation *)v22, this, v14);
  *(_QWORD *)v22 = off_1E3358838;
  v29 = (unsigned int *)(v22 + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 + 1, v29));
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v31 = &off_1E3358A60;
  v31[1] = v22;
  v31[2] = v24;
  v32 = *(_QWORD *)(v22 + 88);
  *(_QWORD *)(v22 + 88) = v31;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  do
    v33 = __ldaxr(v29);
  while (__stlxr(v33 + 1, v29));
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v34 = &off_1E3358A88;
  v34[1] = v22;
  v34[2] = v23;
  v35 = *(_QWORD *)(v22 + 96);
  *(_QWORD *)(v22 + 96) = v34;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v61 = (unsigned int *)v22;
  v63 = *(_OWORD *)(v22 + 24);
  do
    v36 = __ldaxr(v29);
  while (__stlxr(v36 + 1, v29));
  v62[0] = v22;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)this + 192, v62);
  v37 = (unsigned int *)v62[0];
  v62[0] = 0;
  if (v37)
  {
    v38 = v37 + 2;
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, v37 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v62, (uint64_t *)this + 37, &v63, (uint64_t *)&v61);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)this);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    v43 = v42 + 2;
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v42 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
    }
  }
  if (v58 != -1)
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v58])(v62, &v57);
  v58 = -1;
  if (v55 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v55])(v62, v54);
  v55 = -1;
  result = (unsigned int *)v52;
  v52 = 0;
  if (result)
  {
    v47 = result + 6;
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v41);
      return (unsigned int *)bmalloc::api::isoDeallocate(v50, v51);
    }
  }
  return result;
}

unsigned int *WebCore::IDBTransaction::requestGetAllIndexRecords@<X0>(_QWORD *a1@<X0>, WebCore::IDBIndex *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, WebCore::IDBRequest **a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  WebCore::ScriptExecutionContext *v14;
  WebCore::IDBRequest *v15;
  WebCore::IDBRequest *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::IDBRequest *v26;
  unsigned int *v27;
  unsigned int v28;
  WebCore::IDBRequest *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  WebCore::IDBTransaction *v36;
  int v37;
  char v38;
  int v39;
  __int128 v40;
  unsigned int *v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  WTF::StringImpl *v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *result;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  bmalloc::api *v62;
  void *v63;
  WebCore::IDBTransaction *v64;
  _BYTE v65[8];
  _BYTE v66[16];
  int v67;
  char v68;
  uint64_t v69;
  int v70;
  __int16 v71;
  __int128 v72;
  __int128 v73;
  unsigned int *v74;
  unsigned int *v75;
  _BYTE v76[16];
  int v77;
  char v78;
  _BYTE v79[16];
  int v80;
  __int16 v81;
  char v82;
  int v83;
  char v84;
  __int128 v85;
  uint64_t v86[3];
  __int128 v87;

  v12 = a1[5];
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      v14 = (WebCore::ScriptExecutionContext *)(v13 - 96);
    else
      v14 = 0;
  }
  else
  {
    v14 = 0;
  }
  v15 = (WebCore::IDBRequest *)bmalloc::api::isoAllocate();
  v16 = WebCore::IDBRequest::IDBRequest(v15, v14, a2, (WebCore::IDBTransaction *)a1);
  *a6 = v16;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v16 + 3);
  v17 = (unsigned int *)((char *)v15 + 60);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v75 = (unsigned int *)v15;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)&v64, a1 + 41, &v75);
  v19 = v75;
  v75 = 0;
  if (v19)
  {
    v20 = v19 + 15;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 72))(v19);
    }
  }
  LOBYTE(v75) = *(_BYTE *)a3;
  v76[0] = 0;
  v77 = -1;
  v23 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v23 != -1)
  {
    ((void (*)(WebCore::IDBTransaction **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v23])(&v64, v76, a3 + 8);
    v77 = v23;
  }
  v78 = *(_BYTE *)(a3 + 32);
  v79[0] = 0;
  v80 = -1;
  v24 = *(unsigned int *)(a3 + 56);
  if ((_DWORD)v24 != -1)
  {
    ((void (*)(WebCore::IDBTransaction **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v24])(&v64, v79, a3 + 40);
    v80 = v24;
  }
  v81 = *(_WORD *)(a3 + 64);
  v82 = a4;
  v83 = a5;
  v84 = BYTE4(a5);
  v25 = *((_QWORD *)a2 + 3);
  *(_QWORD *)&v85 = *(_QWORD *)(*((_QWORD *)a2 + 18) + 24);
  *((_QWORD *)&v85 + 1) = v25;
  v26 = *a6;
  v27 = (unsigned int *)(a1 + 3);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v29 = *a6;
  v30 = (unsigned int *)((char *)*a6 + 60);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  do
    v32 = __ldaxr(v27);
  while (__stlxr(v32 + 1, v27));
  v64 = (WebCore::IDBTransaction *)a1;
  WebCore::IDBKeyRangeData::isolatedCopy((WebCore::IDBKeyRangeData *)&v75, (uint64_t)v65);
  LOBYTE(v72) = v82;
  DWORD1(v72) = v83;
  BYTE8(v72) = v84;
  v73 = v85;
  v33 = bmalloc::api::isoAllocate();
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v34 = &off_1E3358B50;
  v34[1] = a1;
  v34[2] = v29;
  v35 = WTF::fastMalloc((WTF *)0x78);
  *(_QWORD *)v35 = &off_1E3358B78;
  v36 = v64;
  v64 = 0;
  *(_QWORD *)(v35 + 8) = v36;
  *(_BYTE *)(v35 + 16) = v65[0];
  *(_BYTE *)(v35 + 24) = 0;
  *(_DWORD *)(v35 + 40) = -1;
  v37 = v67;
  if (v67 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3358668[v67])(v86, v35 + 24, v66);
    *(_DWORD *)(v35 + 40) = v37;
  }
  v38 = v68;
  *(_BYTE *)(v35 + 56) = 0;
  *(_BYTE *)(v35 + 48) = v38;
  *(_DWORD *)(v35 + 72) = -1;
  v39 = v70;
  if (v70 != -1)
  {
    ((void (*)(uint64_t *))off_1E3358668[v70])(v86);
    *(_DWORD *)(v35 + 72) = v39;
  }
  *(_WORD *)(v35 + 80) = v71;
  v40 = v73;
  *(_OWORD *)(v35 + 88) = v72;
  *(_OWORD *)(v35 + 104) = v40;
  WebCore::IDBClient::TransactionOperation::TransactionOperation((WebCore::IDBClient::TransactionOperation *)v33, (WebCore::IDBTransaction *)a1, v26);
  *(_QWORD *)v33 = off_1E3358838;
  v41 = (unsigned int *)(v33 + 8);
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 + 1, v41));
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v43 = &off_1E3358A60;
  v43[1] = v33;
  v43[2] = v35;
  v44 = *(_QWORD *)(v33 + 88);
  *(_QWORD *)(v33 + 88) = v43;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  do
    v45 = __ldaxr(v41);
  while (__stlxr(v45 + 1, v41));
  v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v46 = &off_1E3358A88;
  v46[1] = v33;
  v46[2] = v34;
  v47 = *(_QWORD *)(v33 + 96);
  *(_QWORD *)(v33 + 96) = v46;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v74 = (unsigned int *)v33;
  v87 = *(_OWORD *)(v33 + 24);
  do
    v48 = __ldaxr(v41);
  while (__stlxr(v48 + 1, v41));
  v86[0] = v33;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)(a1 + 24), v86);
  v49 = (unsigned int *)v86[0];
  v86[0] = 0;
  if (v49)
  {
    v50 = v49 + 2;
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v49 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v86, a1 + 37, &v87, (uint64_t *)&v74);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)a1);
  v54 = v74;
  v74 = 0;
  if (v54)
  {
    v55 = v54 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v54 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
    }
  }
  if (v70 != -1)
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v70])(v86, &v69);
  v70 = -1;
  if (v67 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v67])(v86, v66);
  v67 = -1;
  result = (unsigned int *)v64;
  v64 = 0;
  if (result)
  {
    v59 = result + 6;
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v53);
      result = (unsigned int *)bmalloc::api::isoDeallocate(v62, v63);
    }
  }
  if (v80 != -1)
    result = (unsigned int *)((uint64_t (*)(WebCore::IDBTransaction **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v80])(&v64, v79);
  v80 = -1;
  if (v77 != -1)
    return (unsigned int *)((uint64_t (*)(WebCore::IDBTransaction **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v77])(&v64, v76);
  return result;
}

unsigned int *WebCore::IDBTransaction::didGetAllRecordsOnServer(WebCore::IDBTransaction *this, WebCore::IDBRequest *a2, const WebCore::IDBResultData *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::IDBValue **v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::IDBValue *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _DWORD *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *result;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  _DWORD *v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  WebCore::IDBValue *v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  WebCore::IDBValue *v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WebCore::IDBTransaction *v77;
  _BYTE v78[8];
  char *v79;

  if (*(_BYTE *)a3)
  {
    v6 = *((_QWORD *)a3 + 11);
    if (v6)
    {
      if (*(_BYTE *)v6)
      {
        v7 = *((_QWORD *)a2 + 4);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            v9 = (unsigned __int8 *)(v8 - 96);
            v10 = *(unsigned __int8 *)(v8 + 178);
            if (*(_BYTE *)(v8 + 178))
            {
              if (v10 == 1 || v10 == 2)
                ++*(_DWORD *)(v8 + 216);
            }
            else
            {
              *(_DWORD *)(v8 - 264) += 2;
            }
            v11 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 344))(v9);
            MEMORY[0x19AEA3294](v78, v11);
            v12 = *((unsigned int *)a2 + 76);
            if ((_DWORD)v12 != -1)
            {
              if ((_DWORD)v12 == 5)
              {
                *((_BYTE *)a2 + 144) = *(_BYTE *)v6;
                WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)a2 + 152, (unsigned int *)(v6 + 8));
                if ((WebCore::IDBRequest *)v6 != (WebCore::IDBRequest *)((char *)a2 + 144))
                {
                  v14 = (WebCore::IDBValue **)((char *)a2 + 168);
                  v15 = *((unsigned int *)a2 + 45);
                  v16 = *(unsigned int *)(v6 + 36);
                  if (v15 <= v16)
                  {
                    v57 = *((_DWORD *)a2 + 44);
                    if (v16 > v57)
                    {
                      if (v57)
                      {
                        if ((_DWORD)v15)
                        {
                          v58 = *v14;
                          v59 = 40 * v15;
                          do
                          {
                            WebCore::IDBValue::~IDBValue(v58, v13);
                            v58 = (WebCore::IDBValue *)(v60 + 40);
                            v59 -= 40;
                          }
                          while (v59);
                          *((_DWORD *)a2 + 45) = 0;
                        }
                        v61 = *v14;
                        if (*v14)
                        {
                          *((_QWORD *)a2 + 21) = 0;
                          *((_DWORD *)a2 + 44) = 0;
                          WTF::fastFree(v61, v13);
                        }
                      }
                      WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 168, *(unsigned int *)(v6 + 36));
                      v15 = *((unsigned int *)a2 + 45);
                    }
                    LODWORD(v16) = v15;
                  }
                  else
                  {
                    v17 = (WebCore::IDBValue *)((char *)*v14 + 40 * v16);
                    v18 = 40 * v15 - 40 * v16;
                    do
                    {
                      WebCore::IDBValue::~IDBValue(v17, v13);
                      v17 = (WebCore::IDBValue *)(v19 + 40);
                      v18 -= 40;
                    }
                    while (v18);
                    *((_DWORD *)a2 + 45) = v16;
                    v15 = v16;
                  }
                  v62 = *(_QWORD *)(v6 + 24);
                  v63 = *v14;
                  if (v15)
                  {
                    v64 = v62 + 40 * v15;
                    do
                    {
                      v65 = *(unsigned int **)v62;
                      if (*(_QWORD *)v62)
                      {
                        do
                          v66 = __ldaxr(v65);
                        while (__stlxr(v66 + 1, v65));
                      }
                      v67 = *(_QWORD *)v63;
                      *(_QWORD *)v63 = v65;
                      if (v67)
                      {
                        do
                        {
                          v68 = __ldaxr((unsigned int *)v67);
                          v69 = v68 - 1;
                        }
                        while (__stlxr(v69, (unsigned int *)v67));
                        if (!v69)
                        {
                          atomic_store(1u, (unsigned int *)v67);
                          v70 = *(WTF **)(v67 + 8);
                          if (v70)
                          {
                            *(_QWORD *)(v67 + 8) = 0;
                            *(_DWORD *)(v67 + 16) = 0;
                            WTF::fastFree(v70, v13);
                          }
                          WTF::fastFree((WTF *)v67, v13);
                        }
                      }
                      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v63 + 2, (unsigned int *)(v62 + 8));
                      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v63 + 6, (unsigned int *)(v62 + 24));
                      v62 += 40;
                      v63 = (WebCore::IDBValue *)((char *)v63 + 40);
                    }
                    while (v62 != v64);
                    v62 = *(_QWORD *)(v6 + 24);
                    LODWORD(v16) = *((_DWORD *)a2 + 45);
                    v63 = (WebCore::IDBValue *)*((_QWORD *)a2 + 21);
                  }
                  WTF::VectorCopier<false,WebCore::IDBValue>::uninitializedCopy<WebCore::IDBValue>((unsigned int **)(v62 + 40 * v16), (unsigned int **)(v62 + 40 * *(unsigned int *)(v6 + 36)), (uint64_t)v63 + 40 * v16);
                  *((_DWORD *)a2 + 45) = *(_DWORD *)(v6 + 36);
                }
                v71 = (char *)a2 + 184;
                v72 = v6 + 40;
                if (*((unsigned __int8 *)a2 + 208) != *(unsigned __int8 *)(v6 + 64))
                {
                  if (*((_BYTE *)a2 + 208))
                  {
                    v75 = *((unsigned int *)a2 + 50);
                    if ((_DWORD)v75 != -1)
                      ((void (*)(char **, char *, uint64_t))off_1E3358310[v75])(&v79, v71, v72);
                    *((_DWORD *)a2 + 50) = -1;
                    *((_BYTE *)a2 + 208) = 0;
                  }
                  else
                  {
                    *((_BYTE *)a2 + 184) = 0;
                    *((_DWORD *)a2 + 50) = -1;
                    v76 = *(unsigned int *)(v6 + 56);
                    if ((_DWORD)v76 != -1)
                    {
                      ((void (*)(char **, char *, uint64_t))off_1E3358320[v76])(&v79, v71, v72);
                      *((_DWORD *)a2 + 50) = v76;
                    }
                    *((_BYTE *)a2 + 208) = 1;
                  }
                  goto LABEL_39;
                }
                if (*((_BYTE *)a2 + 208))
                {
                  v73 = *((unsigned int *)a2 + 50);
                  v74 = *(unsigned int *)(v6 + 56);
                  if ((_DWORD)v73 == -1)
                  {
                    if ((_DWORD)v74 == -1)
                      goto LABEL_39;
                  }
                  else if ((_DWORD)v74 == -1)
                  {
                    ((void (*)(char **, char *, uint64_t))off_1E3358310[v73])(&v79, v71, v72);
                    *((_DWORD *)a2 + 50) = -1;
                    goto LABEL_39;
                  }
                  v79 = (char *)a2 + 184;
                  ((void (*)(char **))off_1E3358330[v74])(&v79);
                }
LABEL_39:
                *((_QWORD *)a2 + 15) = 0;
                v35 = *((_QWORD *)a2 + 16);
                if (v35)
                {
                  *(_QWORD *)(v35 + 8) = 3;
                  *((_QWORD *)a2 + 16) = 0;
                }
                v36 = (char **)v78;
LABEL_54:
                MEMORY[0x19AEA32A0](v36);
                v47 = v9[274];
                if (v9[274])
                {
                  if (v47 == 1)
                  {
                    if (*((_DWORD *)v9 + 78) == 1)
                      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v9 + 40))(v9);
                    else
                      --*((_DWORD *)v9 + 78);
                  }
                  else if (v47 == 2)
                  {
                    WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v9 + 78);
                  }
                }
                else if (*((_DWORD *)v9 - 42) == 2)
                {
                  if ((*((_WORD *)v9 - 81) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)(v9 - 192), a2);
                }
                else
                {
                  *((_DWORD *)v9 - 42) -= 2;
                }
                goto LABEL_57;
              }
              ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v12])(&v79, (char *)a2 + 144);
            }
            *((_DWORD *)a2 + 76) = -1;
            WebCore::IDBGetAllResult::IDBGetAllResult((WebCore::IDBRequest *)((char *)a2 + 144), (const WebCore::IDBGetAllResult *)v6);
            *((_DWORD *)a2 + 76) = 5;
            goto LABEL_39;
          }
        }
LABEL_57:
        *((_DWORD *)a2 + 88) = 1;
        v48 = *((unsigned __int16 *)a3 + 12);
        *((_WORD *)a2 + 44) = v48;
        v49 = (_DWORD *)*((_QWORD *)a3 + 4);
        v50 = v48 >> 8;
        if (v49)
          *v49 += 2;
        v51 = (WTF::StringImpl *)*((_QWORD *)a2 + 12);
        *((_QWORD *)a2 + 12) = v49;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
          {
            WTF::StringImpl::destroy(v51, a2);
            v50 = *((unsigned __int8 *)a2 + 89);
          }
          else
          {
            *(_DWORD *)v51 -= 2;
          }
        }
        if (v50)
          WebCore::IDBRequest::onError((WTF::StringImpl **)a2);
        else
          WebCore::IDBRequest::onSuccess(a2);
        v52 = (unsigned int *)((char *)a2 + 60);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 + 1, v52));
        result = (unsigned int *)*((_QWORD *)this + 42);
        *((_QWORD *)this + 42) = a2;
        if (result)
        {
          v54 = result + 15;
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            atomic_store(1u, result + 15);
            return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
          }
        }
        return result;
      }
      v24 = *((_QWORD *)a2 + 4);
      if (!v24)
        goto LABEL_57;
      v25 = *(_QWORD *)(v24 + 8);
      if (!v25)
        goto LABEL_57;
      v9 = (unsigned __int8 *)(v25 - 96);
      v26 = *(unsigned __int8 *)(v25 + 178);
      if (*(_BYTE *)(v25 + 178))
      {
        if (v26 == 1 || v26 == 2)
          ++*(_DWORD *)(v25 + 216);
      }
      else
      {
        *(_DWORD *)(v25 - 264) += 2;
      }
      v27 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 344))(v9);
      MEMORY[0x19AEA3294](&v79, v27);
      v28 = *((unsigned int *)a2 + 76);
      if ((_DWORD)v28 != -1)
      {
        if ((_DWORD)v28 == 3)
        {
          WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)a2 + 144, (unsigned int *)(v6 + 8));
LABEL_51:
          *((_QWORD *)a2 + 15) = 0;
          v46 = *((_QWORD *)a2 + 16);
          if (v46)
          {
            *(_QWORD *)(v46 + 8) = 3;
            *((_QWORD *)a2 + 16) = 0;
          }
          v36 = &v79;
          goto LABEL_54;
        }
        ((void (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v28])(v78, (char *)a2 + 144);
      }
      v77 = this;
      *((_DWORD *)a2 + 76) = -1;
      v37 = *(unsigned int *)(v6 + 20);
      *((_QWORD *)a2 + 18) = 0;
      *((_QWORD *)a2 + 19) = 0;
      *((_DWORD *)a2 + 39) = v37;
      if (!(_DWORD)v37)
      {
LABEL_50:
        *((_DWORD *)a2 + 76) = 3;
        this = v77;
        goto LABEL_51;
      }
      if (!(v37 >> 27))
      {
        v38 = WTF::fastMalloc((WTF *)(32 * v37));
        *((_DWORD *)a2 + 38) = v37;
        *((_QWORD *)a2 + 18) = v38;
        v39 = *(unsigned int *)(v6 + 20);
        if ((_DWORD)v39)
        {
          v40 = *(_QWORD *)(v6 + 8);
          v41 = v40 + 32 * v39;
          v42 = (_DWORD *)(v38 + 24);
          v43 = v40 + 8;
          do
          {
            v44 = v43 - 8;
            *((_BYTE *)v42 - 24) = *(_BYTE *)(v43 - 8);
            *((_BYTE *)v42 - 16) = 0;
            *v42 = -1;
            v45 = *(unsigned int *)(v43 + 16);
            if ((_DWORD)v45 != -1)
            {
              ((void (*)(_BYTE *, _DWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v45])(v78, v42 - 4, v43);
              *v42 = v45;
            }
            v42 += 8;
            v43 += 32;
          }
          while (v44 + 32 != v41);
        }
        goto LABEL_50;
      }
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x195387DE4);
  }
  *((_DWORD *)a2 + 88) = 1;
  v20 = *((unsigned __int16 *)a3 + 12);
  *((_WORD *)a2 + 44) = v20;
  v21 = (_DWORD *)*((_QWORD *)a3 + 4);
  v22 = v20 >> 8;
  if (v21)
    *v21 += 2;
  v23 = (WTF::StringImpl *)*((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v21;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::destroy(v23, a2);
      v22 = *((unsigned __int8 *)a2 + 89);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  if (v22)
    WebCore::IDBRequest::onError((WTF::StringImpl **)a2);
  else
    WebCore::IDBRequest::onSuccess(a2);
  v29 = (unsigned int *)((char *)a2 + 60);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 + 1, v29));
  result = (unsigned int *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = a2;
  if (result)
  {
    v32 = result + 15;
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, result + 15);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  return result;
}

unsigned int *WebCore::IDBTransaction::requestIndexRecord@<X0>(_QWORD *a1@<X0>, WebCore::IDBIndex *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, WebCore::IDBRequest **a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  WebCore::ScriptExecutionContext *v12;
  WebCore::IDBRequest *v13;
  WebCore::IDBRequest *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::IDBRequest *v23;
  unsigned int *v24;
  unsigned int v25;
  WebCore::IDBRequest *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  WebCore::IDBTransaction *v33;
  int v34;
  char v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *result;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  bmalloc::api *v58;
  void *v59;
  WebCore::IDBTransaction *v60;
  _BYTE v61[8];
  _BYTE v62[16];
  int v63;
  char v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  char v68;
  unsigned int *v69;
  unsigned int *v70;
  _BYTE v71[16];
  int v72;
  char v73;
  _BYTE v74[16];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78[3];
  __int128 v79;

  v10 = a1[5];
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
      v12 = (WebCore::ScriptExecutionContext *)(v11 - 96);
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  v13 = (WebCore::IDBRequest *)bmalloc::api::isoAllocate();
  v14 = WebCore::IDBRequest::IDBRequest(v13, v12, a2, (WebCore::IDBTransaction *)a1);
  *((_BYTE *)v14 + 358) = a3;
  *a5 = v14;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v14 + 3);
  v15 = (unsigned int *)((char *)v13 + 60);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v70 = (unsigned int *)v13;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)&v60, a1 + 41, &v70);
  v17 = v70;
  v70 = 0;
  if (v17)
  {
    v18 = v17 + 15;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 72))(v17);
    }
  }
  LOBYTE(v70) = *(_BYTE *)a4;
  v71[0] = 0;
  v72 = -1;
  v21 = *(unsigned int *)(a4 + 24);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(WebCore::IDBTransaction **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v21])(&v60, v71, a4 + 8);
    v72 = v21;
  }
  v73 = *(_BYTE *)(a4 + 32);
  v74[0] = 0;
  v75 = -1;
  v22 = *(unsigned int *)(a4 + 56);
  if ((_DWORD)v22 != -1)
  {
    ((void (*)(WebCore::IDBTransaction **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v22])(&v60, v74, a4 + 40);
    v75 = v22;
  }
  v76 = *(_WORD *)(a4 + 64);
  v77 = 1;
  v23 = *a5;
  v24 = (unsigned int *)(a1 + 3);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  v26 = *a5;
  v27 = (unsigned int *)((char *)*a5 + 60);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  do
    v29 = __ldaxr(v24);
  while (__stlxr(v29 + 1, v24));
  v60 = (WebCore::IDBTransaction *)a1;
  WebCore::IDBKeyRangeData::isolatedCopy((WebCore::IDBKeyRangeData *)&v70, (uint64_t)v61);
  v68 = v77;
  v30 = bmalloc::api::isoAllocate();
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v31 = &off_1E3358BF0;
  v31[1] = a1;
  v31[2] = v26;
  v32 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v32 = &off_1E3358C18;
  v33 = v60;
  v60 = 0;
  *(_QWORD *)(v32 + 8) = v33;
  *(_BYTE *)(v32 + 16) = v61[0];
  *(_BYTE *)(v32 + 24) = 0;
  *(_DWORD *)(v32 + 40) = -1;
  v34 = v63;
  if (v63 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3358668[v63])(v78, v32 + 24, v62);
    *(_DWORD *)(v32 + 40) = v34;
  }
  v35 = v64;
  *(_BYTE *)(v32 + 56) = 0;
  *(_BYTE *)(v32 + 48) = v35;
  *(_DWORD *)(v32 + 72) = -1;
  v36 = v66;
  if (v66 != -1)
  {
    ((void (*)(uint64_t *))off_1E3358668[v66])(v78);
    *(_DWORD *)(v32 + 72) = v36;
  }
  *(_WORD *)(v32 + 80) = v67;
  *(_BYTE *)(v32 + 88) = v68;
  WebCore::IDBClient::TransactionOperation::TransactionOperation((WebCore::IDBClient::TransactionOperation *)v30, (WebCore::IDBTransaction *)a1, v23);
  *(_QWORD *)v30 = off_1E3358838;
  v37 = (unsigned int *)(v30 + 8);
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 + 1, v37));
  v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v39 = &off_1E3358A60;
  v39[1] = v30;
  v39[2] = v32;
  v40 = *(_QWORD *)(v30 + 88);
  *(_QWORD *)(v30 + 88) = v39;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  do
    v41 = __ldaxr(v37);
  while (__stlxr(v41 + 1, v37));
  v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v42 = &off_1E3358A88;
  v42[1] = v30;
  v42[2] = v31;
  v43 = *(_QWORD *)(v30 + 96);
  *(_QWORD *)(v30 + 96) = v42;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v69 = (unsigned int *)v30;
  v79 = *(_OWORD *)(v30 + 24);
  do
    v44 = __ldaxr(v37);
  while (__stlxr(v44 + 1, v37));
  v78[0] = v30;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)(a1 + 24), v78);
  v45 = (unsigned int *)v78[0];
  v78[0] = 0;
  if (v45)
  {
    v46 = v45 + 2;
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v45 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v78, a1 + 37, &v79, (uint64_t *)&v69);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)a1);
  v50 = v69;
  v69 = 0;
  if (v50)
  {
    v51 = v50 + 2;
    do
    {
      v52 = __ldaxr(v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v51));
    if (!v53)
    {
      atomic_store(1u, v50 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
    }
  }
  if (v66 != -1)
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v66])(v78, &v65);
  v66 = -1;
  if (v63 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v63])(v78, v62);
  v63 = -1;
  result = (unsigned int *)v60;
  v60 = 0;
  if (result)
  {
    v55 = result + 6;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v49);
      result = (unsigned int *)bmalloc::api::isoDeallocate(v58, v59);
    }
  }
  if (v75 != -1)
    result = (unsigned int *)((uint64_t (*)(WebCore::IDBTransaction **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v75])(&v60, v74);
  v75 = -1;
  if (v72 != -1)
    return (unsigned int *)((uint64_t (*)(WebCore::IDBTransaction **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v72])(&v60, v71);
  return result;
}

unsigned int *WebCore::IDBTransaction::didGetRecordOnServer(WebCore::IDBTransaction *this, WebCore::IDBRequest *a2, const WebCore::IDBResultData *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  unsigned int **v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *result;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  WebCore::IDBValue *v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  unsigned int v57;
  WTF *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  WTF *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  _DWORD *v85;
  unsigned int v86;
  WTF::StringImpl *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  WTF *v93;
  unsigned int v94;
  WTF *v95;
  char v96[8];
  char *v97;

  if (*(_BYTE *)a3)
  {
    if (!*((_BYTE *)a2 + 328))
      goto LABEL_8;
    v7 = *((unsigned int *)a2 + 80);
    if ((_DWORD)v7 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_161;
    }
    v97 = v96;
    if (((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore10IDBRequest21sourceIndexIdentifierEvE3__0JZNKS9_21sourceIndexIdentifierEvE3__1ZNKS9_21sourceIndexIdentifierEvE3__2EEEEEJRKNS0_6__implIJNS6_6RefPtrINS8_14IDBObjectStoreENS6_12RawPtrTraitsISH_EENS6_21DefaultRefDerefTraitsISH_EEEENSG_INS8_8IDBIndexENSI_ISN_EENSK_ISN_EEEENSG_INS8_9IDBCursorENSI_ISR_EENSK_ISR_EEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v97, (char *)a2 + 312)&& *((_BYTE *)a2 + 358) == 0)
    {
      v9 = *((_QWORD *)a3 + 10);
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x195388CE8);
      }
    }
    else
    {
LABEL_8:
      v9 = *((_QWORD *)a3 + 10);
      if (!v9)
        goto LABEL_165;
      if (*((_BYTE *)a2 + 357) != 1)
      {
        if (*(_QWORD *)v9)
        {
          v10 = *((_QWORD *)a2 + 4);
          if (!v10)
            goto LABEL_130;
          v3 = *(_QWORD *)(v10 + 8);
          if (!v3)
            goto LABEL_130;
          v11 = v3 - 96;
          v12 = *(unsigned __int8 *)(v3 + 178);
          if (*(_BYTE *)(v3 + 178))
          {
            if (v12 == 1 || v12 == 2)
              ++*(_DWORD *)(v3 + 216);
          }
          else
          {
            *(_DWORD *)(v3 - 264) += 2;
          }
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 344))(v3 - 96);
          MEMORY[0x19AEA3294](v96, v13);
          v15 = (unsigned int **)((char *)a2 + 144);
          v16 = *((unsigned int *)a2 + 76);
          if ((_DWORD)v16 != -1)
          {
            if ((_DWORD)v16 == 4)
            {
              v17 = *(unsigned int **)v9;
              if (*(_QWORD *)v9)
              {
                do
                  v18 = __ldaxr(v17);
                while (__stlxr(v18 + 1, v17));
              }
              v19 = *v15;
              *v15 = v17;
              if (v19)
              {
                do
                {
                  v20 = __ldaxr(v19);
                  v21 = v20 - 1;
                }
                while (__stlxr(v21, v19));
                if (!v21)
                {
                  atomic_store(1u, v19);
                  v95 = (WTF *)v19;
                  v93 = (WTF *)*((_QWORD *)v19 + 1);
                  if (v93)
                  {
                    *((_QWORD *)v19 + 1) = 0;
                    v19[4] = 0;
                    WTF::fastFree(v93, v14);
                  }
                  WTF::fastFree(v95, v14);
                }
              }
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a2 + 38, (unsigned int *)(v9 + 8));
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a2 + 42, (unsigned int *)(v9 + 24));
              *((_BYTE *)a2 + 184) = *(_BYTE *)(v9 + 40);
              v22 = *((unsigned int *)a2 + 52);
              v23 = *(unsigned int *)(v9 + 64);
              if ((_DWORD)v22 == -1)
              {
                if ((_DWORD)v23 == -1)
                  goto LABEL_49;
              }
              else if ((_DWORD)v23 == -1)
              {
                ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v22])(&v97, (char *)a2 + 192);
                *((_DWORD *)a2 + 52) = -1;
                goto LABEL_49;
              }
              v97 = (char *)a2 + 192;
              ((void (*)(char **))off_1E3358730[v23])(&v97);
LABEL_49:
              *((_BYTE *)a2 + 216) = *(_BYTE *)(v9 + 72);
              v34 = *((unsigned int *)a2 + 60);
              v35 = *(unsigned int *)(v9 + 96);
              if ((_DWORD)v34 == -1)
              {
                if ((_DWORD)v35 == -1)
                  goto LABEL_54;
              }
              else if ((_DWORD)v35 == -1)
              {
                ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v34])(&v97, (char *)a2 + 224);
                *((_DWORD *)a2 + 60) = -1;
                goto LABEL_54;
              }
              v97 = (char *)a2 + 224;
              ((void (*)(char **))off_1E3358730[v35])(&v97);
LABEL_54:
              v36 = (WebCore::IDBRequest *)((char *)a2 + 248);
              v37 = v9 + 104;
              if (*((unsigned __int8 *)a2 + 272) != *(unsigned __int8 *)(v9 + 128))
              {
                if (*((_BYTE *)a2 + 272))
                {
                  v40 = *((unsigned int *)a2 + 66);
                  if ((_DWORD)v40 != -1)
                    ((void (*)(char **, WTF::StringImpl *, uint64_t))off_1E3358310[v40])(&v97, v36, v37);
                  *((_DWORD *)a2 + 66) = -1;
                  *((_BYTE *)a2 + 272) = 0;
                }
                else
                {
                  *((_BYTE *)a2 + 248) = 0;
                  *((_DWORD *)a2 + 66) = -1;
                  v41 = *(unsigned int *)(v9 + 120);
                  if ((_DWORD)v41 != -1)
                  {
                    ((void (*)(char **, WTF::StringImpl *, uint64_t))off_1E3358320[v41])(&v97, v36, v37);
                    *((_DWORD *)a2 + 66) = v41;
                  }
                  *((_BYTE *)a2 + 272) = 1;
                }
                goto LABEL_68;
              }
              if (*((_BYTE *)a2 + 272))
              {
                v38 = *((unsigned int *)a2 + 66);
                v39 = *(unsigned int *)(v9 + 120);
                if ((_DWORD)v38 == -1)
                {
                  if ((_DWORD)v39 == -1)
                    goto LABEL_68;
                }
                else if ((_DWORD)v39 == -1)
                {
                  ((void (*)(char **, WTF::StringImpl *, uint64_t))off_1E3358310[v38])(&v97, v36, v37);
                  *((_DWORD *)a2 + 66) = -1;
                  goto LABEL_68;
                }
                v97 = (char *)a2 + 248;
                ((void (*)(char **))off_1E3358330[v39])(&v97);
              }
LABEL_68:
              if (v15 == (unsigned int **)v9)
              {
LABEL_124:
                *((_BYTE *)a2 + 296) = *(_BYTE *)(v9 + 152);
LABEL_125:
                *((_QWORD *)a2 + 15) = 0;
                v82 = *((_QWORD *)a2 + 16);
                if (v82)
                {
                  *(_QWORD *)(v82 + 8) = 3;
                  *((_QWORD *)a2 + 16) = 0;
                }
                MEMORY[0x19AEA32A0](v96);
                v83 = *(unsigned __int8 *)(v3 + 178);
                if (!*(_BYTE *)(v3 + 178))
                {
                  if (*(_DWORD *)(v3 - 264) == 2)
                  {
                    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
                  }
                  else
                  {
                    *(_DWORD *)(v3 - 264) -= 2;
                  }
                  goto LABEL_130;
                }
                if (v83 == 1)
                {
                  if (*(_DWORD *)(v3 + 216) == 1)
                    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
                  else
                    --*(_DWORD *)(v3 + 216);
                  goto LABEL_130;
                }
LABEL_161:
                if (v83 == 2)
                  WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
                goto LABEL_130;
              }
              v42 = *((_DWORD *)a2 + 73);
              v43 = *(_DWORD *)(v9 + 148);
              if (v42 > v43)
              {
                v94 = *(_DWORD *)(v9 + 148);
                v44 = *((_QWORD *)a2 + 35);
                v45 = 104 * v43;
                v46 = 104 * v42;
                do
                {
                  v47 = v44 + v45;
                  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(v44 + v45 + 64), v36);
                  v48 = *(unsigned int *)(v44 + v45 + 56);
                  if ((_DWORD)v48 != -1)
                    ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v48])(&v97, v47 + 40);
                  *(_DWORD *)(v47 + 56) = -1;
                  v49 = *(unsigned int *)(v47 + 24);
                  if ((_DWORD)v49 != -1)
                    ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v49])(&v97, v44 + v45 + 8);
                  *(_DWORD *)(v47 + 24) = -1;
                  v46 -= 104;
                  v44 += 104;
                }
                while (v45 != v46);
                v50 = v94;
                *((_DWORD *)a2 + 73) = v94;
                v11 = v3 - 96;
                goto LABEL_96;
              }
              v51 = *((_DWORD *)a2 + 72);
              if (v43 <= v51)
                goto LABEL_95;
              if (v51)
              {
                if (v42)
                {
                  v52 = 104 * v42;
                  v53 = (WebCore::IDBValue *)(*((_QWORD *)a2 + 35) + 64);
                  do
                  {
                    WebCore::IDBValue::~IDBValue(v53, v36);
                    v54 = *((unsigned int *)v53 - 2);
                    if ((_DWORD)v54 != -1)
                      ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v54])(&v97, (char *)v53 - 24);
                    *((_DWORD *)v53 - 2) = -1;
                    v55 = *((unsigned int *)v53 - 10);
                    if ((_DWORD)v55 != -1)
                      ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v55])(&v97, (char *)v53 - 56);
                    *((_DWORD *)v53 - 10) = -1;
                    v53 = (WebCore::IDBValue *)((char *)v53 + 104);
                    v52 -= 104;
                  }
                  while (v52);
                  *((_DWORD *)a2 + 73) = 0;
                }
                v56 = (WTF *)*((_QWORD *)a2 + 35);
                if (v56)
                {
                  *((_QWORD *)a2 + 35) = 0;
                  *((_DWORD *)a2 + 72) = 0;
                  WTF::fastFree(v56, v36);
                }
              }
              v57 = *(_DWORD *)(v9 + 148);
              if (*((_DWORD *)a2 + 72) >= v57)
              {
LABEL_95:
                v50 = *((_DWORD *)a2 + 73);
LABEL_96:
                v63 = *(_QWORD *)(v9 + 136);
                v64 = *((_QWORD *)a2 + 35);
                if (v50)
                {
                  v65 = v63 + 104 * v50;
                  while (1)
                  {
                    *(_BYTE *)v64 = *(_BYTE *)v63;
                    v66 = *(unsigned int *)(v64 + 24);
                    v67 = *(unsigned int *)(v63 + 24);
                    if ((_DWORD)v66 == -1)
                    {
                      if ((_DWORD)v67 == -1)
                        goto LABEL_103;
                    }
                    else if ((_DWORD)v67 == -1)
                    {
                      ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v66])(&v97, v64 + 8);
                      *(_DWORD *)(v64 + 24) = -1;
                      goto LABEL_103;
                    }
                    v97 = (char *)(v64 + 8);
                    ((void (*)(char **))off_1E3358730[v67])(&v97);
LABEL_103:
                    *(_BYTE *)(v64 + 32) = *(_BYTE *)(v63 + 32);
                    v68 = (void *)(v64 + 40);
                    v69 = *(unsigned int *)(v64 + 56);
                    v70 = *(unsigned int *)(v63 + 56);
                    if ((_DWORD)v69 == -1)
                    {
                      if ((_DWORD)v70 != -1)
                      {
LABEL_107:
                        v97 = (char *)(v64 + 40);
                        ((void (*)(char **))off_1E3358730[v70])(&v97);
                      }
                    }
                    else
                    {
                      if ((_DWORD)v70 != -1)
                        goto LABEL_107;
                      ((void (*)(char **, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v69])(&v97, v68);
                      *(_DWORD *)(v64 + 56) = -1;
                    }
                    v71 = *(unsigned int **)(v63 + 64);
                    if (v71)
                    {
                      do
                        v72 = __ldaxr(v71);
                      while (__stlxr(v72 + 1, v71));
                    }
                    v73 = *(_QWORD *)(v64 + 64);
                    *(_QWORD *)(v64 + 64) = v71;
                    if (v73)
                    {
                      do
                      {
                        v74 = __ldaxr((unsigned int *)v73);
                        v75 = v74 - 1;
                      }
                      while (__stlxr(v75, (unsigned int *)v73));
                      if (!v75)
                      {
                        atomic_store(1u, (unsigned int *)v73);
                        v76 = *(WTF **)(v73 + 8);
                        if (v76)
                        {
                          *(_QWORD *)(v73 + 8) = 0;
                          *(_DWORD *)(v73 + 16) = 0;
                          WTF::fastFree(v76, v68);
                        }
                        WTF::fastFree((WTF *)v73, v68);
                      }
                    }
                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v64 + 72), (unsigned int *)(v63 + 72));
                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v64 + 88), (unsigned int *)(v63 + 88));
                    v63 += 104;
                    v64 += 104;
                    if (v63 == v65)
                    {
                      v63 = *(_QWORD *)(v9 + 136);
                      v77 = *((_DWORD *)a2 + 73);
                      v64 = *((_QWORD *)a2 + 35);
                      v11 = v3 - 96;
                      goto LABEL_119;
                    }
                  }
                }
                v77 = 0;
LABEL_119:
                v78 = *(_DWORD *)(v9 + 148);
                if (v77 != v78)
                {
                  v79 = v64 + 104 * v77;
                  v80 = v63 + 104 * v77;
                  v81 = 104 * v78 - 104 * v77;
                  do
                  {
                    v79 = WebCore::IDBCursorRecord::IDBCursorRecord(v79, v80) + 104;
                    v80 += 104;
                    v81 -= 104;
                  }
                  while (v81);
                  v77 = *(_DWORD *)(v9 + 148);
                }
                *((_DWORD *)a2 + 73) = v77;
                goto LABEL_124;
              }
              if (v57 < 0x2762763)
              {
                v58 = (WTF *)*((_QWORD *)a2 + 35);
                v59 = (uint64_t)v58 + 104 * *((unsigned int *)a2 + 73);
                v60 = 104 * v57;
                v61 = WTF::fastMalloc((WTF *)(104 * v57));
                *((_DWORD *)a2 + 72) = (v60 & 0xFFFFFFF8) / 0x68;
                *((_QWORD *)a2 + 35) = v61;
                WTF::VectorMover<false,WebCore::IDBCursorRecord>::move((uint64_t)v58, v59, v61);
                if (v58)
                {
                  if (*((WTF **)a2 + 35) == v58)
                  {
                    *((_QWORD *)a2 + 35) = 0;
                    *((_DWORD *)a2 + 72) = 0;
                  }
                  WTF::fastFree(v58, v62);
                }
                goto LABEL_95;
              }
LABEL_165:
              __break(0xC471u);
              JUMPOUT(0x195388CC8);
            }
            ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v16])(&v97, (char *)a2 + 144);
          }
          *((_DWORD *)a2 + 76) = -1;
          WebCore::IDBGetResult::IDBGetResult((WebCore::IDBRequest *)((char *)a2 + 144), (const WebCore::IDBGetResult *)v9);
          *((_DWORD *)a2 + 76) = 4;
          goto LABEL_125;
        }
        goto LABEL_35;
      }
    }
    if (*(_DWORD *)(v9 + 64))
    {
      WebCore::IDBRequest::setResult((unsigned int *)a2, (const WebCore::IDBKeyData *)(v9 + 40));
LABEL_130:
      *((_DWORD *)a2 + 88) = 1;
      v84 = *((unsigned __int16 *)a3 + 12);
      *((_WORD *)a2 + 44) = v84;
      v85 = (_DWORD *)*((_QWORD *)a3 + 4);
      v86 = v84 >> 8;
      if (v85)
        *v85 += 2;
      v87 = (WTF::StringImpl *)*((_QWORD *)a2 + 12);
      *((_QWORD *)a2 + 12) = v85;
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
        {
          WTF::StringImpl::destroy(v87, a2);
          v86 = *((unsigned __int8 *)a2 + 89);
        }
        else
        {
          *(_DWORD *)v87 -= 2;
        }
      }
      if (v86)
        WebCore::IDBRequest::onError((WTF::StringImpl **)a2);
      else
        WebCore::IDBRequest::onSuccess(a2);
      v88 = (unsigned int *)((char *)a2 + 60);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 + 1, v88));
      result = (unsigned int *)*((_QWORD *)this + 42);
      *((_QWORD *)this + 42) = a2;
      if (result)
      {
        v90 = result + 15;
        do
        {
          v91 = __ldaxr(v90);
          v92 = v91 - 1;
        }
        while (__stlxr(v92, v90));
        if (!v92)
        {
          atomic_store(1u, result + 15);
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
        }
      }
      return result;
    }
LABEL_35:
    WebCore::IDBRequest::setResultToUndefined(a2);
    goto LABEL_130;
  }
  *((_DWORD *)a2 + 88) = 1;
  v24 = *((unsigned __int16 *)a3 + 12);
  *((_WORD *)a2 + 44) = v24;
  v25 = (_DWORD *)*((_QWORD *)a3 + 4);
  v26 = v24 >> 8;
  if (v25)
    *v25 += 2;
  v27 = (WTF::StringImpl *)*((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v25;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::destroy(v27, a2);
      v26 = *((unsigned __int8 *)a2 + 89);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  if (v26)
    WebCore::IDBRequest::onError((WTF::StringImpl **)a2);
  else
    WebCore::IDBRequest::onSuccess(a2);
  v28 = (unsigned int *)((char *)a2 + 60);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  result = (unsigned int *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = a2;
  if (result)
  {
    v31 = result + 15;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, result + 15);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  return result;
}

unsigned int *WebCore::IDBTransaction::requestCount@<X0>(WebCore::IDBTransaction *this@<X0>, WebCore::IDBIndex *a2@<X1>, const WebCore::IDBKeyRangeData *a3@<X2>, WebCore::IDBRequest **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  WebCore::IDBRequest *v11;
  WebCore::IDBRequest *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WebCore::IDBRequest *v19;
  unsigned int *v20;
  unsigned int v21;
  WebCore::IDBRequest *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  WebCore::IDBTransaction *v29;
  int v30;
  char v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *result;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  bmalloc::api *v54;
  void *v55;
  WebCore::IDBTransaction *v56;
  _BYTE v57[8];
  _BYTE v58[16];
  int v59;
  char v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  unsigned int *v64;
  uint64_t v65[3];
  __int128 v66;

  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = (WebCore::ScriptExecutionContext *)(v9 - 96);
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = (WebCore::IDBRequest *)bmalloc::api::isoAllocate();
  v12 = WebCore::IDBRequest::IDBRequest(v11, v10, a2, this);
  *a4 = v12;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v12 + 3);
  v13 = (unsigned int *)((char *)v11 + 60);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v65[0] = (uint64_t)v11;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)&v56, (uint64_t *)this + 41, v65);
  v15 = (unsigned int *)v65[0];
  v65[0] = 0;
  if (v15)
  {
    v16 = v15 + 15;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 72))(v15);
    }
  }
  v19 = *a4;
  v20 = (unsigned int *)((char *)this + 24);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  v22 = *a4;
  v23 = (unsigned int *)((char *)*a4 + 60);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v20);
  while (__stlxr(v25 + 1, v20));
  v56 = this;
  WebCore::IDBKeyRangeData::isolatedCopy(a3, (uint64_t)v57);
  v26 = bmalloc::api::isoAllocate();
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v27 = &off_1E3358C90;
  v27[1] = this;
  v27[2] = v22;
  v28 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v28 = &off_1E3358CB8;
  v29 = v56;
  v56 = 0;
  *(_QWORD *)(v28 + 8) = v29;
  *(_BYTE *)(v28 + 16) = v57[0];
  *(_BYTE *)(v28 + 24) = 0;
  *(_DWORD *)(v28 + 40) = -1;
  v30 = v59;
  if (v59 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3358668[v59])(v65, v28 + 24, v58);
    *(_DWORD *)(v28 + 40) = v30;
  }
  v31 = v60;
  *(_BYTE *)(v28 + 56) = 0;
  *(_BYTE *)(v28 + 48) = v31;
  *(_DWORD *)(v28 + 72) = -1;
  v32 = v62;
  if (v62 != -1)
  {
    ((void (*)(uint64_t *))off_1E3358668[v62])(v65);
    *(_DWORD *)(v28 + 72) = v32;
  }
  *(_WORD *)(v28 + 80) = v63;
  WebCore::IDBClient::TransactionOperation::TransactionOperation((WebCore::IDBClient::TransactionOperation *)v26, this, v19);
  *(_QWORD *)v26 = off_1E3358838;
  v33 = (unsigned int *)(v26 + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 + 1, v33));
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v35 = &off_1E3358A60;
  v35[1] = v26;
  v35[2] = v28;
  v36 = *(_QWORD *)(v26 + 88);
  *(_QWORD *)(v26 + 88) = v35;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  do
    v37 = __ldaxr(v33);
  while (__stlxr(v37 + 1, v33));
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v38 = &off_1E3358A88;
  v38[1] = v26;
  v38[2] = v27;
  v39 = *(_QWORD *)(v26 + 96);
  *(_QWORD *)(v26 + 96) = v38;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v64 = (unsigned int *)v26;
  v66 = *(_OWORD *)(v26 + 24);
  do
    v40 = __ldaxr(v33);
  while (__stlxr(v40 + 1, v33));
  v65[0] = v26;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)this + 192, v65);
  v41 = (unsigned int *)v65[0];
  v65[0] = 0;
  if (v41)
  {
    v42 = v41 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v41 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v65, (uint64_t *)this + 37, &v66, (uint64_t *)&v64);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)this);
  v46 = v64;
  v64 = 0;
  if (v46)
  {
    v47 = v46 + 2;
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v46 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
    }
  }
  if (v62 != -1)
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v62])(v65, &v61);
  v62 = -1;
  if (v59 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v59])(v65, v58);
  v59 = -1;
  result = (unsigned int *)v56;
  v56 = 0;
  if (result)
  {
    v51 = result + 6;
    do
    {
      v52 = __ldaxr(v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v51));
    if (!v53)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v45);
      return (unsigned int *)bmalloc::api::isoDeallocate(v54, v55);
    }
  }
  return result;
}

unsigned int *WebCore::IDBTransaction::didGetCountOnServer(WebCore::IDBTransaction *this, WebCore::IDBRequest *a2, const WebCore::IDBResultData *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *result;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE v26[15];
  char v27;

  v6 = *((_QWORD *)a2 + 4);
  if (!v6)
    goto LABEL_15;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_15;
  v8 = *((_QWORD *)a3 + 12);
  v9 = v7 - 96;
  v10 = *(unsigned __int8 *)(v7 + 178);
  if (*(_BYTE *)(v7 + 178))
  {
    if (v10 == 1 || v10 == 2)
      ++*(_DWORD *)(v7 + 216);
  }
  else
  {
    *(_DWORD *)(v7 - 264) += 2;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 344))(v7 - 96);
  MEMORY[0x19AEA3294](v26, v11);
  v12 = *((unsigned int *)a2 + 76);
  if ((_DWORD)v12 == -1)
    goto LABEL_9;
  v13 = (_QWORD *)((char *)a2 + 144);
  if ((_DWORD)v12 != 6)
  {
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v12])(&v27, v13);
LABEL_9:
    *((_QWORD *)a2 + 18) = v8;
    *((_DWORD *)a2 + 76) = 6;
    goto LABEL_10;
  }
  *v13 = v8;
LABEL_10:
  *((_QWORD *)a2 + 15) = 0;
  v14 = *((_QWORD *)a2 + 16);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 3;
    *((_QWORD *)a2 + 16) = 0;
  }
  MEMORY[0x19AEA32A0](v26);
  v15 = *(unsigned __int8 *)(v7 + 178);
  if (*(_BYTE *)(v7 + 178))
  {
    if (v15 == 1)
    {
      if (*(_DWORD *)(v7 + 216) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v7 - 96);
      else
        --*(_DWORD *)(v7 + 216);
    }
    else if (v15 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v7 + 216));
    }
  }
  else if (*(_DWORD *)(v7 - 264) == 2)
  {
    if ((*(_WORD *)(v7 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 288), a2);
  }
  else
  {
    *(_DWORD *)(v7 - 264) -= 2;
  }
LABEL_15:
  *((_DWORD *)a2 + 88) = 1;
  v16 = *((unsigned __int16 *)a3 + 12);
  *((_WORD *)a2 + 44) = v16;
  v17 = (_DWORD *)*((_QWORD *)a3 + 4);
  v18 = v16 >> 8;
  if (v17)
    *v17 += 2;
  v19 = (WTF::StringImpl *)*((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v17;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, a2);
      v18 = *((unsigned __int8 *)a2 + 89);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (v18)
    WebCore::IDBRequest::onError((WTF::StringImpl **)a2);
  else
    WebCore::IDBRequest::onSuccess(a2);
  v20 = (unsigned int *)((char *)a2 + 60);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  result = (unsigned int *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = a2;
  if (result)
  {
    v23 = result + 15;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, result + 15);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  return result;
}

unsigned int *WebCore::IDBTransaction::deleteObjectStore(WebCore::IDBTransaction *this, WTF::StringImpl **a2)
{
  unsigned __int8 *v4;
  WebCore::IDBObjectStore *v6;
  WTF::StringImpl *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  WebCore::IDBObjectStore *v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  unsigned int *result;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  bmalloc::api *v34;
  void *v35;
  WebCore::IDBTransaction *v36;
  WTF::StringImpl *v37;
  unsigned int *v38;
  uint64_t v39[3];
  WebCore::IDBObjectStore *v40[2];

  v4 = (unsigned __int8 *)this + 304;
  if (__ldaxr((unsigned __int8 *)this + 304))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]((char *)this + 304);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::take((uint64_t)v40, (WebCore::IDBTransaction *)((char *)this + 312), a2);
  v6 = v40[0];
  if (v40[0])
  {
    *((_BYTE *)v40[0] + 160) = 1;
    v36 = (WebCore::IDBTransaction *)*((_QWORD *)v6 + 3);
    WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,std::unique_ptr<WebCore::IDBObjectStore>>((uint64_t)v39, (uint64_t *)this + 40, (uint64_t *)&v36, (uint64_t *)v40);
    if (v40[0])
    {
      WebCore::IDBObjectStore::~IDBObjectStore(v40[0], v7);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  v10 = (unsigned int *)((char *)this + 24);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 + 1, v10));
  v36 = this;
  WTF::String::isolatedCopy();
  v13 = bmalloc::api::isoAllocate();
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E3358E48;
  v14[1] = this;
  v39[0] = (uint64_t)v14;
  v15 = (WebCore::IDBObjectStore *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v15 = &off_1E3358E70;
  *((_QWORD *)v15 + 1) = v36;
  v16 = v37;
  v36 = 0;
  v37 = 0;
  *((_QWORD *)v15 + 2) = v16;
  v40[0] = v15;
  WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(v13, (uint64_t)this, v39, (uint64_t *)v40);
  if (v40[0])
    (*(void (**)(WebCore::IDBObjectStore *))(*(_QWORD *)v40[0] + 8))(v40[0]);
  if (v39[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v39[0] + 8))(v39[0]);
  v38 = (unsigned int *)v13;
  *((_QWORD *)this + 44) = *(_QWORD *)(v13 + 128);
  *(_OWORD *)v40 = *(_OWORD *)(v13 + 24);
  v17 = (unsigned int *)(v13 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v39[0] = v13;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)this + 192, v39);
  v19 = (unsigned int *)v39[0];
  v39[0] = 0;
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v39, (uint64_t *)this + 37, v40, (uint64_t *)&v38);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)this);
  v24 = v38;
  v38 = 0;
  if (v24)
  {
    v25 = v24 + 2;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v24 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
    }
  }
  v28 = v37;
  v37 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v23);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = (unsigned int *)v36;
  v36 = 0;
  if (result)
  {
    v30 = result + 6;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v23);
      result = (unsigned int *)bmalloc::api::isoDeallocate(v34, v35);
    }
  }
  v33 = __ldxr(v4);
  if (v33 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::IDBTransaction::operationCompletedOnClient(uint64_t this, WebCore::IDBClient::TransactionOperation *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  v3 = this;
  v4 = (uint64_t *)(this + 296);
  if (!*(_QWORD *)(this + 296))
    goto LABEL_20;
  this = (uint64_t)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>((uint64_t *)(this + 296), (_QWORD *)a2 + 3);
  v5 = *v4;
  if (this)
  {
    if (v5)
      goto LABEL_40;
LABEL_4:
    if (v5 != this)
    {
      *(_QWORD *)this = -1;
      v6 = *(unsigned int **)(this + 16);
      *(_QWORD *)(this + 16) = 0;
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v6 + 2);
          this = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
      }
      ++*(_DWORD *)(*v4 - 16);
      v10 = *v4;
      if (*v4)
        v11 = *(_DWORD *)(v10 - 12) - 1;
      else
        v11 = -1;
      *(_DWORD *)(v10 - 12) = v11;
      v12 = *v4;
      if (*v4)
      {
        v13 = 6 * *(_DWORD *)(v12 - 12);
        v14 = *(_DWORD *)(v12 - 4);
        if (v13 < v14 && v14 >= 9)
          this = (uint64_t)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v4, v14 >> 1, 0);
      }
    }
    goto LABEL_20;
  }
  if (v5)
  {
    v19 = *(_DWORD *)(v5 - 4);
    this = v5 + 24 * v19;
    goto LABEL_45;
  }
LABEL_20:
  while (1)
  {
    v16 = *(_QWORD *)(v3 + 224);
    v5 = *(_QWORD *)(v3 + 232);
    if (v16 != v5)
      break;
    this = 512;
    __break(0xC471u);
LABEL_39:
    __break(1u);
LABEL_40:
    v19 = *(_DWORD *)(v5 - 4);
LABEL_45:
    v5 += 24 * v19;
    if (v5 != this)
      goto LABEL_4;
  }
  if (v16 == *(unsigned int *)(v3 + 248) - 1)
    v17 = 0;
  else
    v17 = v16 + 1;
  *(_QWORD *)(v3 + 224) = v17;
  if (!*(_BYTE *)(v3 + 400))
    goto LABEL_29;
  if (!*(_BYTE *)(v3 + 376))
    goto LABEL_39;
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v3 + 360) && *((_QWORD *)a2 + 4) == *(_QWORD *)(v3 + 368))
    return (uint64_t)WebCore::IDBTransaction::didCommit((WebCore::IDBTransaction *)v3, v3 + 384);
LABEL_29:
  if (v17 == v5)
    this = WebCore::IDBTransaction::handlePendingOperations(v3);
  if (*(_BYTE *)(v3 + 136) == 1 && *(_BYTE *)(v3 + 137) && (!*v4 || !*(_DWORD *)(*v4 - 12)))
  {
    v18 = *(_QWORD *)(v3 + 328);
    if (!v18 || !*(_DWORD *)(v18 - 12))
      return (uint64_t)WebCore::IDBTransaction::commitInternal((WebCore::IDBTransaction *)v3);
  }
  return this;
}

WTF *WebCore::IDBTransaction::connectionClosedFromServer(WebCore::IDBDatabase **a1, unsigned __int8 *a2)
{
  WebCore::IDBDatabase *v4;
  WebCore::IDBDatabase *v5;
  WTF *v6;
  WTF *result;
  void *v8;
  WebCore::IDBDatabase *v9;
  uint64_t v10;
  WebCore::IDBDatabase *v11;
  WebCore::IDBDatabase *v12;
  WebCore::IDBDatabase *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  WebCore::IDBDatabase *v19;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WebCore::IDBDatabase *v35;
  uint64_t v36;
  uint64_t i;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int **v42;
  unsigned int **v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int **v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned __int8 *v54;
  void *v56;
  int v57;
  WebCore::IDBDatabase *v58;
  WebCore::IDBDatabase *v59;
  WTF *v60;
  WTF *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int **v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  WebCore::IDBDatabase *v71;
  WebCore::IDBDatabase *v72;
  uint64_t v73;
  uint64_t j;
  char *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  WebCore::IDBDatabase *v81;
  unsigned int **v82;
  unsigned int **v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int **v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int **v93;
  unsigned int **v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v101;
  WebCore::IDBDatabase *v102;
  WebCore::IDBDatabase *v103;
  uint64_t v104;
  __int128 v105;
  __int16 v106;
  _DWORD *v107;
  char v108;
  char v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  WTF *v113;
  uint64_t v114;

  WebCore::IDBDatabase::willAbortTransaction(a1[9], (WebCore::IDBTransaction *)a1);
  WebCore::IDBTransaction::transitionedToFinishing((uint64_t)a1, 3);
  v4 = a1[24];
  v5 = a1[25];
  a1[24] = 0;
  a1[25] = 0;
  v6 = a1[26];
  a1[26] = 0;
  v102 = (WebCore::IDBDatabase *)*((unsigned int *)a1 + 54);
  *((_DWORD *)a1 + 54) = 0;
  result = (WTF *)WebCore::IDBTransaction::abortInProgressOperations((uint64_t)a1, a2);
  v9 = 0;
  LODWORD(v10) = 0;
  v11 = a1[37];
  if (!v11)
    goto LABEL_2;
  v10 = *((unsigned int *)v11 - 1);
  v12 = (WebCore::IDBDatabase *)((char *)v11 + 24 * v10);
  if (!*((_DWORD *)v11 - 3))
  {
    v9 = (WebCore::IDBDatabase *)((char *)v11 + 24 * v10);
LABEL_2:
    v12 = (WebCore::IDBDatabase *)((char *)v11 + 24 * v10);
    goto LABEL_3;
  }
  v9 = a1[37];
  if ((_DWORD)v10)
  {
    v99 = 24 * v10;
    v9 = a1[37];
    while (*(_OWORD *)v9 == 0 || *(_QWORD *)v9 == -1)
    {
      v9 = (WebCore::IDBDatabase *)((char *)v9 + 24);
      v99 -= 24;
      if (!v99)
      {
        v9 = v12;
        break;
      }
    }
  }
LABEL_3:
  v103 = v4;
  if (v11)
  {
    v13 = (WebCore::IDBDatabase *)((char *)v11 + 24 * *((unsigned int *)v11 - 1));
    v113 = 0;
    v114 = 0;
    v101 = *((unsigned int *)v11 - 3);
    if ((_DWORD)v101)
    {
      if (v101 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v14 = WTF::fastMalloc((WTF *)(8 * v101));
      LODWORD(v114) = v101;
      v113 = (WTF *)v14;
    }
    else
    {
      v14 = 0;
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v113 = 0;
    v114 = 0;
  }
  if (v13 != v9)
  {
    v15 = 0;
    do
    {
      v16 = *((_QWORD *)v9 + 2);
      if (v16)
      {
        v17 = (unsigned int *)(v16 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        v15 = HIDWORD(v114);
        v14 = (uint64_t)v113;
      }
      *(_QWORD *)(v14 + 8 * v15++) = v16;
      HIDWORD(v114) = v15;
      v19 = (WebCore::IDBDatabase *)((char *)v9 + 24);
      v9 = v12;
      if (v19 != v12)
      {
        v9 = v19;
        while (*(_OWORD *)v9 == 0 || *(_QWORD *)v9 == -1)
        {
          v9 = (WebCore::IDBDatabase *)((char *)v9 + 24);
          if (v9 == v12)
          {
            v9 = v12;
            break;
          }
        }
      }
    }
    while (v9 != v13);
    if (v15)
    {
      v21 = v14 + 8 * v15;
      do
      {
        v22 = (unsigned int *)a1[42];
        a1[42] = 0;
        if (v22)
        {
          v23 = v22 + 15;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            atomic_store(1u, v22 + 15);
            (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 72))(v22);
          }
        }
        v104 = *(_QWORD *)v14;
        WTF::Deque<WebCore::SourceBufferPrivateAVFObjC *,0ul>::append<WebCore::SourceBufferPrivateAVFObjC *&>((uint64_t)(a1 + 28), &v104);
        v26 = *(_QWORD *)v14;
        v105 = *(_OWORD *)(*(_QWORD *)v14 + 24);
        v108 = 0;
        v109 = 0;
        v110 = 0u;
        v111 = 0u;
        v112 = 0u;
        LOBYTE(v104) = 0;
        v106 = *(_WORD *)a2;
        v27 = (_DWORD *)*((_QWORD *)a2 + 1);
        if (v27)
          *v27 += 2;
        v107 = v27;
        v28 = *(_QWORD *)(v26 + 88);
        if (v28)
        {
          *(_QWORD *)(v26 + 88) = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
        if (!*(_BYTE *)(v26 + 121))
        {
          *(_BYTE *)(v26 + 121) = 1;
          v29 = *(_QWORD *)(v26 + 96);
          if (v29)
          {
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v29 + 16))(v29, &v104);
            v30 = *(_QWORD *)(v26 + 96);
            *(_QWORD *)(v26 + 96) = 0;
            if (v30)
              (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          }
          WebCore::IDBTransaction::operationCompletedOnClient(*(_QWORD *)(v26 + 16), (WebCore::IDBClient::TransactionOperation *)v26);
        }
        WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v104);
        v14 += 8;
      }
      while (v14 != v21);
    }
  }
  v31 = (unsigned int *)a1[42];
  a1[42] = 0;
  if (v31)
  {
    v32 = v31 + 15;
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v31 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 72))(v31);
    }
  }
  v35 = a1[41];
  if (v35)
  {
    a1[41] = 0;
    v36 = *((unsigned int *)v35 - 1);
    if ((_DWORD)v36)
    {
      for (i = 0; i != v36; ++i)
      {
        v38 = (unsigned int *)*((_QWORD *)v35 + i);
        if (v38 != (unsigned int *)-1)
        {
          *((_QWORD *)v35 + i) = 0;
          if (v38)
          {
            v39 = v38 + 15;
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              atomic_store(1u, v38 + 15);
              (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 72))(v38);
            }
          }
        }
      }
    }
    WTF::fastFree((WebCore::IDBDatabase *)((char *)v35 - 16), v8);
  }
  v42 = (unsigned int **)((char *)v6 + 8 * (_QWORD)v5);
  if (v103 <= v5)
  {
    if (v103 != v5)
    {
      v48 = (unsigned int **)((char *)v6 + 8 * (_QWORD)v103);
      do
      {
        v49 = *v48;
        *v48 = 0;
        if (v49)
        {
          v50 = v49 + 2;
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            atomic_store(1u, v49 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
          }
        }
        ++v48;
      }
      while (v48 != v42);
    }
  }
  else
  {
    if (v5)
    {
      v43 = (unsigned int **)v6;
      do
      {
        v44 = *v43;
        *v43 = 0;
        if (v44)
        {
          v45 = v44 + 2;
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            atomic_store(1u, v44 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
          }
        }
        ++v43;
      }
      while (v43 != v42);
    }
    if (v103 != v102)
    {
      v88 = (unsigned int **)((char *)v6 + 8 * (_QWORD)v103);
      do
      {
        v89 = *v88;
        *v88 = 0;
        if (v89)
        {
          v90 = v89 + 2;
          do
          {
            v91 = __ldaxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          if (!v92)
          {
            atomic_store(1u, v89 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v89 + 8))(v89);
          }
        }
        ++v88;
      }
      while (v88 != (unsigned int **)((char *)v6 + 8 * (_QWORD)v102));
    }
  }
  if (v6)
    WTF::fastFree(v6, v8);
  WebCore::IDBClient::IDBConnectionProxy::forgetActiveOperations(*((char **)a1[9] + 9), (uint64_t *)&v113);
  v53 = *((_QWORD *)a1[9] + 9);
  v54 = (unsigned __int8 *)(v53 + 18);
  if (__ldaxr((unsigned __int8 *)(v53 + 18)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v54))
  {
    goto LABEL_80;
  }
  MEMORY[0x19AEA534C](v53 + 18);
LABEL_80:
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::remove((uint64_t *)(v53 + 40), a1 + 10);
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::remove((uint64_t *)(v53 + 48), a1 + 10);
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::remove((uint64_t *)(v53 + 56), a1 + 10);
  v57 = __ldxr(v54);
  if (v57 != 1)
  {
    __clrex();
    goto LABEL_84;
  }
  if (__stlxr(0, v54))
LABEL_84:
    WTF::Lock::unlockSlow((WTF::Lock *)(v53 + 18));
  v58 = a1[32];
  v59 = a1[33];
  v60 = a1[34];
  v61 = (WTF *)((char *)v60 + 8 * (_QWORD)v59);
  if (v58 > v59)
  {
    if (v59)
    {
      do
      {
        v62 = *(unsigned int **)v60;
        *(_QWORD *)v60 = 0;
        if (v62)
        {
          v63 = v62 + 2;
          do
          {
            v64 = __ldaxr(v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v63));
          if (!v65)
          {
            atomic_store(1u, v62 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v62 + 8))(v62);
          }
        }
        v60 = (WTF *)((char *)v60 + 8);
      }
      while (v60 != v61);
      v60 = a1[34];
      v58 = a1[32];
    }
    v71 = (WebCore::IDBDatabase *)*((unsigned int *)a1 + 70);
    if (v58 != v71)
    {
      v93 = (unsigned int **)((char *)v60 + 8 * (_QWORD)v71);
      v94 = (unsigned int **)((char *)v60 + 8 * (_QWORD)v58);
      do
      {
        v95 = *v94;
        *v94 = 0;
        if (v95)
        {
          v96 = v95 + 2;
          do
          {
            v97 = __ldaxr(v96);
            v98 = v97 - 1;
          }
          while (__stlxr(v98, v96));
          if (!v98)
          {
            atomic_store(1u, v95 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v95 + 8))(v95);
          }
        }
        ++v94;
      }
      while (v94 != v93);
    }
LABEL_104:
    v60 = a1[34];
    goto LABEL_105;
  }
  if (v58 != v59)
  {
    v66 = (unsigned int **)((char *)v60 + 8 * (_QWORD)v58);
    do
    {
      v67 = *v66;
      *v66 = 0;
      if (v67)
      {
        v68 = v67 + 2;
        do
        {
          v69 = __ldaxr(v68);
          v70 = v69 - 1;
        }
        while (__stlxr(v70, v68));
        if (!v70)
        {
          atomic_store(1u, v67 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v67 + 8))(v67);
        }
      }
      ++v66;
    }
    while (v66 != (unsigned int **)v61);
    goto LABEL_104;
  }
LABEL_105:
  a1[32] = 0;
  a1[33] = 0;
  if (v60)
  {
    a1[34] = 0;
    *((_DWORD *)a1 + 70) = 0;
    WTF::fastFree(v60, v56);
  }
  v72 = a1[37];
  if (v72)
  {
    a1[37] = 0;
    v73 = *((unsigned int *)v72 - 1);
    if ((_DWORD)v73)
    {
      for (j = 0; j != v73; ++j)
      {
        if (*((_QWORD *)v72 + 3 * j) != -1)
        {
          v75 = (char *)v72 + 24 * j;
          v76 = (unsigned int *)*((_QWORD *)v75 + 2);
          *((_QWORD *)v75 + 2) = 0;
          if (v76)
          {
            v77 = v76 + 2;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
            {
              atomic_store(1u, v76 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v76 + 8))(v76);
            }
          }
        }
      }
    }
    WTF::fastFree((WebCore::IDBDatabase *)((char *)v72 - 16), v56);
  }
  if (a2[1])
  {
    WebCore::DOMException::create(*a2, (WTF::StringImpl **)a2 + 1, &v104);
    v80 = v104;
  }
  else
  {
    v80 = 0;
  }
  v81 = a1[20];
  a1[20] = (WebCore::IDBDatabase *)v80;
  if (v81)
  {
    if (*((_DWORD *)v81 + 2) == 1)
      (*(void (**)(WebCore::IDBDatabase *))(*(_QWORD *)v81 + 8))(v81);
    else
      --*((_DWORD *)v81 + 2);
  }
  if (*((_BYTE *)a1 + 136) != 4)
  {
    WebCore::IDBTransaction::notifyDidAbort(a1, (uint64_t)a2);
    *((_BYTE *)a1 + 136) = 4;
  }
  if (HIDWORD(v114))
  {
    v82 = (unsigned int **)v113;
    v83 = (unsigned int **)((char *)v113 + 8 * HIDWORD(v114));
    do
    {
      v84 = *v82;
      *v82 = 0;
      if (v84)
      {
        v85 = v84 + 2;
        do
        {
          v86 = __ldaxr(v85);
          v87 = v86 - 1;
        }
        while (__stlxr(v87, v85));
        if (!v87)
        {
          atomic_store(1u, v84 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 8))(v84);
        }
      }
      ++v82;
    }
    while (v82 != v83);
  }
  result = v113;
  if (v113)
  {
    v113 = 0;
    LODWORD(v114) = 0;
    return (WTF *)WTF::fastFree(result, v56);
  }
  return result;
}

double WebCore::IDBValue::IDBValue(WebCore::IDBValue *this)
{
  double result;

  *((_QWORD *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

double WebCore::IDBValue::IDBValue(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int v3;
  double result;

  v2 = *a2;
  if (*a2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)a1 = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

{
  unsigned int *v2;
  unsigned int v3;
  double result;

  v2 = *a2;
  if (*a2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)a1 = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t WebCore::IDBValue::IDBValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  WTF *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  _DWORD **v17;
  uint64_t v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;

  v7 = *(char **)(a2 + 8);
  v8 = (WTF *)*(unsigned int *)(a2 + 20);
  v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 20) = (_DWORD)v8;
  if ((_DWORD)v8)
  {
    v10 = (_BYTE *)WTF::fastMalloc(v8);
    *(_DWORD *)(v9 + 16) = (_DWORD)v8;
    *(_QWORD *)(v9 + 8) = v10;
    do
    {
      v11 = *v7++;
      *v10++ = v11;
      v8 = (WTF *)((char *)v8 - 1);
    }
    while (v8);
  }
  v12 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v9;
  *(_DWORD *)(a1 + 20) = v12;
  if ((_DWORD)v12)
  {
    if (v12 >> 29)
      goto LABEL_21;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 8) = v15;
    v16 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v16)
    {
      v17 = *(_DWORD ***)a3;
      v18 = 8 * v16;
      do
      {
        v19 = *v17;
        if (*v17)
          *v19 += 2;
        *v15++ = v19;
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
  }
  v13 = *(unsigned int *)(a4 + 12);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = v13;
  if (!(_DWORD)v13)
    return a1;
  if (v13 >> 29)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x19538A2C4);
  }
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v13));
  *(_DWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 24) = v20;
  v21 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v21)
  {
    v22 = *(_DWORD ***)a4;
    v23 = 8 * v21;
    do
    {
      v24 = *v22;
      if (*v22)
        *v24 += 2;
      *v20++ = v24;
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  return a1;
}

uint64_t WebCore::IDBValue::IDBValue(uint64_t result, unsigned int **a2, uint64_t *a3, uint64_t *a4)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  if (*a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v4;
  v6 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 16) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(result + 20) = v6;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  v7 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(result + 32) = v7;
  LODWORD(v7) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(result + 36) = v7;
  return result;
}

{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  if (*a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v4;
  v6 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 16) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(result + 20) = v6;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  v7 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(result + 32) = v7;
  LODWORD(v7) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(result + 36) = v7;
  return result;
}

uint64_t WebCore::IDBValue::IDBValue(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;

  v7 = *a2;
  if (*a2)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 20) = v9;
  if ((_DWORD)v9)
  {
    if (v9 >> 29)
      goto LABEL_20;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 8) = v12;
    v13 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v13)
    {
      v14 = *(_DWORD ***)a3;
      v15 = 8 * v13;
      do
      {
        v16 = *v14;
        if (*v14)
          *v16 += 2;
        *v12++ = v16;
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  v10 = *(unsigned int *)(a4 + 12);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = v10;
  if (!(_DWORD)v10)
    return a1;
  if (v10 >> 29)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x19538A4C0);
  }
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v10));
  *(_DWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 24) = v17;
  v18 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v18)
  {
    v19 = *(_DWORD ***)a4;
    v20 = 8 * v18;
    do
    {
      v21 = *v19;
      if (*v19)
        *v21 += 2;
      *v17++ = v21;
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  return a1;
}

WTF *WebCore::IDBValue::setAsIsolatedCopy(WebCore::IDBValue *this, unsigned int **a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF *result;
  WTF::StringImpl **v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF *v33;
  uint64_t v34;

  v4 = *a2;
  if (*a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)this;
  *(_QWORD *)this = v4;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v33 = *(WTF **)(v6 + 8);
      if (v33)
      {
        *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
        WTF::fastFree(v33, a2);
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = *((unsigned int *)a2 + 5);
  if (!(_DWORD)v9)
  {
    v10 = 0;
LABEL_13:
    LODWORD(v12) = 0;
    goto LABEL_14;
  }
  if (v9 >> 29)
    goto LABEL_46;
  v10 = WTF::fastMalloc((WTF *)(8 * v9));
  v11 = *((unsigned int *)a2 + 5);
  if (!(_DWORD)v11)
    goto LABEL_13;
  v12 = 0;
  v13 = a2[1];
  v14 = 8 * v11;
  do
  {
    v15 = v12;
    WTF::String::isolatedCopy();
    ++v12;
    *(_QWORD *)(v10 + 8 * v15) = v34;
    v13 += 2;
    v14 -= 8;
  }
  while (v14);
LABEL_14:
  v16 = *((unsigned int *)this + 5);
  if ((_DWORD)v16)
  {
    v25 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    v26 = 8 * v16;
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v27 -= 2;
      }
      ++v25;
      v26 -= 8;
    }
    while (v26);
  }
  v17 = (WTF *)*((_QWORD *)this + 1);
  if (v17)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v17, a2);
  }
  *((_QWORD *)this + 1) = v10;
  *((_DWORD *)this + 4) = v9;
  *((_DWORD *)this + 5) = v12;
  v18 = *((unsigned int *)a2 + 9);
  if (!(_DWORD)v18)
  {
    v19 = 0;
    goto LABEL_31;
  }
  if (v18 >> 29)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x19538A700);
  }
  v19 = WTF::fastMalloc((WTF *)(8 * v18));
  v20 = *((unsigned int *)a2 + 9);
  if (!(_DWORD)v20)
  {
LABEL_31:
    LODWORD(v21) = 0;
    goto LABEL_32;
  }
  v21 = 0;
  v22 = a2[3];
  v23 = 8 * v20;
  do
  {
    v24 = v21;
    WTF::String::isolatedCopy();
    ++v21;
    *(_QWORD *)(v19 + 8 * v24) = v34;
    v22 += 2;
    v23 -= 8;
  }
  while (v23);
LABEL_32:
  v28 = *((unsigned int *)this + 9);
  if ((_DWORD)v28)
  {
    v30 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v31 = 8 * v28;
    do
    {
      v32 = *v30;
      *v30 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v32 -= 2;
      }
      ++v30;
      v31 -= 8;
    }
    while (v31);
  }
  result = (WTF *)*((_QWORD *)this + 3);
  if (result)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *((_QWORD *)this + 3) = v19;
  *((_DWORD *)this + 8) = v18;
  *((_DWORD *)this + 9) = v21;
  return result;
}

WTF *WebCore::IDBValue::isolatedCopy@<X0>(unsigned int **this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return WebCore::IDBValue::setAsIsolatedCopy((WebCore::IDBValue *)a2, this);
}

uint64_t WebCore::IDBRequest::refEventTarget(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 60);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebCore::IDBRequest::derefEventTarget(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = this + 15;
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, this + 15);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 72))(this);
  }
  return this;
}

uint64_t WebCore::IDBRequest::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 60);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebCore::IDBRequest::deref(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = this + 15;
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, this + 15);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 72))(this);
  }
  return this;
}

uint64_t WebCore::IDBOpenDBRequest::isOpenDBRequest(WebCore::IDBOpenDBRequest *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::IDBRequest::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 36);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t `non-virtual thunk to'WebCore::IDBRequest::deref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(this + 36);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, (unsigned int *)(this + 36));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 24) + 72))(this - 24);
  }
  return this;
}

uint64_t WebCore::IDBRequest::isOpenDBRequest(WebCore::IDBRequest *this)
{
  return 0;
}

uint64_t WebCore::IDBTransaction::eventTargetInterface(WebCore::IDBTransaction *this)
{
  return 63;
}

uint64_t WebCore::IDBTransaction::refEventTarget(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebCore::IDBTransaction::derefEventTarget(unsigned int *this, WTF::StringImpl *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  bmalloc::api *v5;
  void *v6;

  v2 = this + 6;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    atomic_store(1u, this + 6);
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)this, a2);
    return (unsigned int *)bmalloc::api::isoDeallocate(v5, v6);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::IDBTransaction::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this - 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t `non-virtual thunk to'WebCore::IDBTransaction::deref(uint64_t this, WTF::StringImpl *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  bmalloc::api *v5;
  void *v6;

  v2 = (unsigned int *)(this - 8);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    atomic_store(1u, v2);
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)(this - 32), a2);
    return bmalloc::api::isoDeallocate(v5, v6);
  }
  return this;
}

void WebCore::IDBRequestCompletionEvent::~IDBRequestCompletionEvent(WebCore::IDBRequestCompletionEvent *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v7, v8);
}

void WebCore::IDBVersionChangeEvent::~IDBVersionChangeEvent(WebCore::IDBVersionChangeEvent *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::IDBVersionChangeEvent::isVersionChangeEvent(WebCore::IDBVersionChangeEvent *this)
{
  return 1;
}

void WebCore::IDBResultData::~IDBResultData(WebCore::IDBResultData *this)
{
  _QWORD *v2;
  bmalloc::api *v3;
  bmalloc::api *v4;
  WebCore::IDBGetResult *v5;
  bmalloc::api *v6;
  void *v7;
  unsigned int *v8;
  uint64_t v9;
  WebCore::IDBTransactionInfo *v10;
  WTF *v11;
  void *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::IDBObjectStoreInfo *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char v19;

  v4 = (bmalloc::api *)*((_QWORD *)this + 11);
  v2 = (_QWORD *)((char *)this + 88);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebCore::IDBGetAllResult>::operator()[abi:sn180100]((int)v2, v3);
  v5 = (WebCore::IDBGetResult *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    WebCore::IDBGetResult::~IDBGetResult(v5, v3);
    bmalloc::api::isoDeallocate(v6, v7);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
  {
    v9 = v8[6];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v9])(&v19, v8 + 2);
    v8[6] = -1;
    WTF::fastFree((WTF *)v8, v3);
  }
  v10 = (WebCore::IDBTransactionInfo *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
  {
    WebCore::IDBTransactionInfo::~IDBTransactionInfo(v10, v3);
    WTF::fastFree(v11, v12);
  }
  v13 = (WTF::StringImpl **)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    v14 = v13[4];
    if (v14)
    {
      v15 = *((unsigned int *)v14 - 1);
      if ((_DWORD)v15)
      {
        v16 = (WTF::StringImpl *)((char *)v14 + 8);
        do
        {
          if (*((_QWORD *)v16 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v16, v3);
          v16 = (WebCore::IDBObjectStoreInfo *)((char *)v16 + 72);
          --v15;
        }
        while (v15);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v14 - 16), v3);
    }
    v17 = *v13;
    *v13 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v3);
      else
        *(_DWORD *)v17 -= 2;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v13, v3);
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v3);
    else
      *(_DWORD *)v18 -= 2;
  }
}

void std::default_delete<WebCore::IDBGetAllResult>::operator()[abi:sn180100](int a1, bmalloc::api *this)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::IDBValue *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  char v14;
  char v15;

  if (this)
  {
    if (*((_BYTE *)this + 64))
    {
      v3 = *((unsigned int *)this + 14);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, char *))off_1E3358310[v3])(&v14, (char *)this + 40);
      *((_DWORD *)this + 14) = -1;
    }
    v4 = *((unsigned int *)this + 9);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::IDBValue *)*((_QWORD *)this + 3);
      v6 = 40 * v4;
      do
      {
        WebCore::IDBValue::~IDBValue(v5, this);
        v5 = (WebCore::IDBValue *)(v7 + 40);
        v6 -= 40;
      }
      while (v6);
    }
    v8 = (WTF *)*((_QWORD *)this + 3);
    if (v8)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v8, this);
    }
    v9 = *((unsigned int *)this + 5);
    v10 = (WTF *)*((_QWORD *)this + 1);
    if ((_DWORD)v9)
    {
      v11 = 32 * v9;
      v12 = (_DWORD *)((char *)v10 + 24);
      do
      {
        v13 = *v12;
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v13])(&v15, v12 - 4);
        *v12 = -1;
        v12 += 8;
        v11 -= 32;
      }
      while (v11);
      v10 = (WTF *)*((_QWORD *)this + 1);
    }
    if (v10)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(v10, this);
    }
    bmalloc::api::isoDeallocate(this, this);
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSG_SK_SL_SP_SQ_SR_yST_EEEEEEDcSX_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSG_SK_SL_SP_SQ_SR_yST_EEEEEEDcSX_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 6;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)result);
      return (unsigned int *)bmalloc::api::isoDeallocate(v6, v7);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSG_SK_SL_SP_SQ_SR_yST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSG_SK_SL_SP_SQ_SR_yST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v8;

  v3 = *((unsigned int *)a2 + 3);
  result = *a2;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    v6 = (_DWORD *)((char *)result + 24);
    do
    {
      v7 = *v6;
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v7])(&v8, v6 - 4);
      *v6 = -1;
      v6 += 8;
      v5 -= 32;
    }
    while (v5);
    result = *a2;
  }
  if (result)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSG_SK_SL_SP_SQ_SR_yST_EEEEEEDcSX_DpT0_(int a1, WebCore::IDBGetResult *this)
{
  WebCore::IDBGetResult::~IDBGetResult(this, this);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSG_SK_SL_SP_SQ_SR_yST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::IDBValue *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *result;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  char v14;
  char v15;

  if (*(_BYTE *)(a2 + 64))
  {
    v3 = *(unsigned int *)(a2 + 56);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E3358310[v3])(&v14, a2 + 40);
    *(_DWORD *)(a2 + 56) = -1;
  }
  v4 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v4)
  {
    v5 = *(WebCore::IDBValue **)(a2 + 24);
    v6 = 40 * v4;
    do
    {
      WebCore::IDBValue::~IDBValue(v5, (WTF::StringImpl *)a2);
      v5 = (WebCore::IDBValue *)(v7 + 40);
      v6 -= 40;
    }
    while (v6);
  }
  v8 = *(WTF **)(a2 + 24);
  if (v8)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    WTF::fastFree(v8, (void *)a2);
  }
  v9 = *(unsigned int *)(a2 + 20);
  result = *(WTF **)(a2 + 8);
  if ((_DWORD)v9)
  {
    v11 = 32 * v9;
    v12 = (_DWORD *)((char *)result + 24);
    do
    {
      v13 = *v12;
      if ((_DWORD)v13 != -1)
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v13])(&v15, v12 - 4);
      *v12 = -1;
      v12 += 8;
      v11 -= 32;
    }
    while (v11);
    result = *(WTF **)(a2 + 8);
  }
  if (result)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  if (*a3)
  {
    v4 = (unsigned int *)(v3 + 24);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 8) = 0;
  v4 = a2 + 8;
  *(_DWORD *)(a2 + 24) = -1;
  v5 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v5])(&v7, v4, a3 + 8);
    *(_DWORD *)(a2 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = WTF::fastMalloc((WTF *)(32 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      v7 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)a3 + 32 * v7;
        v9 = (_DWORD *)(v6 + 24);
        v10 = *(_QWORD *)a3 + 8;
        do
        {
          v11 = v10 - 8;
          *((_BYTE *)v9 - 24) = *(_BYTE *)(v10 - 8);
          *((_BYTE *)v9 - 16) = 0;
          *v9 = -1;
          v12 = *(unsigned int *)(v10 + 16);
          if ((_DWORD)v12 != -1)
          {
            ((void (*)(char *, _DWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v12])(&v13, v9 - 4, v10);
            *v9 = v12;
          }
          v9 += 8;
          v10 += 32;
        }
        while (v11 + 32 != v8);
      }
    }
  }
}

WebCore::IDBGetResult *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEERKS1B_EEEDcS13_DpT0_(int a1, WebCore::IDBGetResult *this, WebCore::IDBGetResult *a3)
{
  return WebCore::IDBGetResult::IDBGetResult(this, a3);
}

WebCore::IDBGetAllResult *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEERKS1B_EEEDcS13_DpT0_(int a1, WebCore::IDBGetAllResult *this, WebCore::IDBGetAllResult *a3)
{
  return WebCore::IDBGetAllResult::IDBGetAllResult(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

WebCore::IDBGetResult *WebCore::IDBGetResult::IDBGetResult(WebCore::IDBGetResult *this, const WebCore::IDBGetResult *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _DWORD **v27;
  uint64_t v28;
  _DWORD *v29;
  char v30;
  char v31;
  char v32;

  v4 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *((unsigned int *)a2 + 5);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v4;
  *((_DWORD *)this + 5) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19538B270);
    }
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v6));
    *((_DWORD *)this + 4) = v6;
    *((_QWORD *)this + 1) = v20;
    v21 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v21)
    {
      v22 = (_DWORD **)*((_QWORD *)a2 + 1);
      v23 = 8 * v21;
      do
      {
        v24 = *v22;
        if (*v22)
          *v24 += 2;
        *v20++ = v24;
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
  }
  v7 = *((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = v7;
  if ((_DWORD)v7)
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      goto LABEL_36;
    }
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
    *((_DWORD *)this + 8) = v7;
    *((_QWORD *)this + 3) = v25;
    v26 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v26)
    {
      v27 = (_DWORD **)*((_QWORD *)a2 + 3);
      v28 = 8 * v26;
      do
      {
        v29 = *v27;
        if (*v27)
          *v29 += 2;
        *v25++ = v29;
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
  }
  v8 = *((_BYTE *)a2 + 40);
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 40) = v8;
  *((_DWORD *)this + 16) = -1;
  v9 = *((unsigned int *)a2 + 16);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v9])(&v30);
    *((_DWORD *)this + 16) = v9;
  }
  v10 = *((_BYTE *)a2 + 72);
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 72) = v10;
  *((_DWORD *)this + 24) = -1;
  v11 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v11])(&v31);
    *((_DWORD *)this + 24) = v11;
  }
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 128) = 0;
  if (*((_BYTE *)a2 + 128))
  {
    *((_DWORD *)this + 30) = -1;
    v12 = *((unsigned int *)a2 + 30);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(char *))off_1E3358320[v12])(&v32);
      *((_DWORD *)this + 30) = v12;
    }
    *((_BYTE *)this + 128) = 1;
  }
  v13 = *((_DWORD *)a2 + 37);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 37) = v13;
  if (v13)
  {
    if (v13 < 0x2762763)
    {
      v14 = 104 * v13;
      v15 = WTF::fastMalloc((WTF *)(104 * v13));
      *((_DWORD *)this + 36) = (v14 & 0xFFFFFFF8) / 0x68;
      *((_QWORD *)this + 17) = v15;
      v16 = *((_DWORD *)a2 + 37);
      if (v16)
      {
        v17 = *((_QWORD *)a2 + 17);
        v18 = 104 * v16;
        do
        {
          v15 = WebCore::IDBCursorRecord::IDBCursorRecord(v15, v17) + 104;
          v17 += 104;
          v18 -= 104;
        }
        while (v18);
      }
      goto LABEL_18;
    }
    __break(0xC471u);
LABEL_36:
    JUMPOUT(0x19538B268);
  }
LABEL_18:
  *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
  return this;
}

WebCore::IDBGetAllResult *WebCore::IDBGetAllResult::IDBGetAllResult(WebCore::IDBGetAllResult *this, const WebCore::IDBGetAllResult *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  char v19;

  *(_BYTE *)this = *(_BYTE *)a2;
  v4 = *((unsigned int *)a2 + 5);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 5) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 27)
    {
      __break(0xC471u);
      goto LABEL_18;
    }
    v5 = WTF::fastMalloc((WTF *)(32 * v4));
    *((_DWORD *)this + 4) = v4;
    *((_QWORD *)this + 1) = v5;
    v6 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v6)
    {
      v7 = *((_QWORD *)a2 + 1);
      v8 = v7 + 32 * v6;
      v9 = (_DWORD *)(v5 + 24);
      v10 = v7 + 8;
      do
      {
        v11 = v10 - 8;
        *((_BYTE *)v9 - 24) = *(_BYTE *)(v10 - 8);
        *((_BYTE *)v9 - 16) = 0;
        *v9 = -1;
        v12 = *(unsigned int *)(v10 + 16);
        if ((_DWORD)v12 != -1)
        {
          ((void (*)(char *, _DWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v12])(&v18, v9 - 4, v10);
          *v9 = v12;
        }
        v9 += 8;
        v10 += 32;
      }
      while (v11 + 32 != v8);
    }
  }
  v13 = *((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = v13;
  if (!(_DWORD)v13)
    goto LABEL_11;
  if (v13 >= 0x6666667)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x19538B41CLL);
  }
  v14 = 40 * v13;
  v15 = WTF::fastMalloc((WTF *)(40 * v13));
  *((_DWORD *)this + 8) = (v14 & 0xFFFFFFF8) / 0x28;
  *((_QWORD *)this + 3) = v15;
  WTF::VectorCopier<false,WebCore::IDBValue>::uninitializedCopy<WebCore::IDBValue>(*((unsigned int ***)a2 + 3), (unsigned int **)(*((_QWORD *)a2 + 3) + 40 * *((unsigned int *)a2 + 9)), v15);
LABEL_11:
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 64) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    *((_DWORD *)this + 14) = -1;
    v16 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *))off_1E3358320[v16])(&v19);
      *((_DWORD *)this + 14) = v16;
    }
    *((_BYTE *)this + 64) = 1;
  }
  return this;
}

unsigned int **WTF::VectorCopier<false,WebCore::IDBValue>::uninitializedCopy<WebCore::IDBValue>(unsigned int **result, unsigned int **a2, uint64_t a3)
{
  unsigned int **i;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;

  if (result != a2)
  {
    for (i = result; i != a2; i += 5)
    {
      v6 = *i;
      if (*i)
      {
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
      }
      v8 = *((unsigned int *)i + 5);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v6;
      *(_DWORD *)(a3 + 20) = v8;
      if ((_DWORD)v8)
      {
        if (v8 >> 29)
          goto LABEL_24;
        result = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v8));
        *(_DWORD *)(a3 + 16) = v8;
        *(_QWORD *)(a3 + 8) = result;
        v10 = *((unsigned int *)i + 5);
        if ((_DWORD)v10)
        {
          v11 = i[1];
          v12 = 8 * v10;
          do
          {
            v13 = *(unsigned int **)v11;
            if (*(_QWORD *)v11)
              *v13 += 2;
            *result++ = v13;
            v11 += 2;
            v12 -= 8;
          }
          while (v12);
        }
      }
      v9 = *((unsigned int *)i + 9);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_DWORD *)(a3 + 36) = v9;
      if ((_DWORD)v9)
      {
        if (v9 >> 29)
        {
LABEL_24:
          __break(0xC471u);
          JUMPOUT(0x19538B550);
        }
        result = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v9));
        *(_DWORD *)(a3 + 32) = v9;
        *(_QWORD *)(a3 + 24) = result;
        v14 = *((unsigned int *)i + 9);
        if ((_DWORD)v14)
        {
          v15 = i[3];
          v16 = 8 * v14;
          do
          {
            v17 = *(unsigned int **)v15;
            if (*(_QWORD *)v15)
              *v17 += 2;
            *result++ = v17;
            v15 += 2;
            v16 -= 8;
          }
          while (v16);
        }
      }
      a3 += 40;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::openCursor(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)a1[1];
  *a1 = &off_1E3358428;
  a1[1] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::openCursor(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3358428;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::openCursor(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::openCursor(JSC::JSGlobalObject &,JSC::JSValue,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WebCore::IDBKeyRange::only(*(JSC::JSGlobalObject **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)v6);
  v3 = v7;
  if (!v7)
  {
    v5 = v6[0];
    v6[0] = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 16) = 0;
    return ((uint64_t (*)(char *, _QWORD *))off_1E3358468[v3])(&v8, v6);
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a2 = 26;
  *(_DWORD *)(a2 + 16) = 1;
  if ((_DWORD)v3 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3358468[v3])(&v8, v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::openKeyCursor(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)a1[1];
  *a1 = &off_1E3358488;
  a1[1] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::openKeyCursor(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3358488;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::openKeyCursor(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::openKeyCursor(JSC::JSGlobalObject &,JSC::JSValue,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WebCore::IDBKeyRange::only(*(JSC::JSGlobalObject **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)v6);
  v3 = v7;
  if (!v7)
  {
    v5 = v6[0];
    v6[0] = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 16) = 0;
    return ((uint64_t (*)(char *, _QWORD *))off_1E3358468[v3])(&v8, v6);
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a2 = 26;
  *(_DWORD *)(a2 + 16) = 1;
  if ((_DWORD)v3 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3358468[v3])(&v8, v6);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::deleteFunction(WebCore::IDBKeyRange *)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::deleteFunction(JSC::JSGlobalObject &,JSC::JSValue)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  WebCore::IDBKey *v7;
  char v8;

  WebCore::createIDBKeyFromValue(&v7, *(JSC::JSGlobalObject **)(a1 + 8), *(_QWORD *)(a1 + 16));
  v3 = (unsigned int *)v7;
  if (WebCore::IDBKey::isValid(v7))
  {
    if (v3)
      ++*v3;
    result = bmalloc::api::isoAllocate();
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 16) = v3;
    *(_QWORD *)(result + 24) = v3;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(result + 8) = 1;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 26;
    *(_DWORD *)(a2 + 16) = 1;
    if (v3)
    {
      if (*v3 == 1)
      {
        v6 = v3[6];
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v6])(&v8, v3 + 2);
        v3[6] = -1;
        return bmalloc::api::isoDeallocate((bmalloc::api *)v3, v5);
      }
      else
      {
        --*v3;
      }
    }
  }
  return result;
}

WebCore::IDBIndex *WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,std::unique_ptr<WebCore::IDBIndex>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF **a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF **v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  WebCore::IDBIndex *result;
  bmalloc::api *v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  bmalloc::api *v33;
  void *v34;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBIndex>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = v12;
    }
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    *v15 = v17;
    v18 = *a4;
    *a4 = 0;
    result = v15[1];
    v15[1] = v18;
    if (result)
    {
      WebCore::IDBIndex::~IDBIndex(result, (WTF::StringImpl *)a2);
      result = (WebCore::IDBIndex *)bmalloc::api::isoDeallocate(v20, v21);
    }
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v26 = *a2;
    if (*a2)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
        goto LABEL_31;
    }
    else if (3 * v29 <= 4 * v28)
    {
      if (!(_DWORD)v29)
      {
        v30 = 8;
LABEL_37:
        result = (WebCore::IDBIndex *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBIndex>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v30, v15);
        v15 = (WTF **)result;
        v26 = *a2;
        if (*a2)
          v29 = *(unsigned int *)(v26 - 4);
        else
          v29 = 0;
        goto LABEL_41;
      }
LABEL_31:
      v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
      goto LABEL_37;
    }
LABEL_41:
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v26 + 16 * v29;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v24 = *a2;
  if (*a2)
    v25 = *(unsigned int *)(v24 - 4);
  else
    v25 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v24 + 16 * v25;
  *(_BYTE *)(a1 + 16) = 0;
  v31 = v8 + 16 * v14;
  v32 = *a4;
  *a4 = 0;
  result = *(WebCore::IDBIndex **)(v31 + 8);
  *(_QWORD *)(v31 + 8) = v32;
  if (result)
  {
    WebCore::IDBIndex::~IDBIndex(result, (WTF::StringImpl *)a2);
    return (WebCore::IDBIndex *)bmalloc::api::isoDeallocate(v33, v34);
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBIndex>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::IDBIndex *v16;
  bmalloc::api *v17;
  void *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WebCore::IDBIndex *v26;
  bmalloc::api *v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WebCore::IDBIndex *v33;
  bmalloc::api *v34;
  void *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = *((_DWORD *)v14 + 4);
          if (v21 < 0x100)
            v22 = WTF::StringImpl::hashSlowCase(v14);
          else
            v22 = v21 >> 8;
          v23 = 0;
          do
          {
            v24 = v22 & v20;
            v22 = ++v23 + v24;
          }
          while (*(_QWORD *)(v19 + 16 * v24));
          v25 = (WTF::StringImpl **)(v19 + 16 * v24);
          v26 = v25[1];
          v25[1] = 0;
          if (v26)
          {
            WebCore::IDBIndex::~IDBIndex(v26, v10);
            bmalloc::api::isoDeallocate(v27, v28);
            v29 = *v25;
            *v25 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v10);
              else
                *(_DWORD *)v29 -= 2;
            }
          }
          else
          {
            *v25 = 0;
          }
          v30 = *v13;
          *v13 = 0;
          *v25 = v30;
          v31 = v6 + 16 * v11;
          v32 = *(WTF::StringImpl **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          v25[1] = v32;
          v33 = *(WebCore::IDBIndex **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
          {
            WebCore::IDBIndex::~IDBIndex(v33, v10);
            bmalloc::api::isoDeallocate(v34, v35);
          }
          v36 = *v13;
          *v13 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v10);
            else
              *(_DWORD *)v36 -= 2;
          }
          if (v13 == a3)
            v12 = v25;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebCore::IDBIndex **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            WebCore::IDBIndex::~IDBIndex(v16, v10);
            bmalloc::api::isoDeallocate(v17, v18);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBIndex>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::IDBIndex *v16;
  bmalloc::api *v17;
  void *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  WebCore::IDBIndex *v29;
  bmalloc::api *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::IDBIndex *v34;
  bmalloc::api *v35;
  void *v36;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (uint64_t *)(v19 + 16 * v26);
          v29 = (WebCore::IDBIndex *)v28[1];
          v28[1] = 0;
          if (v29)
          {
            WebCore::IDBIndex::~IDBIndex(v29, v10);
            bmalloc::api::isoDeallocate(v30, v31);
          }
          *v28 = *v13;
          v32 = v6 + 16 * v11;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          v28[1] = v33;
          v34 = *(WebCore::IDBIndex **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            WebCore::IDBIndex::~IDBIndex(v34, v10);
            bmalloc::api::isoDeallocate(v35, v36);
          }
          if (v13 == a3)
            v12 = v28;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebCore::IDBIndex **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            WebCore::IDBIndex::~IDBIndex(v16, v10);
            bmalloc::api::isoDeallocate(v17, v18);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::getAll(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)a1[1];
  *a1 = &off_1E3358528;
  a1[1] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::getAll(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3358528;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::getAll(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::getAll(JSC::JSGlobalObject &,JSC::JSValue,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WebCore::IDBKeyRange::only(*(JSC::JSGlobalObject **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)v6);
  v3 = v7;
  if (!v7)
  {
    v5 = v6[0];
    v6[0] = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 16) = 0;
    return ((uint64_t (*)(char *, _QWORD *))off_1E3358468[v3])(&v8, v6);
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a2 = 26;
  *(_DWORD *)(a2 + 16) = 1;
  if ((_DWORD)v3 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3358468[v3])(&v8, v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::getAllKeys(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)a1[1];
  *a1 = &off_1E3358578;
  a1[1] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::getAllKeys(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3358578;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::getAllKeys(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBObjectStore::getAllKeys(JSC::JSGlobalObject &,JSC::JSValue,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WebCore::IDBKeyRange::only(*(JSC::JSGlobalObject **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)v6);
  v3 = v7;
  if (!v7)
  {
    v5 = v6[0];
    v6[0] = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 16) = 0;
    return ((uint64_t (*)(char *, _QWORD *))off_1E3358468[v3])(&v8, v6);
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a2 = 26;
  *(_DWORD *)(a2 + 16) = 1;
  if ((_DWORD)v3 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3358468[v3])(&v8, v6);
  return result;
}

WebCore::IDBTransaction *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::IDBRequest(WebCore::ScriptExecutionContext &,WebCore::IDBCursor &,WebCore::IDBTransaction &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> const&>(WebCore::IDBTransaction *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  bmalloc::api *v12;
  void *v13;
  uint64_t v14;
  int v15;
  char v16;

  v2 = *a2;
  v3 = **(_QWORD **)result;
  if (*a2)
  {
    v4 = (unsigned int *)(*(_QWORD *)(v2 + 152) + 24);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v15 = 0;
  if (!*(_BYTE *)(v3 + 328))
  {
    v14 = 0;
    *(_QWORD *)(v3 + 312) = v2;
    *(_DWORD *)(v3 + 320) = 0;
    *(_BYTE *)(v3 + 328) = 1;
    goto LABEL_15;
  }
  v6 = *(unsigned int *)(v3 + 320);
  if ((_DWORD)v6 == -1)
    goto LABEL_14;
  v7 = (WTF::StringImpl *)(v3 + 312);
  if ((_DWORD)v6)
  {
    result = (WebCore::IDBTransaction *)((uint64_t (*)(char *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_8IDBIndexENSA_ISF_EENSC_ISF_EEEENS7_INS8_9IDBCursorENSA_ISJ_EENSC_ISJ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v6])(&v16, v7);
LABEL_14:
    v14 = 0;
    *(_QWORD *)(v3 + 312) = v2;
    *(_DWORD *)(v3 + 320) = 0;
    goto LABEL_15;
  }
  v14 = 0;
  v8 = *(_QWORD *)v7;
  *(_QWORD *)v7 = v2;
  if (v8)
  {
    result = *(WebCore::IDBTransaction **)(v8 + 152);
    v9 = (unsigned int *)((char *)result + 24);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result + 6);
      WebCore::IDBTransaction::~IDBTransaction(result, v7);
      result = (WebCore::IDBTransaction *)bmalloc::api::isoDeallocate(v12, v13);
    }
  }
LABEL_15:
  if (v15 != -1)
    return (WebCore::IDBTransaction *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_8IDBIndexENSA_ISF_EENSC_ISF_EEEENS7_INS8_9IDBCursorENSA_ISJ_EENSC_ISJ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v15])(&v16, &v14);
  return result;
}

WebCore::IDBTransaction *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::IDBRequest(WebCore::ScriptExecutionContext &,WebCore::IDBCursor &,WebCore::IDBTransaction &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> const&>(WebCore::IDBTransaction *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  bmalloc::api *v12;
  void *v13;
  char v14;

  v2 = *a2;
  v3 = **(_QWORD **)result;
  if (*a2)
  {
    v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 144) + 152) + 24);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (!*(_BYTE *)(v3 + 328))
  {
    *(_QWORD *)(v3 + 312) = v2;
    *(_DWORD *)(v3 + 320) = 1;
    *(_BYTE *)(v3 + 328) = 1;
    return result;
  }
  v6 = *(unsigned int *)(v3 + 320);
  if ((_DWORD)v6 == -1)
    goto LABEL_14;
  v7 = (WTF::StringImpl *)(v3 + 312);
  if ((_DWORD)v6 != 1)
  {
    result = (WebCore::IDBTransaction *)((uint64_t (*)(char *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_8IDBIndexENSA_ISF_EENSC_ISF_EEEENS7_INS8_9IDBCursorENSA_ISJ_EENSC_ISJ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v6])(&v14, v7);
LABEL_14:
    *(_QWORD *)(v3 + 312) = v2;
    *(_DWORD *)(v3 + 320) = 1;
    return result;
  }
  v8 = *(_QWORD *)v7;
  *(_QWORD *)v7 = v2;
  if (v8)
  {
    result = *(WebCore::IDBTransaction **)(*(_QWORD *)(v8 + 144) + 152);
    v9 = (unsigned int *)((char *)result + 24);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result + 6);
      WebCore::IDBTransaction::~IDBTransaction(result, v7);
      return (WebCore::IDBTransaction *)bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::~IDBRequest()::$_0,WebCore::IDBRequest::~()::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t a1, void *a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  result = *(_QWORD *)(*(_QWORD *)a2 + 168);
  *(_QWORD *)(*(_QWORD *)a2 + 168) = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)result));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)result);
      v5 = *(unsigned int *)(result + 28);
      if ((_DWORD)v5)
      {
        v8 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v5));
        result = v8;
      }
      v6 = *(WTF **)(result + 16);
      if (v6)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v7 = result;
        WTF::fastFree(v6, a2);
        result = v7;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 8) = 0;
  v4 = a2 + 8;
  *(_DWORD *)(a2 + 24) = -1;
  v5 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3358668[v5])(&v7, v4, a3 + 8);
    *(_DWORD *)(a2 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebCore::IDBGetResult::IDBGetResult(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v4;
  LODWORD(v4) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a2 + 20) = v4;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v5 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a2 + 24) = v5;
  LODWORD(v5) = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a2 + 32) = v5;
  LODWORD(v5) = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(a3 + 36) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  v6 = a2 + 40;
  *(_DWORD *)(v6 - 4) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(a3 + 64))
  {
    *(_DWORD *)(a2 + 56) = -1;
    v7 = *(unsigned int *)(a3 + 56);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E33586B0[v7])(&v9);
      *(_DWORD *)(a2 + 56) = v7;
    }
    *(_BYTE *)(a2 + 64) = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11IDBDatabaseENSC_ISH_EENSE_ISH_EEEENSA_10IDBKeyDataENS8_6VectorISL_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_12IDBGetResultENSA_15IDBGetAllResultEyNSA_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SL_SP_SQ_SR_yST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::sourceObjectStoreIdentifier(void)::$_0,WebCore::IDBRequest::sourceObjectStoreIdentifier(void)::$_1,WebCore::IDBRequest::sourceObjectStoreIdentifier(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,std::__variant_detail::_Trait<WebCore::IDBCursor,WebCore::IDBObjectStore<std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>>,WTF::RawPtrTraits<WTF::RefPtr><std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 24);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::sourceObjectStoreIdentifier(void)::$_0,WebCore::IDBRequest::sourceObjectStoreIdentifier(void)::$_1,WebCore::IDBRequest::sourceObjectStoreIdentifier(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,std::__variant_detail::_Trait<WebCore::IDBCursor,WebCore::IDBObjectStore<std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>>,WTF::RawPtrTraits<WTF::RefPtr><std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 32);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::sourceObjectStoreIdentifier(void)::$_0,WebCore::IDBRequest::sourceObjectStoreIdentifier(void)::$_1,WebCore::IDBRequest::sourceObjectStoreIdentifier(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,std::__variant_detail::_Trait<WebCore::IDBCursor,WebCore::IDBObjectStore<std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>>,WTF::RawPtrTraits<WTF::RefPtr><std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>>>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::sourceIndexIdentifier(void)::$_0,WebCore::IDBRequest::sourceIndexIdentifier(void)::$_1,WebCore::IDBRequest::sourceIndexIdentifier(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,std::__variant_detail::_Trait<WebCore::IDBCursor,WebCore::IDBObjectStore<std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>>,WTF::RawPtrTraits<WTF::RefPtr><std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>>>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::sourceIndexIdentifier(void)::$_0,WebCore::IDBRequest::sourceIndexIdentifier(void)::$_1,WebCore::IDBRequest::sourceIndexIdentifier(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,std::__variant_detail::_Trait<WebCore::IDBCursor,WebCore::IDBObjectStore<std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>>,WTF::RawPtrTraits<WTF::RefPtr><std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 24);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::sourceIndexIdentifier(void)::$_0,WebCore::IDBRequest::sourceIndexIdentifier(void)::$_1,WebCore::IDBRequest::sourceIndexIdentifier(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,std::__variant_detail::_Trait<WebCore::IDBCursor,WebCore::IDBObjectStore<std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>>,WTF::RawPtrTraits<WTF::RefPtr><std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>>>> const&>()
{
  return 0;
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_0,WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t **result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = **result;
  if (*a2 && (v3 = *(_QWORD *)(v2 + 64)) != 0 && *(unsigned __int8 *)(v3 + 136) - 2 > 2)
    v4 = 1;
  else
    v4 = 2;
  *(_BYTE *)(v2 + 360) = v4;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_0,WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)result + 8) + 360) = 2;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_0,WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)result + 8) + 360) = 2;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_0,WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)result + 8) + 360) = 2;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_0,WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)result + 8) + 360) = 2;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_0,WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)result + 8) + 360) = 2;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_0,WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)result + 8) + 360) = 2;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_0,WebCore::IDBRequest::dispatchEvent(WebCore::Event &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)result + 8) + 360) = 2;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBRequest::clearWrappers(void)::$_0,WebCore::IDBRequest::clearWrappers(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*a2;
  v2[42] = 0;
  v3 = v2[43];
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    v2[43] = 0;
  }
  v2[44] = 0;
  v4 = v2[45];
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    v2[45] = 0;
  }
  v2[46] = 0;
  v5 = v2[47];
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    v2[47] = 0;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::IDBTransaction(WebCore::IDBDatabase &,WebCore::IDBTransactionInfo const&,WebCore::IDBOpenDBRequest *)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33587E8;
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::IDBTransaction(WebCore::IDBDatabase &,WebCore::IDBTransactionInfo const&,WebCore::IDBOpenDBRequest *)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33587E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::IDBTransaction(WebCore::IDBDatabase &,WebCore::IDBTransactionInfo const&,WebCore::IDBOpenDBRequest *)::$_0,void>::call(uint64_t a1)
{
  unsigned int *result;
  uint64_t v2;
  uint64_t v3;

  result = *(unsigned int **)(a1 + 8);
  if (*((_BYTE *)result + 136) != 1)
  {
    if (*((_BYTE *)result + 136))
      return result;
    *((_BYTE *)result + 136) = 1;
  }
  if (*((_BYTE *)result + 137))
  {
    v2 = *((_QWORD *)result + 37);
    if (!v2 || !*(_DWORD *)(v2 - 12))
    {
      v3 = *((_QWORD *)result + 41);
      if (!v3 || !*(_DWORD *)(v3 - 12))
        return WebCore::IDBTransaction::commitInternal((WebCore::IDBTransaction *)result);
    }
  }
  return result;
}

WebCore::IDBObjectStore *WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,std::unique_ptr<WebCore::IDBObjectStore>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF **a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF **v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  WebCore::IDBObjectStore *result;
  bmalloc::api *v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  bmalloc::api *v33;
  void *v34;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = v12;
    }
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    *v15 = v17;
    v18 = *a4;
    *a4 = 0;
    result = v15[1];
    v15[1] = v18;
    if (result)
    {
      WebCore::IDBObjectStore::~IDBObjectStore(result, (WTF::StringImpl *)a2);
      result = (WebCore::IDBObjectStore *)bmalloc::api::isoDeallocate(v20, v21);
    }
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v26 = *a2;
    if (*a2)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
        goto LABEL_31;
    }
    else if (3 * v29 <= 4 * v28)
    {
      if (!(_DWORD)v29)
      {
        v30 = 8;
LABEL_37:
        result = (WebCore::IDBObjectStore *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v30, v15);
        v15 = (WTF **)result;
        v26 = *a2;
        if (*a2)
          v29 = *(unsigned int *)(v26 - 4);
        else
          v29 = 0;
        goto LABEL_41;
      }
LABEL_31:
      v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
      goto LABEL_37;
    }
LABEL_41:
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v26 + 16 * v29;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v24 = *a2;
  if (*a2)
    v25 = *(unsigned int *)(v24 - 4);
  else
    v25 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v24 + 16 * v25;
  *(_BYTE *)(a1 + 16) = 0;
  v31 = v8 + 16 * v14;
  v32 = *a4;
  *a4 = 0;
  result = *(WebCore::IDBObjectStore **)(v31 + 8);
  *(_QWORD *)(v31 + 8) = v32;
  if (result)
  {
    WebCore::IDBObjectStore::~IDBObjectStore(result, (WTF::StringImpl *)a2);
    return (WebCore::IDBObjectStore *)bmalloc::api::isoDeallocate(v33, v34);
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::IDBObjectStore *v16;
  bmalloc::api *v17;
  void *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WebCore::IDBObjectStore *v26;
  bmalloc::api *v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WebCore::IDBObjectStore *v33;
  bmalloc::api *v34;
  void *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = *((_DWORD *)v14 + 4);
          if (v21 < 0x100)
            v22 = WTF::StringImpl::hashSlowCase(v14);
          else
            v22 = v21 >> 8;
          v23 = 0;
          do
          {
            v24 = v22 & v20;
            v22 = ++v23 + v24;
          }
          while (*(_QWORD *)(v19 + 16 * v24));
          v25 = (WTF::StringImpl **)(v19 + 16 * v24);
          v26 = v25[1];
          v25[1] = 0;
          if (v26)
          {
            WebCore::IDBObjectStore::~IDBObjectStore(v26, v10);
            bmalloc::api::isoDeallocate(v27, v28);
            v29 = *v25;
            *v25 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v10);
              else
                *(_DWORD *)v29 -= 2;
            }
          }
          else
          {
            *v25 = 0;
          }
          v30 = *v13;
          *v13 = 0;
          *v25 = v30;
          v31 = v6 + 16 * v11;
          v32 = *(WTF::StringImpl **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          v25[1] = v32;
          v33 = *(WebCore::IDBObjectStore **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
          {
            WebCore::IDBObjectStore::~IDBObjectStore(v33, v10);
            bmalloc::api::isoDeallocate(v34, v35);
          }
          v36 = *v13;
          *v13 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v10);
            else
              *(_DWORD *)v36 -= 2;
          }
          if (v13 == a3)
            v12 = v25;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebCore::IDBObjectStore **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            WebCore::IDBObjectStore::~IDBObjectStore(v16, v10);
            bmalloc::api::isoDeallocate(v17, v18);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::IDBObjectStore *v16;
  bmalloc::api *v17;
  void *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  WebCore::IDBObjectStore *v29;
  bmalloc::api *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::IDBObjectStore *v34;
  bmalloc::api *v35;
  void *v36;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (uint64_t *)(v19 + 16 * v26);
          v29 = (WebCore::IDBObjectStore *)v28[1];
          v28[1] = 0;
          if (v29)
          {
            WebCore::IDBObjectStore::~IDBObjectStore(v29, v10);
            bmalloc::api::isoDeallocate(v30, v31);
          }
          *v28 = *v13;
          v32 = v6 + 16 * v11;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          v28[1] = v33;
          v34 = *(WebCore::IDBObjectStore **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            WebCore::IDBObjectStore::~IDBObjectStore(v34, v10);
            bmalloc::api::isoDeallocate(v35, v36);
          }
          if (v13 == a3)
            v12 = v28;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebCore::IDBObjectStore **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            WebCore::IDBObjectStore::~IDBObjectStore(v16, v10);
            bmalloc::api::isoDeallocate(v17, v18);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebCore::IDBObjectStore *WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,std::unique_ptr<WebCore::IDBObjectStore>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  WebCore::IDBObjectStore *result;
  bmalloc::api *v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  bmalloc::api *v33;
  void *v34;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    v20 = *a4;
    *a4 = 0;
    result = (WebCore::IDBObjectStore *)v16[1];
    *v16 = v11;
    v16[1] = v20;
    if (result)
    {
      WebCore::IDBObjectStore::~IDBObjectStore(result, (WTF::StringImpl *)a2);
      result = (WebCore::IDBObjectStore *)bmalloc::api::isoDeallocate(v22, v23);
    }
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v27 = *a2;
    if (*a2)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
        goto LABEL_31;
    }
    else if (3 * v30 <= 4 * v29)
    {
      if (!(_DWORD)v30)
      {
        v31 = 8;
        goto LABEL_32;
      }
LABEL_31:
      v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
LABEL_32:
      result = (WebCore::IDBObjectStore *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBObjectStore>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBObjectStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a2, v31, v16);
      v16 = (uint64_t *)result;
      v27 = *a2;
      if (*a2)
        v30 = *(unsigned int *)(v27 - 4);
      else
        v30 = 0;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v27 + 16 * v30;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v26 = 0;
  else
    v26 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v8 + 16 * v26;
  *(_BYTE *)(a1 + 16) = 0;
  v32 = *a4;
  *a4 = 0;
  result = (WebCore::IDBObjectStore *)v16[1];
  v16[1] = v32;
  if (result)
  {
    WebCore::IDBObjectStore::~IDBObjectStore(result, (WTF::StringImpl *)a2);
    return (WebCore::IDBObjectStore *)bmalloc::api::isoDeallocate(v33, v34);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::abortInternal(void)::$_0,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3358810;
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::abortInternal(void)::$_0,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3358810;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::abortInternal(void)::$_0,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF *v38;
  unsigned int **v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int **v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  WTF::StringImpl *result;
  unsigned int **v57;
  unsigned int **v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  __int128 v65;
  __int16 v66;
  WTF::StringImpl *v67;
  char v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  WTF::StringImpl *v74;

  v3 = *(_QWORD *)(a1 + 8);
  WebCore::IDBClient::IDBConnectionProxy::abortTransaction(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(v3 + 72) + 72), (WebCore::IDBTransaction *)v3);
  if (!*(_QWORD *)(v3 + 296))
    goto LABEL_20;
  v4 = (uint64_t *)(v3 + 296);
  v5 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>((uint64_t *)(v3 + 296), (_QWORD *)(a2 + 24));
  v6 = *(uint64_t **)(v3 + 296);
  if (!v5)
  {
    if (!v6)
      goto LABEL_20;
    v63 = *((_DWORD *)v6 - 1);
    v5 = &v6[3 * v63];
LABEL_96:
    v6 += 3 * v63;
    if (v6 == v5)
      goto LABEL_20;
    goto LABEL_4;
  }
  if (v6)
  {
    v63 = *((_DWORD *)v6 - 1);
    goto LABEL_96;
  }
LABEL_4:
  if (v6 != v5)
  {
    *v5 = -1;
    v7 = (unsigned int *)v5[2];
    v5[2] = 0;
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v7 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      }
    }
    ++*(_DWORD *)(*v4 - 16);
    v11 = *v4;
    if (*v4)
      v12 = *(_DWORD *)(v11 - 12) - 1;
    else
      v12 = -1;
    *(_DWORD *)(v11 - 12) = v12;
    v13 = *v4;
    if (*v4)
    {
      v14 = 6 * *(_DWORD *)(v13 - 12);
      v15 = *(_DWORD *)(v13 - 4);
      if (v14 < v15 && v15 >= 9)
        WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)(v3 + 296), v15 >> 1, 0);
    }
  }
LABEL_20:
  v17 = *(_QWORD *)(v3 + 232);
  if (*(_QWORD *)(v3 + 224) == v17)
  {
    __break(0xC471u);
    JUMPOUT(0x19538D670);
  }
  if (!v17)
    v17 = *(unsigned int *)(v3 + 248);
  *(_QWORD *)(v3 + 232) = v17 - 1;
  v18 = *(unsigned int **)(v3 + 336);
  *(_QWORD *)(v3 + 336) = 0;
  if (v18)
  {
    v19 = v18 + 15;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v18 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 72))(v18);
    }
  }
  LOWORD(v73) = 272;
  v74 = 0;
  WebCore::IDBTransaction::abortInProgressOperations(v3, &v73);
  v24 = *(_QWORD *)(v3 + 256);
  v23 = *(_QWORD *)(v3 + 264);
  if (v24 != v23)
  {
    do
    {
      v25 = *(_QWORD *)(v3 + 272);
      v64 = *(_QWORD *)(v25 + 8 * v24);
      WTF::Deque<WebCore::SourceBufferPrivateAVFObjC *,0ul>::append<WebCore::SourceBufferPrivateAVFObjC *&>(v3 + 224, &v64);
      v26 = *(_QWORD *)(v25 + 8 * v24);
      v65 = *(_OWORD *)(v26 + 24);
      v68 = 0;
      v69 = 0;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      LOBYTE(v64) = 0;
      v66 = v73;
      v27 = v74;
      if (v74)
        *(_DWORD *)v74 += 2;
      v67 = v27;
      v28 = *(_QWORD *)(v26 + 88);
      if (v28)
      {
        *(_QWORD *)(v26 + 88) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
      if (!*(_BYTE *)(v26 + 121))
      {
        *(_BYTE *)(v26 + 121) = 1;
        v29 = *(_QWORD *)(v26 + 96);
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v29 + 16))(v29, &v64);
          v30 = *(_QWORD *)(v26 + 96);
          *(_QWORD *)(v26 + 96) = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
        WebCore::IDBTransaction::operationCompletedOnClient(*(_QWORD *)(v26 + 16), (WebCore::IDBClient::TransactionOperation *)v26);
      }
      WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v64);
      v31 = *(unsigned int **)(v3 + 336);
      *(_QWORD *)(v3 + 336) = 0;
      if (v31)
      {
        v32 = v31 + 15;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v31 + 15);
          (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 72))(v31);
        }
      }
      v35 = *(unsigned int *)(v3 + 280);
      v24 += v35 + 1;
      do
        v24 -= v35;
      while (v24 >= v35);
    }
    while (v23 != v24);
    v36 = *(_QWORD *)(v3 + 256);
    v37 = *(_QWORD *)(v3 + 264);
    v38 = *(WTF **)(v3 + 272);
    v39 = (unsigned int **)((char *)v38 + 8 * v37);
    if (v36 <= v37)
    {
      if (v36 == v37)
        goto LABEL_66;
      v44 = (unsigned int **)((char *)v38 + 8 * v36);
      do
      {
        v45 = *v44;
        *v44 = 0;
        if (v45)
        {
          v46 = v45 + 2;
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            atomic_store(1u, v45 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
          }
        }
        ++v44;
      }
      while (v44 != v39);
    }
    else
    {
      if (v37)
      {
        do
        {
          v40 = *(unsigned int **)v38;
          *(_QWORD *)v38 = 0;
          if (v40)
          {
            v41 = v40 + 2;
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              atomic_store(1u, v40 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
            }
          }
          v38 = (WTF *)((char *)v38 + 8);
        }
        while (v38 != (WTF *)v39);
        v38 = *(WTF **)(v3 + 272);
        v36 = *(_QWORD *)(v3 + 256);
        v35 = *(unsigned int *)(v3 + 280);
      }
      if (v36 != v35)
      {
        v57 = (unsigned int **)((char *)v38 + 8 * v35);
        v58 = (unsigned int **)((char *)v38 + 8 * v36);
        do
        {
          v59 = *v58;
          *v58 = 0;
          if (v59)
          {
            v60 = v59 + 2;
            do
            {
              v61 = __ldaxr(v60);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v60));
            if (!v62)
            {
              atomic_store(1u, v59 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 8))(v59);
            }
          }
          ++v58;
        }
        while (v58 != v57);
      }
    }
  }
  v38 = *(WTF **)(v3 + 272);
LABEL_66:
  *(_QWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 264) = 0;
  if (v38)
  {
    *(_QWORD *)(v3 + 272) = 0;
    *(_DWORD *)(v3 + 280) = 0;
    WTF::fastFree(v38, v22);
  }
  v49 = *(_QWORD *)(v3 + 328);
  if (v49)
  {
    *(_QWORD *)(v3 + 328) = 0;
    v50 = *(unsigned int *)(v49 - 4);
    if ((_DWORD)v50)
    {
      for (i = 0; i != v50; ++i)
      {
        v52 = *(unsigned int **)(v49 + 8 * i);
        if (v52 != (unsigned int *)-1)
        {
          *(_QWORD *)(v49 + 8 * i) = 0;
          if (v52)
          {
            v53 = v52 + 15;
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              atomic_store(1u, v52 + 15);
              (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 72))(v52);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v49 - 16), v22);
  }
  result = v74;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)v74 -= 2;
  }
  return result;
}

uint64_t WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t StatusReg;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  *(_DWORD *)(a1 + 8) = 1;
  v7 = (unsigned int *)(a1 + 8);
  *(_QWORD *)a1 = off_1E3358EF8;
  v8 = (unsigned int *)(a2 + 24);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 72) + 8);
  do
  {
    v10 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v11 = v10 + 2;
  }
  while (__stlxr(v11, &WebCore::nextClientResourceNumber(void)::currentNumber));
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v13 = *(unsigned int **)(StatusReg + 736);
  if (!v13)
    v13 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 1;
  do
  {
    v15 = __ldaxr(&WebCore::IDBTransaction::generateOperationID(void)::currentOperationID);
    v16 = v15 + 1;
  }
  while (__stlxr(v16, &WebCore::IDBTransaction::generateOperationID(void)::currentOperationID));
  *(_QWORD *)(a1 + 128) = v16;
  *(_QWORD *)a1 = off_1E3358838;
  do
    v17 = __ldaxr(v7);
  while (__stlxr(v17 + 1, v7));
  v18 = *a4;
  *a4 = 0;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = &off_1E3358858;
  v19[1] = a1;
  v19[2] = v18;
  v20 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (*a3)
  {
    do
      v21 = __ldaxr(v7);
    while (__stlxr(v21 + 1, v7));
    v22 = *a3;
    *a3 = 0;
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v23 = &off_1E3358880;
    v23[1] = a1;
    v23[2] = v22;
    v24 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v23;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  return a1;
}

void WebCore::IDBClient::TransactionOperationImpl::~TransactionOperationImpl(WebCore::IDBClient::TransactionOperationImpl *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::IDBClient::TransactionOperation::~TransactionOperation(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::IDBClient::TransactionOperation::~TransactionOperation(WebCore::IDBClient::TransactionOperation *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::IDBClient::TransactionOperation::~TransactionOperation(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  bmalloc::api *v18;
  void *v19;

  *(_QWORD *)this = off_1E3358EF8;
  v3 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::Thread::~Thread((WTF::Thread *)v7);
      WTF::fastFree(v16, v17);
    }
  }
  v10 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    v13 = v12 + 6;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v12, a2);
      bmalloc::api::isoDeallocate(v18, v19);
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(WebCore::IDBTransaction &,WTF::Function<void ()(WebCore::IDBResultData const&)>,WTF::Function<void ()(WebCore::IDBClient::TransactionOperation &)>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3358858;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(WebCore::IDBTransaction &,WTF::Function<void ()(WebCore::IDBResultData const&)>,WTF::Function<void ()(WebCore::IDBClient::TransactionOperation &)>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3358858;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(WebCore::IDBTransaction &,WTF::Function<void ()(WebCore::IDBResultData const&)>,WTF::Function<void ()(WebCore::IDBClient::TransactionOperation &)>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(WebCore::IDBTransaction &,WTF::Function<void ()(WebCore::IDBResultData const&)>,WTF::Function<void ()(WebCore::IDBClient::TransactionOperation &)>)::{lambda(WebCore::IDBResultData const&)#1},void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3358880;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(WebCore::IDBTransaction &,WTF::Function<void ()(WebCore::IDBResultData const&)>,WTF::Function<void ()(WebCore::IDBClient::TransactionOperation &)>)::{lambda(WebCore::IDBResultData const&)#1},void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3358880;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(WebCore::IDBTransaction &,WTF::Function<void ()(WebCore::IDBResultData const&)>,WTF::Function<void ()(WebCore::IDBClient::TransactionOperation &)>)::{lambda(WebCore::IDBResultData const&)#1},void,WebCore::IDBResultData const&>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

_OWORD *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_OWORD *)(v6 + 24 * v13);
      if (*(_QWORD *)v15 != -1)
      {
        if (*v15 == 0)
        {
          v27 = v6 + 24 * v13;
          v28 = *(unsigned int **)(v27 + 16);
          *(_QWORD *)(v27 + 16) = 0;
          if (v28)
          {
            v29 = v28 + 2;
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v28 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
            }
          }
        }
        else
        {
          v16 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookupForReinsert(a1, (_QWORD *)(v6 + 24 * v13));
          v17 = (unsigned int *)*((_QWORD *)v16 + 2);
          *((_QWORD *)v16 + 2) = 0;
          if (v17)
          {
            v18 = v17 + 2;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v17 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
            }
          }
          *v16 = *v15;
          v21 = v6 + 24 * v13;
          v22 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v21 + 16) = 0;
          *((_QWORD *)v16 + 2) = v22;
          v23 = *(unsigned int **)(v21 + 16);
          *(_QWORD *)(v21 + 16) = 0;
          if (v23)
          {
            v24 = v23 + 2;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v23 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
            }
          }
          if (v15 == a3)
            v14 = v16;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

unsigned int *WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add(unsigned int *result, uint64_t *a2, _QWORD *a3)
{
  unsigned int *v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int **v16;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (unsigned int *)WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = (unsigned int *)*a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (unsigned int **)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v6 - 4);
        v29 = 0;
        v30 = v6 + 8 * v23;
        goto LABEL_38;
      }
      if (v15 == (unsigned int *)-1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (unsigned int **)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = (unsigned int *)*a3;
      v14 = v16;
    }
  }
  *a3 = 0;
  result = *v14;
  *v14 = v9;
  if (result)
  {
    v18 = result + 15;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, result + 15);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_28;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
LABEL_33:
      result = (unsigned int *)WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::rehash(a2, v28, v14);
      v14 = (unsigned int **)result;
      v24 = *a2;
      if (*a2)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_37;
    }
LABEL_28:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
    goto LABEL_33;
  }
LABEL_37:
  v30 = v24 + 8 * v27;
  v29 = 1;
LABEL_38:
  *(_QWORD *)v5 = v14;
  *((_QWORD *)v5 + 1) = v30;
  *((_BYTE *)v5 + 16) = v29;
  return result;
}

unsigned int **WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned int **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (unsigned int **)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            v27 = v26 + 15;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v26 + 15);
              (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 72))(v26);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int *WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  unsigned int *result;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a3[1];
  v12 = (*a3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a3 - 1640531527) << 16) ^ ((unsigned __int16)*a3
                                                                                             - 1640531527);
  v13 = v12 + (unsigned __int16)WORD2(*a3) + (v12 >> 11);
  v14 = (*a3 >> 37) & 0x7FFF800 ^ (v13 << 16) ^ v13;
  v15 = (v11 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v11 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v11 + (v14 >> 11));
  v16 = (v11 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v11) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v11) + (v15 >> 11));
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v10;
  v21 = (unsigned int *)(v8 + 24 * (v19 & v10));
  v22 = *(_QWORD *)v21;
  v23 = *((_QWORD *)v21 + 1);
  if (*(_OWORD *)v21 != 0)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v22 == -1)
      {
        v24 = v21;
      }
      else if (v22 == *a3 && v23 == v11)
      {
        if ((v9 & 1) != 0)
          v38 = 0;
        else
          v38 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a1 = v21;
        *(_QWORD *)(a1 + 8) = v8 + 24 * v38;
        *(_BYTE *)(a1 + 16) = 0;
        v39 = *a4;
        *a4 = 0;
        result = (unsigned int *)*((_QWORD *)v21 + 2);
        *((_QWORD *)v21 + 2) = v39;
        if (result)
        {
          v40 = result + 2;
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            atomic_store(1u, result + 2);
            return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
          }
        }
        return result;
      }
      v20 = (v20 + v25) & v10;
      v21 = (unsigned int *)(v8 + 24 * v20);
      v22 = *(_QWORD *)v21;
      v23 = *((_QWORD *)v21 + 1);
      ++v25;
    }
    while (*(_OWORD *)v21 != 0);
    if (v24)
    {
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      --*(_DWORD *)(*a2 - 16);
      v21 = v24;
    }
  }
  *(_OWORD *)v21 = *(_OWORD *)a3;
  v26 = *a4;
  *a4 = 0;
  result = (unsigned int *)*((_QWORD *)v21 + 2);
  *((_QWORD *)v21 + 2) = v26;
  if (result)
  {
    v28 = result + 2;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v31 = *a2;
  if (*a2)
    v32 = *(_DWORD *)(v31 - 12) + 1;
  else
    v32 = 1;
  *(_DWORD *)(v31 - 12) = v32;
  v33 = *a2;
  if (*a2)
    v34 = *(_DWORD *)(v33 - 12);
  else
    v34 = 0;
  v35 = (*(_DWORD *)(v33 - 16) + v34);
  v36 = *(unsigned int *)(v33 - 4);
  if (v36 > 0x400)
  {
    if (v36 <= 2 * v35)
      goto LABEL_28;
  }
  else if (3 * v36 <= 4 * v35)
  {
    if (!(_DWORD)v36)
    {
      v37 = 8;
LABEL_38:
      result = (unsigned int *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a2, v37, v21);
      v21 = result;
      v33 = *a2;
      if (*a2)
        LODWORD(v36) = *(_DWORD *)(v33 - 4);
      else
        LODWORD(v36) = 0;
      goto LABEL_40;
    }
LABEL_28:
    v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
    goto LABEL_38;
  }
LABEL_40:
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v33 + 24 * v36;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t WTF::HashMap<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTraits<WebCore::IDBResultData>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int **v18;
  int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t result;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashMap<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTraits<WebCore::IDBResultData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = (unsigned int *)*a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (unsigned int **)(v8 + 112 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v8 + 112 * v27;
        *(_BYTE *)(a4 + 16) = 0;
        return WebCore::IDBResultData::operator=((uint64_t)(v16 + 1), a3);
      }
      if (v17 == (unsigned int *)-1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (unsigned int **)(v8 + 112 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      *((_BYTE *)v18 + 8) = 0;
      v18[5] = 0;
      *((_BYTE *)v18 + 48) = 0;
      *((_BYTE *)v18 + 56) = 0;
      *((_OWORD *)v18 + 4) = 0u;
      *((_OWORD *)v18 + 5) = 0u;
      *((_OWORD *)v18 + 6) = 0u;
      v18[2] = 0;
      v18[3] = 0;
      *((_WORD *)v18 + 16) = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = (unsigned int *)*a2;
      v16 = v18;
    }
  }
  *a2 = 0;
  v20 = *v16;
  *v16 = v11;
  if (v20)
  {
    v21 = v20 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v20 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  result = WebCore::IDBResultData::operator=((uint64_t)(v16 + 1), a3);
  v25 = *a1;
  if (*a1)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v28 = *a1;
  if (*a1)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
      goto LABEL_28;
  }
  else if (3 * v31 <= 4 * v30)
  {
    if (!(_DWORD)v31)
    {
      v32 = 8;
LABEL_33:
      result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashMap<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTraits<WebCore::IDBResultData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>::rehash(a1, v32, v16);
      v16 = (unsigned int **)result;
      v28 = *a1;
      if (*a1)
        LODWORD(v31) = *(_DWORD *)(v28 - 4);
      else
        LODWORD(v31) = 0;
      goto LABEL_37;
    }
LABEL_28:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
    goto LABEL_33;
  }
LABEL_37:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v28 + 112 * v31;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t WebCore::IDBResultData::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WebCore::IDBObjectStoreInfo *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::IDBTransactionInfo *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::IDBGetResult *v22;
  bmalloc::api *v23;
  void *v24;
  uint64_t v25;
  bmalloc::api *v26;
  char v28;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  v5 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v6 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_QWORD *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  v9 = *(WTF::StringImpl ***)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  if (v9)
  {
    v10 = v9[4];
    if (v10)
    {
      v11 = *((unsigned int *)v10 - 1);
      if ((_DWORD)v11)
      {
        v12 = (WTF::StringImpl *)((char *)v10 + 8);
        do
        {
          if (*((_QWORD *)v12 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v12, (WTF::StringImpl *)a2);
          v12 = (WebCore::IDBObjectStoreInfo *)((char *)v12 + 72);
          --v11;
        }
        while (v11);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v10 - 16), a2);
    }
    v13 = *v9;
    *v9 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v13 -= 2;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v9, a2);
  }
  v14 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  v15 = *(WebCore::IDBTransactionInfo **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v14;
  if (v15)
  {
    WebCore::IDBTransactionInfo::~IDBTransactionInfo(v15, (WTF::StringImpl *)a2);
    WTF::fastFree(v16, v17);
  }
  v18 = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  v19 = *(unsigned int **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v18;
  if (v19)
  {
    v20 = v19[6];
    if ((_DWORD)v20 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v20])(&v28, v19 + 2);
    v19[6] = -1;
    WTF::fastFree((WTF *)v19, a2);
  }
  v21 = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = 0;
  v22 = *(WebCore::IDBGetResult **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v21;
  if (v22)
  {
    WebCore::IDBGetResult::~IDBGetResult(v22, (WTF::StringImpl *)a2);
    bmalloc::api::isoDeallocate(v23, v24);
  }
  v25 = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = 0;
  v26 = *(bmalloc::api **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v25;
  if (v26)
    std::default_delete<WebCore::IDBGetAllResult>::operator()[abi:sn180100](a1 + 88, v26);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  return a1;
}

unsigned int **WTF::HashTable<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashMap<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WebCore::IDBResultData,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTraits<WebCore::IDBResultData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int **v28;
  unsigned int v29;
  WebCore::IDBResultData *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int **result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(112 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_OWORD *)(v7 + 80);
    do
    {
      *((_QWORD *)v10 - 8) = 0;
      *((_BYTE *)v10 - 56) = 0;
      *((_QWORD *)v10 - 3) = 0;
      *((_BYTE *)v10 - 16) = 0;
      *((_BYTE *)v10 - 8) = 0;
      *v10 = 0uLL;
      v10[1] = 0uLL;
      v10[2] = 0uLL;
      *((_QWORD *)v10 - 6) = 0;
      *((_QWORD *)v10 - 5) = 0;
      *((_WORD *)v10 - 16) = 0;
      v10 += 7;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (unsigned int **)(v4 + 112 * v11);
      v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = ((unint64_t)v15 + ~((_QWORD)v15 << 32)) ^ (((unint64_t)v15 + ~((_QWORD)v15 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = (unsigned int **)(v20 + 112 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (*v28);
          v29 = v27;
          v30 = (WebCore::IDBResultData *)(v20 + 112 * v27 + 8);
          WebCore::IDBResultData::~IDBResultData(v30);
          v31 = *v28;
          *v28 = 0;
          if (v31)
          {
            v32 = v31 + 2;
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              atomic_store(1u, v31 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
            }
          }
          v35 = *v14;
          *v14 = 0;
          *v28 = v35;
          v36 = v4 + 112 * v11;
          v37 = *(_OWORD *)(v36 + 8);
          *((_QWORD *)v30 + 2) = *(_QWORD *)(v36 + 24);
          *(_OWORD *)v30 = v37;
          v38 = v20 + 112 * v29;
          *(_WORD *)(v38 + 32) = *(_WORD *)(v36 + 32);
          v39 = *(_QWORD *)(v36 + 40);
          *(_QWORD *)(v36 + 40) = 0;
          *(_QWORD *)(v38 + 40) = v39;
          *(_OWORD *)(v38 + 48) = *(_OWORD *)(v36 + 48);
          v40 = *(_QWORD *)(v36 + 64);
          *(_QWORD *)(v36 + 64) = 0;
          *(_QWORD *)(v38 + 64) = v40;
          v41 = *(_QWORD *)(v36 + 72);
          *(_QWORD *)(v36 + 72) = 0;
          *(_QWORD *)(v38 + 72) = v41;
          v42 = *(_QWORD *)(v36 + 80);
          *(_QWORD *)(v36 + 80) = 0;
          *(_QWORD *)(v38 + 80) = v42;
          v43 = *(_QWORD *)(v36 + 88);
          *(_QWORD *)(v36 + 88) = 0;
          *(_QWORD *)(v38 + 88) = v43;
          v44 = *(_QWORD *)(v36 + 96);
          v45 = *(_QWORD *)(v36 + 104);
          *(_QWORD *)(v36 + 96) = 0;
          *(_QWORD *)(v38 + 96) = v44;
          *(_QWORD *)(v38 + 104) = v45;
          WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(v36 + 8));
          v46 = *v14;
          *v14 = 0;
          if (v46)
          {
            v47 = v46 + 2;
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              atomic_store(1u, v46 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
            }
          }
          if (v14 == a3)
            v12 = v28;
        }
        else
        {
          WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(v4 + 112 * v11 + 8));
          v16 = *v14;
          *v14 = 0;
          if (v16)
          {
            v17 = v16 + 2;
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v16 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::commitInternal(void)::$_0,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33588A8;
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::commitInternal(void)::$_0,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33588A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::commitInternal(void)::$_0,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v21;

  v3 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)WebCore::IDBClient::IDBConnectionProxy::commitTransaction(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(v3 + 72) + 72), (WebCore::IDBTransaction *)v3, *(_QWORD *)(v3 + 408));
  v5 = *(_QWORD *)(v3 + 224);
  v6 = *(_QWORD *)(v3 + 232);
  if (v5 == v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19538EDE4);
  }
  if (!v6)
    v6 = *(unsigned int *)(v3 + 248);
  v7 = v6 - 1;
  *(_QWORD *)(v3 + 232) = v7;
  if (v5 != v7)
  {
    if (!v7)
      v7 = *(unsigned int *)(v3 + 248);
    v8 = *(unsigned __int8 *)(v3 + 376);
    *(_OWORD *)(v3 + 360) = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 240) + 8 * v7 - 8) + 24);
    if (!v8)
      *(_BYTE *)(v3 + 376) = 1;
  }
  if (*(_QWORD *)(v3 + 296))
  {
    v9 = (uint64_t *)(v3 + 296);
    result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(v9, (_QWORD *)(a2 + 24));
    v10 = *v9;
    if (result)
    {
      if (!v10)
      {
LABEL_12:
        if ((_QWORD *)v10 != result)
        {
          *result = -1;
          v11 = (unsigned int *)result[2];
          result[2] = 0;
          if (v11)
          {
            v12 = v11 + 2;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              atomic_store(1u, v11 + 2);
              result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
            }
          }
          ++*(_DWORD *)(*v9 - 16);
          v15 = *v9;
          if (*v9)
            v16 = *(_DWORD *)(v15 - 12) - 1;
          else
            v16 = -1;
          *(_DWORD *)(v15 - 12) = v16;
          v17 = *v9;
          if (*v9)
          {
            v18 = 6 * *(_DWORD *)(v17 - 12);
            v19 = *(_DWORD *)(v17 - 4);
            if (v18 < v19 && v19 >= 9)
              return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v9, v19 >> 1, 0);
          }
        }
        return result;
      }
      v21 = *(_DWORD *)(v10 - 4);
    }
    else
    {
      if (!v10)
        return result;
      v21 = *(_DWORD *)(v10 - 4);
      result = (_QWORD *)(v10 + 24 * v21);
    }
    v10 += 24 * v21;
    if ((_QWORD *)v10 == result)
      return result;
    goto LABEL_12;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::createObjectStore(WebCore::IDBObjectStoreInfo const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33588D0;
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::createObjectStore(WebCore::IDBObjectStoreInfo const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33588D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::createObjectStore(WebCore::IDBObjectStoreInfo const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *a1 = off_1E33588F8;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 2), a2);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, v3);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::createObjectStore(WebCore::IDBObjectStoreInfo const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *a1 = off_1E33588F8;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 2), a2);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, v3);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::createObjectStore(WebCore::IDBObjectStoreInfo const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::createObjectStore(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72), a2, (const WebCore::IDBObjectStoreInfo *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::renameObjectStore(WebCore::IDBObjectStore &,WTF::String const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3358920;
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::renameObjectStore(WebCore::IDBObjectStore &,WTF::String const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3358920;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::renameObjectStore(WebCore::IDBObjectStore &,WTF::String const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *a1 = &off_1E3358948;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::renameObjectStore(WebCore::IDBObjectStore &,WTF::String const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *(_QWORD *)this = &off_1E3358948;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::renameObjectStore(WebCore::IDBObjectStore &,WTF::String const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(_QWORD *a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::renameObjectStore(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(a1[1] + 72) + 72), a2, a1[2], (const WTF::String *)(a1 + 3));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::createIndex(WebCore::IDBObjectStore &,WebCore::IDBIndexInfo const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3358970;
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::createIndex(WebCore::IDBObjectStore &,WebCore::IDBIndexInfo const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3358970;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::createIndex(WebCore::IDBObjectStore &,WebCore::IDBIndexInfo const&)::$_0,void,WebCore::IDBResultData const&>::call(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  unsigned int v4;
  char **v5;
  char *v6;
  WTF::StringImpl *v7;
  char **v8;
  char *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  void (**v17)(WebCore::DOMException *__hidden);
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;

  if (*a2 != 12)
  {
    v2 = *(_QWORD *)(result + 8);
    if (*(_BYTE *)(v2 + 136) != 3)
    {
      if (!a2[25])
      {
        v7 = 0;
        goto LABEL_17;
      }
      v4 = a2[24];
      v5 = &(&WebCore::descriptions)[5 * a2[24]];
      if (v4 >= 0x20)
        v5 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
      v6 = v5[3];
      if (v6)
      {
        if (v6 == (char *)1)
        {
          v7 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v7 = v20;
          if (!a2[25])
            goto LABEL_17;
          v4 = a2[24];
        }
      }
      else
      {
        v7 = 0;
      }
      if (v4 >= 0x20)
        v8 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
      else
        v8 = &(&WebCore::descriptions)[5 * v4];
      v9 = v8[1];
      if (v9)
      {
        if (v9 == (char *)1)
        {
          v10 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v10 = v20;
        }
        goto LABEL_18;
      }
LABEL_17:
      v10 = 0;
LABEL_18:
      v11 = WTF::fastMalloc((WTF *)0x20);
      v12 = &byte_1E33A1C90;
      while (1)
      {
        v13 = *((_QWORD *)v12 - 3);
        v14 = v12 - 32;
        v15 = v13 ? v13 - 1 : 0;
        if (MEMORY[0x19AEA53F4](v10, *((_QWORD *)v12 - 4), v15))
          break;
        v12 += 40;
        if (v14 + 40 == (char *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF10AtomStringES8_EEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix)
        {
          v16 = 0;
          goto LABEL_26;
        }
      }
      v16 = *v12;
LABEL_26:
      *(_DWORD *)(v11 + 8) = 1;
      *(_QWORD *)v11 = off_1E334F098;
      *(_BYTE *)(v11 + 12) = v16;
      if (v10)
        *(_DWORD *)v10 += 2;
      *(_QWORD *)(v11 + 16) = v10;
      if (v7)
        *(_DWORD *)v7 += 2;
      *(_QWORD *)(v11 + 24) = v7;
      if (*(unsigned __int8 *)(v2 + 136) - 2 >= 3)
      {
        *(_DWORD *)(v11 + 8) = 2;
        v19 = *(_DWORD **)(v2 + 160);
        *(_QWORD *)(v2 + 160) = v11;
        if (v19)
        {
          if (v19[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
          else
            --v19[2];
        }
        result = (uint64_t)WebCore::IDBTransaction::abortInternal((WebCore::IDBDatabase **)v2);
        if (*(_DWORD *)(v11 + 8) != 1)
        {
          --*(_DWORD *)(v11 + 8);
LABEL_38:
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
            {
              result = WTF::StringImpl::destroy(v10, v18);
              if (!v7)
                return result;
              goto LABEL_42;
            }
            *(_DWORD *)v10 -= 2;
          }
          if (!v7)
            return result;
LABEL_42:
          if (*(_DWORD *)v7 == 2)
            return WTF::StringImpl::destroy(v7, v18);
          *(_DWORD *)v7 -= 2;
          return result;
        }
        v17 = *(void (***)(WebCore::DOMException *__hidden))v11;
      }
      else
      {
        v17 = off_1E334F098;
      }
      result = ((uint64_t (*)(uint64_t))v17[1])(v11);
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::createIndex(WebCore::IDBObjectStore &,WebCore::IDBIndexInfo const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;

  *(_QWORD *)a1 = &off_1E3358998;
  v3 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E3358310[v3])(&v12, a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  v4 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::createIndex(WebCore::IDBObjectStore &,WebCore::IDBIndexInfo const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;

  *(_QWORD *)this = &off_1E3358998;
  v3 = *((unsigned int *)this + 14);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3358310[v3])(&v12, (char *)this + 40);
  *((_DWORD *)this + 14) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::createIndex(WebCore::IDBObjectStore &,WebCore::IDBIndexInfo const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::createIndex(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72), a2, (const WebCore::IDBIndexInfo *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::renameIndex(WebCore::IDBIndex &,WTF::String const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33589C0;
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::renameIndex(WebCore::IDBIndex &,WTF::String const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33589C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::renameIndex(WebCore::IDBIndex &,WTF::String const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *a1 = &off_1E33589E8;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::renameIndex(WebCore::IDBIndex &,WTF::String const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *(_QWORD *)this = &off_1E33589E8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::renameIndex(WebCore::IDBIndex &,WTF::String const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(_QWORD *a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::renameIndex(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(a1[1] + 72) + 72), a2, a1[2], a1[3], (const WTF::String *)(a1 + 4));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::doRequestOpenCursor(WTF::Ref<WebCore::IDBCursor,WTF::RawPtrTraits<WebCore::IDBCursor>,WTF::DefaultRefDerefTraits<WebCore::IDBCursor>> &&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = &off_1E3358A10;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::doRequestOpenCursor(WTF::Ref<WebCore::IDBCursor,WTF::RawPtrTraits<WebCore::IDBCursor>,WTF::DefaultRefDerefTraits<WebCore::IDBCursor>> &&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *(_QWORD *)this = &off_1E3358A10;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::doRequestOpenCursor(WTF::Ref<WebCore::IDBCursor,WTF::RawPtrTraits<WebCore::IDBCursor>,WTF::DefaultRefDerefTraits<WebCore::IDBCursor>> &&)::$_0,void,WebCore::IDBResultData const&>::call(uint64_t a1, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int **)(a1 + 16);
  WebCore::IDBRequest::didOpenOrIterateCursor(v2, a2);
  v4 = v2 + 15;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  result = *(unsigned int **)(v3 + 336);
  *(_QWORD *)(v3 + 336) = v2;
  if (result)
  {
    v7 = result + 15;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 15);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::doRequestOpenCursor(WTF::Ref<WebCore::IDBCursor,WTF::RawPtrTraits<WebCore::IDBCursor>,WTF::DefaultRefDerefTraits<WebCore::IDBCursor>> &&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)a1 = &off_1E3358A38;
  v3 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, a1 + 104);
  *(_DWORD *)(a1 + 120) = -1;
  v4 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, a1 + 72);
  *(_DWORD *)(a1 + 88) = -1;
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::doRequestOpenCursor(WTF::Ref<WebCore::IDBCursor,WTF::RawPtrTraits<WebCore::IDBCursor>,WTF::DefaultRefDerefTraits<WebCore::IDBCursor>> &&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E3358A38;
  v3 = *((unsigned int *)this + 30);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, (char *)this + 104);
  *((_DWORD *)this + 30) = -1;
  v4 = *((unsigned int *)this + 22);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, (char *)this + 72);
  *((_DWORD *)this + 22) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::doRequestOpenCursor(WTF::Ref<WebCore::IDBCursor,WTF::RawPtrTraits<WebCore::IDBCursor>,WTF::DefaultRefDerefTraits<WebCore::IDBCursor>> &&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::openCursor(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72), a2, (const WebCore::IDBCursorInfo *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(WebCore::IDBTransaction &,WebCore::IDBRequest &,WTF::Function<void ()(WebCore::IDBResultData const&)>,WTF::Function<void ()(WebCore::IDBClient::TransactionOperation &)>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3358A60;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(WebCore::IDBTransaction &,WebCore::IDBRequest &,WTF::Function<void ()(WebCore::IDBResultData const&)>,WTF::Function<void ()(WebCore::IDBClient::TransactionOperation &)>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3358A60;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(WebCore::IDBTransaction &,WebCore::IDBRequest &,WTF::Function<void ()(WebCore::IDBResultData const&)>,WTF::Function<void ()(WebCore::IDBClient::TransactionOperation &)>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(WebCore::IDBTransaction &,WebCore::IDBRequest &,WTF::Function<void ()(WebCore::IDBResultData const&)>,WTF::Function<void ()(WebCore::IDBClient::TransactionOperation &)>)::{lambda(WebCore::IDBResultData const&)#1},void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3358A88;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(WebCore::IDBTransaction &,WebCore::IDBRequest &,WTF::Function<void ()(WebCore::IDBResultData const&)>,WTF::Function<void ()(WebCore::IDBClient::TransactionOperation &)>)::{lambda(WebCore::IDBResultData const&)#1},void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3358A88;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(WebCore::IDBTransaction &,WebCore::IDBRequest &,WTF::Function<void ()(WebCore::IDBResultData const&)>,WTF::Function<void ()(WebCore::IDBClient::TransactionOperation &)>)::{lambda(WebCore::IDBResultData const&)#1},void,WebCore::IDBResultData const&>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::iterateCursor(WebCore::IDBCursor &,WebCore::IDBIterateCursorData const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = &off_1E3358AB0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::iterateCursor(WebCore::IDBCursor &,WebCore::IDBIterateCursorData const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *(_QWORD *)this = &off_1E3358AB0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::iterateCursor(WebCore::IDBCursor &,WebCore::IDBIterateCursorData const&)::$_0,void,WebCore::IDBResultData const&>::call(uint64_t a1, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int **)(a1 + 16);
  WebCore::IDBRequest::didOpenOrIterateCursor(v2, a2);
  v4 = v2 + 15;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  result = *(unsigned int **)(v3 + 336);
  *(_QWORD *)(v3 + 336) = v2;
  if (result)
  {
    v7 = result + 15;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 15);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::iterateCursor(WebCore::IDBCursor &,WebCore::IDBIterateCursorData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)a1 = &off_1E3358AD8;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::iterateCursor(WebCore::IDBCursor &,WebCore::IDBIterateCursorData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E3358AD8;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, (char *)this + 56);
  *((_DWORD *)this + 18) = -1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBTransaction::iterateCursor(WebCore::IDBCursor &,WebCore::IDBIterateCursorData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::IDBTransaction *v4;
  uint64_t v5;
  const WebCore::IDBIterateCursorData *v6;
  void *v7;
  WTF *v8;
  WebCore::IDBGetResult *v9;
  WebCore::IDBClient::IDBConnectionProxy *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _BYTE v14[8];
  _BYTE v15[16];
  int v16;
  char v17;
  _BYTE v18[16];
  int v19;
  int v20;
  char v21;
  char v22[8];
  __int128 v23;
  __int16 v24;
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  WebCore::IDBGetResult *v30;
  __int128 v31;
  _BYTE v32[160];
  char v33;
  _BYTE v34[9];

  v4 = *(WebCore::IDBTransaction **)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 112) + 336);
  if (v5)
    ++*(_DWORD *)(v5 + 16);
  if (*(_DWORD *)(a1 + 40)
    || *(_DWORD *)(a1 + 72)
    || (WebCore::IDBCursor::iterateWithPrefetchedRecords((WebCore::IDBCursor *)v5, (WTF::StringImpl *)*(unsigned int *)(a1 + 80), *((_QWORD *)v4 + 44), v32), !v33))
  {
    v6 = (const WebCore::IDBIterateCursorData *)(a1 + 16);
    WTF::Deque<WebCore::IDBCursorRecord,0ul>::destroyAll((unint64_t *)(v5 + 384), (WTF::StringImpl *)a2);
    *(_QWORD *)(v5 + 384) = 0;
    *(_QWORD *)(v5 + 392) = 0;
    v8 = *(WTF **)(v5 + 400);
    if (v8)
    {
      *(_QWORD *)(v5 + 400) = 0;
      *(_DWORD *)(v5 + 408) = 0;
      WTF::fastFree(v8, v7);
    }
    WebCore::IDBClient::IDBConnectionProxy::iterateCursor(*(WebCore::IDBClient::IDBConnectionProxy **)(*((_QWORD *)v4 + 9) + 72), (WebCore::IDBClient::TransactionOperation *)a2, v6);
    goto LABEL_8;
  }
  v22[0] = 15;
  v23 = *(_OWORD *)(a2 + 24);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0u;
  v29 = 0;
  v31 = 0u;
  v9 = (WebCore::IDBGetResult *)bmalloc::api::isoAllocate();
  v30 = WebCore::IDBGetResult::IDBGetResult(v9, (const WebCore::IDBGetResult *)v32);
  v10 = *(WebCore::IDBClient::IDBConnectionProxy **)(*((_QWORD *)v4 + 9) + 72);
  v14[0] = *(_BYTE *)(a1 + 16);
  v15[0] = 0;
  v16 = -1;
  v11 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v11])(v34, v15, a1 + 24);
    v16 = v11;
  }
  v17 = *(_BYTE *)(a1 + 48);
  v18[0] = 0;
  v19 = -1;
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v12])(v34, v18, a1 + 56);
    v19 = v12;
  }
  v20 = *(_DWORD *)(a1 + 80);
  v21 = 0;
  WebCore::IDBClient::IDBConnectionProxy::iterateCursor(v10, (WebCore::IDBClient::TransactionOperation *)a2, (const WebCore::IDBIterateCursorData *)v14);
  if (v19 != -1)
    ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v19])(v34, v18);
  v19 = -1;
  if (v16 != -1)
    ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v16])(v34, v15);
  WebCore::IDBTransaction::operationCompletedOnServer(v4, (const WebCore::IDBResultData *)v22, (WebCore::IDBClient::TransactionOperation *)a2);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v22);
  if (v33)
    WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v32, v13);
  if (v5)
  {
LABEL_8:
    if (*(_DWORD *)(v5 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    else
      --*(_DWORD *)(v5 + 16);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetAllObjectStoreRecords(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&,WebCore::IndexedDB::GetAllType,std::optional<unsigned int>)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = &off_1E3358B00;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetAllObjectStoreRecords(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&,WebCore::IndexedDB::GetAllType,std::optional<unsigned int>)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *(_QWORD *)this = &off_1E3358B00;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetAllObjectStoreRecords(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&,WebCore::IndexedDB::GetAllType,std::optional<unsigned int>)::$_0,void,WebCore::IDBResultData const&>::call(uint64_t a1, WebCore::IDBResultData *a2)
{
  return WebCore::IDBTransaction::didGetAllRecordsOnServer(*(WebCore::IDBTransaction **)(a1 + 8), *(WebCore::IDBRequest **)(a1 + 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetAllObjectStoreRecords(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&,WebCore::IndexedDB::GetAllType,std::optional<unsigned int>)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)a1 = &off_1E3358B28;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetAllObjectStoreRecords(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&,WebCore::IndexedDB::GetAllType,std::optional<unsigned int>)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E3358B28;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, (char *)this + 56);
  *((_DWORD *)this + 18) = -1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetAllObjectStoreRecords(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&,WebCore::IndexedDB::GetAllType,std::optional<unsigned int>)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::getAllRecords(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72), a2, (const WebCore::IDBGetAllRecordsData *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetAllIndexRecords(WebCore::IDBIndex &,WebCore::IDBKeyRangeData const&,WebCore::IndexedDB::GetAllType,std::optional<unsigned int>)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = &off_1E3358B50;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetAllIndexRecords(WebCore::IDBIndex &,WebCore::IDBKeyRangeData const&,WebCore::IndexedDB::GetAllType,std::optional<unsigned int>)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *(_QWORD *)this = &off_1E3358B50;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetAllIndexRecords(WebCore::IDBIndex &,WebCore::IDBKeyRangeData const&,WebCore::IndexedDB::GetAllType,std::optional<unsigned int>)::$_0,void,WebCore::IDBResultData const&>::call(uint64_t a1, WebCore::IDBResultData *a2)
{
  return WebCore::IDBTransaction::didGetAllRecordsOnServer(*(WebCore::IDBTransaction **)(a1 + 8), *(WebCore::IDBRequest **)(a1 + 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetAllIndexRecords(WebCore::IDBIndex &,WebCore::IDBKeyRangeData const&,WebCore::IndexedDB::GetAllType,std::optional<unsigned int>)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)a1 = &off_1E3358B78;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetAllIndexRecords(WebCore::IDBIndex &,WebCore::IDBKeyRangeData const&,WebCore::IndexedDB::GetAllType,std::optional<unsigned int>)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E3358B78;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, (char *)this + 56);
  *((_DWORD *)this + 18) = -1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetAllIndexRecords(WebCore::IDBIndex &,WebCore::IDBKeyRangeData const&,WebCore::IndexedDB::GetAllType,std::optional<unsigned int>)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::getAllRecords(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72), a2, (const WebCore::IDBGetAllRecordsData *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetRecord(WebCore::IDBObjectStore &,WebCore::IDBGetRecordData const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = &off_1E3358BA0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetRecord(WebCore::IDBObjectStore &,WebCore::IDBGetRecordData const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *(_QWORD *)this = &off_1E3358BA0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetRecord(WebCore::IDBObjectStore &,WebCore::IDBGetRecordData const&)::$_0,void,WebCore::IDBResultData const&>::call(uint64_t a1, WebCore::IDBResultData *a2)
{
  return WebCore::IDBTransaction::didGetRecordOnServer(*(WebCore::IDBTransaction **)(a1 + 8), *(WebCore::IDBRequest **)(a1 + 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetRecord(WebCore::IDBObjectStore &,WebCore::IDBGetRecordData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)a1 = &off_1E3358BC8;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetRecord(WebCore::IDBObjectStore &,WebCore::IDBGetRecordData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E3358BC8;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, (char *)this + 56);
  *((_DWORD *)this + 18) = -1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestGetRecord(WebCore::IDBObjectStore &,WebCore::IDBGetRecordData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::getRecord(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72), a2, (const WebCore::IDBGetRecordData *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestIndexRecord(WebCore::IDBIndex &,WebCore::IndexedDB::IndexRecordType,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = &off_1E3358BF0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestIndexRecord(WebCore::IDBIndex &,WebCore::IndexedDB::IndexRecordType,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *(_QWORD *)this = &off_1E3358BF0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestIndexRecord(WebCore::IDBIndex &,WebCore::IndexedDB::IndexRecordType,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBResultData const&>::call(uint64_t a1, WebCore::IDBResultData *a2)
{
  return WebCore::IDBTransaction::didGetRecordOnServer(*(WebCore::IDBTransaction **)(a1 + 8), *(WebCore::IDBRequest **)(a1 + 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestIndexRecord(WebCore::IDBIndex &,WebCore::IndexedDB::IndexRecordType,WebCore::IDBKeyRangeData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)a1 = &off_1E3358C18;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestIndexRecord(WebCore::IDBIndex &,WebCore::IndexedDB::IndexRecordType,WebCore::IDBKeyRangeData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E3358C18;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, (char *)this + 56);
  *((_DWORD *)this + 18) = -1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestIndexRecord(WebCore::IDBIndex &,WebCore::IndexedDB::IndexRecordType,WebCore::IDBKeyRangeData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::getRecord(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72), a2, (const WebCore::IDBGetRecordData *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestCount(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = &off_1E3358C40;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestCount(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *(_QWORD *)this = &off_1E3358C40;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestCount(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBResultData const&>::call(uint64_t a1, WebCore::IDBResultData *a2)
{
  return WebCore::IDBTransaction::didGetCountOnServer(*(WebCore::IDBTransaction **)(a1 + 8), *(WebCore::IDBRequest **)(a1 + 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestCount(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)a1 = &off_1E3358C68;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestCount(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E3358C68;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, (char *)this + 56);
  *((_DWORD *)this + 18) = -1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestCount(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::getCount(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72), a2, (const WebCore::IDBKeyRangeData *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestCount(WebCore::IDBIndex &,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = &off_1E3358C90;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestCount(WebCore::IDBIndex &,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *(_QWORD *)this = &off_1E3358C90;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestCount(WebCore::IDBIndex &,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBResultData const&>::call(uint64_t a1, WebCore::IDBResultData *a2)
{
  return WebCore::IDBTransaction::didGetCountOnServer(*(WebCore::IDBTransaction **)(a1 + 8), *(WebCore::IDBRequest **)(a1 + 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestCount(WebCore::IDBIndex &,WebCore::IDBKeyRangeData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)a1 = &off_1E3358CB8;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestCount(WebCore::IDBIndex &,WebCore::IDBKeyRangeData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E3358CB8;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, (char *)this + 56);
  *((_DWORD *)this + 18) = -1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestCount(WebCore::IDBIndex &,WebCore::IDBKeyRangeData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::getCount(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72), a2, (const WebCore::IDBKeyRangeData *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestDeleteRecord(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = &off_1E3358CE0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestDeleteRecord(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *(_QWORD *)this = &off_1E3358CE0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestDeleteRecord(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBResultData const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  WebCore::IDBRequest::setResultToUndefined((_DWORD *)v3);
  *(_DWORD *)(v3 + 352) = 1;
  v6 = *(unsigned __int16 *)(a2 + 24);
  *(_WORD *)(v3 + 88) = v6;
  v7 = *(_DWORD **)(a2 + 32);
  v8 = v6 >> 8;
  if (v7)
    *v7 += 2;
  v9 = *(WTF::StringImpl **)(v3 + 96);
  *(_QWORD *)(v3 + 96) = v7;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v5);
      v8 = *(unsigned __int8 *)(v3 + 89);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  if (v8)
    WebCore::IDBRequest::onError((WTF::StringImpl **)v3);
  else
    WebCore::IDBRequest::onSuccess((WebCore::IDBRequest *)v3);
  v10 = (unsigned int *)(v3 + 60);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  result = *(unsigned int **)(v4 + 336);
  *(_QWORD *)(v4 + 336) = v3;
  if (result)
  {
    v13 = result + 15;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, result + 15);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestDeleteRecord(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)a1 = &off_1E3358D08;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestDeleteRecord(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E3358D08;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v12, (char *)this + 56);
  *((_DWORD *)this + 18) = -1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v4])(&v13, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestDeleteRecord(WebCore::IDBObjectStore &,WebCore::IDBKeyRangeData const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::deleteRecord(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72), a2, (const WebCore::IDBKeyRangeData *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestClearObjectStore(WebCore::IDBObjectStore &)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = &off_1E3358D30;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestClearObjectStore(WebCore::IDBObjectStore &)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *(_QWORD *)this = &off_1E3358D30;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestClearObjectStore(WebCore::IDBObjectStore &)::$_0,void,WebCore::IDBResultData const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  WebCore::IDBRequest::setResultToUndefined((_DWORD *)v3);
  *(_DWORD *)(v3 + 352) = 1;
  v6 = *(unsigned __int16 *)(a2 + 24);
  *(_WORD *)(v3 + 88) = v6;
  v7 = *(_DWORD **)(a2 + 32);
  v8 = v6 >> 8;
  if (v7)
    *v7 += 2;
  v9 = *(WTF::StringImpl **)(v3 + 96);
  *(_QWORD *)(v3 + 96) = v7;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v5);
      v8 = *(unsigned __int8 *)(v3 + 89);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  if (v8)
    WebCore::IDBRequest::onError((WTF::StringImpl **)v3);
  else
    WebCore::IDBRequest::onSuccess((WebCore::IDBRequest *)v3);
  v10 = (unsigned int *)(v3 + 60);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  result = *(unsigned int **)(v4 + 336);
  *(_QWORD *)(v4 + 336) = v3;
  if (result)
  {
    v13 = result + 15;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, result + 15);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestClearObjectStore(WebCore::IDBObjectStore &)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3358D58;
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestClearObjectStore(WebCore::IDBObjectStore &)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3358D58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestClearObjectStore(WebCore::IDBObjectStore &)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::clearObjectStore(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72), a2, *(_QWORD *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestPutOrAdd(WebCore::IDBObjectStore &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>> &&,WebCore::SerializedScriptValue &,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = &off_1E3358D80;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestPutOrAdd(WebCore::IDBObjectStore &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>> &&,WebCore::SerializedScriptValue &,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *(_QWORD *)this = &off_1E3358D80;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestPutOrAdd(WebCore::IDBObjectStore &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>> &&,WebCore::SerializedScriptValue &,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_0,void,WebCore::IDBResultData const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const WebCore::IDBKeyData *v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = *(const WebCore::IDBKeyData **)(a2 + 72);
  if (v5)
    WebCore::IDBRequest::setResult(*(unsigned int **)(a1 + 16), v5);
  else
    WebCore::IDBRequest::setResultToUndefined(*(_DWORD **)(a1 + 16));
  *(_DWORD *)(v3 + 352) = 1;
  v7 = *(unsigned __int16 *)(a2 + 24);
  *(_WORD *)(v3 + 88) = v7;
  v8 = *(_DWORD **)(a2 + 32);
  v9 = v7 >> 8;
  if (v8)
    *v8 += 2;
  v10 = *(WTF::StringImpl **)(v3 + 96);
  *(_QWORD *)(v3 + 96) = v8;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v6);
      v9 = *(unsigned __int8 *)(v3 + 89);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  if (v9)
    WebCore::IDBRequest::onError((WTF::StringImpl **)v3);
  else
    WebCore::IDBRequest::onSuccess((WebCore::IDBRequest *)v3);
  v11 = (unsigned int *)(v3 + 60);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  result = *(unsigned int **)(v4 + 336);
  *(_QWORD *)(v4 + 336) = v3;
  if (result)
  {
    v14 = result + 15;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, result + 15);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestPutOrAdd(WebCore::IDBObjectStore &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>> &&,WebCore::SerializedScriptValue &,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  bmalloc::api *v14;
  void *v15;
  char v16;

  *a1 = &off_1E3358DA8;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v10 = __ldaxr(v3);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v3));
    if (!v11)
    {
      atomic_store(1u, v3);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v3 + 2), a2);
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*v4 == 1)
    {
      v13 = v4[6];
      if ((_DWORD)v13 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v13])(&v16, v4 + 2);
      v4[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, a2);
    }
    else
    {
      --*v4;
    }
  }
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, (WTF::StringImpl *)a2);
      bmalloc::api::isoDeallocate(v14, v15);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestPutOrAdd(WebCore::IDBObjectStore &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>> &&,WebCore::SerializedScriptValue &,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  bmalloc::api *v14;
  void *v15;
  char v16;

  *(_QWORD *)this = &off_1E3358DA8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v10 = __ldaxr(v3);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v3));
    if (!v11)
    {
      atomic_store(1u, v3);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v3 + 2), a2);
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*v4 == 1)
    {
      v13 = v4[6];
      if ((_DWORD)v13 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v13])(&v16, v4 + 2);
      v4[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, a2);
    }
    else
    {
      --*v4;
    }
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, (WTF::StringImpl *)a2);
      bmalloc::api::isoDeallocate(v14, v15);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBTransaction::requestPutOrAdd(WebCore::IDBObjectStore &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>> &&,WebCore::SerializedScriptValue &,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  WTF *v28;
  uint64_t v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  void *v62;
  bmalloc::api *v63;
  void *v64;
  _BYTE v65[24];
  uint64_t v66;
  _QWORD v67[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char v74;
  _BYTE v75[24];
  int v76;
  WTF::StringImpl *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  char v86;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int **)(a1 + 16);
  if (v4)
    ++*v4;
  v6 = *(unsigned int **)(a1 + 24);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  if (v6[61])
  {
    if ((WTF::isMainThread((WTF *)a1) & 1) != 0)
    {
      *(_BYTE *)(a2 + 120) = 0;
      v8 = (unsigned int *)(v5 + 24);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      *(_QWORD *)v65 = v5;
      *(_QWORD *)&v65[8] = v5;
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      *(_QWORD *)&v65[16] = a2;
      WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v75, (const WebCore::IDBKey *)v4);
      if (v76 != -1)
      {
        v73 = &v86;
        ((void (*)(__int128 *__return_ptr, char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v76])(&v83, &v73, &v75[8]);
        LOBYTE(v66) = 0;
        LOBYTE(v67[0]) = 0;
        LODWORD(v68) = -1;
        v12 = v84;
        if ((_DWORD)v84 != -1)
        {
          ((void (*)(char **, _QWORD *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v84])(&v73, v67, &v83);
          LODWORD(v68) = v12;
          if ((_DWORD)v84 != -1)
            ((void (*)(char **, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v84])(&v73, &v83);
        }
        BYTE8(v68) = *(_BYTE *)(a1 + 32);
        v13 = WTF::fastMalloc((WTF *)0x48);
        *(_QWORD *)v13 = &off_1E3358DF8;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)v65;
        v14 = *(_QWORD *)&v65[16];
        *(_QWORD *)v65 = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_QWORD *)(v13 + 24) = v14;
        *(_BYTE *)(v13 + 32) = v66;
        *(_BYTE *)(v13 + 40) = 0;
        *(_DWORD *)(v13 + 56) = -1;
        v15 = v68;
        if ((_DWORD)v68 != -1)
        {
          ((void (*)(__int128 *, uint64_t, _QWORD *))off_1E3358668[v68])(&v83, v13 + 40, v67);
          *(_DWORD *)(v13 + 56) = v15;
        }
        *(_BYTE *)(v13 + 64) = BYTE8(v68);
        *(_QWORD *)&v83 = v13;
        WebCore::SerializedScriptValue::writeBlobsToDiskForIndexedDB((WTF *)v6, (uint64_t *)&v83);
        v17 = v83;
        *(_QWORD *)&v83 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        if ((_DWORD)v68 != -1)
          ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v68])(&v73, v67);
        LODWORD(v68) = -1;
        v18 = *(unsigned int **)&v65[16];
        *(_QWORD *)&v65[16] = 0;
        if (v18)
        {
          v19 = v18 + 2;
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            atomic_store(1u, v18 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
          }
        }
        v22 = *(unsigned int **)v65;
        *(_QWORD *)v65 = 0;
        if (v22)
        {
          v23 = v22 + 6;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            atomic_store(1u, v22 + 6);
            WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v22, v16);
            bmalloc::api::isoDeallocate(v63, v64);
          }
        }
        if (v76 != -1)
          ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v76])(&v73, &v75[8]);
        goto LABEL_68;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_84:
      __break(0xC471u);
      return;
    }
    *(_WORD *)v75 = 0;
    v75[2] = 0;
    v83 = 0u;
    v84 = 0u;
    v85 = 0;
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v39 = off_1E33944D8;
    v39[1] = v6;
    v39[2] = v75;
    v39[3] = &v83;
    *(_QWORD *)v65 = v39;
    WTF::callOnMainThread();
    v40 = *(_QWORD *)v65;
    *(_QWORD *)v65 = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    *(_QWORD *)v65 = 0x7FF0000000000000;
    *(_DWORD *)&v65[8] = 0;
    WTF::BinarySemaphore::waitUntil();
    if ((_QWORD)v83)
    {
      v41 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 72);
      WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v65, (const WebCore::IDBKey *)v4);
      WebCore::IDBClient::IDBConnectionProxy::putOrAdd(v41, a2, (uint64_t)v65, (unsigned int **)&v83, *(_BYTE *)(a1 + 32));
      if ((_DWORD)v66 != -1)
        ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v66])(v75, &v65[8]);
LABEL_67:
      WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v83, v42);
      goto LABEL_68;
    }
    v43 = (unsigned int *)(a2 + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v46 = *(WTF::StringImpl **)v65;
    **(_DWORD **)v65 += 2;
    *(_OWORD *)&v75[8] = *(_OWORD *)(a2 + 24);
    LOBYTE(v78) = 0;
    BYTE8(v78) = 0;
    v82 = 0;
    v75[0] = 0;
    LOWORD(v76) = 280;
    v47 = *(_DWORD *)v46;
    *(_DWORD *)v46 += 2;
    v77 = v46;
    if (v47)
    {
      *(_DWORD *)v46 = v47;
      *(_QWORD *)v65 = 0;
      v48 = v46;
    }
    else
    {
      WTF::StringImpl::destroy(v46, v45);
      v48 = *(WTF::StringImpl **)v65;
      *(_QWORD *)v65 = 0;
      if (!v48)
        goto LABEL_55;
    }
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v45);
    else
      *(_DWORD *)v48 -= 2;
LABEL_55:
    v49 = *(_QWORD *)(v5 + 40);
    if (v49)
    {
      v50 = *(_QWORD *)(v49 + 8);
      if (v50)
        v51 = v50 - 96;
      else
        v51 = 0;
    }
    else
    {
      v51 = 0;
    }
    *(_OWORD *)&v65[8] = *(_OWORD *)v75;
    v66 = *(_QWORD *)&v75[16];
    LOWORD(v67[0]) = 280;
    v77 = 0;
    v68 = v78;
    v79 = 0u;
    v80 = 0u;
    v81 = 0;
    v72 = 0;
    v52 = WTF::fastMalloc((WTF *)0x78);
    *(_QWORD *)v52 = off_1E3358DD0;
    *(_QWORD *)(v52 + 8) = a2;
    v53 = v66;
    *(_OWORD *)(v52 + 16) = *(_OWORD *)&v65[8];
    *(_QWORD *)(v52 + 32) = v53;
    *(_WORD *)(v52 + 40) = 280;
    *(_QWORD *)v65 = 0;
    v67[1] = 0;
    *(_QWORD *)(v52 + 48) = v46;
    *(_OWORD *)(v52 + 56) = v68;
    *(_OWORD *)(v52 + 72) = 0u;
    *(_OWORD *)(v52 + 88) = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0;
    *(_OWORD *)(v52 + 104) = 0u;
    v73 = (char *)v52;
    v74 = 0;
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v51 + 336))(v51, &v73);
    v54 = v73;
    v73 = 0;
    if (v54)
      (*(void (**)(char *))(*(_QWORD *)v54 + 8))(v54);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v65[8]);
    v55 = *(unsigned int **)v65;
    *(_QWORD *)v65 = 0;
    if (v55)
    {
      v56 = v55 + 2;
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        atomic_store(1u, v55 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
      }
    }
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v75);
    goto LABEL_67;
  }
  v26 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 72);
  WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v75, (const WebCore::IDBKey *)v4);
  v27 = (char *)*((_QWORD *)v6 + 1);
  v28 = (WTF *)v6[5];
  v29 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v29 = 1;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  *(_DWORD *)(v29 + 20) = (_DWORD)v28;
  if ((_DWORD)v28)
  {
    v30 = (_BYTE *)WTF::fastMalloc(v28);
    *(_DWORD *)(v29 + 16) = (_DWORD)v28;
    *(_QWORD *)(v29 + 8) = v30;
    do
    {
      v31 = *v27++;
      *v30++ = v31;
      v28 = (WTF *)((char *)v28 - 1);
    }
    while (v28);
  }
  *(_QWORD *)&v65[8] = 0;
  *(_QWORD *)&v65[16] = 0;
  *(_QWORD *)v65 = v29;
  v32 = v6[61];
  if ((_DWORD)v32)
  {
    if (v32 >> 29)
      goto LABEL_84;
    v33 = WTF::fastMalloc((WTF *)(8 * v32));
    *(_DWORD *)&v65[16] = v32;
    *(_QWORD *)&v65[8] = v33;
    if (v6[61])
    {
      v34 = v33;
      v35 = 0;
      v36 = 0;
      do
      {
        v37 = v36;
        WTF::String::isolatedCopy();
        v36 = v37 + 1;
        *(_QWORD *)(v34 + 8 * v37) = v83;
        v35 += 72;
      }
      while (v37 + 1 < (unint64_t)v6[61]);
      *(_DWORD *)&v65[20] = v37 + 1;
    }
  }
  v66 = 0;
  v67[0] = 0;
  WebCore::IDBClient::IDBConnectionProxy::putOrAdd(v26, a2, (uint64_t)v75, (unsigned int **)v65, *(_BYTE *)(a1 + 32));
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v65, v38);
  if (v76 != -1)
    ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v76])(v65, &v75[8]);
  do
  {
LABEL_68:
    v59 = __ldaxr(v6);
    v60 = v59 - 1;
  }
  while (__stlxr(v60, v6));
  if (v60)
  {
    if (!v4)
      return;
  }
  else
  {
    atomic_store(1u, v6);
    WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v6 + 2), v16);
    WTF::fastFree((WTF *)v6, v62);
    if (!v4)
      return;
  }
  if (*v4 == 1)
  {
    v61 = v4[6];
    if ((_DWORD)v61 != -1)
      ((void (*)(_BYTE *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v61])(v65, v4 + 2);
    v4[6] = -1;
    bmalloc::api::isoDeallocate((bmalloc::api *)v4, v16);
  }
  else
  {
    --*v4;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::putOrAddOnServer(WebCore::IDBClient::TransactionOperation &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>>,WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WebCore::IndexedDB::ObjectStoreOverwriteMode const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E3358DD0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 2));
  v2 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::putOrAddOnServer(WebCore::IDBClient::TransactionOperation &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>>,WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WebCore::IndexedDB::ObjectStoreOverwriteMode const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E3358DD0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 2));
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::putOrAddOnServer(WebCore::IDBClient::TransactionOperation &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>>,WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WebCore::IndexedDB::ObjectStoreOverwriteMode const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v2 + 88);
  if (result)
  {
    *(_QWORD *)(v2 + 88) = 0;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  if (!*(_BYTE *)(v2 + 121))
  {
    *(_BYTE *)(v2 + 121) = 1;
    v4 = *(_QWORD *)(v2 + 96);
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a1 + 16);
      v5 = *(_QWORD *)(v2 + 96);
      *(_QWORD *)(v2 + 96) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    return WebCore::IDBTransaction::operationCompletedOnClient(*(_QWORD *)(v2 + 16), (WebCore::IDBClient::TransactionOperation *)v2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::putOrAddOnServer(WebCore::IDBClient::TransactionOperation &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>>,WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WebCore::IndexedDB::ObjectStoreOverwriteMode const&)::$_1,void,WebCore::IDBValue &&>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  bmalloc::api *v13;
  void *v14;
  char v15;

  *(_QWORD *)a1 = &off_1E3358DF8;
  v3 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v15, a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  v4 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    v9 = v8 + 6;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v8, a2);
      bmalloc::api::isoDeallocate(v13, v14);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::putOrAddOnServer(WebCore::IDBClient::TransactionOperation &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>>,WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WebCore::IndexedDB::ObjectStoreOverwriteMode const&)::$_1,void,WebCore::IDBValue &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  bmalloc::api *v13;
  void *v14;
  char v15;

  *(_QWORD *)this = &off_1E3358DF8;
  v3 = *((unsigned int *)this + 14);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v3])(&v15, (char *)this + 40);
  *((_DWORD *)this + 14) = -1;
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    v9 = v8 + 6;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v8, a2);
      bmalloc::api::isoDeallocate(v13, v14);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBTransaction::putOrAddOnServer(WebCore::IDBClient::TransactionOperation &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>>,WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WebCore::IndexedDB::ObjectStoreOverwriteMode const&)::$_1,void,WebCore::IDBValue &&>::call(uint64_t a1, unsigned int **a2)
{
  _OWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  __int128 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  __int16 v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  if (*a2)
  {
    WebCore::IDBClient::IDBConnectionProxy::putOrAdd(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72) + 72), *(_QWORD *)(a1 + 24), a1 + 32, a2, *(_BYTE *)(a1 + 64));
  }
  else
  {
    v3 = (_OWORD *)(*(_QWORD *)(a1 + 24) + 24);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v12;
    if (v12)
      *(_DWORD *)v12 += 2;
    *(_OWORD *)&v23[8] = *v3;
    LOBYTE(v26) = 0;
    BYTE8(v26) = 0;
    v30 = 0;
    v23[0] = 0;
    v24 = 280;
    if (v12)
    {
      v6 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      v25 = v12;
      if (v6)
        *(_DWORD *)v12 = v6;
      else
        WTF::StringImpl::destroy(v12, v4);
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v4);
        v5 = v25;
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v13 = *(_OWORD *)v23;
    v14 = *(_QWORD *)&v23[16];
    v15 = 280;
    v25 = 0;
    v17 = v26;
    v27 = 0u;
    v28 = 0u;
    v29 = 0;
    v21 = 0;
    v9 = WTF::fastMalloc((WTF *)0x80);
    *(_QWORD *)v9 = off_1E3358E20;
    *(_QWORD *)(v9 + 8) = v7;
    *(_QWORD *)(v9 + 16) = v8;
    v10 = v14;
    *(_OWORD *)(v9 + 24) = v13;
    *(_QWORD *)(v9 + 40) = v10;
    *(_WORD *)(v9 + 48) = 280;
    v16 = 0;
    *(_QWORD *)(v9 + 56) = v5;
    *(_OWORD *)(v9 + 64) = v17;
    *(_OWORD *)(v9 + 80) = 0u;
    v18 = 0u;
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
    v19 = 0u;
    v20 = 0;
    v22 = v9;
    WTF::callOnMainThread();
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v23);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::putOrAddOnServer(WebCore::IDBClient::TransactionOperation &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>>,WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WebCore::IndexedDB::ObjectStoreOverwriteMode const&)::$_1::operator()(WebCore::IDBValue &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  WTF::StringImpl *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = off_1E3358E20;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3));
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, v2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::putOrAddOnServer(WebCore::IDBClient::TransactionOperation &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>>,WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WebCore::IndexedDB::ObjectStoreOverwriteMode const&)::$_1::operator()(WebCore::IDBValue &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  WTF::StringImpl *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v12;
  void *v13;

  *a1 = off_1E3358E20;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3));
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, v2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
  }
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::putOrAddOnServer(WebCore::IDBClient::TransactionOperation &,WTF::RefPtr<WebCore::IDBKey,WTF::RawPtrTraits<WebCore::IDBKey>,WTF::DefaultRefDerefTraits<WebCore::IDBKey>>,WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WebCore::IndexedDB::ObjectStoreOverwriteMode const&)::$_1::operator()(WebCore::IDBValue &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD *)(v2 + 88);
  if (result)
  {
    *(_QWORD *)(v2 + 88) = 0;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  if (!*(_BYTE *)(v2 + 121))
  {
    *(_BYTE *)(v2 + 121) = 1;
    v4 = *(_QWORD *)(v2 + 96);
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a1 + 24);
      v5 = *(_QWORD *)(v2 + 96);
      *(_QWORD *)(v2 + 96) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    return WebCore::IDBTransaction::operationCompletedOnClient(*(_QWORD *)(v2 + 16), (WebCore::IDBClient::TransactionOperation *)v2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::deleteObjectStore(WTF::String const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3358E48;
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::deleteObjectStore(WTF::String const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3358E48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::deleteObjectStore(WTF::String const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *a1 = &off_1E3358E70;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::deleteObjectStore(WTF::String const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *(_QWORD *)this = &off_1E3358E70;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::deleteObjectStore(WTF::String const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(uint64_t a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::deleteObjectStore(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72), a2, (const WTF::String *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::deleteIndex(unsigned long long,WTF::String const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3358E98;
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::deleteIndex(unsigned long long,WTF::String const&)::$_0,void,WebCore::IDBResultData const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3358E98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::deleteIndex(unsigned long long,WTF::String const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *a1 = &off_1E3358EC0;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBTransaction::deleteIndex(unsigned long long,WTF::String const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *(_QWORD *)this = &off_1E3358EC0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBClient::TransactionOperation *WTF::Detail::CallableWrapper<WebCore::IDBTransaction::deleteIndex(unsigned long long,WTF::String const&)::$_1,void,WebCore::IDBClient::TransactionOperation &>::call(_QWORD *a1, WebCore::IDBClient::TransactionOperation *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::deleteIndex(*(WebCore::IDBClient::IDBConnectionProxy **)(*(_QWORD *)(a1[1] + 72) + 72), a2, a1[2], (const WTF::String *)(a1 + 3));
}

WebCore::AVAudioSessionCaptureDevice *WebCore::AVAudioSessionCaptureDevice::AVAudioSessionCaptureDevice(WebCore::AVAudioSessionCaptureDevice *this, AVAudioSessionPortDescription *a2, AVAudioSessionPortDescription *a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  BOOL v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  MEMORY[0x19AEA5508](&v13, -[AVAudioSessionPortDescription UID](a2, "UID"));
  MEMORY[0x19AEA5508](&v12, -[AVAudioSessionPortDescription portName](a2, "portName"));
  v7 = v13;
  if (v13)
    *(_DWORD *)v13 += 2;
  *((_QWORD *)this + 1) = v7;
  *((_BYTE *)this + 16) = 1;
  v8 = v12;
  if (v12)
    *(_DWORD *)v12 += 2;
  *((_QWORD *)this + 3) = v8;
  v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v9 += 2;
  *((_QWORD *)this + 4) = v9;
  *((_DWORD *)this + 10) = 0;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v6);
      v7 = v13;
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_QWORD *)this = &off_1E31F6E48;
  *((_BYTE *)this + 40) = 1;
  if (a3)
    v10 = -[NSString isEqualToString:](-[AVAudioSessionPortDescription UID](a3, "UID", v12, v13), "isEqualToString:", -[AVAudioSessionPortDescription UID](a2, "UID"));
  else
    v10 = 0;
  *((_BYTE *)this + 41) = v10;
  return this;
}

void sub_195393584(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _QWORD *v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v12 = (WTF::StringImpl *)v10[4];
  v10[4] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)v10[3];
  v10[3] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)v10[1];
  v10[1] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AVAudioSessionCaptureDevice::isolatedCopy@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  WTF::StringImpl *v5;
  char v6;
  char v7;
  char v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  WTF::String::isolatedCopy();
  v4 = a1[16];
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v6 = a1[40];
  v7 = a1[41];
  v8 = a1[42];
  if (v13)
    *(_DWORD *)v13 += 2;
  *(_QWORD *)(a2 + 8) = v13;
  *(_BYTE *)(a2 + 16) = v4;
  v9 = v12;
  if (v12)
    *(_DWORD *)v12 += 2;
  *(_QWORD *)(a2 + 24) = v12;
  if (v11)
    *(_DWORD *)v11 += 2;
  *(_QWORD *)(a2 + 32) = v11;
  *(_BYTE *)(a2 + 40) = v6;
  *(_BYTE *)(a2 + 41) = v7;
  *(_BYTE *)(a2 + 42) = v8;
  *(_BYTE *)(a2 + 43) = 0;
  *(_QWORD *)a2 = &off_1E31F6E48;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v5);
      v9 = v12;
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = (uint64_t)v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      return WTF::StringImpl::destroy(v13, v5);
    else
      *(_DWORD *)v13 -= 2;
  }
  return result;
}

void sub_195393748(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::CoreAudioCaptureSourceFactoryIOS::~CoreAudioCaptureSourceFactoryIOS(id *this)
{
  WebCore::AudioSessionIOS *v2;
  id v3;
  WebCore::AudioSessionIOS *v4;
  void *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)this);
  (*(void (**)(WebCore::AudioSessionIOS *, char *))(*(_QWORD *)v2 + 216))(v2, (char *)this + 8);
  objc_msgSend(this[4], "invalidate");
  v3 = this[4];
  this[4] = 0;
  if (v3)
  {
    CFRelease(v3);
    v3 = this[4];
    this[4] = 0;
    if (v3)
      CFRelease(v3);
  }
  *this = &off_1E341ADF8;
  this[1] = &unk_1E341AE48;
  v4 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v3);
  (*(void (**)(WebCore::AudioSessionIOS *, char *))(*(_QWORD *)v4 + 216))(v4, (char *)this + 8);
  v6 = this[2];
  if (v6)
  {
    v6[1] = 0;
    v7 = (unsigned int *)this[2];
    this[2] = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  else
  {
    this[2] = 0;
  }
}

{
  WebCore::CoreAudioCaptureSourceFactoryIOS::~CoreAudioCaptureSourceFactoryIOS(this);
  JUMPOUT(0x19AEA7644);
}

void sub_19539399C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;
  WebCore::AudioSessionIOS *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = (void *)v1[4];
  v1[4] = 0;
  if (v4)
    CFRelease(v4);
  *v1 = &off_1E341ADF8;
  v1[1] = &unk_1E341AE48;
  v5 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v4);
  (*(void (**)(WebCore::AudioSessionIOS *, uint64_t))(*(_QWORD *)v5 + 216))(v5, v2);
  v7 = v1[2];
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)v1[2];
    v1[2] = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v6);
      }
    }
  }
  else
  {
    v1[2] = 0;
  }
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'WebCore::CoreAudioCaptureSourceFactoryIOS::~CoreAudioCaptureSourceFactoryIOS(id *this)
{
  WebCore::CoreAudioCaptureSourceFactoryIOS::~CoreAudioCaptureSourceFactoryIOS(this - 1);
}

{
  WebCore::CoreAudioCaptureSourceFactoryIOS::~CoreAudioCaptureSourceFactoryIOS(this - 1);
  JUMPOUT(0x19AEA7644);
}

uint64_t *WebCore::CoreAudioCaptureSourceFactory::singleton(WebCore::CoreAudioCaptureSourceFactory *this)
{
  WebCore::AudioSessionIOS *v2;
  WebCore::AudioSessionIOS *v3;

  if ((_MergedGlobals_134 & 1) == 0)
  {
    qword_1ECE81EA0 = (uint64_t)&off_1E341ADF8;
    qword_1ECE81EA8 = (uint64_t)&unk_1E341AE48;
    qword_1ECE81EB0 = 0;
    unk_1ECE81EB8 = 0;
    v2 = WebCore::AudioSession::sharedSession(this);
    (*(void (**)(WebCore::AudioSessionIOS *, uint64_t *))(*(_QWORD *)v2 + 208))(v2, &qword_1ECE81EA8);
    qword_1ECE81EA0 = (uint64_t)&off_1E3358F18;
    qword_1ECE81EA8 = (uint64_t)&unk_1E3358F68;
    qword_1ECE81EC0 = -[WebCoreAudioCaptureSourceIOSListener initWithCallback:]([WebCoreAudioCaptureSourceIOSListener alloc], "initWithCallback:", &qword_1ECE81EA0);
    v3 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)qword_1ECE81EC0);
    (*(void (**)(WebCore::AudioSessionIOS *, uint64_t *))(*(_QWORD *)v3 + 208))(v3, &qword_1ECE81EA8);
    _MergedGlobals_134 = 1;
  }
  return &qword_1ECE81EA0;
}

void sub_195393B40(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  WebCore::AudioSessionIOS *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = (void *)qword_1ECE81EC0;
  qword_1ECE81EC0 = 0;
  if (v4)
    CFRelease(v4);
  *v2 = v1;
  v2[1] = v1 + 80;
  v5 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v4);
  (*(void (**)(WebCore::AudioSessionIOS *, _QWORD *))(*(_QWORD *)v5 + 216))(v5, v2 + 1);
  v7 = v2[2];
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)qword_1ECE81EB0;
    qword_1ECE81EB0 = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v6);
      }
    }
  }
  else
  {
    qword_1ECE81EB0 = 0;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebCore::CoreAudioCaptureSourceFactoryIOS::createAudioCaptureSource@<X0>(WTF::StringImpl **a1@<X1>, uint64_t *a2@<X2>, const WebCore::MediaConstraints *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  v5 = *a1;
  if (*a1)
    *(_DWORD *)v5 += 2;
  v8 = v5;
  WebCore::CoreAudioCaptureSource::create((WebCore::CoreAudioCaptureSourceFactory *)&v8, a2, a3, a4, a5);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_195393C48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AVCaptureDeviceManager::computeCaptureDevices(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *a2;
  *a2 = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E33594B0;
    v6[1] = a1;
    v6[2] = v3;
    v7 = *(_QWORD *)(a1 + 56);
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v8 = &off_1E33594D8;
    *(_QWORD *)(v8 + 8) = a1;
    *(_QWORD *)(v8 + 16) = v6;
    *(_BYTE *)(v8 + 24) = 1;
    v9 = v8;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 32))(v7, &v9);
    result = v9;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_195393D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AVCaptureDeviceManager::captureDevices(WebCore::AVCaptureDeviceManager *this)
{
  NSObject *v3;
  uint8_t v4[16];

  if (!*((_BYTE *)this + 48))
  {
    v3 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_1940B8000, v3, OS_LOG_TYPE_ERROR, "Retrieving AVCaptureDeviceManager list before initialization", v4, 2u);
    }
  }
  return (uint64_t)this + 16;
}

uint64_t WebCore::toCaptureDevice(WebCore *this, AVCaptureDevice *a2, char a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _BOOL8 v11;
  uint64_t result;
  BOOL v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  MEMORY[0x19AEA5508](&v15, -[AVCaptureDevice uniqueID](a2, "uniqueID"));
  MEMORY[0x19AEA5508](&v14, -[AVCaptureDevice localizedName](a2, "localizedName"));
  v7 = v15;
  if (v15)
    *(_DWORD *)v15 += 2;
  *(_QWORD *)this = v7;
  *((_BYTE *)this + 8) = 3;
  v8 = v14;
  if (v14)
    *(_DWORD *)v14 += 2;
  *((_QWORD *)this + 2) = v8;
  v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v9 += 2;
  *((_QWORD *)this + 3) = v9;
  *((_DWORD *)this + 8) = 0;
  v10 = v7;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v6);
      v10 = v15;
    }
    else
    {
      *(_DWORD *)v8 -= 2;
      v10 = v7;
    }
  }
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = -[AVCaptureDevice isConnected](a2, "isConnected", v14, v15);
  *((_BYTE *)this + 32) = v11;
  *((_BYTE *)this + 33) = a3;
  PAL::getAVCaptureDeviceClass[0]((PAL *)v11);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      result = -[AVCaptureDevice isContinuityCamera](a2, "isContinuityCamera");
      if ((_DWORD)result)
      {
        result = objc_msgSend((id)PAL::getAVCaptureDeviceClass[0]((PAL *)result), "systemPreferredCamera");
        v13 = result != (_QWORD)a2;
      }
      else
      {
        v13 = 0;
      }
      *((_BYTE *)this + 35) = v13;
    }
  }
  return result;
}

void sub_195393FA8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::AVCaptureDeviceManager *WebCore::AVCaptureDeviceManager::AVCaptureDeviceManager(WebCore::AVCaptureDeviceManager *this)
{
  WebCoreAVCaptureDeviceManagerObserver *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E3358FA0;
  v2 = -[WebCoreAVCaptureDeviceManagerObserver initWithCallback:]([WebCoreAVCaptureDeviceManagerObserver alloc], "initWithCallback:", this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v3 = (const void *)WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes((WebCore::AVVideoCaptureSource *)v2);
  *((_QWORD *)this + 5) = v3;
  if (v3)
    CFRetain(v3);
  *((_BYTE *)this + 48) = 0;
  WTF::WorkQueue::create();
  return this;
}

void sub_1953940C8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  _QWORD *v2;
  unsigned int *v3;
  const void *v5;
  const void *v6;
  const void *v7;

  v5 = (const void *)v2[5];
  v2[5] = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)v2[4];
  v2[4] = 0;
  if (v6)
    CFRelease(v6);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  v7 = (const void *)v2[1];
  v2[1] = 0;
  if (v7)
    CFRelease(v7);
  _Unwind_Resume(a1);
}

void WebCore::AVCaptureDeviceManager::~AVCaptureDeviceManager(WebCore::AVCaptureDeviceManager *this)
{
  void *v2;
  PAL *v3;
  PAL *v4;
  uint64_t v5;
  PAL *v6;
  PAL *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)this + 1));
  objc_msgSend(*((id *)this + 1), "disconnect");
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = (void *)*((_QWORD *)this + 4);
  v3 = (PAL *)objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  v4 = v3;
  if (v3)
  {
    v5 = *(_QWORD *)v14;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v6), "removeObserver:forKeyPath:", *((_QWORD *)this + 1), CFSTR("suspended"));
        v6 = (PAL *)((char *)v6 + 1);
      }
      while (v4 != v6);
      v3 = (PAL *)objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      v4 = v3;
    }
    while (v3);
  }
  v7 = (PAL *)objc_msgSend((id)PAL::getAVCaptureDeviceClass[0](v3), "removeObserver:forKeyPath:", *((_QWORD *)this + 1), CFSTR("systemPreferredCamera"));
  objc_msgSend((id)PAL::getAVCaptureDeviceDiscoverySessionClass[0](v7), "removeObserver:forKeyPath:", *((_QWORD *)this + 1), CFSTR("devices"));
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
  v10 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
    CFRelease(v11);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 4, v8);
  v12 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
    CFRelease(v12);
}

{
  WebCore::AVCaptureDeviceManager::~AVCaptureDeviceManager(this);
  JUMPOUT(0x19AEA7644);
}

void sub_1953942C0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v4 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v5 = *(const void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v6)
    CFRelease(v6);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v2 + 16), a2);
  v7 = *(const void **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v7)
    CFRelease(v7);
  _Unwind_Resume(a1);
}

void sub_195394444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_195394534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::MockRealtimeAudioSource::create@<X0>(WebCore::CoreAudioCaptureSourceFactory *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, const WebCore::MediaConstraints *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23[2];
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  WebCore::MockRealtimeMediaSourceCenter::mockDeviceWithPersistentID((uint64_t)a1, a3, (uint64_t)&v24);
  if (v28)
  {
    {
      WebCore::CoreAudioSharedUnit::CoreAudioSharedUnit((WebCore::CoreAudioSharedUnit *)&WebCore::MockAudioSharedUnit::singleton(void)::unit);
    }
    v12 = atomic_load(&WebCore::MockAudioSharedUnit::singleton(void)::onceFlag);
    if (v12 != -1)
    {
      v23[0] = (WTF::StringImpl *)&v21;
      v22 = v23;
      std::__call_once(&WebCore::MockAudioSharedUnit::singleton(void)::onceFlag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockAudioSharedUnit::singleton(void)::$_0 &&>>);
    }
    v13 = *(WTF::StringImpl **)a1;
    if (*(_QWORD *)a1)
      *(_DWORD *)v13 += 2;
    v23[0] = v13;
    WebCore::BaseAudioSharedUnit::setCaptureDevice((uint64_t)&WebCore::MockAudioSharedUnit::singleton(void)::unit, v23, 0);
    v15 = v23[0];
    v23[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    {
      WebCore::CoreAudioSharedUnit::CoreAudioSharedUnit((WebCore::CoreAudioSharedUnit *)&WebCore::MockAudioSharedUnit::singleton(void)::unit);
    }
    v16 = atomic_load(&WebCore::MockAudioSharedUnit::singleton(void)::onceFlag);
    if (v16 != -1)
    {
      v23[0] = (WTF::StringImpl *)&v21;
      v22 = v23;
      std::__call_once(&WebCore::MockAudioSharedUnit::singleton(void)::onceFlag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockAudioSharedUnit::singleton(void)::$_0 &&>>);
    }
    result = (WTF::StringImpl *)WebCore::CoreAudioCaptureSource::createForTesting(a1, a2, (uint64_t *)a3, a4, (uint64_t)&WebCore::MockAudioSharedUnit::singleton(void)::unit, a5, a6);
  }
  else
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = v23[0];
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = v19;
    *(_WORD *)(a6 + 16) = 6;
  }
  if (v28)
  {
    if (v27 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3359470[v27])(v23, &v26);
    v27 = -1;
    v20 = v25;
    v25 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1953947C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, int a12, __int16 a13, char a14, char a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,int a28,char a29)
{
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  if (a29)
  {
    if (a27 != -1)
      ((void (*)(char *, uint64_t *))off_1E3359470[a27])(&a15, &a19);
    a27 = -1;
    v30 = a17;
    a17 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, a2);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = a16;
    a16 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, a2);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::MockAudioSharedInternalUnit::~MockAudioSharedInternalUnit(WebCore::MockAudioSharedInternalUnit *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  const void *v9;

  *(_QWORD *)this = off_1E3358FD8;
  v2 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  *((_QWORD *)this + 21) = off_1E32051C0;
  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase((WebCore::MockAudioSharedInternalUnit *)((char *)this + 168));
  v5 = (unsigned int *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 16);
  if (v8)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v8, v4);
  }
  v9 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
    CFRelease(v9);
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)this + 1, 0);
}

{
  WTF *v1;
  void *v2;

  WebCore::MockAudioSharedInternalUnit::~MockAudioSharedInternalUnit(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::MockAudioSharedInternalUnit::initialize(WebCore::MockAudioSharedInternalUnit *this)
{
  if (*((double *)this + 6) == *((double *)this + 11))
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t WebCore::MockAudioSharedInternalUnit::start(WebCore::MockAudioSharedInternalUnit *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;

  if (!*((_BYTE *)this + 144))
    *((_BYTE *)this + 144) = 1;
  WTF::MonotonicTime::now(this);
  *((_QWORD *)this + 25) = v2;
  *(_BYTE *)(*((_QWORD *)this + 19) + 4) = 1;
  v3 = *((_QWORD *)this + 27);
  v4 = *((_QWORD *)this + 25);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = off_1E3359618;
  v5[1] = this;
  v5[2] = v4;
  v8 = v5;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 32))(v3, &v8);
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  return 0;
}

void sub_195394A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MockAudioSharedInternalUnit::stop(WebCore::MockAudioSharedInternalUnit *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  *(_BYTE *)(*((_QWORD *)this + 19) + 4) = 0;
  if (*((_BYTE *)this + 144))
    *((_QWORD *)this + 25) = 0x7FF8000000000000;
  v1 = *((_QWORD *)this + 27);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3359640;
  v5 = v2;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v1 + 24))(v1, &v5);
  v3 = v5;
  v5 = 0;
  if (v3)
    (*(void (**)(_QWORD *))(*v3 + 8))(v3);
  return 0;
}

void sub_195394AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MockAudioSharedInternalUnit::uninitialize(WebCore::MockAudioSharedInternalUnit *this)
{
  return 0;
}

uint64_t WebCore::MockAudioSharedInternalUnit::delaySamples(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  *(_BYTE *)(*(_QWORD *)(a1 + 152) + 4) = 0;
  if (*(_BYTE *)(a1 + 144))
    *(_QWORD *)(a1 + 200) = 0x7FF8000000000000;
  v1 = *(_QWORD *)(a1 + 216);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3359640;
  v5 = v2;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v1 + 24))(v1, &v5);
  v3 = v5;
  v5 = 0;
  if (v3)
    (*(void (**)(_QWORD *))(*v3 + 8))(v3);
  return WTF::RunLoop::TimerBase::start();
}

void sub_195394BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MockAudioSharedInternalUnit::generateSampleBuffers(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  __n128 v10;
  double v11;
  double v12;
  void *v13;
  int v14;
  double v15;
  unsigned int v16;
  unsigned int v17;
  WebCore::WebAudioBufferList *v18;
  __int128 v19;
  unint64_t v20;
  WebCore::WebAudioBufferList *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  unint64_t i;
  float v36;
  unint64_t j;
  float v38;
  unint64_t v39;
  double v40;
  float v41;
  unsigned int v42;
  WebCore::AudioSessionIOS *v43;
  uint64_t result;
  int v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  void **v54;
  unsigned int v55;
  void **v56;
  unint64_t v57;
  uint64_t v58;
  float *v59;
  double v60;
  float v61;
  CMTime *v62;
  WebCore::AudioSession *v63;
  double Seconds;
  uint64_t v65;
  uint64_t (*v66)(_QWORD, int *, _BYTE *, uint64_t, uint64_t, _QWORD);
  uint64_t v67;
  uint64_t (*v68)(_QWORD, int *, _BYTE *, uint64_t, uint64_t, uint64_t);
  WebCore::AudioSessionIOS *v69;
  WTF *v70;
  unsigned int v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  _BYTE v75[48];
  __int128 v76;
  int v77;
  int v78;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 216);
  v7 = *(unsigned int **)(a1 + 152);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = WTF::fastMalloc((WTF *)0x20);
  v11 = a2 + 0.02 - v5;
  if (v11 >= 0.0)
    v12 = a2 + 0.02;
  else
    v12 = v5;
  v10.n128_u64[0] = 0;
  if (v11 >= 0.0)
    v10.n128_f64[0] = a2 + 0.02 - v5;
  *(_QWORD *)v9 = &off_1E3359668;
  *(_QWORD *)(v9 + 8) = a1;
  *(double *)(v9 + 16) = v12;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)v75 = v9;
  (*(void (**)(uint64_t, _BYTE *, __n128))(*(_QWORD *)v6 + 16))(v6, v75, v10);
  v13 = *(void **)v75;
  *(_QWORD *)v75 = 0;
  if (v13)
    v13 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  if (!*(_QWORD *)(a1 + 8) || !*(_DWORD *)(a1 + 140))
  {
    v14 = (int)*(double *)(a1 + 88);
    v15 = (double)v14 * 0.02 + (double)v14 * 0.02;
    v16 = (v15 - 1) | ((v15 - 1) >> 1);
    v17 = v16 | (v16 >> 2) | ((v16 | (v16 >> 2)) >> 4);
    *(_QWORD *)(a1 + 16) = (v17 | (v17 >> 8) | ((v17 | (v17 >> 8)) >> 16)) + 1;
    v18 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
    v19 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)&v75[8] = *(_OWORD *)(a1 + 88);
    *(_QWORD *)v75 = off_1E34087C0;
    *(_OWORD *)&v75[24] = v19;
    *(_QWORD *)&v75[40] = *(_QWORD *)(a1 + 120);
    LODWORD(v76) = 0;
    *((_QWORD *)&v76 + 1) = 0;
    v77 = 0;
    v78 = 0;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = WebCore::WebAudioBufferList::WebAudioBufferList(v18, (const WebCore::CAAudioStreamDescription *)v75);
    WebCore::WebAudioBufferList::setSampleCount(v21, v20);
    std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)(a1 + 8), v18);
    *(_QWORD *)v75 = 0;
    ((void (*)(PAL *__hidden, const __CFAllocator *, const AudioStreamBasicDescription *, unint64_t, const AudioChannelLayout *, unint64_t, const void *, const __CFDictionary *))PAL::softLinkCoreMediaCMAudioFormatDescriptionCreate)(0, (const __CFAllocator *)(a1 + 88), 0, 0, 0, 0, 0, (const __CFDictionary *)v75);
    v13 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)v75;
    if (v13)
      CFRelease(v13);
    v23 = (2 * v14);
    v24 = (int)v23;
    if (*(unsigned int *)(a1 + 140) < (unint64_t)(int)v23)
    {
      v25 = *(unsigned int *)(a1 + 136);
      if (v25 < (int)v23)
      {
        v26 = v25 + (v25 >> 2);
        if (v26 >= 0x10)
          v27 = v26 + 1;
        else
          v27 = 16;
        if (v27 <= (int)v23)
          v28 = (int)v23;
        else
          v28 = v27;
        v13 = (void *)WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 128, v28);
      }
    }
    *(_DWORD *)(a1 + 140) = v23;
    v29 = *(_DWORD *)(a1 + 136);
    v30 = (2 * v14);
    v31 = 2 * v14;
    if (v29 < v23)
    {
      if (v29)
      {
        *(_DWORD *)(a1 + 140) = 0;
        v70 = *(WTF **)(a1 + 128);
        if (v70)
        {
          *(_QWORD *)(a1 + 128) = 0;
          *(_DWORD *)(a1 + 136) = 0;
          WTF::fastFree(v70, v22);
        }
      }
      v13 = (void *)WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 128, (2 * v14));
      v30 = *(unsigned int *)(a1 + 140);
      v31 = *(_DWORD *)(a1 + 140);
    }
    v32 = *(_QWORD *)(a1 + 128);
    if (v31)
      bzero(*(void **)(a1 + 128), 4 * (v30 - (v30 != 0)) + 4);
    if (v31 != (_DWORD)v23)
      bzero((void *)(v32 + 4 * v30), 4 * (v23 - v30));
    *(_DWORD *)(a1 + 140) = v23;
    v33 = vcvtpd_u64_f64((double)v14 * 0.07);
    v34 = (float)v14;
    if (v33)
    {
      for (i = 0; i != v33; ++i)
      {
        v36 = sin((double)i * 6.28318531 / (float)(v34 / 1500.0)) * 0.5;
        *(float *)(v32 + 4 * i) = *(float *)(v32 + 4 * i) + v36;
      }
      for (j = 0; j != v33; ++j)
      {
        v38 = sin((double)j * 6.28318531 / (float)(v34 / 500.0)) * 0.5;
        *(float *)(v32 + 4 * v14 + 4 * j) = *(float *)(v32 + 4 * v14 + 4 * j) + v38;
      }
    }
    if (v14 && !*(_BYTE *)(a1 + 160))
    {
      v39 = 0;
      v40 = (float)(v34 / 3000.0);
      do
      {
        v41 = sin((double)v39 * 6.28318531 / v40) * 0.0500000007;
        *(float *)(v32 + 4 * v39) = *(float *)(v32 + 4 * v39) + v41;
        ++v39;
      }
      while (v24 != v39);
    }
  }
  v42 = ((unint64_t)((double)(int)*(double *)(a1 + 88) * 0.02) + 15) & 0xFFFFFFF0;
  v43 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v13);
  result = (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v43 + 80))(v43);
  if (v42 >= result)
    v46 = result;
  else
    v46 = v42;
  while (v46)
  {
    v71 = v42;
    v47 = *(_QWORD *)(a1 + 32);
    v48 = *(unsigned int *)(a1 + 140);
    v49 = v47 % v48;
    v50 = v48 - v47 % v48;
    if (v50 >= v46)
      v51 = v46;
    else
      v51 = v50;
    v52 = *(_DWORD **)(*(_QWORD *)(a1 + 8) + 40);
    v55 = *v52;
    v54 = (void **)(v52 + 2);
    v53 = v55;
    if (16 * v55)
    {
      v56 = &v54[2 * v53];
      do
      {
        *((_DWORD *)v54 + 1) = *(_DWORD *)(a1 + 112) * v46;
        if (v49 >= *(unsigned int *)(a1 + 140))
        {
          __break(0xC471u);
          JUMPOUT(0x1953951B4);
        }
        memcpy(v54[1], (const void *)(*(_QWORD *)(a1 + 128) + 4 * v49), 4 * v51);
        v57 = *(_QWORD *)(a1 + 32);
        v58 = v57 + v51;
        if (v57 + v51 > v57)
        {
          v59 = (float *)v54[1];
          v60 = (float)((float)(int)*(double *)(a1 + 88) / 150.0);
          do
          {
            v61 = sin((double)v57 * 6.28318531 / v60) * 0.100000001;
            *v59 = *v59 + v61;
            ++v59;
            ++v57;
          }
          while (v58 != v57);
        }
        v54 += 2;
      }
      while (v54 != v56);
    }
    v73 = 0uLL;
    v74 = 0;
    PAL::softLinkCoreMediaCMTimeMake(*(PAL **)(a1 + 24), (int)*(double *)(a1 + 88), v45);
    *(_OWORD *)v75 = v73;
    *(_QWORD *)&v75[16] = v74;
    Seconds = PAL::softLinkCoreMediaCMTimeGetSeconds((PAL *)v75, v62);
    *(_QWORD *)(a1 + 24) += v51;
    v65 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
    v72 = 0;
    v76 = 0u;
    memset(&v75[16], 0, 32);
    *(double *)v75 = Seconds;
    *(_QWORD *)&v75[8] = (unint64_t)Seconds;
    v66 = *(uint64_t (**)(_QWORD, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(a1 + 232);
    if (v66)
    {
      if (WebCore::s_shouldIncreaseBufferSize)
        v67 = (10 * v51);
      else
        v67 = v51;
      v63 = (WebCore::AudioSession *)v66(*(_QWORD *)(a1 + 240), &v72, v75, 1, v67, 0);
    }
    v72 = 0;
    v68 = *(uint64_t (**)(_QWORD, int *, _BYTE *, uint64_t, uint64_t, uint64_t))(a1 + 248);
    if (v68)
      v63 = (WebCore::AudioSession *)v68(*(_QWORD *)(a1 + 256), &v72, v75, 1, v51, v65);
    *(_QWORD *)(a1 + 32) += v51;
    v42 = v71 - v51;
    v69 = WebCore::AudioSession::sharedSession(v63);
    result = (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v69 + 80))(v69);
    if (v42 >= result)
      v46 = result;
    else
      v46 = v42;
  }
  return result;
}

void sub_1953951D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MockAudioSharedInternalUnit::render(WebCore::MockAudioSharedInternalUnit *this, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, int a5, AudioBufferList *a6)
{
  UInt32 *v7;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  _DWORD *v12;

  if (WebCore::s_shouldIncreaseBufferSize == 1)
  {
    if (a6->mNumberBuffers)
    {
      if (*((_DWORD *)this + 26) * a5 <= a6->mBuffers[0].mDataByteSize)
        WebCore::s_shouldIncreaseBufferSize = 0;
    }
    return 4294967246;
  }
  v7 = *(UInt32 **)(*((_QWORD *)this + 1) + 40);
  if (a6->mNumberBuffers > *v7)
    return 4294967246;
  if (a6->mNumberBuffers)
  {
    v9 = 0;
    v10 = 0;
    v11 = (*((_DWORD *)this + 26) * a5);
    v12 = v7 + 4;
    while (v11 <= a6->mBuffers[v9 / 0x10].mDataByteSize)
    {
      memcpy(a6->mBuffers[v9 / 0x10].mData, *(const void **)&v12[v9 / 4], v11);
      ++v10;
      v9 += 16;
      if (v10 >= a6->mNumberBuffers)
        return 0;
    }
    return 4294967246;
  }
  return 0;
}

uint64_t WebCore::MockAudioSharedInternalUnit::set(WebCore::MockAudioSharedInternalUnit *this, int a2, const WTF::StringImpl *a3, unsigned int a4, _OWORD *a5)
{
  uint64_t result;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  void *v10;
  WTF::StringImpl *v11;
  double v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  char **v16;
  char *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;

  result = 0;
  v23 = *MEMORY[0x1E0C80C00];
  if (a2 > 1999)
  {
    if (a2 == 2000)
    {
      {
        WebCore::CoreAudioSharedUnit::CoreAudioSharedUnit((WebCore::CoreAudioSharedUnit *)&WebCore::MockAudioSharedUnit::singleton(void)::unit);
      }
      v9 = atomic_load(&WebCore::MockAudioSharedUnit::singleton(void)::onceFlag);
      if (v9 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&WebCore::MockAudioSharedUnit::singleton(void)::onceFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockAudioSharedUnit::singleton(void)::$_0 &&>>);
      }
      if (byte_1EE2F50C0)
        v10 = &unk_1EE2F50B0;
      else
        v10 = (void *)MEMORY[0x1E0CBF738];
      WebCore::MockRealtimeMediaSourceCenter::mockDeviceWithPersistentID((uint64_t)v10, a3, (uint64_t)&v18);
      if (v22)
      {
        if (v21)
        {
          result = std::__throw_bad_variant_access[abi:sn180100]();
          __break(1u);
        }
        else
        {
          v12 = (double)v20;
          *((double *)this + 6) = (double)v20;
          *((double *)this + 11) = v12;
          v21 = -1;
          v13 = v19;
          v19 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v11);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = v18;
          v18 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 != 2)
            {
              result = 0;
              *(_DWORD *)v14 -= 2;
              return result;
            }
            WTF::StringImpl::destroy(v14, v11);
          }
          return 0;
        }
      }
      else
      {
        return 0xFFFFFFFFLL;
      }
    }
    else if (a2 == 2005)
    {
      result = 0;
      *(_OWORD *)((char *)this + 232) = *a5;
    }
  }
  else if (a2 == 8)
  {
    result = 0;
    v7 = *a5;
    v8 = a5[1];
    if ((_DWORD)a3 == 1)
    {
      *((_QWORD *)this + 15) = *((_QWORD *)a5 + 4);
      *(_OWORD *)((char *)this + 104) = v8;
      *(_OWORD *)((char *)this + 88) = v7;
    }
    else
    {
      *((_QWORD *)this + 10) = *((_QWORD *)a5 + 4);
      *((_OWORD *)this + 3) = v7;
      *((_OWORD *)this + 4) = v8;
    }
  }
  else if (a2 == 23)
  {
    result = 0;
    *(_OWORD *)((char *)this + 248) = *a5;
  }
  return result;
}

void sub_1953954EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,char a26)
{
  uint64_t v26;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  if (a26)
  {
    if (a24 != -1)
      ((void (*)(char *, uint64_t))off_1E3359470[a24])(&a12, v26);
    a24 = -1;
    v28 = a14;
    a14 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, a2);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = a13;
    a13 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, a2);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MockAudioSharedInternalUnit::get(WebCore::MockAudioSharedInternalUnit *this, int a2, int a3, unsigned int a4, _QWORD *a5, unsigned int *a6)
{
  char *v6;
  __int128 v7;
  __int128 v8;

  if (a2 == 8)
  {
    v6 = (char *)this + 48;
    if (a3 == 1)
      v6 = (char *)this + 88;
    v7 = *(_OWORD *)v6;
    v8 = *((_OWORD *)v6 + 1);
    a5[4] = *((_QWORD *)v6 + 4);
    *(_OWORD *)a5 = v7;
    *((_OWORD *)a5 + 1) = v8;
    *a6 = 40;
  }
  return 0;
}

uint64_t WebCore::MockAudioSharedInternalUnit::defaultInputDevice(WebCore::MockAudioSharedInternalUnit *this, unsigned int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t WebCore::MockAudioSharedInternalUnit::defaultOutputDevice(WebCore::MockAudioSharedInternalUnit *this, unsigned int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t WebCore::MockRealtimeVideoSource::create@<X0>(WTF::StringImpl **a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, const WebCore::MediaConstraints *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  WebCore::RealtimeMediaSource *v12;
  uint64_t result;
  WTF::StringImpl *v14;
  __int16 v15;
  WTF::StringImpl *v16;
  _BYTE v17[8];
  WTF::StringImpl *v18;
  char v19;

  v12 = (WebCore::RealtimeMediaSource *)WTF::fastMalloc((WTF *)0x9D8);
  result = WebCore::MockRealtimeVideoSourceMac::MockRealtimeVideoSourceMac((uint64_t)v12, a1, a2, a3, a5);
  if (a4 && (result = WebCore::RealtimeMediaSource::applyConstraints(v12, a4, v17), v19))
  {
    v15 = (v17[0] << 8) | 4;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_WORD *)(a6 + 16) = v15;
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    return (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)v12 + 144))(v12);
  }
  else
  {
    *(_QWORD *)a6 = v12;
    *(_QWORD *)(a6 + 8) = 0;
    *(_WORD *)(a6 + 16) = 0;
  }
  return result;
}

void sub_1953956AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 144))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MockRealtimeVideoSourceMac::MockRealtimeVideoSourceMac(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;

  v6 = WebCore::MockRealtimeVideoSource::MockRealtimeVideoSource(a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = off_1E3359050;
  *(_QWORD *)(v6 + 440) = &unk_1E3359238;
  *(_OWORD *)(v6 + 2488) = 0u;
  WTF::WorkQueue::create();
  *(_QWORD *)(a1 + 2512) = 0;
  return a1;
}

void sub_195395740(_Unwind_Exception *a1, void *a2)
{
  WebCore::MockRealtimeVideoSource *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v5 = v3;
  v6 = *v3;
  *v5 = 0;
  if (v6)
  {
    v7 = *(const void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;
    if (v7)
      CFRelease(v7);
    v8 = *(const void **)(v6 + 8);
    *(_QWORD *)(v6 + 8) = 0;
    if (v8)
      CFRelease(v8);
    v9 = *(const void **)v6;
    *(_QWORD *)v6 = 0;
    if (v9)
      CFRelease(v9);
    MEMORY[0x19AEA7644](v6, 0x10C0C404B4E061BLL);
  }
  WebCore::MockRealtimeVideoSource::~MockRealtimeVideoSource(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::MockRealtimeVideoSourceMac::updateSampleBuffer(WebCore::MockRealtimeVideoSourceMac *this)
{
  char **v2;
  char **v3;
  char *v4;
  int v6;
  WebCore::ImageTransferSessionVT *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  CFTypeRef *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  double v22;
  WTF::MediaTime *v23;
  uint64_t v24;
  WebCore::ImageTransferSessionVT *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  WTF::MonotonicTime *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __CVBuffer *v43;
  _QWORD *v44;
  uint64_t v45;
  CFTypeRef v46;
  char *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __CVBuffer *v56;
  _QWORD v57[2];
  CFTypeRef cf;
  _QWORD v59[4];

  v2 = WebCore::MockRealtimeVideoSource::imageBufferInternal(this);
  if (!v2)
    return;
  v3 = v2;
  v4 = v2[1];
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!*((_QWORD *)this + 311))
  {
    v7 = (WebCore::ImageTransferSessionVT *)operator new();
    WebCore::ImageTransferSessionVT::ImageTransferSessionVT(v7, 875704422, (OpaqueVTPixelTransferSession **)1);
    v8 = *((_QWORD *)this + 311);
    *((_QWORD *)this + 311) = v7;
    if (v8)
    {
      v9 = *(const void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = 0;
      if (v9)
        CFRelease(v9);
      v10 = *(const void **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      if (v10)
        CFRelease(v10);
      v11 = *(const void **)v8;
      *(_QWORD *)v8 = 0;
      if (v11)
        CFRelease(v11);
      MEMORY[0x19AEA7644](v8, 0x10C0C404B4E061BLL);
      v7 = (WebCore::ImageTransferSessionVT *)*((_QWORD *)this + 311);
    }
    *((_QWORD *)v7 + 8) = 10;
  }
  cf = 0;
  (*((void (**)(_QWORD *__return_ptr, char **))*v3 + 6))(v59, v3);
  if (v59[0])
  {
    v12 = (CFTypeRef *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v59[0] + 48) + 16))(*(_QWORD *)(v59[0] + 48));
    WTF::RetainPtr<CGColorSpace *>::operator=(&cf, v12);
    v14 = v59[0];
    v59[0] = 0;
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (__ldaxr((unsigned __int8 *)v15))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v15))
      {
        goto LABEL_27;
      }
      MEMORY[0x19AEA534C](v15);
LABEL_27:
      v17 = *(_QWORD *)(v15 + 8);
      v18 = v17 - 1;
      *(_QWORD *)(v15 + 8) = v17 - 1;
      if (v17 == 1)
      {
        v55 = *(_QWORD *)(v15 + 16);
        v19 = *(_QWORD *)(v15 + 24);
        *(_QWORD *)(v15 + 24) = 0;
        v20 = v55 != 0;
      }
      else
      {
        v19 = 0;
        v20 = 1;
      }
      v21 = __ldxr((unsigned __int8 *)v15);
      if (v21 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v15))
        {
          if (v18)
            goto LABEL_39;
LABEL_35:
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          if (!v20)
            WTF::fastFree((WTF *)v15, v13);
          goto LABEL_39;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
      if (v18)
        goto LABEL_39;
      goto LABEL_35;
    }
  }
LABEL_39:
  v22 = WebCore::MockRealtimeVideoSource::elapsedTime(this);
  v57[0] = WTF::MediaTime::createWithDouble(v23, v22 + 0.1);
  v57[1] = v24;
  v25 = (WebCore::ImageTransferSessionVT *)*((_QWORD *)this + 311);
  v27 = *((_DWORD *)this + 54);
  v26 = *((unsigned int *)this + 55);
  if (v27 < 1 || (int)v26 <= 0)
  {
    v28 = *((_DWORD *)this + 56);
    if (v28 >= 1)
    {
      v29 = *((_DWORD *)this + 57);
      if (v29 >= 1)
      {
        if (v27)
        {
          v26 = (int)((double)v29 / (double)v28 * (double)v27);
        }
        else if ((_DWORD)v26)
        {
          v27 = (int)((double)v28 / (double)v29 * (double)(int)v26);
        }
        else
        {
          v27 = *((_DWORD *)this + 56);
          v26 = *((unsigned int *)this + 57);
        }
      }
    }
  }
  v59[0] = v27 | (unint64_t)(v26 << 32);
  WebCore::ImageTransferSessionVT::createVideoFrame((WebCore::IntSize *)v59, v25, (CGImage *)cf, (const WTF::MediaTime *)v57, *((_WORD *)this + 1132), 0, &v56);
  if (v56)
  {
    *((_QWORD *)this + 314) = 0;
    WTF::MonotonicTime::now(v30);
    v33 = v32;
    v34 = *((_QWORD *)this + 313);
    v35 = *((_QWORD *)this + 38);
    if (__ldaxr((unsigned __int8 *)v35))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v35))
    {
      goto LABEL_58;
    }
    MEMORY[0x19AEA534C](v35);
LABEL_58:
    ++*(_QWORD *)(v35 + 8);
    v42 = __ldxr((unsigned __int8 *)v35);
    if (v42 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v35))
      {
LABEL_63:
        v43 = v56;
        v56 = 0;
        v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
        *v44 = &off_1E3359690;
        v44[1] = this;
        v44[2] = this;
        v44[3] = v43;
        v44[4] = v33;
        v59[0] = v44;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v34 + 32))(v34, v59);
        v45 = v59[0];
        v59[0] = 0;
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        goto LABEL_65;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v35);
    goto LABEL_63;
  }
  v37 = *((_QWORD *)this + 314) + 1;
  *((_QWORD *)this + 314) = v37;
  if (v37 >= 0x97)
  {
    v38 = *((_QWORD *)this + 5);
    if (v38)
    {
      v39 = (*(uint64_t (**)(WebCore::MockRealtimeVideoSourceMac *))(*(_QWORD *)this + 24))(this);
      v40 = *((_QWORD *)this + 6);
      v59[0] = v39;
      v59[1] = v41;
      v59[2] = "captureFailed";
      v59[3] = v40;
      if (*(_BYTE *)(v38 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 1, (WTF::Logger::LogSiteIdentifier *)v59);
    }
    *((_BYTE *)this + 293) = 1;
    WebCore::RealtimeMediaSource::end((uint64_t)this, 0);
  }
LABEL_65:
  v46 = cf;
  cf = 0;
  if (v46)
    CFRelease(v46);
  v47 = v3[1];
  if (__ldaxr((unsigned __int8 *)v47))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v47))
  {
    goto LABEL_71;
  }
  MEMORY[0x19AEA534C](v47);
LABEL_71:
  v49 = *((_QWORD *)v47 + 1);
  v50 = v49 - 1;
  *((_QWORD *)v47 + 1) = v49 - 1;
  if (v49 == 1)
  {
    v54 = *((_QWORD *)v47 + 2);
    v51 = *((_QWORD *)v47 + 3);
    *((_QWORD *)v47 + 3) = 0;
    v52 = v54 != 0;
  }
  else
  {
    v51 = 0;
    v52 = 1;
  }
  v53 = __ldxr((unsigned __int8 *)v47);
  if (v53 != 1)
  {
    __clrex();
LABEL_78:
    WTF::Lock::unlockSlow((WTF::Lock *)v47);
    if (v50)
      return;
    goto LABEL_79;
  }
  if (__stlxr(0, (unsigned __int8 *)v47))
    goto LABEL_78;
  if (v50)
    return;
LABEL_79:
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  if (!v52)
    WTF::fastFree((WTF *)v47, v31);
}

void sub_195395C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;

  MEMORY[0x19AEA7644](v14, 0x10C0C404B4E061BLL);
  v17 = *(_QWORD *)(v13 + 8);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
LABEL_6:
    v19 = *(_QWORD *)(v17 + 8);
    v20 = v19 - 1;
    *(_QWORD *)(v17 + 8) = v19 - 1;
    if (v19 == 1)
    {
      v24 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;
      v22 = v24 != 0;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    v23 = __ldxr((unsigned __int8 *)v17);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
LABEL_13:
        if (!v20)
        {
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          if (!v22)
            WTF::fastFree((WTF *)v17, v16);
        }
        _Unwind_Resume(a1);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v17);
  goto LABEL_6;
}

uint64_t WebCore::RealtimeIncomingVideoSourceCocoa::OnFrame(uint64_t this, const webrtc::VideoFrame *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  WTF::String *v7;
  __int16 v8;
  unsigned int v9;
  unsigned int v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  NSObject *v28;
  uint64_t v29;
  char *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  WTF::String *v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  const void *v69;
  const void *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const webrtc::VideoFrame *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  const webrtc::VideoFrame *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  int v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  int v93;
  int v94;
  int v95;
  __int16 v96;
  uint64_t v97;
  _BYTE v98[56];
  CFTypeRef cf[4];
  WTF::Logger *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  __int128 buf;
  int v120;
  WTF::StringImpl *v121;
  int v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  int v126;
  WTF::StringImpl *v127;
  int v128;
  WTF::StringImpl *v129;
  int v130;
  WTF::StringImpl *v131;
  int v132;
  WTF::StringImpl *v133;
  int v134;
  WTF::StringImpl *v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 292))
  {
    v3 = this;
    v4 = webrtc::VideoFrame::width(a2);
    v5 = webrtc::VideoFrame::height(a2);
    v7 = (WTF::String *)*((unsigned int *)a2 + 18);
    if ((_DWORD)v7 == 180)
      v8 = 180;
    else
      v8 = 0;
    if ((_DWORD)v7 == 270)
      v9 = v4;
    else
      v9 = v5;
    if ((_DWORD)v7 == 270)
      v10 = v5;
    else
      v10 = v4;
    if ((_DWORD)v7 == 270)
      v11 = 270;
    else
      v11 = v8;
    if ((_DWORD)v7 == 90)
      v12 = v4;
    else
      v12 = v9;
    if ((_DWORD)v7 == 90)
      v13 = v5;
    else
      v13 = v10;
    if ((_DWORD)v7 == 90)
      v14 = 90;
    else
      v14 = v11;
    v15 = *(_QWORD *)(v3 + 40);
    if (v15)
    {
      v16 = *(_QWORD *)(v3 + 504) + 1;
      *(_QWORD *)(v3 + 504) = v16;
      if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * v16, 2) <= 0x444444444444444uLL)
      {
        v17 = *(const void **)(v3 + 48);
        cf[0] = "RealtimeIncomingVideoSource";
        cf[1] = (CFTypeRef)28;
        cf[2] = "OnFrame";
        cf[3] = v17;
        if (*(_BYTE *)(v15 + 12))
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)cf);
          WTF::String::String((WTF::String *)&v109, "frame ");
          WTF::String::number(*(WTF::String **)(v3 + 504));
          WTF::String::String((WTF::String *)&v107, ", rotation ");
          WTF::String::number(v7);
          WTF::String::String((WTF::String *)&v105, " size ");
          WTF::String::number((WTF::String *)v13);
          WTF::String::String((WTF::String *)&v103, "x");
          WTF::String::number((WTF::String *)v12);
          *(_QWORD *)&buf = v110;
          v100 = v109;
          v117 = v107;
          v118 = v108;
          v115 = v105;
          v116 = v106;
          v113 = v103;
          v114 = v104;
          v112 = v102;
          this = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v100, (uint64_t *)&v118, (uint64_t *)&v117, (uint64_t *)&v116, (uint64_t *)&v115, (uint64_t *)&v114, (uint64_t *)&v113, &v111, (uint64_t *)&v112);
          if (!v111)
          {
            __break(0xC471u);
            return this;
          }
          v19 = v102;
          v102 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v18);
            else
              *(_DWORD *)v19 -= 2;
          }
          v20 = v103;
          v103 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v18);
            else
              *(_DWORD *)v20 -= 2;
          }
          v21 = v104;
          v104 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v18);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = v105;
          v105 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v18);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = v106;
          v106 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v18);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = v107;
          v107 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v18);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = v108;
          v108 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v18);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = v109;
          v109 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v18);
            else
              *(_DWORD *)v26 -= 2;
          }
          v96 = v14;
          v27 = v110;
          v110 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v18);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = qword_1ECE7CD60;
          v29 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v29)
          {
            WTF::String::utf8();
            v30 = v100 ? (char *)v100 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v30;
            _os_log_impl(&dword_1940B8000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v29 = (uint64_t)v100;
            v100 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 1)
                v29 = WTF::fastFree((WTF *)v29, v6);
              else
                --*(_DWORD *)v29;
            }
          }
          if (WebCore::LogWebRTC)
          {
            v31 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v32 = *v31;
              if ((v32 & 1) != 0)
                break;
              v33 = __ldaxr(v31);
              if (v33 == v32)
              {
                if (!__stxr(v32 | 1, v31))
                {
                  v34 = WTF::Logger::observers((WTF::Logger *)v29);
                  v35 = *(unsigned int *)(v34 + 12);
                  if ((_DWORD)v35)
                  {
                    v36 = *(uint64_t **)v34;
                    v97 = *(_QWORD *)v34 + 8 * v35;
                    do
                    {
                      v37 = *v36;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)cf);
                      v120 = 0;
                      WTF::String::String((WTF::String *)&v121, "frame ");
                      v38 = *(WTF::String **)(v3 + 504);
                      v122 = 0;
                      WTF::String::number(v38);
                      v124 = 0;
                      WTF::String::String((WTF::String *)&v125, ", rotation ");
                      v126 = 0;
                      WTF::String::number(v7);
                      v128 = 0;
                      WTF::String::String((WTF::String *)&v129, " size ");
                      v130 = 0;
                      WTF::String::number((WTF::String *)v13);
                      v132 = 0;
                      WTF::String::String((WTF::String *)&v133, "x");
                      v134 = 0;
                      WTF::String::number((WTF::String *)v12);
                      v100 = 0;
                      v101 = 0;
                      v39 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x90);
                      LODWORD(v101) = 9;
                      v100 = v39;
                      v40 = HIDWORD(v101);
                      *((_DWORD *)v39 + 4 * HIDWORD(v101)) = buf;
                      v41 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v39 + 2 * v40 + 1) = v41;
                      *((_DWORD *)v39 + 4 * (v40 + 1)) = v120;
                      v42 = v121;
                      if (v121)
                        *(_DWORD *)v121 += 2;
                      *((_QWORD *)v39 + 2 * (v40 + 1) + 1) = v42;
                      *((_DWORD *)v39 + 4 * (v40 + 2)) = v122;
                      v43 = v123;
                      if (v123)
                        *(_DWORD *)v123 += 2;
                      *((_QWORD *)v39 + 2 * (v40 + 2) + 1) = v43;
                      *((_DWORD *)v39 + 4 * (v40 + 3)) = v124;
                      v44 = v125;
                      if (v125)
                        *(_DWORD *)v125 += 2;
                      *((_QWORD *)v39 + 2 * (v40 + 3) + 1) = v44;
                      *((_DWORD *)v39 + 4 * (v40 + 4)) = v126;
                      v45 = v127;
                      if (v127)
                        *(_DWORD *)v127 += 2;
                      *((_QWORD *)v39 + 2 * (v40 + 4) + 1) = v45;
                      *((_DWORD *)v39 + 4 * (v40 + 5)) = v128;
                      v46 = v129;
                      if (v129)
                        *(_DWORD *)v129 += 2;
                      *((_QWORD *)v39 + 2 * (v40 + 5) + 1) = v46;
                      *((_DWORD *)v39 + 4 * (v40 + 6)) = v130;
                      v47 = v131;
                      if (v131)
                        *(_DWORD *)v131 += 2;
                      *((_QWORD *)v39 + 2 * (v40 + 6) + 1) = v47;
                      *((_DWORD *)v39 + 4 * (v40 + 7)) = v132;
                      v48 = v133;
                      if (v133)
                        *(_DWORD *)v133 += 2;
                      *((_QWORD *)v39 + 2 * (v40 + 7) + 1) = v48;
                      *((_DWORD *)v39 + 4 * (v40 + 8)) = v134;
                      v49 = v135;
                      if (v135)
                        *(_DWORD *)v135 += 2;
                      *((_QWORD *)v39 + 2 * (v40 + 8) + 1) = v49;
                      HIDWORD(v101) = v40 + 9;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v37 + 16))(v37, &WebCore::LogWebRTC, 0, &v100);
                      v50 = v100;
                      if (HIDWORD(v101))
                      {
                        v51 = 16 * HIDWORD(v101);
                        v52 = (WTF::StringImpl **)((char *)v100 + 8);
                        do
                        {
                          v53 = *v52;
                          *v52 = 0;
                          if (v53)
                          {
                            if (*(_DWORD *)v53 == 2)
                              WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v6);
                            else
                              *(_DWORD *)v53 -= 2;
                          }
                          v52 += 2;
                          v51 -= 16;
                        }
                        while (v51);
                        v50 = v100;
                      }
                      if (v50)
                      {
                        v100 = 0;
                        LODWORD(v101) = 0;
                        WTF::fastFree(v50, v6);
                      }
                      v54 = v135;
                      v135 = 0;
                      if (v54)
                      {
                        if (*(_DWORD *)v54 == 2)
                          WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v6);
                        else
                          *(_DWORD *)v54 -= 2;
                      }
                      v55 = v133;
                      v133 = 0;
                      if (v55)
                      {
                        if (*(_DWORD *)v55 == 2)
                          WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v6);
                        else
                          *(_DWORD *)v55 -= 2;
                      }
                      v56 = v131;
                      v131 = 0;
                      if (v56)
                      {
                        if (*(_DWORD *)v56 == 2)
                          WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v6);
                        else
                          *(_DWORD *)v56 -= 2;
                      }
                      v57 = v129;
                      v129 = 0;
                      if (v57)
                      {
                        if (*(_DWORD *)v57 == 2)
                          WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v6);
                        else
                          *(_DWORD *)v57 -= 2;
                      }
                      v58 = v127;
                      v127 = 0;
                      if (v58)
                      {
                        if (*(_DWORD *)v58 == 2)
                          WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v6);
                        else
                          *(_DWORD *)v58 -= 2;
                      }
                      v59 = v125;
                      v125 = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2)
                          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v6);
                        else
                          *(_DWORD *)v59 -= 2;
                      }
                      v60 = v123;
                      v123 = 0;
                      if (v60)
                      {
                        if (*(_DWORD *)v60 == 2)
                          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v6);
                        else
                          *(_DWORD *)v60 -= 2;
                      }
                      v61 = v121;
                      v121 = 0;
                      if (v61)
                      {
                        if (*(_DWORD *)v61 == 2)
                          WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v6);
                        else
                          *(_DWORD *)v61 -= 2;
                      }
                      v62 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v62)
                      {
                        if (*(_DWORD *)v62 == 2)
                          WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v6);
                        else
                          *(_DWORD *)v62 -= 2;
                      }
                      ++v36;
                    }
                    while (v36 != (uint64_t *)v97);
                  }
                  v63 = __ldxr(v31);
                  if (v63 == 1)
                  {
                    if (!__stlxr(0, v31))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v64 = v111;
          v111 = 0;
          v14 = v96;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
              WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v64 -= 2;
          }
        }
      }
    }
    if (*(_BYTE *)(v3 + 289))
    {
      if (!*(_QWORD *)(v3 + 488)
        || (v65 = *(_DWORD *)(v3 + 496), v65 != webrtc::VideoFrame::width(a2))
        || (v66 = *(_DWORD *)(v3 + 500), v66 != webrtc::VideoFrame::height(a2)))
      {
        *(_DWORD *)(v3 + 496) = webrtc::VideoFrame::width(a2);
        v67 = webrtc::VideoFrame::height(a2);
        *(_DWORD *)(v3 + 500) = v67;
        WebCore::createBlackPixelBuffer((WebCore *)*(int *)(v3 + 496), v67, 0, (WebCore **)&buf);
        v68 = buf;
        *(_QWORD *)&buf = 0;
        v69 = *(const void **)(v3 + 488);
        *(_QWORD *)(v3 + 488) = v68;
        if (v69)
        {
          CFRelease(v69);
          v70 = (const void *)buf;
          *(_QWORD *)&buf = 0;
          if (v70)
            CFRelease(v70);
        }
      }
      v71 = *(const void **)(v3 + 488);
      cf[0] = v71;
      if (v71)
        CFRetain(v71);
      goto LABEL_153;
    }
    v74 = webrtc::videoFrameBufferProvider(a2, (const webrtc::VideoFrame *)v6);
    v73 = v74;
    if (v74)
    {
      *(_QWORD *)(v74 + 16) = *((_QWORD *)a2 + 4);
      *(_BYTE *)(v74 + 28) = 1;
      *(_DWORD *)(v74 + 24) = 1000000;
      *(_BYTE *)(v74 + 32) = 0;
      *(_WORD *)(v74 + 34) = v14;
      v76 = (unsigned int *)(v74 + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 + 1, v76));
LABEL_158:
      WebCore::RealtimeIncomingVideoSource::notifyNewFrame((WebCore::RealtimeIncomingVideoSource *)v3);
      *(_QWORD *)&buf = __PAIR64__(v12, v13);
      WebCore::RealtimeMediaSource::setIntrinsicSize((_DWORD *)v3, (const WebCore::IntSize *)&buf, 1);
      WebCore::RealtimeIncomingVideoSource::metadataFromVideoFrame(a2, (uint64_t)v98);
      this = WebCore::RealtimeMediaSource::videoFrameAvailable(v3, (WebCore::VideoFrame *)v73, (uint64_t)v98);
      v78 = (unsigned int *)(v73 + 8);
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        atomic_store(1u, (unsigned int *)(v73 + 8));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      }
      return this;
    }
    cf[0] = (CFTypeRef)webrtc::copyPixelBufferForFrame(a2, v75);
    if (cf[0])
    {
LABEL_153:
      v72 = *((_QWORD *)a2 + 4);
      LOBYTE(buf) = 0;
      BYTE8(buf) = 0;
      v73 = WTF::fastMalloc((WTF *)0x38);
      WebCore::VideoFrameCV::VideoFrameCV(v73, v72, 0x1000F4240, 0, v14, (WebCore **)cf, (uint64_t)&buf);
      if (cf[0])
        CFRelease(cf[0]);
      goto LABEL_158;
    }
    v82 = *((_QWORD *)a2 + 4);
    v83 = WebCore::VideoFrameLibWebRTC::colorSpaceFromFrame(a2, v81);
    v85 = v84;
    webrtc::VideoFrame::video_frame_buffer(a2);
    v86 = *(_QWORD *)(v3 + 320);
    if (__ldaxr((unsigned __int8 *)v86))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v86))
    {
      goto LABEL_168;
    }
    MEMORY[0x19AEA534C](v86);
LABEL_168:
    ++*(_QWORD *)(v86 + 8);
    v88 = __ldxr((unsigned __int8 *)v86);
    if (v88 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v86))
      {
LABEL_173:
        v89 = operator new(0x18uLL);
        *v89 = &off_1E33596B8;
        v89[1] = v3;
        v89[2] = v3;
        if (v85)
          v90 = v83;
        else
          v90 = 0x100010101000100;
        v73 = WTF::fastMalloc((WTF *)0x78);
        *(_DWORD *)(v73 + 8) = 1;
        *(_QWORD *)(v73 + 16) = v82;
        *(_QWORD *)(v73 + 24) = 0x1000F4240;
        *(_BYTE *)(v73 + 32) = 0;
        *(_WORD *)(v73 + 34) = v14;
        *(_QWORD *)(v73 + 36) = v90;
        *(_QWORD *)v73 = off_1E341A6A0;
        v91 = buf;
        *(_QWORD *)&buf = 0;
        *(_QWORD *)(v73 + 48) = v91;
        v92 = (float)(*(int (**)(uint64_t))(*(_QWORD *)v91 + 40))(v91);
        v93 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v73 + 48) + 48))(*(_QWORD *)(v73 + 48));
        *(float *)(v73 + 56) = v92;
        *(float *)(v73 + 60) = (float)v93;
        *(_DWORD *)(v73 + 64) = 0;
        *(_QWORD *)(v73 + 96) = v89;
        *(_QWORD *)(v73 + 104) = 0;
        *(_BYTE *)(v73 + 112) = 0;
        v94 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v73 + 48) + 32))(*(_QWORD *)(v73 + 48));
        if (v94 == 1)
        {
          v95 = 875704422;
        }
        else
        {
          if (v94 != 5)
            goto LABEL_181;
          v95 = 2019963440;
        }
        *(_DWORD *)(v73 + 64) = v95;
LABEL_181:
        if ((_QWORD)buf)
          (*(void (**)(_QWORD))(*(_QWORD *)buf + 8))(buf);
        goto LABEL_158;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v86);
    goto LABEL_173;
  }
  return this;
}

void sub_195396B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf,uint64_t a35,uint64_t a36,uint64_t a37,WTF *a38,int a39,int a40,WTF::StringImpl *a41,WTF::StringImpl *a42,WTF::StringImpl *a43,WTF::StringImpl *a44,WTF::StringImpl *a45,WTF::StringImpl *a46,WTF::StringImpl *a47,WTF::StringImpl *a48,uint64_t a49,WTF::StringImpl *a50)
{
  uint64_t v50;
  uint64_t v52;

  v52 = *(_QWORD *)(v50 - 256);
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  _Unwind_Resume(exception_object);
}

void sub_195396FD0()
{
  unsigned int *v0;
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = v0 + 2;
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, v0 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v0 + 8))(v0);
  }
  JUMPOUT(0x195396FC0);
}

void sub_19539700C()
{
  JUMPOUT(0x195396FC0);
}

const char *WebCore::RealtimeIncomingVideoSource::logClassName(WebCore::RealtimeIncomingVideoSource *this)
{
  return "RealtimeIncomingVideoSource";
}

uint64_t `non-virtual thunk to'WebCore::RealtimeIncomingVideoSourceCocoa::OnFrame(WebCore::RealtimeIncomingVideoSourceCocoa *this, const webrtc::VideoFrame *a2)
{
  return WebCore::RealtimeIncomingVideoSourceCocoa::OnFrame((uint64_t)this - 304, a2);
}

uint64_t WebCore::AudioCaptureFactory::computeSpeakerDevices(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_195397068(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::CoreAudioCaptureSourceFactory::beginAudioSessionInterruption(WebCore::CoreAudioCaptureSourceFactory *this)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1 = off_1E341B980;
  v3 = (uint64_t)v1;
  WTF::ensureOnMainThread();
  result = v3;
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

uint64_t WebCore::CoreAudioCaptureSourceFactory::endAudioSessionInterruption()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E341B9A8;
  v2 = v0;
  WTF::ensureOnMainThread();
  result = (uint64_t)v2;
  if (v2)
    return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::CoreAudioCaptureSourceFactory::beginAudioSessionInterruption(WebCore::CoreAudioCaptureSourceFactory *this)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1 = off_1E341B980;
  v3 = (uint64_t)v1;
  WTF::ensureOnMainThread();
  result = v3;
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::CoreAudioCaptureSourceFactory::endAudioSessionInterruption()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E341B9A8;
  v2 = v0;
  WTF::ensureOnMainThread();
  result = (uint64_t)v2;
  if (v2)
    return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
  return result;
}

double WebCore::MockAudioSharedInternalUnit::verifyCaptureInterval(WebCore::MockAudioSharedInternalUnit *this)
{
  return 1.0;
}

void WebCore::MockRealtimeVideoSourceMac::~MockRealtimeVideoSourceMac(WebCore::MockRealtimeVideoSourceMac *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::MockRealtimeVideoSourceMac::~MockRealtimeVideoSourceMac(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v3 = *((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = *((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v4)
  {
    v5 = *(const void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0;
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = 0;
    if (v6)
      CFRelease(v6);
    v7 = *(const void **)v4;
    *(_QWORD *)v4 = 0;
    if (v7)
      CFRelease(v7);
    MEMORY[0x19AEA7644](v4, 0x10C0C404B4E061BLL);
  }
  WebCore::MockRealtimeVideoSource::~MockRealtimeVideoSource(this, a2);
}

const char *WebCore::RealtimeVideoCaptureSource::logClassName(WebCore::RealtimeVideoCaptureSource *this)
{
  return "RealtimeVideoCaptureSource";
}

uint64_t WebCore::RealtimeMediaSource::interrupted(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::MockRealtimeVideoSource::isMockSource(WebCore::MockRealtimeVideoSource *this)
{
  return 1;
}

uint64_t WebCore::MockRealtimeVideoSource::isCaptureSource(WebCore::MockRealtimeVideoSource *this)
{
  return 1;
}

uint64_t WebCore::MockRealtimeVideoSource::deviceType(WebCore::MockRealtimeVideoSource *this)
{
  if (*((_DWORD *)this + 548) == 2)
    return 3;
  else
    return 4;
}

double WebCore::RealtimeMediaSource::facingModeFitnessScoreAdjustment(WebCore::RealtimeMediaSource *this)
{
  return 0.0;
}

uint64_t WebCore::MockRealtimeVideoSourceMac::canResizeVideoFrames(WebCore::MockRealtimeVideoSourceMac *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::MockRealtimeVideoSourceMac::~MockRealtimeVideoSourceMac(WebCore::MockRealtimeVideoSourceMac *this, void *a2)
{
  WebCore::MockRealtimeVideoSourceMac::~MockRealtimeVideoSourceMac((WebCore::MockRealtimeVideoSourceMac *)((char *)this - 440), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::MockRealtimeVideoSourceMac::~MockRealtimeVideoSourceMac((WebCore::MockRealtimeVideoSourceMac *)((char *)this - 440), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::RealtimeIncomingVideoSourceCocoa::~RealtimeIncomingVideoSourceCocoa(WebCore::RealtimeIncomingVideoSourceCocoa *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RealtimeIncomingVideoSource::~RealtimeIncomingVideoSource(this);
}

{
  const void *v2;
  const void *v3;
  WTF *v4;
  void *v5;

  v2 = (const void *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RealtimeIncomingVideoSource::~RealtimeIncomingVideoSource(this);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::RealtimeIncomingVideoSource::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 320);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebCore::RealtimeIncomingVideoSource::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingVideoSource,(WTF::DestructionThread)2>(this[40]);
}

uint64_t WebCore::RealtimeIncomingVideoSource::controlBlock(WebCore::RealtimeIncomingVideoSource *this)
{
  return *((_QWORD *)this + 40);
}

uint64_t WebCore::RealtimeMediaSource::isCaptureSource(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::deviceType(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeIncomingVideoSource::isIncomingVideoSource(WebCore::RealtimeIncomingVideoSource *this)
{
  return 1;
}

uint64_t WebCore::RealtimeMediaSource::isPowerEfficient(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

double WebCore::RealtimeMediaSource::observedFrameRate(WebCore::RealtimeMediaSource *this)
{
  return 0.0;
}

void `non-virtual thunk to'WebCore::RealtimeIncomingVideoSourceCocoa::~RealtimeIncomingVideoSourceCocoa(WebCore::RealtimeIncomingVideoSourceCocoa *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RealtimeIncomingVideoSource::~RealtimeIncomingVideoSource((WebCore::RealtimeIncomingVideoSourceCocoa *)((char *)this - 304));
}

{
  const void *v2;
  const void *v3;
  WTF *v4;
  void *v5;

  v2 = (const void *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RealtimeIncomingVideoSource::~RealtimeIncomingVideoSource((WebCore::RealtimeIncomingVideoSourceCocoa *)((char *)this - 304));
  WTF::fastFree(v4, v5);
}

{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RealtimeIncomingVideoSource::~RealtimeIncomingVideoSource((WebCore::RealtimeIncomingVideoSourceCocoa *)((char *)this - 312));
}

{
  const void *v2;
  const void *v3;
  WTF *v4;
  void *v5;

  v2 = (const void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RealtimeIncomingVideoSource::~RealtimeIncomingVideoSource((WebCore::RealtimeIncomingVideoSourceCocoa *)((char *)this - 312));
  WTF::fastFree(v4, v5);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *result;
  uint64_t v7;
  char *v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(WTF **)(a2 + 40);
  if (v3)
  {
    *(_QWORD *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 48) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  v4 = *(_QWORD *)(a2 + 32);
  if ((v4 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, (void *)a2);
    }
  }
  v5 = *(unsigned int *)(a2 + 28);
  result = *(WTF **)(a2 + 16);
  if ((_DWORD)v5)
  {
    v7 = 48 * v5;
    v8 = (char *)result + 8;
    do
    {
      v9 = *(WTF **)v8;
      if (*(_QWORD *)v8)
      {
        *(_QWORD *)v8 = 0;
        *((_DWORD *)v8 + 2) = 0;
        WTF::fastFree(v9, (void *)a2);
      }
      v8 += 48;
      v7 -= 48;
    }
    while (v7);
    result = *(WTF **)(a2 + 16);
  }
  if (result)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[1];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

uint64_t *std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100](uint64_t *result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  *result = (uint64_t)a2;
  if (v2)
  {
    v3 = *(WTF **)(v2 + 56);
    if (v3)
    {
      *(_QWORD *)(v2 + 56) = 0;
      *(_DWORD *)(v2 + 64) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(const void **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v4)
      CFRelease(v4);
    v5 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v5)
      MEMORY[0x19AEA7644](v5, 0x1080C404ACF7207);
    v6 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (v6)
      MEMORY[0x19AEA7644](v6, 0x1080C404ACF7207);
    return (uint64_t *)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingVideoSource,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v5 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E3359748;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = v6;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

void sub_1953977C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingVideoSource,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AVCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E33594B0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33594B0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(*(_QWORD *)(a1 + 8) + 48) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_195397908(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AVCaptureDeviceManager::refreshCaptureDevicesInternal(WTF::CompletionHandler<void ()(void)> &&,WebCore::AVCaptureDeviceManager::ShouldSetUserPreferredCamera)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E33594D8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVCaptureDeviceManager::refreshCaptureDevicesInternal(WTF::CompletionHandler<void ()(void)> &&,WebCore::AVCaptureDeviceManager::ShouldSetUserPreferredCamera)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33594D8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::AVCaptureDeviceManager::refreshCaptureDevicesInternal(WTF::CompletionHandler<void ()(void)> &&,WebCore::AVCaptureDeviceManager::ShouldSetUserPreferredCamera)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  PAL *v10;
  uint64_t v11;
  PAL *v12;
  id v13;
  const void *v14;
  void *v15;
  void *v16;
  PAL *v17;
  PAL *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  PAL *v36;
  void *v37;
  void *v38;
  void *v39;
  AVCaptureDevice *v40;
  void *v41;
  char *v42;
  WTF::StringImpl *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  PAL *v48;
  PAL *v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  PAL *v56;
  PAL *v57;
  uint64_t v58;
  PAL *v59;
  AVCaptureDevice *v60;
  _BOOL8 v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  char *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t *v70;
  _BYTE *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  _BYTE *v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  _BYTE *v81;
  WTF::StringImpl *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  int v90;
  int v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  unsigned int v97;
  _QWORD *v98;
  _BYTE *v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  _QWORD *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  unint64_t v111;
  _QWORD *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  WTF::StringImpl *v125;
  char v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  uint64_t v137;

  v1 = a1;
  v137 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 24))
  {
    PAL::getAVCaptureDeviceClass[0]((PAL *)a1);
    a1 = objc_opt_respondsToSelector();
    if ((a1 & 1) != 0)
    {
      v3 = (void *)PAL::getAVCaptureDeviceDiscoverySessionClass[0]((PAL *)a1);
      v4 = (void *)objc_msgSend((id)objc_msgSend(v3, "discoverySessionWithDeviceTypes:mediaType:position:", *(_QWORD *)(v2 + 40), PAL::get_AVFoundation_AVMediaTypeVideo((PAL *)v3), 0), "devices");
      v5 = v4;
      if (v4)
        CFRetain(v4);
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      a1 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v130, &v134, 16);
      v6 = a1;
      if (a1)
      {
        v7 = *(_QWORD *)v131;
        while (2)
        {
          v8 = 0;
          do
          {
            if (*(_QWORD *)v131 != v7)
              objc_enumerationMutation(v5);
            v9 = *(void **)(*((_QWORD *)&v130 + 1) + 8 * v8);
            v10 = (PAL *)objc_msgSend(v9, "hasMediaType:", PAL::get_AVFoundation_AVMediaTypeVideo((PAL *)a1));
            if ((v10 & 1) != 0
              || (a1 = objc_msgSend(v9, "hasMediaType:", PAL::get_AVFoundation_AVMediaTypeMuxed(v10)), (_DWORD)a1))
            {
              a1 = objc_msgSend(v9, "position");
              if (a1 == 2)
              {
                a1 = objc_msgSend((id)PAL::getAVCaptureDeviceClass[0]((PAL *)2), "setUserPreferredCamera:", v9);
                goto LABEL_17;
              }
            }
            ++v8;
          }
          while (v6 != v8);
          a1 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v130, &v134, 16);
          v6 = a1;
          if (a1)
            continue;
          break;
        }
      }
LABEL_17:
      if (v5)
        CFRelease(v5);
    }
  }
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v11 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  v108 = v2;
  v109 = v11;
  v12 = (PAL *)PAL::AVFoundationLibrary((PAL *)1);
  if (v12)
  {
    if (!*(_QWORD *)(v2 + 32))
    {
      v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v14 = *(const void **)(v2 + 32);
      *(_QWORD *)(v2 + 32) = v13;
      if (v14)
        CFRelease(v14);
      v15 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      objc_msgSend(v15, "addObserver:selector:name:object:", *(_QWORD *)(v2 + 8), sel_deviceConnectedDidChange_, PAL::get_AVFoundation_AVCaptureDeviceWasConnectedNotification((PAL *)v15), 0);
      v16 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v17 = (PAL *)objc_msgSend(v16, "addObserver:selector:name:object:", *(_QWORD *)(v2 + 8), sel_deviceConnectedDidChange_, PAL::get_AVFoundation_AVCaptureDeviceWasDisconnectedNotification((PAL *)v16), 0);
      v18 = (PAL *)objc_msgSend((id)PAL::getAVCaptureDeviceClass[0](v17), "addObserver:forKeyPath:options:context:", *(_QWORD *)(v2 + 8), CFSTR("systemPreferredCamera"), 3, 0);
      v12 = (PAL *)objc_msgSend((id)PAL::getAVCaptureDeviceDiscoverySessionClass[0](v18), "addObserver:forKeyPath:options:context:", *(_QWORD *)(v2 + 8), CFSTR("devices"), 3, 0);
    }
    v19 = (void *)PAL::getAVCaptureDeviceDiscoverySessionClass[0](v12);
    v20 = (void *)objc_msgSend((id)objc_msgSend(v19, "discoverySessionWithDeviceTypes:mediaType:position:", *(_QWORD *)(v2 + 40), PAL::get_AVFoundation_AVMediaTypeVideo((PAL *)v19), 0), "devices");
    v21 = v20;
    if (v20)
      CFRetain(v20);
    v22 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v23 = *(void **)(v2 + 32);
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v121, &v134, 16);
    if (v24)
    {
      v25 = *(_QWORD *)v122;
      do
      {
        for (i = 0; i != v24; ++i)
        {
          if (*(_QWORD *)v122 != v25)
            objc_enumerationMutation(v23);
          v27 = *(_QWORD *)(*((_QWORD *)&v121 + 1) + 8 * i);
          if ((objc_msgSend(v21, "containsObject:", v27) & 1) == 0)
            objc_msgSend(v22, "addObject:", v27);
        }
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v121, &v134, 16);
      }
      while (v24);
    }
    if (objc_msgSend(v22, "count"))
    {
      v119 = 0u;
      v120 = 0u;
      v118 = 0u;
      v117 = 0u;
      v28 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v117, &v130, 16);
      if (v28)
      {
        v29 = *(_QWORD *)v118;
        do
        {
          for (j = 0; j != v28; ++j)
          {
            if (*(_QWORD *)v118 != v29)
              objc_enumerationMutation(v22);
            objc_msgSend(*(id *)(*((_QWORD *)&v117 + 1) + 8 * j), "removeObserver:forKeyPath:", *(_QWORD *)(v2 + 8), CFSTR("suspended"));
          }
          v28 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v117, &v130, 16);
        }
        while (v28);
      }
      objc_msgSend(*(id *)(v2 + 32), "removeObjectsInArray:", v22);
    }
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v31 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v113, &v125, 16);
    v32 = v31;
    if (v31)
    {
      v33 = *(_QWORD *)v114;
      do
      {
        v34 = 0;
        do
        {
          if (*(_QWORD *)v114 != v33)
            objc_enumerationMutation(v21);
          v35 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * v34);
          v36 = (PAL *)objc_msgSend(v35, "hasMediaType:", PAL::get_AVFoundation_AVMediaTypeVideo((PAL *)v31));
          if ((v36 & 1) != 0
            || (v31 = objc_msgSend(v35, "hasMediaType:", PAL::get_AVFoundation_AVMediaTypeMuxed(v36)), (v31 & 1) != 0))
          {
            v31 = objc_msgSend(*(id *)(v2 + 32), "containsObject:", v35);
            if ((v31 & 1) == 0)
            {
              objc_msgSend(v35, "addObserver:forKeyPath:options:context:", *(_QWORD *)(v2 + 8), CFSTR("suspended"), 1, 0);
              v31 = objc_msgSend(*(id *)(v2 + 32), "addObject:", v35);
            }
          }
          ++v34;
        }
        while (v32 != v34);
        v31 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v113, &v125, 16);
        v32 = v31;
      }
      while (v31);
    }
    if (v22)
      CFRelease(v22);
    if (v21)
      CFRelease(v21);
    v106 = 0;
    v107 = 0;
    v37 = (void *)PAL::getAVCaptureDeviceDiscoverySessionClass[0]((PAL *)v31);
    v38 = (void *)objc_msgSend((id)objc_msgSend(v37, "discoverySessionWithDeviceTypes:mediaType:position:", *(_QWORD *)(v2 + 40), PAL::get_AVFoundation_AVMediaTypeVideo((PAL *)v37), 0), "devices");
    v39 = v38;
    if (v38)
      v38 = (void *)CFRetain(v38);
    PAL::getAVCaptureDeviceClass[0]((PAL *)v38);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v40 = (AVCaptureDevice *)objc_msgSend((id)((uint64_t (*)(void))PAL::getAVCaptureDeviceClass[0])(), "systemPreferredCamera");
      if (v40)
        goto LABEL_68;
    }
    else
    {
      v41 = (void *)((uint64_t (*)(void))PAL::getAVCaptureDeviceClass[0])();
      v40 = (AVCaptureDevice *)objc_msgSend(v41, "defaultDeviceWithMediaType:", PAL::get_AVFoundation_AVMediaTypeVideo((PAL *)v41));
    }
    if (-[AVCaptureDevice position](v40, "position") != AVCaptureDevicePositionFront)
    {
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v48 = (PAL *)objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v130, &v134, 16);
      v49 = v48;
      if (!v48)
      {
LABEL_79:
        v40 = 0;
        goto LABEL_89;
      }
      v50 = *(_QWORD *)v131;
LABEL_71:
      v51 = 0;
      while (1)
      {
        if (*(_QWORD *)v131 != v50)
          objc_enumerationMutation(v39);
        v40 = *(AVCaptureDevice **)(*((_QWORD *)&v130 + 1) + 8 * v51);
        v52 = -[AVCaptureDevice hasMediaType:](v40, "hasMediaType:", PAL::get_AVFoundation_AVMediaTypeVideo(v48));
        if (v52
          || (v48 = (PAL *)-[AVCaptureDevice hasMediaType:](v40, "hasMediaType:", PAL::get_AVFoundation_AVMediaTypeMuxed((PAL *)v52)), (_DWORD)v48))
        {
          v48 = -[AVCaptureDevice position](v40, "position");
          if (v48 == (PAL *)2)
            break;
        }
        if (v49 == (PAL *)++v51)
        {
          v48 = (PAL *)objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v130, &v134, 16);
          v49 = v48;
          if (v48)
            goto LABEL_71;
          goto LABEL_79;
        }
      }
    }
    if (v40)
    {
LABEL_68:
      WebCore::toCaptureDevice((WebCore *)&v134, v40, 1);
      v42 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v106, HIDWORD(v107) + 1, (unint64_t)&v134);
      v44 = &v106[40 * HIDWORD(v107)];
      v45 = *(_QWORD *)v42;
      *(_QWORD *)v42 = 0;
      *(_QWORD *)v44 = v45;
      v44[8] = v42[8];
      v46 = *((_QWORD *)v42 + 2);
      *((_QWORD *)v42 + 2) = 0;
      *((_QWORD *)v44 + 2) = v46;
      v47 = *((_QWORD *)v42 + 3);
      *((_QWORD *)v42 + 3) = 0;
      *((_QWORD *)v44 + 3) = v47;
      *((_DWORD *)v44 + 8) = *((_DWORD *)v42 + 8);
      ++HIDWORD(v107);
      v53 = v136;
      v136 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v43);
        else
          *(_DWORD *)v53 -= 2;
      }
      v54 = v135;
      v135 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v43);
        else
          *(_DWORD *)v54 -= 2;
      }
      v55 = v134;
      v134 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, v43);
        else
          *(_DWORD *)v55 -= 2;
      }
    }
LABEL_89:
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v56 = (PAL *)objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v130, &v134, 16);
    v57 = v56;
    if (v56)
    {
      v58 = *(_QWORD *)v131;
      do
      {
        v59 = 0;
        do
        {
          if (*(_QWORD *)v131 != v58)
            objc_enumerationMutation(v39);
          v60 = *(AVCaptureDevice **)(*((_QWORD *)&v130 + 1) + 8 * (_QWORD)v59);
          v61 = -[AVCaptureDevice hasMediaType:](v60, "hasMediaType:", PAL::get_AVFoundation_AVMediaTypeVideo(v56));
          if (v61
            || (v56 = (PAL *)-[AVCaptureDevice hasMediaType:](v60, "hasMediaType:", PAL::get_AVFoundation_AVMediaTypeMuxed((PAL *)v61)), (_DWORD)v56))
          {
            v62 = -[AVCaptureDevice uniqueID](v60, "uniqueID");
            v56 = -[AVCaptureDevice uniqueID](v40, "uniqueID");
            if ((PAL *)v62 != v56)
            {
              WebCore::toCaptureDevice((WebCore *)&v125, v60, 0);
              if (HIDWORD(v107) == (_DWORD)v107)
              {
                v64 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v106, HIDWORD(v107) + 1, (unint64_t)&v125);
                v65 = &v106[40 * HIDWORD(v107)];
                v66 = *(_QWORD *)v64;
                *(_QWORD *)v64 = 0;
                *(_QWORD *)v65 = v66;
                v65[8] = v64[8];
                v67 = *((_QWORD *)v64 + 2);
                *((_QWORD *)v64 + 2) = 0;
                *((_QWORD *)v65 + 2) = v67;
                v68 = *((_QWORD *)v64 + 3);
                *((_QWORD *)v64 + 3) = 0;
                *((_QWORD *)v65 + 3) = v68;
                v69 = v65 + 32;
                v70 = (uint64_t *)(v64 + 32);
              }
              else
              {
                v71 = &v106[40 * HIDWORD(v107)];
                v72 = v125;
                v125 = 0;
                *(_QWORD *)v71 = v72;
                v71[8] = v126;
                v73 = v127;
                v127 = 0;
                *((_QWORD *)v71 + 2) = v73;
                v74 = v128;
                v128 = 0;
                *((_QWORD *)v71 + 3) = v74;
                v69 = v71 + 32;
                v70 = &v129;
              }
              *v69 = *(_DWORD *)v70;
              ++HIDWORD(v107);
              v75 = v128;
              v128 = 0;
              if (v75)
              {
                if (*(_DWORD *)v75 == 2)
                  WTF::StringImpl::destroy(v75, v63);
                else
                  *(_DWORD *)v75 -= 2;
              }
              v76 = v127;
              v127 = 0;
              if (v76)
              {
                if (*(_DWORD *)v76 == 2)
                  WTF::StringImpl::destroy(v76, v63);
                else
                  *(_DWORD *)v76 -= 2;
              }
              v56 = v125;
              v125 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  v56 = (PAL *)WTF::StringImpl::destroy(v56, v63);
                else
                  *(_DWORD *)v56 -= 2;
              }
            }
          }
          v59 = (PAL *)((char *)v59 + 1);
        }
        while (v57 != v59);
        v56 = (PAL *)objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v130, &v134, 16);
        v57 = v56;
      }
      while (v56);
    }
    if (v39)
      CFRelease(v39);
    goto LABEL_117;
  }
  v106 = 0;
  v107 = 0;
LABEL_117:
  v77 = v106;
  v78 = HIDWORD(v107);
  if (!HIDWORD(v107))
    goto LABEL_151;
  v79 = (unint64_t)&v106[40 * HIDWORD(v107)];
  do
  {
    WTF::String::isolatedCopy();
    v80 = v77[8];
    WTF::String::isolatedCopy();
    v81 = v77 + 24;
    WTF::String::isolatedCopy();
    v83 = v77[32];
    v84 = v77[33];
    v85 = v77[34];
    v86 = v77[35];
    v87 = v134;
    if (v134)
      *(_DWORD *)v134 += 2;
    v88 = (WTF::StringImpl *)v130;
    if ((_QWORD)v130)
      *(_DWORD *)v130 += 2;
    v89 = v125;
    if (!v125)
    {
      v91 = v83 | (v84 << 8) | (v85 << 16) | (v86 << 24);
      goto LABEL_126;
    }
    v90 = *(_DWORD *)v125;
    *(_DWORD *)v125 += 2;
    v91 = v83 | (v84 << 8) | (v85 << 16) | (v86 << 24);
    v125 = 0;
    if (v90)
    {
      *(_DWORD *)v89 = v90;
LABEL_126:
      v92 = v88;
      goto LABEL_127;
    }
    WTF::StringImpl::destroy(v89, v82);
    v92 = (WTF::StringImpl *)v130;
LABEL_127:
    *(_QWORD *)&v130 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
        WTF::StringImpl::destroy(v92, v82);
      else
        *(_DWORD *)v92 -= 2;
    }
    v93 = v134;
    v134 = 0;
    if (v93)
    {
      if (*(_DWORD *)v93 == 2)
        WTF::StringImpl::destroy(v93, v82);
      else
        *(_DWORD *)v93 -= 2;
    }
    v94 = (WTF::StringImpl *)*((_QWORD *)v81 - 3);
    *((_QWORD *)v81 - 3) = v87;
    if (v94)
    {
      if (*(_DWORD *)v94 == 2)
        WTF::StringImpl::destroy(v94, v82);
      else
        *(_DWORD *)v94 -= 2;
    }
    *(v81 - 16) = v80;
    v95 = (WTF::StringImpl *)*((_QWORD *)v81 - 1);
    *((_QWORD *)v81 - 1) = v88;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
        WTF::StringImpl::destroy(v95, v82);
      else
        *(_DWORD *)v95 -= 2;
    }
    v96 = *(WTF::StringImpl **)v81;
    *(_QWORD *)v81 = v89;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
        WTF::StringImpl::destroy(v96, v82);
      else
        *(_DWORD *)v96 -= 2;
    }
    *((_DWORD *)v81 + 2) = v91;
    v77 = v81 + 16;
  }
  while ((unint64_t)(v81 + 16) < v79);
  v77 = v106;
  v78 = HIDWORD(v107);
LABEL_151:
  v110 = v77;
  v97 = v107;
  v106 = 0;
  v107 = 0;
  v111 = __PAIR64__(v78, v97);
  v98 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v98 = off_1E3359500;
  v98[1] = v108;
  v98[2] = v109;
  v99 = v110;
  v109 = 0;
  v110 = 0;
  v98[3] = v99;
  v100 = v111;
  v111 = 0;
  v112 = v98;
  v98[4] = v100;
  WTF::RunLoop::dispatch();
  v102 = v112;
  v112 = 0;
  if (v102)
    (*(void (**)(_QWORD *))(*v102 + 8))(v102);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v110, v101);
  v104 = v109;
  v109 = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  return WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v106, v103);
}

void sub_1953985DC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF::StringImpl *a43,uint64_t a44,WTF::StringImpl *a45,WTF::StringImpl *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,WTF::StringImpl *a59)
{
  const void *v59;

  if (v59)
    CFRelease(v59);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&a12, a2);
  if (a10)
    (*(void (**)(void))(*(_QWORD *)a10 + 8))();
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVCaptureDeviceManager::refreshCaptureDevicesInternal(WTF::CompletionHandler<void ()(void)> &&,WebCore::AVCaptureDeviceManager::ShouldSetUserPreferredCamera)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = off_1E3359500;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a1 + 24), a2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

{
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E3359500;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a1 + 24), a2);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVCaptureDeviceManager::refreshCaptureDevicesInternal(WTF::CompletionHandler<void ()(void)> &&,WebCore::AVCaptureDeviceManager::ShouldSetUserPreferredCamera)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v20;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned int *)(v4 + 28);
  if (v5 == *(_DWORD *)(a1 + 36))
  {
    if (!*(_DWORD *)(v4 + 28))
      goto LABEL_32;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (v7 >= v5)
        goto LABEL_35;
      v8 = WTF::equal(*(WTF **)(*(_QWORD *)(v4 + 16) + v6), *(const WTF::StringImpl **)(*(_QWORD *)(a1 + 24) + v6), a3);
      v5 = *(unsigned int *)(v4 + 28);
      if (!v8)
        break;
      if (v7 >= v5)
      {
        __break(0xC471u);
        JUMPOUT(0x195398AC4);
      }
      v9 = *(unsigned int *)(a1 + 36);
      if (v7 >= v9)
      {
LABEL_35:
        __break(0xC471u);
        JUMPOUT(0x195398ABCLL);
      }
      if ((*(_BYTE *)(*(_QWORD *)(v4 + 16) + v6 + 32) != 0) != (*(_BYTE *)(*(_QWORD *)(a1 + 24) + v6 + 32) != 0))
        break;
      ++v7;
      v6 += 40;
      if (v7 >= v9)
        goto LABEL_32;
    }
  }
  v10 = *(WTF **)(v4 + 16);
  if (v5)
  {
    v11 = 40 * v5;
    v12 = (WTF::StringImpl **)((char *)v10 + 24);
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *(v12 - 1);
      *(v12 - 1) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = *(v12 - 3);
      *(v12 - 3) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      v12 += 5;
      v11 -= 40;
    }
    while (v11);
    v10 = *(WTF **)(v4 + 16);
  }
  if (v10)
  {
    *(_QWORD *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    WTF::fastFree(v10, a2);
  }
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(v4 + 16) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(v4 + 24) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(v4 + 28) = v16;
  if (*(_BYTE *)(v4 + 48))
  {
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = off_1E3417C38;
    v20 = v17;
    WTF::ensureOnMainThread();
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  }
LABEL_32:
  v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
}

void sub_195398AD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_195398C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_195398D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockAudioSharedUnit::singleton(void)::$_0 &&>>()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  WebCore::s_shouldIncreaseBufferSize = 0;
  qword_1EE2F5278 = 0x177000000AC44;
  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E33595A0;
  v1 = qword_1EE2F5108;
  qword_1EE2F5108 = (uint64_t)v0;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33595C8;
  result = qword_1EE2F5110;
  qword_1EE2F5110 = (uint64_t)v2;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

__n128 WTF::Detail::CallableWrapper<WebCore::MockAudioSharedUnit::singleton(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::CoreAudioSharedUnit::InternalUnit>,int>,BOOL>::call@<Q0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WTF::RunLoop *v5;
  WTF::RunLoop *v6;
  _QWORD *v7;
  __n128 result;
  __int128 v9;

  v4 = WTF::fastMalloc((WTF *)0x108);
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)v4 = off_1E3358FD8;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_BYTE *)(v4 + 144) = 0;
  v5 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v5 = 1;
  *(_QWORD *)(v4 + 152) = v5;
  *(_BYTE *)(v4 + 160) = a1;
  v6 = (WTF::RunLoop *)WTF::RunLoop::current(v5);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E33595F0;
  v7[1] = v4;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v4 + 168), v6);
  *(_QWORD *)(v4 + 168) = off_1E32051C0;
  *(_QWORD *)(v4 + 192) = v7;
  *(_OWORD *)(v4 + 200) = xmmword_1968DE200;
  WTF::WorkQueue::create();
  *(_QWORD *)(v4 + 48) = 0x40E5888000000000;
  *(_OWORD *)(v4 + 56) = xmmword_19689B100;
  *(_QWORD *)(v4 + 72) = 0x200000004;
  result = *(__n128 *)(v4 + 48);
  v9 = *(_OWORD *)(v4 + 64);
  *(__n128 *)(v4 + 88) = result;
  *(_DWORD *)(v4 + 224) = 2;
  *(_DWORD *)(v4 + 80) = 32;
  *(_QWORD *)(v4 + 120) = *(_QWORD *)(v4 + 80);
  *(_OWORD *)(v4 + 104) = v9;
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

void sub_195398F78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  WTF::RunLoop::TimerBase *v3;
  uint64_t v4;
  WTF **v5;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  const void *v13;
  void *v14;

  *(_QWORD *)(v1 + 168) = v4;
  v7 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v1 + 192) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WTF::RunLoop::TimerBase::~TimerBase(v3);
  v9 = *(unsigned int **)(v1 + 152);
  *(_QWORD *)(v1 + 152) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  v12 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 128) = 0;
    *(_DWORD *)(v1 + 136) = 0;
    WTF::fastFree(v12, v8);
  }
  v13 = *(const void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v13)
    CFRelease(v13);
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100](v2, 0);
  WTF::fastFree((WTF *)v1, v14);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockAudioSharedUnit::singleton(void)::$_0::operator() const(void)::{lambda(void)#1},int>::call()
{
  return 44100;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockAudioSharedInternalUnit::MockAudioSharedInternalUnit(BOOL)::$_0,void>::call(WTF::MonotonicTime *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v1 = *((_QWORD *)a1 + 1);
  if (!*(_BYTE *)(v1 + 144))
    *(_BYTE *)(v1 + 144) = 1;
  WTF::MonotonicTime::now(a1);
  *(_QWORD *)(v1 + 200) = v2;
  *(_BYTE *)(*(_QWORD *)(v1 + 152) + 4) = 1;
  v3 = *(_QWORD *)(v1 + 216);
  v4 = *(_QWORD *)(v1 + 200);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = off_1E3359618;
  v5[1] = v1;
  v5[2] = v4;
  v7 = v5;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 32))(v3, &v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1953990F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockAudioSharedInternalUnit::start(void)::$_0,void>::call(uint64_t a1)
{
  return WebCore::MockAudioSharedInternalUnit::generateSampleBuffers(*(_QWORD *)(a1 + 8), *(double *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MockAudioSharedInternalUnit::generateSampleBuffers(WTF::MonotonicTime)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3359668;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockAudioSharedInternalUnit::generateSampleBuffers(WTF::MonotonicTime)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3359668;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockAudioSharedInternalUnit::generateSampleBuffers(WTF::MonotonicTime)::$_0,void>::call(uint64_t result)
{
  if (*(_BYTE *)(*(_QWORD *)(result + 24) + 4))
    return WebCore::MockAudioSharedInternalUnit::generateSampleBuffers(*(_QWORD *)(result + 8), *(double *)(result + 16));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MockRealtimeVideoSourceMac::updateSampleBuffer(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *a1 = &off_1E3359690;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v6 + 304));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockRealtimeVideoSourceMac::updateSampleBuffer(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3359690;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v7 + 304));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockRealtimeVideoSourceMac::updateSampleBuffer(void)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  WebCore::VideoFrame *v2;
  uint64_t v3;
  _BYTE v5[16];
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v1 = a1[1];
  v2 = (WebCore::VideoFrame *)a1[3];
  v3 = a1[4];
  v5[0] = 0;
  v5[8] = 0;
  v6 = v3;
  v7 = 1;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  return WebCore::RealtimeVideoCaptureSource::dispatchVideoFrameToObservers(v1, v2, (uint64_t)v5);
}

_QWORD *std::__function::__func<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0,std::allocator<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0>,WTF::RetainPtr<__CVBuffer *> ()(webrtc::VideoFrameBuffer &)>::~__func(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33596B8;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingVideoSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 320));
  return a1;
}

void std::__function::__func<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0,std::allocator<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0>,WTF::RetainPtr<__CVBuffer *> ()(webrtc::VideoFrameBuffer &)>::~__func(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  *a1 = &off_1E33596B8;
  a1[1] = 0;
  if (v1)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingVideoSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 320));
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0,std::allocator<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0>,WTF::RetainPtr<__CVBuffer *> ()(webrtc::VideoFrameBuffer &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = operator new(0x18uLL);
  *v2 = &off_1E33596B8;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 320);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  v7 = *(_QWORD *)(a1 + 16);
  v2[1] = v3;
  v2[2] = v7;
  return v2;
}

void sub_195399490(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0,std::allocator<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0>,WTF::RetainPtr<__CVBuffer *> ()(webrtc::VideoFrameBuffer &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v3 = result;
  *a2 = &off_1E33596B8;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(v4 + 320);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_10:
  v8 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  a2[2] = v8;
  return result;
}

unsigned __int8 *std::__function::__func<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0,std::allocator<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0>,WTF::RetainPtr<__CVBuffer *> ()(webrtc::VideoFrameBuffer &)>::destroy(unsigned __int8 *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = 0;
  if (v1)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingVideoSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 320));
  return result;
}

void std::__function::__func<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0,std::allocator<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0>,WTF::RetainPtr<__CVBuffer *> ()(webrtc::VideoFrameBuffer &)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  __p[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingVideoSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 320));
  operator delete(__p);
}

_QWORD *std::__function::__func<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0,std::allocator<WebCore::RealtimeIncomingVideoSourceCocoa::toVideoFrame(webrtc::VideoFrame const&,WebCore::VideoFrameRotation)::$_0>,WTF::RetainPtr<__CVBuffer *> ()(webrtc::VideoFrameBuffer &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  v6[0] = &off_1E3359700;
  v6[1] = v3;
  v7 = v6;
  *a2 = webrtc::createPixelBufferFromFrameBuffer();
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_195399630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZN7WebCore32RealtimeIncomingVideoSourceCocoa12toVideoFrameERKN6webrtc10VideoFrameENS2_18VideoFrameRotationEENK3__0clINS4_16VideoFrameBufferEEEDaRT_EUlmmNS4_10BufferTypeEE_NS_9allocatorISG_EEFP10__CVBuffermmSF_EED0Ev()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN7WebCore32RealtimeIncomingVideoSourceCocoa12toVideoFrameERKN6webrtc10VideoFrameENS2_18VideoFrameRotationEENK3__0clINS4_16VideoFrameBufferEEEDaRT_EUlmmNS4_10BufferTypeEE_NS_9allocatorISG_EEFP10__CVBuffermmSF_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3359700;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN7WebCore32RealtimeIncomingVideoSourceCocoa12toVideoFrameERKN6webrtc10VideoFrameENS2_18VideoFrameRotationEENK3__0clINS4_16VideoFrameBufferEEEDaRT_EUlmmNS4_10BufferTypeEE_NS_9allocatorISG_EEFP10__CVBuffermmSF_EE7__cloneEPNS0_6__baseISL_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3359700;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN7WebCore32RealtimeIncomingVideoSourceCocoa12toVideoFrameERKN6webrtc10VideoFrameENS2_18VideoFrameRotationEENK3__0clINS4_16VideoFrameBufferEEEDaRT_EUlmmNS4_10BufferTypeEE_NS_9allocatorISG_EEFP10__CVBuffermmSF_EEclEOmSN_OSF_(uint64_t a1, WebCore **a2, uint64_t *a3, __CVBuffer **a4)
{
  uint64_t v4;
  WebCore *v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  const __CFAllocator *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  WTF::String *PixelBuffer;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  WTF::Logger *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::Logger *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint8_t v68[8];
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  __int128 buf;
  int v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v6 = *a3;
  v7 = *(_DWORD *)a4;
  v8 = (unsigned __int8 *)(v4 + 512);
  if (__ldaxr((unsigned __int8 *)(v4 + 512)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](v4 + 512);
    goto LABEL_5;
  }
  if (__stxr(1u, v8))
    goto LABEL_4;
LABEL_5:
  v10 = *(const __CFAllocator **)(v4 + 520);
  if (v10 && *(WebCore **)(v4 + 528) == v5 && *(_QWORD *)(v4 + 536) == v6 && *(_DWORD *)(v4 + 544) == v7)
    goto LABEL_31;
  if (v7)
  {
    if (v7 != 1)
      goto LABEL_23;
    v11 = 2016686640;
  }
  else
  {
    v11 = 875704438;
  }
  WebCore::createInMemoryCVPixelBufferPool(v5, v6, v11, 0, 0, &buf);
  v12 = DWORD2(buf);
  if (DWORD2(buf))
  {
    v13 = qword_1ECE7CD60;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      v14 = 1;
      goto LABEL_20;
    }
    if (v12 != 1)
    {
      result = std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      goto LABEL_131;
    }
    *(_DWORD *)v68 = 67109120;
    *(_DWORD *)&v68[4] = buf;
    _os_log_error_impl(&dword_1940B8000, v13, OS_LOG_TYPE_ERROR, "RealtimeIncomingVideoSourceCocoa failed creating buffer pool with error %d", v68, 8u);
    v14 = 1;
  }
  else
  {
    v15 = buf;
    *(_QWORD *)&buf = 0;
    v16 = *(const void **)(v4 + 520);
    *(_QWORD *)(v4 + 520) = v15;
    if (v16)
      CFRelease(v16);
    v14 = 0;
    *(_QWORD *)(v4 + 528) = v5;
    *(_QWORD *)(v4 + 536) = v6;
    *(_DWORD *)(v4 + 544) = v7;
  }
  v12 = DWORD2(buf);
LABEL_20:
  if (v12 != -1)
    ((void (*)(uint8_t *, __int128 *))off_1E3359490[v12])(v68, &buf);
  if (v14)
    goto LABEL_23;
  v10 = *(const __CFAllocator **)(v4 + 520);
  if (!v10)
    goto LABEL_23;
LABEL_31:
  v61 = 0;
  PixelBuffer = (WTF::String *)WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBuffer((WebCore *)*MEMORY[0x1E0C9AE00], v10, (__CVPixelBufferPool *)&v61, a4);
  if (!(_DWORD)PixelBuffer)
  {
    v17 = v61;
LABEL_24:
    v18 = __ldxr(v8);
    if (v18 == 1)
    {
      if (!__stlxr(0, v8))
        return v17;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    return v17;
  }
  v21 = *(_QWORD *)(v4 + 40);
  if (!v21
    || (v22 = *(_QWORD *)(v4 + 48),
        *(_QWORD *)v68 = "RealtimeIncomingVideoSource",
        v69 = 28,
        v70 = "operator()",
        v71 = v22,
        !*(_BYTE *)(v21 + 12)))
  {
LABEL_23:
    v17 = 0;
    goto LABEL_24;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v68);
  WTF::String::String((WTF::String *)&v65, "Failed creating a pixel buffer with error ");
  result = WTF::String::number(PixelBuffer);
  if (v66)
  {
    v23 = *((_DWORD *)v66 + 1);
    if (v65)
      goto LABEL_36;
LABEL_126:
    v24 = 0;
    if (v64)
      goto LABEL_37;
LABEL_127:
    v25 = 0;
    goto LABEL_38;
  }
  v23 = 0;
  if (!v65)
    goto LABEL_126;
LABEL_36:
  v24 = *((_DWORD *)v65 + 1);
  if (!v64)
    goto LABEL_127;
LABEL_37:
  v25 = *((_DWORD *)v64 + 1);
LABEL_38:
  if ((v25 | v24) < 0)
    goto LABEL_131;
  v26 = __OFADD__(v24, v25);
  v27 = v24 + v25;
  v28 = v26;
  if (v23 < 0)
    goto LABEL_131;
  if (v28)
    goto LABEL_131;
  result = (v23 + v27);
  if (__OFADD__(v23, v27))
    goto LABEL_131;
  if (v66 && (*((_BYTE *)v66 + 16) & 4) == 0)
  {
    v29 = 0;
    goto LABEL_53;
  }
  if (v65)
  {
    v30 = *((_DWORD *)v65 + 4);
    v29 = (v30 >> 2) & 1;
    if (v64 && (v30 & 4) != 0)
      goto LABEL_52;
  }
  else
  {
    if (v64)
    {
LABEL_52:
      v29 = (*((unsigned __int8 *)v64 + 16) >> 2) & 1;
      goto LABEL_53;
    }
    v29 = 1;
  }
LABEL_53:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v29, v66, (uint64_t)v65, (uint64_t)v64, &buf);
  v67 = (WTF::StringImpl *)buf;
  if ((_QWORD)buf)
  {
    v32 = v64;
    v64 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v65;
    v65 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v31);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v66;
    v66 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v31);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = qword_1ECE7CD60;
    v36 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v36)
    {
      WTF::String::utf8();
      v38 = v62 ? (char *)v62 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v38;
      _os_log_impl(&dword_1940B8000, v35, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v36 = (uint64_t)v62;
      v62 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 1)
          v36 = WTF::fastFree((WTF *)v36, v37);
        else
          --*(_DWORD *)v36;
      }
    }
    if (WebCore::LogWebRTC && byte_1ECE7CD50)
    {
      v39 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v40 = *v39;
        if ((v40 & 1) != 0)
          break;
        v41 = __ldaxr(v39);
        if (v41 == v40)
        {
          if (!__stxr(v40 | 1, v39))
          {
            v42 = WTF::Logger::observers((WTF::Logger *)v36);
            v43 = *(unsigned int *)(v42 + 12);
            if ((_DWORD)v43)
            {
              v44 = *(uint64_t **)v42;
              v60 = *(_QWORD *)v42 + 8 * v43;
              do
              {
                v45 = *v44;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v68);
                v73 = 0;
                WTF::String::String((WTF::String *)&v74, "Failed creating a pixel buffer with error ");
                v75 = 0;
                WTF::String::number(PixelBuffer);
                v62 = 0;
                v63 = 0;
                v46 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                LODWORD(v63) = 3;
                v62 = v46;
                v47 = HIDWORD(v63);
                *((_DWORD *)v46 + 4 * HIDWORD(v63)) = buf;
                v48 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v46 + 2 * v47 + 1) = v48;
                *((_DWORD *)v46 + 4 * (v47 + 1)) = v73;
                v49 = v74;
                if (v74)
                  *(_DWORD *)v74 += 2;
                *((_QWORD *)v46 + 2 * (v47 + 1) + 1) = v49;
                *((_DWORD *)v46 + 4 * (v47 + 2)) = v75;
                v50 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v46 + 2 * (v47 + 2) + 1) = v50;
                HIDWORD(v63) = v47 + 3;
                (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v45 + 16))(v45, &WebCore::LogWebRTC, 1, &v62);
                v51 = v62;
                if (HIDWORD(v63))
                {
                  v52 = 16 * HIDWORD(v63);
                  v53 = (WTF::StringImpl **)((char *)v62 + 8);
                  do
                  {
                    v54 = *v53;
                    *v53 = 0;
                    if (v54)
                    {
                      if (*(_DWORD *)v54 == 2)
                        WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v37);
                      else
                        *(_DWORD *)v54 -= 2;
                    }
                    v53 += 2;
                    v52 -= 16;
                  }
                  while (v52);
                  v51 = v62;
                }
                if (v51)
                {
                  v62 = 0;
                  LODWORD(v63) = 0;
                  WTF::fastFree(v51, v37);
                }
                v55 = v76;
                v76 = 0;
                if (v55)
                {
                  if (*(_DWORD *)v55 == 2)
                    WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v37);
                  else
                    *(_DWORD *)v55 -= 2;
                }
                v56 = v74;
                v74 = 0;
                if (v56)
                {
                  if (*(_DWORD *)v56 == 2)
                    WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v37);
                  else
                    *(_DWORD *)v56 -= 2;
                }
                v57 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v57)
                {
                  if (*(_DWORD *)v57 == 2)
                    WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v37);
                  else
                    *(_DWORD *)v57 -= 2;
                }
                ++v44;
              }
              while (v44 != (uint64_t *)v60);
            }
            v58 = __ldxr(v39);
            if (v58 == 1)
            {
              if (!__stlxr(0, v39))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v59 = v67;
    v67 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v37);
      else
        *(_DWORD *)v59 -= 2;
    }
    goto LABEL_23;
  }
LABEL_131:
  __break(0xC471u);
  return result;
}

void sub_195399DAC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, int a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29)
{
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v32;
  int v33;

  v32 = __ldxr(v30);
  if (v32 == 1)
  {
    if (!__stlxr(0, v30))
    {
LABEL_6:
      if (a19)
      {
        if (*(_DWORD *)a19 == 2)
          WTF::StringImpl::destroy(a19, a2);
        else
          *(_DWORD *)a19 -= 2;
      }
      v33 = __ldxr(v29);
      if (v33 == 1)
      {
        if (!__stlxr(0, v29))
LABEL_15:
          _Unwind_Resume(exception_object);
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v29);
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WebCore::DOMWindowIndexedDatabase::from(WebCore::DOMWindowIndexedDatabase *this, WebCore::LocalDOMWindow *a2)
{
  uint64_t *v3;
  const char **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;
  const char *v11[3];
  const char *v12[2];

  v3 = (uint64_t *)((char *)this + 80);
  v11[0] = "DOMWindowIndexedDatabase";
  v11[1] = (const char *)25;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 10, v11);
  if (!v4 || (v5 = (uint64_t)v4[2]) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    *(_QWORD *)v5 = off_1E3359770;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = 0;
    v10 = (unsigned __int8 *)v5;
    v12[0] = "DOMWindowIndexedDatabase";
    v12[1] = (const char *)25;
    WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>(v3, v12, &v10, (uint64_t)v11);
    v8 = v10;
    v10 = 0;
    if (v8)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v8 + 8))(v8);
  }
  return v5;
}

uint64_t *WebCore::DOMWindowIndexedDatabase::indexedDB(WebCore::DOMWindowIndexedDatabase *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  bmalloc::api *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Page *v9;
  uint64_t *v10;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t **v20;
  WebCore::Page *v21;
  unsigned int *v22;
  WebCore::Page *v23;
  uint64_t *v24;
  bmalloc::api *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  WebCore::IDBClient::IDBConnectionProxy *v29;
  bmalloc::api *v30;
  void *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  bmalloc::api *v35;
  bmalloc::api *v36;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  ++*(_DWORD *)(v2 + 24);
  v3 = *(_QWORD *)(v2 + 72);
  if (v3 && (v4 = *(bmalloc::api **)(v3 + 8)) != 0)
  {
    if (*((_BYTE *)v4 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x19539A254);
    }
    v5 = (_DWORD *)((char *)v4 - 264);
    *((_DWORD *)v4 - 66) += 2;
    v6 = *((_QWORD *)v4 + 30);
    if (v6
      && (v7 = *(_QWORD *)(v6 + 8)) != 0
      && (v8 = *(_QWORD *)(v7 + 24)) != 0
      && (v9 = *(WebCore::Page **)(v8 + 8)) != 0
      && *(_QWORD *)(*(_QWORD *)(v7 + 296) + 696) == v2)
    {
      v10 = (uint64_t *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (uint64_t *)*((_QWORD *)v4 + 306);
        if (v10)
          goto LABEL_20;
        v20 = (uint64_t **)((char *)v4 + 2448);
        ++*(_DWORD *)v9;
        v35 = v4;
        v21 = v9;
        v22 = WebCore::Page::idbConnection(v9);
        WTF::RefPtr<WebCore::IDBClient::IDBConnectionProxy,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionProxy>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionProxy>>::operator=(v20, *((unsigned int ***)v22 + 3));
        v23 = v21;
        v4 = v35;
        WTF::RefCounted<WebCore::Page>::deref(v23);
        v10 = *v20;
        if (v10)
        {
LABEL_20:
          v13 = bmalloc::api::isoAllocate();
          *(_DWORD *)v13 = 1;
          v15 = (unsigned int *)*v10;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
          *(_QWORD *)(v13 + 8) = v10;
          v17 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v13;
          if (v17)
          {
            do
            {
              v18 = __ldaxr((unsigned int *)v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, (unsigned int *)v17));
            if (!v19)
            {
              atomic_store(1u, (unsigned int *)v17);
              v24 = *(uint64_t **)(v17 + 8);
              v25 = (bmalloc::api *)v17;
              *(_QWORD *)(v17 + 8) = 0;
              if (v24)
              {
                v26 = *v24;
                do
                {
                  v27 = __ldaxr((unsigned int *)v26);
                  v28 = v27 - 1;
                }
                while (__stlxr(v28, (unsigned int *)v26));
                v36 = (bmalloc::api *)v26;
                if (!v28)
                {
                  atomic_store(1u, (unsigned int *)v26);
                  v29 = *(WebCore::IDBClient::IDBConnectionProxy **)(v26 + 24);
                  *(_QWORD *)(v26 + 24) = 0;
                  if (v29)
                  {
                    WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v29, v14);
                    bmalloc::api::isoDeallocate(v30, v31);
                  }
                  v32 = (unsigned int *)*((_QWORD *)v36 + 1);
                  *((_QWORD *)v36 + 1) = 0;
                  if (v32)
                  {
                    do
                    {
                      v33 = __ldaxr(v32);
                      v34 = v33 - 1;
                    }
                    while (__stlxr(v34, v32));
                    if (!v34)
                    {
                      atomic_store(1u, v32);
                      WTF::fastFree((WTF *)v32, v14);
                    }
                  }
                  bmalloc::api::isoDeallocate(v36, v14);
                }
              }
              bmalloc::api::isoDeallocate(v25, v14);
            }
          }
          v10 = (uint64_t *)*((_QWORD *)this + 2);
        }
      }
    }
    else
    {
      v10 = 0;
    }
    if (*v5 == 2)
    {
      if ((*((_WORD *)v4 - 129) & 0x400) == 0)
        WebCore::Node::removedLastRef((bmalloc::api *)((char *)v4 - 288));
    }
    else
    {
      *v5 -= 2;
    }
  }
  else
  {
    v10 = 0;
  }
  if (*(_DWORD *)(v2 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  else
    --*(_DWORD *)(v2 + 24);
  return v10;
}

uint64_t WebCore::WorkerGlobalScopeIndexedDatabase::indexedDB(WebCore::WorkerGlobalScopeIndexedDatabase *this)
{
  uint64_t result;
  unsigned int **v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WebCore::IDBClient::IDBConnectionProxy *v16;
  bmalloc::api *v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  bmalloc::api *v23;

  result = *((_QWORD *)this + 1);
  if (!result)
  {
    v3 = (unsigned int **)*((_QWORD *)this + 2);
    v4 = bmalloc::api::isoAllocate();
    v6 = v4;
    *(_DWORD *)v4 = 1;
    v7 = *v3;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    *(_QWORD *)(v4 + 8) = v3;
    v9 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v6;
    if (v9)
    {
      do
      {
        v10 = __ldaxr((unsigned int *)v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unsigned int *)v9));
      if (!v11)
      {
        atomic_store(1u, (unsigned int *)v9);
        v12 = *(uint64_t **)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (v12)
        {
          v13 = *v12;
          do
          {
            v14 = __ldaxr((unsigned int *)v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, (unsigned int *)v13));
          v23 = (bmalloc::api *)v13;
          if (!v15)
          {
            v22 = v9;
            atomic_store(1u, (unsigned int *)v13);
            v16 = *(WebCore::IDBClient::IDBConnectionProxy **)(v13 + 24);
            *(_QWORD *)(v13 + 24) = 0;
            if (v16)
            {
              WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v16, v5);
              bmalloc::api::isoDeallocate(v17, v18);
            }
            v19 = (unsigned int *)*((_QWORD *)v23 + 1);
            *((_QWORD *)v23 + 1) = 0;
            if (v19)
            {
              do
              {
                v20 = __ldaxr(v19);
                v21 = v20 - 1;
              }
              while (__stlxr(v21, v19));
              if (!v21)
              {
                atomic_store(1u, v19);
                WTF::fastFree((WTF *)v19, v5);
              }
            }
            bmalloc::api::isoDeallocate(v23, v5);
            v9 = v22;
          }
        }
        bmalloc::api::isoDeallocate((bmalloc::api *)v9, v5);
      }
    }
    return *((_QWORD *)this + 1);
  }
  return result;
}

uint64_t WebCore::WindowOrWorkerGlobalScopeIndexedDatabase::indexedDB(WebCore::WindowOrWorkerGlobalScopeIndexedDatabase *this, WebCore::WorkerGlobalScope *a2)
{
  uint64_t *v3;
  const char **v4;
  WebCore::WorkerGlobalScopeIndexedDatabase *v5;
  unsigned int **v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  const char *v13[3];
  const char *v14[2];

  v3 = (uint64_t *)((char *)this + 432);
  v13[0] = "WorkerGlobalScopeIndexedDatabase";
  v13[1] = (const char *)33;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 54, v13);
  if (v4)
  {
    v5 = (WebCore::WorkerGlobalScopeIndexedDatabase *)v4[2];
    if (v5)
      return WebCore::WorkerGlobalScopeIndexedDatabase::indexedDB(v5);
  }
  v6 = (unsigned int **)*((_QWORD *)this + 72);
  if (v6)
  {
    v7 = WTF::fastMalloc((WTF *)0x18);
    v5 = (WebCore::WorkerGlobalScopeIndexedDatabase *)v7;
    *(_QWORD *)v7 = off_1E3359790;
    *(_QWORD *)(v7 + 8) = 0;
    v8 = *v6;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    *(_QWORD *)(v7 + 16) = v6;
    v12 = (unsigned __int8 *)v7;
    v14[0] = "WorkerGlobalScopeIndexedDatabase";
    v14[1] = (const char *)33;
    WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::WorkerGlobalScope>>>(v3, v14, &v12, (uint64_t)v13);
    v10 = v12;
    v12 = 0;
    if (v10)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
    return WebCore::WorkerGlobalScopeIndexedDatabase::indexedDB(v5);
  }
  return 0;
}

uint64_t *WebCore::WindowOrWorkerGlobalScopeIndexedDatabase::indexedDB(WebCore::WindowOrWorkerGlobalScopeIndexedDatabase *this, WebCore::DOMWindow *a2)
{
  WebCore::DOMWindowIndexedDatabase *v3;
  uint64_t *v4;

  if (*((_BYTE *)this + 56))
    return 0;
  ++*((_DWORD *)this + 6);
  v3 = (WebCore::DOMWindowIndexedDatabase *)WebCore::DOMWindowIndexedDatabase::from(this, a2);
  v4 = WebCore::DOMWindowIndexedDatabase::indexedDB(v3);
  if (*((_DWORD *)this + 6) == 1)
    (*(void (**)(WebCore::WindowOrWorkerGlobalScopeIndexedDatabase *))(*(_QWORD *)this + 72))(this);
  else
    --*((_DWORD *)this + 6);
  return v4;
}

void *WebCore::IDBClient::IDBConnectionProxy::bisoHeap(WebCore::IDBClient::IDBConnectionProxy *this)
{
  return &WebCore::IDBClient::IDBConnectionProxy::bisoHeap(void)::heap;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::operator new(uint64_t this)
{
  if (this == 136)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::IDBConnectionProxy(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 8) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 20) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  return a1;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::identifier(WebCore::IDBClient::IDBConnectionToServer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
}

WebCore::IDBClient::IDBConnectionProxy *WebCore::IDBClient::IDBConnectionProxy::IDBConnectionProxy(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::IDBConnectionToServer *a2)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 1) + 8) + 16))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_WORD *)this + 60) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_WORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 65) = 0u;
  return this;
}

unsigned int **WebCore::IDBClient::IDBConnectionProxy::ref(unsigned int **this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = *this;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t *WebCore::IDBClient::IDBConnectionProxy::deref(uint64_t *this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  WebCore::IDBClient::IDBConnectionProxy *v5;
  bmalloc::api *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *this;
  do
  {
    v3 = __ldaxr((unsigned int *)v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)v2));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)v2);
    v5 = *(WebCore::IDBClient::IDBConnectionProxy **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v5)
    {
      WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v5, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    v8 = *(unsigned int **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
    return (uint64_t *)bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
  }
  return this;
}

WTF::StringImpl *WebCore::IDBClient::IDBConnectionProxy::openDatabase@<X0>(WebCore::IDBClient::IDBConnectionProxy *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, const WebCore::IDBDatabaseIdentifier *a3@<X2>, WebCore::IDBDatabaseIdentifier *a4@<X3>, unint64_t *a5@<X8>)
{
  unsigned __int8 *v10;
  unint64_t v12;
  WTF *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  int isMainThread;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _BYTE v32[24];
  int v33;
  _BYTE v34[24];
  int v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v10 = (unsigned __int8 *)this + 17;
  if (__ldaxr((unsigned __int8 *)this + 17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 17);
LABEL_5:
  WebCore::IDBOpenDBRequest::createOpenRequest(a2, this, a3, a4, (uint64_t *)&v28);
  v12 = v28;
  v27 = (_QWORD *)v28;
  v13 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBOpenDBRequest*>((uint64_t)&v28, (uint64_t *)this + 4, (_QWORD *)(v28 + 104), (unint64_t *)&v27);
  v14 = __ldxr(v10);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v10))
LABEL_9:
    v13 = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
  v28 = *((_QWORD *)this + 1);
  v29 = v28;
  v30 = *(_QWORD *)(v12 + 112);
  v15 = *(WTF::StringImpl **)(v12 + 376);
  if (v15)
    *(_DWORD *)v15 += 2;
  v31 = v15;
  v32[0] = 0;
  v33 = -1;
  v16 = *(unsigned int *)(v12 + 408);
  if ((_DWORD)v16 != -1)
  {
    v13 = (WTF *)((uint64_t (*)(_QWORD **, _BYTE *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v16])(&v27, v32, v12 + 384);
    v33 = v16;
  }
  v34[0] = 0;
  v35 = -1;
  v17 = *(unsigned int *)(v12 + 440);
  if ((_DWORD)v17 != -1)
  {
    v13 = (WTF *)((uint64_t (*)(_QWORD **, _BYTE *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v17])(&v27, v34, v12 + 416);
    v35 = v17;
  }
  v36 = *(_BYTE *)(v12 + 448);
  v37 = *(_QWORD *)(v12 + 456);
  v38 = *(_BYTE *)(v12 + 356);
  isMainThread = WTF::isMainThread(v13);
  v19 = *(_QWORD *)this;
  if (isMainThread)
  {
    if (*(_BYTE *)(v19 + 16))
    {
      (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(*(_QWORD *)(v19 + 8) + 8) + 32))(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 8), &v28);
    }
    else
    {
      v22 = v29;
      v23 = v30;
      do
        v24 = __ldaxr((unsigned int *)v19);
      while (__stlxr(v24 + 1, (unsigned int *)v19));
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
      *v25 = &off_1E3359F80;
      v25[1] = v19;
      v25[2] = v19;
      v25[3] = WebCore::IDBClient::IDBConnectionToServer::didOpenDatabase;
      v25[4] = 0;
      v25[5] = v22;
      v25[6] = v23;
      v27 = v25;
      WTF::callOnMainThread();
      v26 = (unint64_t)v27;
      v27 = 0;
      if (v26)
        (*(void (**)(unint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
  }
  else
  {
    WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData&>((uint64_t)this, *(unsigned int **)this, (uint64_t)WebCore::IDBClient::IDBConnectionToServer::openDatabase, 0, (WebCore::IDBOpenRequestData *)&v28);
  }
  if (v35 != -1)
    ((void (*)(_QWORD **, _BYTE *))off_1E3359868[v35])(&v27, v34);
  v35 = -1;
  if (v33 != -1)
    ((void (*)(_QWORD **, _BYTE *))off_1E3359868[v33])(&v27, v32);
  v33 = -1;
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  *a5 = v12;
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::openDatabase(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;

  if (*(_BYTE *)(a1 + 16))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  do
    v6 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v6 + 1, (unsigned int *)a1));
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v7 = &off_1E3359F80;
  v7[1] = a1;
  v7[2] = a1;
  v7[3] = WebCore::IDBClient::IDBConnectionToServer::didOpenDatabase;
  v7[4] = 0;
  v7[5] = v4;
  v7[6] = v5;
  v8 = v7;
  WTF::callOnMainThread();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

WTF::StringImpl *WebCore::IDBClient::IDBConnectionProxy::deleteDatabase@<X0>(WebCore::IDBClient::IDBConnectionProxy *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, const WebCore::IDBDatabaseIdentifier *a3@<X2>, unint64_t *a4@<X8>)
{
  unsigned __int8 *v8;
  unint64_t v10;
  WTF *v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int isMainThread;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _BYTE v30[24];
  int v31;
  _BYTE v32[24];
  int v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned __int8 *)this + 17;
  if (__ldaxr((unsigned __int8 *)this + 17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 17);
LABEL_5:
  WebCore::IDBOpenDBRequest::createDeleteRequest(a2, this, a3, (uint64_t *)&v26);
  v10 = v26;
  v25 = (_QWORD *)v26;
  v11 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBOpenDBRequest*>((uint64_t)&v26, (uint64_t *)this + 4, (_QWORD *)(v26 + 104), (unint64_t *)&v25);
  v12 = __ldxr(v8);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v8))
LABEL_9:
    v11 = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v26 = *((_QWORD *)this + 1);
  v27 = v26;
  v28 = *(_QWORD *)(v10 + 112);
  v13 = *(WTF::StringImpl **)(v10 + 376);
  if (v13)
    *(_DWORD *)v13 += 2;
  v29 = v13;
  v30[0] = 0;
  v31 = -1;
  v14 = *(unsigned int *)(v10 + 408);
  if ((_DWORD)v14 != -1)
  {
    v11 = (WTF *)((uint64_t (*)(_QWORD **, _BYTE *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v14])(&v25, v30, v10 + 384);
    v31 = v14;
  }
  v32[0] = 0;
  v33 = -1;
  v15 = *(unsigned int *)(v10 + 440);
  if ((_DWORD)v15 != -1)
  {
    v11 = (WTF *)((uint64_t (*)(_QWORD **, _BYTE *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v15])(&v25, v32, v10 + 416);
    v33 = v15;
  }
  v34 = *(_BYTE *)(v10 + 448);
  v35 = *(_QWORD *)(v10 + 456);
  v36 = *(_BYTE *)(v10 + 356);
  isMainThread = WTF::isMainThread(v11);
  v17 = *(_QWORD *)this;
  if (isMainThread)
  {
    if (*(_BYTE *)(v17 + 16))
    {
      (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(*(_QWORD *)(v17 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 8), &v26);
    }
    else
    {
      v20 = v27;
      v21 = v28;
      do
        v22 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v22 + 1, (unsigned int *)v17));
      v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
      *v23 = &off_1E3359F80;
      v23[1] = v17;
      v23[2] = v17;
      v23[3] = WebCore::IDBClient::IDBConnectionToServer::didDeleteDatabase;
      v23[4] = 0;
      v23[5] = v20;
      v23[6] = v21;
      v25 = v23;
      WTF::callOnMainThread();
      v24 = (unint64_t)v25;
      v25 = 0;
      if (v24)
        (*(void (**)(unint64_t))(*(_QWORD *)v24 + 8))(v24);
    }
  }
  else
  {
    WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData&>((uint64_t)this, *(unsigned int **)this, (uint64_t)WebCore::IDBClient::IDBConnectionToServer::deleteDatabase, 0, (WebCore::IDBOpenRequestData *)&v26);
  }
  if (v33 != -1)
    ((void (*)(_QWORD **, _BYTE *))off_1E3359868[v33])(&v25, v32);
  v33 = -1;
  if (v31 != -1)
    ((void (*)(_QWORD **, _BYTE *))off_1E3359868[v31])(&v25, v30);
  v31 = -1;
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  *a4 = v10;
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::deleteDatabase(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;

  if (*(_BYTE *)(a1 + 16))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  do
    v6 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v6 + 1, (unsigned int *)a1));
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v7 = &off_1E3359F80;
  v7[1] = a1;
  v7[2] = a1;
  v7[3] = WebCore::IDBClient::IDBConnectionToServer::didDeleteDatabase;
  v7[4] = 0;
  v7[5] = v4;
  v7[6] = v5;
  v8 = v7;
  WTF::callOnMainThread();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

void WebCore::IDBClient::IDBConnectionProxy::completeOpenDBRequest(WebCore::IDBClient::IDBConnectionProxy *this, const WebCore::IDBResultData *a2)
{
  unsigned __int8 *v4;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v32;
  __int128 *v33;
  uint64_t v34;
  int isMainThread;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  unsigned __int8 *v44;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  __int128 v59;
  uint64_t v60;
  __int16 v61;
  WTF::StringImpl *v62;
  char v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  uint64_t v70;

  v4 = (unsigned __int8 *)this + 17;
  if (__ldaxr((unsigned __int8 *)this + 17))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]((char *)this + 17);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  v6 = (uint64_t *)((char *)this + 32);
  v7 = *((_QWORD *)this + 4);
  if (!v7)
    goto LABEL_27;
  v8 = *((_QWORD *)a2 + 1);
  v9 = *((_QWORD *)a2 + 2);
  v10 = *(_DWORD *)(v7 - 8);
  v11 = (v8 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v8 - 1640531527) << 16) ^ ((unsigned __int16)v8
                                                                                           - 1640531527);
  v12 = (v8 >> 37) & 0x7FFF800 ^ ((v11 + WORD2(v8) + (v11 >> 11)) << 16) ^ (v11 + WORD2(v8) + (v11 >> 11));
  v13 = (v9 >> 5) & 0x7FFF800 ^ ((v12 + (unsigned __int16)v9 + (v12 >> 11)) << 16) ^ (v12
                                                                                                  + (unsigned __int16)v9
                                                                                                  + (v12 >> 11));
  v14 = (v9 >> 37) & 0x7FFF800 ^ ((v13 + WORD2(v9) + (v13 >> 11)) << 16) ^ (v13 + WORD2(v9) + (v13 >> 11));
  v15 = (v14 + (v14 >> 11)) ^ (8 * (v14 + (v14 >> 11)));
  v16 = (v15 + (v15 >> 5)) ^ (4 * (v15 + (v15 >> 5)));
  v17 = (v16 + (v16 >> 15)) ^ ((v16 + (v16 >> 15)) << 10);
  if (!v17)
    v17 = 0x800000;
  v18 = v10 & v17;
  v19 = (uint64_t *)(v7 + 24 * (v10 & v17));
  v21 = *v19;
  v20 = v19[1];
  if (*(_OWORD *)v19 == 0)
  {
LABEL_14:
    v23 = *(_DWORD *)(v7 - 4);
    v19 = (uint64_t *)(v7 + 24 * v23);
  }
  else
  {
    v22 = 1;
    while (v21 == -1 || v21 != v8 || v20 != v9)
    {
      v18 = (v18 + v22) & v10;
      v19 = (uint64_t *)(v7 + 24 * v18);
      v21 = *v19;
      v20 = v19[1];
      ++v22;
      if (*(_OWORD *)v19 == 0)
        goto LABEL_14;
    }
    v23 = *(_DWORD *)(v7 - 4);
  }
  if ((uint64_t *)(v7 + 24 * v23) == v19)
  {
LABEL_27:
    v25 = 0;
  }
  else
  {
    v24 = 0;
    v25 = v19[2];
    v19[2] = 0;
    if (!*v6 || (v24 = *v6 + 24 * *(unsigned int *)(*v6 - 4), (uint64_t *)v24 != v19))
    {
      if ((uint64_t *)v24 != v19)
      {
        *v19 = -1;
        v19[2] = 0;
        ++*(_DWORD *)(*v6 - 16);
        v26 = *v6;
        v27 = *v6 ? *(_DWORD *)(v26 - 12) - 1 : -1;
        *(_DWORD *)(v26 - 12) = v27;
        v28 = *v6;
        if (*v6)
        {
          v29 = 6 * *(_DWORD *)(v28 - 12);
          v30 = *(_DWORD *)(v28 - 4);
          if (v29 < v30 && v30 >= 9)
            v6 = (uint64_t *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v6, v30 >> 1, 0);
        }
      }
    }
  }
  v32 = __ldxr(v4);
  if (v32 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (!v25)
        return;
      goto LABEL_34;
    }
  }
  else
  {
    __clrex();
  }
  v6 = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v25)
    return;
LABEL_34:
  if (*(_BYTE *)(v25 + 464) && *(_BYTE *)a2 == 2)
  {
    if (*((_BYTE *)a2 + 48))
    {
      v33 = (__int128 *)*((_QWORD *)a2 + 8);
      if (v33)
      {
        v34 = *((_QWORD *)a2 + 5);
        v59 = *v33;
        LOBYTE(v60) = 1;
        v68 = v34;
        v69 = WebCore::IDBClient::IDBConnectionToServer::abortOpenAndUpgradeNeeded;
        v70 = 0;
        isMainThread = WTF::isMainThread((WTF *)v6);
        v36 = *(_QWORD *)this;
        if (isMainThread)
        {
          if (*(_BYTE *)(v36 + 16))
            (*(void (**)(_QWORD, uint64_t, __int128 *))(**(_QWORD **)(*(_QWORD *)(v36 + 8) + 8) + 200))(*(_QWORD *)(*(_QWORD *)(v36 + 8) + 8), v34, &v59);
        }
        else
        {
          WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,std::optional<WebCore::IDBResourceIdentifier> const&>((uint64_t)this, (unsigned int *)v36, (uint64_t *)&v69, &v68, (uint64_t *)&v59);
        }
        v40 = *((_QWORD *)a2 + 1);
        v39 = *((_QWORD *)a2 + 2);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v42 = (WTF::StringImpl *)v69;
        if (v69)
          *(_DWORD *)v69 += 2;
        *((_QWORD *)&v59 + 1) = v40;
        v60 = v39;
        v63 = 0;
        v64 = 0;
        v65 = 0u;
        v66 = 0u;
        v67 = 0u;
        LOBYTE(v59) = 0;
        v61 = 280;
        if (!v42)
        {
          v62 = 0;
          goto LABEL_53;
        }
        v43 = *(_DWORD *)v42;
        *(_DWORD *)v42 += 2;
        v62 = v42;
        if (v43)
        {
          *(_DWORD *)v42 = v43;
          v69 = 0;
        }
        else
        {
          WTF::StringImpl::destroy(v42, v41);
          v42 = (WTF::StringImpl *)v69;
          v69 = 0;
          if (!v42)
            goto LABEL_53;
        }
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v41);
        else
          *(_DWORD *)v42 -= 2;
LABEL_53:
        if (WTF::canCurrentThreadAccessThreadLocalData())
        {
          WebCore::IDBOpenDBRequest::requestCompleted((unsigned int *)v25, (WTF::StringImpl **)&v59);
          goto LABEL_80;
        }
        v44 = (unsigned __int8 *)(v25 + 56);
        if (__ldaxr((unsigned __int8 *)(v25 + 56)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v44))
        {
          goto LABEL_71;
        }
        MEMORY[0x19AEA534C](v25 + 56);
LABEL_71:
        v51 = *(_QWORD *)(v25 + 32);
        if (v51)
        {
          v52 = *(_QWORD *)(v51 + 8);
          if (v52)
          {
            WTF::createCrossThreadTask<WebCore::IDBOpenDBRequest,WebCore::IDBResultData const&,WebCore::IDBResultData>(&v68, v25, (WebCore::IDBResultData *)&v59);
            v53 = (uint64_t (*)(uint64_t))WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v53 = &off_1E3359A20;
            *((_QWORD *)v53 + 1) = v68;
            v69 = v53;
            LOBYTE(v70) = 0;
            (*(void (**)(uint64_t, uint64_t (**)(uint64_t)))(*(_QWORD *)(v52 - 96) + 336))(v52 - 96, &v69);
            v54 = (uint64_t)v69;
            v69 = 0;
            if (v54)
              (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
          }
        }
        v55 = __ldxr(v44);
        if (v55 == 1)
        {
          if (!__stlxr(0, v44))
            goto LABEL_80;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v25 + 56));
LABEL_80:
        WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v59);
        goto LABEL_81;
      }
    }
    else
    {
      __break(1u);
    }
    __break(0xC471u);
    JUMPOUT(0x19539B3CCLL);
  }
  if (WTF::canCurrentThreadAccessThreadLocalData())
  {
    WebCore::IDBOpenDBRequest::requestCompleted((unsigned int *)v25, (WTF::StringImpl **)a2);
    goto LABEL_81;
  }
  v37 = (unsigned __int8 *)(v25 + 56);
  if (__ldaxr((unsigned __int8 *)(v25 + 56)))
  {
    __clrex();
LABEL_59:
    MEMORY[0x19AEA534C](v25 + 56);
    goto LABEL_60;
  }
  if (__stxr(1u, v37))
    goto LABEL_59;
LABEL_60:
  v46 = *(_QWORD *)(v25 + 32);
  if (v46)
  {
    v47 = *(_QWORD *)(v46 + 8);
    if (v47)
    {
      WTF::createCrossThreadTask<WebCore::IDBOpenDBRequest,WebCore::IDBResultData const&,WebCore::IDBResultData>((uint64_t *)&v69, v25, a2);
      v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v48 = &off_1E3359A48;
      v48[1] = v69;
      *(_QWORD *)&v59 = v48;
      BYTE8(v59) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v47 - 96) + 336))(v47 - 96, &v59);
      v49 = v59;
      *(_QWORD *)&v59 = 0;
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    }
  }
  v50 = __ldxr(v37);
  if (v50 != 1)
  {
    __clrex();
    goto LABEL_68;
  }
  if (__stlxr(0, v37))
LABEL_68:
    WTF::Lock::unlockSlow((WTF::Lock *)(v25 + 56));
LABEL_81:
  v56 = (unsigned int *)(v25 + 60);
  do
  {
    v57 = __ldaxr(v56);
    v58 = v57 - 1;
  }
  while (__stlxr(v58, v56));
  if (!v58)
  {
    atomic_store(1u, (unsigned int *)(v25 + 60));
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
  }
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::abortOpenAndUpgradeNeeded(WTF *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[2];

  v8 = a2;
  v9[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::abortOpenAndUpgradeNeeded;
  v9[1] = 0;
  result = WTF::isMainThread(a1);
  v7 = *(_QWORD *)a1;
  if (!(_DWORD)result)
    return WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,std::optional<WebCore::IDBResourceIdentifier> const&>((uint64_t)a1, (unsigned int *)v7, v9, &v8, a3);
  if (*(_BYTE *)(v7 + 16))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v7 + 8) + 8) + 200))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8), a2, a3);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::createObjectStore(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, const WebCore::IDBObjectStoreInfo *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  WTF *v11;
  int v12;
  int isMainThread;
  uint64_t v14;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29[3];
  WebCore::IDBClient::TransactionOperation *v30;

  v6 = *((_QWORD *)a2 + 2);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 72) + 8);
  v7 = *(_OWORD *)(v6 + 80);
  v20 = *(_OWORD *)((char *)a2 + 24);
  v21 = v7;
  LOBYTE(v22) = 0;
  v23 = 0;
  v8 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 5);
  v25 = v8;
  v26 = 0;
  v27 = 0;
  v28 = 2;
  if (v8)
    v26 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v22 = *(_OWORD *)((char *)a2 + 56);
    v23 = 1;
  }
  v9 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_9:
  v30 = a2;
  v11 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v30, (uint64_t)v29);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v9))
LABEL_13:
    v11 = (WTF *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v29[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::createObjectStore;
  v29[1] = 0;
  isMainThread = WTF::isMainThread(v11);
  v14 = *(_QWORD *)this;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&),WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&>((uint64_t)this, *(unsigned int **)this, v29, &v19, (uint64_t *)a3);
  if (*(_BYTE *)(v14 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, const WebCore::IDBObjectStoreInfo *))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8), &v19, a3);
  v16 = v20;
  do
    v17 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v17 + 1, (unsigned int *)v14));
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v18 = &off_1E3359F80;
  *(_QWORD *)(v18 + 8) = v14;
  *(_QWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = WebCore::IDBClient::IDBConnectionToServer::didCreateObjectStore;
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 40) = v16;
  v30 = (WebCore::IDBClient::TransactionOperation *)v18;
  WTF::callOnMainThread();
  result = v30;
  v30 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *WebCore::IDBClient::IDBConnectionProxy::saveOperation(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2)
{
  unsigned __int8 *v4;
  unsigned int *result;
  int v7;
  uint64_t v8;
  WebCore::IDBClient::TransactionOperation *v9;

  v4 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_5:
  v9 = a2;
  result = WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v9, (uint64_t)&v8);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::createObjectStore(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBObjectStoreInfo *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *, const WebCore::IDBObjectStoreInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 64))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2, a3);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  do
    v7 = __ldaxr((unsigned int *)this);
  while (__stlxr(v7 + 1, (unsigned int *)this));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v8 = &off_1E3359F80;
  v8[1] = this;
  v8[2] = this;
  v8[3] = WebCore::IDBClient::IDBConnectionToServer::didCreateObjectStore;
  v8[4] = 0;
  v8[5] = v5;
  v8[6] = v6;
  v9 = (uint64_t)v8;
  WTF::callOnMainThread();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::renameObjectStore(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, uint64_t a3, const WTF::String *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  WTF *v11;
  int v12;
  int isMainThread;
  uint64_t v14;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30[3];
  WebCore::IDBClient::TransactionOperation *v31;

  v29 = a3;
  v7 = *((_QWORD *)a2 + 2);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 72) + 72) + 8);
  v20 = *(_OWORD *)((char *)a2 + 24);
  v21 = *(_OWORD *)(v7 + 80);
  LOBYTE(v22) = 0;
  v23 = 0;
  v8 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 5);
  v25 = v8;
  v26 = 0;
  v27 = 0;
  v28 = 2;
  if (v8)
    v26 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v22 = *(_OWORD *)((char *)a2 + 56);
    v23 = 1;
  }
  v9 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_9:
  v31 = a2;
  v11 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v31, (uint64_t)v30);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v9))
LABEL_13:
    v11 = (WTF *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v30[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::renameObjectStore;
  v30[1] = 0;
  isMainThread = WTF::isMainThread(v11);
  v14 = *(_QWORD *)this;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&),WebCore::IDBRequestData const&,unsigned long long &,WTF::String const&>((uint64_t)this, *(unsigned int **)this, v30, &v19, &v29);
  if (*(_BYTE *)(v14 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, const WTF::String *))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 8) + 80))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8), &v19, v29, a4);
  v16 = v20;
  do
    v17 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v17 + 1, (unsigned int *)v14));
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v18 = &off_1E3359F80;
  *(_QWORD *)(v18 + 8) = v14;
  *(_QWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = WebCore::IDBClient::IDBConnectionToServer::didRenameObjectStore;
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 40) = v16;
  v31 = (WebCore::IDBClient::TransactionOperation *)v18;
  WTF::callOnMainThread();
  result = v31;
  v31 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::renameObjectStore(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2, uint64_t a3, const WTF::String *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *, uint64_t, const WTF::String *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 80))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2, a3, a4);
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  do
    v8 = __ldaxr((unsigned int *)this);
  while (__stlxr(v8 + 1, (unsigned int *)this));
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v9 = &off_1E3359F80;
  v9[1] = this;
  v9[2] = this;
  v9[3] = WebCore::IDBClient::IDBConnectionToServer::didRenameObjectStore;
  v9[4] = 0;
  v9[5] = v6;
  v9[6] = v7;
  v10 = (uint64_t)v9;
  WTF::callOnMainThread();
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::renameIndex(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, uint64_t a3, uint64_t a4, const WTF::String *a5)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 *v11;
  WTF *v13;
  int v14;
  int isMainThread;
  uint64_t v16;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];
  WebCore::IDBClient::TransactionOperation *v34;

  v31 = a4;
  v32 = a3;
  v8 = *((_QWORD *)a2 + 2);
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 72) + 72) + 8);
  v9 = *(_OWORD *)(v8 + 80);
  v22 = *(_OWORD *)((char *)a2 + 24);
  v23 = v9;
  LOBYTE(v24) = 0;
  v25 = 0;
  v10 = *((_QWORD *)a2 + 6);
  v26 = *((_QWORD *)a2 + 5);
  v27 = v10;
  v28 = 0;
  v29 = 0;
  v30 = 2;
  if (v10)
    v28 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v24 = *(_OWORD *)((char *)a2 + 56);
    v25 = 1;
  }
  v11 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_9:
  v34 = a2;
  v13 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v34, (uint64_t)v33);
  v14 = __ldxr(v11);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v11))
LABEL_13:
    v13 = (WTF *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v33[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::renameIndex;
  v33[1] = 0;
  isMainThread = WTF::isMainThread(v13);
  v16 = *(_QWORD *)this;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&),WebCore::IDBRequestData const&,unsigned long long &,unsigned long long &,WTF::String const&>((uint64_t)this, *(unsigned int **)this, v33, &v21, &v32, &v31);
  if (*(_BYTE *)(v16 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, uint64_t, const WTF::String *))(**(_QWORD **)(*(_QWORD *)(v16 + 8) + 8) + 112))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8), &v21, v32, v31, a5);
  v18 = v22;
  do
    v19 = __ldaxr((unsigned int *)v16);
  while (__stlxr(v19 + 1, (unsigned int *)v16));
  v20 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v20 = &off_1E3359F80;
  *(_QWORD *)(v20 + 8) = v16;
  *(_QWORD *)(v20 + 16) = v16;
  *(_QWORD *)(v20 + 24) = WebCore::IDBClient::IDBConnectionToServer::didRenameIndex;
  *(_QWORD *)(v20 + 32) = 0;
  *(_OWORD *)(v20 + 40) = v18;
  v34 = (WebCore::IDBClient::TransactionOperation *)v20;
  WTF::callOnMainThread();
  result = v34;
  v34 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::renameIndex(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2, uint64_t a3, uint64_t a4, const WTF::String *a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *, uint64_t, uint64_t, const WTF::String *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 112))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2, a3, a4, a5);
  v7 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a2 + 2);
  do
    v9 = __ldaxr((unsigned int *)this);
  while (__stlxr(v9 + 1, (unsigned int *)this));
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v10 = &off_1E3359F80;
  v10[1] = this;
  v10[2] = this;
  v10[3] = WebCore::IDBClient::IDBConnectionToServer::didRenameIndex;
  v10[4] = 0;
  v10[5] = v7;
  v10[6] = v8;
  v11 = (uint64_t)v10;
  WTF::callOnMainThread();
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::deleteObjectStore(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, const WTF::String *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  WTF *v11;
  int v12;
  int isMainThread;
  uint64_t v14;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29[3];
  WebCore::IDBClient::TransactionOperation *v30;

  v6 = *((_QWORD *)a2 + 2);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 72) + 8);
  v7 = *(_OWORD *)(v6 + 80);
  v20 = *(_OWORD *)((char *)a2 + 24);
  v21 = v7;
  LOBYTE(v22) = 0;
  v23 = 0;
  v8 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 5);
  v25 = v8;
  v26 = 0;
  v27 = 0;
  v28 = 2;
  if (v8)
    v26 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v22 = *(_OWORD *)((char *)a2 + 56);
    v23 = 1;
  }
  v9 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_9:
  v30 = a2;
  v11 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v30, (uint64_t)v29);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v9))
LABEL_13:
    v11 = (WTF *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v29[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::deleteObjectStore;
  v29[1] = 0;
  isMainThread = WTF::isMainThread(v11);
  v14 = *(_QWORD *)this;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WTF::String const&),WebCore::IDBRequestData const&,WTF::String const&>((uint64_t)this, *(unsigned int **)this, v29, &v19);
  if (*(_BYTE *)(v14 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, const WTF::String *))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8), &v19, a3);
  v16 = v20;
  do
    v17 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v17 + 1, (unsigned int *)v14));
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v18 = &off_1E3359F80;
  *(_QWORD *)(v18 + 8) = v14;
  *(_QWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = WebCore::IDBClient::IDBConnectionToServer::didDeleteObjectStore;
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 40) = v16;
  v30 = (WebCore::IDBClient::TransactionOperation *)v18;
  WTF::callOnMainThread();
  result = v30;
  v30 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::deleteObjectStore(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WTF::String *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *, const WTF::String *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 72))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2, a3);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  do
    v7 = __ldaxr((unsigned int *)this);
  while (__stlxr(v7 + 1, (unsigned int *)this));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v8 = &off_1E3359F80;
  v8[1] = this;
  v8[2] = this;
  v8[3] = WebCore::IDBClient::IDBConnectionToServer::didDeleteObjectStore;
  v8[4] = 0;
  v8[5] = v5;
  v8[6] = v6;
  v9 = (uint64_t)v8;
  WTF::callOnMainThread();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::clearObjectStore(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  WTF *v9;
  int v10;
  int isMainThread;
  uint64_t v12;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28[3];
  WebCore::IDBClient::TransactionOperation *v29;

  v27 = a3;
  v5 = *((_QWORD *)a2 + 2);
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 72) + 72) + 8);
  v18 = *(_OWORD *)((char *)a2 + 24);
  v19 = *(_OWORD *)(v5 + 80);
  LOBYTE(v20) = 0;
  v21 = 0;
  v6 = *((_QWORD *)a2 + 6);
  v22 = *((_QWORD *)a2 + 5);
  v23 = v6;
  v24 = 0;
  v25 = 0;
  v26 = 2;
  if (v6)
    v24 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v20 = *(_OWORD *)((char *)a2 + 56);
    v21 = 1;
  }
  v7 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_9:
  v29 = a2;
  v9 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v29, (uint64_t)v28);
  v10 = __ldxr(v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v7))
LABEL_13:
    v9 = (WTF *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v28[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::clearObjectStore;
  v28[1] = 0;
  isMainThread = WTF::isMainThread(v9);
  v12 = *(_QWORD *)this;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,unsigned long long),WebCore::IDBRequestData const&,unsigned long long &>((uint64_t)this, *(unsigned int **)this, v28, &v17, &v27);
  if (*(_BYTE *)(v12 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 8) + 8) + 88))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8), &v17, v27);
  v14 = v18;
  do
    v15 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v15 + 1, (unsigned int *)v12));
  v16 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v16 = &off_1E3359F80;
  *(_QWORD *)(v16 + 8) = v12;
  *(_QWORD *)(v16 + 16) = v12;
  *(_QWORD *)(v16 + 24) = WebCore::IDBClient::IDBConnectionToServer::didClearObjectStore;
  *(_QWORD *)(v16 + 32) = 0;
  *(_OWORD *)(v16 + 40) = v14;
  v29 = (WebCore::IDBClient::TransactionOperation *)v16;
  WTF::callOnMainThread();
  result = v29;
  v29 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::clearObjectStore(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8)
                                                                              + 88))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  do
    v6 = __ldaxr((unsigned int *)this);
  while (__stlxr(v6 + 1, (unsigned int *)this));
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v7 = &off_1E3359F80;
  v7[1] = this;
  v7[2] = this;
  v7[3] = WebCore::IDBClient::IDBConnectionToServer::didClearObjectStore;
  v7[4] = 0;
  v7[5] = v4;
  v7[6] = v5;
  v8 = (uint64_t)v7;
  WTF::callOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::createIndex(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, const WebCore::IDBIndexInfo *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  WTF *v11;
  int v12;
  int isMainThread;
  uint64_t v14;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29[3];
  WebCore::IDBClient::TransactionOperation *v30;

  v6 = *((_QWORD *)a2 + 2);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 72) + 8);
  v7 = *(_OWORD *)(v6 + 80);
  v20 = *(_OWORD *)((char *)a2 + 24);
  v21 = v7;
  LOBYTE(v22) = 0;
  v23 = 0;
  v8 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 5);
  v25 = v8;
  v26 = 0;
  v27 = 0;
  v28 = 2;
  if (v8)
    v26 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v22 = *(_OWORD *)((char *)a2 + 56);
    v23 = 1;
  }
  v9 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_9:
  v30 = a2;
  v11 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v30, (uint64_t)v29);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v9))
LABEL_13:
    v11 = (WTF *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v29[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::createIndex;
  v29[1] = 0;
  isMainThread = WTF::isMainThread(v11);
  v14 = *(_QWORD *)this;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&),WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&>((uint64_t)this, *(unsigned int **)this, v29, &v19, (uint64_t *)a3);
  if (*(_BYTE *)(v14 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, const WebCore::IDBIndexInfo *))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 8) + 96))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8), &v19, a3);
  v16 = v20;
  do
    v17 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v17 + 1, (unsigned int *)v14));
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v18 = &off_1E3359F80;
  *(_QWORD *)(v18 + 8) = v14;
  *(_QWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = WebCore::IDBClient::IDBConnectionToServer::didCreateIndex;
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 40) = v16;
  v30 = (WebCore::IDBClient::TransactionOperation *)v18;
  WTF::callOnMainThread();
  result = v30;
  v30 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::createIndex(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBIndexInfo *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *, const WebCore::IDBIndexInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 96))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2, a3);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  do
    v7 = __ldaxr((unsigned int *)this);
  while (__stlxr(v7 + 1, (unsigned int *)this));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v8 = &off_1E3359F80;
  v8[1] = this;
  v8[2] = this;
  v8[3] = WebCore::IDBClient::IDBConnectionToServer::didCreateIndex;
  v8[4] = 0;
  v8[5] = v5;
  v8[6] = v6;
  v9 = (uint64_t)v8;
  WTF::callOnMainThread();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::deleteIndex(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, uint64_t a3, const WTF::String *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  WTF *v11;
  int v12;
  int isMainThread;
  uint64_t v14;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30[3];
  WebCore::IDBClient::TransactionOperation *v31;

  v29 = a3;
  v7 = *((_QWORD *)a2 + 2);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 72) + 72) + 8);
  v20 = *(_OWORD *)((char *)a2 + 24);
  v21 = *(_OWORD *)(v7 + 80);
  LOBYTE(v22) = 0;
  v23 = 0;
  v8 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 5);
  v25 = v8;
  v26 = 0;
  v27 = 0;
  v28 = 2;
  if (v8)
    v26 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v22 = *(_OWORD *)((char *)a2 + 56);
    v23 = 1;
  }
  v9 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_9:
  v31 = a2;
  v11 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v31, (uint64_t)v30);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v9))
LABEL_13:
    v11 = (WTF *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v30[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::deleteIndex;
  v30[1] = 0;
  isMainThread = WTF::isMainThread(v11);
  v14 = *(_QWORD *)this;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&),WebCore::IDBRequestData const&,unsigned long long &,WTF::String const&>((uint64_t)this, *(unsigned int **)this, v30, &v19, &v29);
  if (*(_BYTE *)(v14 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, const WTF::String *))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 8) + 104))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8), &v19, v29, a4);
  v16 = v20;
  do
    v17 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v17 + 1, (unsigned int *)v14));
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v18 = &off_1E3359F80;
  *(_QWORD *)(v18 + 8) = v14;
  *(_QWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = WebCore::IDBClient::IDBConnectionToServer::didDeleteIndex;
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 40) = v16;
  v31 = (WebCore::IDBClient::TransactionOperation *)v18;
  WTF::callOnMainThread();
  result = v31;
  v31 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::deleteIndex(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2, uint64_t a3, const WTF::String *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *, uint64_t, const WTF::String *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 104))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2, a3, a4);
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  do
    v8 = __ldaxr((unsigned int *)this);
  while (__stlxr(v8 + 1, (unsigned int *)this));
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v9 = &off_1E3359F80;
  v9[1] = this;
  v9[2] = this;
  v9[3] = WebCore::IDBClient::IDBConnectionToServer::didDeleteIndex;
  v9[4] = 0;
  v9[5] = v6;
  v9[6] = v7;
  v10 = (uint64_t)v9;
  WTF::callOnMainThread();
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::putOrAdd(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4, unsigned __int8 a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  WTF *v13;
  int v14;
  int isMainThread;
  unsigned int *v16;
  uint64_t result;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  unsigned __int8 v31;
  uint64_t v32[3];
  uint64_t v33;

  v31 = a5;
  v9 = *(_QWORD *)(a2 + 16);
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + 72) + 8);
  v22 = *(_OWORD *)(a2 + 24);
  v23 = *(_OWORD *)(v9 + 80);
  LOBYTE(v24) = 0;
  v25 = 0;
  v10 = *(_QWORD *)(a2 + 48);
  v26 = *(_QWORD *)(a2 + 40);
  v27 = v10;
  v28 = 0;
  v29 = 0;
  v30 = 2;
  if (v10)
    v28 = *(_BYTE *)(a2 + 80);
  if (*(_BYTE *)(a2 + 72))
  {
    v24 = *(_OWORD *)(a2 + 56);
    v25 = 1;
  }
  v11 = (unsigned __int8 *)(a1 + 19);
  if (__ldaxr((unsigned __int8 *)(a1 + 19)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](a1 + 19);
LABEL_9:
  v33 = a2;
  v13 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)(a1 + 64), (_QWORD *)(a2 + 24), &v33, (uint64_t)v32);
  v14 = __ldxr(v11);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v11))
LABEL_13:
    v13 = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 19));
  v32[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::putOrAdd;
  v32[1] = 0;
  isMainThread = WTF::isMainThread(v13);
  v16 = *(unsigned int **)a1;
  if (!isMainThread)
    return WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode),WebCore::IDBRequestData const&,WebCore::IDBKeyData&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode const&>(a1, *(unsigned int **)a1, v32, &v21, a3, a4, (char *)&v31);
  if (*((_BYTE *)v16 + 16))
    return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, unsigned int **, _QWORD))(**(_QWORD **)(*((_QWORD *)v16 + 1) + 8)
                                                                                          + 120))(*(_QWORD *)(*((_QWORD *)v16 + 1) + 8), &v21, a3, a4, v31);
  v18 = v22;
  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 + 1, v16));
  v20 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v20 = &off_1E3359F80;
  *(_QWORD *)(v20 + 8) = v16;
  *(_QWORD *)(v20 + 16) = v16;
  *(_QWORD *)(v20 + 24) = WebCore::IDBClient::IDBConnectionToServer::didPutOrAdd;
  *(_QWORD *)(v20 + 32) = 0;
  *(_OWORD *)(v20 + 40) = v18;
  v33 = v20;
  WTF::callOnMainThread();
  result = v33;
  v33 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::putOrAdd(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;

  if (*(_BYTE *)(a1 + 16))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  do
    v6 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v6 + 1, (unsigned int *)a1));
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v7 = &off_1E3359F80;
  v7[1] = a1;
  v7[2] = a1;
  v7[3] = WebCore::IDBClient::IDBConnectionToServer::didPutOrAdd;
  v7[4] = 0;
  v7[5] = v4;
  v7[6] = v5;
  v8 = v7;
  WTF::callOnMainThread();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::getRecord(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, const WebCore::IDBGetRecordData *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  WTF *v11;
  int v12;
  int isMainThread;
  uint64_t v14;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29[3];
  WebCore::IDBClient::TransactionOperation *v30;

  v6 = *((_QWORD *)a2 + 2);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 72) + 8);
  v7 = *(_OWORD *)(v6 + 80);
  v20 = *(_OWORD *)((char *)a2 + 24);
  v21 = v7;
  LOBYTE(v22) = 0;
  v23 = 0;
  v8 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 5);
  v25 = v8;
  v26 = 0;
  v27 = 0;
  v28 = 2;
  if (v8)
    v26 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v22 = *(_OWORD *)((char *)a2 + 56);
    v23 = 1;
  }
  v9 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_9:
  v30 = a2;
  v11 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v30, (uint64_t)v29);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v9))
LABEL_13:
    v11 = (WTF *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v29[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::getRecord;
  v29[1] = 0;
  isMainThread = WTF::isMainThread(v11);
  v14 = *(_QWORD *)this;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&),WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&>((uint64_t)this, *(unsigned int **)this, v29, &v19, a3);
  if (*(_BYTE *)(v14 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, const WebCore::IDBGetRecordData *))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8), &v19, a3);
  v16 = v20;
  do
    v17 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v17 + 1, (unsigned int *)v14));
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v18 = &off_1E3359F80;
  *(_QWORD *)(v18 + 8) = v14;
  *(_QWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = WebCore::IDBClient::IDBConnectionToServer::didGetRecord;
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 40) = v16;
  v30 = (WebCore::IDBClient::TransactionOperation *)v18;
  WTF::callOnMainThread();
  result = v30;
  v30 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::getRecord(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBGetRecordData *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *, const WebCore::IDBGetRecordData *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 128))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2, a3);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  do
    v7 = __ldaxr((unsigned int *)this);
  while (__stlxr(v7 + 1, (unsigned int *)this));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v8 = &off_1E3359F80;
  v8[1] = this;
  v8[2] = this;
  v8[3] = WebCore::IDBClient::IDBConnectionToServer::didGetRecord;
  v8[4] = 0;
  v8[5] = v5;
  v8[6] = v6;
  v9 = (uint64_t)v8;
  WTF::callOnMainThread();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::getAllRecords(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, const WebCore::IDBGetAllRecordsData *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  WTF *v11;
  int v12;
  int isMainThread;
  uint64_t v14;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29[3];
  WebCore::IDBClient::TransactionOperation *v30;

  v6 = *((_QWORD *)a2 + 2);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 72) + 8);
  v7 = *(_OWORD *)(v6 + 80);
  v20 = *(_OWORD *)((char *)a2 + 24);
  v21 = v7;
  LOBYTE(v22) = 0;
  v23 = 0;
  v8 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 5);
  v25 = v8;
  v26 = 0;
  v27 = 0;
  v28 = 2;
  if (v8)
    v26 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v22 = *(_OWORD *)((char *)a2 + 56);
    v23 = 1;
  }
  v9 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_9:
  v30 = a2;
  v11 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v30, (uint64_t)v29);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v9))
LABEL_13:
    v11 = (WTF *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v29[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::getAllRecords;
  v29[1] = 0;
  isMainThread = WTF::isMainThread(v11);
  v14 = *(_QWORD *)this;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&),WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&>((uint64_t)this, *(unsigned int **)this, v29, &v19, a3);
  if (*(_BYTE *)(v14 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, const WebCore::IDBGetAllRecordsData *))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 8) + 136))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8), &v19, a3);
  v16 = v20;
  do
    v17 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v17 + 1, (unsigned int *)v14));
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v18 = &off_1E3359F80;
  *(_QWORD *)(v18 + 8) = v14;
  *(_QWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = WebCore::IDBClient::IDBConnectionToServer::didGetAllRecords;
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 40) = v16;
  v30 = (WebCore::IDBClient::TransactionOperation *)v18;
  WTF::callOnMainThread();
  result = v30;
  v30 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::getAllRecords(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBGetAllRecordsData *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *, const WebCore::IDBGetAllRecordsData *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 136))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2, a3);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  do
    v7 = __ldaxr((unsigned int *)this);
  while (__stlxr(v7 + 1, (unsigned int *)this));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v8 = &off_1E3359F80;
  v8[1] = this;
  v8[2] = this;
  v8[3] = WebCore::IDBClient::IDBConnectionToServer::didGetAllRecords;
  v8[4] = 0;
  v8[5] = v5;
  v8[6] = v6;
  v9 = (uint64_t)v8;
  WTF::callOnMainThread();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::getCount(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, const WebCore::IDBKeyRangeData *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  WTF *v11;
  int v12;
  int isMainThread;
  uint64_t v14;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29[3];
  WebCore::IDBClient::TransactionOperation *v30;

  v6 = *((_QWORD *)a2 + 2);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 72) + 8);
  v7 = *(_OWORD *)(v6 + 80);
  v20 = *(_OWORD *)((char *)a2 + 24);
  v21 = v7;
  LOBYTE(v22) = 0;
  v23 = 0;
  v8 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 5);
  v25 = v8;
  v26 = 0;
  v27 = 0;
  v28 = 2;
  if (v8)
    v26 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v22 = *(_OWORD *)((char *)a2 + 56);
    v23 = 1;
  }
  v9 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_9:
  v30 = a2;
  v11 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v30, (uint64_t)v29);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v9))
LABEL_13:
    v11 = (WTF *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v29[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::getCount;
  v29[1] = 0;
  isMainThread = WTF::isMainThread(v11);
  v14 = *(_QWORD *)this;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&),WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&>((uint64_t)this, *(unsigned int **)this, v29, &v19, a3);
  if (*(_BYTE *)(v14 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, const WebCore::IDBKeyRangeData *))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 8) + 144))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8), &v19, a3);
  v16 = v20;
  do
    v17 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v17 + 1, (unsigned int *)v14));
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v18 = &off_1E3359F80;
  *(_QWORD *)(v18 + 8) = v14;
  *(_QWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = WebCore::IDBClient::IDBConnectionToServer::didGetCount;
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 40) = v16;
  v30 = (WebCore::IDBClient::TransactionOperation *)v18;
  WTF::callOnMainThread();
  result = v30;
  v30 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::getCount(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBKeyRangeData *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *, const WebCore::IDBKeyRangeData *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 144))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2, a3);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  do
    v7 = __ldaxr((unsigned int *)this);
  while (__stlxr(v7 + 1, (unsigned int *)this));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v8 = &off_1E3359F80;
  v8[1] = this;
  v8[2] = this;
  v8[3] = WebCore::IDBClient::IDBConnectionToServer::didGetCount;
  v8[4] = 0;
  v8[5] = v5;
  v8[6] = v6;
  v9 = (uint64_t)v8;
  WTF::callOnMainThread();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::deleteRecord(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, const WebCore::IDBKeyRangeData *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  WTF *v11;
  int v12;
  int isMainThread;
  uint64_t v14;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29[3];
  WebCore::IDBClient::TransactionOperation *v30;

  v6 = *((_QWORD *)a2 + 2);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 72) + 8);
  v7 = *(_OWORD *)(v6 + 80);
  v20 = *(_OWORD *)((char *)a2 + 24);
  v21 = v7;
  LOBYTE(v22) = 0;
  v23 = 0;
  v8 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 5);
  v25 = v8;
  v26 = 0;
  v27 = 0;
  v28 = 2;
  if (v8)
    v26 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v22 = *(_OWORD *)((char *)a2 + 56);
    v23 = 1;
  }
  v9 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_9:
  v30 = a2;
  v11 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v30, (uint64_t)v29);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v9))
LABEL_13:
    v11 = (WTF *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v29[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::deleteRecord;
  v29[1] = 0;
  isMainThread = WTF::isMainThread(v11);
  v14 = *(_QWORD *)this;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&),WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&>((uint64_t)this, *(unsigned int **)this, v29, &v19, a3);
  if (*(_BYTE *)(v14 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, const WebCore::IDBKeyRangeData *))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 8) + 152))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8), &v19, a3);
  v16 = v20;
  do
    v17 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v17 + 1, (unsigned int *)v14));
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v18 = &off_1E3359F80;
  *(_QWORD *)(v18 + 8) = v14;
  *(_QWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = WebCore::IDBClient::IDBConnectionToServer::didDeleteRecord;
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 40) = v16;
  v30 = (WebCore::IDBClient::TransactionOperation *)v18;
  WTF::callOnMainThread();
  result = v30;
  v30 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::deleteRecord(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBKeyRangeData *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *, const WebCore::IDBKeyRangeData *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 152))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2, a3);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  do
    v7 = __ldaxr((unsigned int *)this);
  while (__stlxr(v7 + 1, (unsigned int *)this));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v8 = &off_1E3359F80;
  v8[1] = this;
  v8[2] = this;
  v8[3] = WebCore::IDBClient::IDBConnectionToServer::didDeleteRecord;
  v8[4] = 0;
  v8[5] = v5;
  v8[6] = v6;
  v9 = (uint64_t)v8;
  WTF::callOnMainThread();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::openCursor(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, const WebCore::IDBCursorInfo *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  WTF *v11;
  int v12;
  int isMainThread;
  uint64_t v14;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29[3];
  WebCore::IDBClient::TransactionOperation *v30;

  v6 = *((_QWORD *)a2 + 2);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 72) + 8);
  v7 = *(_OWORD *)(v6 + 80);
  v20 = *(_OWORD *)((char *)a2 + 24);
  v21 = v7;
  LOBYTE(v22) = 0;
  v23 = 0;
  v8 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 5);
  v25 = v8;
  v26 = 0;
  v27 = 0;
  v28 = 2;
  if (v8)
    v26 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v22 = *(_OWORD *)((char *)a2 + 56);
    v23 = 1;
  }
  v9 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_9:
  v30 = a2;
  v11 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)this + 8, (_QWORD *)a2 + 3, (uint64_t *)&v30, (uint64_t)v29);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v9))
LABEL_13:
    v11 = (WTF *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v29[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::openCursor;
  v29[1] = 0;
  isMainThread = WTF::isMainThread(v11);
  v14 = *(_QWORD *)this;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&),WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&>((uint64_t)this, *(unsigned int **)this, v29, &v19, a3);
  if (*(_BYTE *)(v14 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, const WebCore::IDBCursorInfo *))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 8) + 160))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8), &v19, a3);
  v16 = v20;
  do
    v17 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v17 + 1, (unsigned int *)v14));
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v18 = &off_1E3359F80;
  *(_QWORD *)(v18 + 8) = v14;
  *(_QWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = WebCore::IDBClient::IDBConnectionToServer::didOpenCursor;
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 40) = v16;
  v30 = (WebCore::IDBClient::TransactionOperation *)v18;
  WTF::callOnMainThread();
  result = v30;
  v30 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::openCursor(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBCursorInfo *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *, const WebCore::IDBCursorInfo *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 160))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2, a3);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  do
    v7 = __ldaxr((unsigned int *)this);
  while (__stlxr(v7 + 1, (unsigned int *)this));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v8 = &off_1E3359F80;
  v8[1] = this;
  v8[2] = this;
  v8[3] = WebCore::IDBClient::IDBConnectionToServer::didOpenCursor;
  v8[4] = 0;
  v8[5] = v5;
  v8[6] = v6;
  v9 = (uint64_t)v8;
  WTF::callOnMainThread();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::IDBConnectionProxy::iterateCursor(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBClient::TransactionOperation *a2, const WebCore::IDBIterateCursorData *a3)
{
  WebCore::IDBClient::IDBConnectionProxy *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;
  int isMainThread;
  unsigned int *v13;
  WebCore::IDBClient::TransactionOperation *result;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28[3];
  WebCore::IDBClient::TransactionOperation *v29;

  v5 = this;
  v6 = *((_QWORD *)a2 + 2);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 72) + 8);
  v7 = *(_OWORD *)(v6 + 80);
  v19 = *(_OWORD *)((char *)a2 + 24);
  v20 = v7;
  LOBYTE(v21) = 0;
  v22 = 0;
  v8 = *((_QWORD *)a2 + 6);
  v23 = *((_QWORD *)a2 + 5);
  v24 = v8;
  v25 = 0;
  v26 = 0;
  v27 = 2;
  if (v8)
    v25 = *((_BYTE *)a2 + 80);
  if (*((_BYTE *)a2 + 72))
  {
    v21 = *(_OWORD *)((char *)a2 + 56);
    v22 = 1;
  }
  if (*((_BYTE *)a3 + 68))
  {
    v9 = (unsigned __int8 *)this + 19;
    if (__ldaxr((unsigned __int8 *)this + 19))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_10:
    v29 = a2;
    this = (WebCore::IDBClient::IDBConnectionProxy *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>((uint64_t *)v5 + 8, (_QWORD *)a2 + 3, (uint64_t *)&v29, (uint64_t)v28);
    v11 = __ldxr(v9);
    if (v11 == 1)
    {
      if (!__stlxr(0, v9))
        goto LABEL_15;
    }
    else
    {
      __clrex();
    }
    this = (WebCore::IDBClient::IDBConnectionProxy *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)v5 + 19));
  }
LABEL_15:
  v28[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::iterateCursor;
  v28[1] = 0;
  isMainThread = WTF::isMainThread(this);
  v13 = *(unsigned int **)v5;
  if (!isMainThread)
    return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&),WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&>((uint64_t)v5, *(unsigned int **)v5, v28, &v18, a3);
  if (*((_BYTE *)v13 + 16))
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(_QWORD, uint64_t *, const WebCore::IDBIterateCursorData *))(**(_QWORD **)(*((_QWORD *)v13 + 1) + 8) + 168))(*(_QWORD *)(*((_QWORD *)v13 + 1) + 8), &v18, a3);
  v15 = v19;
  do
    v16 = __ldaxr(v13);
  while (__stlxr(v16 + 1, v13));
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v17 = &off_1E3359F80;
  *(_QWORD *)(v17 + 8) = v13;
  *(_QWORD *)(v17 + 16) = v13;
  *(_QWORD *)(v17 + 24) = WebCore::IDBClient::IDBConnectionToServer::didIterateCursor;
  *(_QWORD *)(v17 + 32) = 0;
  *(_OWORD *)(v17 + 40) = v15;
  v29 = (WebCore::IDBClient::TransactionOperation *)v17;
  WTF::callOnMainThread();
  result = v29;
  v29 = 0;
  if (result)
    return (WebCore::IDBClient::TransactionOperation *)(*(uint64_t (**)(WebCore::IDBClient::TransactionOperation *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::iterateCursor(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBIterateCursorData *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBRequestData *, const WebCore::IDBIterateCursorData *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 168))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2, a3);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  do
    v7 = __ldaxr((unsigned int *)this);
  while (__stlxr(v7 + 1, (unsigned int *)this));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v8 = &off_1E3359F80;
  v8[1] = this;
  v8[2] = this;
  v8[3] = WebCore::IDBClient::IDBConnectionToServer::didIterateCursor;
  v8[4] = 0;
  v8[5] = v5;
  v8[6] = v6;
  v9 = (uint64_t)v8;
  WTF::callOnMainThread();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

void WebCore::IDBClient::IDBConnectionProxy::completeOperation(WebCore::IDBClient::IDBConnectionProxy *this, const WebCore::IDBResultData *a2)
{
  unsigned __int8 *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::IDBTransaction **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v18;
  char canCurrentThreadAccessThreadLocalData;
  WebCore::IDBTransaction *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  WebCore::IDBResultData *v25;
  unsigned __int8 *v26;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  __int16 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  WebCore::IDBTransaction *v44;
  unsigned __int8 *v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v56[24];
  __int16 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  v4 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 19);
LABEL_5:
  v7 = *((_QWORD *)this + 8);
  v6 = (uint64_t *)((char *)this + 64);
  v63 = *(_OWORD *)((char *)a2 + 8);
  if (!v7)
  {
LABEL_21:
    v11 = 0;
    goto LABEL_22;
  }
  v8 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(v6, &v63);
  v9 = *v6;
  if (v8)
  {
    if (!v9)
      goto LABEL_8;
    v52 = *(_DWORD *)(v9 - 4);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v52 = *(_DWORD *)(v9 - 4);
    v8 = (uint64_t *)(v9 + 24 * v52);
  }
  v9 += 24 * v52;
LABEL_8:
  if ((uint64_t *)v9 == v8)
    goto LABEL_21;
  v10 = 0;
  v11 = (WebCore::IDBTransaction **)v8[2];
  v8[2] = 0;
  if (!*v6 || (v10 = *v6 + 24 * *(unsigned int *)(*v6 - 4), (uint64_t *)v10 != v8))
  {
    if ((uint64_t *)v10 != v8)
    {
      *v8 = -1;
      v8[2] = 0;
      ++*(_DWORD *)(*v6 - 16);
      v12 = *v6;
      v13 = *v6 ? *(_DWORD *)(v12 - 12) - 1 : -1;
      *(_DWORD *)(v12 - 12) = v13;
      v14 = *v6;
      if (*v6)
      {
        v15 = 6 * *(_DWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
          WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v6, v16 >> 1, 0);
      }
    }
  }
LABEL_22:
  v18 = __ldxr(v4);
  if (v18 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (!v11)
        return;
      goto LABEL_28;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v11)
    return;
LABEL_28:
  canCurrentThreadAccessThreadLocalData = WTF::canCurrentThreadAccessThreadLocalData();
  v20 = v11[2];
  if ((canCurrentThreadAccessThreadLocalData & 1) == 0)
  {
    if (WTF::canCurrentThreadAccessThreadLocalData())
    {
      WebCore::IDBTransaction::operationCompletedOnServer(v11[2], a2, (WebCore::IDBClient::TransactionOperation *)v11);
      goto LABEL_55;
    }
    v26 = (unsigned __int8 *)v20 + 64;
    if (__ldaxr((unsigned __int8 *)v20 + 64))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
LABEL_39:
      v28 = *((_QWORD *)v20 + 5);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
        {
          v55 = v29 - 96;
          v30 = (unsigned int *)(v11 + 1);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
          *((_QWORD *)&v63 + 1) = WebCore::IDBClient::TransactionOperation::transitionToCompleteOnThisThread;
          v64 = 0;
          v56[0] = 0;
          v58 = 0;
          LOBYTE(v59) = 0;
          BYTE8(v59) = 0;
          v60 = 0u;
          v61 = 0u;
          v62 = 0u;
          *(_OWORD *)&v56[8] = 0u;
          v57 = 0;
          WebCore::IDBResultData::isolatedCopy(a2, (const WebCore::IDBResultData *)v56, v25);
          v65 = *(_OWORD *)v56;
          v66 = *(_QWORD *)&v56[16];
          v32 = v57;
          v67 = v57;
          v33 = v58;
          v58 = 0;
          v69 = v59;
          v34 = v62;
          *(_QWORD *)&v62 = 0;
          v73 = *((_QWORD *)&v62 + 1);
          v53 = v61;
          v54 = v60;
          v60 = 0u;
          v61 = 0u;
          v35 = WTF::fastMalloc((WTF *)0x88);
          *(_QWORD *)v35 = off_1E3359800;
          *(_QWORD *)(v35 + 8) = v11;
          *(_QWORD *)(v35 + 16) = WebCore::IDBClient::TransactionOperation::transitionToCompleteOnThisThread;
          *(_QWORD *)(v35 + 24) = 0;
          v36 = v65;
          *(_QWORD *)(v35 + 48) = v66;
          *(_OWORD *)(v35 + 32) = v36;
          *(_WORD *)(v35 + 56) = v32;
          *(_QWORD *)&v63 = 0;
          v68 = 0;
          *(_QWORD *)(v35 + 64) = v33;
          *(_OWORD *)(v35 + 72) = v69;
          *(_OWORD *)(v35 + 88) = v54;
          *(_OWORD *)(v35 + 104) = v53;
          v70 = 0u;
          v71 = 0u;
          v72 = 0;
          *(_OWORD *)(v35 + 120) = v34;
          WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v65);
          v37 = (unsigned int *)v63;
          *(_QWORD *)&v63 = 0;
          if (v37)
          {
            v38 = v37 + 2;
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              atomic_store(1u, v37 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
            }
          }
          WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v56);
          v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v41 = &off_1E3359828;
          v41[1] = v35;
          *(_QWORD *)&v63 = v41;
          BYTE8(v63) = 0;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v55 + 336))(v55, &v63);
          v42 = v63;
          *(_QWORD *)&v63 = 0;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        }
      }
      v43 = __ldxr(v26);
      if (v43 == 1)
      {
        if (!__stlxr(0, v26))
        {
LABEL_55:
          v44 = v11[2];
          v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v24 = &off_1E3359850;
          v24[1] = v11;
          if (WTF::canCurrentThreadAccessThreadLocalData())
          {
            (*(void (**)(_QWORD *))(*v24 + 16))(v24);
            goto LABEL_72;
          }
          v45 = (unsigned __int8 *)v44 + 64;
          if (__ldaxr((unsigned __int8 *)v44 + 64))
          {
            __clrex();
          }
          else if (!__stxr(1u, v45))
          {
LABEL_61:
            v47 = *((_QWORD *)v44 + 5);
            if (v47)
            {
              v48 = *(_QWORD *)(v47 + 8);
              if (v48)
              {
                v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v49 = &off_1E335A090;
                v49[1] = v24;
                *(_QWORD *)&v63 = v49;
                BYTE8(v63) = 0;
                (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v48 - 96) + 336))(v48 - 96, &v63);
                v50 = v63;
                *(_QWORD *)&v63 = 0;
                if (v50)
                  (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
                v24 = 0;
              }
            }
            v51 = __ldxr(v45);
            if (v51 == 1)
            {
              if (!__stlxr(0, v45))
              {
LABEL_71:
                if (!v24)
                  return;
                goto LABEL_72;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v45);
            goto LABEL_71;
          }
          MEMORY[0x19AEA534C]((char *)v44 + 64);
          goto LABEL_61;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v26);
      goto LABEL_55;
    }
    MEMORY[0x19AEA534C]((char *)v20 + 64);
    goto LABEL_39;
  }
  WebCore::IDBTransaction::operationCompletedOnServer(v11[2], a2, (WebCore::IDBClient::TransactionOperation *)v11);
  v21 = (unsigned int *)(v11 + 1);
  do
  {
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (!v23)
  {
    atomic_store(1u, v21);
    v24 = v11;
LABEL_72:
    (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::abortOpenAndUpgradeNeeded(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 8) + 8) + 200))(*(_QWORD *)(*(_QWORD *)(result + 8) + 8));
  return result;
}

unsigned __int8 *WebCore::IDBClient::IDBConnectionProxy::fireVersionChangeEvent(unsigned __int8 *result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  char v21;
  int v22;
  int isMainThread;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  __int16 v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t (*v40)(uint64_t);
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t (*v51)(uint64_t);
  int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  bmalloc::api *v56;
  void *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;

  v7 = result;
  v8 = result + 16;
  if (__ldaxr(result + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](result + 16);
LABEL_5:
  v10 = *((_QWORD *)v7 + 3);
  if (!v10)
  {
LABEL_14:
    v18 = 0;
    goto LABEL_15;
  }
  v11 = *(_DWORD *)(v10 - 8);
  v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = *(_QWORD *)(v10 + 16 * v15);
  if (v16 != a2)
  {
    v17 = 1;
    while (v16)
    {
      v15 = ((_DWORD)v15 + v17) & v11;
      v16 = *(_QWORD *)(v10 + 16 * v15);
      ++v17;
      if (v16 == a2)
        goto LABEL_10;
    }
    goto LABEL_14;
  }
LABEL_10:
  v18 = *(_QWORD *)(v10 + 16 * v15 + 8);
  if (!v18)
  {
LABEL_15:
    v21 = 1;
    goto LABEL_16;
  }
  v19 = (unsigned int *)(v18 + 24);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  v21 = 0;
LABEL_16:
  v22 = __ldxr(v8);
  if (v22 != 1)
  {
    __clrex();
LABEL_21:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if ((v21 & 1) != 0)
      return result;
    goto LABEL_22;
  }
  if (__stlxr(0, v8))
    goto LABEL_21;
  if ((v21 & 1) != 0)
    return result;
LABEL_22:
  if (*(_BYTE *)(v18 + 176))
  {
    v59 = a2;
    LOBYTE(v58) = 1;
    v61 = WebCore::IDBClient::IDBConnectionToServer::didFireVersionChangeEvent;
    v62 = 0;
    isMainThread = WTF::isMainThread((WTF *)result);
    v24 = *(_QWORD *)v7;
    if (isMainThread)
    {
      if (*(_BYTE *)(v24 + 16))
        (*(void (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v24 + 8) + 8) + 208))(*(_QWORD *)(*(_QWORD *)(v24 + 8) + 8), a2, a3, 1);
    }
    else
    {
      WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer&>((uint64_t)v7, (unsigned int *)v24, (uint64_t *)&v61, &v59, a3, (char *)&v58);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOWORD(v59) = 280;
    v25 = v58;
    if (v58)
      *(_DWORD *)v58 += 2;
    v60 = v25;
    if (WTF::canCurrentThreadAccessThreadLocalData())
    {
      WebCore::IDBDatabase::connectionToServerLost(v18, (unsigned __int8 *)&v59);
      goto LABEL_52;
    }
    v27 = (unsigned __int8 *)(v18 + 64);
    if (__ldaxr((unsigned __int8 *)(v18 + 64)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v27))
    {
      goto LABEL_39;
    }
    MEMORY[0x19AEA534C](v18 + 64);
LABEL_39:
    v31 = *(_QWORD *)(v18 + 40);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 8);
      if (v32)
      {
        v33 = v32 - 96;
        v34 = (unsigned int *)(v18 + 24);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
        v36 = v59;
        v37 = v60;
        if (v60)
          *(_DWORD *)v60 += 2;
        v38 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)v38 = &off_1E3359C78;
        *(_QWORD *)(v38 + 8) = v18;
        *(_QWORD *)(v38 + 16) = WebCore::IDBDatabase::connectionToServerLost;
        *(_QWORD *)(v38 + 24) = 0;
        *(_WORD *)(v38 + 32) = v36;
        *(_QWORD *)(v38 + 40) = v37;
        v39 = (uint64_t (*)(uint64_t))WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v39 = &off_1E3359CA0;
        *((_QWORD *)v39 + 1) = v38;
        v61 = v39;
        LOBYTE(v62) = 0;
        (*(void (**)(uint64_t, uint64_t (**)(uint64_t)))(*(_QWORD *)v33 + 336))(v33, &v61);
        v40 = v61;
        v61 = 0;
        if (v40)
          (*(void (**)(uint64_t (*)(uint64_t)))(*(_QWORD *)v40 + 8))(v40);
      }
    }
    v41 = __ldxr(v27);
    if (v41 == 1)
    {
      if (!__stlxr(0, v27))
        goto LABEL_52;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v18 + 64));
LABEL_52:
    v42 = v60;
    v60 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v26);
      else
        *(_DWORD *)v42 -= 2;
    }
    result = (unsigned __int8 *)v58;
    v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_73;
  }
  result = (unsigned __int8 *)WTF::canCurrentThreadAccessThreadLocalData();
  if ((_DWORD)result)
  {
    result = (unsigned __int8 *)WebCore::IDBDatabase::fireVersionChangeEvent((WebCore::IDBDatabase *)v18, (const WebCore::IDBResourceIdentifier *)a3, a4);
    goto LABEL_73;
  }
  v29 = (unsigned __int8 *)(v18 + 64);
  if (__ldaxr((unsigned __int8 *)(v18 + 64)))
  {
    __clrex();
LABEL_59:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v18 + 64);
    goto LABEL_60;
  }
  if (__stxr(1u, v29))
    goto LABEL_59;
LABEL_60:
  v43 = *(_QWORD *)(v18 + 40);
  if (v43)
  {
    v44 = *(_QWORD *)(v43 + 8);
    if (v44)
    {
      v45 = v44 - 96;
      v46 = (unsigned int *)(v18 + 24);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 + 1, v46));
      v48 = *a3;
      v49 = a3[1];
      v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
      *v50 = &off_1E3359CC8;
      v50[1] = v18;
      v50[2] = WebCore::IDBDatabase::fireVersionChangeEvent;
      v50[3] = 0;
      v50[4] = v48;
      v50[5] = v49;
      v50[6] = a4;
      v51 = (uint64_t (*)(uint64_t))WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v51 = &off_1E3359CF0;
      *((_QWORD *)v51 + 1) = v50;
      v61 = v51;
      LOBYTE(v62) = 0;
      (*(void (**)(uint64_t, uint64_t (**)(uint64_t)))(*(_QWORD *)v45 + 336))(v45, &v61);
      result = (unsigned __int8 *)v61;
      v61 = 0;
      if (result)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    }
  }
  v52 = __ldxr(v29);
  if (v52 != 1)
  {
    __clrex();
    goto LABEL_70;
  }
  if (__stlxr(0, v29))
LABEL_70:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v18 + 64));
LABEL_73:
  v53 = (unsigned int *)(v18 + 24);
  do
  {
    v54 = __ldaxr(v53);
    v55 = v54 - 1;
  }
  while (__stlxr(v55, v53));
  if (!v55)
  {
    atomic_store(1u, (unsigned int *)(v18 + 24));
    WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v18);
    return (unsigned __int8 *)bmalloc::api::isoDeallocate(v56, v57);
  }
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::didFireVersionChangeEvent(WTF *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12[2];

  v10 = a4;
  v11 = a2;
  v12[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::didFireVersionChangeEvent;
  v12[1] = 0;
  result = WTF::isMainThread(a1);
  v9 = *(_QWORD *)a1;
  if (!(_DWORD)result)
    return WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer&>((uint64_t)a1, (unsigned int *)v9, v12, &v11, a3, &v10);
  if (*(_BYTE *)(v9 + 16))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8)
                                                                          + 208))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8), a2, a3, a4);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didFireVersionChangeEvent(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 8) + 8) + 208))(*(_QWORD *)(*(_QWORD *)(result + 8) + 8));
  return result;
}

_QWORD *WebCore::IDBClient::IDBConnectionProxy::notifyOpenDBRequestBlocked(WebCore::IDBClient::IDBConnectionProxy *this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v8;
  _QWORD *result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  char v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  char v30;

  v8 = (unsigned __int8 *)this + 17;
  if (__ldaxr((unsigned __int8 *)this + 17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 17);
LABEL_5:
  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 4), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (!result)
  {
    v11 = 0;
    goto LABEL_11;
  }
  v11 = result[2];
  if (!v11)
  {
LABEL_11:
    v14 = 1;
    goto LABEL_12;
  }
  v12 = (unsigned int *)(v11 + 60);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = 0;
LABEL_12:
  v15 = __ldxr(v8);
  if (v15 != 1)
  {
    __clrex();
LABEL_17:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if ((v14 & 1) != 0)
      return result;
    goto LABEL_18;
  }
  if (__stlxr(0, v8))
    goto LABEL_17;
  if ((v14 & 1) != 0)
    return result;
LABEL_18:
  result = (_QWORD *)WTF::canCurrentThreadAccessThreadLocalData();
  if ((_DWORD)result)
  {
    result = WebCore::IDBOpenDBRequest::requestBlocked((WebCore::IDBOpenDBRequest *)v11, a3, a4);
    goto LABEL_35;
  }
  v16 = (unsigned __int8 *)(v11 + 56);
  if (__ldaxr((unsigned __int8 *)(v11 + 56)))
  {
    __clrex();
LABEL_23:
    result = (_QWORD *)MEMORY[0x19AEA534C](v11 + 56);
    goto LABEL_24;
  }
  if (__stxr(1u, v16))
    goto LABEL_23;
LABEL_24:
  v18 = *(_QWORD *)(v11 + 32);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
    {
      v20 = v19 - 96;
      v21 = (unsigned int *)(v11 + 60);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
      *v23 = &off_1E3359D40;
      v23[1] = v11;
      v23[2] = WebCore::IDBOpenDBRequest::requestBlocked;
      v23[3] = 0;
      v23[4] = a3;
      v23[5] = a4;
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v24 = &off_1E3359D68;
      v24[1] = v23;
      v29 = v24;
      v30 = 0;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v20 + 336))(v20, &v29);
      result = v29;
      v29 = 0;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  v25 = __ldxr(v16);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, v16))
LABEL_34:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 56));
LABEL_35:
  v26 = (unsigned int *)(v11 + 60);
  do
  {
    v27 = __ldaxr(v26);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v26));
  if (!v28)
  {
    atomic_store(1u, (unsigned int *)(v11 + 60));
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  }
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::openDBRequestCancelled(WebCore::IDBClient::IDBConnectionProxy *this, const WebCore::IDBOpenRequestData *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6[2];

  v6[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::openDBRequestCancelled;
  v6[1] = 0;
  result = WTF::isMainThread(this);
  v5 = *(_QWORD *)this;
  if (!(_DWORD)result)
    return WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData const&>((uint64_t)this, (unsigned int *)v5, v6, a2);
  if (*(_BYTE *)(v5 + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBOpenRequestData *))(**(_QWORD **)(*(_QWORD *)(v5 + 8)
                                                                                                + 8)
                                                                                  + 216))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8), a2);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::openDBRequestCancelled(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 8) + 8) + 216))(*(_QWORD *)(*(_QWORD *)(result + 8) + 8));
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::establishTransaction(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBTransaction *a2)
{
  unsigned __int8 *v4;
  WebCore::IDBTransactionInfo *v6;
  WTF *v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[3];
  WebCore::IDBTransaction *v13;

  v4 = (unsigned __int8 *)this + 18;
  if (__ldaxr((unsigned __int8 *)this + 18))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 18);
LABEL_5:
  v6 = (WebCore::IDBTransaction *)((char *)a2 + 80);
  v13 = a2;
  v7 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBTransaction*>((uint64_t *)this + 5, (WebCore::IDBTransaction *)((char *)a2 + 80), (uint64_t *)&v13, (uint64_t)v12);
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v4))
LABEL_9:
    v7 = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 120);
  v13 = (WebCore::IDBTransaction *)v9;
  v12[0] = WebCore::IDBClient::IDBConnectionToServer::establishTransaction;
  v12[1] = 0;
  result = WTF::isMainThread(v7);
  v11 = *(_QWORD *)this;
  if (!(_DWORD)result)
    return WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,WebCore::IDBTransactionInfo const&>((uint64_t)this, (unsigned int *)v11, (uint64_t)v12, (uint64_t *)&v13, v6);
  if (*(_BYTE *)(v11 + 16))
    return (*(uint64_t (**)(_QWORD, uint64_t, WebCore::IDBTransactionInfo *))(**(_QWORD **)(*(_QWORD *)(v11 + 8) + 8)
                                                                                     + 176))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8), v9, v6);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::establishTransaction(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 8) + 8) + 176))(*(_QWORD *)(*(_QWORD *)(result + 8) + 8));
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::didStartTransaction(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t result;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  __int16 v19;
  _DWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  bmalloc::api *v27;
  void *v28;
  _QWORD *v29;
  char v30;

  v6 = (unsigned __int8 *)(a1 + 18);
  if (__ldaxr((unsigned __int8 *)(a1 + 18)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 18);
LABEL_5:
  result = (uint64_t)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::take((uint64_t *)(a1 + 40), a2, (uint64_t *)&v29);
  v9 = (uint64_t)v29;
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
LABEL_10:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (!v9)
      return result;
    goto LABEL_11;
  }
  if (__stlxr(0, v6))
    goto LABEL_10;
  if (!v9)
    return result;
LABEL_11:
  result = WTF::canCurrentThreadAccessThreadLocalData();
  if ((_DWORD)result)
  {
    result = (uint64_t)WebCore::IDBTransaction::didStart(v9, a3);
    goto LABEL_30;
  }
  v12 = (unsigned __int8 *)(v9 + 64);
  if (__ldaxr((unsigned __int8 *)(v9 + 64)))
  {
    __clrex();
LABEL_16:
    result = MEMORY[0x19AEA534C](v9 + 64);
    goto LABEL_17;
  }
  if (__stxr(1u, v12))
    goto LABEL_16;
LABEL_17:
  v14 = *(_QWORD *)(v9 + 40);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = v15 - 96;
      v17 = (unsigned int *)(v9 + 24);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      v19 = *(_WORD *)a3;
      v20 = *(_DWORD **)(a3 + 8);
      if (v20)
        *v20 += 2;
      v21 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v21 = &off_1E3359DB8;
      *(_QWORD *)(v21 + 8) = v9;
      *(_QWORD *)(v21 + 16) = WebCore::IDBTransaction::didStart;
      *(_QWORD *)(v21 + 24) = 0;
      *(_WORD *)(v21 + 32) = v19;
      *(_QWORD *)(v21 + 40) = v20;
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v22 = &off_1E3359DE0;
      v22[1] = v21;
      v29 = v22;
      v30 = 0;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v16 + 336))(v16, &v29);
      result = (uint64_t)v29;
      v29 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  v23 = __ldxr(v12);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, v12))
LABEL_29:
    result = WTF::Lock::unlockSlow((WTF::Lock *)(v9 + 64));
LABEL_30:
  v24 = (unsigned int *)(v9 + 24);
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, (unsigned int *)(v9 + 24));
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v9, v11);
    return bmalloc::api::isoDeallocate(v27, v28);
  }
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::commitTransaction(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBTransaction *a2, uint64_t a3)
{
  unsigned __int8 *v5;
  WTF *v7;
  int v8;
  int isMainThread;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16[2];
  uint64_t v17;

  v15 = a3;
  v5 = (unsigned __int8 *)this + 18;
  if (__ldaxr((unsigned __int8 *)this + 18))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 18);
LABEL_5:
  v16[0] = (uint64_t)a2;
  v7 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBTransaction*>((uint64_t *)this + 6, (WebCore::IDBTransaction *)((char *)a2 + 80), v16, (uint64_t)&v14);
  v8 = __ldxr(v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v5))
LABEL_9:
    v7 = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v16[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::commitTransaction;
  v16[1] = 0;
  isMainThread = WTF::isMainThread(v7);
  v10 = *(_QWORD *)this;
  if (!isMainThread)
    return WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &>((uint64_t)this, *(unsigned int **)this, v16, (uint64_t *)a2 + 10, &v15);
  if (*(_BYTE *)(v10 + 16))
    return (*(uint64_t (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v10 + 8) + 8) + 48))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8), (char *)a2 + 80, v15);
  do
    v12 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v12 + 1, (unsigned int *)v10));
  v14 = *((_OWORD *)a2 + 5);
  v13 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v13 = &off_1E3359FA8;
  *(_QWORD *)(v13 + 8) = v10;
  *(_QWORD *)(v13 + 16) = v10;
  *(_OWORD *)(v13 + 24) = v14;
  v17 = v13;
  WTF::callOnMainThread();
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::commitTransaction(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBResourceIdentifier *a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBResourceIdentifier *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8)
                                                                                     + 48))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
  do
    v4 = __ldaxr((unsigned int *)this);
  while (__stlxr(v4 + 1, (unsigned int *)this));
  v6 = *(_OWORD *)a2;
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v5 = &off_1E3359FA8;
  *(_QWORD *)(v5 + 8) = this;
  *(_QWORD *)(v5 + 16) = this;
  *(_OWORD *)(v5 + 24) = v6;
  v7 = v5;
  WTF::callOnMainThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::didCommitTransaction(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t result;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  __int16 v19;
  _DWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  bmalloc::api *v27;
  void *v28;
  _QWORD *v29;
  char v30;

  v6 = (unsigned __int8 *)(a1 + 18);
  if (__ldaxr((unsigned __int8 *)(a1 + 18)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 18);
LABEL_5:
  result = (uint64_t)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::take((uint64_t *)(a1 + 48), a2, (uint64_t *)&v29);
  v9 = (uint64_t)v29;
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
LABEL_10:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (!v9)
      return result;
    goto LABEL_11;
  }
  if (__stlxr(0, v6))
    goto LABEL_10;
  if (!v9)
    return result;
LABEL_11:
  result = WTF::canCurrentThreadAccessThreadLocalData();
  if ((_DWORD)result)
  {
    result = (uint64_t)WebCore::IDBTransaction::didCommit((WebCore::IDBTransaction *)v9, a3);
    goto LABEL_30;
  }
  v12 = (unsigned __int8 *)(v9 + 64);
  if (__ldaxr((unsigned __int8 *)(v9 + 64)))
  {
    __clrex();
LABEL_16:
    result = MEMORY[0x19AEA534C](v9 + 64);
    goto LABEL_17;
  }
  if (__stxr(1u, v12))
    goto LABEL_16;
LABEL_17:
  v14 = *(_QWORD *)(v9 + 40);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = v15 - 96;
      v17 = (unsigned int *)(v9 + 24);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      v19 = *(_WORD *)a3;
      v20 = *(_DWORD **)(a3 + 8);
      if (v20)
        *v20 += 2;
      v21 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v21 = &off_1E3359DB8;
      *(_QWORD *)(v21 + 8) = v9;
      *(_QWORD *)(v21 + 16) = WebCore::IDBTransaction::didCommit;
      *(_QWORD *)(v21 + 24) = 0;
      *(_WORD *)(v21 + 32) = v19;
      *(_QWORD *)(v21 + 40) = v20;
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v22 = &off_1E3359DE0;
      v22[1] = v21;
      v29 = v22;
      v30 = 0;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v16 + 336))(v16, &v29);
      result = (uint64_t)v29;
      v29 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  v23 = __ldxr(v12);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, v12))
LABEL_29:
    result = WTF::Lock::unlockSlow((WTF::Lock *)(v9 + 64));
LABEL_30:
  v24 = (unsigned int *)(v9 + 24);
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, (unsigned int *)(v9 + 24));
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v9, v11);
    return bmalloc::api::isoDeallocate(v27, v28);
  }
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::abortTransaction(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBTransaction *a2)
{
  unsigned __int8 *v4;
  WTF *v6;
  int v7;
  int isMainThread;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14[2];
  uint64_t v15;

  v4 = (unsigned __int8 *)this + 18;
  if (__ldaxr((unsigned __int8 *)this + 18))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 18);
LABEL_5:
  v14[0] = (uint64_t)a2;
  v6 = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBTransaction*>((uint64_t *)this + 7, (WebCore::IDBTransaction *)((char *)a2 + 80), v14, (uint64_t)&v13);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v4))
LABEL_9:
    v6 = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v14[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::abortTransaction;
  v14[1] = 0;
  isMainThread = WTF::isMainThread(v6);
  v9 = *(_QWORD *)this;
  if (!isMainThread)
    return WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBResourceIdentifier const&),WebCore::IDBResourceIdentifier const&>((uint64_t)this, *(unsigned int **)this, v14, (uint64_t *)a2 + 10);
  if (*(_BYTE *)(v9 + 16))
    return (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8), (char *)a2 + 80);
  do
    v11 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v11 + 1, (unsigned int *)v9));
  v13 = *((_OWORD *)a2 + 5);
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v12 = &off_1E3359FD0;
  *(_QWORD *)(v12 + 8) = v9;
  *(_QWORD *)(v12 + 16) = v9;
  *(_OWORD *)(v12 + 24) = v13;
  v15 = v12;
  WTF::callOnMainThread();
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::abortTransaction(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBResourceIdentifier *a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD, const WebCore::IDBResourceIdentifier *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8)
                                                                                     + 40))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
  do
    v4 = __ldaxr((unsigned int *)this);
  while (__stlxr(v4 + 1, (unsigned int *)this));
  v6 = *(_OWORD *)a2;
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v5 = &off_1E3359FD0;
  *(_QWORD *)(v5 + 8) = this;
  *(_QWORD *)(v5 + 16) = this;
  *(_OWORD *)(v5 + 24) = v6;
  v7 = v5;
  WTF::callOnMainThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::didAbortTransaction(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t result;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  __int16 v19;
  _DWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  bmalloc::api *v27;
  void *v28;
  _QWORD *v29;
  char v30;

  v6 = (unsigned __int8 *)(a1 + 18);
  if (__ldaxr((unsigned __int8 *)(a1 + 18)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 18);
LABEL_5:
  result = (uint64_t)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::take((uint64_t *)(a1 + 56), a2, (uint64_t *)&v29);
  v9 = (uint64_t)v29;
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
LABEL_10:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (!v9)
      return result;
    goto LABEL_11;
  }
  if (__stlxr(0, v6))
    goto LABEL_10;
  if (!v9)
    return result;
LABEL_11:
  result = WTF::canCurrentThreadAccessThreadLocalData();
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v9 + 136) != 4)
    {
      result = WebCore::IDBTransaction::notifyDidAbort((WebCore::IDBDatabase **)v9, a3);
      *(_BYTE *)(v9 + 136) = 4;
    }
    goto LABEL_31;
  }
  v12 = (unsigned __int8 *)(v9 + 64);
  if (__ldaxr((unsigned __int8 *)(v9 + 64)))
  {
    __clrex();
LABEL_17:
    result = MEMORY[0x19AEA534C](v9 + 64);
    goto LABEL_18;
  }
  if (__stxr(1u, v12))
    goto LABEL_17;
LABEL_18:
  v14 = *(_QWORD *)(v9 + 40);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = v15 - 96;
      v17 = (unsigned int *)(v9 + 24);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      v19 = *(_WORD *)a3;
      v20 = *(_DWORD **)(a3 + 8);
      if (v20)
        *v20 += 2;
      v21 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v21 = &off_1E3359DB8;
      *(_QWORD *)(v21 + 8) = v9;
      *(_QWORD *)(v21 + 16) = WebCore::IDBTransaction::didAbort;
      *(_QWORD *)(v21 + 24) = 0;
      *(_WORD *)(v21 + 32) = v19;
      *(_QWORD *)(v21 + 40) = v20;
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v22 = &off_1E3359DE0;
      v22[1] = v21;
      v29 = v22;
      v30 = 0;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v16 + 336))(v16, &v29);
      result = (uint64_t)v29;
      v29 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  v23 = __ldxr(v12);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v12))
LABEL_30:
    result = WTF::Lock::unlockSlow((WTF::Lock *)(v9 + 64));
LABEL_31:
  v24 = (unsigned int *)(v9 + 24);
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, (unsigned int *)(v9 + 24));
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v9, v11);
    return bmalloc::api::isoDeallocate(v27, v28);
  }
  return result;
}

BOOL WebCore::IDBClient::IDBConnectionProxy::hasRecordOfTransaction(WebCore::IDBClient::IDBConnectionProxy *this, const WebCore::IDBTransaction *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;

  v8 = *((_OWORD *)a2 + 5);
  v4 = *((_QWORD *)this + 5);
  v3 = (uint64_t *)((char *)this + 40);
  if (v4
    && WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(v3, &v8)|| *((_QWORD *)this + 6)&& WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>((uint64_t *)this + 6, &v8))
  {
    return 1;
  }
  v7 = *((_QWORD *)this + 7);
  v6 = (uint64_t *)((char *)this + 56);
  return v7
      && WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(v6, &v8) != 0;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::didFinishHandlingVersionChangeTransaction(WTF *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[2];

  v5 = (uint64_t *)(a3 + 80);
  v8 = a2;
  v9[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::didFinishHandlingVersionChangeTransaction;
  v9[1] = 0;
  result = WTF::isMainThread(a1);
  v7 = *(_QWORD *)a1;
  if (!(_DWORD)result)
    return WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,WebCore::IDBResourceIdentifier const&>((uint64_t)a1, (unsigned int *)v7, v9, &v8, v5);
  if (*(_BYTE *)(v7 + 16))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v7 + 8) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8), a2, v5);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didFinishHandlingVersionChangeTransaction(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 8) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(result + 8) + 8));
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::databaseConnectionPendingClose(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBDatabase *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];

  v3 = *((_QWORD *)a2 + 15);
  v6 = v3;
  v7[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::databaseConnectionPendingClose;
  v7[1] = 0;
  result = WTF::isMainThread(this);
  v5 = *(_QWORD *)this;
  if (!(_DWORD)result)
    return WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)this, (unsigned int *)v5, v7, &v6);
  if (*(_BYTE *)(v5 + 16))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 8) + 184))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8), v3);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::databaseConnectionPendingClose(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 8) + 8) + 184))(*(_QWORD *)(*(_QWORD *)(result + 8) + 8));
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::databaseConnectionClosed(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBDatabase *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];

  v3 = *((_QWORD *)a2 + 15);
  v6 = v3;
  v7[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::databaseConnectionClosed;
  v7[1] = 0;
  result = WTF::isMainThread(this);
  v5 = *(_QWORD *)this;
  if (!(_DWORD)result)
    return WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)this, (unsigned int *)v5, v7, &v6);
  if (*(_BYTE *)(v5 + 16))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 8) + 192))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8), v3);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::databaseConnectionClosed(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 8) + 8) + 192))(*(_QWORD *)(*(_QWORD *)(result + 8) + 8));
  return result;
}

unsigned __int8 *WebCore::IDBClient::IDBConnectionProxy::didCloseFromServer(unsigned __int8 *result, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  char v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  __int16 v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  bmalloc::api *v36;
  void *v37;
  unsigned __int8 *v38;
  char v39;

  v5 = result;
  v6 = result + 16;
  if (__ldaxr(result + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](result + 16);
LABEL_5:
  v8 = *((_QWORD *)v5 + 3);
  if (!v8)
  {
LABEL_14:
    v16 = 0;
    goto LABEL_15;
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(_QWORD *)(v8 + 16 * v13);
  if (v14 != a2)
  {
    v15 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(_QWORD *)(v8 + 16 * v13);
      ++v15;
      if (v14 == a2)
        goto LABEL_10;
    }
    goto LABEL_14;
  }
LABEL_10:
  v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
  if (!v16)
  {
LABEL_15:
    v19 = 1;
    goto LABEL_16;
  }
  v17 = (unsigned int *)(v16 + 24);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v19 = 0;
LABEL_16:
  v20 = __ldxr(v6);
  if (v20 != 1)
  {
    __clrex();
LABEL_21:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if ((v19 & 1) != 0)
      return result;
    goto LABEL_22;
  }
  if (__stlxr(0, v6))
    goto LABEL_21;
  if ((v19 & 1) != 0)
    return result;
LABEL_22:
  result = (unsigned __int8 *)WTF::canCurrentThreadAccessThreadLocalData();
  if ((_DWORD)result)
  {
    result = (unsigned __int8 *)WebCore::IDBDatabase::connectionToServerLost(v16, a3);
    goto LABEL_41;
  }
  v21 = (unsigned __int8 *)(v16 + 64);
  if (__ldaxr((unsigned __int8 *)(v16 + 64)))
  {
    __clrex();
LABEL_27:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v16 + 64);
    goto LABEL_28;
  }
  if (__stxr(1u, v21))
    goto LABEL_27;
LABEL_28:
  v23 = *(_QWORD *)(v16 + 40);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 8);
    if (v24)
    {
      v25 = v24 - 96;
      v26 = (unsigned int *)(v16 + 24);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      v28 = *(_WORD *)a3;
      v29 = (_DWORD *)*((_QWORD *)a3 + 1);
      if (v29)
        *v29 += 2;
      v30 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v30 = &off_1E3359C78;
      *(_QWORD *)(v30 + 8) = v16;
      *(_QWORD *)(v30 + 16) = WebCore::IDBDatabase::didCloseFromServer;
      *(_QWORD *)(v30 + 24) = 0;
      *(_WORD *)(v30 + 32) = v28;
      *(_QWORD *)(v30 + 40) = v29;
      v31 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v31 = &off_1E3359EA8;
      *((_QWORD *)v31 + 1) = v30;
      v38 = v31;
      v39 = 0;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v25 + 336))(v25, &v38);
      result = v38;
      v38 = 0;
      if (result)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    }
  }
  v32 = __ldxr(v21);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, v21))
LABEL_40:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v16 + 64));
LABEL_41:
  v33 = (unsigned int *)(v16 + 24);
  do
  {
    v34 = __ldaxr(v33);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, v33));
  if (!v35)
  {
    atomic_store(1u, (unsigned int *)(v16 + 24));
    WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v16);
    return (unsigned __int8 *)bmalloc::api::isoDeallocate(v36, v37);
  }
  return result;
}

void WebCore::IDBClient::IDBConnectionProxy::connectionToServerLost(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  __int16 v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  bmalloc::api *v50;
  void *v51;
  unsigned __int8 *v52;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  uint64_t v59;
  unsigned int v60;
  _OWORD *v61;
  int v63;
  unint64_t *v64;
  unint64_t *v65;
  uint64_t *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  char v71;
  int v72;
  _DWORD *v73;
  unsigned __int8 *v74;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned __int8 *v85;
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  _OWORD *v90;
  uint64_t v91;
  _OWORD *v92;
  _OWORD *v93;
  WTF *v94;
  unsigned int v95;
  _OWORD *v96;
  int v98;
  WTF *v99;
  WTF *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  unint64_t *v114;
  WTF *v115;
  __int128 v116;
  __int16 v117;
  _DWORD *v118;
  char v119;
  char v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  _QWORD *v125;
  char v126;

  v2 = a2;
  v3 = a1;
  v4 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 16);
LABEL_5:
  v6 = *(_QWORD *)(v3 + 24);
  if (!v6)
  {
    v7 = 0;
    v8 = 0;
LABEL_7:
    v9 = (_QWORD *)(v6 + 16 * v8);
    goto LABEL_8;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v9 = (_QWORD *)(v6 + 16 * v8);
  if (!*(_DWORD *)(v6 - 12))
  {
    v7 = (_QWORD *)(v6 + 16 * v8);
    goto LABEL_7;
  }
  v7 = *(_QWORD **)(v3 + 24);
  if ((_DWORD)v8)
  {
    v104 = 16 * v8;
    v7 = *(_QWORD **)(v3 + 24);
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      v7 += 2;
      v104 -= 16;
      if (!v104)
      {
        v7 = v9;
        break;
      }
    }
  }
LABEL_8:
  if (!v6)
  {
    v10 = 0;
LABEL_10:
    v11 = 0;
    goto LABEL_11;
  }
  v10 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  v109 = *(unsigned int *)(v6 - 12);
  if (!(_DWORD)v109)
    goto LABEL_10;
  if (v109 >> 29)
  {
    __break(0xC471u);
    goto LABEL_235;
  }
  v11 = WTF::fastMalloc((WTF *)(8 * v109));
LABEL_11:
  if (v10 == v7)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = v7 + 2;
      *(_QWORD *)(v11 + 8 * v12) = *v7;
      v7 = v9;
      if (v13 != v9)
      {
        v7 = v13;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          if (v7 == v9)
          {
            v7 = v9;
            break;
          }
        }
      }
      ++v12;
    }
    while (v7 != v10);
  }
  v14 = __ldxr(v4);
  v112 = (uint64_t *)v11;
  if (v14 != 1)
  {
    __clrex();
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (!v12)
      goto LABEL_74;
    goto LABEL_27;
  }
  if (__stlxr(0, v4))
    goto LABEL_26;
  if (v12)
  {
LABEL_27:
    v15 = v112;
    v16 = &v112[v12];
    v113 = v16;
    do
    {
      v17 = *v15;
      if (__ldaxr(v4))
      {
        __clrex();
      }
      else if (!__stxr(1u, v4))
      {
        goto LABEL_32;
      }
      MEMORY[0x19AEA534C](v4);
LABEL_32:
      v19 = *(_QWORD *)(v3 + 24);
      if (!v19)
        goto LABEL_41;
      v20 = *(_DWORD *)(v19 - 8);
      v21 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = *(_QWORD *)(v19 + 16 * v24);
      if (v25 != v17)
      {
        v26 = 1;
        while (v25)
        {
          v24 = ((_DWORD)v24 + v26) & v20;
          v25 = *(_QWORD *)(v19 + 16 * v24);
          ++v26;
          if (v25 == v17)
            goto LABEL_37;
        }
LABEL_41:
        v27 = 0;
LABEL_42:
        v30 = 1;
        goto LABEL_43;
      }
LABEL_37:
      v27 = *(_QWORD *)(v19 + 16 * v24 + 8);
      if (!v27)
        goto LABEL_42;
      v28 = (unsigned int *)(v27 + 24);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
      v30 = 0;
LABEL_43:
      v31 = __ldxr(v4);
      if (v31 == 1)
      {
        if (!__stlxr(0, v4))
        {
          if ((v30 & 1) == 0)
            goto LABEL_49;
          goto LABEL_73;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if ((v30 & 1) == 0)
      {
LABEL_49:
        if (WTF::canCurrentThreadAccessThreadLocalData())
        {
          WebCore::IDBDatabase::connectionToServerLost(v27, (unsigned __int8 *)v2);
          goto LABEL_69;
        }
        v32 = (unsigned __int8 *)(v27 + 64);
        if (__ldaxr((unsigned __int8 *)(v27 + 64)))
        {
          __clrex();
          goto LABEL_54;
        }
        if (__stxr(1u, v32))
LABEL_54:
          MEMORY[0x19AEA534C](v27 + 64);
        v34 = *(_QWORD *)(v27 + 40);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 8);
          if (v35)
          {
            v36 = v3;
            v37 = v35 - 96;
            v38 = (unsigned int *)(v27 + 24);
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 + 1, v38));
            v40 = *(_WORD *)v2;
            v41 = v2;
            v42 = (_DWORD *)*((_QWORD *)v2 + 1);
            if (v42)
              *v42 += 2;
            v43 = WTF::fastMalloc((WTF *)0x30);
            *(_QWORD *)v43 = &off_1E3359C78;
            *(_QWORD *)(v43 + 8) = v27;
            *(_QWORD *)(v43 + 16) = WebCore::IDBDatabase::connectionToServerLost;
            *(_QWORD *)(v43 + 24) = 0;
            *(_WORD *)(v43 + 32) = v40;
            *(_QWORD *)(v43 + 40) = v42;
            v44 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v44 = &off_1E3359EA8;
            *((_QWORD *)v44 + 1) = v43;
            v115 = v44;
            LOBYTE(v116) = 0;
            (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v37 + 336))(v37, &v115);
            v45 = v115;
            v115 = 0;
            if (v45)
              (*(void (**)(WTF *))(*(_QWORD *)v45 + 8))(v45);
            v3 = v36;
            v2 = v41;
            v16 = v113;
          }
        }
        v46 = __ldxr(v32);
        if (v46 == 1)
        {
          if (!__stlxr(0, v32))
            goto LABEL_69;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v27 + 64));
LABEL_69:
        v47 = (unsigned int *)(v27 + 24);
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          atomic_store(1u, (unsigned int *)(v27 + 24));
          WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v27);
          bmalloc::api::isoDeallocate(v50, v51);
        }
      }
LABEL_73:
      ++v15;
    }
    while (v15 != v16);
  }
LABEL_74:
  v52 = (unsigned __int8 *)(v3 + 17);
  if (__ldaxr((unsigned __int8 *)(v3 + 17)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v52))
  {
    goto LABEL_78;
  }
  MEMORY[0x19AEA534C](v3 + 17);
LABEL_78:
  v54 = *(_QWORD *)(v3 + 32);
  if (!v54)
  {
    v55 = 0;
    LODWORD(v56) = 0;
LABEL_80:
    v57 = (_OWORD *)(v54 + 24 * v56);
    goto LABEL_81;
  }
  v56 = *(unsigned int *)(v54 - 4);
  v57 = (_OWORD *)(v54 + 24 * v56);
  if (!*(_DWORD *)(v54 - 12))
  {
    v55 = (_OWORD *)(v54 + 24 * v56);
    goto LABEL_80;
  }
  v55 = *(_OWORD **)(v3 + 32);
  if ((_DWORD)v56)
  {
    v105 = 24 * v56;
    v55 = *(_OWORD **)(v3 + 32);
    while (*v55 == 0 || *(_QWORD *)v55 == -1)
    {
      v55 = (_OWORD *)((char *)v55 + 24);
      v105 -= 24;
      if (!v105)
      {
        v55 = v57;
        break;
      }
    }
  }
LABEL_81:
  if (!v54)
  {
    v58 = 0;
LABEL_83:
    v59 = 0;
    goto LABEL_84;
  }
  v58 = (_OWORD *)(v54 + 24 * *(unsigned int *)(v54 - 4));
  v110 = *(unsigned int *)(v54 - 12);
  if (!(_DWORD)v110)
    goto LABEL_83;
  if (v110 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x19539FF14);
  }
  v59 = WTF::fastMalloc((WTF *)(16 * v110));
LABEL_84:
  if (v58 == v55)
  {
    v60 = 0;
  }
  else
  {
    v60 = 0;
    do
    {
      v61 = (_OWORD *)((char *)v55 + 24);
      *(_OWORD *)(v59 + 16 * v60) = *v55;
      v55 = v57;
      if (v61 != v57)
      {
        v55 = v61;
        while (*v55 == 0 || *(_QWORD *)v55 == -1)
        {
          v55 = (_OWORD *)((char *)v55 + 24);
          if (v55 == v57)
          {
            v55 = v57;
            break;
          }
        }
      }
      ++v60;
    }
    while (v55 != v58);
  }
  v63 = __ldxr(v52);
  v114 = (unint64_t *)v59;
  if (v63 != 1)
  {
    __clrex();
LABEL_103:
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 17));
    if (!v60)
      goto LABEL_144;
    goto LABEL_104;
  }
  if (__stlxr(0, v52))
    goto LABEL_103;
  if (v60)
  {
LABEL_104:
    v64 = v114;
    v65 = &v114[2 * v60];
    do
    {
      if (__ldaxr(v52))
      {
        __clrex();
      }
      else if (!__stxr(1u, v52))
      {
        goto LABEL_109;
      }
      MEMORY[0x19AEA534C](v3 + 17);
LABEL_109:
      v67 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*(_QWORD *)(v3 + 32), *v64, v64[1]);
      if (!v67)
      {
        v68 = 0;
LABEL_115:
        v71 = 1;
        goto LABEL_116;
      }
      v68 = v67[2];
      if (!v68)
        goto LABEL_115;
      v69 = (unsigned int *)(v68 + 60);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 + 1, v69));
      v71 = 0;
LABEL_116:
      v72 = __ldxr(v52);
      if (v72 == 1)
      {
        if (!__stlxr(0, v52))
        {
          if ((v71 & 1) == 0)
            goto LABEL_122;
          goto LABEL_143;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 17));
      if ((v71 & 1) == 0)
      {
LABEL_122:
        v116 = *(_OWORD *)v64;
        v119 = 0;
        v120 = 0;
        v121 = 0u;
        v122 = 0u;
        v123 = 0u;
        LOBYTE(v115) = 0;
        v117 = *(_WORD *)v2;
        v73 = (_DWORD *)*((_QWORD *)v2 + 1);
        if (v73)
          *v73 += 2;
        v118 = v73;
        if (WTF::canCurrentThreadAccessThreadLocalData())
        {
          WebCore::IDBOpenDBRequest::requestCompleted((unsigned int *)v68, &v115);
          goto LABEL_139;
        }
        v74 = (unsigned __int8 *)(v68 + 56);
        if (__ldaxr((unsigned __int8 *)(v68 + 56)))
        {
          __clrex();
          goto LABEL_129;
        }
        if (__stxr(1u, v74))
LABEL_129:
          MEMORY[0x19AEA534C](v68 + 56);
        v76 = *(_QWORD *)(v68 + 32);
        if (v76)
        {
          v77 = *(_QWORD *)(v76 + 8);
          if (v77)
          {
            WTF::createCrossThreadTask<WebCore::IDBOpenDBRequest,WebCore::IDBResultData const&,WebCore::IDBResultData>(&v124, v68, (WebCore::IDBResultData *)&v115);
            v78 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            v79 = v124;
            *v78 = &off_1E3359A20;
            v78[1] = v79;
            v125 = v78;
            v126 = 0;
            (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)(v77 - 96) + 336))(v77 - 96, &v125);
            v80 = v125;
            v125 = 0;
            if (v80)
              (*(void (**)(_QWORD *))(*v80 + 8))(v80);
          }
        }
        v81 = __ldxr(v74);
        if (v81 == 1)
        {
          if (!__stlxr(0, v74))
            goto LABEL_139;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v68 + 56));
LABEL_139:
        WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v115);
        v82 = (unsigned int *)(v68 + 60);
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
        {
          atomic_store(1u, (unsigned int *)(v68 + 60));
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 72))(v68);
        }
      }
LABEL_143:
      v64 += 2;
    }
    while (v64 != v65);
  }
LABEL_144:
  v85 = (unsigned __int8 *)(v3 + 20);
  if (__ldaxr((unsigned __int8 *)(v3 + 20)))
  {
    __clrex();
    v87 = (WTF *)v112;
    v88 = (WTF *)v114;
  }
  else
  {
    v87 = (WTF *)v112;
    v88 = (WTF *)v114;
    if (!__stxr(1u, v85))
      goto LABEL_148;
  }
  MEMORY[0x19AEA534C](v3 + 20);
LABEL_148:
  v89 = *(_QWORD *)(v3 + 72);
  if (!v89)
  {
    v90 = 0;
    LODWORD(v91) = 0;
LABEL_150:
    v92 = (_OWORD *)(v89 + 24 * v91);
    goto LABEL_151;
  }
  v91 = *(unsigned int *)(v89 - 4);
  v92 = (_OWORD *)(v89 + 24 * v91);
  if (!*(_DWORD *)(v89 - 12))
  {
    v90 = (_OWORD *)(v89 + 24 * v91);
    goto LABEL_150;
  }
  v90 = *(_OWORD **)(v3 + 72);
  if ((_DWORD)v91)
  {
    v107 = 24 * v91;
    v90 = *(_OWORD **)(v3 + 72);
    while (*v90 == 0 || *(_QWORD *)v90 == -1)
    {
      v90 = (_OWORD *)((char *)v90 + 24);
      v107 -= 24;
      if (!v107)
      {
        v90 = v92;
        break;
      }
    }
  }
LABEL_151:
  if (!v89)
  {
    v93 = 0;
LABEL_153:
    v94 = 0;
    goto LABEL_154;
  }
  v93 = (_OWORD *)(v89 + 24 * *(unsigned int *)(v89 - 4));
  v111 = *(unsigned int *)(v89 - 12);
  if (!(_DWORD)v111)
    goto LABEL_153;
  if (v111 >> 28)
  {
    __break(0xC471u);
LABEL_235:
    JUMPOUT(0x19539FF0CLL);
  }
  v94 = (WTF *)WTF::fastMalloc((WTF *)(16 * v111));
LABEL_154:
  if (v93 == v90)
  {
    v95 = 0;
  }
  else
  {
    v95 = 0;
    do
    {
      v96 = (_OWORD *)((char *)v90 + 24);
      *((_OWORD *)v94 + v95) = *v90;
      v90 = v92;
      if (v96 != v92)
      {
        v90 = v96;
        while (*v90 == 0 || *(_QWORD *)v90 == -1)
        {
          v90 = (_OWORD *)((char *)v90 + 24);
          if (v90 == v92)
          {
            v90 = v92;
            break;
          }
        }
      }
      ++v95;
    }
    while (v90 != v93);
  }
  v98 = __ldxr(v85);
  if (v98 == 1)
  {
    if (!__stlxr(0, v85))
    {
      if (!v95)
        goto LABEL_187;
      goto LABEL_174;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
  if (!v95)
    goto LABEL_187;
LABEL_174:
  v99 = v94;
  do
  {
    LOBYTE(v115) = 0;
    BYTE8(v116) = 0;
    WebCore::IDBClient::IDBConnectionProxy::didGetAllDatabaseNamesAndVersions(v3, v99, (uint64_t *)&v115);
    if (BYTE8(v116))
    {
      if (DWORD1(v116))
      {
        v100 = v115;
        v101 = 16 * DWORD1(v116);
        do
        {
          v102 = *(WTF::StringImpl **)v100;
          *(_QWORD *)v100 = 0;
          if (v102)
          {
            if (*(_DWORD *)v102 == 2)
              WTF::StringImpl::destroy(v102, a2);
            else
              *(_DWORD *)v102 -= 2;
          }
          v100 = (WTF *)((char *)v100 + 16);
          v101 -= 16;
        }
        while (v101);
      }
      v103 = v115;
      if (v115)
      {
        v115 = 0;
        LODWORD(v116) = 0;
        WTF::fastFree(v103, a2);
      }
    }
    v99 = (WTF *)((char *)v99 + 16);
  }
  while (v99 != (WTF *)((char *)v94 + 16 * v95));
LABEL_187:
  if (v94)
    WTF::fastFree(v94, a2);
  if (v88)
    WTF::fastFree(v88, a2);
  if (v87)
    WTF::fastFree(v87, a2);
}

void WebCore::IDBClient::IDBConnectionProxy::didGetAllDatabaseNamesAndVersions(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v38;
  void *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;

  v8 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 20);
    goto LABEL_5;
  }
  if (__stxr(1u, v8))
    goto LABEL_4;
LABEL_5:
  v12 = *(_QWORD *)(a1 + 72);
  v11 = (uint64_t *)(a1 + 72);
  v10 = v12;
  if (!v12)
    goto LABEL_29;
  v13 = a2[1];
  v14 = *(_DWORD *)(v10 - 8);
  v15 = (*a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a2 - 1640531527) << 16) ^ ((unsigned __int16)*a2
                                                                                             - 1640531527);
  v16 = v15 + (unsigned __int16)WORD2(*a2) + (v15 >> 11);
  v17 = (*a2 >> 37) & 0x7FFF800 ^ (v16 << 16) ^ v16;
  v18 = (v13 >> 5) & 0x7FFF800 ^ ((v17 + (unsigned __int16)v13 + (v17 >> 11)) << 16) ^ (v17 + (unsigned __int16)v13 + (v17 >> 11));
  v19 = (v13 >> 37) & 0x7FFF800 ^ ((v18 + WORD2(v13) + (v18 >> 11)) << 16) ^ (v18 + WORD2(v13) + (v18 >> 11));
  v20 = (v19 + (v19 >> 11)) ^ (8 * (v19 + (v19 >> 11)));
  v21 = (v20 + (v20 >> 5)) ^ (4 * (v20 + (v20 >> 5)));
  v22 = (v21 + (v21 >> 15)) ^ ((v21 + (v21 >> 15)) << 10);
  if (!v22)
    v22 = 0x800000;
  v23 = v22 & v14;
  v24 = (uint64_t *)(v10 + 24 * (v22 & v14));
  v26 = *v24;
  v25 = v24[1];
  if (*(_OWORD *)v24 == 0)
  {
LABEL_14:
    v28 = *(_DWORD *)(v10 - 4);
    v24 = (uint64_t *)(v10 + 24 * v28);
  }
  else
  {
    v27 = 1;
    while (v26 == -1 || v26 != *a2 || v25 != v13)
    {
      v23 = (v23 + v27) & v14;
      v24 = (uint64_t *)(v10 + 24 * v23);
      v26 = *v24;
      v25 = v24[1];
      ++v27;
      if (*(_OWORD *)v24 == 0)
        goto LABEL_14;
    }
    v28 = *(_DWORD *)(v10 - 4);
  }
  if ((uint64_t *)(v10 + 24 * v28) == v24)
  {
LABEL_29:
    v66 = 0;
    WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>::~Ref((uint64_t *)&v66, a2);
    v30 = 0;
  }
  else
  {
    v29 = v24 + 2;
    v30 = v24[2];
    if (v30 && (v31 = 0, *v29 = 0, (v10 = *v11) == 0)
      || (v31 = (uint64_t *)(v10 + 24 * *(unsigned int *)(v10 - 4)), v31 != v24))
    {
      if (v31 != v24)
      {
        *v24 = -1;
        WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>::~Ref(v29, a2);
        ++*(_DWORD *)(*v11 - 16);
        v32 = *v11;
        v33 = *v11 ? *(_DWORD *)(v32 - 12) - 1 : -1;
        *(_DWORD *)(v32 - 12) = v33;
        v34 = *v11;
        if (*v11)
        {
          v35 = 6 * *(_DWORD *)(v34 - 12);
          v36 = *(_DWORD *)(v34 - 4);
          if (v35 < v36 && v36 >= 9)
            WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v11, v36 >> 1);
        }
      }
    }
  }
  v38 = __ldxr(v8);
  if (v38 == 1)
  {
    if (!__stlxr(0, v8))
    {
      if (!v30)
        return;
      goto LABEL_36;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v30)
    return;
LABEL_36:
  if (WTF::canCurrentThreadAccessThreadLocalData())
  {
    v40 = *(_QWORD *)(v30 + 64);
    *(_QWORD *)(v30 + 64) = 0;
    if (v40)
    {
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v40 + 16))(v40, a3);
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
    goto LABEL_67;
  }
  v41 = (unsigned __int8 *)(v30 + 32);
  if (__ldaxr((unsigned __int8 *)(v30 + 32)))
  {
    __clrex();
LABEL_43:
    MEMORY[0x19AEA534C](v30 + 32);
    goto LABEL_44;
  }
  if (__stxr(1u, v41))
    goto LABEL_43;
LABEL_44:
  v43 = *(_QWORD *)(v30 + 8);
  if (v43)
  {
    v44 = *(_QWORD *)(v43 + 8);
    if (v44)
    {
      v45 = v44 - 96;
      v46 = (unsigned int *)(v30 + 36);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 + 1, v46));
      v48 = *((unsigned __int8 *)a3 + 16);
      if (*((_BYTE *)a3 + 16))
      {
        v3 = *((unsigned int *)a3 + 3);
        if ((_DWORD)v3)
        {
          if (v3 >> 28)
          {
            __break(0xC471u);
            return;
          }
          v49 = WTF::fastMalloc((WTF *)(16 * v3));
          v50 = *((unsigned int *)a3 + 3);
          if ((_DWORD)v50)
          {
            v51 = 0;
            v52 = *a3;
            v53 = *a3 + 16 * v50;
            v65 = ((unint64_t)(16 * v50 - 16) >> 4) + 1;
            do
            {
              v54 = v52 + v51;
              WTF::String::isolatedCopy();
              v67 = *(_QWORD *)(v52 + v51 + 8);
              v55 = v67;
              v56 = (_QWORD *)(v49 + v51);
              *v56 = v66;
              v56[1] = v55;
              v51 += 16;
            }
            while (v54 + 16 != v53);
            v4 = v65;
          }
          else
          {
            v4 = 0;
          }
        }
        else
        {
          v4 = 0;
          v49 = 0;
        }
      }
      else
      {
        v49 = 0;
      }
      v57 = WTF::fastMalloc((WTF *)0x38);
      v58 = v57;
      *(_QWORD *)v57 = &off_1E3359F20;
      *(_QWORD *)(v57 + 8) = v30;
      *(_QWORD *)(v57 + 16) = WebCore::IDBDatabaseNameAndVersionRequest::complete;
      *(_QWORD *)(v57 + 24) = 0;
      *(_BYTE *)(v57 + 32) = 0;
      *(_BYTE *)(v57 + 48) = 0;
      if (v48)
      {
        *(_QWORD *)(v57 + 32) = v49;
        *(_DWORD *)(v57 + 40) = v3;
        *(_DWORD *)(v57 + 44) = v4;
        *(_BYTE *)(v57 + 48) = 1;
      }
      v59 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v59 = &off_1E3359F48;
      v59[1] = v58;
      v66 = v59;
      LOBYTE(v67) = 0;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v45 + 336))(v45, &v66);
      v60 = (uint64_t)v66;
      v66 = 0;
      if (v60)
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
    }
  }
  v61 = __ldxr(v41);
  if (v61 != 1)
  {
    __clrex();
    goto LABEL_66;
  }
  if (__stlxr(0, v41))
LABEL_66:
    WTF::Lock::unlockSlow((WTF::Lock *)(v30 + 32));
LABEL_67:
  v62 = (unsigned int *)(v30 + 36);
  do
  {
    v63 = __ldaxr(v62);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, v62));
  if (!v64)
  {
    atomic_store(1u, v62);
    WTF::ThreadSafeRefCounted<WebCore::IDBDatabaseNameAndVersionRequest,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t)v62, v39);
  }
}

unsigned int **WebCore::IDBClient::IDBConnectionProxy::scheduleMainThreadTasks(WebCore::IDBClient::IDBConnectionProxy *this)
{
  unsigned __int8 *v2;
  unsigned int **result;
  unsigned int **v5;
  int v6;
  unsigned int **v7;

  v2 = (unsigned __int8 *)this + 21;
  if (__ldaxr((unsigned __int8 *)this + 21))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 21);
LABEL_5:
  result = (unsigned int **)((char *)this + 128);
  if (!*((_QWORD *)this + 16))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=(result, *(unsigned int **)this);
    v5 = (unsigned int **)WTF::fastMalloc((WTF *)0x10);
    *v5 = (unsigned int *)off_1E3359ED0;
    v5[1] = (unsigned int *)this;
    v7 = v5;
    WTF::callOnMainThread();
    result = v7;
    if (v7)
      result = (unsigned int **)(*((uint64_t (**)(unsigned int **))*v7 + 1))(v7);
  }
  v6 = __ldxr(v2);
  if (v6 != 1)
  {
    __clrex();
    return (unsigned int **)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return (unsigned int **)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

unsigned int **WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=(unsigned int **a1, unsigned int *a2)
{
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;

  if (a2)
  {
    do
      v3 = __ldaxr(a2);
    while (__stlxr(v3 + 1, a2));
  }
  v4 = *a1;
  *a1 = a2;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (bmalloc::api *)v4;
      WTF::ThreadSafeRefCounted<WebCore::IDBClient::IDBConnectionToServer,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8, a2);
    }
  }
  return a1;
}

unsigned __int8 *WebCore::IDBClient::IDBConnectionProxy::handleMainThreadTasks(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  WebCore::IDBClient::IDBConnectionProxy *v19;
  bmalloc::api *v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  v2 = this;
  v3 = this + 21;
  if (__ldaxr(this + 21))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this + 21);
LABEL_5:
  v5 = *((_QWORD *)v2 + 16);
  *((_QWORD *)v2 + 16) = 0;
  v6 = __ldxr(v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_10:
  v7 = v2 + 80;
  while (1)
  {
    if (__ldaxr(v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_15;
    }
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v2 + 80);
LABEL_15:
    v9 = *((_QWORD *)v2 + 11);
    v10 = *((_QWORD *)v2 + 12);
    if (v9 == v10)
    {
      v11 = 0;
    }
    else
    {
      v12 = *((_QWORD *)v2 + 13);
      v11 = *(_QWORD *)(v12 + 8 * v9);
      *(_QWORD *)(v12 + 8 * v9) = 0;
      v13 = *((_QWORD *)v2 + 13);
      this = *(unsigned __int8 **)(v13 + 8 * v9);
      *(_QWORD *)(v13 + 8 * v9) = 0;
      v14 = v9;
      if (this)
      {
        this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 8))(this);
        v14 = *((_QWORD *)v2 + 11);
      }
      if (v14 == *((unsigned int *)v2 + 28) - 1)
        v15 = 0;
      else
        v15 = v14 + 1;
      *((_QWORD *)v2 + 11) = v15;
    }
    v16 = __ldxr(v7);
    if (v16 != 1)
    {
      __clrex();
LABEL_27:
      this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 80));
      goto LABEL_28;
    }
    if (__stlxr(0, v7))
      goto LABEL_27;
LABEL_28:
    if (v9 == v10)
      break;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (v5)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v5);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v5));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v5);
      v19 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v19)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v19, a2);
        bmalloc::api::isoDeallocate(v20, v21);
      }
      v22 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, a2);
        }
      }
      return (unsigned __int8 *)bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return this;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::getAllDatabaseNamesAndVersions(uint64_t a1, WebCore::SecurityContext *this, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  WTF *v43;
  int v44;
  int isMainThread;
  unsigned int *v46;
  uint64_t result;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned __int8 *v63;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  WebCore::IDBClient::IDBConnectionProxy *v68;
  bmalloc::api *v69;
  void *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  __int128 v74;
  char v75;
  char *v76;
  _BYTE v77[24];
  int v78;
  _BYTE v79[24];
  int v80;
  uint64_t v81[3];
  int v82;
  _BYTE v83[24];
  int v84;
  _BYTE v85[24];
  __int128 v86;
  _BYTE v87[24];
  int v88;
  _BYTE v89[24];
  int v90;
  uint64_t v91[3];
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  WebCore::SecurityContext::securityOrigin(this, this);
  v77[0] = 0;
  v78 = -1;
  v7 = *(unsigned int *)(v6 + 32);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E3359878[v7])(v85, v77, v6 + 8);
    v78 = v7;
  }
  v8 = (*(uint64_t (**)(WebCore::SecurityContext *))(*(_QWORD *)this + 256))(this);
  v79[0] = 0;
  v80 = -1;
  v9 = *(unsigned int *)(v8 + 32);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E3359878[v9])(v85, v79, v8 + 8);
    v80 = v9;
  }
  v10 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEA534C](a1 + 20);
    goto LABEL_9;
  }
  if (__stxr(1u, v10))
    goto LABEL_8;
LABEL_9:
  WebCore::IDBDatabaseNameAndVersionRequest::create((uint64_t)this, a1, a3, v81);
  v13 = v81[0];
  v15 = (uint64_t *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)(a1 + 72), 8u), (v14 = *v15) != 0))
  {
    v16 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = (_OWORD *)(v13 + 48);
  v18 = *(_QWORD *)(v13 + 48);
  v19 = *(_QWORD *)(v13 + 56);
  v20 = (v18 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v18 - 1640531527) << 16) ^ ((unsigned __int16)v18
                                                                                             - 1640531527);
  v21 = (v18 >> 37) & 0x7FFF800 ^ ((v20 + WORD2(v18) + (v20 >> 11)) << 16) ^ (v20 + WORD2(v18) + (v20 >> 11));
  v22 = (v19 >> 5) & 0x7FFF800 ^ ((v21 + (unsigned __int16)v19 + (v21 >> 11)) << 16) ^ (v21 + (unsigned __int16)v19 + (v21 >> 11));
  v23 = (v19 >> 37) & 0x7FFF800 ^ ((v22 + WORD2(v19) + (v22 >> 11)) << 16) ^ (v22 + WORD2(v19) + (v22 >> 11));
  v24 = (v23 + (v23 >> 11)) ^ (8 * (v23 + (v23 >> 11)));
  v25 = (v24 + (v24 >> 5)) ^ (4 * (v24 + (v24 >> 5)));
  v26 = (v25 + (v25 >> 15)) ^ ((v25 + (v25 >> 15)) << 10);
  if (!v26)
    v26 = 0x800000;
  v27 = v26 & v16;
  v28 = (_QWORD *)(v14 + 24 * (v26 & v16));
  v30 = *v28;
  v29 = v28[1];
  if (*(_OWORD *)v28 == 0)
  {
LABEL_22:
    *(_OWORD *)v28 = *v17;
    v34 = v81[0];
    v81[0] = 0;
    v35 = v28[2];
    v28[2] = v34;
    *(_QWORD *)v85 = v35;
    WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>::~Ref((uint64_t *)v85, v12);
    v36 = *v15;
    if (*v15)
      v37 = *(_DWORD *)(v36 - 12) + 1;
    else
      v37 = 1;
    *(_DWORD *)(v36 - 12) = v37;
    v38 = *v15;
    if (*v15)
      v39 = *(_DWORD *)(v38 - 12);
    else
      v39 = 0;
    v40 = (*(_DWORD *)(v38 - 16) + v39);
    v41 = *(unsigned int *)(v38 - 4);
    if (v41 > 0x400)
    {
      if (v41 > 2 * v40)
        goto LABEL_33;
    }
    else
    {
      if (3 * v41 > 4 * v40)
        goto LABEL_33;
      if (!(_DWORD)v41)
      {
        v42 = 8;
        goto LABEL_32;
      }
    }
    v42 = (_DWORD)v41 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v41));
LABEL_32:
    WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)(a1 + 72), v42);
    goto LABEL_33;
  }
  v31 = 0;
  v32 = 1;
  while (1)
  {
    v33 = v31;
    v31 = v28;
    if (v30 != -1)
    {
      v31 = v33;
      if (v30 == v18 && v29 == v19)
        break;
    }
    v27 = (v27 + v32) & v16;
    v28 = (_QWORD *)(v14 + 24 * v27);
    v30 = *v28;
    v29 = v28[1];
    ++v32;
    if (*(_OWORD *)v28 == 0)
    {
      if (v31)
      {
        *v31 = 0;
        v31[1] = 0;
        v31[2] = 0;
        --*(_DWORD *)(*v15 - 16);
        v28 = v31;
      }
      goto LABEL_22;
    }
  }
LABEL_33:
  v43 = (WTF *)WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>::~Ref(v81, v12);
  v44 = __ldxr(v10);
  if (v44 != 1)
  {
    __clrex();
    goto LABEL_37;
  }
  if (__stlxr(0, v10))
LABEL_37:
    v43 = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 20));
  isMainThread = WTF::isMainThread(v43);
  v46 = *(unsigned int **)a1;
  if (!isMainThread)
  {
    do
      v48 = __ldaxr(v46);
    while (__stlxr(v48 + 1, v46));
    *(_QWORD *)v85 = v46;
    *(_QWORD *)&v85[8] = WebCore::IDBClient::IDBConnectionToServer::getAllDatabaseNamesAndVersions;
    *(_QWORD *)&v85[16] = 0;
    if (v78 == -1)
      goto LABEL_102;
    v74 = *v17;
    v81[0] = (uint64_t)&v76;
    ((void (*)(uint64_t *__return_ptr, uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v78])(v91, v81, v77);
    LOBYTE(v81[0]) = 0;
    v82 = -1;
    v49 = v92;
    if (v92 != -1)
    {
      ((void (*)(char **, uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v92])(&v76, v81, v91);
      v82 = v49;
      if (v92 != -1)
        ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v92])(&v76, v91);
    }
    if (v80 == -1)
LABEL_102:
      std::__throw_bad_variant_access[abi:sn180100]();
    v76 = &v75;
    ((void (*)(uint64_t *__return_ptr, char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v80])(v91, &v76, v79);
    v83[0] = 0;
    v84 = -1;
    v50 = v92;
    if (v92 != -1)
    {
      ((void (*)(char **, _BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v92])(&v76, v83, v91);
      v84 = v50;
      if (v92 != -1)
        ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v92])(&v76, v91);
    }
    v86 = v74;
    v87[0] = 0;
    v88 = -1;
    v51 = v82;
    if (v82 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E3359948[v82])(v91, v87, v81);
      v88 = v51;
    }
    v89[0] = 0;
    v90 = -1;
    v52 = v84;
    if (v84 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, _BYTE *))off_1E3359948[v84])(v91, v89, v83);
      v90 = v52;
    }
    v53 = WTF::fastMalloc((WTF *)0x70);
    *(_QWORD *)v53 = &off_1E3359EF8;
    v54 = *(_QWORD *)v85;
    *(_QWORD *)v85 = 0;
    *(_QWORD *)(v53 + 8) = v54;
    *(_OWORD *)(v53 + 16) = *(_OWORD *)&v85[8];
    *(_OWORD *)(v53 + 32) = v86;
    *(_BYTE *)(v53 + 48) = 0;
    *(_DWORD *)(v53 + 72) = -1;
    v55 = v88;
    if (v88 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3359948[v88])(v91, v53 + 48, v87);
      *(_DWORD *)(v53 + 72) = v55;
    }
    *(_BYTE *)(v53 + 80) = 0;
    v56 = (void *)(v53 + 80);
    *(_DWORD *)(v53 + 104) = -1;
    v57 = v90;
    if (v90 == -1)
    {
      v91[0] = v53;
    }
    else
    {
      ((void (*)(uint64_t *))off_1E3359948[v90])(v91);
      *(_DWORD *)(v53 + 104) = v57;
      v91[0] = v53;
      if (v90 != -1)
        ((void (*)(char **, _BYTE *))off_1E3359868[v90])(&v76, v89);
    }
    v90 = -1;
    if (v88 != -1)
      ((void (*)(char **, _BYTE *))off_1E3359868[v88])(&v76, v87);
    v88 = -1;
    v60 = *(_QWORD *)v85;
    *(_QWORD *)v85 = 0;
    if (v60)
    {
      do
      {
        v61 = __ldaxr((unsigned int *)v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, (unsigned int *)v60));
      if (!v62)
      {
        atomic_store(1u, (unsigned int *)v60);
        v68 = *(WebCore::IDBClient::IDBConnectionProxy **)(v60 + 24);
        *(_QWORD *)(v60 + 24) = 0;
        if (v68)
        {
          WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v68, v56);
          bmalloc::api::isoDeallocate(v69, v70);
        }
        v71 = *(unsigned int **)(v60 + 8);
        *(_QWORD *)(v60 + 8) = 0;
        if (v71)
        {
          do
          {
            v72 = __ldaxr(v71);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, v71));
          if (!v73)
          {
            atomic_store(1u, v71);
            WTF::fastFree((WTF *)v71, v56);
          }
        }
        bmalloc::api::isoDeallocate((bmalloc::api *)v60, v56);
      }
    }
    if (v84 != -1)
      ((void (*)(char **, _BYTE *))off_1E3359868[v84])(&v76, v83);
    v84 = -1;
    if (v82 != -1)
      ((void (*)(char **, uint64_t *))off_1E3359868[v82])(&v76, v81);
    WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), v91);
    v63 = (unsigned __int8 *)(a1 + 21);
    if (__ldaxr((unsigned __int8 *)(a1 + 21)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v63))
    {
LABEL_76:
      if (!*(_QWORD *)(a1 + 128))
      {
        WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
        v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v65 = off_1E3359ED0;
        v65[1] = a1;
        *(_QWORD *)v85 = v65;
        WTF::callOnMainThread();
        v66 = *(_QWORD *)v85;
        *(_QWORD *)v85 = 0;
        if (v66)
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
      }
      v67 = __ldxr(v63);
      if (v67 == 1)
      {
        if (!__stlxr(0, v63))
        {
LABEL_84:
          result = v91[0];
          v91[0] = 0;
          if (!result)
            goto LABEL_86;
          goto LABEL_85;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
      goto LABEL_84;
    }
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_76;
  }
  if (*((_BYTE *)v46 + 16))
  {
    result = (*(uint64_t (**)(_QWORD, _OWORD *, _BYTE *))(**(_QWORD **)(*((_QWORD *)v46 + 1) + 8) + 224))(*(_QWORD *)(*((_QWORD *)v46 + 1) + 8), v17, v77);
    goto LABEL_86;
  }
  do
    v58 = __ldaxr(v46);
  while (__stlxr(v58 + 1, v46));
  *(_OWORD *)v85 = *v17;
  v59 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v59 = &off_1E3359FF8;
  *(_QWORD *)(v59 + 8) = v46;
  *(_QWORD *)(v59 + 16) = v46;
  *(_OWORD *)(v59 + 24) = *(_OWORD *)v85;
  v81[0] = v59;
  WTF::callOnMainThread();
  result = v81[0];
  v81[0] = 0;
  if (result)
LABEL_85:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
LABEL_86:
  if (v80 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E3359868[v80])(v85, v79);
  v80 = -1;
  if (v78 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E3359868[v78])(v85, v77);
  return result;
}

uint64_t *WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  bmalloc::api *v16;
  void *v17;
  WTF *v18;
  void *v19;
  WebCore::IDBClient::IDBConnectionProxy *v20;
  bmalloc::api *v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  bmalloc::api *v26;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 36);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 36));
      v8 = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v9 = *(uint64_t **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v9)
      {
        v10 = *v9;
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v10);
          v20 = *(WebCore::IDBClient::IDBConnectionProxy **)(v10 + 24);
          v26 = (bmalloc::api *)v10;
          *(_QWORD *)(v10 + 24) = 0;
          if (v20)
          {
            WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v20);
            bmalloc::api::isoDeallocate(v21, v22);
          }
          v23 = (unsigned int *)*((_QWORD *)v26 + 1);
          *((_QWORD *)v26 + 1) = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v23);
              WTF::fastFree((WTF *)v23, a2);
            }
          }
          bmalloc::api::isoDeallocate(v26, a2);
        }
      }
      *(_QWORD *)v3 = &off_1E3357608;
      v13 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::Thread::~Thread((WTF::Thread *)v13);
          WTF::fastFree(v18, v19);
        }
      }
      WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v3, a2);
      bmalloc::api::isoDeallocate(v16, v17);
    }
  }
  return a1;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::getAllDatabaseNamesAndVersions(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 16))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 224))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  do
    v4 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v4 + 1, (unsigned int *)a1));
  v6 = *a2;
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v5 = &off_1E3359FF8;
  *(_QWORD *)(v5 + 8) = a1;
  *(_QWORD *)(v5 + 16) = a1;
  *(_OWORD *)(v5 + 24) = v6;
  v7 = v5;
  WTF::callOnMainThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t *WebCore::IDBClient::IDBConnectionProxy::registerDatabaseConnection(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBDatabase *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t *result;
  int v8;
  _BYTE v9[24];
  WebCore::IDBDatabase *v10;
  uint64_t v11;

  v4 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  v6 = *((_QWORD *)a2 + 15);
  v10 = a2;
  v11 = v6;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IDBDatabase *>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>((uint64_t *)this + 3, &v11, (uint64_t *)&v10, (uint64_t)v9);
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

_OWORD *WebCore::IDBClient::IDBConnectionProxy::unregisterDatabaseConnection(_OWORD *this, WebCore::IDBDatabase *a2)
{
  _OWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  v3 = this;
  v4 = (unsigned __int8 *)(this + 1);
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = (_OWORD *)MEMORY[0x19AEA534C](this + 1);
LABEL_5:
  v8 = *((_QWORD *)v3 + 3);
  v7 = (uint64_t *)v3 + 3;
  v6 = v8;
  if (v8)
  {
    v9 = *((_QWORD *)a2 + 15);
    v10 = *(_DWORD *)(v6 - 8);
    v11 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v6 + 16 * v14);
    if (v15 != v9)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(_QWORD *)(v6 + 16 * v14);
        ++v16;
        if (v15 == v9)
          goto LABEL_12;
      }
      v14 = *(unsigned int *)(v6 - 4);
    }
LABEL_12:
    if (v14 != *(_DWORD *)(v6 - 4))
    {
      *(_QWORD *)(v6 + 16 * v14) = -1;
      ++*(_DWORD *)(*v7 - 16);
      v17 = *v7;
      v18 = *v7 ? *(_DWORD *)(v17 - 12) - 1 : -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v7;
      if (*v7)
      {
        v21 = 6 * *(_DWORD *)(v19 - 12);
        v22 = *(_DWORD *)(v19 - 4);
        if (v21 < v22 && v22 >= 9)
          this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IDBDatabase *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v7, v22 >> 1, 0);
      }
    }
  }
  v20 = __ldxr(v4);
  if (v20 != 1)
  {
    __clrex();
    return (_OWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (_OWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

char *WebCore::IDBClient::IDBConnectionProxy::forgetActiveOperations(char *result, uint64_t *a2)
{
  char *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v22;
  int v23;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 19);
  if (__ldaxr((unsigned __int8 *)result + 19))
  {
    __clrex();
LABEL_4:
    result = (char *)MEMORY[0x19AEA534C](result + 19);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  v6 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v6)
    goto LABEL_34;
  v8 = *((_QWORD *)v3 + 8);
  v7 = (uint64_t *)(v3 + 64);
  if (!v8)
    goto LABEL_34;
  v9 = *a2;
  v10 = v9 + 8 * v6;
LABEL_8:
  result = (char *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(v7, (_QWORD *)(*(_QWORD *)v9 + 24));
  v11 = *v7;
  if (result)
  {
    if (!v11)
      goto LABEL_10;
    v22 = *(_DWORD *)(v11 - 4);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v22 = *(_DWORD *)(v11 - 4);
    result = (char *)(v11 + 24 * v22);
  }
  v11 += 24 * v22;
  if ((char *)v11 == result)
    goto LABEL_26;
LABEL_10:
  if ((char *)v11 != result)
  {
    *(_QWORD *)result = -1;
    v12 = (unsigned int *)*((_QWORD *)result + 2);
    *((_QWORD *)result + 2) = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        result = (char *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
    ++*(_DWORD *)(*v7 - 16);
    v16 = *v7;
    if (*v7)
      v17 = *(_DWORD *)(v16 - 12) - 1;
    else
      v17 = -1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *v7;
    if (*v7)
    {
      v19 = 6 * *(_DWORD *)(v18 - 12);
      v20 = *(_DWORD *)(v18 - 4);
      if (v19 < v20 && v20 >= 9)
        result = (char *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v7, v20 >> 1, 0);
    }
  }
LABEL_26:
  while (1)
  {
    v9 += 8;
    if (v9 == v10)
      break;
    if (*v7)
      goto LABEL_8;
  }
LABEL_34:
  v23 = __ldxr(v4);
  if (v23 != 1)
  {
    __clrex();
    return (char *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (char *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::forgetTransaction(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::IDBTransaction *a2)
{
  unsigned __int8 *v4;
  _QWORD *v6;
  uint64_t result;
  int v8;

  v4 = (unsigned __int8 *)this + 18;
  if (__ldaxr((unsigned __int8 *)this + 18))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 18);
LABEL_5:
  v6 = (_QWORD *)((char *)a2 + 80);
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::remove((uint64_t *)this + 5, v6);
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::remove((uint64_t *)this + 6, v6);
  result = WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::remove((uint64_t *)this + 7, v6);
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void WebCore::IDBClient::IDBConnectionProxy::forgetActivityForCurrentThread(WebCore::IDBClient::IDBConnectionProxy *this)
{
  unsigned __int8 *v2;
  int v4;
  unsigned __int8 *v5;
  WTF::StringImpl *v7;
  int v8;
  unsigned __int8 *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned __int8 *v14;
  void *v16;
  int v17;
  unsigned __int8 *v18;
  int v20;

  v2 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C]((char *)this + 16);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  WebCore::IDBClient::removeItemsMatchingCurrentThread<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>((uint64_t *)this + 3);
  v4 = __ldxr(v2);
  if (v4 != 1)
  {
    __clrex();
    goto LABEL_8;
  }
  if (__stlxr(0, v2))
LABEL_8:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v5 = (unsigned __int8 *)this + 17;
  if (__ldaxr((unsigned __int8 *)this + 17))
  {
    __clrex();
LABEL_11:
    MEMORY[0x19AEA534C]((char *)this + 17);
    goto LABEL_12;
  }
  if (__stxr(1u, v5))
    goto LABEL_11;
LABEL_12:
  WebCore::IDBClient::removeItemsMatchingCurrentThread<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>((uint64_t *)this + 4);
  v8 = __ldxr(v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v5))
LABEL_16:
    WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 17));
  v9 = (unsigned __int8 *)this + 18;
  if (__ldaxr((unsigned __int8 *)this + 18))
  {
    __clrex();
LABEL_19:
    MEMORY[0x19AEA534C]((char *)this + 18);
    goto LABEL_20;
  }
  if (__stxr(1u, v9))
    goto LABEL_19;
LABEL_20:
  WebCore::IDBClient::removeItemsMatchingCurrentThread<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>((uint64_t *)this + 5, v7);
  WebCore::IDBClient::removeItemsMatchingCurrentThread<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>((uint64_t *)this + 6, v11);
  WebCore::IDBClient::removeItemsMatchingCurrentThread<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>((uint64_t *)this + 7, v12);
  v13 = __ldxr(v9);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v9))
LABEL_24:
    WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 18));
  v14 = (unsigned __int8 *)this + 19;
  if (__ldaxr((unsigned __int8 *)this + 19))
  {
    __clrex();
LABEL_27:
    MEMORY[0x19AEA534C]((char *)this + 19);
    goto LABEL_28;
  }
  if (__stxr(1u, v14))
    goto LABEL_27;
LABEL_28:
  WebCore::IDBClient::removeItemsMatchingCurrentThread<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t *)this + 8);
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, v14))
LABEL_32:
    WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 19));
  v18 = (unsigned __int8 *)this + 20;
  if (__ldaxr((unsigned __int8 *)this + 20))
  {
    __clrex();
LABEL_35:
    MEMORY[0x19AEA534C]((char *)this + 20);
    goto LABEL_36;
  }
  if (__stxr(1u, v18))
    goto LABEL_35;
LABEL_36:
  WebCore::IDBClient::removeItemsMatchingCurrentThread<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>((uint64_t *)this + 9, v16);
  v20 = __ldxr(v18);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, v18))
LABEL_40:
    WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 20));
}

_OWORD *WebCore::IDBClient::removeItemsMatchingCurrentThread<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>(uint64_t *a1)
{
  _OWORD *result;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;

  result = *(_OWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!result)
    result = (_OWORD *)WTF::Thread::initializeCurrentTLS(0);
  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (v4)
    {
      v5 = 0;
      v6 = v4 - 1;
      do
      {
        v7 = v6;
        v8 = (_QWORD *)(v3 + 16 * v6);
        if ((unint64_t)(*v8 + 1) >= 2 && *(_OWORD **)(*(_QWORD *)(v3 + 16 * v6 + 8) + 56) == result)
        {
          *v8 = -1;
          ++v5;
        }
        --v6;
      }
      while (v7);
      v9 = *a1;
      if (v5)
      {
        *(_DWORD *)(v9 - 16) += v5;
        v10 = *a1;
        if (*a1)
          v11 = *(_DWORD *)(v10 - 12);
        else
          v11 = 0;
        *(_DWORD *)(v10 - 12) = v11 - v5;
        v9 = *a1;
      }
      if (v9)
      {
        v12 = *(_DWORD *)(v9 - 4);
        v13 = 6 * *(_DWORD *)(v9 - 12);
        if (v12 >= 9 && v13 < v12)
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IDBDatabase *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::shrinkToBestSize(a1);
      }
    }
  }
  return result;
}

_OWORD *WebCore::IDBClient::removeItemsMatchingCurrentThread<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>(uint64_t *a1)
{
  _OWORD *result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  unsigned int *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = *(_OWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!result)
    result = (_OWORD *)WTF::Thread::initializeCurrentTLS(0);
  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = 0;
      do
      {
        v6 = --v4;
        v7 = (_QWORD *)(v3 + 24 * v4);
        if (*(_OWORD *)v7 != 0 && *v7 != -1)
        {
          v9 = v3 + 24 * v4;
          v12 = *(_QWORD *)(v9 + 16);
          v11 = (_QWORD *)(v9 + 16);
          v10 = (unsigned int *)v12;
          if (*(_OWORD **)(v12 + 48) == result)
          {
            v26 = v4;
            v24 = v3;
            v25 = v4;
            v22 = v5;
            v23 = result;
            *v7 = -1;
            *v11 = 0;
            v13 = v10 + 15;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v10 + 15);
              (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 72))(v10);
            }
            v5 = v22 + 1;
            result = v23;
            v3 = v24;
            v4 = v25;
            v6 = v26;
          }
        }
      }
      while (v6);
      v16 = *a1;
      if (v5)
      {
        *(_DWORD *)(v16 - 16) += v5;
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 12);
        else
          v18 = 0;
        *(_DWORD *)(v17 - 12) = v18 - v5;
        v16 = *a1;
      }
      if (v16)
      {
        v19 = *(_DWORD *)(v16 - 4);
        v20 = 6 * *(_DWORD *)(v16 - 12);
        if (v19 >= 9 && v20 < v19)
          return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::shrinkToBestSize(a1);
      }
    }
  }
  return result;
}

_QWORD *WebCore::IDBClient::removeItemsMatchingCurrentThread<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>(uint64_t *a1, WTF::StringImpl *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  result = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!result)
    result = (_QWORD *)WTF::Thread::initializeCurrentTLS(0);
  v4 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v16 = result;
      v6 = 0;
      v7 = v5 - 1;
      v18 = *a1;
      do
      {
        v17 = v7;
        v8 = v7;
        result = (_QWORD *)(v4 + 24 * v7);
        v9 = *(_OWORD *)result == 0 || *result == -1;
        if (!v9 && *(_QWORD **)(*(_QWORD *)(v18 + 24 * v7 + 16) + 56) == v16)
        {
          result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::deleteBucket(result, a2);
          ++v6;
        }
        v4 = v18;
        v7 = v17 - 1;
      }
      while (v8);
      v10 = *a1;
      if (v6)
      {
        *(_DWORD *)(v10 - 16) += v6;
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 12);
        else
          v12 = 0;
        *(_DWORD *)(v11 - 12) = v12 - v6;
        v10 = *a1;
      }
      if (v10)
      {
        v13 = *(_DWORD *)(v10 - 4);
        v14 = 6 * *(_DWORD *)(v10 - 12);
        if (v13 >= 9 && v14 < v13)
          return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::shrinkToBestSize(a1);
      }
    }
  }
  return result;
}

_OWORD *WebCore::IDBClient::removeItemsMatchingCurrentThread<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(uint64_t *a1)
{
  _OWORD *result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  unsigned int *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = *(_OWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!result)
    result = (_OWORD *)WTF::Thread::initializeCurrentTLS(0);
  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = 0;
      do
      {
        v6 = --v4;
        v7 = (_QWORD *)(v3 + 24 * v4);
        if (*(_OWORD *)v7 != 0 && *v7 != -1)
        {
          v9 = v3 + 24 * v4;
          v12 = *(_QWORD *)(v9 + 16);
          v11 = (_QWORD *)(v9 + 16);
          v10 = (unsigned int *)v12;
          if (*(_OWORD **)(v12 + 104) == result)
          {
            v26 = v4;
            v24 = v3;
            v25 = v4;
            v22 = v5;
            v23 = result;
            *v7 = -1;
            *v11 = 0;
            v13 = v10 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v10 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
            }
            v5 = v22 + 1;
            result = v23;
            v3 = v24;
            v4 = v25;
            v6 = v26;
          }
        }
      }
      while (v6);
      v16 = *a1;
      if (v5)
      {
        *(_DWORD *)(v16 - 16) += v5;
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 12);
        else
          v18 = 0;
        *(_DWORD *)(v17 - 12) = v18 - v5;
        v16 = *a1;
      }
      if (v16)
      {
        v19 = *(_DWORD *)(v16 - 4);
        v20 = 6 * *(_DWORD *)(v16 - 12);
        if (v19 >= 9 && v20 < v19)
          return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::shrinkToBestSize(a1);
      }
    }
  }
  return result;
}

void WebCore::IDBClient::removeItemsMatchingCurrentThread<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3)
    v3 = WTF::Thread::initializeCurrentTLS(0);
  v4 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = v5 - 1;
      do
      {
        v8 = v7;
        v9 = (_QWORD *)(v4 + 24 * v7);
        if (*(_OWORD *)v9 != 0 && *v9 != -1)
        {
          v11 = v4 + 24 * v7;
          v13 = *(_QWORD *)(v11 + 16);
          v12 = (uint64_t *)(v11 + 16);
          if (*(_QWORD *)(v13 + 24) == v3)
          {
            *v9 = -1;
            v24 = v3;
            v21 = v6;
            v20 = v4;
            v22 = v7;
            v23 = v7;
            WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>::~Ref(v12, a2);
            v7 = v22;
            v8 = v23;
            v4 = v20;
            v3 = v24;
            v6 = v21 + 1;
          }
        }
        --v7;
      }
      while (v8);
      v14 = *a1;
      if (v6)
      {
        *(_DWORD *)(v14 - 16) += v6;
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 12);
        else
          v16 = 0;
        *(_DWORD *)(v15 - 12) = v16 - v6;
        v14 = *a1;
      }
      if (v14)
      {
        v17 = *(_DWORD *)(v14 - 4);
        v18 = 6 * *(_DWORD *)(v14 - 12);
        if (v17 >= 9 && v18 < v17)
          WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::shrinkToBestSize(a1);
      }
    }
  }
}

_QWORD *WebCore::IDBClient::IDBConnectionProxy::setContextSuspended(WebCore::IDBClient::IDBConnectionProxy *this, WebCore::ScriptExecutionContext *a2, char a3)
{
  unsigned __int8 *v6;
  int v8;
  unsigned __int8 *v9;
  _QWORD *result;
  int v12;

  v6 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  WebCore::IDBClient::setMatchingItemsContextSuspended<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>(a2, (_QWORD *)this + 3, a3);
  v8 = __ldxr(v6);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v6))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v9 = (unsigned __int8 *)this + 17;
  if (__ldaxr((unsigned __int8 *)this + 17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C]((char *)this + 17);
LABEL_14:
  result = WebCore::IDBClient::setMatchingItemsContextSuspended<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>(a2, (uint64_t *)this + 4, a3);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 17));
  }
  if (__stlxr(0, v9))
    return (_QWORD *)WTF::Lock::unlockSlow((WebCore::IDBClient::IDBConnectionProxy *)((char *)this + 17));
  return result;
}

WTF::Thread *WebCore::IDBClient::setMatchingItemsContextSuspended<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>(WTF::Thread *result, _QWORD *a2, char a3)
{
  WTF::Thread *v5;
  WTF::Thread *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = result;
  v6 = *(WTF::Thread **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6)
  {
    result = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(result);
    v6 = result;
  }
  v7 = (_QWORD *)*a2;
  if (!*a2)
  {
    v8 = 0;
    v9 = 0;
LABEL_5:
    v10 = &v7[2 * v9];
    goto LABEL_6;
  }
  v9 = *((unsigned int *)v7 - 1);
  v10 = &v7[2 * v9];
  if (!*((_DWORD *)v7 - 3))
  {
    v8 = &v7[2 * v9];
    goto LABEL_5;
  }
  v8 = v7;
  if ((_DWORD)v9)
  {
    v17 = 16 * v9;
    v8 = v7;
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v17 -= 16;
      if (!v17)
      {
        v8 = v10;
        break;
      }
    }
  }
LABEL_6:
  if (v7)
    v11 = &v7[2 * *((unsigned int *)v7 - 1)];
  else
    v11 = 0;
  while (v8 != v11)
  {
    v12 = v8[1];
    if (*(WTF::Thread **)(v12 + 56) == v6)
    {
      v13 = *(_QWORD *)(v12 + 40);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
        {
          v15 = *(unsigned __int8 *)(v14 + 178);
          if (*(_BYTE *)(v14 + 178))
          {
            if (v15 == 1 || v15 == 2)
              ++*(_DWORD *)(v14 + 216);
          }
          else
          {
            *(_DWORD *)(v14 - 264) += 2;
          }
          result = (WTF::Thread *)(v14 - 96);
          if ((WTF::Thread *)(v14 - 96) == v5)
            *(_BYTE *)(v12 + 176) = a3;
          if (v15)
          {
            if (v15 == 1)
            {
              if (*(_DWORD *)(v14 + 216) == 1)
                result = (WTF::Thread *)(*(uint64_t (**)(WTF::Thread *))(*(_QWORD *)result + 40))(result);
              else
                --*(_DWORD *)(v14 + 216);
            }
            else if (v15 == 2)
            {
              result = (WTF::Thread *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v14 + 216));
            }
          }
          else if (*(_DWORD *)(v14 - 264) == 2)
          {
            if ((*(_WORD *)(v14 - 258) & 0x400) == 0)
              result = (WTF::Thread *)WebCore::Node::removedLastRef((WebCore::Node *)(v14 - 288));
          }
          else
          {
            *(_DWORD *)(v14 - 264) -= 2;
          }
        }
      }
    }
    v16 = v8 + 2;
    v8 = v10;
    if (v16 != v10)
    {
      v8 = v16;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v10)
        {
          v8 = v10;
          break;
        }
      }
    }
  }
  return result;
}

_QWORD *WebCore::IDBClient::setMatchingItemsContextSuspended<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>(_QWORD *result, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;

  v5 = result;
  v6 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6)
  {
    result = (_QWORD *)WTF::Thread::initializeCurrentTLS((WTF::Thread *)result);
    v6 = result;
  }
  v7 = *a2;
  if (!*a2)
  {
    v8 = 0;
    LODWORD(v9) = 0;
LABEL_5:
    v10 = v7 + 24 * v9;
    goto LABEL_6;
  }
  v9 = *(unsigned int *)(v7 - 4);
  v10 = v7 + 24 * v9;
  if (!*(_DWORD *)(v7 - 12))
  {
    v8 = v7 + 24 * v9;
    goto LABEL_5;
  }
  v8 = *a2;
  if ((_DWORD)v9)
  {
    v17 = 24 * v9;
    v8 = *a2;
    while (*(_OWORD *)v8 == 0 || *(_QWORD *)v8 == -1)
    {
      v8 += 24;
      v17 -= 24;
      if (!v17)
      {
        v8 = v10;
        break;
      }
    }
  }
LABEL_6:
  if (v7)
    v11 = v7 + 24 * *(unsigned int *)(v7 - 4);
  else
    v11 = 0;
  while (v8 != v11)
  {
    result = *(_QWORD **)(v8 + 16);
    if ((_QWORD *)result[6] == v6)
    {
      v12 = result[4];
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(unsigned __int8 *)(v13 + 178);
          if (*(_BYTE *)(v13 + 178))
          {
            if (v14 == 1 || v14 == 2)
              ++*(_DWORD *)(v13 + 216);
          }
          else
          {
            *(_DWORD *)(v13 - 264) += 2;
          }
          if ((_QWORD *)(v13 - 96) == v5)
          {
            result = WebCore::IDBOpenDBRequest::setIsContextSuspended((WTF::StringImpl *)result, a3);
            v14 = *(unsigned __int8 *)(v13 + 178);
          }
          if (v14)
          {
            if (v14 == 1)
            {
              if (*(_DWORD *)(v13 + 216) == 1)
                result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 - 96) + 40))(v13 - 96);
              else
                --*(_DWORD *)(v13 + 216);
            }
            else if (v14 == 2)
            {
              result = WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v13 + 216));
            }
          }
          else if (*(_DWORD *)(v13 - 264) == 2)
          {
            if ((*(_WORD *)(v13 - 258) & 0x400) == 0)
              result = (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)(v13 - 288));
          }
          else
          {
            *(_DWORD *)(v13 - 264) -= 2;
          }
        }
      }
    }
    v15 = v8 + 24;
    v8 = v10;
    if (v15 != v10)
    {
      v8 = v15;
      while (*(_OWORD *)v8 == 0 || *(_QWORD *)v8 == -1)
      {
        v8 += 24;
        if (v8 == v10)
        {
          v8 = v10;
          break;
        }
      }
    }
  }
  return result;
}

void *WebCore::IDBClient::IDBConnectionToServer::bisoHeap(WebCore::IDBClient::IDBConnectionToServer *this)
{
  return &WebCore::IDBClient::IDBConnectionToServer::bisoHeap(void)::heap;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::operator new(uint64_t this)
{
  if (this == 32)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = bmalloc::api::isoAllocate();
  result = WebCore::IDBClient::IDBConnectionToServer::IDBConnectionToServer(v4, a1);
  *a2 = result;
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::IDBConnectionToServer(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;

  *(_DWORD *)a1 = 1;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v4 = *(unsigned int **)(a2 + 8);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = 1;
  std::make_unique[abi:sn180100]<WebCore::IDBClient::IDBConnectionProxy,WebCore::IDBClient::IDBConnectionToServer &>((uint64_t *)(a1 + 24), a1);
  return a1;
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::proxy(WebCore::IDBClient::IDBConnectionToServer *this)
{
  return *((_QWORD *)this + 3);
}

void WebCore::IDBClient::IDBConnectionToServer::didDeleteDatabase(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOpenDBRequest(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didOpenDatabase(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOpenDBRequest(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didCreateObjectStore(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didDeleteObjectStore(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didRenameObjectStore(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didClearObjectStore(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didCreateIndex(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didDeleteIndex(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didRenameIndex(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didPutOrAdd(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didGetRecord(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didGetAllRecords(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didGetCount(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didDeleteRecord(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didOpenCursor(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

void WebCore::IDBClient::IDBConnectionToServer::didIterateCursor(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBClient::IDBConnectionProxy::completeOperation(this[3], a2);
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didCommitTransaction(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return WebCore::IDBClient::IDBConnectionProxy::didCommitTransaction(*(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didAbortTransaction(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return WebCore::IDBClient::IDBConnectionProxy::didAbortTransaction(*(_QWORD *)(a1 + 24), a2, a3);
}

unsigned __int8 *WebCore::IDBClient::IDBConnectionToServer::fireVersionChangeEvent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return WebCore::IDBClient::IDBConnectionProxy::fireVersionChangeEvent(*(unsigned __int8 **)(a1 + 24), a2, a3, a4);
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didStartTransaction(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return WebCore::IDBClient::IDBConnectionProxy::didStartTransaction(*(_QWORD *)(a1 + 24), a2, a3);
}

unsigned __int8 *WebCore::IDBClient::IDBConnectionToServer::didCloseFromServer(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return WebCore::IDBClient::IDBConnectionProxy::didCloseFromServer(*(unsigned __int8 **)(a1 + 24), a2, a3);
}

void WebCore::IDBClient::IDBConnectionToServer::connectionToServerLost(uint64_t a1, WTF::StringImpl *a2)
{
  *(_BYTE *)(a1 + 16) = 0;
  WebCore::IDBClient::IDBConnectionProxy::connectionToServerLost(*(_QWORD *)(a1 + 24), a2);
}

_QWORD *WebCore::IDBClient::IDBConnectionToServer::notifyOpenDBRequestBlocked(WebCore::IDBClient::IDBConnectionProxy **this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3, uint64_t a4)
{
  return WebCore::IDBClient::IDBConnectionProxy::notifyOpenDBRequestBlocked(this[3], a2, a3, a4);
}

void WebCore::IDBClient::IDBConnectionToServer::didGetAllDatabaseNamesAndVersions(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)(a1 + 24);
  v10 = *(WTF **)a3;
  v4 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v11 = v4;
  v12 = 1;
  WebCore::IDBClient::IDBConnectionProxy::didGetAllDatabaseNamesAndVersions(v3, a2, (uint64_t *)&v10);
  if (v12)
  {
    if (HIDWORD(v11))
    {
      v6 = v10;
      v7 = 16 * HIDWORD(v11);
      do
      {
        v8 = *(WTF::StringImpl **)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
        v6 = (WTF *)((char *)v6 + 16);
        v7 -= 16;
      }
      while (v7);
    }
    v9 = v10;
    if (v10)
    {
      v10 = 0;
      LODWORD(v11) = 0;
      WTF::fastFree(v9, v5);
    }
  }
}

WebCore::IDBClient::TransactionOperation *WebCore::IDBClient::TransactionOperation::TransactionOperation(WebCore::IDBClient::TransactionOperation *this, WebCore::IDBTransaction *a2, WebCore::IDBRequest *a3)
{
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t StatusReg;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  char v30;
  char *v31;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E3358EF8;
  v5 = (unsigned int *)((char *)a2 + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 72) + 8);
  do
  {
    v7 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v8 = v7 + 2;
  }
  while (__stlxr(v8, &WebCore::nextClientResourceNumber(void)::currentNumber));
  *((_QWORD *)this + 5) = 0;
  v9 = (uint64_t *)((char *)this + 40);
  *((_QWORD *)this + 4) = v8;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 80) = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v11 = *(unsigned int **)(StatusReg + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *((_QWORD *)this + 13) = v11;
  *((_QWORD *)this + 14) = 0;
  *((_WORD *)this + 60) = 1;
  do
  {
    v13 = __ldaxr(&WebCore::IDBTransaction::generateOperationID(void)::currentOperationID);
    v14 = v13 + 1;
  }
  while (__stlxr(v14, &WebCore::IDBTransaction::generateOperationID(void)::currentOperationID));
  *((_QWORD *)this + 16) = v14;
  if (*((_BYTE *)a3 + 328))
  {
    v15 = *((unsigned int *)a3 + 80);
    if ((_DWORD)v15 == -1)
      goto LABEL_32;
    v31 = &v30;
    v16 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore10IDBRequest27sourceObjectStoreIdentifierEvE3__0JZNKS9_27sourceObjectStoreIdentifierEvE3__1ZNKS9_27sourceObjectStoreIdentifierEvE3__2EEEEEJRKNS0_6__implIJNS6_6RefPtrINS8_14IDBObjectStoreENS6_12RawPtrTraitsISH_EENS6_21DefaultRefDerefTraitsISH_EEEENSG_INS8_8IDBIndexENSI_ISN_EENSK_ISN_EEEENSG_INS8_9IDBCursorENSI_ISR_EENSK_ISR_EEEEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v31, (char *)a3 + 312);
    v17 = *((unsigned __int8 *)a3 + 328);
    *v9 = v16;
    if (v17)
    {
      v18 = *((unsigned int *)a3 + 80);
      if ((_DWORD)v18 != -1)
      {
        v31 = &v30;
        v19 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore10IDBRequest21sourceIndexIdentifierEvE3__0JZNKS9_21sourceIndexIdentifierEvE3__1ZNKS9_21sourceIndexIdentifierEvE3__2EEEEEJRKNS0_6__implIJNS6_6RefPtrINS8_14IDBObjectStoreENS6_12RawPtrTraitsISH_EENS6_21DefaultRefDerefTraitsISH_EEEENSG_INS8_8IDBIndexENSI_ISN_EENSK_ISN_EEEENSG_INS8_9IDBCursorENSI_ISR_EENSK_ISR_EEEEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v31, (char *)a3 + 312);
        *((_QWORD *)this + 6) = v19;
        if (v19)
          *((_BYTE *)this + 80) = *((_BYTE *)a3 + 358);
        goto LABEL_18;
      }
LABEL_32:
      v29 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WebCore::IDBClient::TransactionOperation *)WebCore::IDBServer::IDBConnectionToClient::create(v29);
    }
  }
  else
  {
    *v9 = 0;
  }
  *((_QWORD *)this + 6) = 0;
LABEL_18:
  v20 = *((_QWORD *)a3 + 42);
  if (v20)
  {
    ++*(_DWORD *)(v20 + 16);
    v21 = *((unsigned __int8 *)this + 72);
    *(_OWORD *)((char *)this + 56) = *(_OWORD *)(v20 + 24);
    if (!v21)
      *((_BYTE *)this + 72) = 1;
    if (*(_DWORD *)(v20 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    else
      --*(_DWORD *)(v20 + 16);
  }
  *((_QWORD *)a3 + 17) = *((_QWORD *)this + 16);
  v22 = (unsigned int *)((char *)a3 + 60);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  v24 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = a3;
  if (v24)
  {
    v25 = v24 + 15;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v24 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 72))(v24);
    }
  }
  return this;
}

uint64_t WebCore::IDBServer::IDBConnectionToClient::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a1;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *a2 = result;
  return result;
}

uint64_t WebCore::IDBServer::IDBConnectionToClient::didGetAllDatabaseNamesAndVersions(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

uint64_t *WebCore::IDBServer::IDBConnectionToClient::unregisterDatabaseConnection(WebCore::IDBServer::IDBConnectionToClient *this, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v4 = *((_QWORD *)this + 2);
  result = (uint64_t *)((char *)this + 16);
  v3 = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)(v3 + 8 * v9);
    if (v10 != a2)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)(v3 + 8 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_8;
      }
      v9 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v9 != *(_DWORD *)(v3 - 4))
    {
      *(_QWORD *)(v3 + 8 * v9) = -1;
      ++*(_DWORD *)(*result - 16);
      v12 = *result;
      v13 = *result ? *(_DWORD *)(v12 - 12) - 1 : -1;
      *(_DWORD *)(v12 - 12) = v13;
      v14 = *result;
      if (*result)
      {
        v15 = 6 * *(_DWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
          return WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(result, v16 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebCore::IDBServer::IDBConnectionToClient::connectionToClientClosed(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  WebCore::IDBServer::UniqueIDBDatabaseConnection **v30;
  WebCore::IDBServer::UniqueIDBDatabaseConnection **v31;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v32;
  uint64_t v33;
  WebCore::IDBServer::UniqueIDBDatabase *v34;
  WTF *v35;
  void *v36;
  WebCore::IDBServer::UniqueIDBDatabase *v37;

  *(_BYTE *)(this + 24) = 1;
  v1 = *(_QWORD *)(this + 16);
  if (!v1)
    return this;
  v2 = *(unsigned int *)(v1 - 12);
  if (!(_DWORD)v2)
    return this;
  v3 = this;
  v4 = (v2 - 1) | ((v2 - 1) >> 1) | ((((_DWORD)v2 - 1) | ((v2 - 1) >> 1)) >> 2);
  v5 = v4 | (v4 >> 4) | ((v4 | (v4 >> 4)) >> 8);
  v6 = (v5 | HIWORD(v5)) + 1;
  if (v6 > 0x400)
  {
    if (v6 > 2 * v2)
      goto LABEL_9;
  }
  else if (3 * v6 > 4 * v2)
  {
LABEL_6:
    v7 = (double)v2;
    v8 = (double)v6;
    v9 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v6) = 2 * v6;
  if (v6 <= 0x400)
    goto LABEL_6;
LABEL_9:
  v7 = (double)v2;
  v8 = (double)v6;
  v9 = 0.416666667;
LABEL_10:
  if (v8 * v9 <= v7)
    LODWORD(v6) = 2 * v6;
  if (v6 <= 8)
    v10 = 8;
  else
    v10 = v6;
  v11 = (WTF *)WTF::fastZeroedMalloc((WTF *)(8 * v10 + 16));
  v13 = v11;
  v14 = v10 - 1;
  *((_DWORD *)v11 + 2) = v10 - 1;
  *((_DWORD *)v11 + 3) = v10;
  *(_DWORD *)v11 = 0;
  *((_DWORD *)v11 + 1) = v2;
  v15 = *(_QWORD **)(v3 + 16);
  if (v15)
  {
    v16 = *((unsigned int *)v15 - 1);
    v17 = &v15[v16];
    if (*((_DWORD *)v15 - 3))
    {
      v18 = *(_QWORD **)(v3 + 16);
      if ((_DWORD)v16)
      {
        v19 = 8 * v16;
        v18 = *(_QWORD **)(v3 + 16);
        while ((unint64_t)(*v18 + 1) <= 1)
        {
          ++v18;
          v19 -= 8;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_25;
          }
        }
      }
      goto LABEL_25;
    }
    v18 = &v15[v16];
  }
  else
  {
    v18 = 0;
    v16 = 0;
  }
  v17 = &v15[v16];
LABEL_25:
  v20 = (_DWORD *)((char *)v11 + 16);
  if (v15)
    v15 += *((unsigned int *)v15 - 1);
  while (v18 != v15)
  {
    v21 = ~(*v18 << 32) + *v18;
    v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
    v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
    v24 = v14 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~((_DWORD)v23 << 27)));
    v25 = 1;
    do
    {
      v26 = v24;
      v27 = *(_QWORD *)&v20[2 * v24];
      v24 = (v24 + v25++) & v14;
    }
    while (v27);
    *(_QWORD *)&v20[2 * v26] = *v18;
    v28 = v18 + 1;
    v18 = v17;
    if (v28 != v17)
    {
      v18 = v28;
      while ((unint64_t)(*v18 + 1) <= 1)
      {
        if (++v18 == v17)
        {
          v18 = v17;
          break;
        }
      }
    }
  }
  v29 = 0;
  v30 = (WebCore::IDBServer::UniqueIDBDatabaseConnection **)&v20[2 * v10];
  while ((unint64_t)(*(_QWORD *)&v20[v29] + 1) <= 1)
  {
    v29 += 2;
    if (2 * v10 == v29)
      return WTF::fastFree(v13, v12);
  }
  if (v29 != 2 * v10)
  {
    v31 = (WebCore::IDBServer::UniqueIDBDatabaseConnection **)&v20[v29];
LABEL_42:
    v32 = *v31;
    if (*v31)
    {
      ++*(_DWORD *)v32;
      v33 = *((_QWORD *)v32 + 3);
      if (v33)
        v34 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v33 + 8);
      else
        v34 = 0;
      WebCore::IDBServer::UniqueIDBDatabase::connectionClosedFromClient(v34, v32);
      if (*(_DWORD *)v32 == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(v32);
        WTF::fastFree(v35, v36);
      }
      else
      {
        --*(_DWORD *)v32;
      }
    }
    else
    {
      if (MEMORY[0x18])
        v37 = *(WebCore::IDBServer::UniqueIDBDatabase **)(MEMORY[0x18] + 8);
      else
        v37 = 0;
      WebCore::IDBServer::UniqueIDBDatabase::connectionClosedFromClient(v37, 0);
    }
    while (++v31 != v30)
    {
      if ((unint64_t)*v31 + 1 > 1)
      {
        if (v31 != v30)
          goto LABEL_42;
        return WTF::fastFree(v13, v12);
      }
    }
  }
  return WTF::fastFree(v13, v12);
}

uint64_t WebCore::serializeIDBKeyPath(uint64_t a1)
{
  _QWORD *v2;
  CFMutableDictionaryRef Mutable;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  uint64_t v8;
  WTF::StringImpl *v9[2];
  _QWORD *v10;
  WTF::StringImpl **v11;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x130);
  *v2 = off_1E3408B38;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v2[4] = Mutable;
  v2[1] = Mutable;
  v2[2] = v2 + 4;
  v2[20] = v2 + 22;
  v2[21] = 16;
  v2[3] = 0x100000010;
  v10 = v2;
  if (*(_BYTE *)(a1 + 24))
  {
    v9[0] = (WTF::StringImpl *)&v10;
    v9[1] = (WTF::StringImpl *)&v10;
    v4 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v4 == -1)
    {
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::deserializeIDBKeyPath(v8);
    }
    v11 = v9;
    ((void (*)(WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZN7WebCore19serializeIDBKeyPathERKNS_8optionalINS_7variantIJNS6_6StringENS6_6VectorISB_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEE3__0JZNS8_19serializeIDBKeyPathESJ_E3__1EEEEEJRKNS0_6__implIJSB_SF_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v11, a1);
    v2 = v10;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(_QWORD *, WTF::StringImpl **, _QWORD))(*v2 + 56))(v2, v9, 0);
    v6 = v9[0];
    v9[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  (*(void (**)(_QWORD *))(*v2 + 88))(v2);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::deserializeIDBKeyPath(const UInt8 *a1, CFIndex a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl **v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;

  if (!a2)
    return 0;
  v6 = WTF::fastMalloc((WTF *)0x140);
  WebCore::KeyedDecoderCF::KeyedDecoderCF(v6, a1, a2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v54 = v51;
  v51 = 0;
  v7 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v6 + 56))(v6, &v54, &v51);
  v9 = (int)v51;
  if (v51 < 3)
    v10 = v7;
  else
    v10 = 0;
  v11 = v54;
  v54 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v8);
      if (!v10)
        goto LABEL_77;
      goto LABEL_9;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v10)
    goto LABEL_77;
LABEL_9:
  if (v9 != 2)
  {
    if (v9 == 1)
    {
      v51 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v6 + 80))(v6, &v54, &v51);
      v14 = v54;
      v54 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v51;
      v51 = 0;
      if (!v13)
      {
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v12);
          else
            *(_DWORD *)v15 -= 2;
        }
        goto LABEL_77;
      }
      if (*(_BYTE *)(a3 + 24))
      {
        v16 = *(unsigned int *)(a3 + 16);
        if ((_DWORD)v16 != -1)
        {
          if (!(_DWORD)v16)
          {
            v17 = *(WTF::StringImpl **)a3;
            *(_QWORD *)a3 = v15;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v12);
              else
                *(_DWORD *)v17 -= 2;
            }
            goto LABEL_64;
          }
          ((void (*)(WTF::StringImpl **, uint64_t))off_1E3359898[v16])(&v54, a3);
        }
        *(_QWORD *)a3 = v15;
        *(_DWORD *)(a3 + 16) = 0;
      }
      else
      {
        *(_QWORD *)a3 = v15;
        *(_DWORD *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 24) = 1;
      }
LABEL_64:
      v38 = v51;
      v51 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v12);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
LABEL_71:
    v18 = 1;
    goto LABEL_78;
  }
  v51 = 0;
  v52 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v50 = v54;
  if (!(*(unsigned int (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 104))(v6, &v50))
  {
    v20 = 0;
    goto LABEL_47;
  }
  v20 = 1;
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6))
  {
    v53 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v6 + 80))(v6, &v54, &v53);
    v23 = v54;
    v54 = 0;
    if (!v23)
      goto LABEL_28;
    if (*(_DWORD *)v23 != 2)
    {
      *(_DWORD *)v23 -= 2;
LABEL_28:
      if (v22)
        goto LABEL_29;
      goto LABEL_33;
    }
    WTF::StringImpl::destroy(v23, v21);
    if (v22)
    {
LABEL_29:
      LODWORD(v24) = HIDWORD(v52);
      if (HIDWORD(v52) == (_DWORD)v52)
      {
        v28 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v51, HIDWORD(v52) + 1, (unint64_t)&v53);
        v24 = HIDWORD(v52);
        v29 = v51;
        v30 = *v28;
        *v28 = 0;
        *((_QWORD *)v29 + v24) = v30;
      }
      else
      {
        v25 = v53;
        v53 = 0;
        *((_QWORD *)v51 + HIDWORD(v52)) = v25;
      }
      HIDWORD(v52) = v24 + 1;
      goto LABEL_34;
    }
LABEL_33:
    v20 = 0;
LABEL_34:
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
    v27 = v53;
    v53 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 != 2)
      {
        *(_DWORD *)v27 -= 2;
        goto LABEL_37;
      }
      WTF::StringImpl::destroy(v27, v26);
      if ((v22 & 1) == 0)
        break;
    }
    else
    {
LABEL_37:
      if ((v22 & 1) == 0)
        break;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 128))(v6);
LABEL_47:
  v31 = v50;
  v50 = 0;
  if (!v31)
  {
LABEL_50:
    if ((v20 & 1) == 0)
      goto LABEL_74;
LABEL_51:
    v32 = v51;
    v34 = v52;
    v33 = HIDWORD(v52);
    v51 = 0;
    v52 = 0;
    if (!*(_BYTE *)(a3 + 24))
    {
      *(_QWORD *)a3 = v32;
      *(_DWORD *)(a3 + 8) = v34;
      *(_DWORD *)(a3 + 12) = v33;
      *(_DWORD *)(a3 + 16) = 1;
      *(_BYTE *)(a3 + 24) = 1;
      goto LABEL_69;
    }
    v35 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v35 != -1)
    {
      if ((_DWORD)v35 == 1)
      {
        v36 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v36)
        {
          v42 = *(WTF::StringImpl ***)a3;
          v43 = 8 * v36;
          do
          {
            v44 = *v42;
            *v42 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, v19);
              else
                *(_DWORD *)v44 -= 2;
            }
            ++v42;
            v43 -= 8;
          }
          while (v43);
        }
        v37 = *(WTF **)a3;
        if (*(_QWORD *)a3)
        {
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
          WTF::fastFree(v37, v19);
        }
        *(_QWORD *)a3 = v32;
        *(_DWORD *)(a3 + 8) = v34;
        *(_DWORD *)(a3 + 12) = v33;
LABEL_69:
        v39 = v51;
        if (HIDWORD(v52))
        {
          v45 = 8 * HIDWORD(v52);
          do
          {
            v46 = *(WTF::StringImpl **)v39;
            *(_QWORD *)v39 = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 2)
                WTF::StringImpl::destroy(v46, v19);
              else
                *(_DWORD *)v46 -= 2;
            }
            v39 = (WTF::StringImpl *)((char *)v39 + 8);
            v45 -= 8;
          }
          while (v45);
          v39 = v51;
          if (!v51)
            goto LABEL_71;
        }
        else if (!v51)
        {
          goto LABEL_71;
        }
        v51 = 0;
        LODWORD(v52) = 0;
        WTF::fastFree(v39, v19);
        goto LABEL_71;
      }
      ((void (*)(WTF::StringImpl **, uint64_t))off_1E3359898[v35])(&v54, a3);
    }
    *(_QWORD *)a3 = v32;
    *(_DWORD *)(a3 + 8) = v34;
    *(_DWORD *)(a3 + 12) = v33;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_69;
  }
  if (*(_DWORD *)v31 != 2)
  {
    *(_DWORD *)v31 -= 2;
    goto LABEL_50;
  }
  WTF::StringImpl::destroy(v31, v19);
  if ((v20 & 1) != 0)
    goto LABEL_51;
LABEL_74:
  if (HIDWORD(v52))
  {
    v47 = v51;
    v48 = 8 * HIDWORD(v52);
    do
    {
      v49 = *(WTF::StringImpl **)v47;
      *(_QWORD *)v47 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v19);
        else
          *(_DWORD *)v49 -= 2;
      }
      v47 = (WTF::StringImpl *)((char *)v47 + 8);
      v48 -= 8;
    }
    while (v48);
  }
  v40 = v51;
  if (v51)
  {
    v51 = 0;
    LODWORD(v52) = 0;
    WTF::fastFree(v40, v19);
  }
LABEL_77:
  v18 = 0;
LABEL_78:
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v18;
}

WTF *WebCore::serializeIDBKeyData@<X0>(WebCore *this@<X0>, uint64_t *a2@<X8>)
{
  char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  WTF *result;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v5 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v11, (WTF *)1, (unint64_t)&WebCore::SIDBKeyVersion);
  *((_BYTE *)v11 + HIDWORD(v12)) = *v5;
  ++HIDWORD(v12);
  WebCore::encodeKey((uint64_t)&v11, (uint64_t)this);
  WebCore::FragmentedSharedBuffer::create(&v11, &v13);
  v6 = WTF::fastMalloc((WTF *)0x38);
  WebCore::SharedBuffer::SharedBuffer(v6, &v13);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v13, v7);
  v13 = 0;
  *a2 = v6;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v13, v8);
  result = v11;
  if (v11)
  {
    v11 = 0;
    LODWORD(v12) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

uint64_t WebCore::encodeKey(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  size_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  const void *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void *v79;
  void *v80;
  void *v81;
  size_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  void *v89;
  char v90;

  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 == -1)
    v2 = -1;
  v4 = result;
  v5 = 32;
  switch(v2)
  {
    case 0:
    case 1:
      goto LABEL_136;
    case 2:
      v5 = 160;
      goto LABEL_10;
    case 3:
      v5 = 96;
      goto LABEL_10;
    case 4:
      goto LABEL_10;
    case 5:
      v5 = 64;
      goto LABEL_10;
    case 6:
      v5 = 128;
      goto LABEL_10;
    case 7:
      v5 = 0;
      goto LABEL_10;
    case 8:
      v5 = 255;
LABEL_10:
      v90 = v5;
      v6 = *(unsigned int *)(result + 12);
      if ((_DWORD)v6 == *(_DWORD *)(result + 8))
      {
        result = (uint64_t)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, (WTF *)(v6 + 1), (unint64_t)&v90);
        *(_BYTE *)(*(_QWORD *)v4 + *(unsigned int *)(v4 + 12)) = *(_BYTE *)result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)result + v6) = v5;
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1953A3814);
  }
  v7 = (*(_DWORD *)(v4 + 12) + 1);
  *(_DWORD *)(v4 + 12) = v7;
  switch(((v5 >> 5) | (8 * v5)) ^ 4)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24) != 6)
        goto LABEL_135;
      v8 = *(_QWORD *)(a2 + 8);
      if (v8)
        v9 = *(unsigned int *)(v8 + 20);
      else
        v9 = 0;
      v38 = v7 + 8;
      v39 = *(unsigned int *)(v4 + 8);
      if (v7 + 8 > v39)
      {
        v53 = v39 + (v39 >> 2);
        if (v53 >= 0x10)
          v54 = v53 + 1;
        else
          v54 = 16;
        if (v54 <= v38)
          v55 = v7 + 8;
        else
          v55 = v54;
        if (HIDWORD(v55))
        {
          __break(0xC471u);
          JUMPOUT(0x1953A393CLL);
        }
        v56 = *(void **)v4;
        v57 = (void *)WTF::fastMalloc((WTF *)v55);
        *(_DWORD *)(v4 + 8) = v55;
        *(_QWORD *)v4 = v57;
        result = (uint64_t)memcpy(v57, v56, v7);
        if (v56)
        {
          if (*(void **)v4 == v56)
          {
            *(_QWORD *)v4 = 0;
            *(_DWORD *)(v4 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v56, v58);
        }
      }
      v40 = *(unsigned int *)(v4 + 12);
      if (v38 < v40)
      {
        __break(0xC471u);
        JUMPOUT(0x1953A3924);
      }
      *(_QWORD *)(*(_QWORD *)v4 + v40) = v9;
      *(_DWORD *)(v4 + 12) = v38;
      v41 = *(_QWORD *)(a2 + 8);
      if (v41)
      {
        v42 = *(unsigned int *)(v41 + 20);
        if ((_DWORD)v42)
        {
          v43 = *(const void **)(v41 + 8);
          v44 = v42 + v38;
          v45 = *(unsigned int *)(v4 + 8);
          if (v44 > v45)
          {
            v76 = v45 + (v45 >> 2);
            if (v76 >= 0x10)
              v77 = v76 + 1;
            else
              v77 = 16;
            if (v77 <= v44)
              v78 = v42 + v38;
            else
              v78 = v77;
            if (HIDWORD(v78))
            {
              __break(0xC471u);
              JUMPOUT(0x1953A395CLL);
            }
            v79 = *(void **)v4;
            v80 = (void *)WTF::fastMalloc((WTF *)v78);
            *(_DWORD *)(v4 + 8) = v78;
            *(_QWORD *)v4 = v80;
            memcpy(v80, v79, v38);
            if (v79)
            {
              if (*(void **)v4 == v79)
              {
                *(_QWORD *)v4 = 0;
                *(_DWORD *)(v4 + 8) = 0;
              }
              WTF::fastFree((WTF *)v79, v81);
            }
          }
          v46 = *(unsigned int *)(v4 + 12);
          if (v44 < v46)
          {
            __break(0xC471u);
            JUMPOUT(0x1953A392CLL);
          }
          result = (uint64_t)memcpy((void *)(*(_QWORD *)v4 + v46), v43, v42);
          *(_DWORD *)(v4 + 12) = v44;
        }
      }
      return result;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_135;
      v14 = *(unsigned int *)(a2 + 20);
      v15 = v7 + 8;
      v16 = *(unsigned int *)(v4 + 8);
      if (v7 + 8 > v16)
      {
        v59 = v16 + (v16 >> 2);
        if (v59 >= 0x10)
          v60 = v59 + 1;
        else
          v60 = 16;
        if (v60 <= v15)
          v61 = v7 + 8;
        else
          v61 = v60;
        if (HIDWORD(v61))
        {
          __break(0xC471u);
          JUMPOUT(0x1953A3944);
        }
        v62 = *(void **)v4;
        v63 = (void *)WTF::fastMalloc((WTF *)v61);
        *(_DWORD *)(v4 + 8) = v61;
        *(_QWORD *)v4 = v63;
        result = (uint64_t)memcpy(v63, v62, v7);
        if (v62)
        {
          if (*(void **)v4 == v62)
          {
            *(_QWORD *)v4 = 0;
            *(_DWORD *)(v4 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v62, v64);
        }
      }
      v17 = *(unsigned int *)(v4 + 12);
      if (v15 < v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1953A390CLL);
      }
      *(_QWORD *)(*(_QWORD *)v4 + v17) = v14;
      *(_DWORD *)(v4 + 12) = v15;
      v18 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        v20 = 32 * v18;
        do
        {
          result = WebCore::encodeKey(v4, v19);
          v19 += 32;
          v20 -= 32;
        }
        while (v20);
      }
      return result;
    case 5:
      if (*(_DWORD *)(a2 + 24) != 4)
        goto LABEL_135;
      v10 = *(_QWORD *)(a2 + 8);
      v11 = v7 + 8;
      v12 = *(unsigned int *)(v4 + 8);
      if (v7 + 8 > v12)
      {
        v47 = v12 + (v12 >> 2);
        if (v47 >= 0x10)
          v48 = v47 + 1;
        else
          v48 = 16;
        if (v48 <= v11)
          v49 = v7 + 8;
        else
          v49 = v48;
        if (HIDWORD(v49))
        {
          __break(0xC471u);
          JUMPOUT(0x1953A3934);
        }
        v50 = *(void **)v4;
        v51 = (void *)WTF::fastMalloc((WTF *)v49);
        *(_DWORD *)(v4 + 8) = v49;
        *(_QWORD *)v4 = v51;
        result = (uint64_t)memcpy(v51, v50, v7);
        if (v50)
        {
          if (*(void **)v4 == v50)
          {
            *(_QWORD *)v4 = 0;
            *(_DWORD *)(v4 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v50, v52);
        }
      }
      v13 = *(unsigned int *)(v4 + 12);
      if (v11 < v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1953A330CLL);
      }
      goto LABEL_30;
    case 6:
      if (*(_DWORD *)(a2 + 24) != 5)
        goto LABEL_135;
      v10 = *(_QWORD *)(a2 + 8);
      v11 = v7 + 8;
      v21 = *(unsigned int *)(v4 + 8);
      if (v7 + 8 > v21)
      {
        v65 = v21 + (v21 >> 2);
        if (v65 >= 0x10)
          v66 = v65 + 1;
        else
          v66 = 16;
        if (v66 <= v11)
          v67 = v7 + 8;
        else
          v67 = v66;
        if (HIDWORD(v67))
        {
          __break(0xC471u);
          JUMPOUT(0x1953A394CLL);
        }
        v68 = *(void **)v4;
        v69 = (void *)WTF::fastMalloc((WTF *)v67);
        *(_DWORD *)(v4 + 8) = v67;
        *(_QWORD *)v4 = v69;
        result = (uint64_t)memcpy(v69, v68, v7);
        if (v68)
        {
          if (*(void **)v4 == v68)
          {
            *(_QWORD *)v4 = 0;
            *(_DWORD *)(v4 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v68, v70);
        }
      }
      v13 = *(unsigned int *)(v4 + 12);
      if (v11 < v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1953A3914);
      }
LABEL_30:
      *(_QWORD *)(*(_QWORD *)v4 + v13) = v10;
      *(_DWORD *)(v4 + 12) = v11;
      return result;
    case 7:
      if (*(_DWORD *)(a2 + 24) != 3)
      {
LABEL_135:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_136:
        __break(0xC471u);
        JUMPOUT(0x1953A37F4);
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
        LODWORD(v23) = *(_DWORD *)(v22 + 4);
        *(_DWORD *)v22 += 2;
      }
      else
      {
        LODWORD(v23) = 0;
      }
      v24 = v7 + 4;
      v25 = *(unsigned int *)(v4 + 8);
      if (v7 + 4 > v25)
      {
        v71 = v25 + (v25 >> 2);
        if (v71 >= 0x10)
          v72 = v71 + 1;
        else
          v72 = 16;
        if (v72 <= v24)
          v73 = v7 + 4;
        else
          v73 = v72;
        if (HIDWORD(v73))
        {
          __break(0xC471u);
          JUMPOUT(0x1953A3954);
        }
        v74 = *(void **)v4;
        v75 = (void *)WTF::fastMalloc((WTF *)v73);
        *(_DWORD *)(v4 + 8) = v73;
        *(_QWORD *)v4 = v75;
        result = (uint64_t)memcpy(v75, v74, v7);
        if (v74)
        {
          if (*(void **)v4 == v74)
          {
            *(_QWORD *)v4 = 0;
            *(_DWORD *)(v4 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v74, (void *)a2);
        }
      }
      v26 = *(unsigned int *)(v4 + 12);
      if (v24 < v26)
      {
        __break(0xC471u);
        JUMPOUT(0x1953A391CLL);
      }
      *(_DWORD *)(*(_QWORD *)v4 + v26) = v23;
      *(_DWORD *)(v4 + 12) = v24;
      if (!(_DWORD)v23)
        goto LABEL_153;
      v23 = v23;
      if (v22)
      {
        v27 = 0;
        do
        {
          if (*(_DWORD *)(v22 + 4) <= v27)
          {
            v29 = 0;
          }
          else
          {
            v28 = *(_QWORD *)(v22 + 8);
            if ((*(_BYTE *)(v22 + 16) & 4) != 0)
              v29 = *(unsigned __int8 *)(v28 + v27);
            else
              v29 = *(_WORD *)(v28 + 2 * v27);
          }
          v30 = v24;
          v24 = v24 + 2;
          v31 = *(unsigned int *)(v4 + 8);
          if (v24 > v31)
          {
            v33 = v31 + (v31 >> 2);
            if (v33 >= 0x10)
              v34 = v33 + 1;
            else
              v34 = 16;
            if (v34 <= v24)
              v35 = v24;
            else
              v35 = v34;
            if (HIDWORD(v35))
              goto LABEL_159;
            v36 = *(void **)v4;
            v37 = (void *)WTF::fastMalloc((WTF *)v35);
            *(_DWORD *)(v4 + 8) = v35;
            *(_QWORD *)v4 = v37;
            result = (uint64_t)memcpy(v37, v36, v30);
            if (v36)
            {
              if (*(void **)v4 == v36)
              {
                *(_QWORD *)v4 = 0;
                *(_DWORD *)(v4 + 8) = 0;
              }
              result = WTF::fastFree((WTF *)v36, (void *)a2);
            }
          }
          v32 = *(unsigned int *)(v4 + 12);
          if (v24 < v32)
            goto LABEL_158;
          *(_WORD *)(*(_QWORD *)v4 + v32) = v29;
          *(_DWORD *)(v4 + 12) = v24;
          ++v27;
        }
        while (v23 != v27);
LABEL_154:
        if (*(_DWORD *)v22 == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)v22, (WTF::StringImpl *)a2);
        *(_DWORD *)v22 -= 2;
        return result;
      }
      do
      {
        v82 = v24;
        v24 = v24 + 2;
        v83 = *(unsigned int *)(v4 + 8);
        if (v24 > v83)
        {
          v85 = v83 + (v83 >> 2);
          if (v85 >= 0x10)
            v86 = v85 + 1;
          else
            v86 = 16;
          if (v86 <= v24)
            v87 = v24;
          else
            v87 = v86;
          if (HIDWORD(v87))
          {
LABEL_159:
            __break(0xC471u);
            JUMPOUT(0x1953A3904);
          }
          v88 = *(void **)v4;
          v89 = (void *)WTF::fastMalloc((WTF *)v87);
          *(_DWORD *)(v4 + 8) = v87;
          *(_QWORD *)v4 = v89;
          result = (uint64_t)memcpy(v89, v88, v82);
          if (v88)
          {
            if (*(void **)v4 == v88)
            {
              *(_QWORD *)v4 = 0;
              *(_DWORD *)(v4 + 8) = 0;
            }
            result = WTF::fastFree((WTF *)v88, (void *)a2);
          }
        }
        v84 = *(unsigned int *)(v4 + 12);
        if (v24 < v84)
        {
LABEL_158:
          __break(0xC471u);
          JUMPOUT(0x1953A38FCLL);
        }
        *(_WORD *)(*(_QWORD *)v4 + v84) = 0;
        *(_DWORD *)(v4 + 12) = v24;
        --v23;
      }
      while (v23);
LABEL_153:
      if (v22)
        goto LABEL_154;
      return result;
    default:
      return result;
  }
}

uint64_t WebCore::decodeKey(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v2;
  _BOOL8 v5;
  __int16 *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  _WORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  BOOL v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  WTF *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unsigned int v63;
  unsigned int v64;
  WTF *v65;
  WTF::StringImpl *v66;
  _QWORD v67[2];
  int v68;
  uint64_t v69;
  uint64_t v70;
  char v71;

  v2 = a1[1];
  if (!v2)
    return 0;
  v5 = 0;
  v6 = (__int16 *)*a1;
  v7 = **a1;
  v8 = (unint64_t)(v2 - 1);
  ++*a1;
  a1[1] = v2 - 1;
  if (v7 <= 95)
  {
    if (!v7)
    {
      *(_BYTE *)a2 = 0;
      v21 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v21 != -1)
      {
        if ((_DWORD)v21 == 7)
          return 1;
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v21])(&v66, a2 + 8);
      }
      v19 = 7;
      goto LABEL_90;
    }
    if (v7 != 32)
    {
      if (v7 != 64)
        return v5;
      if (v8 < 8)
        return 0;
      v16 = *(_QWORD *)((char *)v6 + 1);
      *a1 = (unsigned __int8 *)v6 + 9;
      a1[1] = v2 - 9;
      v17 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v17 == -1)
        goto LABEL_20;
      v18 = (_QWORD *)(a2 + 8);
      if ((_DWORD)v17 != 5)
      {
        ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v17])(&v66, v18);
LABEL_20:
        *(_QWORD *)(a2 + 8) = v16;
        v19 = 5;
LABEL_90:
        *(_DWORD *)(a2 + 24) = v19;
        return 1;
      }
LABEL_77:
      *v18 = v16;
      return 1;
    }
    if (v8 < 8)
      return 0;
    v16 = *(_QWORD *)((char *)v6 + 1);
    *a1 = (unsigned __int8 *)v6 + 9;
    a1[1] = v2 - 9;
    v44 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v44 != -1)
    {
      v18 = (_QWORD *)(a2 + 8);
      if ((_DWORD)v44 == 4)
        goto LABEL_77;
      ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v44])(&v66, v18);
    }
    *(_QWORD *)(a2 + 8) = v16;
    v19 = 4;
    goto LABEL_90;
  }
  if (v7 > 159)
  {
    if (v7 != 160)
    {
      if (v7 != 255)
        return v5;
      *(_BYTE *)a2 = 0;
      v20 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v20 == -1)
        goto LABEL_26;
      if ((_DWORD)v20 != 8)
      {
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v20])(&v66, a2 + 8);
LABEL_26:
        v19 = 8;
        goto LABEL_90;
      }
      return 1;
    }
    if (v8 < 8)
      return 0;
    v35 = *(_QWORD *)((char *)v6 + 1);
    *a1 = (unsigned __int8 *)v6 + 9;
    a1[1] = v2 - 9;
    v69 = 0;
    v70 = 0;
    if (v35)
    {
      if (v35 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x1953A40E0);
      }
      LODWORD(v70) = v35;
      v69 = WTF::fastMalloc((WTF *)(32 * v35));
      LOBYTE(v66) = 0;
      v67[0] = 0;
      v68 = 0;
      v5 = 0;
      if (WebCore::decodeKey(a1, &v66))
      {
        v36 = 0;
        while (HIDWORD(v70) != (_DWORD)v70)
        {
          v42 = v69 + 32 * HIDWORD(v70);
          *(_BYTE *)v42 = (_BYTE)v66;
          *(_BYTE *)(v42 + 8) = 0;
          v43 = v42 + 8;
          *(_DWORD *)(v42 + 24) = -1;
          v40 = (_DWORD *)(v42 + 24);
          LODWORD(v41) = v68;
          if (v68 != -1)
          {
            ((void (*)(char *, uint64_t, _QWORD *))off_1E3359900[v68])(&v71, v43, v67);
LABEL_65:
            *v40 = v41;
LABEL_66:
            ++HIDWORD(v70);
            if (v68 != -1)
              ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v68])(&v71, v67);
            goto LABEL_69;
          }
          ++HIDWORD(v70);
LABEL_69:
          if (v35 - 1 == v36)
            goto LABEL_79;
          LOBYTE(v66) = 0;
          v67[0] = 0;
          v68 = 0;
          ++v36;
          if (!WebCore::decodeKey(a1, &v66))
          {
            v5 = v36 >= v35;
            goto LABEL_72;
          }
        }
        v37 = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, HIDWORD(v70) + 1, (unint64_t)&v66);
        v38 = v69 + 32 * HIDWORD(v70);
        *(_BYTE *)v38 = *(_BYTE *)v37;
        *(_BYTE *)(v38 + 8) = 0;
        v39 = v38 + 8;
        *(_DWORD *)(v38 + 24) = -1;
        v40 = (_DWORD *)(v38 + 24);
        v41 = *(unsigned int *)(v37 + 24);
        if ((_DWORD)v41 != -1)
        {
          ((void (*)(char *, uint64_t, unint64_t))off_1E3359900[v41])(&v71, v39, v37 + 8);
          goto LABEL_65;
        }
        goto LABEL_66;
      }
LABEL_72:
      if (v68 != -1)
        ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v68])(&v71, v67);
    }
    else
    {
LABEL_79:
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a2 + 8, a2 + 8, (unsigned int *)&v69);
      v5 = 1;
    }
    v45 = (WTF *)v69;
    if (HIDWORD(v70))
    {
      v46 = 32 * HIDWORD(v70);
      v47 = (_DWORD *)(v69 + 24);
      do
      {
        v48 = *v47;
        if ((_DWORD)v48 != -1)
          ((void (*)(WTF::StringImpl **, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v48])(&v66, v47 - 4);
        *v47 = -1;
        v47 += 8;
        v46 -= 32;
      }
      while (v46);
      v45 = (WTF *)v69;
    }
    if (!v45)
      return v5;
    v69 = 0;
    LODWORD(v70) = 0;
LABEL_132:
    WTF::fastFree(v45, v24);
    return v5;
  }
  if (v7 == 96)
  {
    if (v8 < 4)
      return 0;
    v22 = *(unsigned int *)((char *)v6 + 1);
    v23 = (unint64_t)(v2 - 5);
    *a1 = (unsigned __int8 *)v6 + 5;
    a1[1] = (unsigned __int8 *)v23;
    if (v23 < (2 * v22))
      return 0;
    if ((_DWORD)v22)
    {
      if ((v22 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1953A40E8);
      }
      v25 = (void *)WTF::fastMalloc((WTF *)(2 * v22));
      v26 = (unint64_t)a1[1];
      if (v26 >= 2)
      {
        v27 = 0;
        LODWORD(v28) = v22;
        while (1)
        {
          v29 = *(_WORD *)*a1;
          *a1 += 2;
          a1[1] = (unsigned __int8 *)(v26 - 2);
          if (v27 == v28)
          {
            v30 = v27 + (v27 >> 2);
            if (v30 >= 0x10)
              v31 = v30 + 1;
            else
              v31 = 16;
            if (v31 <= v27 + 1)
              v28 = v27 + 1;
            else
              v28 = v31;
            if (v28 >> 31)
            {
              __break(0xC471u);
              goto LABEL_140;
            }
            v32 = (void *)WTF::fastMalloc((WTF *)(2 * v28));
            memcpy(v32, v25, 2 * v27);
            if (v32 == v25)
              v34 = 0;
            else
              v34 = v32;
            if (v32 == v25)
              LODWORD(v28) = 0;
            WTF::fastFree((WTF *)v25, v33);
            v34[v27++] = v29;
            v25 = v32;
          }
          else
          {
            *((_WORD *)v25 + v27++) = v29;
          }
          if (v27 == v22)
            goto LABEL_106;
          v26 = (unint64_t)a1[1];
          if (v26 < 2)
          {
            v5 = v27 >= v22;
            goto LABEL_131;
          }
        }
      }
      v5 = 0;
LABEL_131:
      v45 = (WTF *)v25;
      goto LABEL_132;
    }
    v25 = 0;
LABEL_106:
    WTF::StringImpl::create();
    v60 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v60 != -1)
    {
      v24 = (uint64_t *)(a2 + 8);
      if ((_DWORD)v60 == 3)
      {
        v61 = v66;
        if (v66)
          *(_DWORD *)v66 += 2;
        v62 = (WTF::StringImpl *)*v24;
        *v24 = (uint64_t)v61;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
          {
            WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v24);
            v61 = v66;
          }
          else
          {
            *(_DWORD *)v62 -= 2;
          }
        }
        goto LABEL_127;
      }
      ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v60])(&v69, v24);
    }
    v61 = v66;
    if (v66)
      *(_DWORD *)v66 += 2;
    *(_QWORD *)(a2 + 8) = v61;
    *(_DWORD *)(a2 + 24) = 3;
LABEL_127:
    v66 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v24);
      else
        *(_DWORD *)v61 -= 2;
    }
    v5 = 1;
    if (!v25)
      return v5;
    goto LABEL_131;
  }
  if (v7 != 128)
    return v5;
  if (v8 < 8)
    return 0;
  v9 = *(_QWORD *)((char *)v6 + 1);
  v10 = v2 - 9;
  v11 = (char *)v6 + 9;
  *a1 = (unsigned __int8 *)v6 + 9;
  a1[1] = v2 - 9;
  if ((unint64_t)(v2 - 9) < v9)
    return 0;
  if (v2 == (unsigned __int8 *)9)
  {
    v15 = 0;
    v13 = 0;
  }
  else
  {
    if ((unint64_t)v10 >> 32)
    {
      __break(0xC471u);
LABEL_139:
      __break(1u);
LABEL_140:
      JUMPOUT(0x1953A40D8);
    }
    v12 = WTF::fastMalloc((WTF *)(v2 - 9));
    v13 = v12;
    v14 = 0;
    do
    {
      v14[v12] = v14[(_QWORD)v11];
      ++v14;
    }
    while (v10 != v14);
    v15 = a1[1];
  }
  v50 = (unint64_t)v15 >= v9;
  v51 = &v15[-v9];
  if (!v50)
    goto LABEL_139;
  *a1 += v9;
  a1[1] = v51;
  v52 = WTF::fastMalloc((WTF *)0x18);
  v53 = v52;
  *(_DWORD *)v52 = 1;
  *(_QWORD *)(v52 + 8) = v13;
  *(_DWORD *)(v52 + 16) = (_DWORD)v10;
  *(_DWORD *)(v52 + 20) = (_DWORD)v10;
  v54 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v54 == -1)
    goto LABEL_114;
  v24 = (uint64_t *)(a2 + 8);
  if ((_DWORD)v54 != 6)
  {
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v54])(&v66, v24);
LABEL_114:
    *(_DWORD *)(a2 + 24) = -1;
    do
      v63 = __ldaxr((unsigned int *)v53);
    while (__stlxr(v63 + 1, (unsigned int *)v53));
    *(_QWORD *)(a2 + 8) = v53;
    *(_DWORD *)(a2 + 24) = 6;
    goto LABEL_117;
  }
  do
    v55 = __ldaxr((unsigned int *)v52);
  while (__stlxr(v55 + 1, (unsigned int *)v52));
  v56 = *v24;
  *v24 = v52;
  if (v56)
  {
    do
    {
      v57 = __ldaxr((unsigned int *)v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, (unsigned int *)v56));
    if (!v58)
    {
      atomic_store(1u, (unsigned int *)v56);
      v59 = *(WTF **)(v56 + 8);
      if (v59)
      {
        *(_QWORD *)(v56 + 8) = 0;
        *(_DWORD *)(v56 + 16) = 0;
        WTF::fastFree(v59, v24);
      }
      WTF::fastFree((WTF *)v56, v24);
    }
  }
  do
LABEL_117:
    v64 = __ldaxr((unsigned int *)v53);
  while (__stlxr(v64 - 1, (unsigned int *)v53));
  v5 = 1;
  if (v64 == 1)
  {
    atomic_store(1u, (unsigned int *)v53);
    v65 = *(WTF **)(v53 + 8);
    if (v65)
    {
      *(_QWORD *)(v53 + 8) = 0;
      *(_DWORD *)(v53 + 16) = 0;
      WTF::fastFree(v65, v24);
    }
    v45 = (WTF *)v53;
    goto LABEL_132;
  }
  return v5;
}

WebCore::IDBServer::IDBServer *WebCore::IDBServer::IDBServer::IDBServer(WebCore::IDBServer::IDBServer *this, WTF::StringImpl *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;

  *(_QWORD *)this = off_1E33597B0;
  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v5 = *a3;
  *a3 = 0;
  *((_QWORD *)this + 8) = v5;
  *((_QWORD *)this + 9) = a4;
  v6 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v6 += 2;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::IDBServer::IDBServer::upgradeFilesIfNecessary((uint64_t)this, a2);
  return this;
}

{
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;

  *(_QWORD *)this = off_1E33597B0;
  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v5 = *a3;
  *a3 = 0;
  *((_QWORD *)this + 8) = v5;
  *((_QWORD *)this + 9) = a4;
  v6 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v6 += 2;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::IDBServer::IDBServer::upgradeFilesIfNecessary((uint64_t)this, a2);
  return this;
}

uint64_t WebCore::IDBServer::IDBServer::upgradeFilesIfNecessary(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  const WTF::String *v3;
  const WTF::String *v4;
  WTF::StringImpl *v5;

  v2 = *(_QWORD *)(this + 56);
  if (v2)
  {
    if (*(_DWORD *)(v2 + 4))
    {
      this = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)(this + 56), a2);
      if ((_DWORD)this)
      {
        WTF::FileSystemImpl::pathByAppendingComponent();
        if ((WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v5, v3) & 1) == 0)
          WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v5, v4);
        this = (uint64_t)v5;
        v5 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)this, v4);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

void WebCore::IDBServer::IDBServer::~IDBServer(WebCore::IDBServer::IDBServer *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  *(_QWORD *)this = off_1E33597B0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = v3 + 88 * v4;
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *((_QWORD *)this + 3);
      if (v4)
      {
        v7 = 88 * v4;
        v6 = *((_QWORD *)this + 3);
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 88;
          v7 -= 88;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = v3 + 88 * v4;
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = v3 + 88 * v4;
  if (v3)
  {
LABEL_8:
    v8 = v3 + 88 * *(unsigned int *)(v3 - 4);
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  while (v6 != v8)
  {
    WebCore::IDBServer::UniqueIDBDatabase::immediateClose(*(WebCore::IDBServer::UniqueIDBDatabase **)(v6 + 80), a2);
    v9 = v6 + 88;
    v6 = v5;
    if (v9 != v5)
    {
      v6 = v9;
      while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
      {
        v6 += 88;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *((_QWORD *)this + 6);
  if (v12)
  {
    v25 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v25)
    {
      v26 = (uint64_t *)(v12 + 8);
      do
      {
        if (*(v26 - 1) != -1)
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  v13 = *((_QWORD *)this + 5);
  if (v13)
    WTF::fastFree((WTF *)(v13 - 16), a2);
  v14 = *((_QWORD *)this + 4);
  if (v14)
    WTF::fastFree((WTF *)(v14 - 16), a2);
  v15 = *((_QWORD *)this + 3);
  if (v15)
    WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::deallocateTable(v15, a2);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = (WTF **)(v16 + 8);
      do
      {
        if (*(v18 - 1) != (WTF *)-1)
        {
          v19 = *v18;
          *v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1)
            {
              v20 = *((_QWORD *)v19 + 2);
              if (v20)
                WTF::fastFree((WTF *)(v20 - 16), a2);
              WTF::fastFree(v19, a2);
            }
            else
            {
              --*(_DWORD *)v19;
            }
          }
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  v21 = *((_QWORD *)this + 1);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    v22 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::IDBServer::IDBServer::~IDBServer(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::IDBServer::IDBServer::registerConnection(WebCore::IDBServer::IDBServer *this, WebCore::IDBServer::IDBConnectionToClient *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 16))(*((_QWORD *)a2 + 1));
  v6 = result;
  v9 = *((_QWORD *)this + 2);
  v8 = (uint64_t *)((char *)this + 16);
  v7 = v9;
  if (v9
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v8, 8u), (v7 = *v8) != 0))
  {
    v10 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = (uint64_t *)(v7 + 16 * v14);
  v16 = *v15;
  if (!*v15)
  {
LABEL_12:
    v19 = (WTF *)v15[1];
    *v15 = v6;
    ++*(_DWORD *)a2;
    v15[1] = (uint64_t)a2;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
      {
        v28 = *((_QWORD *)v19 + 2);
        if (v28)
          WTF::fastFree((WTF *)(v28 - 16), v5);
        result = WTF::fastFree(v19, v5);
      }
      else
      {
        --*(_DWORD *)v19;
      }
    }
    v20 = *v8;
    if (*v8)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v23 = *v8;
    if (*v8)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        return result;
    }
    else
    {
      if (3 * v26 > 4 * v25)
        return result;
      if (!(_DWORD)v26)
      {
        v27 = 8;
        return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v8, v27);
      }
    }
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v8, v27);
  }
  v17 = 0;
  v18 = 1;
  while (v16 != v6)
  {
    if (v16 == -1)
      v17 = v15;
    v14 = (v14 + v18) & v10;
    v15 = (uint64_t *)(v7 + 16 * v14);
    v16 = *v15;
    ++v18;
    if (!*v15)
    {
      if (v17)
      {
        *v17 = 0;
        v17[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        v15 = v17;
      }
      goto LABEL_12;
    }
  }
  ++*(_DWORD *)a2;
  v22 = (WTF *)v15[1];
  v15[1] = (uint64_t)a2;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      v29 = *((_QWORD *)v22 + 2);
      if (v29)
        WTF::fastFree((WTF *)(v29 - 16), v5);
      return WTF::fastFree(v22, v5);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
  return result;
}

uint64_t WebCore::IDBServer::IDBServer::unregisterConnection(WebCore::IDBServer::IDBServer *this, WebCore::IDBServer::IDBConnectionToClient *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;

  WebCore::IDBServer::IDBConnectionToClient::connectionToClientClosed((uint64_t)a2);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 16))(*((_QWORD *)a2 + 1));
  v8 = *((_QWORD *)this + 2);
  v7 = (uint64_t *)((char *)this + 16);
  v6 = v8;
  if (v8)
  {
    v9 = *(_DWORD *)(v6 - 8);
    v10 = (result + ~(result << 32)) ^ ((unint64_t)(result + ~(result << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v6 + 16 * v13);
    if (v14 != result)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v6 + 16 * v13);
        ++v15;
        if (v14 == result)
          goto LABEL_8;
      }
      v13 = *(unsigned int *)(v6 - 4);
    }
LABEL_8:
    if (v13 != *(_DWORD *)(v6 - 4))
    {
      v16 = (_QWORD *)(v6 + 16 * v13);
      v17 = (WTF *)v16[1];
      *v16 = -1;
      v16[1] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          v24 = *((_QWORD *)v17 + 2);
          if (v24)
            WTF::fastFree((WTF *)(v24 - 16), v5);
          result = WTF::fastFree(v17, v5);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
      ++*(_DWORD *)(*v7 - 16);
      v18 = *v7;
      if (*v7)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v7;
      if (*v7)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v7, v22 >> 1);
      }
    }
  }
  return result;
}

void WebCore::IDBServer::IDBServer::registerTransaction(WebCore::IDBServer::IDBServer *this, WebCore::IDBServer::UniqueIDBDatabaseTransaction *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;

  v4 = (uint64_t *)((char *)this + 40);
  v3 = *((_QWORD *)this + 5);
  if (v3
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)this + 5, 8u), (v3 = *v4) != 0))
  {
    v5 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = *((_QWORD *)a2 + 3);
  v7 = *((_QWORD *)a2 + 4);
  v8 = (v6 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v6 - 1640531527) << 16) ^ ((unsigned __int16)v6
                                                                                          - 1640531527);
  v9 = (v6 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(v6) + (v8 >> 11)) << 16) ^ (v8 + WORD2(v6) + (v8 >> 11));
  v10 = (v7 >> 5) & 0x7FFF800 ^ ((v9 + (unsigned __int16)v7 + (v9 >> 11)) << 16) ^ (v9
                                                                                                + (unsigned __int16)v7
                                                                                                + (v9 >> 11));
  v11 = (v7 >> 37) & 0x7FFF800 ^ ((v10 + WORD2(v7) + (v10 >> 11)) << 16) ^ (v10 + WORD2(v7) + (v10 >> 11));
  v12 = (v11 + (v11 >> 11)) ^ (8 * (v11 + (v11 >> 11)));
  v13 = (v12 + (v12 >> 5)) ^ (4 * (v12 + (v12 >> 5)));
  v14 = (v13 + (v13 >> 15)) ^ ((v13 + (v13 >> 15)) << 10);
  if (!v14)
    v14 = 0x800000;
  v15 = v14 & v5;
  v16 = (_QWORD *)(v3 + 24 * (v14 & v5));
  v18 = *v16;
  v17 = v16[1];
  if (*(_OWORD *)v16 != 0)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      if (v18 == -1)
      {
        v19 = v16;
      }
      else if (v18 == v6 && v17 == v7)
      {
        v16[2] = a2;
        return;
      }
      v15 = (v15 + v20) & v5;
      v16 = (_QWORD *)(v3 + 24 * v15);
      v18 = *v16;
      v17 = v16[1];
      ++v20;
    }
    while (*(_OWORD *)v16 != 0);
    if (v19)
    {
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      --*(_DWORD *)(*v4 - 16);
      v16 = v19;
    }
  }
  *(_OWORD *)v16 = *(_OWORD *)((char *)a2 + 24);
  v16[2] = a2;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v4;
  if (*v4)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_29;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_30:
      WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v4, v27);
      return;
    }
LABEL_29:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_30;
  }
}

void WebCore::IDBServer::IDBServer::unregisterTransaction(WebCore::IDBServer::IDBServer *this, WebCore::IDBServer::UniqueIDBDatabaseTransaction *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v4 = *((_QWORD *)this + 5);
  v2 = (uint64_t *)((char *)this + 40);
  v3 = v4;
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 3);
    v6 = *((_QWORD *)a2 + 4);
    v7 = *(_DWORD *)(v3 - 8);
    v8 = (v5 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v5 - 1640531527) << 16) ^ ((unsigned __int16)v5
                                                                                            - 1640531527);
    v9 = (v5 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(v5) + (v8 >> 11)) << 16) ^ (v8 + WORD2(v5) + (v8 >> 11));
    v10 = (v6 >> 5) & 0x7FFF800 ^ ((v9 + (unsigned __int16)v6 + (v9 >> 11)) << 16) ^ (v9
                                                                                                  + (unsigned __int16)v6
                                                                                                  + (v9 >> 11));
    v11 = (v6 >> 37) & 0x7FFF800 ^ ((v10 + WORD2(v6) + (v10 >> 11)) << 16) ^ (v10 + WORD2(v6) + (v10 >> 11));
    v12 = (v11 + (v11 >> 11)) ^ (8 * (v11 + (v11 >> 11)));
    v13 = (v12 + (v12 >> 5)) ^ (4 * (v12 + (v12 >> 5)));
    v14 = (v13 + (v13 >> 15)) ^ ((v13 + (v13 >> 15)) << 10);
    if (!v14)
      v14 = 0x800000;
    v15 = v14 & v7;
    v16 = (uint64_t *)(v3 + 24 * (v14 & v7));
    v18 = *v16;
    v17 = v16[1];
    if (*(_OWORD *)v16 == 0)
    {
LABEL_10:
      v20 = *(_DWORD *)(v3 - 4);
      v16 = (uint64_t *)(v3 + 24 * v20);
    }
    else
    {
      v19 = 1;
      while (v18 == -1 || v18 != v5 || v17 != v6)
      {
        v15 = (v15 + v19) & v7;
        v16 = (uint64_t *)(v3 + 24 * v15);
        v18 = *v16;
        v17 = v16[1];
        ++v19;
        if (*(_OWORD *)v16 == 0)
          goto LABEL_10;
      }
      v20 = *(_DWORD *)(v3 - 4);
    }
    if ((uint64_t *)(v3 + 24 * v20) != v16)
    {
      *v16 = -1;
      ++*(_DWORD *)(*v2 - 16);
      v21 = *v2;
      v22 = *v2 ? *(_DWORD *)(v21 - 12) - 1 : -1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v2;
      if (*v2)
      {
        v24 = 6 * *(_DWORD *)(v23 - 12);
        v25 = *(_DWORD *)(v23 - 4);
        if (v24 < v25 && v25 >= 9)
          WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v2, v25 >> 1);
      }
    }
  }
}

uint64_t WebCore::IDBServer::IDBServer::registerConnection(uint64_t this, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;

  v4 = (uint64_t *)(this + 32);
  v3 = *(_QWORD *)(this + 32);
  v5 = *((_QWORD *)a2 + 1);
  if (v3
    || (this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(this + 32), 8u), (v3 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (_QWORD *)(v3 + 16 * v10);
  v12 = *v11;
  if (*v11)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      if (v12 == v5)
      {
        v11[1] = a2;
        return this;
      }
      if (v12 == -1)
        v13 = v11;
      v10 = (v10 + v14) & v6;
      v11 = (_QWORD *)(v3 + 16 * v10);
      v12 = *v11;
      ++v14;
    }
    while (*v11);
    if (v13)
    {
      *v13 = 0;
      v13[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      v11 = v13;
    }
  }
  *v11 = v5;
  v11[1] = a2;
  v15 = *v4;
  if (*v4)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 <= 0x400)
  {
    if (3 * v20 > 4 * v19)
      return this;
    if (!(_DWORD)v20)
    {
      v21 = 8;
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v4, v21);
    }
LABEL_26:
    v21 = (_DWORD)v20 << (6 * *(_DWORD *)(v17 - 12) >= (2 * v20));
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v4, v21);
  }
  if (v20 <= 2 * v19)
    goto LABEL_26;
  return this;
}

uint64_t *WebCore::IDBServer::IDBServer::unregisterConnection(WebCore::IDBServer::IDBServer *this, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v4 = *((_QWORD *)this + 4);
  result = (uint64_t *)((char *)this + 32);
  v3 = v4;
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *(_DWORD *)(v3 - 8);
    v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v3 + 16 * v10);
    if (v11 != v5)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v3 + 16 * v10);
        ++v12;
        if (v11 == v5)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v3 - 4))
    {
      *(_QWORD *)(v3 + 16 * v10) = -1;
      ++*(_DWORD *)(*result - 16);
      v13 = *result;
      v14 = *result ? *(_DWORD *)(v13 - 12) - 1 : -1;
      *(_DWORD *)(v13 - 12) = v14;
      v15 = *result;
      if (*result)
      {
        v16 = 6 * *(_DWORD *)(v15 - 12);
        v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
          return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v17 >> 1);
      }
    }
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  const WTF::StringImpl *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  _BOOL4 v21;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  _BOOL4 v28;
  _BOOL4 v30;
  _BOOL4 v31;
  uint64_t v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t *v52;
  unsigned __int8 v54;
  unsigned __int8 *v55;

  v5 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(a2, 8u, 0), (v5 = *a2) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v52 = a2;
  LODWORD(v55) = -1640531527;
  WORD2(v55) = 0;
  BYTE6(v55) = 0;
  v54 = *(_BYTE *)(a3 + 72);
  WTF::add<WTF::String,WebCore::ClientOrigin,BOOL>((unsigned int *)&v55, *(_QWORD *)a3, a3 + 8, &v54);
  v8 = v55;
  if (BYTE6(v55))
  {
    v51 = ((_DWORD)v55 + WORD2(v55)) ^ (((_DWORD)v55 + WORD2(v55)) << 11);
    v8 = v51 + (v51 >> 17);
  }
  v9 = 0;
  v10 = (v8 ^ (8 * v8)) + ((v8 ^ (8 * v8)) >> 5);
  v11 = (v10 ^ (4 * v10)) + ((v10 ^ (4 * v10)) >> 15);
  v12 = v11 ^ (v11 << 10);
  if (!v12)
    v12 = 0x800000;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v6;
    v15 = v5 + 88 * (v12 & v6);
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 == -1)
    {
      v9 = v5 + 88 * v14;
      goto LABEL_30;
    }
    if (!v16)
    {
      if (v9)
      {
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        *(_DWORD *)(v9 + 64) = 0;
        *(_QWORD *)(v9 + 56) = 0;
        *(_BYTE *)(v9 + 72) = 0;
        *(_OWORD *)v9 = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        *(_DWORD *)(v9 + 32) = 0;
        *(_QWORD *)(v9 + 80) = 0;
        --*(_DWORD *)(*v52 - 16);
        v15 = v9;
      }
      v34 = *(_DWORD **)a3;
      if (*(_QWORD *)a3)
        *v34 += 2;
      *(_QWORD *)v15 = v34;
      v35 = *(unsigned int *)(v15 + 32);
      v36 = *(unsigned int *)(a3 + 32);
      if ((_DWORD)v35 == -1)
      {
        if ((_DWORD)v36 == -1)
          goto LABEL_61;
      }
      else if ((_DWORD)v36 == -1)
      {
        ((void (*)(unsigned __int8 **, uint64_t))off_1E3359868[v35])(&v55, v15 + 8);
        *(_DWORD *)(v15 + 32) = -1;
        goto LABEL_61;
      }
      v55 = (unsigned __int8 *)(v15 + 8);
      ((void (*)(unsigned __int8 **))off_1E335A020[v36])(&v55);
LABEL_61:
      v37 = (void *)(v15 + 40);
      v38 = *(unsigned int *)(v15 + 64);
      v39 = *(unsigned int *)(a3 + 64);
      if ((_DWORD)v38 == -1)
      {
        if ((_DWORD)v39 == -1)
          goto LABEL_66;
      }
      else if ((_DWORD)v39 == -1)
      {
        ((void (*)(unsigned __int8 **, void *))off_1E3359868[v38])(&v55, v37);
        *(_DWORD *)(v15 + 64) = -1;
        goto LABEL_66;
      }
      v55 = (unsigned __int8 *)(v15 + 40);
      ((void (*)(unsigned __int8 **))off_1E335A020[v39])(&v55);
LABEL_66:
      *(_BYTE *)(v15 + 72) = *(_BYTE *)(a3 + 72);
      result = *(_QWORD *)(v15 + 80);
      *(_QWORD *)(v15 + 80) = 0;
      if (result)
      {
        WebCore::IDBServer::UniqueIDBDatabase::~UniqueIDBDatabase((WebCore::IDBServer::UniqueIDBDatabase *)result, v37);
        result = WTF::fastFree(v40, v41);
      }
      v42 = *v52;
      if (*v52)
        v43 = *(_DWORD *)(v42 - 12) + 1;
      else
        v43 = 1;
      *(_DWORD *)(v42 - 12) = v43;
      v44 = *v52;
      if (*v52)
        v45 = *(_DWORD *)(v44 - 12);
      else
        v45 = 0;
      v46 = (*(_DWORD *)(v44 - 16) + v45);
      v47 = *(unsigned int *)(v44 - 4);
      if (v47 > 0x400)
      {
        if (v47 <= 2 * v46)
          goto LABEL_77;
      }
      else if (3 * v47 <= 4 * v46)
      {
        if (!(_DWORD)v47)
        {
          v48 = 8;
LABEL_80:
          result = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(v52, v48, v15);
          v15 = result;
          v44 = *v52;
          if (*v52)
            LODWORD(v47) = *(_DWORD *)(v44 - 4);
          else
            LODWORD(v47) = 0;
          goto LABEL_84;
        }
LABEL_77:
        v48 = (_DWORD)v47 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v47));
        goto LABEL_80;
      }
LABEL_84:
      v49 = v44 + 88 * v47;
      v50 = 1;
      goto LABEL_85;
    }
    result = WTF::equal(v16, *(const WTF::StringImpl **)a3, v7);
    if (!(_DWORD)result)
      goto LABEL_30;
    if (v15 == a3)
      break;
    v18 = *(unsigned int *)(v15 + 32);
    v19 = *(_DWORD *)(a3 + 32);
    v21 = v19 == (_DWORD)v18 && v19 != -1;
    if ((_DWORD)v18 == -1 || !v21)
    {
      v23 = v19 == -1;
      if ((_DWORD)v18 == -1)
        v24 = v23;
      else
        v24 = v21;
      if (!v24)
        goto LABEL_30;
    }
    else
    {
      v55 = &v54;
      result = ((uint64_t (*)(unsigned __int8 **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v18])(&v55, v15 + 8, a3 + 8);
      if ((result & 1) == 0)
        goto LABEL_30;
    }
    v25 = *(unsigned int *)(v15 + 64);
    v26 = *(_DWORD *)(a3 + 64);
    v28 = v26 == (_DWORD)v25 && v26 != -1;
    if ((_DWORD)v25 == -1 || !v28)
    {
      v30 = v26 == -1;
      if ((_DWORD)v25 == -1)
        v31 = v30;
      else
        v31 = v28;
      if (v31)
        break;
    }
    else
    {
      v55 = &v54;
      result = ((uint64_t (*)(unsigned __int8 **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v25])(&v55, v15 + 40, a3 + 40);
      if ((result & 1) != 0)
        break;
    }
LABEL_30:
    v12 = i + v14;
  }
  if (*(unsigned __int8 *)(v15 + 72) != *(unsigned __int8 *)(a3 + 72))
    goto LABEL_30;
  v32 = *v52;
  if (*v52)
    v33 = *(_DWORD *)(v32 - 4);
  else
    v33 = 0;
  v50 = 0;
  v49 = v32 + 88 * v33;
LABEL_85:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v49;
  *(_BYTE *)(a1 + 16) = v50;
  return result;
}

WTF::StringImpl *WebCore::IDBServer::IDBServer::createBackingStore@<X0>(WebCore::IDBServer::IDBServer *this@<X0>, const WebCore::IDBDatabaseIdentifier *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *result;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const WTF::String *v20;
  const WTF::String *v21;
  WTF::StringImpl *v22;
  const WTF::String *v23;
  const WTF::String *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WebCore::IDBServer::SQLiteIDBBackingStore *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;

  v5 = *((_QWORD *)this + 7);
  if (!v5 || !*(_DWORD *)(v5 + 4))
  {
    v6 = WTF::fastMalloc((WTF *)0x78);
    *(_QWORD *)v6 = off_1E335A5B0;
    result = (WTF::StringImpl *)WTF::isMainThread((WTF *)v6);
    if ((_DWORD)result)
    {
      __break(0xC471u);
      JUMPOUT(0x1953A57C8);
    }
    *(_QWORD *)v6 = off_1E335A1B8;
    v8 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v8 += 2;
    *(_BYTE *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 8) = v8;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_0[v9])(&v37);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 72) = -1;
    v10 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v10 != -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_0[v10])(&v37);
      *(_DWORD *)(v6 + 72) = v10;
    }
    goto LABEL_9;
  }
  if (*((_BYTE *)a2 + 72))
  {
    v6 = WTF::fastMalloc((WTF *)0x78);
    *(_QWORD *)v6 = off_1E335A5B0;
    result = (WTF::StringImpl *)WTF::isMainThread((WTF *)v6);
    if ((_DWORD)result)
    {
      __break(0xC471u);
      JUMPOUT(0x1953A57E8);
    }
    *(_QWORD *)v6 = off_1E335A1B8;
    v11 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v11 += 2;
    *(_BYTE *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 8) = v11;
    *(_DWORD *)(v6 + 40) = -1;
    v12 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v12 != -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_0[v12])(&v37);
      *(_DWORD *)(v6 + 40) = v12;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 72) = -1;
    v13 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v13 != -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_0[v13])(&v37);
      *(_DWORD *)(v6 + 72) = v13;
    }
LABEL_9:
    *(_BYTE *)(v6 + 80) = *((_BYTE *)a2 + 72);
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *a3 = v6;
    return result;
  }
  WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot((uint64_t)a2 + 8, &v36);
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    WTF::FileSystemImpl::encodeForFileName(a2, v14);
    if (v37)
    {
      WTF::StringImpl::replace();
      v32 = v37;
      v37 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v31);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
    else
    {
      v35 = 0;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  v16 = v35;
  v35 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot((uint64_t)a2 + 8, &v35);
  v17 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(unsigned int *)(v17 + 4) | ((unint64_t)((*(_DWORD *)(v17 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v18 = 0;
    v19 = 0x100000000;
  }
  WebCore::SQLiteFileSystem::computeHashForFileName(v18, v19);
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v33, v20);
  if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v37, v21))
  {
    WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v37, (const WTF::String *)&v33, v23);
    WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v36, v24);
  }
  v25 = v34;
  v34 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v22);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v35;
  v35 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v22);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v37;
  v37 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v22);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v36;
  v36 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v22);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = (WebCore::IDBServer::SQLiteIDBBackingStore *)WTF::fastMalloc((WTF *)0x248);
  *a3 = WebCore::IDBServer::SQLiteIDBBackingStore::SQLiteIDBBackingStore(v29, a2, (const WTF::String *)&v33);
  result = v33;
  v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::IDBServer::IDBServer::openDatabase(WebCore::IDBServer::IDBServer *this, const WebCore::IDBOpenRequestData *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::IDBServer::UniqueIDBDatabase *v10;
  WTF *v11;
  void *v12;
  WebCore::IDBServer::UniqueIDBDatabase *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WebCore::IDBServer::IDBConnectionToClient *v24;
  _QWORD v25[2];
  char v26;
  WTF::StringImpl *v27;
  _BYTE v28[24];
  int v29;
  _BYTE v30[24];
  int v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  if (v4)
    *(_DWORD *)v4 += 2;
  v27 = v4;
  v28[0] = 0;
  v29 = -1;
  v5 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, char *))off_1E3359878[v5])(v25, v28, (char *)a2 + 32);
    v29 = v5;
  }
  v30[0] = 0;
  v31 = -1;
  v6 = *((unsigned int *)a2 + 22);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, char *))off_1E3359878[v6])(v25, v30, (char *)a2 + 64);
    v31 = v6;
  }
  v32 = *((_BYTE *)a2 + 96);
  WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)v25, (uint64_t *)this + 3, (uint64_t)&v27);
  if (v26)
  {
    v8 = WTF::fastMalloc((WTF *)0x100);
    WebCore::IDBServer::UniqueIDBDatabase::UniqueIDBDatabase(v8, (uint64_t)this, (uint64_t)&v27);
    v9 = v25[0];
    v10 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v25[0] + 80);
    *(_QWORD *)(v25[0] + 80) = v8;
    if (v10)
    {
      WebCore::IDBServer::UniqueIDBDatabase::~UniqueIDBDatabase(v10, v7);
      WTF::fastFree(v11, v12);
    }
  }
  else
  {
    v9 = v25[0];
  }
  v13 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v9 + 80);
  if (v31 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E3359868[v31])(v25, v30);
  v31 = -1;
  if (v29 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E3359868[v29])(v25, v28);
  v29 = -1;
  v14 = v27;
  v27 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *((_QWORD *)this + 2);
  if (v15)
  {
    v16 = *((_QWORD *)a2 + 1);
    v17 = *(_DWORD *)(v15 - 8);
    v18 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(_QWORD *)(v15 + 16 * v21);
    if (v22 == v16)
    {
LABEL_23:
      v24 = *(WebCore::IDBServer::IDBConnectionToClient **)(v15 + 16 * v21 + 8);
      if (v24)
        WebCore::IDBServer::UniqueIDBDatabase::openDatabaseConnection(v13, v24, a2);
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(_QWORD *)(v15 + 16 * v21);
        ++v23;
        if (v22 == v16)
          goto LABEL_23;
      }
    }
  }
}

uint64_t WebCore::IDBServer::IDBServer::deleteDatabase(uint64_t this, const WebCore::IDBOpenRequestData *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WebCore::IDBServer::IDBConnectionToClient *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WebCore::IDBServer::UniqueIDBDatabase *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::IDBServer::UniqueIDBDatabase *v28;
  WTF *v29;
  void *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD v43[2];
  char v44;
  WTF::StringImpl *v45;
  _BYTE v46[24];
  int v47;
  _BYTE v48[24];
  int v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 16);
  if (!v2)
    return this;
  v4 = this;
  v5 = *((_QWORD *)a2 + 1);
  v6 = *(_DWORD *)(v2 - 8);
  v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(v2 + 16 * v10);
  if (v11 == v5)
  {
LABEL_6:
    v13 = *(WebCore::IDBServer::IDBConnectionToClient **)(v2 + 16 * v10 + 8);
    if (!v13)
      return this;
    v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
    if (v14)
      *(_DWORD *)v14 += 2;
    v45 = v14;
    v46[0] = 0;
    v47 = -1;
    v15 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, char *))off_1E3359878[v15])(v43, v46, (char *)a2 + 32);
      v47 = v15;
    }
    v16 = (uint64_t *)(v4 + 24);
    v48[0] = 0;
    v49 = -1;
    v17 = *((unsigned int *)a2 + 22);
    if ((_DWORD)v17 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, char *))off_1E3359878[v17])(v43, v48, (char *)a2 + 64);
      v49 = v17;
    }
    v50 = *((_BYTE *)a2 + 96);
    v18 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>>,WebCore::IDBDatabaseIdentifier>(*v16, (uint64_t)&v45);
    if (v18)
      v20 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v18 + 80);
    else
      v20 = 0;
    if (v49 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E3359868[v49])(v43, v48);
    v49 = -1;
    if (v47 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E3359868[v47])(v43, v46);
    v47 = -1;
    v21 = v45;
    v45 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v19);
        if (v20)
          goto LABEL_41;
LABEL_24:
        v22 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
        if (v22)
          *(_DWORD *)v22 += 2;
        v45 = v22;
        v46[0] = 0;
        v47 = -1;
        v23 = *((unsigned int *)a2 + 14);
        if ((_DWORD)v23 != -1)
        {
          ((void (*)(_QWORD *, _BYTE *, char *))off_1E3359878[v23])(v43, v46, (char *)a2 + 32);
          v47 = v23;
        }
        v48[0] = 0;
        v49 = -1;
        v24 = *((unsigned int *)a2 + 22);
        if ((_DWORD)v24 != -1)
        {
          ((void (*)(_QWORD *, _BYTE *, char *))off_1E3359878[v24])(v43, v48, (char *)a2 + 64);
          v49 = v24;
        }
        v50 = *((_BYTE *)a2 + 96);
        WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)v43, (uint64_t *)(v4 + 24), (uint64_t)&v45);
        if (v44)
        {
          v26 = WTF::fastMalloc((WTF *)0x100);
          WebCore::IDBServer::UniqueIDBDatabase::UniqueIDBDatabase(v26, v4, (uint64_t)&v45);
          v27 = v43[0];
          v28 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v43[0] + 80);
          *(_QWORD *)(v43[0] + 80) = v26;
          if (v28)
          {
            WebCore::IDBServer::UniqueIDBDatabase::~UniqueIDBDatabase(v28, v25);
            WTF::fastFree(v29, v30);
          }
        }
        else
        {
          v27 = v43[0];
        }
        v20 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v27 + 80);
        if (v49 != -1)
          ((void (*)(_QWORD *, _BYTE *))off_1E3359868[v49])(v43, v48);
        v49 = -1;
        if (v47 != -1)
          ((void (*)(_QWORD *, _BYTE *))off_1E3359868[v47])(v43, v46);
        v47 = -1;
        v31 = v45;
        v45 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v25);
          else
            *(_DWORD *)v31 -= 2;
        }
LABEL_41:
        WebCore::IDBServer::UniqueIDBDatabase::handleDelete(v20, v13, a2);
        this = *((_QWORD *)v20 + 22);
        if (this)
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 232))(this);
          if ((this & 1) != 0)
            return this;
        }
        v32 = *((_QWORD *)v20 + 17);
        if (v32)
        {
          if (*(_DWORD *)(v32 - 12))
            return this;
        }
        if (*((_QWORD *)v20 + 20))
          return this;
        v33 = *((_QWORD *)v20 + 22);
        if (v33)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 248))(v33);
          v34 = *((_QWORD *)v20 + 22);
          *((_QWORD *)v20 + 22) = 0;
          if (v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
        this = *v16;
        if (!*v16)
          return this;
        this = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>>,WebCore::IDBDatabaseIdentifier>(this, (uint64_t)v20 + 16);
        v36 = *v16;
        if (this)
        {
          if (!v36)
          {
LABEL_59:
            if (v36 != this)
            {
              this = (uint64_t)WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>::customDeleteBucket(this, v35);
              ++*(_DWORD *)(*v16 - 16);
              v38 = *v16;
              if (*v16)
                v39 = *(_DWORD *)(v38 - 12) - 1;
              else
                v39 = -1;
              *(_DWORD *)(v38 - 12) = v39;
              v40 = *v16;
              if (*v16)
              {
                v41 = 6 * *(_DWORD *)(v40 - 12);
                v42 = *(_DWORD *)(v40 - 4);
                if (v41 < v42 && v42 >= 9)
                  return WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(v16, v42 >> 1, 0);
              }
            }
            return this;
          }
          v37 = *(_DWORD *)(v36 - 4);
        }
        else
        {
          if (!v36)
            return this;
          v37 = *(_DWORD *)(v36 - 4);
          this = v36 + 88 * v37;
        }
        v36 += 88 * v37;
        if (v36 == this)
          return this;
        goto LABEL_59;
      }
      *(_DWORD *)v21 -= 2;
    }
    if (v20)
      goto LABEL_41;
    goto LABEL_24;
  }
  v12 = 1;
  while (v11)
  {
    v10 = ((_DWORD)v10 + v12) & v6;
    v11 = *(_QWORD *)(v2 + 16 * v10);
    ++v12;
    if (v11 == v5)
      goto LABEL_6;
  }
  return this;
}

uint64_t *WebCore::IDBServer::IDBServer::abortTransaction(WebCore::IDBServer::IDBServer *this, const WebCore::IDBResourceIdentifier *a2)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::abort(result);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::createObjectStore(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBObjectStoreInfo *a3)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::createObjectStore(result, a2, a3);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::deleteObjectStore(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, const WTF::StringImpl **a3)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteObjectStore(result, a2, a3);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::renameObjectStore(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, WTF::StringImpl *a3, WTF::StringImpl **a4)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::renameObjectStore(result, a2, a3, a4);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::clearObjectStore(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, uint64_t a3)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::clearObjectStore(result, a2, a3);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::createIndex(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBIndexInfo *a3)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::createIndex(result, a2, a3);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::deleteIndex(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, const WTF::StringImpl *a3, const WTF::StringImpl **a4)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteIndex(result, a2, a3, a4);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::renameIndex(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::renameIndex(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::putOrAdd(uint64_t a1, uint64_t a2, WebCore::IDBKeyData *a3, uint64_t a4, int a5)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::putOrAdd(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::getRecord(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBGetRecordData *a3)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::getRecord(result, a2, a3);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::getAllRecords(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBGetAllRecordsData *a3)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::getAllRecords(result, a2, a3);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::getCount(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBKeyRangeData *a3)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::getCount(result, a2, a3);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::deleteRecord(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBKeyRangeData *a3)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteRecord(result, a2, a3);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::openCursor(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBCursorInfo *a3)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::openCursor(result, a2, a3);
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::iterateCursor(WebCore::IDBServer::IDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBIterateCursorData *a3)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::iterateCursor(result, a2, a3);
  }
  return result;
}

uint64_t WebCore::IDBServer::IDBServer::establishTransaction(uint64_t result, uint64_t a2, WebCore::IDBTransactionInfo *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(_QWORD *)(result + 32);
  if (!v3)
    return result;
  v4 = result;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = *(_QWORD *)(v3 + 16 * v9);
  if (v10 == a2)
  {
LABEL_6:
    result = *(_QWORD *)(v3 + 16 * v9 + 8);
    if (!result)
      return result;
    v12 = *(_QWORD *)(result + 24);
    v13 = v12 ? *(_QWORD **)(v12 + 8) : 0;
    WebCore::IDBServer::UniqueIDBDatabaseConnection::establishTransaction((WebCore::IDBServer::UniqueIDBDatabaseConnection *)result, a3);
    result = v13[22];
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 232))(result);
      if ((result & 1) != 0)
        return result;
    }
    v14 = v13[17];
    if (v14)
    {
      if (*(_DWORD *)(v14 - 12))
        return result;
    }
    if (v13[20])
      return result;
    v15 = v13[22];
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 248))(v15);
      v16 = v13[22];
      v13[22] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    v18 = *(_QWORD *)(v4 + 24);
    v17 = (uint64_t *)(v4 + 24);
    result = v18;
    if (!v18)
      return result;
    result = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>>,WebCore::IDBDatabaseIdentifier>(result, (uint64_t)(v13 + 2));
    v20 = *v17;
    if (result)
    {
      if (!v20)
      {
LABEL_26:
        if (v20 != result)
        {
          result = (uint64_t)WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>::customDeleteBucket(result, v19);
          ++*(_DWORD *)(*v17 - 16);
          v22 = *v17;
          if (*v17)
            v23 = *(_DWORD *)(v22 - 12) - 1;
          else
            v23 = -1;
          *(_DWORD *)(v22 - 12) = v23;
          v24 = *v17;
          if (*v17)
          {
            v25 = 6 * *(_DWORD *)(v24 - 12);
            v26 = *(_DWORD *)(v24 - 4);
            if (v25 < v26 && v26 >= 9)
              return WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(v17, v26 >> 1, 0);
          }
        }
        return result;
      }
      v21 = *(_DWORD *)(v20 - 4);
    }
    else
    {
      if (!v20)
        return result;
      v21 = *(_DWORD *)(v20 - 4);
      result = v20 + 88 * v21;
    }
    v20 += 88 * v21;
    if (v20 == result)
      return result;
    goto LABEL_26;
  }
  v11 = 1;
  while (v10)
  {
    v9 = ((_DWORD)v9 + v11) & v5;
    v10 = *(_QWORD *)(v3 + 16 * v9);
    ++v11;
    if (v10 == a2)
      goto LABEL_6;
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::commitTransaction(WebCore::IDBServer::IDBServer *this, const WebCore::IDBResourceIdentifier *a2, unint64_t a3)
{
  uint64_t *result;

  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 5), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (result)
  {
    result = (uint64_t *)result[2];
    if (result)
      return WebCore::IDBServer::UniqueIDBDatabaseTransaction::commit(result, a3);
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::IDBServer::didFinishHandlingVersionChangeTransaction(WTF::StringImpl *result, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2, const WebCore::IDBResourceIdentifier *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::IDBServer::UniqueIDBDatabase *v13;

  v3 = *((_QWORD *)result + 4);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)(v3 + 16 * v8);
    if (v9 == a2)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 24);
        if (v12)
          v13 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v12 + 8);
        else
          v13 = 0;
        return WebCore::IDBServer::UniqueIDBDatabase::didFinishHandlingVersionChange(v13, a2, a3);
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t WebCore::IDBServer::IDBServer::databaseConnectionPendingClose(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(_QWORD *)(result + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
        *(_BYTE *)(v10 + 64) = 1;
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(_QWORD *)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t WebCore::IDBServer::IDBServer::databaseConnectionClosed(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v11;
  uint64_t v12;
  WebCore::IDBServer::UniqueIDBDatabase *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v2 = *(_QWORD *)(result + 32);
  if (!v2)
    return result;
  v3 = result;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v2 + 16 * v8);
  if (v9 == a2)
  {
LABEL_6:
    v11 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)(v2 + 16 * v8 + 8);
    if (!v11)
      return result;
    v12 = *((_QWORD *)v11 + 3);
    v13 = v12 ? *(WebCore::IDBServer::UniqueIDBDatabase **)(v12 + 8) : 0;
    WebCore::IDBServer::UniqueIDBDatabase::connectionClosedFromClient(v13, v11);
    result = *((_QWORD *)v13 + 22);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 232))(result);
      if ((result & 1) != 0)
        return result;
    }
    v14 = *((_QWORD *)v13 + 17);
    if (v14)
    {
      if (*(_DWORD *)(v14 - 12))
        return result;
    }
    if (*((_QWORD *)v13 + 20))
      return result;
    v15 = *((_QWORD *)v13 + 22);
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 248))(v15);
      v16 = *((_QWORD *)v13 + 22);
      *((_QWORD *)v13 + 22) = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    v18 = *(_QWORD *)(v3 + 24);
    v17 = (uint64_t *)(v3 + 24);
    result = v18;
    if (!v18)
      return result;
    result = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>>,WebCore::IDBDatabaseIdentifier>(result, (uint64_t)v13 + 16);
    v20 = *v17;
    if (result)
    {
      if (!v20)
      {
LABEL_26:
        if (v20 != result)
        {
          result = (uint64_t)WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>::customDeleteBucket(result, v19);
          ++*(_DWORD *)(*v17 - 16);
          v22 = *v17;
          if (*v17)
            v23 = *(_DWORD *)(v22 - 12) - 1;
          else
            v23 = -1;
          *(_DWORD *)(v22 - 12) = v23;
          v24 = *v17;
          if (*v17)
          {
            v25 = 6 * *(_DWORD *)(v24 - 12);
            v26 = *(_DWORD *)(v24 - 4);
            if (v25 < v26 && v26 >= 9)
              return WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(v17, v26 >> 1, 0);
          }
        }
        return result;
      }
      v21 = *(_DWORD *)(v20 - 4);
    }
    else
    {
      if (!v20)
        return result;
      v21 = *(_DWORD *)(v20 - 4);
      result = v20 + 88 * v21;
    }
    v20 += 88 * v21;
    if (v20 == result)
      return result;
    goto LABEL_26;
  }
  v10 = 1;
  while (v9)
  {
    v8 = ((_DWORD)v8 + v10) & v4;
    v9 = *(_QWORD *)(v2 + 16 * v8);
    ++v10;
    if (v9 == a2)
      goto LABEL_6;
  }
  return result;
}

uint64_t *WebCore::IDBServer::IDBServer::abortOpenAndUpgradeNeeded(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v15;
  uint64_t v16;
  WebCore::IDBServer::UniqueIDBDatabase *v17;

  v4 = result;
  if (*(_BYTE *)(a3 + 16))
  {
    result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(result[5], *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
    if (result)
    {
      v5 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)result[2];
      if (v5)
      {
        v6 = *((_QWORD *)v5 + 2);
        if (v6)
        {
          result = *(uint64_t **)(v6 + 8);
          if (result)
            result = (uint64_t *)WebCore::IDBServer::UniqueIDBDatabaseConnection::abortTransactionWithoutCallback((WebCore::IDBServer::UniqueIDBDatabaseConnection *)result, v5);
        }
      }
    }
  }
  v7 = v4[4];
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v7 + 16 * v12);
    if (v13 == a2)
    {
LABEL_12:
      v15 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)(v7 + 16 * v12 + 8);
      if (v15)
      {
        v16 = *((_QWORD *)v15 + 3);
        if (v16)
          v17 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v16 + 8);
        else
          v17 = 0;
        return (uint64_t *)WebCore::IDBServer::UniqueIDBDatabase::connectionClosedFromClient(v17, v15);
      }
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v7 + 16 * v12);
        ++v14;
        if (v13 == a2)
          goto LABEL_12;
      }
    }
  }
  return result;
}

void WebCore::IDBServer::IDBServer::didFireVersionChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v12;
  uint64_t v13;
  WebCore::IDBServer::UniqueIDBDatabase *v14;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)(v4 + 16 * v9 + 8);
      if (v12)
      {
        v13 = *((_QWORD *)v12 + 3);
        if (v13)
          v14 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v13 + 8);
        else
          v14 = 0;
        WebCore::IDBServer::UniqueIDBDatabase::didFireVersionChangeEvent(v14, v12, a3, a4);
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(_QWORD *)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
}

uint64_t WebCore::IDBServer::IDBServer::openDBRequestCancelled(WebCore::IDBServer::IDBServer *this, const WebCore::IDBOpenRequestData *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::IDBServer::UniqueIDBDatabase *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  WTF::StringImpl *v24[2];
  int v25;
  _BYTE v26[24];
  int v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  if (v4)
    *(_DWORD *)v4 += 2;
  v24[0] = v4;
  LOBYTE(v24[1]) = 0;
  v25 = -1;
  v5 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **, char *))off_1E3359878[v5])(&v23, &v24[1], (char *)a2 + 32);
    v25 = v5;
  }
  v6 = (uint64_t *)((char *)this + 24);
  v26[0] = 0;
  v27 = -1;
  v7 = *((unsigned int *)a2 + 22);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *, _BYTE *, char *))off_1E3359878[v7])(&v23, v26, (char *)a2 + 64);
    v27 = v7;
  }
  v28 = *((_BYTE *)a2 + 96);
  v8 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>>,WebCore::IDBDatabaseIdentifier>(*v6, (uint64_t)v24);
  if (v8)
    v10 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v8 + 80);
  else
    v10 = 0;
  if (v27 != -1)
    ((void (*)(char *, _BYTE *))off_1E3359868[v27])(&v23, v26);
  v27 = -1;
  if (v25 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E3359868[v25])(&v23, &v24[1]);
  v25 = -1;
  result = (uint64_t)v24[0];
  v24[0] = 0;
  if (!result)
  {
LABEL_17:
    if (!v10)
      return result;
    goto LABEL_18;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_17;
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
  if (!v10)
    return result;
LABEL_18:
  *(_OWORD *)v24 = *(_OWORD *)((char *)a2 + 8);
  WebCore::IDBServer::UniqueIDBDatabase::openDBRequestCancelled(v10, (const WebCore::IDBResourceIdentifier *)v24);
  result = *((_QWORD *)v10 + 22);
  if (!result || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 232))(result), (result & 1) == 0))
  {
    v12 = *((_QWORD *)v10 + 17);
    if ((!v12 || !*(_DWORD *)(v12 - 12)) && !*((_QWORD *)v10 + 20))
    {
      v13 = *((_QWORD *)v10 + 22);
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 248))(v13);
        v14 = *((_QWORD *)v10 + 22);
        *((_QWORD *)v10 + 22) = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      result = *v6;
      if (*v6)
      {
        result = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>>,WebCore::IDBDatabaseIdentifier>(result, (uint64_t)v10 + 16);
        v16 = *v6;
        if (result)
        {
          if (!v16)
          {
LABEL_36:
            if (v16 != result)
            {
              result = (uint64_t)WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>::customDeleteBucket(result, v15);
              ++*(_DWORD *)(*v6 - 16);
              v18 = *v6;
              if (*v6)
                v19 = *(_DWORD *)(v18 - 12) - 1;
              else
                v19 = -1;
              *(_DWORD *)(v18 - 12) = v19;
              v20 = *v6;
              if (*v6)
              {
                v21 = 6 * *(_DWORD *)(v20 - 12);
                v22 = *(_DWORD *)(v20 - 4);
                if (v21 < v22 && v22 >= 9)
                  return WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(v6, v22 >> 1, 0);
              }
            }
            return result;
          }
          v17 = *(_DWORD *)(v16 - 4);
        }
        else
        {
          if (!v16)
            return result;
          v17 = *(_DWORD *)(v16 - 4);
          result = v16 + 88 * v17;
        }
        v16 += 88 * v17;
        if (v16 == result)
          return result;
        goto LABEL_36;
      }
    }
  }
  return result;
}

WTF *WebCore::IDBServer::IDBServer::getAllDatabaseNamesAndVersions(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  WTF *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  _BOOL4 v18;
  _BOOL4 v20;
  _BOOL4 v21;
  char v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  _BOOL4 v27;
  _BOOL4 v29;
  _BOOL4 v30;
  char v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  _QWORD *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl **v39;
  uint64_t *v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  _QWORD *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF *result;
  WTF::StringImpl *v68[2];
  char v69;
  WTF::StringImpl *v70;
  WTF::StringImpl **v71;
  WTF *v72;
  uint64_t v73;

  v72 = 0;
  v73 = 0;
  v71 = 0;
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = (_QWORD *)(v5 + 88 * v6);
    if (*(_DWORD *)(v5 - 12))
    {
      v8 = *(_QWORD **)(a1 + 24);
      if (v6)
      {
        v9 = 88 * v6;
        v8 = *(_QWORD **)(a1 + 24);
        while ((unint64_t)(*v8 + 1) <= 1)
        {
          v8 += 11;
          v9 -= 88;
          if (!v9)
          {
            v8 = v7;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v8 = (_QWORD *)(v5 + 88 * v6);
  }
  else
  {
    v8 = 0;
    v6 = 0;
  }
  v7 = (_QWORD *)(v5 + 88 * v6);
  if (v5)
  {
LABEL_8:
    v10 = (_QWORD *)(v5 + 88 * *(unsigned int *)(v5 - 4));
    goto LABEL_13;
  }
  v10 = 0;
LABEL_13:
  if (v10 != v8)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 + 32;
    do
    {
      v14 = (unsigned int *)v8[10];
      if (v14 + 6 != (unsigned int *)a4)
      {
        v15 = v14[12];
        v16 = *(_DWORD *)(a4 + 24);
        v18 = v16 == (_DWORD)v15 && v16 != -1;
        if ((_DWORD)v15 == -1 || !v18)
        {
          v20 = v16 == -1;
          if ((_DWORD)v15 == -1)
            v21 = v20;
          else
            v21 = v18;
          if (!v21)
            goto LABEL_78;
        }
        else
        {
          v68[0] = (WTF::StringImpl *)&v70;
          v22 = ((uint64_t (*)(WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v15])(v68);
          if ((v22 & 1) == 0)
            goto LABEL_78;
        }
      }
      v23 = (WTF::StringImpl *)(v14 + 14);
      if (v14 + 14 == (unsigned int *)v13)
        goto LABEL_51;
      v24 = v14[20];
      v25 = *(_DWORD *)(a4 + 56);
      v27 = v25 == (_DWORD)v24 && v25 != -1;
      if ((_DWORD)v24 == -1 || !v27)
      {
        v29 = v25 == -1;
        if ((_DWORD)v24 == -1)
          v30 = v29;
        else
          v30 = v27;
        if (v30)
        {
LABEL_51:
          v32 = *(_QWORD *)(v8[10] + 176);
          if (v32)
          {
            (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v32 + 240))(&v70);
            v33 = v70;
            if (v70)
              goto LABEL_57;
          }
          else
          {
            v33 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
            if (*MEMORY[0x1E0CBF6F0])
              *(_DWORD *)v33 += 2;
            v70 = v33;
            if (v33)
            {
LABEL_57:
              if (*((_DWORD *)v33 + 1))
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v71, &v70, a3, (uint64_t)v68);
            }
          }
          v34 = (_QWORD *)v8[10];
          if (v34[22])
          {
            v35 = v34[21];
            if (!v35)
            {
              v39 = (WTF::StringImpl **)v34[23];
              v38 = *v39;
              if (*v39)
                *(_DWORD *)v38 += 2;
              v37 = v39[1];
LABEL_68:
              v68[0] = v38;
              v68[1] = v37;
              v69 = 1;
              if (v12 == (_DWORD)v73)
              {
                v40 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v72, v12 + 1, (unint64_t)v68);
                v41 = HIDWORD(v73);
                v11 = v72;
                v42 = (_QWORD *)((char *)v72 + 16 * HIDWORD(v73));
                v43 = *v40;
                *v40 = 0;
                *v42 = v43;
                v42[1] = v40[1];
                v12 = v41 + 1;
                HIDWORD(v73) = v41 + 1;
                if (!v69)
                  goto LABEL_75;
              }
              else
              {
                v44 = (WTF::StringImpl **)((char *)v11 + 16 * v12);
                v68[0] = 0;
                *v44 = v38;
                v44[1] = v37;
                HIDWORD(v73) = ++v12;
              }
              v45 = v68[0];
              v68[0] = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, v23);
                else
                  *(_DWORD *)v45 -= 2;
              }
              goto LABEL_75;
            }
            v36 = *(WTF::StringImpl ***)(v35 + 80);
            if (v36)
            {
              v37 = v36[1];
              if (v37)
              {
                v38 = *v36;
                if (v38)
                  *(_DWORD *)v38 += 2;
                goto LABEL_68;
              }
            }
          }
LABEL_75:
          v46 = v70;
          v70 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, v23);
            else
              *(_DWORD *)v46 -= 2;
          }
        }
      }
      else
      {
        v68[0] = (WTF::StringImpl *)&v70;
        v31 = ((uint64_t (*)(WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v24])(v68);
        if ((v31 & 1) != 0)
          goto LABEL_51;
      }
LABEL_78:
      v47 = v8 + 11;
      v8 = v7;
      if (v47 != v7)
      {
        v8 = v47;
        while ((unint64_t)(*v8 + 1) <= 1)
        {
          v8 += 11;
          if (v8 == v7)
          {
            v8 = v7;
            break;
          }
        }
      }
    }
    while (v8 != v10);
  }
  WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot(a4, v68);
  WebCore::IDBServer::getDatabaseNameAndVersionFromOriginDirectory((WTF::FileSystemImpl *)v68, (const WTF::String *)&v71, (unsigned int *)&v72);
  WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot(a4, &v70);
  WebCore::IDBServer::getDatabaseNameAndVersionFromOriginDirectory((WTF::FileSystemImpl *)&v70, (const WTF::String *)&v71, (unsigned int *)&v72);
  v49 = *(_QWORD *)(a1 + 16);
  if (v49)
  {
    v50 = *(_DWORD *)(v49 - 8);
    v51 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(_QWORD *)(v49 + 16 * v54);
    if (v55 == a2)
    {
LABEL_92:
      v57 = *(_QWORD *)(v49 + 16 * v54 + 8);
      if (v57)
      {
        v58 = *(_QWORD *)(v57 + 8);
        if (v58)
          (*(void (**)(uint64_t, const WTF::StringImpl *, WTF **))(*(_QWORD *)v58 + 200))(v58, a3, &v72);
      }
    }
    else
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(_QWORD *)(v49 + 16 * v54);
        ++v56;
        if (v55 == a2)
          goto LABEL_92;
      }
    }
  }
  v59 = v70;
  v70 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v48);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = v68[0];
  v68[0] = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, v48);
    else
      *(_DWORD *)v60 -= 2;
  }
  if (v71)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v71, v48);
  if (HIDWORD(v73))
  {
    v61 = v72;
    v62 = 16 * HIDWORD(v73);
    do
    {
      v63 = *(WTF::StringImpl **)v61;
      *(_QWORD *)v61 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v48);
        else
          *(_DWORD *)v63 -= 2;
      }
      v61 = (WTF *)((char *)v61 + 16);
      v62 -= 16;
    }
    while (v62);
  }
  result = v72;
  if (v72)
  {
    v72 = 0;
    LODWORD(v73) = 0;
    return (WTF *)WTF::fastFree(result, v48);
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::getDatabaseNameAndVersionFromOriginDirectory(WTF::FileSystemImpl *a1, const WTF::String *a2, unsigned int *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int i;
  int v17;
  WTF *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28[2];
  unsigned __int8 v29;
  WTF::StringImpl *v30;
  WTF *v31;
  int v32;
  unsigned int v33;

  result = (WTF::StringImpl *)WTF::FileSystemImpl::listDirectory(a1, a2);
  v7 = v31;
  if (!v33)
  {
LABEL_32:
    if (v7)
      goto LABEL_42;
    return result;
  }
  v8 = (WTF *)((char *)v31 + 8 * v33);
  do
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::FileSystemImpl::pathByAppendingComponent();
    v11 = v28[0];
    v28[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v13 = *(_DWORD *)(v12 - 8);
      v14 = *((_DWORD *)v30 + 4);
      if (v14 < 0x100)
        v15 = WTF::StringImpl::hashSlowCase(v30);
      else
        v15 = v14 >> 8;
      for (i = 0; ; v15 = i + v17)
      {
        v17 = v15 & v13;
        v18 = *(WTF **)(v12 + 8 * (v15 & v13));
        if (!v18)
          break;
        if (v18 != (WTF *)-1 && (WTF::equal(v18, v30, v10) & 1) != 0)
          goto LABEL_24;
        ++i;
      }
    }
    WebCore::IDBServer::SQLiteIDBBackingStore::databaseNameAndVersionFromFile((WebCore::IDBServer::SQLiteIDBBackingStore *)&v30, (uint64_t)v28);
    if (v29)
    {
      v19 = a3[3];
      if ((_DWORD)v19 == a3[2])
      {
        v20 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v19 + 1, (unint64_t)v28);
        v21 = a3[3];
        v22 = (_QWORD *)(*(_QWORD *)a3 + 16 * v21);
        v23 = *v20;
        *v20 = 0;
        *v22 = v23;
        v22[1] = v20[1];
        LODWORD(v22) = v29;
        a3[3] = v21 + 1;
        if (!(_DWORD)v22)
          goto LABEL_24;
      }
      else
      {
        v24 = *(_QWORD *)a3 + 16 * v19;
        v25 = v28[0];
        v28[0] = 0;
        *(_QWORD *)v24 = v25;
        *(WTF::StringImpl **)(v24 + 8) = v28[1];
        a3[3] = v19 + 1;
      }
      v26 = v28[0];
      v28[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v6);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
LABEL_24:
    result = v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    v7 = (WTF *)((char *)v7 + 8);
  }
  while (v7 != v8);
  v7 = v31;
  if (!v33)
    goto LABEL_32;
  v27 = 8 * v33;
  do
  {
    result = *(WTF::StringImpl **)v7;
    *(_QWORD *)v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    v7 = (WTF *)((char *)v7 + 8);
    v27 -= 8;
  }
  while (v27);
  v7 = v31;
  if (v31)
  {
LABEL_42:
    v31 = 0;
    v32 = 0;
    return (WTF::StringImpl *)WTF::fastFree(v7, v6);
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::IDBServer::getOrigins@<X0>(WTF::StringImpl *this@<X0>, const WTF::String *a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = *((_QWORD *)this + 7);
  if (v3 && *(_DWORD *)(v3 + 4))
  {
    *(_QWORD *)a2 = 0;
    WTF::FileSystemImpl::pathByAppendingComponent();
    WebCore::IDBServer::collectOriginsForVersion((WTF::FileSystemImpl *)&v7, a2);
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    WTF::FileSystemImpl::pathByAppendingComponent();
    WebCore::IDBServer::collectOriginsForVersion((WTF::FileSystemImpl *)&v7, a2);
    this = v7;
    v7 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v6);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::IDBServer::collectOriginsForVersion(WTF::FileSystemImpl *a1, const WTF::String *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  float v5;
  WTF *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::String *v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  WTF *v22;
  int v23;
  unsigned int v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  WTF::StringImpl *v28[3];
  int v29;
  char v30;
  _BYTE v31[24];
  int v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  result = (WTF::StringImpl *)WTF::FileSystemImpl::listDirectory(a1, a2);
  v6 = v25;
  if (!v27)
  {
LABEL_39:
    if (v6)
      goto LABEL_49;
    return result;
  }
  v7 = (WTF *)((char *)v25 + 8 * v27);
  do
  {
    v8 = *(WTF::StringImpl **)v6;
    if (*(_QWORD *)v6)
    {
      v9 = *((unsigned int *)v8 + 4);
      v10 = *((_QWORD *)v8 + 1);
      v8 = (WTF::StringImpl *)*((unsigned int *)v8 + 1);
      v11 = (v9 >> 2) & 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    result = (WTF::StringImpl *)WebCore::SecurityOriginData::fromDatabaseIdentifier(v10, (const char *)((unint64_t)v8 | (v11 << 32)), (uint64_t)v31, v5);
    if (!v33)
      goto LABEL_25;
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)a2, (uint64_t)v31, (uint64_t)v28);
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)v28, v12);
    result = v28[0];
    v28[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
    v13 = v22;
    if (v24)
    {
      v14 = 8 * v24;
      do
      {
        v15 = *(WTF::StringImpl **)v13;
        if (*(_QWORD *)v13)
        {
          v16 = *((unsigned int *)v15 + 4);
          v17 = *((_QWORD *)v15 + 1);
          v15 = (WTF::StringImpl *)*((unsigned int *)v15 + 1);
          v18 = (v16 >> 2) & 1;
        }
        else
        {
          v17 = 0;
          v18 = 1;
        }
        result = (WTF::StringImpl *)WebCore::SecurityOriginData::fromDatabaseIdentifier(v17, (const char *)((unint64_t)v15 | (v18 << 32)), (uint64_t)v28, v5);
        if (v30)
        {
          result = (WTF::StringImpl *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)a2, (uint64_t)v28, (uint64_t)v21);
          if (v30)
          {
            if (v29 != -1)
              result = (WTF::StringImpl *)((uint64_t (*)(_BYTE *, WTF::StringImpl **))off_1E3359868[v29])(v21, v28);
          }
        }
        v13 = (WTF *)((char *)v13 + 8);
        v14 -= 8;
      }
      while (v14);
      v13 = v22;
      if (v24)
      {
        v19 = 8 * v24;
        do
        {
          result = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
            else
              *(_DWORD *)result -= 2;
          }
          v13 = (WTF *)((char *)v13 + 8);
          v19 -= 8;
        }
        while (v19);
        v13 = v22;
        if (!v22)
          goto LABEL_22;
LABEL_37:
        v22 = 0;
        v23 = 0;
        result = (WTF::StringImpl *)WTF::fastFree(v13, v4);
        goto LABEL_22;
      }
    }
    if (v13)
      goto LABEL_37;
LABEL_22:
    if (v33 && v32 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E3359868[v32])(v28, v31);
LABEL_25:
    v6 = (WTF *)((char *)v6 + 8);
  }
  while (v6 != v7);
  v6 = v25;
  if (!v27)
    goto LABEL_39;
  v20 = 8 * v27;
  do
  {
    result = *(WTF::StringImpl **)v6;
    *(_QWORD *)v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
    v6 = (WTF *)((char *)v6 + 8);
    v20 -= 8;
  }
  while (v20);
  v6 = v25;
  if (v25)
  {
LABEL_49:
    v25 = 0;
    v26 = 0;
    return (WTF::StringImpl *)WTF::fastFree(v6, v4);
  }
  return result;
}

uint64_t WebCore::IDBServer::IDBServer::closeAndDeleteDatabasesModifiedSince(WTF::WallTime *a1, double a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  double v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  result = WTF::WallTime::now(a1);
  if (a2 > v6)
    return result;
  result = *((_QWORD *)a1 + 3);
  if (result)
  {
    v7 = *(_DWORD *)(result - 4);
    v8 = result + 88 * v7;
    if (*(_DWORD *)(result - 12))
    {
      v9 = *((_QWORD *)a1 + 3);
      if (v7)
      {
        v10 = 88 * v7;
        v9 = *((_QWORD *)a1 + 3);
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 88;
          v10 -= 88;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v9 = result + 88 * v7;
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = result + 88 * v7;
  if (!result)
  {
    v11 = 0;
    goto LABEL_14;
  }
LABEL_9:
  v11 = result + 88 * *(unsigned int *)(result - 4);
LABEL_14:
  if (v11 != v9)
  {
    do
    {
      WebCore::IDBServer::UniqueIDBDatabase::immediateClose(*(WebCore::IDBServer::UniqueIDBDatabase **)(v9 + 80), v5);
      v12 = v9 + 88;
      v9 = v8;
      if (v12 != v8)
      {
        v9 = v12;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 88;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
    }
    while (v9 != v11);
    result = *((_QWORD *)a1 + 3);
  }
  if (result)
  {
    *((_QWORD *)a1 + 3) = 0;
    result = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::deallocateTable(result, v5);
  }
  v13 = *((_QWORD *)a1 + 7);
  if (v13 && *(_DWORD *)(v13 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::IDBServer::IDBServer::removeDatabasesModifiedSinceForVersion(a2);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (uint64_t)WebCore::IDBServer::IDBServer::removeDatabasesModifiedSinceForVersion(a2);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        return WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::IDBServer::removeDatabasesModifiedSinceForVersion(double a1)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  float v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  _BYTE v21[24];
  int v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v20, v2);
  v5 = v17;
  if (!v19)
    goto LABEL_17;
  v6 = 8 * v19;
  do
  {
    v7 = *(WTF::StringImpl **)v5;
    if (*(_QWORD *)v5)
    {
      v8 = *((unsigned int *)v7 + 4);
      v9 = *((_QWORD *)v7 + 1);
      v7 = (WTF::StringImpl *)*((unsigned int *)v7 + 1);
      v10 = (v8 >> 2) & 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    WebCore::SecurityOriginData::fromDatabaseIdentifier(v9, (const char *)((unint64_t)v7 | (v10 << 32)), (uint64_t)v21, v4);
    if (v23)
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WebCore::IDBServer::removeAllDatabasesForOriginPath((WTF::FileSystemImpl *)&v16, v11, a1);
      v12 = v16;
      v16 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v3);
        else
          *(_DWORD *)v12 -= 2;
      }
      if (v23 && v22 != -1)
        ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3359868[v22])(&v16, v21);
    }
    v5 = (WTF *)((char *)v5 + 8);
    v6 -= 8;
  }
  while (v6);
  v5 = v17;
  if (!v19)
  {
LABEL_17:
    if (!v5)
      goto LABEL_18;
    goto LABEL_31;
  }
  v14 = 8 * v19;
  do
  {
    v15 = *(WTF::StringImpl **)v5;
    *(_QWORD *)v5 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v3);
      else
        *(_DWORD *)v15 -= 2;
    }
    v5 = (WTF *)((char *)v5 + 8);
    v14 -= 8;
  }
  while (v14);
  v5 = v17;
  if (v17)
  {
LABEL_31:
    v17 = 0;
    v18 = 0;
    WTF::fastFree(v5, v3);
  }
LABEL_18:
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::IDBServer::IDBServer::closeDatabasesForOrigins(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::IDBServer::UniqueIDBDatabase **i;
  WebCore::IDBServer::UniqueIDBDatabase **v39;
  WebCore::IDBServer::UniqueIDBDatabase *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD *v50;

  v50 = 0;
  v6 = (uint64_t *)(result + 24);
  v5 = *(_QWORD *)(result + 24);
  if (v5)
  {
    v7 = *(_DWORD *)(v5 - 4);
    v8 = (_QWORD *)(v5 + 88 * v7);
    if (*(_DWORD *)(v5 - 12))
    {
      v9 = *(_QWORD **)(result + 24);
      if (v7)
      {
        v10 = 88 * v7;
        v9 = *(_QWORD **)(result + 24);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 11;
          v10 -= 88;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v9 = (_QWORD *)(v5 + 88 * v7);
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = (_QWORD *)(v5 + 88 * v7);
  if (v5)
  {
LABEL_8:
    v11 = (_QWORD *)(v5 + 88 * *(unsigned int *)(v5 - 4));
    goto LABEL_13;
  }
  v11 = 0;
LABEL_13:
  if (v11 != v9)
  {
    v12 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v12)
    {
LABEL_15:
      v13 = v9[10] + 24;
      v14 = *a2;
      v15 = 32 * v12;
      while (1)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v14, v13);
        if ((_DWORD)result)
          break;
        v14 += 32;
        v15 -= 32;
        if (!v15)
          goto LABEL_40;
      }
      v17 = v9[10];
      v18 = (uint64_t)v50;
      if (v50
        || (result = WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash((uint64_t *)&v50, 8u), (v18 = (uint64_t)v50) != 0))
      {
        v19 = *(_DWORD *)(v18 - 8);
      }
      else
      {
        v19 = 0;
      }
      v20 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = (_QWORD *)(v18 + 8 * v23);
      v25 = *v24;
      if (*v24)
      {
        v26 = 0;
        v27 = 1;
        do
        {
          if (v25 == v17)
            goto LABEL_40;
          if (v25 == -1)
            v26 = v24;
          v23 = (v23 + v27) & v19;
          v24 = (_QWORD *)(v18 + 8 * v23);
          v25 = *v24;
          ++v27;
        }
        while (*v24);
        if (v26)
        {
          *v26 = 0;
          --*((_DWORD *)v50 - 4);
          v24 = v26;
        }
      }
      *v24 = v17;
      v28 = (uint64_t)v50;
      if (v50)
        v29 = *((_DWORD *)v50 - 3) + 1;
      else
        v29 = 1;
      *((_DWORD *)v50 - 3) = v29;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 <= 0x400)
      {
        if (3 * v31 > 4 * v30)
          goto LABEL_40;
        if (!(_DWORD)v31)
        {
          v32 = 8;
          goto LABEL_39;
        }
LABEL_36:
        v32 = (_DWORD)v31 << (6 * v29 >= (2 * v31));
LABEL_39:
        result = WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash((uint64_t *)&v50, v32);
        goto LABEL_40;
      }
      if (v31 <= 2 * v30)
        goto LABEL_36;
      while (1)
      {
LABEL_40:
        v33 = v9 + 11;
        v9 = v8;
        if (v33 != v8)
        {
          v9 = v33;
          while ((unint64_t)(*v9 + 1) <= 1)
          {
            v9 += 11;
            if (v9 == v8)
            {
              v9 = v8;
              break;
            }
          }
        }
        if (v9 == v11)
          break;
        v12 = *((unsigned int *)a2 + 3);
        if (*((_DWORD *)a2 + 3))
          goto LABEL_15;
      }
      v35 = (uint64_t)v50;
      if (v50)
      {
        if (!*((_DWORD *)v50 - 3))
          return WTF::fastFree((WTF *)(v35 - 16), v16);
        v36 = *((unsigned int *)v50 - 1);
        if ((_DWORD)v36)
        {
          v37 = 8 * v36;
          for (i = (WebCore::IDBServer::UniqueIDBDatabase **)v50; (unint64_t)*i + 1 <= 1; ++i)
          {
            v37 -= 8;
            if (!v37)
              return WTF::fastFree((WTF *)(v35 - 16), v16);
          }
        }
        else
        {
          i = (WebCore::IDBServer::UniqueIDBDatabase **)v50;
        }
        v39 = (WebCore::IDBServer::UniqueIDBDatabase **)&v50[v36];
        if (v39 == i)
          return WTF::fastFree((WTF *)(v35 - 16), v16);
        v40 = *i;
LABEL_68:
        WebCore::IDBServer::UniqueIDBDatabase::immediateClose(v40, (WTF::StringImpl *)v16);
        if (!*v6)
          goto LABEL_86;
        v41 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>>,WebCore::IDBDatabaseIdentifier>(*v6, (uint64_t)*i + 16);
        v42 = *v6;
        if (v41)
        {
          if (!v42)
            goto LABEL_75;
          v43 = *(_DWORD *)(v42 - 4);
        }
        else
        {
          if (!v42)
            goto LABEL_86;
          v43 = *(_DWORD *)(v42 - 4);
          v41 = v42 + 88 * v43;
        }
        v42 += 88 * v43;
        if (v42 == v41)
          goto LABEL_86;
LABEL_75:
        if (v42 != v41)
        {
          WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>::customDeleteBucket(v41, (WTF::StringImpl *)v16);
          ++*(_DWORD *)(*v6 - 16);
          v44 = *v6;
          v45 = *v6 ? *(_DWORD *)(v44 - 12) - 1 : -1;
          *(_DWORD *)(v44 - 12) = v45;
          v46 = *v6;
          if (*v6)
          {
            v47 = 6 * *(_DWORD *)(v46 - 12);
            v48 = *(_DWORD *)(v46 - 4);
            if (v47 < v48 && v48 >= 9)
              WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(v6, v48 >> 1, 0);
          }
        }
LABEL_86:
        while (1)
        {
          if (++i == v39)
            return WTF::fastFree((WTF *)(v35 - 16), v16);
          v40 = *i;
          if ((unint64_t)*i + 1 > 1)
          {
            if (i != v39)
              goto LABEL_68;
            return WTF::fastFree((WTF *)(v35 - 16), v16);
          }
        }
      }
    }
    else
    {
      do
      {
        v34 = v9 + 11;
        v9 = v8;
        if (v34 != v8)
        {
          v9 = v34;
          while ((unint64_t)(*v9 + 1) <= 1)
          {
            v9 += 11;
            if (v9 == v8)
            {
              v9 = v8;
              break;
            }
          }
        }
      }
      while (v9 != v11);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::IDBServer::closeAndDeleteDatabasesForOrigins(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *result;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E335A040;
  v11 = (WTF::StringImpl *)v4;
  WebCore::IDBServer::IDBServer::closeDatabasesForOrigins(a1, a2, &v11);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = *(_QWORD *)(a1 + 56);
  if (v6 && *(_DWORD *)(v6 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v11;
    WebCore::IDBServer::IDBServer::removeDatabasesWithOriginsForVersion(*(_QWORD *)(a1 + 56), (uint64_t)a2);
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v8);
      else
        *(_DWORD *)v7 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = v11;
    result = WebCore::IDBServer::IDBServer::removeDatabasesWithOriginsForVersion(*(_QWORD *)(a1 + 56), (uint64_t)a2);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v10);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::IDBServer::removeDatabasesWithOriginsForVersion(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WebCore::SecurityOriginData *v5;
  WebCore::SecurityOriginData *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  WTF::FileSystemImpl::pathByAppendingComponent();
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    v5 = *(WebCore::SecurityOriginData **)a2;
    v6 = (WebCore::SecurityOriginData *)((char *)v5 + 32 * v4);
    while (1)
    {
      WebCore::SecurityOriginData::databaseIdentifier(v5, &v25);
      WTF::FileSystemImpl::pathByAppendingComponent();
      v8 = v25;
      v25 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      WebCore::IDBServer::removeAllDatabasesForOriginPath((WTF::FileSystemImpl *)&v28, v7, -INFINITY);
      WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v29, v9);
      v10 = v25;
      if (v27)
      {
        v11 = 8 * v27;
        do
        {
          WTF::FileSystemImpl::pathByAppendingComponent();
          WebCore::SecurityOriginData::databaseIdentifier(v5, &v22);
          WTF::FileSystemImpl::pathByAppendingComponent();
          v13 = v23;
          v23 = 0;
          v14 = v28;
          v28 = v13;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::destroy(v14, v12);
              v17 = v23;
              v23 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  WTF::StringImpl::destroy(v17, v12);
                else
                  *(_DWORD *)v17 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v14 -= 2;
              v23 = 0;
            }
          }
          v15 = v22;
          v22 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v12);
            else
              *(_DWORD *)v15 -= 2;
          }
          WebCore::IDBServer::removeAllDatabasesForOriginPath((WTF::FileSystemImpl *)&v28, v12, -INFINITY);
          v16 = v24;
          v24 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v3);
            else
              *(_DWORD *)v16 -= 2;
          }
          v10 = (WTF::StringImpl *)((char *)v10 + 8);
          v11 -= 8;
        }
        while (v11);
        v10 = v25;
        if (v27)
          break;
      }
      if (v10)
        goto LABEL_42;
LABEL_27:
      v18 = v28;
      v28 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v3);
        else
          *(_DWORD *)v18 -= 2;
      }
      v5 = (WebCore::SecurityOriginData *)((char *)v5 + 32);
      if (v5 == v6)
        goto LABEL_43;
    }
    v19 = 8 * v27;
    do
    {
      v20 = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v3);
        else
          *(_DWORD *)v20 -= 2;
      }
      v10 = (WTF::StringImpl *)((char *)v10 + 8);
      v19 -= 8;
    }
    while (v19);
    v10 = v25;
    if (!v25)
      goto LABEL_27;
LABEL_42:
    v25 = 0;
    v26 = 0;
    WTF::fastFree(v10, v3);
    goto LABEL_27;
  }
LABEL_43:
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::removeAllDatabasesForOriginPath(WTF::FileSystemImpl *a1, const WTF::String *a2, double a3)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  float v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const WTF::String *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  WTF::StringImpl *result;
  WTF *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  int v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  WTF::FileSystemImpl::lastComponentOfPathIgnoringTrailingSlash(a1, a2);
  if (v28)
  {
    v6 = *((_QWORD *)v28 + 1);
    v7 = *((unsigned int *)v28 + 1) | ((unint64_t)((*((_DWORD *)v28 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  WebCore::SecurityOriginData::fromDatabaseIdentifier(v6, (const char *)v7, (uint64_t)v29, v5);
  if (v31)
  {
    if (v30 != -1)
      ((void (*)(WTF **, _BYTE *))off_1E3359868[v30])(&v25, v29);
    WTF::FileSystemImpl::listDirectory(a1, v8);
    if (v27)
    {
      v11 = v25;
      v12 = 8 * v27;
      do
      {
        v13 = *(_QWORD *)v11;
        if (*(_QWORD *)v11)
        {
          v14 = *(unsigned int *)(v13 + 16);
          v15 = *(_QWORD *)(v13 + 8);
          v13 = *(unsigned int *)(v13 + 4);
          v16 = (v14 >> 2) & 1;
        }
        else
        {
          v15 = 0;
          v16 = 1;
        }
        WebCore::SecurityOriginData::fromDatabaseIdentifier(v15, (const char *)(v13 | (v16 << 32)), (uint64_t)v29, v10);
        if (v31)
        {
          WTF::FileSystemImpl::pathByAppendingComponent();
          WebCore::IDBServer::removeAllDatabasesForFullOriginPath((WTF::FileSystemImpl *)&v24, v17, a3);
          v18 = v24;
          v24 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v9);
            else
              *(_DWORD *)v18 -= 2;
          }
          if (v31 && v30 != -1)
            ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3359868[v30])(&v24, v29);
        }
        v11 = (WTF *)((char *)v11 + 8);
        v12 -= 8;
      }
      while (v12);
    }
    WebCore::IDBServer::removeAllDatabasesForFullOriginPath(a1, v9, a3);
    if (v27)
    {
      v21 = v25;
      v22 = 8 * v27;
      do
      {
        v23 = *(WTF::StringImpl **)v21;
        *(_QWORD *)v21 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v8);
          else
            *(_DWORD *)v23 -= 2;
        }
        v21 = (WTF *)((char *)v21 + 8);
        v22 -= 8;
      }
      while (v22);
    }
    v19 = v25;
    if (v25)
    {
      v25 = 0;
      v26 = 0;
      WTF::fastFree(v19, v8);
    }
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::IDBServer::IDBServer::renameOrigin(WebCore::IDBServer::IDBServer *this, const WebCore::SecurityOriginData *a2, const WebCore::SecurityOriginData *a3)
{
  uint64_t v6;
  WTF *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const WTF::String *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  uint64_t v25;
  WTF::StringImpl *v26[3];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  LOBYTE(v26[0]) = 0;
  v27 = -1;
  v6 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(WTF **, WTF::StringImpl **, const WebCore::SecurityOriginData *))off_1E3359878[v6])(&v24, v26, a2);
    v27 = v6;
  }
  v25 = 1;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x20);
  v24 = v7;
  *(_BYTE *)v7 = 0;
  *((_DWORD *)v7 + 6) = -1;
  v8 = v27;
  if (v27 == -1)
  {
    HIDWORD(v25) = 1;
  }
  else
  {
    ((void (*)(WTF::StringImpl **, WTF *, WTF::StringImpl **))off_1E3359878[v27])(&v23, v7, v26);
    *((_DWORD *)v7 + 6) = v8;
    HIDWORD(v25) = 1;
    if (v27 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3359868[v27])(&v23, v26);
  }
  v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = off_1E335A068;
  v26[0] = v9;
  WebCore::IDBServer::IDBServer::closeDatabasesForOrigins((uint64_t)this, (uint64_t *)&v24, v26);
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 8))(v9);
  WTF::FileSystemImpl::pathByAppendingComponent();
  WebCore::SecurityOriginData::databaseIdentifier(a2, &v22);
  WTF::FileSystemImpl::pathByAppendingComponent();
  v11 = v22;
  v22 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebCore::SecurityOriginData::databaseIdentifier(a3, &v21);
  WTF::FileSystemImpl::pathByAppendingComponent();
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v23, v12))
    WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v23, (const WTF::String *)&v22, v15);
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v23;
  v23 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v26[0];
  v26[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v14);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *((unsigned int *)v7 + 6);
  if ((_DWORD)v19 != -1)
    ((void (*)(WTF::StringImpl **, WTF *))off_1E3359868[v19])(v26, v7);
  *((_DWORD *)v7 + 6) = -1;
  return WTF::fastFree(v7, v14);
}

uint64_t WebCore::IDBServer::IDBServer::requestSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;

  v8 = *(unsigned __int8 **)(a1 + 72);
  v9 = __ldxr(v8);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_5;
  }
  if (__stlxr(0, v8))
LABEL_5:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), a2, a3);
  v11 = *(unsigned __int8 **)(a1 + 72);
  if (__ldaxr(v11))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  if (__stxr(1u, v11))
    goto LABEL_9;
LABEL_10:
  v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

uint64_t WebCore::IDBServer::IDBServer::diskUsage(uint64_t a1, uint64_t a2)
{
  const WTF::String *v3;
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot(a2, &v12);
  WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot(a2, &v11);
  v4 = WebCore::IDBServer::SQLiteIDBBackingStore::databasesSizeForDirectory((WebCore::IDBServer::SQLiteIDBBackingStore *)&v12, v3);
  v7 = WebCore::IDBServer::SQLiteIDBBackingStore::databasesSizeForDirectory((WebCore::IDBServer::SQLiteIDBBackingStore *)&v11, v5);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v7 + v4;
}

void WebCore::DOMWindowIndexedDatabase::~DOMWindowIndexedDatabase(WebCore::DOMWindowIndexedDatabase *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DOMWindowIndexedDatabase::~DOMWindowIndexedDatabase(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  WebCore::IDBClient::IDBConnectionProxy *v15;
  bmalloc::api *v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  bmalloc::api *v22;
  bmalloc::api *v23;
  bmalloc::api *v24;

  *(_QWORD *)this = off_1E3359770;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v9 = *(uint64_t **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v9)
      {
        v10 = *v9;
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          v21 = v3;
          v23 = (bmalloc::api *)v10;
          atomic_store(1u, (unsigned int *)v10);
          v15 = *(WebCore::IDBClient::IDBConnectionProxy **)(v10 + 24);
          *(_QWORD *)(v10 + 24) = 0;
          if (v15)
          {
            WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v15, a2);
            bmalloc::api::isoDeallocate(v16, v17);
          }
          v18 = (unsigned int *)*((_QWORD *)v23 + 1);
          *((_QWORD *)v23 + 1) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, a2);
            }
          }
          bmalloc::api::isoDeallocate(v23, a2);
          v3 = v21;
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  v6 = (bmalloc::api *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v13 = *((unsigned int *)v6 + 7);
      if ((_DWORD)v13)
      {
        v24 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v6 + 2), (WTF::StringImpl *)(*((_QWORD *)v6 + 2) + 32 * v13));
        v6 = v24;
      }
      v14 = (WTF *)*((_QWORD *)v6 + 2);
      if (v14)
      {
        *((_QWORD *)v6 + 2) = 0;
        *((_DWORD *)v6 + 6) = 0;
        v22 = v6;
        WTF::fastFree(v14, a2);
        v6 = v22;
      }
      WTF::fastFree(v6, a2);
    }
  }
}

void WebCore::WorkerGlobalScopeIndexedDatabase::~WorkerGlobalScopeIndexedDatabase(WebCore::WorkerGlobalScopeIndexedDatabase *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::WorkerGlobalScopeIndexedDatabase::~WorkerGlobalScopeIndexedDatabase(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  WebCore::IDBClient::IDBConnectionProxy *v14;
  bmalloc::api *v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WebCore::IDBClient::IDBConnectionProxy *v20;
  bmalloc::api *v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E3359790;
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = *v3;
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v14 = *(WebCore::IDBClient::IDBConnectionProxy **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v14)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v14, a2);
        bmalloc::api::isoDeallocate(v15, v16);
      }
      v17 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v10 = *(uint64_t **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v10)
      {
        v11 = *v10;
        do
        {
          v12 = __ldaxr((unsigned int *)v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, (unsigned int *)v11));
        if (!v13)
        {
          v26 = v7;
          atomic_store(1u, (unsigned int *)v11);
          v20 = *(WebCore::IDBClient::IDBConnectionProxy **)(v11 + 24);
          *(_QWORD *)(v11 + 24) = 0;
          if (v20)
          {
            WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v20, a2);
            bmalloc::api::isoDeallocate(v21, v22);
          }
          v23 = *(unsigned int **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v23);
              WTF::fastFree((WTF *)v23, a2);
            }
          }
          bmalloc::api::isoDeallocate((bmalloc::api *)v11, a2);
          v7 = v26;
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v7, a2);
    }
  }
}

void WebCore::IDBClient::TransactionOperation::transitionToCompleteOnThisThread(WebCore::IDBTransaction **this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBTransaction::operationCompletedOnServer(this[2], a2, (WebCore::IDBClient::TransactionOperation *)this);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::TransactionOperation,WebCore::IDBResultData const&,WebCore::IDBResultData>(WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E3359800;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 4));
  v2 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::TransactionOperation,WebCore::IDBResultData const&,WebCore::IDBResultData>(WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E3359800;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 4));
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::TransactionOperation,WebCore::IDBResultData const&,WebCore::IDBResultData>(WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&>(WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&>(WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3359828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&>(WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&>(WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359828;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&>(WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&>(WebCore::IDBClient::TransactionOperation &,void (WebCore::IDBClient::TransactionOperation::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::Task::Task(WTF::Function<void ()(void)> &&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,WTF::Function<void ()(void)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E335A090;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::Task::Task(WTF::Function<void ()(void)> &&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,WTF::Function<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335A090;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::Task::Task(WTF::Function<void ()(void)> &&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,WTF::Function<void ()(void)> &&>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperation::transitionToComplete(WebCore::IDBResultData const&,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3359850;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::TransactionOperation::transitionToComplete(WebCore::IDBResultData const&,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359850;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

double std::make_unique[abi:sn180100]<WebCore::IDBClient::IDBConnectionProxy,WebCore::IDBClient::IDBConnectionToServer &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = bmalloc::api::isoAllocate();
  *(_QWORD *)v4 = a2;
  *(_QWORD *)(v4 + 8) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 8) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  result = 0.0;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_WORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 20) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 65) = 0u;
  *a1 = v4;
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializeIDBKeyPath(std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&)::$_0,WebCore::serializeIDBKeyPath(std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  v3 = *a1;
  v4 = ***a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v4 + 56))(v4, &v10, 1);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = **v3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v7 + 80))(v7, &v10, a2);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializeIDBKeyPath(std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&)::$_0,WebCore::serializeIDBKeyPath(std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v3 = *a1;
  v4 = **(_QWORD **)(*a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v4 + 56))(v4, &v16, 2);
  v6 = v16;
  v16 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = **(_QWORD **)(v3 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = *a2;
  v9 = *((unsigned int *)a2 + 3);
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 112))(v7, &v15);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    do
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v7 + 80))(v7, &v16, v8);
      v12 = v16;
      v16 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 128))(v7);
      v8 += 8;
      v10 -= 8;
    }
    while (v10);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7);
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::IDBServer::UniqueIDBDatabase *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;
  char v13;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 40;
    do
    {
      if (*(_QWORD *)(v4 - 40) != -1)
      {
        v5 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v4 + 40);
        *(_QWORD *)(v4 + 40) = 0;
        if (v5)
        {
          WebCore::IDBServer::UniqueIDBDatabase::~UniqueIDBDatabase(v5, a2);
          WTF::fastFree(v6, v7);
        }
        v8 = *(unsigned int *)(v4 + 24);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, uint64_t))off_1E3359868[v8])(&v12, v4);
        *(_DWORD *)(v4 + 24) = -1;
        v9 = *(unsigned int *)(v4 - 8);
        if ((_DWORD)v9 != -1)
          ((void (*)(char *, uint64_t))off_1E3359868[v9])(&v13, v4 - 32);
        *(_DWORD *)(v4 - 8) = -1;
        v10 = *(WTF::StringImpl **)(v4 - 40);
        *(_QWORD *)(v4 - 40) = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v10 -= 2;
        }
      }
      v4 += 88;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF *WebCore::IDBServer::removeAllDatabasesForFullOriginPath(WTF::FileSystemImpl *a1, const WTF::String *a2, double a3)
{
  const WTF::String *v5;
  WTF *v6;
  WTF *v7;
  double v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const WTF::String *v17;
  WTF::StringImpl *v18;
  const WTF::String *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *result;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  int v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  int v36;
  unsigned int v37;

  WTF::FileSystemImpl::listDirectory(a1, a2);
  if (v37)
  {
    v6 = v35;
    v7 = (WTF *)((char *)v35 + 8 * v37);
    while (1)
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::pathByAppendingComponent();
      if (a3 > -INFINITY)
      {
        if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v33, v5))
        {
          v8 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)&v33, v5));
          if (!(_BYTE)v5 || a3 > v8)
            goto LABEL_29;
        }
      }
      WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v34, v5);
      v10 = v30;
      v11 = (WTF *)((char *)v30 + 8 * v32);
      if (v32)
      {
        do
        {
          if (*(_QWORD *)v10)
          {
            v12 = *(_DWORD *)(*(_QWORD *)v10 + 4);
            if (v12 >= 6)
            {
              if (WTF::StringImpl::endsWith())
              {
                v13 = *(_QWORD *)v10;
                if (*(_QWORD *)v10)
                {
                  v14 = 0;
                  while (*(_DWORD *)(v13 + 4) != v14)
                  {
                    v15 = *(_QWORD *)(v13 + 8);
                    v16 = (*(_DWORD *)(v13 + 16) & 4) != 0
                        ? *(unsigned __int8 *)(v15 + v14)
                        : *(unsigned __int16 *)(v15 + 2 * v14);
                    if ((v16 - 48) >= 0xA)
                      break;
                    if (v12 - 5 == ++v14)
                    {
                      WTF::FileSystemImpl::pathByAppendingComponent();
                      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v29, v17);
                      v18 = v29;
                      v29 = 0;
                      if (v18)
                      {
                        if (*(_DWORD *)v18 == 2)
                          WTF::StringImpl::destroy(v18, v9);
                        else
                          *(_DWORD *)v18 -= 2;
                      }
                      break;
                    }
                  }
                }
              }
            }
          }
          v10 = (WTF *)((char *)v10 + 8);
        }
        while (v10 != v11);
        v10 = v30;
        if (v32)
          break;
      }
      if (v10)
        goto LABEL_47;
LABEL_28:
      WebCore::SQLiteFileSystem::deleteDatabaseFile(&v33, v9);
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v34, v19);
LABEL_29:
      v20 = v33;
      v33 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v5);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = v34;
      v34 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v5);
        else
          *(_DWORD *)v21 -= 2;
      }
      v6 = (WTF *)((char *)v6 + 8);
      if (v6 == v7)
        goto LABEL_48;
    }
    v22 = 8 * v32;
    do
    {
      v23 = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v9);
        else
          *(_DWORD *)v23 -= 2;
      }
      v10 = (WTF *)((char *)v10 + 8);
      v22 -= 8;
    }
    while (v22);
    v10 = v30;
    if (!v30)
      goto LABEL_28;
LABEL_47:
    v30 = 0;
    v31 = 0;
    WTF::fastFree(v10, v9);
    goto LABEL_28;
  }
LABEL_48:
  WTF::FileSystemImpl::deleteEmptyDirectory(a1, v5);
  if (v37)
  {
    v26 = v35;
    v27 = 8 * v37;
    do
    {
      v28 = *(WTF::StringImpl **)v26;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v24);
        else
          *(_DWORD *)v28 -= 2;
      }
      v26 = (WTF *)((char *)v26 + 8);
      v27 -= 8;
    }
    while (v27);
  }
  result = v35;
  if (v35)
  {
    v35 = 0;
    v36 = 0;
    return (WTF *)WTF::fastFree(result, v24);
  }
  return result;
}

bmalloc::api **WTF::ThreadSafeRefCounted<WebCore::IDBClient::IDBConnectionToServer,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(bmalloc::api **result, void *a2)
{
  bmalloc::api *v2;
  WebCore::IDBClient::IDBConnectionProxy *v3;
  bmalloc::api *v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *result;
  if (*result)
  {
    v3 = (WebCore::IDBClient::IDBConnectionProxy *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
    {
      WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v3);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    v6 = (unsigned int *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
    return (bmalloc::api **)bmalloc::api::isoDeallocate(v2, a2);
  }
  return result;
}

void WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(WebCore::IDBClient::IDBConnectionProxy *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  bmalloc::api *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t k;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  bmalloc::api *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t m;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  bmalloc::api *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t n;
  uint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  WebCore::IDBClient::IDBConnectionProxy *v68;
  bmalloc::api *v69;
  void *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;

  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v68 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v68)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v68);
        bmalloc::api::isoDeallocate(v69, v70);
      }
      v71 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v71)
      {
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v71);
          WTF::fastFree((WTF *)v71, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 11);
  v7 = *((_QWORD *)this + 12);
  v8 = (WTF *)*((_QWORD *)this + 13);
  if (v6 <= v7)
  {
    if (v6 == v7)
      goto LABEL_23;
    v15 = (uint64_t *)((char *)v8 + 8 * v6);
    v16 = 8 * v7 - 8 * v6;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  else
  {
    if (v7)
    {
      v9 = 8 * v7;
      do
      {
        v10 = *(_QWORD *)v8;
        *(_QWORD *)v8 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v8 = (WTF *)((char *)v8 + 8);
        v9 -= 8;
      }
      while (v9);
      v8 = (WTF *)*((_QWORD *)this + 13);
      v6 = *((_QWORD *)this + 11);
    }
    v11 = *((unsigned int *)this + 28);
    if (v6 != v11)
    {
      v12 = (uint64_t *)((char *)v8 + 8 * v6);
      v13 = 8 * v11 - 8 * v6;
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 13);
LABEL_23:
  if (v8)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v8, a2);
  }
  v18 = *((_QWORD *)this + 9);
  if (v18)
  {
    v19 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v19)
    {
      v20 = (uint64_t *)(v18 + 16);
      do
      {
        if (*(v20 - 2) != -1)
          v20 = WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>::~Ref(v20, a2);
        v20 += 3;
        --v19;
      }
      while (v19);
    }
    WTF::fastFree((WTF *)(v18 - 16), a2);
  }
  v21 = *((_QWORD *)this + 8);
  if (v21)
  {
    v22 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v22)
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)(v21 + 24 * i) != -1)
        {
          v24 = v21 + 24 * i;
          v25 = *(unsigned int **)(v24 + 16);
          *(_QWORD *)(v24 + 16) = 0;
          if (v25)
          {
            v26 = v25 + 2;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v25 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v21 - 16), a2);
  }
  v29 = *((_QWORD *)this + 7);
  if (v29)
  {
    v30 = *(unsigned int *)(v29 - 4);
    if ((_DWORD)v30)
    {
      for (j = 0; j != v30; ++j)
      {
        if (*(_QWORD *)(v29 + 24 * j) != -1)
        {
          v32 = v29 + 24 * j;
          v33 = *(unsigned int **)(v32 + 16);
          *(_QWORD *)(v32 + 16) = 0;
          if (v33)
          {
            v34 = v33 + 6;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              atomic_store(1u, v33 + 6);
              WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v33, (WTF::StringImpl *)a2);
              bmalloc::api::isoDeallocate(v37, v38);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v29 - 16), a2);
  }
  v39 = *((_QWORD *)this + 6);
  if (v39)
  {
    v40 = *(unsigned int *)(v39 - 4);
    if ((_DWORD)v40)
    {
      for (k = 0; k != v40; ++k)
      {
        if (*(_QWORD *)(v39 + 24 * k) != -1)
        {
          v42 = v39 + 24 * k;
          v43 = *(unsigned int **)(v42 + 16);
          *(_QWORD *)(v42 + 16) = 0;
          if (v43)
          {
            v44 = v43 + 6;
            do
            {
              v45 = __ldaxr(v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v44));
            if (!v46)
            {
              atomic_store(1u, v43 + 6);
              WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v43, (WTF::StringImpl *)a2);
              bmalloc::api::isoDeallocate(v47, v48);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v39 - 16), a2);
  }
  v49 = *((_QWORD *)this + 5);
  if (v49)
  {
    v50 = *(unsigned int *)(v49 - 4);
    if ((_DWORD)v50)
    {
      for (m = 0; m != v50; ++m)
      {
        if (*(_QWORD *)(v49 + 24 * m) != -1)
        {
          v52 = v49 + 24 * m;
          v53 = *(unsigned int **)(v52 + 16);
          *(_QWORD *)(v52 + 16) = 0;
          if (v53)
          {
            v54 = v53 + 6;
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              atomic_store(1u, v53 + 6);
              WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v53, (WTF::StringImpl *)a2);
              bmalloc::api::isoDeallocate(v57, v58);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v49 - 16), a2);
  }
  v59 = *((_QWORD *)this + 4);
  if (v59)
  {
    v60 = *(unsigned int *)(v59 - 4);
    if ((_DWORD)v60)
    {
      for (n = 0; n != v60; ++n)
      {
        if (*(_QWORD *)(v59 + 24 * n) != -1)
        {
          v62 = v59 + 24 * n;
          v63 = *(unsigned int **)(v62 + 16);
          *(_QWORD *)(v62 + 16) = 0;
          if (v63)
          {
            v64 = v63 + 15;
            do
            {
              v65 = __ldaxr(v64);
              v66 = v65 - 1;
            }
            while (__stlxr(v66, v64));
            if (!v66)
            {
              atomic_store(1u, v63 + 15);
              (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 72))(v63);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v59 - 16), a2);
  }
  v67 = *((_QWORD *)this + 3);
  if (v67)
    WTF::fastFree((WTF *)(v67 - 16), a2);
}

unsigned int *WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBOpenDBRequest*>(uint64_t a1, uint64_t *a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  int v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *result;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a3[1];
  v12 = (*a3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a3 - 1640531527) << 16) ^ ((unsigned __int16)*a3
                                                                                             - 1640531527);
  v13 = v12 + (unsigned __int16)WORD2(*a3) + (v12 >> 11);
  v14 = (*a3 >> 37) & 0x7FFF800 ^ (v13 << 16) ^ v13;
  v15 = (v11 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v11 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v11 + (v14 >> 11));
  v16 = (v11 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v11) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v11) + (v15 >> 11));
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v10;
  v21 = (unint64_t *)(v8 + 24 * (v19 & v10));
  v22 = *v21;
  v23 = v21[1];
  if (*(_OWORD *)v21 != 0)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v22 == -1)
      {
        v24 = v21;
      }
      else if (v22 == *a3 && v23 == v11)
      {
        if ((v9 & 1) != 0)
          v40 = 0;
        else
          v40 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a1 = v21;
        *(_QWORD *)(a1 + 8) = v8 + 24 * v40;
        *(_BYTE *)(a1 + 16) = 0;
        v41 = *a4;
        if (*a4)
        {
          v42 = (unsigned int *)(v41 + 60);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
        }
        result = (unsigned int *)v21[2];
        v21[2] = v41;
        if (result)
        {
          v44 = result + 15;
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            atomic_store(1u, result + 15);
            return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
          }
        }
        return result;
      }
      v20 = (v20 + v25) & v10;
      v21 = (unint64_t *)(v8 + 24 * v20);
      v22 = *v21;
      v23 = v21[1];
      ++v25;
    }
    while (*(_OWORD *)v21 != 0);
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v21 = v24;
    }
  }
  *(_OWORD *)v21 = *(_OWORD *)a3;
  v26 = *a4;
  if (*a4)
  {
    v27 = (unsigned int *)(v26 + 60);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  result = (unsigned int *)v21[2];
  v21[2] = v26;
  if (result)
  {
    v30 = result + 15;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, result + 15);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  v33 = *a2;
  if (*a2)
    v34 = *(_DWORD *)(v33 - 12) + 1;
  else
    v34 = 1;
  *(_DWORD *)(v33 - 12) = v34;
  v35 = *a2;
  if (*a2)
    v36 = *(_DWORD *)(v35 - 12);
  else
    v36 = 0;
  v37 = (*(_DWORD *)(v35 - 16) + v36);
  v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 <= 2 * v37)
      goto LABEL_31;
  }
  else if (3 * v38 <= 4 * v37)
  {
    if (!(_DWORD)v38)
    {
      v39 = 8;
LABEL_44:
      result = (unsigned int *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a2, v39, v21);
      v21 = (unint64_t *)result;
      v35 = *a2;
      if (*a2)
        LODWORD(v38) = *(_DWORD *)(v35 - 4);
      else
        LODWORD(v38) = 0;
      goto LABEL_46;
    }
LABEL_31:
    v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
    goto LABEL_44;
  }
LABEL_46:
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v35 + 24 * v38;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  _OWORD *v36;
  uint64_t v37;
  unsigned int *v38;
  _QWORD *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (unint64_t *)(v6 + 24 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        v18 = v16[1];
        if (v18 | v17)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v26 = 0;
          v27 = (v17 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v17 - 1640531527) << 16) ^ ((unsigned __int16)v17 - 1640531527);
          v28 = (v17 >> 37) & 0x7FFF800 ^ ((v27 + WORD2(v17) + (v27 >> 11)) << 16) ^ (v27 + WORD2(v17) + (v27 >> 11));
          v29 = (v18 >> 5) & 0x7FFF800 ^ ((v28 + (v28 >> 11) + (unsigned __int16)v18) << 16) ^ (v28 + (v28 >> 11) + (unsigned __int16)v18);
          v30 = (v18 >> 37) & 0x7FFF800 ^ ((v29 + WORD2(v18) + (v29 >> 11)) << 16) ^ (v29 + WORD2(v18) + (v29 >> 11));
          v31 = (v30 + (v30 >> 11)) ^ (8 * (v30 + (v30 >> 11)));
          v32 = (v31 + (v31 >> 5)) ^ (4 * (v31 + (v31 >> 5)));
          v33 = (v32 + (v32 >> 15)) ^ ((v32 + (v32 >> 15)) << 10);
          if (v33)
            v34 = v33;
          else
            v34 = 0x800000;
          do
          {
            v35 = v34 & v20;
            v36 = (_OWORD *)(v19 + 24 * (v34 & v20));
            v34 = ++v26 + (v34 & v20);
          }
          while (*v36 != 0);
          v37 = v19 + 24 * v35;
          v40 = *(unsigned int **)(v37 + 16);
          v39 = (_QWORD *)(v37 + 16);
          v38 = v40;
          *v39 = 0;
          if (v40)
          {
            v41 = v38 + 15;
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              atomic_store(1u, v38 + 15);
              (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 72))(v38);
            }
          }
          *v36 = *(_OWORD *)v16;
          v44 = v6 + 24 * v13;
          v45 = *(_QWORD *)(v44 + 16);
          *(_QWORD *)(v44 + 16) = 0;
          *v39 = v45;
          v46 = *(unsigned int **)(v44 + 16);
          *(_QWORD *)(v44 + 16) = 0;
          if (v46)
          {
            v47 = v46 + 15;
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              atomic_store(1u, v46 + 15);
              (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 72))(v46);
            }
          }
          if (v16 == a3)
            v14 = v36;
        }
        else
        {
          v21 = v6 + 24 * v13;
          v22 = *(unsigned int **)(v21 + 16);
          *(_QWORD *)(v21 + 16) = 0;
          if (v22)
          {
            v23 = v22 + 15;
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v22 + 15);
              (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 72))(v22);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData&>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, WebCore::IDBOpenRequestData *a5)
{
  unsigned __int8 *v6;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;

  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBOpenRequestData const&,WebCore::IDBOpenRequestData>(a5, a2, a3, a4, &v12);
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v12);
  v6 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3359ED0;
    v8[1] = a1;
    v13 = v8;
    WTF::callOnMainThread();
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v6))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBOpenRequestData const&,WebCore::IDBOpenRequestData>@<X0>(WebCore::IDBOpenRequestData *this@<X3>, unsigned int *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t *a5@<X8>)
{
  unsigned int v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  char v20;
  __int128 v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _BYTE v24[24];
  int v25;
  _BYTE v26[24];
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  unsigned int *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  _BYTE v36[24];
  int v37;
  char v38[24];
  int v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  do
    v6 = __ldaxr(a2);
  while (__stlxr(v6 + 1, a2));
  v31 = a2;
  *(_QWORD *)&v32 = a3;
  *((_QWORD *)&v32 + 1) = a4;
  WebCore::IDBOpenRequestData::isolatedCopy(this, (uint64_t)&v21);
  v33 = v21;
  v7 = v23;
  v23 = 0;
  v34 = v22;
  v35 = v7;
  v36[0] = 0;
  v37 = -1;
  v8 = v25;
  if (v25 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))off_1E3359948[v25])(&v20, v36, v24);
    v37 = v8;
  }
  v38[0] = 0;
  v39 = -1;
  v9 = v27;
  if (v27 != -1)
  {
    ((void (*)(char *, char *, _BYTE *))off_1E3359948[v27])(&v20, v38, v26);
    v39 = v9;
  }
  v40 = v28;
  v41 = v29;
  v42 = v30;
  v10 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v10 = off_1E33599D0;
  v11 = (uint64_t)v31;
  v31 = 0;
  *(_QWORD *)(v10 + 8) = v11;
  *(_OWORD *)(v10 + 16) = v32;
  v12 = v33;
  *(_QWORD *)(v10 + 48) = v34;
  *(_OWORD *)(v10 + 32) = v12;
  v13 = v35;
  v35 = 0;
  *(_QWORD *)(v10 + 56) = v13;
  *(_BYTE *)(v10 + 64) = 0;
  *(_DWORD *)(v10 + 88) = -1;
  v14 = v37;
  if (v37 != -1)
  {
    ((void (*)(char *, uint64_t, _BYTE *))off_1E3359948[v37])(&v20, v10 + 64, v36);
    *(_DWORD *)(v10 + 88) = v14;
  }
  *(_BYTE *)(v10 + 96) = 0;
  v15 = (WTF::StringImpl *)(v10 + 96);
  *(_DWORD *)(v10 + 120) = -1;
  v16 = v39;
  if (v39 != -1)
  {
    ((void (*)(char *))off_1E3359948[v39])(&v20);
    *(_DWORD *)(v10 + 120) = v16;
  }
  *(_BYTE *)(v10 + 128) = v40;
  v17 = v42;
  *(_QWORD *)(v10 + 136) = v41;
  *(_BYTE *)(v10 + 144) = v17;
  *a5 = v10;
  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBOpenRequestData const&,WebCore::IDBOpenRequestData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData const&)::{lambda(void)#1}::~CrossThreadTask((uint64_t *)&v31, v15);
  if (v27 != -1)
    ((void (*)(char *, _BYTE *))off_1E3359868[v27])(&v20, v26);
  v27 = -1;
  if (v25 != -1)
    ((void (*)(char *, _BYTE *))off_1E3359868[v25])(&v20, v24);
  v25 = -1;
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned __int8 *WTF::CrossThreadQueue<WTF::CrossThreadTask>::append(unsigned __int8 *this, uint64_t *a2)
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WTF *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  int v37;
  _QWORD v38[2];
  char v39;
  _QWORD v40[3];

  v3 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v6 = *((_QWORD *)v3 + 1);
  v5 = *((_QWORD *)v3 + 2);
  if (v6)
  {
    if (v5 + 1 != v6)
      goto LABEL_39;
    LODWORD(v7) = *((_DWORD *)v3 + 8);
  }
  else
  {
    v7 = *((unsigned int *)v3 + 8);
    if (v5)
    {
      if (v5 != v7 - 1)
        goto LABEL_39;
    }
    else if ((_DWORD)v7)
    {
      v5 = 0;
      goto LABEL_39;
    }
  }
  v8 = v7;
  v9 = ((unint64_t)v7 >> 2) + v7;
  if (v9 <= 0xF)
    v9 = 15;
  if (v9 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return this;
  }
  v10 = (WTF *)*((_QWORD *)v3 + 3);
  v11 = v9 + 1;
  v12 = WTF::fastMalloc((WTF *)(8 * (v9 + 1)));
  v14 = (_QWORD *)v12;
  *((_DWORD *)v3 + 8) = v11;
  *((_QWORD *)v3 + 3) = v12;
  v15 = *((_QWORD *)v3 + 1);
  v16 = *((_QWORD *)v3 + 2);
  if (v15 <= v16)
  {
    if (v15 != v16)
    {
      v28 = (_QWORD *)(v12 + 8 * v15);
      v29 = (uint64_t *)((char *)v10 + 8 * v15);
      v30 = 8 * v16 - 8 * v15;
      do
      {
        v31 = *v29;
        *v29 = 0;
        *v28 = v31;
        v32 = *v29;
        *v29 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        ++v28;
        ++v29;
        v30 -= 8;
      }
      while (v30);
    }
  }
  else
  {
    if (v16)
    {
      v17 = 8 * v16;
      v18 = v10;
      do
      {
        v19 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        *v14 = v19;
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        ++v14;
        v18 = (WTF *)((char *)v18 + 8);
        v17 -= 8;
      }
      while (v17);
      v11 = *((_DWORD *)v3 + 8);
      v15 = *((_QWORD *)v3 + 1);
      v14 = (_QWORD *)*((_QWORD *)v3 + 3);
    }
    v21 = v15 - v8 + v11;
    if (v15 != v8)
    {
      v22 = v11;
      v23 = (uint64_t *)((char *)v10 + 8 * v15);
      v24 = &v14[v22];
      v25 = 8 * v15 - 8 * v8;
      do
      {
        v26 = *v23;
        *v23 = 0;
        *(_QWORD *)((char *)v24 + v25) = v26;
        v27 = *v23;
        *v23 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        ++v23;
        v25 += 8;
      }
      while (v25);
    }
    *((_QWORD *)v3 + 1) = v21;
  }
  if (v10)
  {
    if (*((WTF **)v3 + 3) == v10)
    {
      *((_QWORD *)v3 + 3) = 0;
      *((_DWORD *)v3 + 8) = 0;
    }
    WTF::fastFree(v10, v13);
  }
  v5 = *((_QWORD *)v3 + 2);
LABEL_39:
  v33 = *((_QWORD *)v3 + 3);
  v34 = *a2;
  *a2 = 0;
  *(_QWORD *)(v33 + 8 * v5) = v34;
  if (v5 == *((unsigned int *)v3 + 8) - 1)
    v35 = 0;
  else
    v35 = v5 + 1;
  *((_QWORD *)v3 + 2) = v35;
  this = v3 + 40;
  v36 = atomic_load(v3 + 40);
  if ((v36 & 1) != 0)
  {
    v39 = 0;
    v38[0] = v3 + 40;
    v38[1] = &v39;
    v40[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v40[1] = v40;
    v40[2] = v38;
    this = (unsigned __int8 *)WTF::ParkingLot::unparkOneImpl();
  }
  v37 = __ldxr(v3);
  if (v37 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBOpenRequestData const&,WebCore::IDBOpenRequestData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33599D0;
  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBOpenRequestData const&,WebCore::IDBOpenRequestData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData const&)::{lambda(void)#1}::~CrossThreadTask(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBOpenRequestData const&,WebCore::IDBOpenRequestData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E33599D0;
  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBOpenRequestData const&,WebCore::IDBOpenRequestData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData const&)::{lambda(void)#1}::~CrossThreadTask(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBOpenRequestData const&,WebCore::IDBOpenRequestData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4);
}

uint64_t *WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBOpenRequestData const&,WebCore::IDBOpenRequestData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData const&)::{lambda(void)#1}::~CrossThreadTask(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WebCore::IDBClient::IDBConnectionProxy *v10;
  bmalloc::api *v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  char v17;

  v3 = *((unsigned int *)a1 + 28);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t *))off_1E3359868[v3])(&v16, a1 + 11);
  *((_DWORD *)a1 + 28) = -1;
  v4 = *((unsigned int *)a1 + 20);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t *))off_1E3359868[v4])(&v17, a1 + 7);
  *((_DWORD *)a1 + 20) = -1;
  v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *a1;
  *a1 = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v10 = *(WebCore::IDBClient::IDBConnectionProxy **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      if (v10)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v10, a2);
        bmalloc::api::isoDeallocate(v11, v12);
      }
      v13 = *(unsigned int **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((WTF *)v13, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v6, a2);
    }
  }
  return a1;
}

void WTF::createCrossThreadTask<WebCore::IDBOpenDBRequest,WebCore::IDBResultData const&,WebCore::IDBResultData>(uint64_t *a1, uint64_t a2, WebCore::IDBResultData *this)
{
  unsigned int *v5;
  unsigned int v6;
  __int16 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[24];
  __int16 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned int *v25;
  unsigned int *(*v26)(unsigned int *, WTF::StringImpl **);
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v5 = (unsigned int *)(a2 + 60);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v26 = WebCore::IDBOpenDBRequest::requestCompleted;
  v27 = 0;
  v18[0] = 0;
  v20 = 0;
  LOBYTE(v21) = 0;
  BYTE8(v21) = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)&v18[8] = 0u;
  v19 = 0;
  WebCore::IDBResultData::isolatedCopy(this, (const WebCore::IDBResultData *)v18, this);
  v28 = *(_OWORD *)v18;
  v29 = *(_QWORD *)&v18[16];
  v7 = v19;
  v30 = v19;
  v8 = v20;
  v20 = 0;
  v32 = v21;
  v9 = v24;
  *(_QWORD *)&v24 = 0;
  v36 = *((_QWORD *)&v24 + 1);
  v16 = v23;
  v17 = v22;
  v22 = 0u;
  v23 = 0u;
  v10 = WTF::fastMalloc((WTF *)0x88);
  *(_QWORD *)v10 = off_1E33599F8;
  *(_QWORD *)(v10 + 8) = a2;
  *(_QWORD *)(v10 + 16) = WebCore::IDBOpenDBRequest::requestCompleted;
  *(_QWORD *)(v10 + 24) = 0;
  v11 = v28;
  *(_QWORD *)(v10 + 48) = v29;
  *(_OWORD *)(v10 + 32) = v11;
  *(_WORD *)(v10 + 56) = v7;
  v25 = 0;
  v31 = 0;
  *(_QWORD *)(v10 + 64) = v8;
  *(_OWORD *)(v10 + 72) = v32;
  *(_OWORD *)(v10 + 88) = v17;
  *(_OWORD *)(v10 + 104) = v16;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  *(_OWORD *)(v10 + 120) = v9;
  *a1 = v10;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v28);
  v12 = v25;
  v25 = 0;
  if (v12)
  {
    v13 = v12 + 15;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 72))(v12);
    }
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v18);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBOpenDBRequest,WebCore::IDBResultData const&,WebCore::IDBResultData>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E33599F8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 4));
  v2 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 15;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBOpenDBRequest,WebCore::IDBResultData const&,WebCore::IDBResultData>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E33599F8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 4));
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBOpenDBRequest,WebCore::IDBResultData const&,WebCore::IDBResultData>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData&>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData&>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3359A20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData&>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData&>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359A20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData&>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData&>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3359A48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359A48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(WebCore::IDBResultData const&),WebCore::IDBResultData const&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&),WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unsigned __int8 *v6;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;

  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&,WebCore::IDBRequestData,WebCore::IDBObjectStoreInfo>(a2, *a3, a3[1], a4, a5, &v12);
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v12);
  v6 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3359ED0;
    v8[1] = a1;
    v13 = v8;
    WTF::callOnMainThread();
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v6))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&,WebCore::IDBRequestData,WebCore::IDBObjectStoreInfo>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  void *v28;
  bmalloc::api *v29;
  unsigned int v30;
  unsigned int v31;
  WebCore::IDBClient::IDBConnectionProxy *v32;
  bmalloc::api *v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  char v47;
  __int128 v48;
  __int128 v49;
  bmalloc::api *v50;
  __int128 v51;
  _BYTE v52[64];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[16];
  int v59;
  char v60;
  char v61;
  uint64_t v62;
  _BYTE v63[17];

  do
    v6 = __ldaxr(a1);
  while (__stlxr(v6 + 1, a1));
  v50 = (bmalloc::api *)a1;
  *(_QWORD *)&v51 = a2;
  *((_QWORD *)&v51 + 1) = a3;
  v7 = *a4;
  v8 = *(_OWORD *)(a4 + 1);
  v48 = *(_OWORD *)(a4 + 3);
  v49 = v8;
  v46 = *(_OWORD *)(a4 + 5);
  v47 = *((_BYTE *)a4 + 56);
  v9 = a4[8];
  v10 = a4[9];
  v11 = *((_BYTE *)a4 + 80);
  v12 = a4[11];
  v13 = *((_BYTE *)a4 + 96);
  WebCore::IDBObjectStoreInfo::isolatedCopy(a5, (uint64_t)&v39);
  *(_QWORD *)v52 = v7;
  *(_OWORD *)&v52[8] = v49;
  *(_OWORD *)&v52[24] = v48;
  *(_OWORD *)&v52[40] = v46;
  v52[56] = v47;
  *(_QWORD *)&v53 = v9;
  *((_QWORD *)&v53 + 1) = v10;
  LOBYTE(v54) = v11;
  *((_QWORD *)&v54 + 1) = v12;
  LOBYTE(v55) = v13;
  v14 = v40;
  v40 = 0;
  v56 = v39;
  v57 = v14;
  v58[0] = 0;
  v60 = 0;
  if (v43)
  {
    v59 = -1;
    v15 = v42;
    if (v42 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t *))off_1E33598A8[v42])(v63, v58, &v41);
      v59 = v15;
    }
    v60 = 1;
  }
  v61 = v44;
  v16 = v45;
  v45 = 0;
  v62 = v16;
  v17 = WTF::fastMalloc((WTF *)0xC8);
  v18 = v17;
  *(_QWORD *)v17 = off_1E3359A70;
  *(_QWORD *)(v17 + 8) = v50;
  *(_OWORD *)(v17 + 16) = v51;
  v19 = v55;
  v20 = v54;
  v21 = *(_OWORD *)&v52[48];
  *(_OWORD *)(v17 + 96) = v53;
  *(_OWORD *)(v17 + 112) = v20;
  *(_OWORD *)(v17 + 80) = v21;
  *(_QWORD *)(v17 + 128) = v19;
  v22 = *(_OWORD *)v52;
  v23 = *(_OWORD *)&v52[32];
  *(_OWORD *)(v17 + 48) = *(_OWORD *)&v52[16];
  *(_OWORD *)(v17 + 64) = v23;
  *(_OWORD *)(v17 + 32) = v22;
  *(_QWORD *)(v17 + 136) = v56;
  v24 = v57;
  v50 = 0;
  v57 = 0;
  *(_QWORD *)(v17 + 144) = v24;
  *(_BYTE *)(v17 + 152) = 0;
  v25 = (WTF::StringImpl *)(v17 + 152);
  *(_BYTE *)(v17 + 176) = 0;
  if (v60)
  {
    *(_DWORD *)(v17 + 168) = -1;
    v26 = v59;
    if (v59 != -1)
    {
      ((void (*)(_BYTE *, WTF::StringImpl *, _BYTE *))off_1E33598A8[v59])(v63, v25, v58);
      *(_DWORD *)(v18 + 168) = v26;
    }
    *(_BYTE *)(v18 + 176) = 1;
  }
  *(_BYTE *)(v18 + 184) = v61;
  v27 = v62;
  v62 = 0;
  *(_QWORD *)(v18 + 192) = v27;
  *a6 = v18;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)&v56, v25);
  v29 = v50;
  v50 = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr((unsigned int *)v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)v29));
    if (!v31)
    {
      atomic_store(1u, (unsigned int *)v29);
      v32 = (WebCore::IDBClient::IDBConnectionProxy *)*((_QWORD *)v29 + 3);
      *((_QWORD *)v29 + 3) = 0;
      if (v32)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v32, v28);
        bmalloc::api::isoDeallocate(v33, v34);
      }
      v35 = (unsigned int *)*((_QWORD *)v29 + 1);
      *((_QWORD *)v29 + 1) = 0;
      if (v35)
      {
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v35);
          WTF::fastFree((WTF *)v35, v28);
        }
      }
      bmalloc::api::isoDeallocate(v29, v28);
    }
  }
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)&v39, (WTF::StringImpl *)v28);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&,WebCore::IDBRequestData,WebCore::IDBObjectStoreInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&),WebCore::IDBRequestData,WebCore::IDBObjectStoreInfo const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::IDBClient::IDBConnectionProxy *v8;
  bmalloc::api *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *a1 = off_1E3359A70;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 17), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WebCore::IDBClient::IDBConnectionProxy **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v8)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v8, v3);
        bmalloc::api::isoDeallocate(v9, v10);
      }
      v11 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v3);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&,WebCore::IDBRequestData,WebCore::IDBObjectStoreInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&),WebCore::IDBRequestData,WebCore::IDBObjectStoreInfo const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::IDBClient::IDBConnectionProxy *v8;
  bmalloc::api *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *a1 = off_1E3359A70;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 17), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WebCore::IDBClient::IDBConnectionProxy **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v8)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v8, v3);
        bmalloc::api::isoDeallocate(v9, v10);
      }
      v11 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v3);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&,WebCore::IDBRequestData,WebCore::IDBObjectStoreInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&),WebCore::IDBRequestData,WebCore::IDBObjectStoreInfo const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4, a1 + 17);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&),WebCore::IDBRequestData const&,unsigned long long &,WTF::String const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned __int8 *v19;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[7];
  _BYTE v30[7];
  _BYTE v31[7];
  __int128 v32;
  char v33;
  __int128 v34;
  __int128 v35;

  v6 = *a3;
  v7 = a3[1];
  do
    v8 = __ldaxr(a2);
  while (__stlxr(v8 + 1, a2));
  v9 = *a4;
  v35 = *(_OWORD *)(a4 + 1);
  v34 = *(_OWORD *)(a4 + 3);
  v32 = *(_OWORD *)(a4 + 5);
  v33 = *((_BYTE *)a4 + 56);
  v10 = a4[8];
  v11 = a4[9];
  v12 = *((_BYTE *)a4 + 80);
  v13 = a4[11];
  v14 = *((_BYTE *)a4 + 96);
  v25 = *a5;
  WTF::String::isolatedCopy();
  v15 = v28;
  v28 = 0;
  v16 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v16 = &off_1E3359A98;
  *(_QWORD *)(v16 + 8) = a2;
  *(_QWORD *)(v16 + 16) = v6;
  *(_QWORD *)(v16 + 24) = v7;
  *(_QWORD *)(v16 + 32) = v9;
  *(_OWORD *)(v16 + 40) = v35;
  *(_OWORD *)(v16 + 56) = v34;
  *(_OWORD *)(v16 + 72) = v32;
  *(_BYTE *)(v16 + 88) = v33;
  *(_DWORD *)(v16 + 92) = *(_DWORD *)&v31[3];
  *(_DWORD *)(v16 + 89) = *(_DWORD *)v31;
  *(_QWORD *)(v16 + 96) = v10;
  *(_QWORD *)(v16 + 104) = v11;
  *(_BYTE *)(v16 + 112) = v12;
  *(_DWORD *)(v16 + 116) = *(_DWORD *)&v30[3];
  *(_DWORD *)(v16 + 113) = *(_DWORD *)v30;
  *(_QWORD *)(v16 + 120) = v13;
  *(_BYTE *)(v16 + 128) = v14;
  *(_DWORD *)(v16 + 132) = *(_DWORD *)&v29[3];
  *(_DWORD *)(v16 + 129) = *(_DWORD *)v29;
  *(_QWORD *)(v16 + 136) = v25;
  *(_QWORD *)(v16 + 144) = v15;
  v27 = v16;
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v27);
  v19 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_10;
  }
  if (__stxr(1u, v19))
    goto LABEL_9;
LABEL_10:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E3359ED0;
    v21[1] = a1;
    *(_QWORD *)&v32 = v21;
    WTF::callOnMainThread();
    v22 = v32;
    *(_QWORD *)&v32 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  v23 = __ldxr(v19);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v19))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v27;
  v27 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,unsigned long long,WTF::String const&,WebCore::IDBRequestData,unsigned long long,WTF::String>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&),WebCore::IDBRequestData,unsigned long long,WTF::String const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::IDBClient::IDBConnectionProxy *v8;
  bmalloc::api *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *a1 = &off_1E3359A98;
  v3 = (WTF::StringImpl *)a1[18];
  a1[18] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WebCore::IDBClient::IDBConnectionProxy **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v8)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v8, a2);
        bmalloc::api::isoDeallocate(v9, v10);
      }
      v11 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,unsigned long long,WTF::String const&,WebCore::IDBRequestData,unsigned long long,WTF::String>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&),WebCore::IDBRequestData,unsigned long long,WTF::String const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::IDBClient::IDBConnectionProxy *v8;
  bmalloc::api *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)this = &off_1E3359A98;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WebCore::IDBClient::IDBConnectionProxy **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v8)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v8, a2);
        bmalloc::api::isoDeallocate(v9, v10);
      }
      v11 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,unsigned long long,WTF::String const&,WebCore::IDBRequestData,unsigned long long,WTF::String>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&),WebCore::IDBRequestData,unsigned long long,WTF::String const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4, a1[17], a1 + 18);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&),WebCore::IDBRequestData const&,unsigned long long &,unsigned long long &,WTF::String const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned __int8 *v20;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[7];
  _BYTE v32[7];
  _BYTE v33[7];
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;

  v8 = a3[1];
  v26 = *a3;
  do
    v9 = __ldaxr(a2);
  while (__stlxr(v9 + 1, a2));
  v10 = *a4;
  v37 = *(_OWORD *)(a4 + 1);
  v36 = *(_OWORD *)(a4 + 3);
  v34 = *(_OWORD *)(a4 + 5);
  v35 = *((_BYTE *)a4 + 56);
  v11 = a4[8];
  v12 = a4[9];
  v13 = *((_BYTE *)a4 + 80);
  v14 = a4[11];
  v15 = *((_BYTE *)a4 + 96);
  v27 = *a6;
  v28 = *a5;
  WTF::String::isolatedCopy();
  v16 = v30;
  v30 = 0;
  v17 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)v17 = &off_1E3359AC0;
  *(_QWORD *)(v17 + 8) = a2;
  *(_QWORD *)(v17 + 16) = v26;
  *(_QWORD *)(v17 + 24) = v8;
  *(_QWORD *)(v17 + 32) = v10;
  *(_OWORD *)(v17 + 40) = v37;
  *(_OWORD *)(v17 + 56) = v36;
  *(_OWORD *)(v17 + 72) = v34;
  *(_BYTE *)(v17 + 88) = v35;
  *(_DWORD *)(v17 + 92) = *(_DWORD *)&v33[3];
  *(_DWORD *)(v17 + 89) = *(_DWORD *)v33;
  *(_QWORD *)(v17 + 96) = v11;
  *(_QWORD *)(v17 + 104) = v12;
  *(_BYTE *)(v17 + 112) = v13;
  *(_DWORD *)(v17 + 116) = *(_DWORD *)&v32[3];
  *(_DWORD *)(v17 + 113) = *(_DWORD *)v32;
  *(_QWORD *)(v17 + 120) = v14;
  *(_BYTE *)(v17 + 128) = v15;
  *(_DWORD *)(v17 + 132) = *(_DWORD *)&v31[3];
  *(_DWORD *)(v17 + 129) = *(_DWORD *)v31;
  *(_QWORD *)(v17 + 136) = v28;
  *(_QWORD *)(v17 + 144) = v27;
  *(_QWORD *)(v17 + 152) = v16;
  v29 = v17;
  v19 = v30;
  v30 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v29);
  v20 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_10;
  }
  if (__stxr(1u, v20))
    goto LABEL_9;
LABEL_10:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v22 = off_1E3359ED0;
    v22[1] = a1;
    *(_QWORD *)&v34 = v22;
    WTF::callOnMainThread();
    v23 = v34;
    *(_QWORD *)&v34 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  v24 = __ldxr(v20);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v20))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v29;
  v29 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&,WebCore::IDBRequestData,unsigned long long,unsigned long long,WTF::String>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&),WebCore::IDBRequestData,unsigned long long,unsigned long long,WTF::String const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::IDBClient::IDBConnectionProxy *v8;
  bmalloc::api *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *a1 = &off_1E3359AC0;
  v3 = (WTF::StringImpl *)a1[19];
  a1[19] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WebCore::IDBClient::IDBConnectionProxy **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v8)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v8, a2);
        bmalloc::api::isoDeallocate(v9, v10);
      }
      v11 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&,WebCore::IDBRequestData,unsigned long long,unsigned long long,WTF::String>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&),WebCore::IDBRequestData,unsigned long long,unsigned long long,WTF::String const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::IDBClient::IDBConnectionProxy *v8;
  bmalloc::api *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)this = &off_1E3359AC0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WebCore::IDBClient::IDBConnectionProxy **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v8)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v8, a2);
        bmalloc::api::isoDeallocate(v9, v10);
      }
      v11 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&,WebCore::IDBRequestData,unsigned long long,unsigned long long,WTF::String>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&),WebCore::IDBRequestData,unsigned long long,unsigned long long,WTF::String const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4, a1[17], a1[18], a1 + 19);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WTF::String const&),WebCore::IDBRequestData const&,WTF::String const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned __int8 *v19;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  uint64_t v26;
  WTF::StringImpl *v27;
  _BYTE v28[7];
  _BYTE v29[7];
  _BYTE v30[7];
  __int128 v31;
  char v32;
  __int128 v33;
  __int128 v34;

  v5 = *a3;
  v6 = a3[1];
  do
    v7 = __ldaxr(a2);
  while (__stlxr(v7 + 1, a2));
  v8 = *a4;
  v9 = *(_OWORD *)(a4 + 1);
  v33 = *(_OWORD *)(a4 + 3);
  v34 = v9;
  v31 = *(_OWORD *)(a4 + 5);
  v32 = *((_BYTE *)a4 + 56);
  v10 = a4[8];
  v11 = a4[9];
  v12 = *((_BYTE *)a4 + 80);
  v13 = a4[11];
  v14 = *((_BYTE *)a4 + 96);
  WTF::String::isolatedCopy();
  v15 = v27;
  v27 = 0;
  v16 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v16 = &off_1E3359AE8;
  *(_QWORD *)(v16 + 8) = a2;
  *(_QWORD *)(v16 + 16) = v5;
  *(_QWORD *)(v16 + 24) = v6;
  *(_QWORD *)(v16 + 32) = v8;
  *(_OWORD *)(v16 + 40) = v34;
  *(_OWORD *)(v16 + 56) = v33;
  *(_OWORD *)(v16 + 72) = v31;
  *(_BYTE *)(v16 + 88) = v32;
  *(_DWORD *)(v16 + 92) = *(_DWORD *)&v30[3];
  *(_DWORD *)(v16 + 89) = *(_DWORD *)v30;
  *(_QWORD *)(v16 + 96) = v10;
  *(_QWORD *)(v16 + 104) = v11;
  *(_BYTE *)(v16 + 112) = v12;
  *(_DWORD *)(v16 + 116) = *(_DWORD *)&v29[3];
  *(_DWORD *)(v16 + 113) = *(_DWORD *)v29;
  *(_QWORD *)(v16 + 120) = v13;
  *(_BYTE *)(v16 + 128) = v14;
  *(_DWORD *)(v16 + 129) = *(_DWORD *)v28;
  *(_DWORD *)(v16 + 132) = *(_DWORD *)&v28[3];
  *(_QWORD *)(v16 + 136) = v15;
  v26 = v16;
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v26);
  v19 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_10;
  }
  if (__stxr(1u, v19))
    goto LABEL_9;
LABEL_10:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E3359ED0;
    v21[1] = a1;
    *(_QWORD *)&v31 = v21;
    WTF::callOnMainThread();
    v22 = v31;
    *(_QWORD *)&v31 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  v23 = __ldxr(v19);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v19))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v26;
  v26 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WTF::String const&,WebCore::IDBRequestData,WTF::String>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WTF::String const&),WebCore::IDBRequestData,WTF::String const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::IDBClient::IDBConnectionProxy *v8;
  bmalloc::api *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *a1 = &off_1E3359AE8;
  v3 = (WTF::StringImpl *)a1[17];
  a1[17] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WebCore::IDBClient::IDBConnectionProxy **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v8)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v8, a2);
        bmalloc::api::isoDeallocate(v9, v10);
      }
      v11 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WTF::String const&,WebCore::IDBRequestData,WTF::String>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WTF::String const&),WebCore::IDBRequestData,WTF::String const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::IDBClient::IDBConnectionProxy *v8;
  bmalloc::api *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)this = &off_1E3359AE8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WebCore::IDBClient::IDBConnectionProxy **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v8)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v8, a2);
        bmalloc::api::isoDeallocate(v9, v10);
      }
      v11 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WTF::String const&,WebCore::IDBRequestData,WTF::String>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WTF::String const&),WebCore::IDBRequestData,WTF::String const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4, a1 + 17);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,unsigned long long),WebCore::IDBRequestData const&,unsigned long long &>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned __int8 *v18;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[7];
  _BYTE v27[7];
  _BYTE v28[7];
  __int128 v29;
  char v30;
  __int128 v31;
  __int128 v32;

  v7 = *a3;
  v8 = a3[1];
  do
    v9 = __ldaxr(a2);
  while (__stlxr(v9 + 1, a2));
  v10 = *a4;
  v11 = *(_OWORD *)(a4 + 1);
  v31 = *(_OWORD *)(a4 + 3);
  v32 = v11;
  v29 = *(_OWORD *)(a4 + 5);
  v30 = *((_BYTE *)a4 + 56);
  v12 = a4[8];
  v13 = a4[9];
  v14 = *((_BYTE *)a4 + 80);
  v15 = a4[11];
  v16 = *((_BYTE *)a4 + 96);
  v24 = *a5;
  v17 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v17 = &off_1E3359B10;
  *(_QWORD *)(v17 + 8) = a2;
  *(_QWORD *)(v17 + 16) = v7;
  *(_QWORD *)(v17 + 24) = v8;
  *(_QWORD *)(v17 + 32) = v10;
  *(_OWORD *)(v17 + 40) = v32;
  *(_OWORD *)(v17 + 56) = v31;
  *(_OWORD *)(v17 + 72) = v29;
  *(_BYTE *)(v17 + 88) = v30;
  *(_DWORD *)(v17 + 92) = *(_DWORD *)&v28[3];
  *(_DWORD *)(v17 + 89) = *(_DWORD *)v28;
  *(_QWORD *)(v17 + 96) = v12;
  *(_QWORD *)(v17 + 104) = v13;
  *(_BYTE *)(v17 + 112) = v14;
  *(_DWORD *)(v17 + 116) = *(_DWORD *)&v27[3];
  *(_DWORD *)(v17 + 113) = *(_DWORD *)v27;
  *(_QWORD *)(v17 + 120) = v15;
  *(_BYTE *)(v17 + 128) = v16;
  *(_DWORD *)(v17 + 132) = *(_DWORD *)&v26[3];
  *(_DWORD *)(v17 + 129) = *(_DWORD *)v26;
  *(_QWORD *)(v17 + 136) = v24;
  v25 = v17;
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v25);
  v18 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_7;
  }
  if (__stxr(1u, v18))
    goto LABEL_6;
LABEL_7:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v20 = off_1E3359ED0;
    v20[1] = a1;
    *(_QWORD *)&v29 = v20;
    WTF::callOnMainThread();
    v21 = v29;
    *(_QWORD *)&v29 = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  v22 = __ldxr(v18);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v18))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v25;
  v25 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,unsigned long long,WebCore::IDBRequestData,unsigned long long>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,unsigned long long),WebCore::IDBRequestData,unsigned long long const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = a1[1];
  *a1 = &off_1E3359B10;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,unsigned long long,WebCore::IDBRequestData,unsigned long long>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,unsigned long long),WebCore::IDBRequestData,unsigned long long const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359B10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,unsigned long long,WebCore::IDBRequestData,unsigned long long>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,unsigned long long),WebCore::IDBRequestData,unsigned long long const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(*v3 + v1);
  return v1(v3, a1 + 4, a1[17]);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&),WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unsigned __int8 *v6;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;

  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&,WebCore::IDBRequestData,WebCore::IDBIndexInfo>(a2, *a3, a3[1], a4, a5, &v12);
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v12);
  v6 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3359ED0;
    v8[1] = a1;
    v13 = v8;
    WTF::callOnMainThread();
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v6))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&,WebCore::IDBRequestData,WebCore::IDBIndexInfo>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  __int128 v28;
  WTF::StringImpl *v29;
  _BYTE v30[16];
  int v31;
  __int16 v32;
  __int128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  unsigned int *v37;
  __int128 v38;
  _BYTE v39[64];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  WTF::StringImpl *v44;
  _BYTE v45[16];
  int v46;
  __int16 v47;
  _BYTE v48[17];

  do
    v6 = __ldaxr(a1);
  while (__stlxr(v6 + 1, a1));
  v37 = a1;
  *(_QWORD *)&v38 = a2;
  *((_QWORD *)&v38 + 1) = a3;
  v7 = *a4;
  v8 = *(_OWORD *)(a4 + 1);
  v35 = *(_OWORD *)(a4 + 3);
  v36 = v8;
  v33 = *(_OWORD *)(a4 + 5);
  v34 = *((_BYTE *)a4 + 56);
  v9 = a4[8];
  v10 = a4[9];
  v11 = *((_BYTE *)a4 + 80);
  v12 = a4[11];
  v13 = *((_BYTE *)a4 + 96);
  WebCore::IDBIndexInfo::isolatedCopy(a5, (uint64_t)&v28);
  *(_QWORD *)v39 = v7;
  *(_OWORD *)&v39[8] = v36;
  *(_OWORD *)&v39[24] = v35;
  *(_OWORD *)&v39[40] = v33;
  v39[56] = v34;
  *(_QWORD *)&v40 = v9;
  *((_QWORD *)&v40 + 1) = v10;
  LOBYTE(v41) = v11;
  *((_QWORD *)&v41 + 1) = v12;
  LOBYTE(v42) = v13;
  v43 = v28;
  v14 = v29;
  v29 = 0;
  v44 = v14;
  v45[0] = 0;
  v46 = -1;
  v15 = v31;
  if (v31 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E33598A8[v31])(v48, v45, v30);
    v46 = v15;
  }
  v47 = v32;
  v16 = WTF::fastMalloc((WTF *)0xC0);
  *(_QWORD *)v16 = off_1E3359B38;
  *(_QWORD *)(v16 + 8) = v37;
  *(_OWORD *)(v16 + 16) = v38;
  v17 = v42;
  v18 = *(_OWORD *)&v39[48];
  v19 = v41;
  *(_OWORD *)(v16 + 96) = v40;
  *(_OWORD *)(v16 + 112) = v19;
  *(_OWORD *)(v16 + 80) = v18;
  *(_QWORD *)(v16 + 128) = v17;
  v20 = *(_OWORD *)v39;
  v21 = *(_OWORD *)&v39[32];
  *(_OWORD *)(v16 + 48) = *(_OWORD *)&v39[16];
  *(_OWORD *)(v16 + 64) = v21;
  *(_OWORD *)(v16 + 32) = v20;
  *(_OWORD *)(v16 + 136) = v43;
  v22 = v44;
  v37 = 0;
  v44 = 0;
  *(_QWORD *)(v16 + 152) = v22;
  *(_BYTE *)(v16 + 160) = 0;
  v23 = (WTF::StringImpl *)(v16 + 160);
  *(_DWORD *)(v16 + 176) = -1;
  v24 = v46;
  if (v46 != -1)
  {
    ((void (*)(_BYTE *, WTF::StringImpl *, _BYTE *))off_1E33598A8[v46])(v48, v23, v45);
    *(_DWORD *)(v16 + 176) = v24;
  }
  *(_WORD *)(v16 + 184) = v47;
  *a6 = v16;
  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&,WebCore::IDBRequestData,WebCore::IDBIndexInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&),WebCore::IDBRequestData,WebCore::IDBIndexInfo const&)::{lambda(void)#1}::~CrossThreadTask((uint64_t *)&v37, v23);
  if (v31 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E3359898[v31])(v48, v30);
  v31 = -1;
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&,WebCore::IDBRequestData,WebCore::IDBIndexInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&),WebCore::IDBRequestData,WebCore::IDBIndexInfo const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3359B38;
  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&,WebCore::IDBRequestData,WebCore::IDBIndexInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&),WebCore::IDBRequestData,WebCore::IDBIndexInfo const&)::{lambda(void)#1}::~CrossThreadTask(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&,WebCore::IDBRequestData,WebCore::IDBIndexInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&),WebCore::IDBRequestData,WebCore::IDBIndexInfo const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E3359B38;
  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&,WebCore::IDBRequestData,WebCore::IDBIndexInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&),WebCore::IDBRequestData,WebCore::IDBIndexInfo const&)::{lambda(void)#1}::~CrossThreadTask(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&,WebCore::IDBRequestData,WebCore::IDBIndexInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&),WebCore::IDBRequestData,WebCore::IDBIndexInfo const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4, a1 + 17);
}

uint64_t *WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&,WebCore::IDBRequestData,WebCore::IDBIndexInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&),WebCore::IDBRequestData,WebCore::IDBIndexInfo const&)::{lambda(void)#1}::~CrossThreadTask(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;

  v3 = *((unsigned int *)a1 + 42);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t *))off_1E3359898[v3])(&v15, a1 + 19);
  *((_DWORD *)a1 + 42) = -1;
  v4 = (WTF::StringImpl *)a1[18];
  a1[18] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *a1;
  *a1 = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return a1;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode),WebCore::IDBRequestData const&,WebCore::IDBKeyData&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, unsigned int **a6, char *a7)
{
  unsigned __int8 *v8;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WebCore::IDBRequestData,WebCore::IDBKeyData,WebCore::IDBValue,WebCore::IndexedDB::ObjectStoreOverwriteMode>(a2, *a3, a3[1], a4, a5, a6, a7, &v14);
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v14);
  v8 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_5;
  }
  if (__stxr(1u, v8))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E3359ED0;
    v10[1] = a1;
    v15 = v10;
    WTF::callOnMainThread();
    v11 = v15;
    v15 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  v12 = __ldxr(v8);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v8))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WebCore::IDBRequestData,WebCore::IDBKeyData,WebCore::IDBValue,WebCore::IndexedDB::ObjectStoreOverwriteMode>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, unsigned int **a6@<X5>, char *a7@<X6>, uint64_t *a8@<X8>)
{
  bmalloc::api *v8;
  uint64_t (**v9)();
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  bmalloc::api *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  WebCore::IDBClient::IDBConnectionProxy *v42;
  bmalloc::api *v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  _BYTE *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE v54[16];
  unsigned int v55;
  __int128 v56;
  char v57;
  __int128 v58;
  __int128 v59;
  bmalloc::api *v60;
  __int128 v61;
  _BYTE v62[64];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  _BYTE v67[16];
  int v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _BYTE v74[17];

  do
    v12 = __ldaxr(a1);
  while (__stlxr(v12 + 1, a1));
  v60 = (bmalloc::api *)a1;
  *(_QWORD *)&v61 = a2;
  *((_QWORD *)&v61 + 1) = a3;
  v13 = *a4;
  v14 = *(_OWORD *)(a4 + 1);
  v58 = *(_OWORD *)(a4 + 3);
  v59 = v14;
  v56 = *(_OWORD *)(a4 + 5);
  v57 = *((_BYTE *)a4 + 56);
  v15 = *(unsigned int *)(a5 + 24);
  if ((_DWORD)v15 == -1)
  {
    v45 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    atomic_store(1u, v45);
    WTF::fastFree((WTF *)v45, v39);
LABEL_23:
    bmalloc::api::isoDeallocate(v8, v39);
    goto LABEL_15;
  }
  v16 = a4[8];
  v17 = a4[9];
  v18 = *((_BYTE *)a4 + 80);
  v19 = a4[11];
  v20 = *((_BYTE *)a4 + 96);
  v53 = v74;
  ((void (*)(__int128 *__return_ptr, _BYTE **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v15])(&v50, &v53, a5 + 8);
  LOBYTE(v53) = 0;
  v49 = v54;
  v54[0] = 0;
  v55 = -1;
  v21 = v51;
  if ((_DWORD)v51 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v51])(v74, v54, &v50);
    v55 = v21;
    if ((_DWORD)v51 != -1)
      ((void (*)(_BYTE *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v51])(v74, &v50);
  }
  v52 = 0;
  v50 = 0u;
  v51 = 0u;
  WebCore::IDBValue::setAsIsolatedCopy((WebCore::IDBValue *)&v50, a6);
  v22 = *a7;
  *(_QWORD *)v62 = v13;
  *(_OWORD *)&v62[8] = v59;
  *(_OWORD *)&v62[24] = v58;
  *(_OWORD *)&v62[40] = v56;
  v62[56] = v57;
  *(_QWORD *)&v63 = v16;
  *((_QWORD *)&v63 + 1) = v17;
  LOBYTE(v64) = v18;
  *((_QWORD *)&v64 + 1) = v19;
  LOBYTE(v65) = v20;
  v66 = (char)v53;
  v67[0] = 0;
  v68 = -1;
  v23 = v55;
  if (v55 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E3359900[v55])(v74, v67, v54);
    v68 = v23;
  }
  v24 = v50;
  v50 = 0uLL;
  v69 = v24;
  v25 = *((_QWORD *)&v51 + 1);
  v70 = v51;
  v51 = 0uLL;
  v71 = v25;
  *(_QWORD *)&v24 = v52;
  v52 = 0;
  v72 = v24;
  v73 = v22;
  v26 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v26 = off_1E3359B60;
  v27 = v60;
  v60 = 0;
  *(_QWORD *)(v26 + 8) = v27;
  *(_OWORD *)(v26 + 16) = v61;
  v28 = v65;
  v29 = *(_OWORD *)&v62[48];
  v30 = v64;
  *(_OWORD *)(v26 + 96) = v63;
  *(_OWORD *)(v26 + 112) = v30;
  *(_OWORD *)(v26 + 80) = v29;
  *(_QWORD *)(v26 + 128) = v28;
  v31 = *(_OWORD *)v62;
  v32 = *(_OWORD *)&v62[32];
  *(_OWORD *)(v26 + 48) = *(_OWORD *)&v62[16];
  *(_OWORD *)(v26 + 64) = v32;
  *(_OWORD *)(v26 + 32) = v31;
  *(_BYTE *)(v26 + 136) = v66;
  *(_BYTE *)(v26 + 144) = 0;
  v33 = (WTF::StringImpl *)(v26 + 144);
  *(_DWORD *)(v26 + 160) = -1;
  v34 = v68;
  if (v68 != -1)
  {
    ((void (*)(_BYTE *, WTF::StringImpl *, _BYTE *))off_1E3359900[v68])(v74, v33, v67);
    *(_DWORD *)(v26 + 160) = v34;
  }
  *(_QWORD *)(v26 + 168) = v69;
  v35 = *((_QWORD *)&v69 + 1);
  v69 = 0uLL;
  *(_QWORD *)(v26 + 176) = v35;
  v36 = v70;
  v70 = 0;
  *(_QWORD *)(v26 + 184) = v36;
  v37 = v71;
  v71 = 0;
  *(_QWORD *)(v26 + 192) = v37;
  v38 = v72;
  v72 = 0;
  *(_QWORD *)(v26 + 200) = v38;
  *(_BYTE *)(v26 + 208) = v73;
  *a8 = v26;
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v69, v33);
  v9 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2;
  if (v68 != -1)
    ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v68])(v74, v67);
  v68 = -1;
  v8 = v60;
  v60 = 0;
  if (v8)
  {
    do
    {
      v40 = __ldaxr((unsigned int *)v8);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, (unsigned int *)v8));
    if (!v41)
    {
      atomic_store(1u, (unsigned int *)v8);
      v42 = (WebCore::IDBClient::IDBConnectionProxy *)*((_QWORD *)v8 + 3);
      *((_QWORD *)v8 + 3) = 0;
      if (v42)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v42, v39);
        bmalloc::api::isoDeallocate(v43, v44);
      }
      v45 = (unsigned int *)*((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (!v45)
        goto LABEL_23;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_23;
      goto LABEL_25;
    }
  }
LABEL_15:
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v50, (WTF::StringImpl *)v39);
  if (v55 != -1)
    ((void (*)(__int128 *, _BYTE *))v9[v55])(&v50, v49);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WebCore::IDBRequestData,WebCore::IDBKeyData,WebCore::IDBValue,WebCore::IndexedDB::ObjectStoreOverwriteMode>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode),WebCore::IDBRequestData,WebCore::IDBKeyData,WebCore::IDBValue,WebCore::IndexedDB::ObjectStoreOverwriteMode const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;

  *(_QWORD *)a1 = off_1E3359B60;
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + 168), a2);
  v4 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v4])(&v15, a1 + 144);
  *(_DWORD *)(a1 + 160) = -1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, v3);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v3);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, v3);
    }
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;

  *(_QWORD *)a1 = off_1E3359B60;
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + 168), a2);
  v4 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v4])(&v15, a1 + 144);
  *(_DWORD *)(a1 + 160) = -1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, v3);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v3);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WebCore::IDBRequestData,WebCore::IDBKeyData,WebCore::IDBValue,WebCore::IndexedDB::ObjectStoreOverwriteMode>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode),WebCore::IDBRequestData,WebCore::IDBKeyData,WebCore::IDBValue,WebCore::IndexedDB::ObjectStoreOverwriteMode const&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(*v3 + v1);
  return v1(v3, a1 + 32, a1 + 136, a1 + 168, *(unsigned __int8 *)(a1 + 208));
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&),WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, WebCore::IDBKeyRangeData *a5)
{
  unsigned __int8 *v6;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;

  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&,WebCore::IDBRequestData,WebCore::IDBGetRecordData>(a5, a2, *a3, a3[1], a4, &v12);
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v12);
  v6 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3359ED0;
    v8[1] = a1;
    v13 = v8;
    WTF::callOnMainThread();
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v6))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&,WebCore::IDBRequestData,WebCore::IDBGetRecordData>@<X0>(WebCore::IDBKeyRangeData *this@<X4>, unsigned int *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t *a5@<X3>, uint64_t *a6@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  bmalloc::api *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  char v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  bmalloc::api *v30;
  unsigned int v31;
  unsigned int v32;
  WebCore::IDBClient::IDBConnectionProxy *v33;
  bmalloc::api *v34;
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  char v40[8];
  _BYTE v41[16];
  int v42;
  char v43;
  _BYTE v44[16];
  int v45;
  __int16 v46;
  char v47;
  __int128 v48;
  char v49;
  __int128 v50;
  __int128 v51;
  bmalloc::api *v52;
  __int128 v53;
  _BYTE v54[64];
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  _BYTE v59[16];
  int v60;
  char v61;
  _BYTE v62[16];
  unsigned int v63;
  __int16 v64;
  char v65;
  _BYTE v66[17];

  do
    v7 = __ldaxr(a2);
  while (__stlxr(v7 + 1, a2));
  v52 = (bmalloc::api *)a2;
  *(_QWORD *)&v53 = a3;
  *((_QWORD *)&v53 + 1) = a4;
  v8 = *a5;
  v9 = *(_OWORD *)(a5 + 1);
  v50 = *(_OWORD *)(a5 + 3);
  v51 = v9;
  v48 = *(_OWORD *)(a5 + 5);
  v49 = *((_BYTE *)a5 + 56);
  v10 = a5[8];
  v11 = a5[9];
  v12 = *((_BYTE *)a5 + 80);
  v13 = a5[11];
  v14 = *((_BYTE *)a5 + 96);
  WebCore::IDBKeyRangeData::isolatedCopy(this, (uint64_t)v40);
  v47 = *((_BYTE *)this + 72);
  *(_QWORD *)v54 = v8;
  *(_OWORD *)&v54[8] = v51;
  *(_OWORD *)&v54[24] = v50;
  *(_OWORD *)&v54[40] = v48;
  v54[56] = v49;
  *(_QWORD *)&v55 = v10;
  *((_QWORD *)&v55 + 1) = v11;
  LOBYTE(v56) = v12;
  *((_QWORD *)&v56 + 1) = v13;
  LOBYTE(v57) = v14;
  v58 = v40[0];
  v59[0] = 0;
  v60 = -1;
  v15 = v42;
  if (v42 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E3359900[v42])(v66, v59, v41);
    v60 = v15;
  }
  v61 = v43;
  v62[0] = 0;
  v63 = -1;
  v16 = v45;
  if (v45 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E3359900[v45])(v66, v62, v44);
    v63 = v16;
  }
  v64 = v46;
  v65 = v47;
  result = WTF::fastMalloc((WTF *)0xD8);
  v18 = result;
  *(_QWORD *)result = &off_1E3359B88;
  v19 = v52;
  v52 = 0;
  *(_QWORD *)(result + 8) = v19;
  *(_OWORD *)(result + 16) = v53;
  v20 = v57;
  v21 = *(_OWORD *)&v54[48];
  v22 = v56;
  *(_OWORD *)(result + 96) = v55;
  *(_OWORD *)(result + 112) = v22;
  *(_OWORD *)(result + 80) = v21;
  *(_QWORD *)(result + 128) = v20;
  v23 = *(_OWORD *)v54;
  v24 = *(_OWORD *)&v54[32];
  *(_OWORD *)(result + 48) = *(_OWORD *)&v54[16];
  *(_OWORD *)(result + 64) = v24;
  *(_OWORD *)(result + 32) = v23;
  *(_BYTE *)(result + 136) = v58;
  *(_BYTE *)(result + 144) = 0;
  *(_DWORD *)(result + 160) = -1;
  v25 = v60;
  if (v60 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, _BYTE *))off_1E3359900[v60])(v66, result + 144, v59);
    *(_DWORD *)(v18 + 160) = v25;
  }
  v26 = v61;
  *(_BYTE *)(v18 + 176) = 0;
  v27 = (void *)(v18 + 176);
  *(_BYTE *)(v18 + 168) = v26;
  *(_DWORD *)(v18 + 192) = -1;
  v28 = v63;
  if (v63 == -1)
  {
    *(_WORD *)(v18 + 200) = v64;
    *(_BYTE *)(v18 + 208) = v65;
    *a6 = v18;
  }
  else
  {
    result = ((uint64_t (*)(_BYTE *))off_1E3359900[v63])(v66);
    *(_DWORD *)(v18 + 192) = v28;
    v29 = v63;
    *(_WORD *)(v18 + 200) = v64;
    *(_BYTE *)(v18 + 208) = v65;
    *a6 = v18;
    if ((_DWORD)v29 != -1)
      result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v29])(v66, v62);
  }
  v63 = -1;
  if (v60 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v60])(v66, v59);
  v60 = -1;
  v30 = v52;
  v52 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)v30));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)v30);
      v33 = (WebCore::IDBClient::IDBConnectionProxy *)*((_QWORD *)v30 + 3);
      *((_QWORD *)v30 + 3) = 0;
      if (v33)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v33, v27);
        bmalloc::api::isoDeallocate(v34, v35);
      }
      v36 = (unsigned int *)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = 0;
      if (v36)
      {
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, v36);
          WTF::fastFree((WTF *)v36, v27);
        }
      }
      result = bmalloc::api::isoDeallocate(v30, v27);
    }
  }
  if (v45 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v45])(v66, v44);
  v45 = -1;
  if (v42 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v42])(v66, v41);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&,WebCore::IDBRequestData,WebCore::IDBGetRecordData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&),WebCore::IDBRequestData,WebCore::IDBGetRecordData const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;

  *(_QWORD *)a1 = &off_1E3359B88;
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v3])(&v15, a1 + 176);
  *(_DWORD *)(a1 + 192) = -1;
  v4 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v4])(&v16, a1 + 144);
  *(_DWORD *)(a1 + 160) = -1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&,WebCore::IDBRequestData,WebCore::IDBGetRecordData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&),WebCore::IDBRequestData,WebCore::IDBGetRecordData const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;

  *(_QWORD *)this = &off_1E3359B88;
  v3 = *((unsigned int *)this + 48);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v3])(&v15, (char *)this + 176);
  *((_DWORD *)this + 48) = -1;
  v4 = *((unsigned int *)this + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v4])(&v16, (char *)this + 144);
  *((_DWORD *)this + 40) = -1;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&,WebCore::IDBRequestData,WebCore::IDBGetRecordData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&),WebCore::IDBRequestData,WebCore::IDBGetRecordData const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4, a1 + 17);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&),WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, WebCore::IDBKeyRangeData *a5)
{
  unsigned __int8 *v6;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;

  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&,WebCore::IDBRequestData,WebCore::IDBGetAllRecordsData>(a5, a2, *a3, a3[1], a4, &v12);
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v12);
  v6 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3359ED0;
    v8[1] = a1;
    v13 = v8;
    WTF::callOnMainThread();
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v6))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&,WebCore::IDBRequestData,WebCore::IDBGetAllRecordsData>@<X0>(WebCore::IDBKeyRangeData *this@<X4>, unsigned int *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t *a5@<X3>, uint64_t *a6@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  bmalloc::api *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  char v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  bmalloc::api *v32;
  unsigned int v33;
  unsigned int v34;
  WebCore::IDBClient::IDBConnectionProxy *v35;
  bmalloc::api *v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  char v42[8];
  _BYTE v43[16];
  int v44;
  char v45;
  _BYTE v46[16];
  int v47;
  __int16 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  __int128 v53;
  __int128 v54;
  bmalloc::api *v55;
  __int128 v56;
  _BYTE v57[64];
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  _BYTE v62[16];
  int v63;
  char v64;
  _BYTE v65[16];
  unsigned int v66;
  __int16 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[17];

  do
    v7 = __ldaxr(a2);
  while (__stlxr(v7 + 1, a2));
  v55 = (bmalloc::api *)a2;
  *(_QWORD *)&v56 = a3;
  *((_QWORD *)&v56 + 1) = a4;
  v8 = *a5;
  v9 = *(_OWORD *)(a5 + 1);
  v53 = *(_OWORD *)(a5 + 3);
  v54 = v9;
  v51 = *(_OWORD *)(a5 + 5);
  v52 = *((_BYTE *)a5 + 56);
  v10 = a5[8];
  v11 = a5[9];
  v12 = *((_BYTE *)a5 + 80);
  v13 = a5[11];
  v14 = *((_BYTE *)a5 + 96);
  WebCore::IDBKeyRangeData::isolatedCopy(this, (uint64_t)v42);
  LOBYTE(v49) = *((_BYTE *)this + 72);
  DWORD1(v49) = *((_DWORD *)this + 19);
  BYTE8(v49) = *((_BYTE *)this + 80);
  v50 = *(_OWORD *)((char *)this + 88);
  *(_QWORD *)v57 = v8;
  *(_OWORD *)&v57[8] = v54;
  *(_OWORD *)&v57[24] = v53;
  *(_OWORD *)&v57[40] = v51;
  v57[56] = v52;
  *(_QWORD *)&v58 = v10;
  *((_QWORD *)&v58 + 1) = v11;
  LOBYTE(v59) = v12;
  *((_QWORD *)&v59 + 1) = v13;
  LOBYTE(v60) = v14;
  v61 = v42[0];
  v62[0] = 0;
  v63 = -1;
  v15 = v44;
  if (v44 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E3359900[v44])(v70, v62, v43);
    v63 = v15;
  }
  v64 = v45;
  v65[0] = 0;
  v66 = -1;
  v16 = v47;
  if (v47 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E3359900[v47])(v70, v65, v46);
    v66 = v16;
  }
  v67 = v48;
  v68 = v49;
  v69 = v50;
  result = WTF::fastMalloc((WTF *)0xF0);
  v18 = result;
  *(_QWORD *)result = &off_1E3359BB0;
  v19 = v55;
  v55 = 0;
  *(_QWORD *)(result + 8) = v19;
  *(_OWORD *)(result + 16) = v56;
  v20 = v60;
  v21 = *(_OWORD *)&v57[48];
  v22 = v59;
  *(_OWORD *)(result + 96) = v58;
  *(_OWORD *)(result + 112) = v22;
  *(_OWORD *)(result + 80) = v21;
  *(_QWORD *)(result + 128) = v20;
  v23 = *(_OWORD *)v57;
  v24 = *(_OWORD *)&v57[32];
  *(_OWORD *)(result + 48) = *(_OWORD *)&v57[16];
  *(_OWORD *)(result + 64) = v24;
  *(_OWORD *)(result + 32) = v23;
  *(_BYTE *)(result + 136) = v61;
  *(_BYTE *)(result + 144) = 0;
  *(_DWORD *)(result + 160) = -1;
  v25 = v63;
  if (v63 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, _BYTE *))off_1E3359900[v63])(v70, result + 144, v62);
    *(_DWORD *)(v18 + 160) = v25;
  }
  v26 = v64;
  *(_BYTE *)(v18 + 176) = 0;
  v27 = (void *)(v18 + 176);
  *(_BYTE *)(v18 + 168) = v26;
  *(_DWORD *)(v18 + 192) = -1;
  v28 = v66;
  if (v66 == -1)
  {
    *(_WORD *)(v18 + 200) = v67;
    v31 = v69;
    *(_OWORD *)(v18 + 208) = v68;
    *(_OWORD *)(v18 + 224) = v31;
    *a6 = v18;
  }
  else
  {
    result = ((uint64_t (*)(_BYTE *))off_1E3359900[v66])(v70);
    *(_DWORD *)(v18 + 192) = v28;
    v29 = v66;
    *(_WORD *)(v18 + 200) = v67;
    v30 = v69;
    *(_OWORD *)(v18 + 208) = v68;
    *(_OWORD *)(v18 + 224) = v30;
    *a6 = v18;
    if ((_DWORD)v29 != -1)
      result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v29])(v70, v65);
  }
  v66 = -1;
  if (v63 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v63])(v70, v62);
  v63 = -1;
  v32 = v55;
  v55 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr((unsigned int *)v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, (unsigned int *)v32));
    if (!v34)
    {
      atomic_store(1u, (unsigned int *)v32);
      v35 = (WebCore::IDBClient::IDBConnectionProxy *)*((_QWORD *)v32 + 3);
      *((_QWORD *)v32 + 3) = 0;
      if (v35)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v35, v27);
        bmalloc::api::isoDeallocate(v36, v37);
      }
      v38 = (unsigned int *)*((_QWORD *)v32 + 1);
      *((_QWORD *)v32 + 1) = 0;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((WTF *)v38, v27);
        }
      }
      result = bmalloc::api::isoDeallocate(v32, v27);
    }
  }
  if (v47 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v47])(v70, v46);
  v47 = -1;
  if (v44 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v44])(v70, v43);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&,WebCore::IDBRequestData,WebCore::IDBGetAllRecordsData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&),WebCore::IDBRequestData,WebCore::IDBGetAllRecordsData const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;

  *(_QWORD *)a1 = &off_1E3359BB0;
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v3])(&v15, a1 + 176);
  *(_DWORD *)(a1 + 192) = -1;
  v4 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v4])(&v16, a1 + 144);
  *(_DWORD *)(a1 + 160) = -1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&,WebCore::IDBRequestData,WebCore::IDBGetAllRecordsData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&),WebCore::IDBRequestData,WebCore::IDBGetAllRecordsData const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;

  *(_QWORD *)this = &off_1E3359BB0;
  v3 = *((unsigned int *)this + 48);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v3])(&v15, (char *)this + 176);
  *((_DWORD *)this + 48) = -1;
  v4 = *((unsigned int *)this + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v4])(&v16, (char *)this + 144);
  *((_DWORD *)this + 40) = -1;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&,WebCore::IDBRequestData,WebCore::IDBGetAllRecordsData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&),WebCore::IDBRequestData,WebCore::IDBGetAllRecordsData const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4, a1 + 17);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&),WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, WebCore::IDBKeyRangeData *a5)
{
  unsigned __int8 *v6;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;

  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&,WebCore::IDBRequestData,WebCore::IDBKeyRangeData>(a5, a2, *a3, a3[1], a4, &v12);
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v12);
  v6 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3359ED0;
    v8[1] = a1;
    v13 = v8;
    WTF::callOnMainThread();
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v6))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&,WebCore::IDBRequestData,WebCore::IDBKeyRangeData>@<X0>(WebCore::IDBKeyRangeData *this@<X4>, unsigned int *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t *a5@<X3>, uint64_t *a6@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  bmalloc::api *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  char v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  bmalloc::api *v30;
  unsigned int v31;
  unsigned int v32;
  WebCore::IDBClient::IDBConnectionProxy *v33;
  bmalloc::api *v34;
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  char v39[8];
  _BYTE v40[16];
  int v41;
  char v42;
  _BYTE v43[16];
  int v44;
  __int16 v45;
  __int128 v46;
  char v47;
  __int128 v48;
  __int128 v49;
  bmalloc::api *v50;
  __int128 v51;
  _BYTE v52[64];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  _BYTE v57[16];
  int v58;
  char v59;
  _BYTE v60[16];
  unsigned int v61;
  __int16 v62;
  _BYTE v63[17];

  do
    v7 = __ldaxr(a2);
  while (__stlxr(v7 + 1, a2));
  v50 = (bmalloc::api *)a2;
  *(_QWORD *)&v51 = a3;
  *((_QWORD *)&v51 + 1) = a4;
  v8 = *a5;
  v9 = *(_OWORD *)(a5 + 1);
  v48 = *(_OWORD *)(a5 + 3);
  v49 = v9;
  v46 = *(_OWORD *)(a5 + 5);
  v47 = *((_BYTE *)a5 + 56);
  v10 = a5[8];
  v11 = a5[9];
  v12 = *((_BYTE *)a5 + 80);
  v13 = a5[11];
  v14 = *((_BYTE *)a5 + 96);
  WebCore::IDBKeyRangeData::isolatedCopy(this, (uint64_t)v39);
  *(_QWORD *)v52 = v8;
  *(_OWORD *)&v52[8] = v49;
  *(_OWORD *)&v52[24] = v48;
  *(_OWORD *)&v52[40] = v46;
  v52[56] = v47;
  *(_QWORD *)&v53 = v10;
  *((_QWORD *)&v53 + 1) = v11;
  LOBYTE(v54) = v12;
  *((_QWORD *)&v54 + 1) = v13;
  LOBYTE(v55) = v14;
  v56 = v39[0];
  v57[0] = 0;
  v58 = -1;
  v15 = v41;
  if (v41 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E3359900[v41])(v63, v57, v40);
    v58 = v15;
  }
  v59 = v42;
  v60[0] = 0;
  v61 = -1;
  v16 = v44;
  if (v44 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E3359900[v44])(v63, v60, v43);
    v61 = v16;
  }
  v62 = v45;
  result = WTF::fastMalloc((WTF *)0xD0);
  v18 = result;
  *(_QWORD *)result = &off_1E3359BD8;
  v19 = v50;
  v50 = 0;
  *(_QWORD *)(result + 8) = v19;
  *(_OWORD *)(result + 16) = v51;
  v20 = v55;
  v21 = *(_OWORD *)&v52[48];
  v22 = v54;
  *(_OWORD *)(result + 96) = v53;
  *(_OWORD *)(result + 112) = v22;
  *(_OWORD *)(result + 80) = v21;
  *(_QWORD *)(result + 128) = v20;
  v23 = *(_OWORD *)v52;
  v24 = *(_OWORD *)&v52[32];
  *(_OWORD *)(result + 48) = *(_OWORD *)&v52[16];
  *(_OWORD *)(result + 64) = v24;
  *(_OWORD *)(result + 32) = v23;
  *(_BYTE *)(result + 136) = v56;
  *(_BYTE *)(result + 144) = 0;
  *(_DWORD *)(result + 160) = -1;
  v25 = v58;
  if (v58 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, _BYTE *))off_1E3359900[v58])(v63, result + 144, v57);
    *(_DWORD *)(v18 + 160) = v25;
  }
  v26 = v59;
  *(_BYTE *)(v18 + 176) = 0;
  v27 = (void *)(v18 + 176);
  *(_BYTE *)(v18 + 168) = v26;
  *(_DWORD *)(v18 + 192) = -1;
  v28 = v61;
  if (v61 == -1)
  {
    *(_WORD *)(v18 + 200) = v62;
    *a6 = v18;
  }
  else
  {
    result = ((uint64_t (*)(_BYTE *))off_1E3359900[v61])(v63);
    *(_DWORD *)(v18 + 192) = v28;
    v29 = v61;
    *(_WORD *)(v18 + 200) = v62;
    *a6 = v18;
    if ((_DWORD)v29 != -1)
      result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v29])(v63, v60);
  }
  v61 = -1;
  if (v58 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v58])(v63, v57);
  v58 = -1;
  v30 = v50;
  v50 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)v30));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)v30);
      v33 = (WebCore::IDBClient::IDBConnectionProxy *)*((_QWORD *)v30 + 3);
      *((_QWORD *)v30 + 3) = 0;
      if (v33)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v33, v27);
        bmalloc::api::isoDeallocate(v34, v35);
      }
      v36 = (unsigned int *)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = 0;
      if (v36)
      {
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, v36);
          WTF::fastFree((WTF *)v36, v27);
        }
      }
      result = bmalloc::api::isoDeallocate(v30, v27);
    }
  }
  if (v44 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v44])(v63, v43);
  v44 = -1;
  if (v41 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v41])(v63, v40);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&,WebCore::IDBRequestData,WebCore::IDBKeyRangeData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&),WebCore::IDBRequestData,WebCore::IDBKeyRangeData const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;

  *(_QWORD *)a1 = &off_1E3359BD8;
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v3])(&v15, a1 + 176);
  *(_DWORD *)(a1 + 192) = -1;
  v4 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v4])(&v16, a1 + 144);
  *(_DWORD *)(a1 + 160) = -1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&,WebCore::IDBRequestData,WebCore::IDBKeyRangeData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&),WebCore::IDBRequestData,WebCore::IDBKeyRangeData const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;

  *(_QWORD *)this = &off_1E3359BD8;
  v3 = *((unsigned int *)this + 48);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v3])(&v15, (char *)this + 176);
  *((_DWORD *)this + 48) = -1;
  v4 = *((unsigned int *)this + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v4])(&v16, (char *)this + 144);
  *((_DWORD *)this + 40) = -1;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&,WebCore::IDBRequestData,WebCore::IDBKeyRangeData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&),WebCore::IDBRequestData,WebCore::IDBKeyRangeData const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4, a1 + 17);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&),WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, WebCore::IDBCursorInfo *a5)
{
  unsigned __int8 *v6;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;

  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&,WebCore::IDBRequestData,WebCore::IDBCursorInfo>(a5, a2, *a3, a3[1], a4, &v12);
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v12);
  v6 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3359ED0;
    v8[1] = a1;
    v13 = v8;
    WTF::callOnMainThread();
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v6))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&,WebCore::IDBRequestData,WebCore::IDBCursorInfo>@<X0>(WebCore::IDBCursorInfo *this@<X4>, unsigned int *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t *a5@<X3>, uint64_t *a6@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  bmalloc::api *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  char v28;
  void *v29;
  unsigned int v30;
  uint64_t v31;
  bmalloc::api *v32;
  unsigned int v33;
  unsigned int v34;
  WebCore::IDBClient::IDBConnectionProxy *v35;
  bmalloc::api *v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  _OWORD v41[3];
  char v42;
  _BYTE v43[16];
  int v44;
  char v45;
  _BYTE v46[16];
  int v47;
  __int16 v48;
  __int16 v49;
  char v50;
  __int128 v51;
  char v52;
  __int128 v53;
  __int128 v54;
  bmalloc::api *v55;
  __int128 v56;
  _BYTE v57[64];
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64;
  _BYTE v65[16];
  int v66;
  char v67;
  _BYTE v68[16];
  unsigned int v69;
  __int16 v70;
  __int16 v71;
  char v72;
  _BYTE v73[17];

  do
    v7 = __ldaxr(a2);
  while (__stlxr(v7 + 1, a2));
  v55 = (bmalloc::api *)a2;
  *(_QWORD *)&v56 = a3;
  *((_QWORD *)&v56 + 1) = a4;
  v8 = *a5;
  v9 = *(_OWORD *)(a5 + 1);
  v53 = *(_OWORD *)(a5 + 3);
  v54 = v9;
  v51 = *(_OWORD *)(a5 + 5);
  v52 = *((_BYTE *)a5 + 56);
  v10 = a5[8];
  v11 = a5[9];
  v12 = *((_BYTE *)a5 + 80);
  v13 = a5[11];
  v14 = *((_BYTE *)a5 + 96);
  WebCore::IDBCursorInfo::isolatedCopy(this, (uint64_t)v41);
  *(_QWORD *)v57 = v8;
  *(_OWORD *)&v57[8] = v54;
  *(_OWORD *)&v57[24] = v53;
  *(_OWORD *)&v57[40] = v51;
  v57[56] = v52;
  *(_QWORD *)&v58 = v10;
  *((_QWORD *)&v58 + 1) = v11;
  LOBYTE(v59) = v12;
  *((_QWORD *)&v59 + 1) = v13;
  LOBYTE(v60) = v14;
  v62 = v41[1];
  v63 = v41[2];
  v61 = v41[0];
  v64 = v42;
  v65[0] = 0;
  v66 = -1;
  v15 = v44;
  if (v44 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E3359900[v44])(v73, v65, v43);
    v66 = v15;
  }
  v67 = v45;
  v68[0] = 0;
  v69 = -1;
  v16 = v47;
  if (v47 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E3359900[v47])(v73, v68, v46);
    v69 = v16;
  }
  v70 = v48;
  v71 = v49;
  v72 = v50;
  result = WTF::fastMalloc((WTF *)0x108);
  v18 = result;
  *(_QWORD *)result = &off_1E3359C00;
  v19 = v55;
  v55 = 0;
  *(_QWORD *)(result + 8) = v19;
  *(_OWORD *)(result + 16) = v56;
  v20 = v60;
  v21 = *(_OWORD *)&v57[48];
  v22 = v59;
  *(_OWORD *)(result + 96) = v58;
  *(_OWORD *)(result + 112) = v22;
  *(_OWORD *)(result + 80) = v21;
  *(_QWORD *)(result + 128) = v20;
  v23 = *(_OWORD *)v57;
  v24 = *(_OWORD *)&v57[32];
  *(_OWORD *)(result + 48) = *(_OWORD *)&v57[16];
  *(_OWORD *)(result + 64) = v24;
  *(_OWORD *)(result + 32) = v23;
  v26 = v62;
  v25 = v63;
  *(_OWORD *)(result + 136) = v61;
  *(_OWORD *)(result + 152) = v26;
  *(_OWORD *)(result + 168) = v25;
  *(_BYTE *)(result + 184) = v64;
  *(_BYTE *)(result + 192) = 0;
  *(_DWORD *)(result + 208) = -1;
  v27 = v66;
  if (v66 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, _BYTE *))off_1E3359900[v66])(v73, result + 192, v65);
    *(_DWORD *)(v18 + 208) = v27;
  }
  v28 = v67;
  *(_BYTE *)(v18 + 224) = 0;
  v29 = (void *)(v18 + 224);
  *(_BYTE *)(v18 + 216) = v28;
  *(_DWORD *)(v18 + 240) = -1;
  v30 = v69;
  if (v69 == -1)
  {
    *(_WORD *)(v18 + 248) = v70;
    *(_WORD *)(v18 + 256) = v71;
    *(_BYTE *)(v18 + 258) = v72;
    *a6 = v18;
  }
  else
  {
    result = ((uint64_t (*)(_BYTE *))off_1E3359900[v69])(v73);
    *(_DWORD *)(v18 + 240) = v30;
    v31 = v69;
    *(_WORD *)(v18 + 248) = v70;
    *(_WORD *)(v18 + 256) = v71;
    *(_BYTE *)(v18 + 258) = v72;
    *a6 = v18;
    if ((_DWORD)v31 != -1)
      result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v31])(v73, v68);
  }
  v69 = -1;
  if (v66 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v66])(v73, v65);
  v66 = -1;
  v32 = v55;
  v55 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr((unsigned int *)v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, (unsigned int *)v32));
    if (!v34)
    {
      atomic_store(1u, (unsigned int *)v32);
      v35 = (WebCore::IDBClient::IDBConnectionProxy *)*((_QWORD *)v32 + 3);
      *((_QWORD *)v32 + 3) = 0;
      if (v35)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v35, v29);
        bmalloc::api::isoDeallocate(v36, v37);
      }
      v38 = (unsigned int *)*((_QWORD *)v32 + 1);
      *((_QWORD *)v32 + 1) = 0;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((WTF *)v38, v29);
        }
      }
      result = bmalloc::api::isoDeallocate(v32, v29);
    }
  }
  if (v47 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v47])(v73, v46);
  v47 = -1;
  if (v44 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v44])(v73, v43);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&,WebCore::IDBRequestData,WebCore::IDBCursorInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&),WebCore::IDBRequestData,WebCore::IDBCursorInfo const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;

  *(_QWORD *)a1 = &off_1E3359C00;
  v3 = *(unsigned int *)(a1 + 240);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v3])(&v15, a1 + 224);
  *(_DWORD *)(a1 + 240) = -1;
  v4 = *(unsigned int *)(a1 + 208);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v4])(&v16, a1 + 192);
  *(_DWORD *)(a1 + 208) = -1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&,WebCore::IDBRequestData,WebCore::IDBCursorInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&),WebCore::IDBRequestData,WebCore::IDBCursorInfo const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;

  *(_QWORD *)this = &off_1E3359C00;
  v3 = *((unsigned int *)this + 60);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v3])(&v15, (char *)this + 224);
  *((_DWORD *)this + 60) = -1;
  v4 = *((unsigned int *)this + 52);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v4])(&v16, (char *)this + 192);
  *((_DWORD *)this + 52) = -1;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&,WebCore::IDBRequestData,WebCore::IDBCursorInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&),WebCore::IDBRequestData,WebCore::IDBCursorInfo const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4, a1 + 17);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&),WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, WebCore::IDBIterateCursorData *a5)
{
  unsigned __int8 *v6;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;

  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&,WebCore::IDBRequestData,WebCore::IDBIterateCursorData>(a5, a2, *a3, a3[1], a4, &v12);
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v12);
  v6 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3359ED0;
    v8[1] = a1;
    v13 = v8;
    WTF::callOnMainThread();
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v6))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&,WebCore::IDBRequestData,WebCore::IDBIterateCursorData>@<X0>(WebCore::IDBIterateCursorData *this@<X4>, unsigned int *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t *a5@<X3>, uint64_t *a6@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  bmalloc::api *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  char v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  bmalloc::api *v30;
  unsigned int v31;
  unsigned int v32;
  WebCore::IDBClient::IDBConnectionProxy *v33;
  bmalloc::api *v34;
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  char v39[8];
  _BYTE v40[16];
  int v41;
  char v42;
  _BYTE v43[16];
  int v44;
  int v45;
  char v46;
  __int128 v47;
  char v48;
  __int128 v49;
  __int128 v50;
  bmalloc::api *v51;
  __int128 v52;
  _BYTE v53[64];
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  _BYTE v58[16];
  int v59;
  char v60;
  _BYTE v61[16];
  unsigned int v62;
  int v63;
  char v64;
  _BYTE v65[17];

  do
    v7 = __ldaxr(a2);
  while (__stlxr(v7 + 1, a2));
  v51 = (bmalloc::api *)a2;
  *(_QWORD *)&v52 = a3;
  *((_QWORD *)&v52 + 1) = a4;
  v8 = *a5;
  v9 = *(_OWORD *)(a5 + 1);
  v49 = *(_OWORD *)(a5 + 3);
  v50 = v9;
  v47 = *(_OWORD *)(a5 + 5);
  v48 = *((_BYTE *)a5 + 56);
  v10 = a5[8];
  v11 = a5[9];
  v12 = *((_BYTE *)a5 + 80);
  v13 = a5[11];
  v14 = *((_BYTE *)a5 + 96);
  WebCore::IDBIterateCursorData::isolatedCopy(this, (uint64_t)v39);
  *(_QWORD *)v53 = v8;
  *(_OWORD *)&v53[8] = v50;
  *(_OWORD *)&v53[24] = v49;
  *(_OWORD *)&v53[40] = v47;
  v53[56] = v48;
  *(_QWORD *)&v54 = v10;
  *((_QWORD *)&v54 + 1) = v11;
  LOBYTE(v55) = v12;
  *((_QWORD *)&v55 + 1) = v13;
  LOBYTE(v56) = v14;
  v57 = v39[0];
  v58[0] = 0;
  v59 = -1;
  v15 = v41;
  if (v41 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E3359900[v41])(v65, v58, v40);
    v59 = v15;
  }
  v60 = v42;
  v61[0] = 0;
  v62 = -1;
  v16 = v44;
  if (v44 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E3359900[v44])(v65, v61, v43);
    v62 = v16;
  }
  v63 = v45;
  v64 = v46;
  result = WTF::fastMalloc((WTF *)0xD0);
  v18 = result;
  *(_QWORD *)result = &off_1E3359C28;
  v19 = v51;
  v51 = 0;
  *(_QWORD *)(result + 8) = v19;
  *(_OWORD *)(result + 16) = v52;
  v20 = v56;
  v21 = *(_OWORD *)&v53[48];
  v22 = v55;
  *(_OWORD *)(result + 96) = v54;
  *(_OWORD *)(result + 112) = v22;
  *(_OWORD *)(result + 80) = v21;
  *(_QWORD *)(result + 128) = v20;
  v23 = *(_OWORD *)v53;
  v24 = *(_OWORD *)&v53[32];
  *(_OWORD *)(result + 48) = *(_OWORD *)&v53[16];
  *(_OWORD *)(result + 64) = v24;
  *(_OWORD *)(result + 32) = v23;
  *(_BYTE *)(result + 136) = v57;
  *(_BYTE *)(result + 144) = 0;
  *(_DWORD *)(result + 160) = -1;
  v25 = v59;
  if (v59 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, _BYTE *))off_1E3359900[v59])(v65, result + 144, v58);
    *(_DWORD *)(v18 + 160) = v25;
  }
  v26 = v60;
  *(_BYTE *)(v18 + 176) = 0;
  v27 = (void *)(v18 + 176);
  *(_BYTE *)(v18 + 168) = v26;
  *(_DWORD *)(v18 + 192) = -1;
  v28 = v62;
  if (v62 == -1)
  {
    *(_DWORD *)(v18 + 200) = v63;
    *(_BYTE *)(v18 + 204) = v64;
    *a6 = v18;
  }
  else
  {
    result = ((uint64_t (*)(_BYTE *))off_1E3359900[v62])(v65);
    *(_DWORD *)(v18 + 192) = v28;
    v29 = v62;
    *(_DWORD *)(v18 + 200) = v63;
    *(_BYTE *)(v18 + 204) = v64;
    *a6 = v18;
    if ((_DWORD)v29 != -1)
      result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v29])(v65, v61);
  }
  v62 = -1;
  if (v59 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v59])(v65, v58);
  v59 = -1;
  v30 = v51;
  v51 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)v30));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)v30);
      v33 = (WebCore::IDBClient::IDBConnectionProxy *)*((_QWORD *)v30 + 3);
      *((_QWORD *)v30 + 3) = 0;
      if (v33)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v33, v27);
        bmalloc::api::isoDeallocate(v34, v35);
      }
      v36 = (unsigned int *)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = 0;
      if (v36)
      {
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, v36);
          WTF::fastFree((WTF *)v36, v27);
        }
      }
      result = bmalloc::api::isoDeallocate(v30, v27);
    }
  }
  if (v44 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v44])(v65, v43);
  v44 = -1;
  if (v41 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v41])(v65, v40);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&,WebCore::IDBRequestData,WebCore::IDBIterateCursorData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&),WebCore::IDBRequestData,WebCore::IDBIterateCursorData const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;

  *(_QWORD *)a1 = &off_1E3359C28;
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v3])(&v15, a1 + 176);
  *(_DWORD *)(a1 + 192) = -1;
  v4 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v4])(&v16, a1 + 144);
  *(_DWORD *)(a1 + 160) = -1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&,WebCore::IDBRequestData,WebCore::IDBIterateCursorData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&),WebCore::IDBRequestData,WebCore::IDBIterateCursorData const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;

  *(_QWORD *)this = &off_1E3359C28;
  v3 = *((unsigned int *)this + 48);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v3])(&v15, (char *)this + 176);
  *((_DWORD *)this + 48) = -1;
  v4 = *((unsigned int *)this + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v4])(&v16, (char *)this + 144);
  *((_DWORD *)this + 40) = -1;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&,WebCore::IDBRequestData,WebCore::IDBIterateCursorData>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&),WebCore::IDBRequestData,WebCore::IDBIterateCursorData const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4, a1 + 17);
}

unsigned int *WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBClient::TransactionOperation*>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *result;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a2[1];
  v12 = (*a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a2 - 1640531527) << 16) ^ ((unsigned __int16)*a2
                                                                                             - 1640531527);
  v13 = v12 + (unsigned __int16)WORD2(*a2) + (v12 >> 11);
  v14 = (*a2 >> 37) & 0x7FFF800 ^ (v13 << 16) ^ v13;
  v15 = (v11 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v11 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v11 + (v14 >> 11));
  v16 = (v11 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v11) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v11) + (v15 >> 11));
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v10;
  v21 = (unsigned int *)(v8 + 24 * (v19 & v10));
  v22 = *(_QWORD *)v21;
  v23 = *((_QWORD *)v21 + 1);
  if (*(_OWORD *)v21 != 0)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v22 == -1)
      {
        v24 = v21;
      }
      else if (v22 == *a2 && v23 == v11)
      {
        if ((v9 & 1) != 0)
          v40 = 0;
        else
          v40 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a4 = v21;
        *(_QWORD *)(a4 + 8) = v8 + 24 * v40;
        *(_BYTE *)(a4 + 16) = 0;
        v41 = *a3;
        if (*a3)
        {
          v42 = (unsigned int *)(v41 + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
        }
        result = (unsigned int *)*((_QWORD *)v21 + 2);
        *((_QWORD *)v21 + 2) = v41;
        if (result)
        {
          v44 = result + 2;
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            atomic_store(1u, result + 2);
            return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
          }
        }
        return result;
      }
      v20 = (v20 + v25) & v10;
      v21 = (unsigned int *)(v8 + 24 * v20);
      v22 = *(_QWORD *)v21;
      v23 = *((_QWORD *)v21 + 1);
      ++v25;
    }
    while (*(_OWORD *)v21 != 0);
    if (v24)
    {
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      --*(_DWORD *)(*a1 - 16);
      v21 = v24;
    }
  }
  *(_OWORD *)v21 = *(_OWORD *)a2;
  v26 = *a3;
  if (*a3)
  {
    v27 = (unsigned int *)(v26 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  result = (unsigned int *)*((_QWORD *)v21 + 2);
  *((_QWORD *)v21 + 2) = v26;
  if (result)
  {
    v30 = result + 2;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v33 = *a1;
  if (*a1)
    v34 = *(_DWORD *)(v33 - 12) + 1;
  else
    v34 = 1;
  *(_DWORD *)(v33 - 12) = v34;
  v35 = *a1;
  if (*a1)
    v36 = *(_DWORD *)(v35 - 12);
  else
    v36 = 0;
  v37 = (*(_DWORD *)(v35 - 16) + v36);
  v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 <= 2 * v37)
      goto LABEL_31;
  }
  else if (3 * v38 <= 4 * v37)
  {
    if (!(_DWORD)v38)
    {
      v39 = 8;
LABEL_44:
      result = (unsigned int *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, v39, v21);
      v21 = result;
      v35 = *a1;
      if (*a1)
        LODWORD(v38) = *(_DWORD *)(v35 - 4);
      else
        LODWORD(v38) = 0;
      goto LABEL_46;
    }
LABEL_31:
    v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
    goto LABEL_44;
  }
LABEL_46:
  *(_QWORD *)a4 = v21;
  *(_QWORD *)(a4 + 8) = v35 + 24 * v38;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,std::optional<WebCore::IDBResourceIdentifier> const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  _QWORD *v22;

  v7 = *a3;
  v8 = a3[1];
  do
    v9 = __ldaxr(a2);
  while (__stlxr(v9 + 1, a2));
  v10 = *a4;
  v11 = *((_BYTE *)a5 + 16);
  v12 = a5[1];
  if (v11)
    v13 = *a5;
  else
    v13 = 0;
  v14 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v14 = &off_1E3359C50;
  *(_QWORD *)(v14 + 8) = a2;
  *(_QWORD *)(v14 + 16) = v7;
  *(_QWORD *)(v14 + 24) = v8;
  *(_QWORD *)(v14 + 32) = v10;
  *(_QWORD *)(v14 + 40) = v13;
  *(_QWORD *)(v14 + 48) = v12;
  *(_BYTE *)(v14 + 56) = v11;
  *(_DWORD *)(v14 + 57) = (_DWORD)v22;
  *(_DWORD *)(v14 + 60) = *(_DWORD *)((char *)&v22 + 3);
  v21 = v14;
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v21);
  v15 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_10;
  }
  if (__stxr(1u, v15))
    goto LABEL_9;
LABEL_10:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = off_1E3359ED0;
    v17[1] = a1;
    v22 = v17;
    WTF::callOnMainThread();
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  v19 = __ldxr(v15);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v15))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier>>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = a1[1];
  *a1 = &off_1E3359C50;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier>>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359C50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier>>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(*v3 + v1);
  return v1(v3, a1[4], a1 + 5);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBDatabase,WebCore::IDBError const&,WebCore::IDBError>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *a1 = &off_1E3359C78;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v4);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBDatabase,WebCore::IDBError const&,WebCore::IDBError>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *(_QWORD *)this = &off_1E3359C78;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v4);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBDatabase,WebCore::IDBError const&,WebCore::IDBError>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError&>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError&>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3359CA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError&>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError&>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359CA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError&>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError&>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBDatabase,WebCore::IDBResourceIdentifier const&,unsigned long long,WebCore::IDBResourceIdentifier,unsigned long long>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier,unsigned long long const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v7;
  void *v8;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3359CC8;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 6;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 6);
      WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBDatabase,WebCore::IDBResourceIdentifier const&,unsigned long long,WebCore::IDBResourceIdentifier,unsigned long long>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier,unsigned long long const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v8;
  void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359CC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v3);
      bmalloc::api::isoDeallocate(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBDatabase,WebCore::IDBResourceIdentifier const&,unsigned long long,WebCore::IDBResourceIdentifier,unsigned long long>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier,unsigned long long const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(*v3 + v1);
  return v1(v3, a1 + 4, a1[6]);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3359CF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359CF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &)::{lambda(WebCore::ScriptExecutionContext&)#1}>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, char *a6)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;

  v8 = *a3;
  v9 = a3[1];
  do
    v10 = __ldaxr(a2);
  while (__stlxr(v10 + 1, a2));
  v11 = *a4;
  v12 = *a5;
  v13 = a5[1];
  v14 = *a6;
  v15 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v15 = &off_1E3359D18;
  *(_QWORD *)(v15 + 8) = a2;
  *(_QWORD *)(v15 + 16) = v8;
  *(_QWORD *)(v15 + 24) = v9;
  *(_QWORD *)(v15 + 32) = v11;
  *(_QWORD *)(v15 + 40) = v12;
  *(_QWORD *)(v15 + 48) = v13;
  *(_BYTE *)(v15 + 56) = v14;
  *(_DWORD *)(v15 + 57) = (_DWORD)v23;
  *(_DWORD *)(v15 + 60) = *(_DWORD *)((char *)&v23 + 3);
  v22 = v15;
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v22);
  v16 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_7;
  }
  if (__stxr(1u, v16))
    goto LABEL_6;
LABEL_7:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E3359ED0;
    v18[1] = a1;
    v23 = v18;
    WTF::callOnMainThread();
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  v20 = __ldxr(v16);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v16))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v22;
  v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = a1[1];
  *a1 = &off_1E3359D18;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359D18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer const&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD, uint64_t, _QWORD);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, _QWORD))(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, _QWORD))(*v3 + v1);
  return v1(v3, *(_QWORD *)(a1 + 32), a1 + 40, *(unsigned __int8 *)(a1 + 56));
}

uint64_t *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (!a1)
    return 0;
  v3 = *(_DWORD *)(a1 - 8);
  v4 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                          - 1640531527);
  v5 = (a2 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(a2) + (v4 >> 11)) << 16) ^ (v4 + WORD2(a2) + (v4 >> 11));
  v6 = (a3 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)a3 + (v5 >> 11)) << 16) ^ (v5
                                                                                               + (unsigned __int16)a3
                                                                                               + (v5 >> 11));
  v7 = (a3 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(a3) + (v6 >> 11)) << 16) ^ (v6 + WORD2(a3) + (v6 >> 11));
  v8 = (v7 + (v7 >> 11)) ^ (8 * (v7 + (v7 >> 11)));
  v9 = (v8 + (v8 >> 5)) ^ (4 * (v8 + (v8 >> 5)));
  v10 = (v9 + (v9 >> 15)) ^ ((v9 + (v9 >> 15)) << 10);
  if (!v10)
    v10 = 0x800000;
  v11 = v3 & v10;
  v12 = (uint64_t *)(a1 + 24 * (v3 & v10));
  v14 = *v12;
  v13 = v12[1];
  if (*(_OWORD *)v12 == 0)
    return 0;
  v15 = 1;
  while (v14 == -1 || v14 != a2 || v13 != a3)
  {
    v11 = (v11 + v15) & v3;
    v12 = (uint64_t *)(a1 + 24 * v11);
    v14 = *v12;
    v13 = v12[1];
    ++v15;
    if (*(_OWORD *)v12 == 0)
      return 0;
  }
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBOpenDBRequest,unsigned long long,unsigned long long,unsigned long long,unsigned long long>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*)(unsigned long long,unsigned long long),unsigned long long,unsigned long long const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3359D40;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 15;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBOpenDBRequest,unsigned long long,unsigned long long,unsigned long long,unsigned long long>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*)(unsigned long long,unsigned long long),unsigned long long,unsigned long long const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359D40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 15;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBOpenDBRequest,unsigned long long,unsigned long long,unsigned long long,unsigned long long>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*)(unsigned long long,unsigned long long),unsigned long long,unsigned long long const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD, _QWORD);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v3 + v1);
  return v1(v3, a1[4], a1[5]);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(unsigned long long,unsigned long long),unsigned long long &,unsigned long long &>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(unsigned long long,unsigned long long),unsigned long long &,unsigned long long &)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(unsigned long long,unsigned long long),unsigned long long &,unsigned long long &>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(unsigned long long,unsigned long long),unsigned long long &,unsigned long long &)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3359D68;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(unsigned long long,unsigned long long),unsigned long long &,unsigned long long &>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(unsigned long long,unsigned long long),unsigned long long &,unsigned long long &)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(unsigned long long,unsigned long long),unsigned long long &,unsigned long long &>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(unsigned long long,unsigned long long),unsigned long long &,unsigned long long &)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359D68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(unsigned long long,unsigned long long),unsigned long long &,unsigned long long &>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(unsigned long long,unsigned long long),unsigned long long &,unsigned long long &)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(unsigned long long,unsigned long long),unsigned long long &,unsigned long long &>(WebCore::IDBOpenDBRequest &,void (WebCore::IDBOpenDBRequest::*&)(unsigned long long,unsigned long long),unsigned long long &,unsigned long long &)::{lambda(WebCore::ScriptExecutionContext&)#1}>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBOpenRequestData const&),WebCore::IDBOpenRequestData const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, WebCore::IDBOpenRequestData *a4)
{
  unsigned __int8 *v5;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;

  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBOpenRequestData const&,WebCore::IDBOpenRequestData>(a4, a2, *a3, a3[1], &v11);
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v11);
  v5 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_5;
  }
  if (__stxr(1u, v5))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E3359ED0;
    v7[1] = a1;
    v12 = v7;
    WTF::callOnMainThread();
    v8 = v12;
    v12 = 0;
    if (v8)
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  }
  v9 = __ldxr(v5);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,WebCore::IDBTransactionInfo const&>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t *a4, WebCore::IDBTransactionInfo *a5)
{
  unsigned __int8 *v6;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;

  WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo>(a5, a2, *(_QWORD *)a3, *(WebCore::IDBTransactionInfo **)(a3 + 8), a4, &v12);
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), &v12);
  v6 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3359ED0;
    v8[1] = a1;
    v13 = v8;
    WTF::callOnMainThread();
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v6))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo>(WebCore::IDBTransactionInfo *this@<X4>, unsigned int *a2@<X0>, uint64_t a3@<X1>, WebCore::IDBTransactionInfo *a4@<X2>, uint64_t *a5@<X3>, uint64_t *a6@<X8>)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  WTF::StringImpl *v17;
  void *v18;
  bmalloc::api *v19;
  unsigned int v20;
  unsigned int v21;
  WebCore::IDBClient::IDBConnectionProxy *v22;
  bmalloc::api *v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  _BYTE v29[24];
  __int128 v30;
  bmalloc::api *v31;
  uint64_t v32;
  WebCore::IDBTransactionInfo *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  do
    v10 = __ldaxr(a2);
  while (__stlxr(v10 + 1, a2));
  v32 = a3;
  v33 = a4;
  v11 = *a5;
  v28 = 0uLL;
  *(_WORD *)v29 = 512;
  *(_OWORD *)&v29[8] = 0u;
  v30 = 0u;
  WebCore::IDBTransactionInfo::isolatedCopy((uint64_t)this, (const WebCore::IDBTransactionInfo *)&v28, a4);
  v34 = v11;
  v35 = v28;
  v36 = *(_OWORD *)v29;
  v12 = *(_QWORD *)&v29[16];
  v13 = *((_QWORD *)&v30 + 1);
  *(_QWORD *)&v29[16] = 0;
  *((_QWORD *)&v30 + 1) = 0;
  v14 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v14 = off_1E3359D90;
  *(_QWORD *)(v14 + 8) = a2;
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  v15 = v30;
  *(_QWORD *)&v30 = 0;
  *(_QWORD *)(v14 + 32) = v11;
  v16 = v36;
  *(_OWORD *)(v14 + 40) = v35;
  *(_OWORD *)(v14 + 56) = v16;
  v31 = 0;
  v37 = 0;
  *(_QWORD *)(v14 + 72) = v12;
  v38 = 0;
  *(_QWORD *)(v14 + 80) = v15;
  v39 = 0;
  *(_QWORD *)(v14 + 88) = v13;
  *a6 = v14;
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)&v35, v17);
  v19 = v31;
  v31 = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v19));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v19);
      v22 = (WebCore::IDBClient::IDBConnectionProxy *)*((_QWORD *)v19 + 3);
      *((_QWORD *)v19 + 3) = 0;
      if (v22)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v22, v18);
        bmalloc::api::isoDeallocate(v23, v24);
      }
      v25 = (unsigned int *)*((_QWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          WTF::fastFree((WTF *)v25, v18);
        }
      }
      bmalloc::api::isoDeallocate(v19, v18);
    }
  }
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)&v28, (WTF::StringImpl *)v18);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::IDBClient::IDBConnectionProxy *v8;
  bmalloc::api *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *a1 = off_1E3359D90;
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)(a1 + 5), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WebCore::IDBClient::IDBConnectionProxy **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v8)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v8, v3);
        bmalloc::api::isoDeallocate(v9, v10);
      }
      v11 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v3);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::IDBClient::IDBConnectionProxy *v8;
  bmalloc::api *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *a1 = off_1E3359D90;
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)(a1 + 5), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WebCore::IDBClient::IDBConnectionProxy **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v8)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v8, v3);
        bmalloc::api::isoDeallocate(v9, v10);
      }
      v11 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v3);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(*v3 + v1);
  return v1(v3, a1[4], a1 + 5);
}

unsigned int *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::deleteBucket(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;
  void *v8;

  *a1 = -1;
  result = (unsigned int *)a1[2];
  a1[2] = 0;
  if (result)
  {
    v4 = result + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, a2);
      return (unsigned int *)bmalloc::api::isoDeallocate(v7, v8);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBTransaction,WebCore::IDBError const&,WebCore::IDBError>(WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *a1 = &off_1E3359DB8;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBTransaction,WebCore::IDBError const&,WebCore::IDBError>(WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *(_QWORD *)this = &off_1E3359DB8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v4, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBTransaction,WebCore::IDBError const&,WebCore::IDBError>(WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*&)(WebCore::IDBError const&),WebCore::IDBError const&>(WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*&)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*&)(WebCore::IDBError const&),WebCore::IDBError const&>(WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*&)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3359DE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*&)(WebCore::IDBError const&),WebCore::IDBError const&>(WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*&)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*&)(WebCore::IDBError const&),WebCore::IDBError const&>(WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*&)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359DE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*&)(WebCore::IDBError const&),WebCore::IDBError const&>(WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*&)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*&)(WebCore::IDBError const&),WebCore::IDBError const&>(WebCore::IDBTransaction &,void (WebCore::IDBTransaction::*&)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier const&,unsigned long long &>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t result;
  _QWORD *v20;
  _QWORD *v21;

  v7 = *a3;
  v8 = a3[1];
  do
    v9 = __ldaxr(a2);
  while (__stlxr(v9 + 1, a2));
  v10 = *a4;
  v11 = a4[1];
  v12 = *a5;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v13 = &off_1E3359E08;
  v13[1] = a2;
  v13[2] = v7;
  v13[3] = v8;
  v13[4] = v10;
  v13[5] = v11;
  v13[6] = v12;
  v20 = v13;
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), (uint64_t *)&v20);
  v14 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_7;
  }
  if (__stxr(1u, v14))
    goto LABEL_6;
LABEL_7:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E3359ED0;
    v16[1] = a1;
    v21 = v16;
    WTF::callOnMainThread();
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  v18 = __ldxr(v14);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v14))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = (uint64_t)v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBResourceIdentifier const&,unsigned long long,WebCore::IDBResourceIdentifier,unsigned long long>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier,unsigned long long const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = a1[1];
  *a1 = &off_1E3359E08;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBResourceIdentifier const&,unsigned long long,WebCore::IDBResourceIdentifier,unsigned long long>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier,unsigned long long const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359E08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBResourceIdentifier const&,unsigned long long,WebCore::IDBResourceIdentifier,unsigned long long>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBResourceIdentifier const&,unsigned long long),WebCore::IDBResourceIdentifier,unsigned long long const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(*v3 + v1);
  return v1(v3, a1 + 4, a1[6]);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WebCore::IDBResourceIdentifier const&),WebCore::IDBResourceIdentifier const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t result;
  _QWORD *v18;
  _QWORD *v19;

  v6 = *a3;
  v7 = a3[1];
  do
    v8 = __ldaxr(a2);
  while (__stlxr(v8 + 1, a2));
  v9 = *a4;
  v10 = a4[1];
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v11 = &off_1E3359E30;
  v11[1] = a2;
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = v9;
  v11[5] = v10;
  v18 = v11;
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), (uint64_t *)&v18);
  v12 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_7;
  }
  if (__stxr(1u, v12))
    goto LABEL_6;
LABEL_7:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E3359ED0;
    v14[1] = a1;
    v19 = v14;
    WTF::callOnMainThread();
    v15 = v19;
    v19 = 0;
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  }
  v16 = __ldxr(v12);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v12))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = (uint64_t)v18;
  v18 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBResourceIdentifier const&,WebCore::IDBResourceIdentifier>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBResourceIdentifier const&),WebCore::IDBResourceIdentifier const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = a1[1];
  *a1 = &off_1E3359E30;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBResourceIdentifier const&,WebCore::IDBResourceIdentifier>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBResourceIdentifier const&),WebCore::IDBResourceIdentifier const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359E30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBResourceIdentifier const&,WebCore::IDBResourceIdentifier>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBResourceIdentifier const&),WebCore::IDBResourceIdentifier const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,WebCore::IDBResourceIdentifier const&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t result;
  _QWORD *v20;
  _QWORD *v21;

  v7 = *a3;
  v8 = a3[1];
  do
    v9 = __ldaxr(a2);
  while (__stlxr(v9 + 1, a2));
  v10 = *a4;
  v11 = *a5;
  v12 = a5[1];
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v13 = &off_1E3359E58;
  v13[1] = a2;
  v13[2] = v7;
  v13[3] = v8;
  v13[4] = v10;
  v13[5] = v11;
  v13[6] = v12;
  v20 = v13;
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), (uint64_t *)&v20);
  v14 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_7;
  }
  if (__stxr(1u, v14))
    goto LABEL_6;
LABEL_7:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E3359ED0;
    v16[1] = a1;
    v21 = v16;
    WTF::callOnMainThread();
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  v18 = __ldxr(v14);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v14))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = (uint64_t)v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = a1[1];
  *a1 = &off_1E3359E58;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359E58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(*v3 + v1);
  return v1(v3, a1[4], a1 + 5);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t result;
  _QWORD *v17;
  _QWORD *v18;

  v6 = *a3;
  v7 = a3[1];
  do
    v8 = __ldaxr(a2);
  while (__stlxr(v8 + 1, a2));
  v9 = *a4;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v10 = &off_1E3359E80;
  v10[1] = a2;
  v10[2] = v6;
  v10[3] = v7;
  v10[4] = v9;
  v17 = v10;
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append((unsigned __int8 *)(a1 + 80), (uint64_t *)&v17);
  v11 = (unsigned __int8 *)(a1 + 21);
  if (__ldaxr((unsigned __int8 *)(a1 + 21)))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](a1 + 21);
    goto LABEL_7;
  }
  if (__stxr(1u, v11))
    goto LABEL_6;
LABEL_7:
  if (!*(_QWORD *)(a1 + 128))
  {
    WTF::RefPtr<WebCore::IDBClient::IDBConnectionToServer,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionToServer>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionToServer>>::operator=((unsigned int **)(a1 + 128), *(unsigned int **)a1);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E3359ED0;
    v13[1] = a1;
    v18 = v13;
    WTF::callOnMainThread();
    v14 = v18;
    v18 = 0;
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
  v15 = __ldxr(v11);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v11))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 21));
  result = (uint64_t)v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = a1[1];
  *a1 = &off_1E3359E80;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359E80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD))(*v3 + v1);
  return v1(v3, a1[4]);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError const&>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError const&>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3359EA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError const&>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError const&>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359EA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError const&>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError const&>(WebCore::IDBDatabase &,void (WebCore::IDBDatabase::*&)(WebCore::IDBError const&),WebCore::IDBError const&)::{lambda(WebCore::ScriptExecutionContext&)#1}>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionProxy::scheduleMainThreadTasks(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  return WebCore::IDBClient::IDBConnectionProxy::handleMainThreadTasks(*(unsigned __int8 **)(a1 + 8), a2);
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::IDBDatabaseNameAndVersionRequest,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;
  WTF *v14;
  void *v15;
  WebCore::IDBClient::IDBConnectionProxy *v16;
  bmalloc::api *v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  v3 = *(_QWORD *)(a1 + 28);
  *(_QWORD *)(a1 + 28) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(uint64_t **)(a1 + 4);
  *(_QWORD *)(a1 + 4) = 0;
  if (v4)
  {
    v5 = *v4;
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v16 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v16)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v16, a2);
        bmalloc::api::isoDeallocate(v17, v18);
      }
      v19 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          WTF::fastFree((WTF *)v19, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  *(_QWORD *)(a1 - 36) = &off_1E3357608;
  v8 = *(unsigned int **)(a1 - 12);
  *(_QWORD *)(a1 - 12) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::Thread::~Thread((WTF::Thread *)v8);
      WTF::fastFree(v14, v15);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(a1 - 36), a2);
  return bmalloc::api::isoDeallocate(v11, v12);
}

void WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (unint64_t *)(v4 + 24 * i);
      v13 = *v12;
      if (*v12 != -1)
      {
        v14 = v12[1];
        if (v14 | v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = 0;
          v18 = (v13 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v13 - 1640531527) << 16) ^ ((unsigned __int16)v13 - 1640531527);
          v19 = (v13 >> 37) & 0x7FFF800 ^ ((v18 + WORD2(v13) + (v18 >> 11)) << 16) ^ (v18 + WORD2(v13) + (v18 >> 11));
          v20 = (v14 >> 5) & 0x7FFF800 ^ ((v19 + (v19 >> 11) + (unsigned __int16)v14) << 16) ^ (v19 + (v19 >> 11) + (unsigned __int16)v14);
          v21 = (v14 >> 37) & 0x7FFF800 ^ ((v20 + WORD2(v14) + (v20 >> 11)) << 16) ^ (v20 + WORD2(v14) + (v20 >> 11));
          v22 = (v21 + (v21 >> 11)) ^ (8 * (v21 + (v21 >> 11)));
          v23 = (v22 + (v22 >> 5)) ^ (4 * (v22 + (v22 >> 5)));
          v24 = (v23 + (v23 >> 15)) ^ ((v23 + (v23 >> 15)) << 10);
          if (v24)
            v25 = v24;
          else
            v25 = 0x800000;
          do
          {
            v26 = v25 & v16;
            v27 = (_OWORD *)(v15 + 24 * (v25 & v16));
            v25 = ++v17 + (v25 & v16);
          }
          while (*v27 != 0);
          v28 = v15 + 24 * v26;
          WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>::~Ref((uint64_t *)(v28 + 16), v8);
          *v27 = *(_OWORD *)v12;
          v29 = (uint64_t *)(v4 + 24 * i);
          v30 = v29[2];
          v29 += 2;
          *v29 = 0;
          *(_QWORD *)(v28 + 16) = v30;
          WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>::~Ref(v29, v31);
        }
        else
        {
          WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>::~Ref((uint64_t *)(v4 + 24 * i + 16), v8);
        }
      }
    }
    goto LABEL_21;
  }
  if (v4)
LABEL_21:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&,WebCore::IDBResourceIdentifier,WebCore::ClientOrigin>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&),WebCore::IDBResourceIdentifier,WebCore::ClientOrigin const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;

  *(_QWORD *)a1 = &off_1E3359EF8;
  v3 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E3359868[v3])(&v15, a1 + 80);
  *(_DWORD *)(a1 + 104) = -1;
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E3359868[v4])(&v16, a1 + 48);
  *(_DWORD *)(a1 + 72) = -1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&,WebCore::IDBResourceIdentifier,WebCore::ClientOrigin>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&),WebCore::IDBResourceIdentifier,WebCore::ClientOrigin const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IDBClient::IDBConnectionProxy *v9;
  bmalloc::api *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;

  *(_QWORD *)this = &off_1E3359EF8;
  v3 = *((unsigned int *)this + 26);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3359868[v3])(&v15, (char *)this + 80);
  *((_DWORD *)this + 26) = -1;
  v4 = *((unsigned int *)this + 18);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3359868[v4])(&v16, (char *)this + 48);
  *((_DWORD *)this + 18) = -1;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v9, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      v12 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBClient::IDBConnectionToServer,WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&,WebCore::IDBResourceIdentifier,WebCore::ClientOrigin>(WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&),WebCore::IDBResourceIdentifier,WebCore::ClientOrigin const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4, a1 + 6);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBDatabaseNameAndVersionRequest,std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(WebCore::IDBDatabaseNameAndVersionRequest &,void (WTF::CrossThreadTask::*)(std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&),std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)a1 = &off_1E3359F20;
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v3)
    {
      v4 = *(WTF::StringImpl ***)(a1 + 32);
      v5 = 16 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
    }
    v7 = *(WTF **)(a1 + 32);
    if (v7)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 36);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::ThreadSafeRefCounted<WebCore::IDBDatabaseNameAndVersionRequest,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t)v9, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBDatabaseNameAndVersionRequest,std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(WebCore::IDBDatabaseNameAndVersionRequest &,void (WTF::CrossThreadTask::*)(std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&),std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = &off_1E3359F20;
  if (*((_BYTE *)this + 48))
  {
    v3 = *((unsigned int *)this + 11);
    if ((_DWORD)v3)
    {
      v4 = (WTF::StringImpl **)*((_QWORD *)this + 4);
      v5 = 16 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
    }
    v7 = (WTF *)*((_QWORD *)this + 4);
    if (v7)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 36);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::ThreadSafeRefCounted<WebCore::IDBDatabaseNameAndVersionRequest,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t)v9, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTask WTF::createCrossThreadTask<WebCore::IDBDatabaseNameAndVersionRequest,std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(WebCore::IDBDatabaseNameAndVersionRequest &,void (WTF::CrossThreadTask::*)(std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&),std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *, _QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD *))(*v3 + v1);
  return v1(v3, a1 + 4);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabaseNameAndVersionRequest &,void (WebCore::IDBDatabaseNameAndVersionRequest::*&)(std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&),std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>&>(WebCore::IDBDatabaseNameAndVersionRequest &,void (WebCore::IDBDatabaseNameAndVersionRequest::*&)(std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&),std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,WebCore::ScriptExecutionContext&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3359F48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabaseNameAndVersionRequest &,void (WebCore::IDBDatabaseNameAndVersionRequest::*&)(std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&),std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>&>(WebCore::IDBDatabaseNameAndVersionRequest &,void (WebCore::IDBDatabaseNameAndVersionRequest::*&)(std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&),std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,WebCore::ScriptExecutionContext&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3359F48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ScriptExecutionContext::postCrossThreadTask<WebCore::IDBDatabaseNameAndVersionRequest &,void (WebCore::IDBDatabaseNameAndVersionRequest::*&)(std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&),std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>&>(WebCore::IDBDatabaseNameAndVersionRequest &,void (WebCore::IDBDatabaseNameAndVersionRequest::*&)(std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&),std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,WebCore::ScriptExecutionContext&>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IDBDatabase *>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IDBDatabase *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v8 + 16 * v27;
        *(_BYTE *)(a4 + 16) = 0;
        v16[1] = *a3;
        return result;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v16[1] = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_19;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
LABEL_25:
      result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IDBDatabase *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v6, v26, v16);
      v16 = result;
      v22 = *v6;
      if (*v6)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_27;
    }
LABEL_19:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    goto LABEL_25;
  }
LABEL_27:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v22 + 16 * v25;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IDBDatabase *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 16 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = (*v13 + ~(*v13 << 32)) ^ ((*v13 + ~(*v13 << 32)) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = v19;
          v22 = *(_QWORD *)(v14 + 16 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (v22);
        v23 = (_OWORD *)(v14 + 16 * v21);
        *v23 = *(_OWORD *)v13;
        if (v13 == a3)
          v12 = v23;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IDBDatabase *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IDBDatabase *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8, 0);
}

_OWORD *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, v8, 0);
}

_OWORD *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, v8, 0);
}

_OWORD *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, v8, 0);
}

void WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::Ref<WebCore::IDBDatabaseNameAndVersionRequest,WTF::RawPtrTraits<WebCore::IDBDatabaseNameAndVersionRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBDatabaseNameAndVersionRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionToServer::callResultFunctionWithErrorLater(void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBResultData const&),WebCore::IDBResourceIdentifier const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *a1 = &off_1E3359F80;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionToServer::callResultFunctionWithErrorLater(void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBResultData const&),WebCore::IDBResourceIdentifier const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = &off_1E3359F80;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionToServer::callResultFunctionWithErrorLater(void (WebCore::IDBClient::IDBConnectionToServer::*)(WebCore::IDBResultData const&),WebCore::IDBResourceIdentifier const&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, WTF::StringImpl **);
  _QWORD *v3;
  __int128 *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int16 v11;
  WTF::StringImpl *v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v2 = (void (*)(_QWORD *, WTF::StringImpl **))a1[3];
  v1 = a1[4];
  v3 = (_QWORD *)(a1[1] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(void (**)(_QWORD *, WTF::StringImpl **))(*v3 + v2);
  v4 = (__int128 *)(a1 + 5);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v9;
  if (v9)
  {
    v7 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 2;
    v9 = 0;
    if (v7)
      *(_DWORD *)v6 = v7;
    else
      WTF::StringImpl::destroy(v6, v5);
  }
  v10 = *v4;
  v13 = 0;
  v14 = 0;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  LOBYTE(v9) = 0;
  v11 = 280;
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    v12 = v6;
    v2(v3, &v9);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v9);
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v8);
    else
      *(_DWORD *)v6 -= 2;
  }
  else
  {
    v12 = 0;
    v2(v3, &v9);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v9);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionToServer::commitTransaction(WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *a1 = &off_1E3359FA8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionToServer::commitTransaction(WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = &off_1E3359FA8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionToServer::commitTransaction(WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  __int16 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)(a1 + 24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = 280;
  v4 = v10;
  if (v10)
  {
    v5 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    v9 = v4;
    v10 = 0;
    if (v5)
      *(_DWORD *)v4 = v5;
    else
      WTF::StringImpl::destroy(v4, v3);
  }
  else
  {
    v9 = 0;
  }
  result = WebCore::IDBClient::IDBConnectionProxy::didCommitTransaction(*(_QWORD *)(v1 + 24), v2, (uint64_t)&v8);
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionToServer::abortTransaction(WebCore::IDBResourceIdentifier const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *a1 = &off_1E3359FD0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionToServer::abortTransaction(WebCore::IDBResourceIdentifier const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = &off_1E3359FD0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionToServer::abortTransaction(WebCore::IDBResourceIdentifier const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  __int16 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)(a1 + 24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = 280;
  v4 = v10;
  if (v10)
  {
    v5 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    v9 = v4;
    v10 = 0;
    if (v5)
      *(_DWORD *)v4 = v5;
    else
      WTF::StringImpl::destroy(v4, v3);
  }
  else
  {
    v9 = 0;
  }
  result = WebCore::IDBClient::IDBConnectionProxy::didAbortTransaction(*(_QWORD *)(v1 + 24), v2, (uint64_t)&v8);
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionToServer::getAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *a1 = &off_1E3359FF8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionToServer::getAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::IDBClient::IDBConnectionProxy *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = &off_1E3359FF8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v7)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v7, a2);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      v10 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBClient::IDBConnectionToServer::getAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  char v10;

  v1 = (_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v8 = 0;
  v9 = 0;
  v10 = 1;
  WebCore::IDBClient::IDBConnectionProxy::didGetAllDatabaseNamesAndVersions(v2, v1, (uint64_t *)&v8);
  if (v10)
  {
    if (HIDWORD(v9))
    {
      v4 = v8;
      v5 = 16 * HIDWORD(v9);
      do
      {
        v6 = *(WTF::StringImpl **)v4;
        *(_QWORD *)v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v3);
          else
            *(_DWORD *)v6 -= 2;
        }
        v4 = (WTF *)((char *)v4 + 16);
        v5 -= 16;
      }
      while (v5);
    }
    v7 = v8;
    if (v8)
    {
      v8 = 0;
      LODWORD(v9) = 0;
      WTF::fastFree(v7, v3);
    }
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::IDBConnectionToClient,WTF::RawPtrTraits<WebCore::IDBServer::IDBConnectionToClient>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::IDBConnectionToClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = (uint64_t *)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (uint64_t *)(v15 + 16 * v22);
          v25 = (WTF *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 1)
            {
              v29 = *((_QWORD *)v25 + 2);
              if (v29)
                WTF::fastFree((WTF *)(v29 - 16), v8);
              WTF::fastFree(v25, v8);
            }
            else
            {
              --*(_DWORD *)v25;
            }
          }
          *v24 = *v11;
          v26 = v4 + 16 * v9;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v24[1] = v27;
          v14 = *(WTF **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (!v14)
            goto LABEL_22;
          if (*(_DWORD *)v14 == 1)
          {
            v30 = *((_QWORD *)v14 + 2);
            if (v30)
              WTF::fastFree((WTF *)(v30 - 16), v8);
            goto LABEL_26;
          }
          --*(_DWORD *)v14;
        }
        else
        {
          v13 = v4 + 16 * v9;
          v14 = *(WTF **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
            {
              v28 = *((_QWORD *)v14 + 2);
              if (v28)
                WTF::fastFree((WTF *)(v28 - 16), v8);
LABEL_26:
              WTF::fastFree(v14, v8);
              goto LABEL_22;
            }
            --*(_DWORD *)v14;
          }
        }
      }
LABEL_22:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

void WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (unint64_t *)(v4 + 24 * i);
      v8 = *v12;
      if (*v12 != -1)
      {
        v13 = v12[1];
        if (v13 | v8)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = (v8 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v8 - 1640531527) << 16) ^ ((unsigned __int16)v8 - 1640531527);
          v18 = (v8 >> 37) & 0x7FFF800 ^ ((v17 + WORD2(v8) + (v17 >> 11)) << 16) ^ (v17 + WORD2(v8) + (v17 >> 11));
          v19 = (v13 >> 5) & 0x7FFF800 ^ ((v18 + (v18 >> 11) + (unsigned __int16)v13) << 16) ^ (v18 + (v18 >> 11) + (unsigned __int16)v13);
          v20 = (v13 >> 37) & 0x7FFF800 ^ ((v19 + WORD2(v13) + (v19 >> 11)) << 16) ^ (v19 + WORD2(v13) + (v19 >> 11));
          v21 = (v20 + (v20 >> 11)) ^ (8 * (v20 + (v20 >> 11)));
          v22 = (v21 + (v21 >> 5)) ^ (4 * (v21 + (v21 >> 5)));
          v23 = (v22 + (v22 >> 15)) ^ ((v22 + (v22 >> 15)) << 10);
          if (v23)
            LODWORD(v8) = v23;
          else
            LODWORD(v8) = 0x800000;
          do
          {
            v24 = v8 & v15;
            v25 = v14 + 24 * v24;
            v8 = ++v16 + v24;
          }
          while (*(_OWORD *)v25 != 0);
          v26 = *(_OWORD *)v12;
          *(_QWORD *)(v25 + 16) = v12[2];
          *(_OWORD *)v25 = v26;
        }
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), (void *)v8);
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v14;
  uint64_t v15;
  WebCore::IDBServer::UniqueIDBDatabase *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::IDBServer::UniqueIDBDatabase *v34;
  _QWORD *v35;
  WebCore::IDBServer::UniqueIDBDatabase *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t (**v42)();
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::IDBServer::UniqueIDBDatabase *v48;
  WTF *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unsigned int v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  unsigned int v60;
  unsigned __int16 v61;
  char v62;
  unsigned __int8 v63;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(88 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 96);
    do
    {
      *(v10 - 5) = 0;
      *(v10 - 4) = 0;
      *((_DWORD *)v10 - 4) = 0;
      *(v10 - 3) = 0;
      *((_BYTE *)v10 - 8) = 0;
      *((_OWORD *)v10 - 5) = 0uLL;
      *((_OWORD *)v10 - 4) = 0uLL;
      *((_DWORD *)v10 - 12) = 0;
      *v10 = 0;
      v10 += 11;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v11 = 0;
    v12 = 0;
    v5 = v5;
    v13 = off_1E3359868;
    v56 = v4;
    v57 = v5;
    do
    {
      v14 = v4 + 88 * v11;
      v8 = *(WTF::StringImpl **)v14;
      if (*(_QWORD *)v14 != -1)
      {
        if (v8)
        {
          v22 = *a1;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v60 = -1640531527;
          v61 = 0;
          v62 = 0;
          v63 = *(_BYTE *)(v14 + 72);
          WTF::add<WTF::String,WebCore::ClientOrigin,BOOL>(&v60, (uint64_t)v8, v14 + 8, &v63);
          v25 = v60;
          if (v62)
          {
            v54 = (v60 + v61) ^ ((v60 + v61) << 11);
            v25 = v54 + (v54 >> 17);
          }
          v26 = 0;
          v27 = (v25 ^ (8 * v25)) + ((v25 ^ (8 * v25)) >> 5);
          v28 = (v27 ^ (4 * v27)) + ((v27 ^ (4 * v27)) >> 15);
          v29 = v28 ^ (v28 << 10);
          if (v29)
            v30 = v29;
          else
            v30 = 0x800000;
          do
          {
            v31 = v30 & v23;
            v32 = v22 + 88 * (v30 & v23);
            v30 = ++v26 + (v30 & v23);
          }
          while (*(_QWORD *)v32);
          v33 = v22 + 88 * v31;
          v36 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v33 + 80);
          v35 = (_QWORD *)(v33 + 80);
          v34 = v36;
          *v35 = 0;
          if (v36)
          {
            WebCore::IDBServer::UniqueIDBDatabase::~UniqueIDBDatabase(v34, v24);
            WTF::fastFree(v37, v38);
          }
          v39 = *(unsigned int *)(v32 + 64);
          if ((_DWORD)v39 != -1)
            ((void (*)(unsigned int *, uint64_t))v13[v39])(&v60, v32 + 40);
          *(_DWORD *)(v32 + 64) = -1;
          v40 = *(unsigned int *)(v32 + 32);
          if ((_DWORD)v40 != -1)
            ((void (*)(unsigned int *, uint64_t))v13[v40])(&v60, v32 + 8);
          *(_DWORD *)(v32 + 32) = -1;
          v41 = *(WTF::StringImpl **)v32;
          *(_QWORD *)v32 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v24);
            else
              *(_DWORD *)v41 -= 2;
          }
          v42 = v13;
          v43 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          *(_QWORD *)v32 = v43;
          *(_BYTE *)(v32 + 8) = 0;
          *(_DWORD *)(v32 + 32) = -1;
          v44 = *(unsigned int *)(v14 + 32);
          if ((_DWORD)v44 != -1)
          {
            ((void (*)(unsigned int *, uint64_t, uint64_t))off_1E3359948[v44])(&v60, v32 + 8, v14 + 8);
            *(_DWORD *)(v32 + 32) = v44;
          }
          *(_BYTE *)(v32 + 40) = 0;
          v8 = (WTF::StringImpl *)(v32 + 40);
          *(_DWORD *)(v32 + 64) = -1;
          v45 = *(unsigned int *)(v14 + 64);
          if ((_DWORD)v45 != -1)
          {
            ((void (*)(unsigned int *))off_1E3359948[v45])(&v60);
            *(_DWORD *)(v32 + 64) = v45;
          }
          *(_BYTE *)(v32 + 72) = *(_BYTE *)(v14 + 72);
          v4 = v56;
          v46 = v56 + 88 * v11;
          v47 = *(_QWORD *)(v46 + 80);
          *(_QWORD *)(v46 + 80) = 0;
          *v35 = v47;
          v48 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v46 + 80);
          *(_QWORD *)(v46 + 80) = 0;
          v13 = v42;
          if (v48)
          {
            WebCore::IDBServer::UniqueIDBDatabase::~UniqueIDBDatabase(v48, v8);
            WTF::fastFree(v49, v50);
          }
          v51 = *(unsigned int *)(v14 + 64);
          if ((_DWORD)v51 != -1)
            ((void (*)(unsigned int *, uint64_t))v42[v51])(&v60, v14 + 40);
          *(_DWORD *)(v14 + 64) = -1;
          v52 = *(unsigned int *)(v14 + 32);
          if ((_DWORD)v52 != -1)
            ((void (*)(unsigned int *, uint64_t))v42[v52])(&v60, v14 + 8);
          *(_DWORD *)(v14 + 32) = -1;
          v53 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v8);
            else
              *(_DWORD *)v53 -= 2;
          }
          if (v14 == a3)
            v12 = v32;
          v5 = v57;
        }
        else
        {
          v15 = v4 + 88 * v11;
          v16 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v15 + 80);
          *(_QWORD *)(v15 + 80) = 0;
          if (v16)
          {
            WebCore::IDBServer::UniqueIDBDatabase::~UniqueIDBDatabase(v16, 0);
            WTF::fastFree(v17, v18);
          }
          v19 = *(unsigned int *)(v14 + 64);
          if ((_DWORD)v19 != -1)
            ((void (*)(unsigned int *, uint64_t))v13[v19])(&v60, v14 + 40);
          *(_DWORD *)(v14 + 64) = -1;
          v20 = *(unsigned int *)(v14 + 32);
          if ((_DWORD)v20 != -1)
            ((void (*)(unsigned int *, uint64_t))v13[v20])(&v60, v14 + 8);
          *(_DWORD *)(v14 + 32) = -1;
          v21 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v8);
            else
              *(_DWORD *)v21 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::add<WTF::String,WebCore::ClientOrigin,BOOL>(unsigned int *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  unsigned int v20;

  if (a2)
  {
    v6 = *(_DWORD *)(a2 + 4);
    v7 = v6 & 0xFFFFFFFE;
    if ((v6 & 0xFFFFFFFE) != 0)
    {
      v8 = 0;
      v9 = *a1;
      do
      {
        v10 = *(unsigned int *)(a2 + 4);
        if (v8 >= v10)
        {
          v12 = 0;
        }
        else
        {
          v11 = *(_QWORD *)(a2 + 8);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
            v12 = *(unsigned __int8 *)(v11 + v8);
          else
            v12 = *(unsigned __int16 *)(v11 + 2 * v8);
        }
        v13 = v8 + 1;
        if (v8 + 1 >= v10)
        {
          v15 = 0;
        }
        else
        {
          v14 = *(_QWORD *)(a2 + 8);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
            v15 = *(unsigned __int8 *)(v14 + v8 + 1);
          else
            v15 = *(unsigned __int16 *)(v14 + 2 * v8 + 2);
        }
        v16 = (v12 << 11) ^ ((v9 + v15) << 16) ^ (v9 + v15);
        v9 = v16 + (v16 >> 11);
        *a1 = v9;
        v8 = v13 + 1;
      }
      while (v13 + 1 < v7);
    }
    if ((v6 & 1) != 0)
    {
      if (*(_DWORD *)(a2 + 4) <= v7)
      {
        v18 = 0;
      }
      else
      {
        v17 = *(_QWORD *)(a2 + 8);
        if ((*(_BYTE *)(a2 + 16) & 4) != 0)
          v18 = *(unsigned __int8 *)(v17 + v7);
        else
          v18 = *(unsigned __int16 *)(v17 + 2 * v7);
      }
      *a1 = ((*a1 + v18) ^ ((*a1 + v18) << 16)) + (((*a1 + v18) ^ ((*a1 + v18) << 16)) >> 11);
    }
  }
  result = WTF::add<WebCore::SecurityOriginData,WebCore::SecurityOriginData>(a1, a3, a3 + 32);
  v20 = (*a1 + *a4) ^ ((*a1 + *a4) << 16);
  *a1 = v20 + (v20 >> 11);
  return result;
}

uint64_t WTF::add<WebCore::SecurityOriginData,WebCore::SecurityOriginData>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    v3 = -1;
  v4 = (v3 >> 5) & 0x7FFF800 ^ ((*a1 + (unsigned __int16)v3) << 16) ^ (*a1 + (unsigned __int16)v3);
  v5 = (v3 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(v3) + (v4 >> 11)) << 16) ^ (v4 + WORD2(v3) + (v4 >> 11));
  *a1 = v5 + (v5 >> 11);
  v15 = a1;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_8;
  v16 = &v15;
  ((void (*)(_QWORD **))off_1E3359958[v6])(&v16);
  v9 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v9 == -1)
    v9 = -1;
  v10 = (v9 >> 5) & 0x7FFF800 ^ ((*a1 + (unsigned __int16)v9) << 16) ^ (*a1 + (unsigned __int16)v9);
  v11 = (v9 >> 37) & 0x7FFF800 ^ ((v10 + WORD2(v9) + (v10 >> 11)) << 16) ^ (v10 + WORD2(v9) + (v10 >> 11));
  *a1 = v11 + (v11 >> 11);
  v15 = a1;
  v12 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v12 == -1)
  {
LABEL_8:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>>,WebCore::IDBDatabaseIdentifier>(v14);
  }
  else
  {
    v16 = &v15;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E3359958[v12])(&v16, a3);
  }
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>>,WebCore::IDBDatabaseIdentifier>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  _BOOL4 v18;
  _BOOL4 v20;
  _BOOL4 v21;
  char v22;
  uint64_t v23;
  int v24;
  _BOOL4 v26;
  _BOOL4 v28;
  _BOOL4 v29;
  char v30;
  unsigned int v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;

  if (a1)
  {
    v4 = *(_DWORD *)(a1 - 8);
    LODWORD(v34) = -1640531527;
    WORD2(v34) = 0;
    BYTE6(v34) = 0;
    v5 = a2 + 8;
    v33 = *(_BYTE *)(a2 + 72);
    WTF::add<WTF::String,WebCore::ClientOrigin,BOOL>((unsigned int *)&v34, *(_QWORD *)a2, a2 + 8, &v33);
    v7 = v34;
    if (BYTE6(v34))
    {
      v32 = ((_DWORD)v34 + WORD2(v34)) ^ (((_DWORD)v34 + WORD2(v34)) << 11);
      v7 = v32 + (v32 >> 17);
    }
    v8 = 0;
    v9 = (v7 ^ (8 * v7)) + ((v7 ^ (8 * v7)) >> 5);
    v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
    v11 = v10 ^ (v10 << 10);
    if (!v11)
      v11 = 0x800000;
    while (1)
    {
      v12 = v11 & v4;
      v13 = a1 + 88 * (v11 & v4);
      v14 = *(WTF **)v13;
      if (*(_QWORD *)v13 != -1)
      {
        if (!v14)
          return 0;
        if (WTF::equal(v14, *(const WTF::StringImpl **)a2, v6))
        {
          if (v13 != a2)
          {
            v15 = *(unsigned int *)(v13 + 32);
            v16 = *(_DWORD *)(a2 + 32);
            v18 = v16 == (_DWORD)v15 && v16 != -1;
            if ((_DWORD)v15 == -1 || !v18)
            {
              v20 = v16 == -1;
              if ((_DWORD)v15 == -1)
                v21 = v20;
              else
                v21 = v18;
              if (!v21)
                goto LABEL_45;
            }
            else
            {
              v34 = &v33;
              v22 = ((uint64_t (*)(unsigned __int8 **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v15])(&v34, v13 + 8, v5);
              if ((v22 & 1) == 0)
                goto LABEL_45;
            }
            v23 = *(unsigned int *)(v13 + 64);
            v24 = *(_DWORD *)(a2 + 64);
            v26 = v24 == (_DWORD)v23 && v24 != -1;
            if ((_DWORD)v23 == -1 || !v26)
            {
              v28 = v24 == -1;
              if ((_DWORD)v23 == -1)
                v29 = v28;
              else
                v29 = v26;
              if (!v29)
                goto LABEL_45;
            }
            else
            {
              v34 = &v33;
              v30 = ((uint64_t (*)(unsigned __int8 **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v23])(&v34, v13 + 40, a2 + 40);
              if ((v30 & 1) == 0)
                goto LABEL_45;
            }
          }
          if (*(unsigned __int8 *)(v13 + 72) == *(unsigned __int8 *)(a2 + 72))
            return v13;
        }
      }
LABEL_45:
      v11 = ++v8 + v12;
    }
  }
  return 0;
}

WebCore::IDBServer::UniqueIDBDatabase *WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WebCore::IDBServer::UniqueIDBDatabase *result;
  WTF *v7;
  void *v8;
  char v9;
  char v10;

  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E3359868[v3])(&v9, a1 + 40);
  *(_DWORD *)(a1 + 64) = -1;
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E3359868[v4])(&v10, a1 + 8);
  *(_DWORD *)(a1 + 32) = -1;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)a1 = -1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  result = *(WebCore::IDBServer::UniqueIDBDatabase **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (result)
  {
    WebCore::IDBServer::UniqueIDBDatabase::~UniqueIDBDatabase(result, a2);
    return (WebCore::IDBServer::UniqueIDBDatabase *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = *(_QWORD *)(v4 + 8 * i);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = 1;
        do
        {
          result = v16;
          v8 = *(void **)(v11 + 8 * v16);
          v16 = ((_DWORD)v16 + v17++) & v12;
        }
        while (v8);
        *(_QWORD *)(v11 + 8 * result) = v10;
      }
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::IDBServer::closeAndDeleteDatabasesForOrigins(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,BOOL,WebCore::SecurityOriginData const&,WebCore::ClientOrigin const&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  int v8;
  _BOOL4 v10;
  BOOL v12;
  char v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  char v20;
  _QWORD v21[5];

  if (a3 == a2)
    return 1;
  v21[3] = v3;
  v21[4] = v4;
  v7 = *(unsigned int *)(a3 + 24);
  v8 = *(_DWORD *)(a2 + 24);
  v10 = v8 == (_DWORD)v7 && v8 != -1;
  if ((_DWORD)v7 == -1 || !v10)
  {
    v12 = v8 == -1;
    if ((_DWORD)v7 == -1)
      v13 = v12;
    else
      v13 = v10;
    if ((v13 & 1) != 0)
      return 1;
  }
  else
  {
    v21[0] = &v20;
    v14 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v7])(v21, a3, a2);
    if ((v14 & 1) != 0)
      return 1;
  }
  if (a3 + 32 == a2)
    return 1;
  v16 = *(unsigned int *)(a3 + 56);
  v17 = *(_DWORD *)(a2 + 24);
  v18 = v17 == -1;
  v19 = v17 != -1 && v17 == v16;
  if ((_DWORD)v16 == -1)
    result = v18;
  else
    result = v19;
  if ((_DWORD)v16 != -1 && v19)
  {
    v21[0] = &v20;
    return ((uint64_t (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v16])(v21);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::IDBServer::renameOrigin(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&)::$_0,BOOL,WebCore::SecurityOriginData const&,WebCore::ClientOrigin const&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t result;
  BOOL v10;
  char v11;
  _QWORD v12[3];

  if (a3 == a2)
    return 1;
  v12[1] = v3;
  v12[2] = v4;
  v5 = *(unsigned int *)(a3 + 24);
  v6 = *(_DWORD *)(a2 + 24);
  v7 = v6 == v5;
  v10 = v6 == -1;
  v8 = v6 == -1;
  if (v10)
    v7 = 0;
  if ((_DWORD)v5 == -1)
    result = v8;
  else
    result = v7;
  v10 = (_DWORD)v5 == -1 || !v7;
  if (!v10)
  {
    v12[0] = &v11;
    return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v5])(v12, a3, a2);
  }
  return result;
}

uint64_t std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(uint64_t result, WTF *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;

  if (a2)
  {
    v3 = result;
    std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(result, *(_QWORD *)a2);
    std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(v3, *((_QWORD *)a2 + 1));
    v5 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v5])(&v6, (char *)a2 + 40);
    *((_DWORD *)a2 + 14) = -1;
    return WTF::fastFree(a2, v4);
  }
  return result;
}

uint64_t std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::__emplace_unique_key_args<WebCore::IDBKeyData,WebCore::IDBKeyData const&>(uint64_t **a1, WebCore::IDBKeyData *this, unsigned int *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v8;
  WebCore::IDBKeyData *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v15;

  v6 = (uint64_t *)(a1 + 1);
  v5 = a1[1];
  if (!v5)
  {
    v8 = (uint64_t *)(a1 + 1);
LABEL_10:
    v10 = WTF::fastMalloc((WTF *)0x40);
    *(_BYTE *)(v10 + 32) = *(_BYTE *)a3;
    *(_BYTE *)(v10 + 40) = 0;
    *(_DWORD *)(v10 + 56) = -1;
    v11 = a3[6];
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(char *, uint64_t, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_1[v11])(&v15, v10 + 40, a3 + 2);
      *(_DWORD *)(v10 + 56) = v11;
    }
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = v8;
    *v6 = v10;
    v12 = (uint64_t *)**a1;
    v13 = v10;
    if (v12)
    {
      *a1 = v12;
      v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = v5;
      v9 = (WebCore::IDBKeyData *)(v5 + 4);
      if ((WebCore::IDBKeyData::compare(this, (const WebCore::IDBKeyData *)(v5 + 4), (const WTF::String *)a3) & 0x80000000) == 0)
        break;
      v5 = (uint64_t *)*v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if ((WebCore::IDBKeyData::compare(v9, this, (const WTF::String *)a3) & 0x80000000) == 0)
      break;
    v6 = v8 + 1;
    v5 = (uint64_t *)v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_10;
  return v10;
}

uint64_t std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::__erase_unique<WebCore::IDBKeyData>(_QWORD *a1, WebCore::IDBKeyData *a2, const WTF::String *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v13;
  BOOL v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  char v18;

  v3 = a1 + 1;
  v4 = (_QWORD *)a1[1];
  if (!v4)
    return 0;
  v7 = a1 + 1;
  do
  {
    v8 = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v4 + 4), a2, a3);
    v9 = v4 + 1;
    if (v8 >= 0)
    {
      v9 = v4;
      v7 = v4;
    }
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v7 == v3 || (WebCore::IDBKeyData::compare(a2, (const WebCore::IDBKeyData *)(v7 + 4), a3) & 0x80000000) != 0)
    return 0;
  v10 = (_QWORD *)v7[1];
  if (v10)
  {
    do
    {
      v11 = v10;
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  else
  {
    v13 = v7;
    do
    {
      v11 = (_QWORD *)v13[2];
      v14 = *v11 == (_QWORD)v13;
      v13 = v11;
    }
    while (!v14);
  }
  if ((_QWORD *)*a1 == v7)
    *a1 = v11;
  v15 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v15, v7);
  v17 = *((unsigned int *)v7 + 14);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v17])(&v18, v7 + 5);
  *((_DWORD *)v7 + 14) = -1;
  WTF::fastFree((WTF *)v7, v16);
  return 1;
}

uint64_t WebCore::WebAudioSourceProviderCocoa::WebAudioSourceProviderCocoa(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = &off_1E335A0B8;
  *(_BYTE *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 24) = 0;
  *(_BYTE *)(this + 104) = 0;
  *(_BYTE *)(this + 112) = 0;
  *(_BYTE *)(this + 192) = 0;
  *(_QWORD *)(this + 200) = 0;
  *(_QWORD *)(this + 208) = 0;
  *(_QWORD *)(this + 224) = 0;
  *(_QWORD *)(this + 232) = 0;
  *(_QWORD *)(this + 216) = 3;
  return this;
}

void WebCore::WebAudioSourceProviderCocoa::~WebAudioSourceProviderCocoa(WebCore::WebAudioSourceProviderCocoa *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;

  *(_QWORD *)this = &off_1E335A0B8;
  v2 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E331A460;
      v10[1] = v3;
      v11 = v10;
      WTF::ensureOnMainRunLoop();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)this + 25, 0);
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
  }
}

void sub_1953B3B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::WebAudioSourceProviderCocoa::setClient(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = (_QWORD *)result;
  v3 = *(_QWORD *)(result + 16);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v5 = *a2;
  if (*a2)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  if (v4 != v6)
  {
    *a2 = 0;
    v7 = *(unsigned int **)(result + 16);
    v2[2] = v5;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
      v5 = v2[2];
    }
    if (v5)
      v10 = *(_QWORD *)(v5 + 8);
    else
      v10 = 0;
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*v2 + 40))(v2, v10);
  }
  return result;
}

void WebCore::WebAudioSourceProviderCocoa::provideInput(WebCore::WebAudioSourceProviderCocoa *this, WebCore::AudioBus *a2, vDSP_Length a3)
{
  unsigned __int8 *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void **v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t j;
  uint64_t v19;
  void **v20;
  _QWORD *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unint64_t v27;
  unsigned int *v28;
  void *v29;
  void **v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t i;
  uint64_t v34;
  void **v35;
  _QWORD *v36;

  v6 = (unsigned __int8 *)this + 12;
  do
  {
    while (1)
    {
      v7 = *v6;
      if ((v7 & 1) != 0)
      {
        v32 = *((unsigned int *)a2 + 7);
        if ((_DWORD)v32)
        {
          for (i = 0; i < v32; ++i)
          {
            v34 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * i);
            if (!*(_BYTE *)(v34 + 24))
            {
              *(_BYTE *)(v34 + 24) = 1;
              v35 = *(void ***)(v34 + 8);
              v36 = (_QWORD *)(v34 + 16);
              if (v35)
                v36 = v35 + 1;
              else
                v35 = (void **)v34;
              bzero(*v35, 4 * *v36);
              v32 = *((unsigned int *)a2 + 7);
            }
          }
        }
        return;
      }
      v8 = __ldaxr(v6);
      if (v8 == v7)
        break;
      __clrex();
    }
  }
  while (__stxr(v7 | 1, v6));
  v9 = *((_QWORD *)this + 26);
  if (v9 && (v10 = *((_QWORD *)this + 25)) != 0 && (v11 = *((_QWORD *)this + 29), *((_QWORD *)this + 28) > v11))
  {
    v12 = *((unsigned int *)a2 + 7);
    if (v12 >= **(unsigned int **)(v10 + 40))
    {
      if (*((_DWORD *)a2 + 7))
      {
        v23 = 0;
        v24 = 2;
        do
        {
          v25 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v23);
          v26 = *(unsigned int **)(*((_QWORD *)this + 25) + 40);
          v27 = *v26;
          if (v23 >= v27)
          {
            if (!*(_BYTE *)(v25 + 24))
            {
              *(_BYTE *)(v25 + 24) = 1;
              v30 = *(void ***)(v25 + 8);
              v31 = (_QWORD *)(v25 + 16);
              if (v30)
                v31 = v30 + 1;
              else
                v30 = (void **)v25;
              bzero(*v30, 4 * *v31);
              v12 = *((unsigned int *)a2 + 7);
            }
          }
          else
          {
            v28 = &v26[v24];
            if (v27 <= v23)
              v28 = 0;
            *v28 = 1;
            *(_BYTE *)(v25 + 24) = 0;
            v29 = *(void **)v25;
            if (!*(_QWORD *)v25)
              v29 = **(void ***)(v25 + 8);
            *((_QWORD *)v28 + 1) = v29;
            v28[1] = 4 * *(_DWORD *)(v25 + 16);
          }
          ++v23;
          v24 += 4;
        }
        while (v23 < v12);
        v10 = *((_QWORD *)this + 25);
        v9 = *((_QWORD *)this + 26);
        v11 = *((_QWORD *)this + 29);
      }
      WebCore::AudioSampleDataSource::pullSamples(v9, *(AudioBufferList **)(v10 + 40), a3, v11, 0);
      *((_QWORD *)this + 29) += a3;
    }
    else if (*((_DWORD *)a2 + 7))
    {
      v13 = 0;
      do
      {
        v14 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v13);
        if (!*(_BYTE *)(v14 + 24))
        {
          *(_BYTE *)(v14 + 24) = 1;
          v15 = *(void ***)(v14 + 8);
          v16 = (_QWORD *)(v14 + 16);
          if (v15)
            v16 = v15 + 1;
          else
            v15 = (void **)v14;
          bzero(*v15, 4 * *v16);
          v12 = *((unsigned int *)a2 + 7);
        }
        ++v13;
      }
      while (v13 < v12);
    }
  }
  else
  {
    v17 = *((unsigned int *)a2 + 7);
    if ((_DWORD)v17)
    {
      for (j = 0; j < v17; ++j)
      {
        v19 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * j);
        if (!*(_BYTE *)(v19 + 24))
        {
          *(_BYTE *)(v19 + 24) = 1;
          v20 = *(void ***)(v19 + 8);
          v21 = (_QWORD *)(v19 + 16);
          if (v20)
            v21 = v20 + 1;
          else
            v20 = (void **)v19;
          bzero(*v20, 4 * *v21);
          v17 = *((unsigned int *)a2 + 7);
        }
      }
    }
  }
  v22 = __ldxr(v6);
  if (v22 == 1)
  {
    if (!__stlxr(0, v6))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
}

void sub_1953B3ECC(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::WebAudioSourceProviderCocoa::prepare(WebCore::WebAudioSourceProviderCocoa *this, const AudioStreamBasicDescription *a2)
{
  unsigned __int8 *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  UInt32 mChannelsPerFrame;
  double mSampleRate;
  WebCore::WebAudioBufferList *v12;
  uint64_t v13;
  OpaqueAudioConverter **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t result;
  int v29;
  unsigned int *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v4 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v6 = *(_OWORD *)&a2->mBytesPerPacket;
  v36 = *(_OWORD *)&a2->mSampleRate;
  v37 = v6;
  v38 = *(_QWORD *)&a2->mBitsPerChannel;
  if (*((_BYTE *)this + 104))
  {
    v7 = *(_OWORD *)&a2->mSampleRate;
    v8 = *(_OWORD *)&a2->mBytesPerPacket;
    *((_QWORD *)this + 8) = *(_QWORD *)&a2->mBitsPerChannel;
    *((_OWORD *)this + 2) = v7;
    *((_OWORD *)this + 3) = v8;
  }
  else
  {
    *((_QWORD *)this + 3) = off_1E34087C0;
    v9 = v37;
    *((_OWORD *)this + 2) = v36;
    *((_OWORD *)this + 3) = v9;
    *((_QWORD *)this + 8) = v38;
    *((_BYTE *)this + 104) = 1;
  }
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 24) = 0;
  mChannelsPerFrame = a2->mChannelsPerFrame;
  mSampleRate = a2->mSampleRate;
  if (*((_BYTE *)this + 192))
  {
    *((double *)this + 15) = mSampleRate;
    *((_OWORD *)this + 8) = xmmword_19689B100;
    *((_DWORD *)this + 36) = 4;
    *((_DWORD *)this + 37) = mChannelsPerFrame;
    *((_QWORD *)this + 19) = 32;
    *((_DWORD *)this + 40) = 0;
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    *((_DWORD *)this + 46) = 0;
  }
  else
  {
    *((_QWORD *)this + 14) = off_1E34087C0;
    *((double *)this + 15) = mSampleRate;
    *((_OWORD *)this + 8) = xmmword_19689B100;
    *((_DWORD *)this + 36) = 4;
    *((_DWORD *)this + 37) = mChannelsPerFrame;
    *((_QWORD *)this + 19) = 32;
    *((_DWORD *)this + 40) = 0;
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    *((_DWORD *)this + 46) = 0;
    *((_BYTE *)this + 192) = 1;
  }
  v12 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
  WebCore::WebAudioBufferList::WebAudioBufferList(v12, (WebCore::WebAudioSourceProviderCocoa *)((char *)this + 112));
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)this + 25, v12);
  if (!*((_QWORD *)this + 26))
  {
    v15 = (*(uint64_t (**)(WebCore::WebAudioSourceProviderCocoa *))(*(_QWORD *)this + 48))(this);
    WebCore::AudioSampleDataSource::create((WebCore::AudioSampleDataSource *)mSampleRate, *((WTF::LoggerHelper **)this + 27), v15, &v35);
    v16 = v35;
    v35 = 0;
    v17 = *((_QWORD *)this + 26);
    *((_QWORD *)this + 26) = v16;
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 8);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        v30 = v18;
        v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v31 = off_1E331A460;
        v31[1] = v30;
        *(_QWORD *)&v36 = v31;
        WTF::ensureOnMainRunLoop();
        v32 = v36;
        *(_QWORD *)&v36 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      }
      v21 = v35;
      v35 = 0;
      if (v21)
      {
        v22 = (unsigned int *)(v21 + 8);
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v33 = off_1E331A460;
          v33[1] = v22;
          *(_QWORD *)&v36 = v33;
          WTF::ensureOnMainRunLoop();
          v34 = v36;
          *(_QWORD *)&v36 = 0;
          if (v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
      }
    }
  }
  if (!*((_BYTE *)this + 104)
    || (WebCore::AudioSampleDataSource::setInputFormat(*((_QWORD *)this + 26), (uint64_t)this + 24, v13, v14),
        !*((_BYTE *)this + 192)))
  {
    result = std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  WebCore::AudioSampleDataSource::setOutputFormat(*((WebCore::AudioSampleDataSource **)this + 26), (WebCore::WebAudioSourceProviderCocoa *)((char *)this + 112));
  v25 = (unsigned int *)((char *)this + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  v27 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v27 = &off_1E335A128;
  *(_QWORD *)(v27 + 8) = this;
  *(_DWORD *)(v27 + 16) = mChannelsPerFrame;
  *(double *)(v27 + 24) = mSampleRate;
  v35 = v27;
  WTF::callOnMainThread();
  result = v35;
  v35 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v29 = __ldxr(v4);
  if (v29 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_1953B4224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::WebAudioSourceProviderCocoa::receivedNewAudioSamples(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  const AudioStreamBasicDescription *v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  if (*(_DWORD *)(v7 + 16) != 1)
    goto LABEL_22;
  v8 = *(const AudioStreamBasicDescription **)(v7 + 8);
  if (!*(_BYTE *)(a1 + 104)
    || *(double *)(a1 + 32) != v8->mSampleRate
    || *(_DWORD *)(a1 + 40) != v8->mFormatID
    || *(_DWORD *)(a1 + 44) != v8->mFormatFlags
    || *(_DWORD *)(a1 + 48) != v8->mBytesPerPacket
    || *(_DWORD *)(a1 + 52) != v8->mFramesPerPacket
    || *(_DWORD *)(a1 + 56) != v8->mBytesPerFrame
    || *(_DWORD *)(a1 + 60) != v8->mChannelsPerFrame
    || *(_DWORD *)(a1 + 64) != v8->mBitsPerChannel)
  {
    WebCore::WebAudioSourceProviderCocoa::prepare((WebCore::WebAudioSourceProviderCocoa *)a1, v8);
  }
  result = *(_QWORD *)(a1 + 208);
  if (result)
  {
    if (*(_BYTE *)(a1 + 104))
    {
      v10 = *(_QWORD *)(a1 + 224);
      v11 = *(double *)(a1 + 32);
      v15 = v10;
      v16 = v11;
      v17 = 1;
      if (!v11)
      {
        v15 = v10 >> 63;
        if (v10 >= 0)
          v12 = 5;
        else
          v12 = 9;
        v16 = 1;
        v17 = v12;
      }
      result = WebCore::AudioSampleDataSource::pushSamples(result, (uint64_t)&v15, a2, a4);
      *(_QWORD *)(a1 + 224) += a4;
      return result;
    }
    __break(1u);
LABEL_22:
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::Cookie::operator==(v13, v14);
  }
  return result;
}

uint64_t WebCore::Cookie::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;
  _BOOL4 v4;
  void *v6;

  v3 = !*(_QWORD *)a1
    && !*(_QWORD *)(a1 + 8)
    && !*(_QWORD *)(a1 + 16)
    && !*(_QWORD *)(a1 + 24)
    && *(double *)(a1 + 32) == 0.0
    && !*(_BYTE *)(a1 + 48)
    && !*(_BYTE *)(a1 + 56)
    && !*(_BYTE *)(a1 + 57)
    && !*(_BYTE *)(a1 + 58)
    && !*(_QWORD *)(a1 + 64)
    && *(_QWORD *)(a1 + 72) == 0;
  v4 = 0;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)a2), (int32x4_t)vceqzq_s64(*(int64x2_t *)(a2 + 16)))))) & 1) == 0&& !*(_QWORD *)(a2 + 64)&& !((*(_BYTE *)(a2 + 48) | *(_BYTE *)(a2 + 56)) | (*(_BYTE *)(a2 + 57) | *(_BYTE *)(a2 + 58)))&& *(double *)(a2 + 32) == 0.0)
  {
    v4 = *(_QWORD *)(a2 + 72) == 0;
  }
  if (v3 || v4)
    return v3 ^ v4 ^ 1u;
  v6 = (void *)WebCore::Cookie::operator NSHTTPCookie *(a1);
  return objc_msgSend(v6, "isEqual:", WebCore::Cookie::operator NSHTTPCookie *(a2));
}

uint64_t WebCore::Cookie::hash(WebCore::Cookie *this)
{
  return objc_msgSend((id)WebCore::Cookie::operator NSHTTPCookie *((uint64_t)this), "hash");
}

uint64_t WebCore::CookieStorageObserver::cookiesDidChange(WebCore::CookieStorageObserver *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
  v2 = *(unsigned int **)this;
  if (*(_QWORD *)this)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E335A150;
  v4[1] = v2;
  v6 = (uint64_t)v4;
  WTF::callOnMainThread();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void sub_1953B46BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebCore::CookieStorageObserver *WebCore::CookieStorageObserver::CookieStorageObserver(WebCore::CookieStorageObserver *this, NSHTTPCookieStorage *a2)
{
  *((_QWORD *)WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebCore::CookieStorageObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)1>::CanMakeWeakPtrBase((unsigned int *)this)
  + 1) = a2;
  if (a2)
    CFRetain(a2);
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_1953B4754(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebCore::CookieStorageObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)1>::~CanMakeWeakPtrBase(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebCore::CookieStorageObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)1>::CanMakeWeakPtrBase(unsigned int *a1)
{
  *(_QWORD *)a1 = 0;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
  return a1;
}

void sub_1953B4794(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebCore::CookieStorageObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)1>::~CanMakeWeakPtrBase(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int **WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebCore::CookieStorageObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)1>::~CanMakeWeakPtrBase(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    *((_QWORD *)*a1 + 1) = 0;
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void WebCore::CookieStorageObserver::~CookieStorageObserver(WebCore::CookieStorageObserver *this, void *a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (*((_QWORD *)this + 4))
  {
    WebCore::CookieStorageObserver::stopObserving(this);
    v3 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(v5);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v6 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void sub_1953B48BC(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int **v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = v2[4];
  v2[4] = 0;
  if (v4)
    (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  v5 = v2[3];
  v2[3] = 0;
  if (v5)
    CFRelease(v5);
  v6 = v2[1];
  v2[1] = 0;
  if (v6)
    CFRelease(v6);
  if (*v2)
  {
    *((_QWORD *)*v2 + 1) = 0;
    v7 = *v2;
    *v2 = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *v2 = 0;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::CookieStorageObserver::stopObserving(WebCore::CookieStorageObserver *this)
{
  void *v2;
  uint64_t v3;
  const void *v4;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  objc_msgSend(v2, "removeObserver:name:object:", *((_QWORD *)this + 3), *MEMORY[0x1E0C92AC0], 0);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
}

uint64_t WebCore::CookieStorageObserver::startObserving(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCookieObserverAdapter *v5;
  const void *v6;
  uint64_t v7;
  void *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = -[WebCookieObserverAdapter initWithObserver:]([WebCookieObserverAdapter alloc], "initWithObserver:", a1);
  v6 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v6)
    CFRelease(v6);
  if (!*(_BYTE *)(a1 + 16))
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != objc_msgSend(MEMORY[0x1E0C92C08], "sharedHTTPCookieStorage"))
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 8), "registerForPostingNotificationsWithContext:");
    *(_BYTE *)(a1 + 16) = 1;
  }
  v8 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  return objc_msgSend(v8, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 24), sel_cookiesChangedNotificationHandler_, *MEMORY[0x1E0C92AC0], *(_QWORD *)(a1 + 8));
}

uint64_t WebCore::Credential::Credential(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v5;
  _DWORD *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  *(_QWORD *)a1 = v5;
  v6 = *(_DWORD **)(a2 + 8);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *(void **)(a2 + 24);
  if (v7)
  {
    v8 = objc_msgSend(*(id *)(a2 + 24), "user");
    if (v8)
    {
      v9 = objc_alloc(MEMORY[0x1E0C92C60]);
      v10 = objc_msgSend(v7, "password");
      if (a3 == 2)
        v11 = 2;
      else
        v11 = a3 == 1;
      v12 = objc_msgSend(v9, "initWithUser:password:persistence:", v8, v10, v11);
    }
    else
    {
      v13 = objc_msgSend(v7, "identity");
      if (!v13)
      {
        CFRetain(v7);
        v18 = *(const void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v7;
        if (!v18)
          return a1;
        goto LABEL_17;
      }
      v14 = objc_alloc(MEMORY[0x1E0C92C60]);
      v15 = objc_msgSend(v7, "certificates");
      if (a3 == 2)
        v16 = 2;
      else
        v16 = a3 == 1;
      v12 = objc_msgSend(v14, "initWithIdentity:certificates:persistence:", v13, v15, v16);
    }
    v17 = v12;
    v18 = *(const void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v17;
    if (v18)
LABEL_17:
      CFRelease(v18);
  }
  return a1;
}

void sub_1953B4BB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v4 = *(const void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebCore::Credential::encodingRequiresPlatformData(WebCore::Credential *this, NSURLCredential *a2)
{
  return -[WebCore::Credential user](this, "user") == 0;
}

uint64_t WebCore::Credential::fromIPCData(uint64_t a1)
{
  uint64_t v1;
  WebCore::Credential *v3;
  char v4;
  char *v5;

  v1 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::Credential *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::Credential::ipcData(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, uint64_t))*(&off_1E335A168 + v1))(&v5, a1);
  }
}

void *WebCore::Credential::ipcData@<X0>(WebCore::Credential *this@<X0>, uint64_t a2@<X8>)
{
  void *result;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  char v8;

  result = (void *)*((_QWORD *)this + 3);
  if (result && (result = (void *)objc_msgSend(result, "user")) == 0)
  {
    result = (void *)*((_QWORD *)this + 3);
    *(_QWORD *)a2 = result;
    if (result)
      result = (void *)CFRetain(result);
    v7 = 1;
  }
  else
  {
    v5 = *(_DWORD **)this;
    if (*(_QWORD *)this)
      *v5 += 2;
    v6 = (_DWORD *)*((_QWORD *)this + 1);
    if (v6)
      *v6 += 2;
    v7 = 0;
    v8 = *((_BYTE *)this + 16);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = v8;
  }
  *(_DWORD *)(a2 + 24) = v7;
  return result;
}

void WebCore::copyTimingData(WebCore *this@<X0>, NSURLConnection *a2@<X1>, const WebCore::ResourceHandle *a3@<X2>, uint64_t *a4@<X8>)
{
  void *v6;
  double v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  void *v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  double v17;
  void *v18;
  void *v19;
  double v20;
  void *v21;
  void *v22;
  double v23;
  void *v24;
  void *v25;
  double v26;
  void *v27;
  void *v28;
  double v29;
  void *v30;
  void *v31;
  double v32;
  const void *v33;
  void *cf;

  v6 = (void *)-[WebCore _timingData](this, "_timingData", a3);
  v7 = *((double *)a2[1].super.isa + 65);
  v8 = (void *)objc_msgSend(v6, "objectForKey:", CFSTR("_kCFNTimingDataFetchStart"));
  if (v8 && (objc_msgSend(v8, "doubleValue"), v9 != 0.0))
    cf = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", v9);
  else
    cf = 0;
  v10 = (void *)objc_msgSend(v6, "objectForKey:", CFSTR("_kCFNTimingDataDomainLookupStart"));
  if (v10 && (objc_msgSend(v10, "doubleValue"), v11 != 0.0))
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", v11);
  else
    v12 = 0;
  v13 = (void *)objc_msgSend(v6, "objectForKey:", CFSTR("_kCFNTimingDataDomainLookupEnd"));
  if (v13 && (objc_msgSend(v13, "doubleValue"), v14 != 0.0))
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", v14);
  else
    v15 = 0;
  v16 = (void *)objc_msgSend(v6, "objectForKey:", CFSTR("_kCFNTimingDataConnectStart"));
  if (v16 && (objc_msgSend(v16, "doubleValue"), v17 != 0.0))
    v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", v17);
  else
    v18 = 0;
  v19 = (void *)objc_msgSend(v6, "objectForKey:", CFSTR("_kCFNTimingDataSecureConnectionStart"));
  if (v19 && (objc_msgSend(v19, "doubleValue"), v20 != 0.0))
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", v20);
  else
    v21 = 0;
  v22 = (void *)objc_msgSend(v6, "objectForKey:", CFSTR("_kCFNTimingDataConnectEnd"));
  if (v22 && (objc_msgSend(v22, "doubleValue"), v23 != 0.0))
    v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", v23);
  else
    v24 = 0;
  v25 = (void *)objc_msgSend(v6, "objectForKey:", CFSTR("_kCFNTimingDataRequestStart"));
  if (v25 && (objc_msgSend(v25, "doubleValue"), v26 != 0.0))
    v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", v26);
  else
    v27 = 0;
  v28 = (void *)objc_msgSend(v6, "objectForKey:", CFSTR("_kCFNTimingDataResponseStart"));
  if (v28 && (objc_msgSend(v28, "doubleValue"), v29 != 0.0))
    v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", v29);
  else
    v30 = 0;
  v31 = (void *)objc_msgSend(v6, "objectForKey:", CFSTR("_kCFNTimingDataConnectionReused"));
  if (v31 && (objc_msgSend(v31, "doubleValue"), v32 != 0.0))
    v33 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", v32);
  else
    v33 = 0;
  WebCore::packageTimingData(a4, cf, v12, v15, v18, v21, v24, v27, v7, v30, v33 != 0, (void *)objc_msgSend((id)objc_msgSend((id)-[WebCore currentRequest](this, "currentRequest"), "URL"), "scheme"), *((_WORD *)a2[1].super.isa + 514), *(_WORD *)((char *)a2[1].super.isa + 1039), HIBYTE(*(_WORD *)((char *)a2[1].super.isa + 1039)));
  if (v33)
    CFRelease(v33);
  if (v30)
    CFRelease(v30);
  if (v27)
    CFRelease(v27);
  if (v24)
    CFRelease(v24);
  if (v21)
    CFRelease(v21);
  if (v18)
    CFRelease(v18);
  if (v15)
    CFRelease(v15);
  if (v12)
    CFRelease(v12);
  if (cf)
    CFRelease(cf);
  if (*(double *)(*a4 + 16) == 0.0)
    *(_QWORD *)(*a4 + 16) = *(_QWORD *)(*a4 + 8);
}

void sub_1953B50BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;

  if (v14)
  {
    CFRelease(v14);
    if (!v16)
    {
LABEL_3:
      if (!v20)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  CFRelease(v16);
  if (!v20)
  {
LABEL_4:
    if (!v19)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  CFRelease(v20);
  if (!v19)
  {
LABEL_5:
    if (!v18)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  CFRelease(v19);
  if (!v18)
  {
LABEL_6:
    if (!v17)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  CFRelease(v18);
  if (!v17)
  {
LABEL_7:
    if (!v15)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_17:
  CFRelease(v17);
  if (!v15)
  {
LABEL_9:
    if (cf)
      CFRelease(cf);
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  CFRelease(v15);
  goto LABEL_9;
}

uint64_t WebCore::AudioSourceProvider::isHandlingAVPlayer(WebCore::AudioSourceProvider *this)
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 32))(*(_QWORD *)(a1 + 8) - 8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebAudioSourceProviderCocoa::prepare(AudioStreamBasicDescription const&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a1[1];
  *a1 = &off_1E335A128;
  a1[1] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E335A100;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

void sub_1953B526C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebAudioSourceProviderCocoa::prepare(AudioStreamBasicDescription const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335A128;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E335A100;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

void sub_1953B532C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebAudioSourceProviderCocoa::prepare(AudioStreamBasicDescription const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t (***v2)(_QWORD, _QWORD, float);
  float v3;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 16);
  if (v1)
  {
    v2 = *(uint64_t (****)(_QWORD, _QWORD, float))(v1 + 8);
    if (v2)
    {
      v3 = *(double *)(result + 24);
      return (**v2)(v2, *(int *)(result + 16), v3);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStorageObserver::cookiesDidChange(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E335A150;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CookieStorageObserver::cookiesDidChange(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335A150;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CookieStorageObserver::cookiesDidChange(void)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      result = *(_QWORD **)(v2 + 32);
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    }
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Credential::fromIPCData(std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>> &&)::$_0,WebCore::Credential::fromIPCData(std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>> &&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char v2;
  _DWORD *v3;
  _DWORD *v4;

  v2 = *(_BYTE *)(a1 + 16);
  v3 = *(_DWORD **)a1;
  if (*(_QWORD *)a1 && v3[1] || (v3 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  v4 = *(_DWORD **)(a1 + 8);
  if (v4 && v4[1] || (v4 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v4 += 2;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 24) = 0;
}

WebCore::Credential *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Credential::fromIPCData(std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>> &&)::$_0,WebCore::Credential::fromIPCData(std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>> &&>@<X0>(NSURLCredential **a1@<X1>, WebCore::Credential *a2@<X8>)
{
  return WebCore::Credential::Credential(a2, *a1);
}

uint64_t WebCore::IDBServer::IndexValueStore::addRecord(WebCore::IDBServer::IndexValueStore *this, const WebCore::IDBKeyData *a2, const WebCore::IDBKeyData *a3, unsigned int *a4)
{
  uint64_t v7;
  unsigned int v8;
  const WTF::StringImpl *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  void *v19;
  void *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  __int16 v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  void *v47;

  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2
    || (WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::rehash((uint64_t *)a2, 8u, 0), (v7 = *(_QWORD *)a2) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  LODWORD(v47) = -1640531527;
  WORD2(v47) = 0;
  BYTE6(v47) = 0;
  WebCore::add((uint64_t)&v47, (uint64_t)a3);
  v10 = v47;
  if (BYTE6(v47))
  {
    v45 = ((_DWORD)v47 + WORD2(v47)) ^ (((_DWORD)v47 + WORD2(v47)) << 11);
    v10 = v45 + (v45 >> 17);
  }
  v11 = (v10 ^ (8 * v10)) + ((v10 ^ (8 * v10)) >> 5);
  v12 = (v11 ^ (4 * v11)) + ((v11 ^ (4 * v11)) >> 15);
  v13 = v12 ^ (v12 << 10);
  if (!v13)
    v13 = 0x800000;
  v14 = v13 & v8;
  v15 = v7 + 40 * (v13 & v8);
  if (*(_DWORD *)(v15 + 24))
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (*(_BYTE *)v15)
      {
        v16 = v15;
      }
      else
      {
        result = WebCore::IDBKeyData::operator==((unsigned __int8 *)v15, (unsigned __int8 *)a3, v9);
        if ((result & 1) != 0)
        {
          if (!*((_BYTE *)a2 + 32))
            goto LABEL_60;
          v33 = 281;
          goto LABEL_70;
        }
      }
      v14 = (v14 + v17) & v8;
      v15 = v7 + 40 * v14;
      ++v17;
    }
    while (*(_DWORD *)(v15 + 24));
    if (!v16)
      goto LABEL_18;
    *(_QWORD *)(v16 + 32) = 0;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    --*(_DWORD *)(*(_QWORD *)a2 - 16);
    v20 = (void *)(v16 + 8);
    v21 = *(_DWORD *)(v16 + 24);
    *(_BYTE *)v16 = *(_BYTE *)a3;
    v22 = *((_DWORD *)a3 + 6);
    if (v21 != -1)
    {
      if (v22 != -1)
        goto LABEL_20;
      v15 = v16;
      goto LABEL_22;
    }
    if (v22 != -1)
      goto LABEL_20;
  }
  else
  {
LABEL_18:
    *(_BYTE *)v15 = *(_BYTE *)a3;
    v20 = (void *)(v15 + 8);
    v22 = *((_DWORD *)a3 + 6);
    if (v22 == -1)
    {
      v21 = 0;
      v16 = v15;
LABEL_22:
      ((void (*)(void **, void *))off_1E335A328[v21])(&v47, v20);
      *(_DWORD *)(v15 + 24) = -1;
    }
    else
    {
      v16 = v15;
LABEL_20:
      v47 = v20;
      ((void (*)(void **))off_1E335A3B8[v22])(&v47);
    }
  }
  v23 = *(_QWORD *)(v16 + 32);
  *(_QWORD *)(v16 + 32) = 0;
  if (v23)
  {
    v24 = *(_QWORD *)v23;
    if (*(_BYTE *)(v23 + 8))
    {
      if (v24)
      {
        v25 = *(unsigned int *)(v24 + 24);
        if ((_DWORD)v25 != -1)
          ((void (*)(void **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v25])(&v47, v24 + 8);
        *(_DWORD *)(v24 + 24) = -1;
        WTF::fastFree((WTF *)v24, v20);
      }
    }
    else if (v24)
    {
      std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(*(_QWORD *)v23, *(WTF **)(v24 + 8));
      MEMORY[0x19AEA7644](v24, 0x1020C4062D53EE8);
    }
    WTF::fastFree((WTF *)v23, v20);
  }
  v26 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 > 2 * v30)
      goto LABEL_40;
    goto LABEL_42;
  }
  if (3 * v31 <= 4 * v30)
  {
    if (!(_DWORD)v31)
    {
      v32 = 8;
      goto LABEL_47;
    }
LABEL_42:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_47:
    v15 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::rehash((uint64_t *)a2, v32, v16);
    goto LABEL_48;
  }
LABEL_40:
  v15 = v16;
LABEL_48:
  v34 = WTF::fastMalloc((WTF *)0x10);
  v35 = *((unsigned __int8 *)a2 + 32);
  *(_BYTE *)(v34 + 8) = v35;
  if (v35)
  {
    v36 = 0;
  }
  else
  {
    v36 = (_QWORD *)operator new();
    v36[2] = 0;
    v36[1] = 0;
    *v36 = v36 + 1;
  }
  *(_QWORD *)v34 = v36;
  v37 = *(_QWORD *)(v15 + 32);
  *(_QWORD *)(v15 + 32) = v34;
  if (v37)
  {
    v38 = *(_QWORD *)v37;
    if (*(_BYTE *)(v37 + 8))
    {
      if (v38)
      {
        v39 = *(unsigned int *)(v38 + 24);
        if ((_DWORD)v39 != -1)
          ((void (*)(void **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v39])(&v47, v38 + 8);
        *(_DWORD *)(v38 + 24) = -1;
        WTF::fastFree((WTF *)v38, v19);
      }
    }
    else if (v38)
    {
      std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(*(_QWORD *)v37, *(WTF **)(v38 + 8));
      MEMORY[0x19AEA7644](v38, 0x1020C4062D53EE8);
    }
    WTF::fastFree((WTF *)v37, v19);
  }
LABEL_60:
  v40 = *(_QWORD *)(v15 + 32);
  v41 = *(uint64_t ***)v40;
  if (*(_BYTE *)(v40 + 8))
  {
    if (v41)
    {
      v42 = *((unsigned int *)v41 + 6);
      if ((_DWORD)v42 != -1)
        ((void (*)(void **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v42])(&v47, v41 + 1);
      *((_DWORD *)v41 + 6) = -1;
      WTF::fastFree((WTF *)v41, v19);
    }
    v43 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v43 = *(_BYTE *)a4;
    *(_BYTE *)(v43 + 8) = 0;
    *(_DWORD *)(v43 + 24) = -1;
    v44 = a4[6];
    if ((_DWORD)v44 != -1)
    {
      ((void (*)(void **, uint64_t, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_1[v44])(&v47, v43 + 8, a4 + 2);
      *(_DWORD *)(v43 + 24) = v44;
    }
    *(_QWORD *)v40 = v43;
  }
  else
  {
    std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::__emplace_unique_key_args<WebCore::IDBKeyData,WebCore::IDBKeyData const&>(*(uint64_t ***)v40, (WebCore::IDBKeyData *)a4, a4);
  }
  result = std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::__emplace_unique_key_args<WebCore::IDBKeyData,WebCore::IDBKeyData const&>((uint64_t **)a2 + 1, a3, (unsigned int *)a3);
  v33 = 0;
LABEL_70:
  *(_WORD *)this = v33;
  *((_QWORD *)this + 1) = 0;
  return result;
}

uint64_t WebCore::IDBServer::MemoryIndex::notifyCursorsOfValueChange(uint64_t this, const WebCore::IDBKeyData *a2, const WebCore::IDBKeyData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *i;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v3 = *(_QWORD *)(this + 88);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 12);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v7 = this;
        v8 = WTF::fastMalloc((WTF *)(8 * v4));
        v11 = (WTF *)v8;
        v12 = *(_QWORD *)(v7 + 88);
        if (v12 && *(_DWORD *)(v12 - 12))
        {
          v13 = *(unsigned int *)(v12 - 4);
          if ((_DWORD)v13)
          {
            v14 = 8 * v13;
            for (i = *(uint64_t **)(v7 + 88); (unint64_t)(*i + 1) <= 1; ++i)
            {
              v14 -= 8;
              if (!v14)
                return WTF::fastFree(v11, v9);
            }
          }
          else
          {
            i = *(uint64_t **)(v7 + 88);
          }
          v16 = (uint64_t *)(v12 + 8 * v13);
          if (i != v16)
          {
            v17 = 0;
            v18 = *i;
            v19 = 1;
LABEL_15:
            v20 = v19;
            *(_QWORD *)(v8 + 8 * v17++) = v18;
            while (++i != v16)
            {
              v18 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v19;
                if (i != v16)
                  goto LABEL_15;
                break;
              }
            }
            if (v17)
            {
              v21 = 8 * v20;
              v22 = (uint64_t *)v8;
              do
              {
                v23 = *v22;
                if (WebCore::IDBKeyData::operator==((unsigned __int8 *)(*v22 + 224), (unsigned __int8 *)a2, v10))
                {
                  if (WebCore::IDBKeyData::operator==((unsigned __int8 *)(v23 + 256), (unsigned __int8 *)a3, v10))
                  {
                    *(_QWORD *)(v23 + 144) = 0;
                    *(_QWORD *)(v23 + 184) = 0;
                    WebCore::IDBServer::MemoryIndex::cursorDidBecomeDirty(*(_QWORD *)(v23 + 136), v23);
                  }
                }
                ++v22;
                v21 -= 8;
              }
              while (v21);
            }
          }
        }
        return WTF::fastFree(v11, v9);
      }
    }
  }
  return this;
}

uint64_t WebCore::IDBServer::IndexValueStore::lowestKeyWithRecordInRange(WebCore::IDBServer::IndexValueStore *this, const WebCore::IDBKeyRangeData *a2, uint64_t a3)
{
  BOOL v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  const WTF::StringImpl *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  char v22;
  int v23;
  unsigned __int16 v24;
  char v25;

  if (*(_DWORD *)(a3 + 24) | *(_DWORD *)(a3 + 56))
    v6 = *(_BYTE *)(a3 + 64) == 0;
  else
    v6 = 0;
  v7 = v6 && *(_BYTE *)(a3 + 65) == 0;
  if (!v7
    || !WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(a3 + 32))
    || !WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)a3)
    || (result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)a3, (const WebCore::IDBKeyData *)(a3 + 32), (const WTF::String *)a3), (_DWORD)result))
  {
    result = (uint64_t)WebCore::IDBServer::IndexValueStore::lowestIteratorInRange(a2, (const WebCore::IDBKeyRangeData *)a3, (const WTF::String *)a3);
    if ((const WebCore::IDBKeyRangeData *)((char *)a2 + 16) != (const WebCore::IDBKeyRangeData *)result)
    {
      *(_BYTE *)this = *(_BYTE *)(result + 32);
      *((_BYTE *)this + 8) = 0;
      *((_DWORD *)this + 6) = -1;
      v9 = *(unsigned int *)(result + 56);
      if ((_DWORD)v9 != -1)
      {
        result = ((uint64_t (*)(char *, char *, uint64_t))off_1E335A370[v9])(&v22, (char *)this + 8, result + 40);
        *((_DWORD *)this + 6) = v9;
      }
      return result;
    }
LABEL_25:
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    return result;
  }
  v10 = *(_QWORD *)a2;
  if (!v10)
    goto LABEL_25;
  v11 = *(_DWORD *)(v10 - 8);
  v23 = -1640531527;
  v24 = 0;
  v25 = 0;
  WebCore::add((uint64_t)&v23, a3);
  v13 = v23;
  if (v25)
  {
    v20 = (v23 + v24) ^ ((v23 + v24) << 11);
    v13 = v20 + (v20 >> 17);
  }
  v14 = (v13 ^ (8 * v13)) + ((v13 ^ (8 * v13)) >> 5);
  v15 = (v14 ^ (4 * v14)) + ((v14 ^ (4 * v14)) >> 15);
  v16 = v15 ^ (v15 << 10);
  if (!v16)
    v16 = 0x800000;
  v17 = v16 & v11;
  result = v10 + 40 * (v16 & v11);
  if (!*(_DWORD *)(result + 24))
    goto LABEL_25;
  v18 = 1;
  while (1)
  {
    if (!*(_BYTE *)result)
    {
      result = WebCore::IDBKeyData::operator==((unsigned __int8 *)result, (unsigned __int8 *)a3, v12);
      if ((result & 1) != 0)
        break;
    }
    v17 = (v17 + v18) & v11;
    result = v10 + 40 * v17;
    ++v18;
    if (!*(_DWORD *)(result + 24))
      goto LABEL_25;
  }
  *(_BYTE *)this = *(_BYTE *)a3;
  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 6) = -1;
  v19 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v19 != -1)
  {
    result = ((uint64_t (*)(char *, char *, uint64_t))off_1E335A370[v19])(&v21, (char *)this + 8, a3 + 8);
    *((_DWORD *)this + 6) = v19;
  }
  return result;
}

unsigned __int8 *WebCore::IDBServer::IndexValueStore::lowestIteratorInRange(WebCore::IDBServer::IndexValueStore *this, const WebCore::IDBKeyRangeData *a2, const WTF::String *a3)
{
  unsigned __int8 *v3;
  _QWORD *v4;
  unsigned __int8 *v6;
  int v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  BOOL v11;
  const WTF::StringImpl *v12;

  v3 = (unsigned __int8 *)this + 16;
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  if (v4)
  {
    v6 = (unsigned __int8 *)this + 16;
    do
    {
      v7 = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v4 + 4), a2, a3);
      v8 = v4 + 1;
      if (v7 >= 0)
      {
        v8 = v4;
        v6 = (unsigned __int8 *)v4;
      }
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v6 != v3)
    {
      if (!*((_BYTE *)a2 + 64) || !WebCore::IDBKeyData::operator==(v6 + 32, (unsigned __int8 *)a2, a3))
        goto LABEL_18;
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(unsigned __int8 **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
      if (v10 != v3)
      {
LABEL_18:
        if (!*((_DWORD *)a2 + 14)
          || (int)WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v6 + 32), (const WebCore::IDBKeyRangeData *)((char *)a2 + 32), a3) <= 0&& (!*((_BYTE *)a2 + 65)|| (WebCore::IDBKeyData::operator==(v6 + 32, (unsigned __int8 *)a2 + 32, v12) & 1) == 0))
        {
          return v6;
        }
      }
    }
  }
  return v3;
}

_QWORD *WebCore::IDBServer::IndexValueStore::highestReverseIteratorInRange(WebCore::IDBServer::IndexValueStore *this, const WebCore::IDBKeyRangeData *a2, const WTF::String *a3)
{
  WebCore::IDBKeyData *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v5 = (const WebCore::IDBKeyRangeData *)((char *)a2 + 32);
  v6 = (_QWORD *)((char *)this + 16);
  v7 = (_QWORD *)*((_QWORD *)this + 2);
  if (v7)
  {
    do
    {
      v8 = WebCore::IDBKeyData::compare(v5, (const WebCore::IDBKeyData *)(v7 + 4), a3);
      v9 = v7 + 1;
      if (v8 < 0)
      {
        v9 = v7;
        v6 = v7;
      }
      v7 = (_QWORD *)*v9;
    }
    while (*v9);
  }
  if (v6 != *((_QWORD **)this + 1))
  {
    v10 = v6;
    if (!*((_BYTE *)a2 + 65))
      goto LABEL_37;
    v11 = *v6;
    if (*v6)
    {
      do
      {
        v12 = v11;
        v11 = *(_QWORD *)(v11 + 8);
      }
      while (v11);
    }
    else
    {
      v13 = v6;
      do
      {
        v12 = v13[2];
        v14 = *(_QWORD *)v12 == (_QWORD)v13;
        v13 = (_QWORD *)v12;
      }
      while (v14);
    }
    v10 = v6;
    if (!WebCore::IDBKeyData::operator==((unsigned __int8 *)(v12 + 32), (unsigned __int8 *)v5, a3))
      goto LABEL_37;
    v15 = (_QWORD *)*v6;
    if (*v6)
    {
      do
      {
        v10 = v15;
        v15 = (_QWORD *)v15[1];
      }
      while (v15);
    }
    else
    {
      v16 = v6;
      do
      {
        v10 = (_QWORD *)v16[2];
        v14 = *v10 == (_QWORD)v16;
        v16 = v10;
      }
      while (v14);
    }
    if (v10 != *((_QWORD **)this + 1))
    {
LABEL_37:
      if (*((_DWORD *)a2 + 6))
      {
        v17 = (_QWORD *)*v10;
        if (*v10)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)v17[1];
          }
          while (v17);
        }
        else
        {
          v19 = v10;
          do
          {
            v18 = (_QWORD *)v19[2];
            v14 = *v18 == (_QWORD)v19;
            v19 = v18;
          }
          while (v14);
        }
        if ((WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v18 + 4), a2, a3) & 0x80000000) != 0)
          return (_QWORD *)*((_QWORD *)this + 1);
        if (*((_BYTE *)a2 + 64))
        {
          v21 = *v10;
          if (*v10)
          {
            do
            {
              v22 = v21;
              v21 = *(_QWORD *)(v21 + 8);
            }
            while (v21);
          }
          else
          {
            v23 = v10;
            do
            {
              v22 = v23[2];
              v14 = *(_QWORD *)v22 == (_QWORD)v23;
              v23 = (_QWORD *)v22;
            }
            while (v14);
          }
          if (WebCore::IDBKeyData::operator==((unsigned __int8 *)(v22 + 32), (unsigned __int8 *)a2, v20))
            return (_QWORD *)*((_QWORD *)this + 1);
        }
      }
    }
  }
  return v6;
}

const WebCore::IDBKeyData *WebCore::IDBServer::IndexValueStore::find(WebCore::IDBServer::IndexValueStore *this, const WebCore::IDBKeyData *a2, unsigned int *a3, char a4)
{
  uint64_t v7;
  const WebCore::IDBKeyData *result;
  const WebCore::IDBKeyData *v9;
  uint64_t v10;
  _BYTE v11[8];
  _QWORD v12[2];
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  _QWORD *v18;

  v12[0] = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v7 = a3[6];
  if ((_DWORD)v7)
  {
    v11[0] = *(_BYTE *)a3;
    if ((_DWORD)v7 != -1)
    {
      v18 = v12;
      ((void (*)(_QWORD **, _QWORD *, unsigned int *))off_1E335A3B8[v7])(&v18, v12, a3 + 2);
      goto LABEL_6;
    }
  }
  else
  {
    v11[0] = 0;
    LODWORD(v7) = 7;
  }
  v13 = v7;
LABEL_6:
  LOBYTE(v17) = a4;
  result = (const WebCore::IDBKeyData *)WebCore::IDBServer::IndexValueStore::lowestIteratorInRange(a2, (const WebCore::IDBKeyRangeData *)v11, (const WTF::String *)a3);
  if ((const WebCore::IDBKeyData *)((char *)a2 + 16) == result)
  {
    a2 = 0;
    *((_DWORD *)this + 11) = 0;
    *(_OWORD *)((char *)this + 28) = 0u;
    *(_OWORD *)((char *)this + 12) = 0u;
    *((_BYTE *)this + 48) = 1;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  else
  {
    v9 = result;
    result = (const WebCore::IDBKeyData *)WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(*(_QWORD *)a2, (unsigned __int8 *)result + 32);
    if (*((_BYTE *)result + 8))
      v10 = 0;
    else
      v10 = **(_QWORD **)result;
    *((_DWORD *)this + 3) = 0;
    *((_QWORD *)this + 2) = v9;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = result;
    *((_BYTE *)this + 48) = 1;
    *((_QWORD *)this + 7) = v10;
    *((_OWORD *)this + 4) = 0uLL;
  }
  *(_QWORD *)this = a2;
  *((_BYTE *)this + 8) = 1;
  if (v16 != -1)
    result = (const WebCore::IDBKeyData *)((uint64_t (*)(_QWORD **, uint64_t *))off_1E335A328[v16])(&v18, &v15);
  v16 = -1;
  if (v13 != -1)
    return (const WebCore::IDBKeyData *)((uint64_t (*)(_QWORD **, _QWORD *))off_1E335A328[v13])(&v18, v12);
  return result;
}

uint64_t WebCore::IDBServer::IndexValueStore::find(WebCore::IDBServer::IndexValueStore *this, const WebCore::IDBKeyData *a2, const WebCore::IDBKeyData *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  _BYTE v24[7];
  __int128 v25;
  __int128 v26;
  char v27[8];
  _QWORD v28[2];
  int v29;
  char v30;
  uint64_t v31;
  int v32;
  __int16 v33;

  v28[0] = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v27[0] = *(_BYTE *)a3;
  v8 = *((unsigned int *)a3 + 6);
  if ((_DWORD)v8 == -1)
  {
    v29 = -1;
  }
  else
  {
    *(_QWORD *)&v25 = v28;
    ((void (*)(__int128 *, _QWORD *, char *))off_1E335A3B8[v8])(&v25, v28, (char *)a3 + 8);
  }
  LOBYTE(v33) = 0;
  result = (uint64_t)WebCore::IDBServer::IndexValueStore::lowestIteratorInRange(a2, (const WebCore::IDBKeyRangeData *)v27, a3);
  if ((const WebCore::IDBKeyData *)((char *)a2 + 16) == (const WebCore::IDBKeyData *)result)
    goto LABEL_16;
  v10 = result;
  v11 = (unsigned __int8 *)(result + 32);
  v12 = WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(*(_QWORD *)a2, (unsigned __int8 *)(result + 32));
  result = WebCore::IDBKeyData::operator==(v11, (unsigned __int8 *)a3, v13);
  if ((result & 1) != 0)
  {
    result = *(_QWORD *)v12;
    if (*(_BYTE *)(v12 + 8))
    {
      result = WebCore::IDBKeyData::operator==((unsigned __int8 *)result, a4, v14);
      v15 = 0;
      v25 = 0uLL;
      if ((result & 1) == 0)
        goto LABEL_8;
    }
    else
    {
      v15 = (_QWORD *)(result + 8);
      v21 = *(_QWORD **)(result + 8);
      if (v21)
      {
        do
        {
          v22 = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v21 + 4), (const WebCore::IDBKeyData *)a4, v14);
          v23 = v21 + 1;
          if (v22 >= 0)
          {
            v23 = v21;
            v15 = v21;
          }
          v21 = (_QWORD *)*v23;
        }
        while (*v23);
        result = *(_QWORD *)v12;
      }
      v25 = 0uLL;
      if (v15 == (_QWORD *)(result + 8))
      {
LABEL_8:
        v16 = *(unsigned __int8 **)(v10 + 8);
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = *(unsigned __int8 **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = *(unsigned __int8 **)(v10 + 16);
            v18 = *(_QWORD *)v17 == v10;
            v10 = (uint64_t)v17;
          }
          while (!v18);
        }
        if (v17 != (unsigned __int8 *)((char *)a2 + 16))
        {
          result = WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(*(_QWORD *)a2, v17 + 32);
          if (*(_BYTE *)(result + 8))
            v19 = 0;
          else
            v19 = **(_QWORD **)result;
          v25 = 0uLL;
          *(_DWORD *)((char *)this + 49) = 0;
          *((_DWORD *)this + 13) = 0;
          *((_BYTE *)this + 48) = 1;
          *((_QWORD *)this + 7) = v19;
          *((_OWORD *)this + 4) = 0uLL;
          *(_QWORD *)this = a2;
          *((_BYTE *)this + 8) = 1;
          *((_DWORD *)this + 3) = 0;
          *((_QWORD *)this + 4) = 0;
          *((_QWORD *)this + 5) = result;
          *((_QWORD *)this + 2) = v17;
          goto LABEL_30;
        }
LABEL_16:
        *(_QWORD *)this = 0;
        *((_BYTE *)this + 8) = 1;
        *(_OWORD *)((char *)this + 12) = 0u;
        *(_OWORD *)((char *)this + 28) = 0u;
        *((_DWORD *)this + 11) = 0;
        *((_BYTE *)this + 48) = 1;
        *((_QWORD *)this + 8) = 0;
        *((_QWORD *)this + 9) = 0;
        *((_QWORD *)this + 7) = 0;
        goto LABEL_31;
      }
    }
    *(_DWORD *)((char *)this + 49) = *(_DWORD *)v24;
    *((_DWORD *)this + 13) = *(_DWORD *)&v24[3];
    *((_BYTE *)this + 48) = 1;
    *((_QWORD *)this + 7) = v15;
    *((_OWORD *)this + 4) = v25;
    *(_QWORD *)this = a2;
    *((_BYTE *)this + 8) = 1;
    *((_DWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = v12;
    *((_QWORD *)this + 2) = v10;
LABEL_30:
    *((_QWORD *)this + 3) = 0;
    goto LABEL_31;
  }
  if (*(_BYTE *)(v12 + 8))
    v20 = 0;
  else
    v20 = **(_QWORD **)v12;
  v26 = 0uLL;
  *(_QWORD *)this = a2;
  *((_BYTE *)this + 8) = 1;
  *((_DWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = v10;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = v12;
  *((_BYTE *)this + 48) = 1;
  *((_QWORD *)this + 7) = v20;
  *((_OWORD *)this + 4) = v26;
LABEL_31:
  if (v32 != -1)
    result = ((uint64_t (*)(__int128 *, uint64_t *))off_1E335A328[v32])(&v25, &v31);
  v32 = -1;
  if (v29 != -1)
    return ((uint64_t (*)(__int128 *, _QWORD *))off_1E335A328[v29])(&v25, v28);
  return result;
}

uint64_t WebCore::IDBServer::IndexValueStore::reverseFind(uint64_t a1, WebCore::IDBServer::IndexValueStore *a2, unsigned int *a3, int a4, char a5)
{
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v24[8];
  uint64_t v25;
  int v26;
  char v27;
  _QWORD v28[2];
  int v29;
  __int16 v30;
  _QWORD *v31;

  v24[0] = 0;
  v25 = 0;
  v26 = 0;
  v28[0] = 0;
  v29 = 0;
  v30 = 0;
  v9 = a3[6];
  if ((_DWORD)v9)
  {
    v27 = *(_BYTE *)a3;
    if ((_DWORD)v9 != -1)
    {
      v31 = v28;
      ((void (*)(_QWORD **, _QWORD *, unsigned int *))off_1E335A3B8[v9])(&v31, v28, a3 + 2);
      goto LABEL_6;
    }
  }
  else
  {
    v27 = 0;
    LODWORD(v9) = 8;
  }
  v29 = v9;
LABEL_6:
  HIBYTE(v30) = a5;
  result = (uint64_t)WebCore::IDBServer::IndexValueStore::highestReverseIteratorInRange(a2, (const WebCore::IDBKeyRangeData *)v24, (const WTF::String *)a3);
  if (*((_QWORD **)a2 + 1) == v11)
  {
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    *(_OWORD *)(a1 + 12) = 0u;
    *(_OWORD *)(a1 + 28) = 0u;
    *(_DWORD *)(a1 + 44) = 0;
    *(_BYTE *)(a1 + 48) = 1;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    v12 = result;
    v13 = v11;
    v14 = *v11;
    if (*v11)
    {
      do
      {
        v15 = v14;
        v14 = *(_QWORD *)(v14 + 8);
      }
      while (v14);
    }
    else
    {
      v16 = v11;
      do
      {
        v15 = v16[2];
        v17 = *(_QWORD *)v15 == (_QWORD)v16;
        v16 = (_QWORD *)v15;
      }
      while (v17);
    }
    result = WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(*(_QWORD *)a2, (unsigned __int8 *)(v15 + 32));
    if (*(_BYTE *)(result + 8))
    {
      v18 = 0;
      v19 = 0;
      v20 = 1;
    }
    else
    {
      v21 = *(_QWORD **)result;
      if (a4)
      {
        v18 = (_QWORD *)*v21;
        v22 = (_QWORD *)v18[1];
        if (v22)
        {
          do
          {
            v19 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          v23 = v18;
          do
          {
            v19 = (_QWORD *)v23[2];
            v17 = *v19 == (_QWORD)v23;
            v23 = v19;
          }
          while (!v17);
        }
        v20 = 0;
      }
      else
      {
        v20 = 0;
        v18 = v21 + 1;
        v19 = v18;
      }
    }
    *(_QWORD *)a1 = a2;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = a4;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = result;
    *(_BYTE *)(a1 + 48) = v20;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = v18;
    *(_QWORD *)(a1 + 72) = v19;
  }
  if (v29 != -1)
    result = ((uint64_t (*)(_QWORD **, _QWORD *))off_1E335A328[v29])(&v31, v28);
  v29 = -1;
  if (v26 != -1)
    return ((uint64_t (*)(_QWORD **, uint64_t *))off_1E335A328[v26])(&v31, &v25);
  return result;
}

uint64_t WebCore::IDBServer::IndexValueStore::reverseFind(uint64_t a1, WebCore::IDBServer::IndexValueStore *a2, unsigned int *a3, unsigned __int8 *a4, int a5)
{
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  char v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _BYTE v36[8];
  uint64_t v37;
  int v38;
  char v39;
  _QWORD v40[2];
  int v41;
  __int16 v42;
  _QWORD *v43;

  v36[0] = 0;
  v37 = 0;
  v38 = 0;
  v40[0] = 0;
  v41 = 0;
  v42 = 0;
  v39 = *(_BYTE *)a3;
  v9 = a3[6];
  if ((_DWORD)v9 == -1)
  {
    v41 = -1;
  }
  else
  {
    v43 = v40;
    ((void (*)(_QWORD **, _QWORD *, unsigned int *))off_1E335A3B8[v9])(&v43, v40, a3 + 2);
  }
  HIBYTE(v42) = 0;
  result = (uint64_t)WebCore::IDBServer::IndexValueStore::highestReverseIteratorInRange(a2, (const WebCore::IDBKeyRangeData *)v36, (const WTF::String *)a3);
  if (*((_QWORD **)a2 + 1) == v11)
    goto LABEL_29;
  v12 = result;
  v13 = v11;
  v14 = *v11;
  if (*v11)
  {
    do
    {
      v15 = v14;
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14);
  }
  else
  {
    v16 = v11;
    do
    {
      v15 = v16[2];
      v17 = *(_QWORD *)v15 == (_QWORD)v16;
      v16 = (_QWORD *)v15;
    }
    while (v17);
  }
  v19 = WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(*(_QWORD *)a2, (unsigned __int8 *)(v15 + 32));
  result = *(_QWORD *)v19;
  if (*(_BYTE *)(v19 + 8))
  {
    result = WebCore::IDBKeyData::operator==((unsigned __int8 *)result, a4, v18);
    if ((result & 1) != 0)
    {
      v20 = 0;
      v21 = 1;
LABEL_20:
      *(_BYTE *)(a1 + 48) = v21;
      *(_DWORD *)(a1 + 49) = (_DWORD)v43;
      *(_DWORD *)(a1 + 52) = *(_DWORD *)((char *)&v43 + 3);
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = v20;
      *(_QWORD *)(a1 + 72) = v20;
      *(_QWORD *)a1 = a2;
      *(_BYTE *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 12) = a5;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = v13;
      *(_QWORD *)(a1 + 40) = v19;
      goto LABEL_44;
    }
  }
  else
  {
    v20 = result + 8;
    v22 = *(_QWORD **)(result + 8);
    if (v22)
    {
      do
      {
        v23 = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)a4, (const WebCore::IDBKeyData *)(v22 + 4), v18);
        v24 = v22 + 1;
        if (v23 < 0)
        {
          v24 = v22;
          v20 = (uint64_t)v22;
        }
        v22 = (_QWORD *)*v24;
      }
      while (*v24);
      result = *(_QWORD *)v19;
    }
    if (v20 != *(_QWORD *)result)
    {
      v21 = 0;
      goto LABEL_20;
    }
  }
  v25 = (_QWORD *)*v13;
  if (*v13)
  {
    do
    {
      v26 = v25;
      v25 = (_QWORD *)v25[1];
    }
    while (v25);
  }
  else
  {
    do
    {
      v26 = (_QWORD *)v13[2];
      v17 = *v26 == (_QWORD)v13;
      v13 = v26;
    }
    while (v17);
  }
  if (v26 == *((_QWORD **)a2 + 1))
  {
LABEL_29:
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    *(_OWORD *)(a1 + 12) = 0u;
    *(_OWORD *)(a1 + 28) = 0u;
    *(_DWORD *)(a1 + 44) = 0;
    *(_BYTE *)(a1 + 48) = 1;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    v27 = *v26;
    if (*v26)
    {
      do
      {
        v28 = v27;
        v27 = *(_QWORD *)(v27 + 8);
      }
      while (v27);
    }
    else
    {
      v29 = v26;
      do
      {
        v28 = v29[2];
        v17 = *(_QWORD *)v28 == (_QWORD)v29;
        v29 = (_QWORD *)v28;
      }
      while (v17);
    }
    result = WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(*(_QWORD *)a2, (unsigned __int8 *)(v28 + 32));
    if (*(_BYTE *)(result + 8))
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
    }
    else
    {
      v33 = *(_QWORD **)result;
      if (a5)
      {
        v30 = (_QWORD *)*v33;
        v34 = (_QWORD *)v30[1];
        if (v34)
        {
          do
          {
            v31 = v34;
            v34 = (_QWORD *)*v34;
          }
          while (v34);
        }
        else
        {
          v35 = v30;
          do
          {
            v31 = (_QWORD *)v35[2];
            v17 = *v31 == (_QWORD)v35;
            v35 = v31;
          }
          while (!v17);
        }
        v32 = 0;
      }
      else
      {
        v32 = 0;
        v30 = v33 + 1;
        v31 = v30;
      }
    }
    *(_BYTE *)(a1 + 48) = v32;
    *(_DWORD *)(a1 + 49) = (_DWORD)v43;
    *(_DWORD *)(a1 + 52) = *(_DWORD *)((char *)&v43 + 3);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = v30;
    *(_QWORD *)(a1 + 72) = v31;
    *(_QWORD *)a1 = a2;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = a5;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v26;
    *(_QWORD *)(a1 + 40) = result;
  }
LABEL_44:
  if (v41 != -1)
    result = ((uint64_t (*)(_QWORD **, _QWORD *))off_1E335A328[v41])(&v43, v40);
  v41 = -1;
  if (v38 != -1)
    return ((uint64_t (*)(_QWORD **, uint64_t *))off_1E335A328[v38])(&v43, &v37);
  return result;
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::getOrEstablishDatabaseInfo@<X0>(WebCore::IDBServer::MemoryIDBBackingStore *this@<X0>, WebCore::IDBDatabaseInfo *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WebCore::IDBObjectStoreInfo *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  uint64_t result;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::IDBObjectStoreInfo *v21;
  uint64_t v22;

  v5 = *((_QWORD *)this + 11);
  if (!v5)
  {
    v7 = bmalloc::api::isoAllocate();
    v5 = v7;
    v8 = (_DWORD *)*((_QWORD *)this + 1);
    if (v8)
      *v8 += 2;
    *(_QWORD *)v7 = v8;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v7;
    if (v9)
    {
      v10 = v9[4];
      if (v10)
      {
        v11 = *((unsigned int *)v10 - 1);
        if ((_DWORD)v11)
        {
          v12 = (WTF::StringImpl *)((char *)v10 + 8);
          do
          {
            if (*((_QWORD *)v12 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v12, a2);
            v12 = (WebCore::IDBObjectStoreInfo *)((char *)v12 + 72);
            --v11;
          }
          while (v11);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v10 - 16), a2);
      }
      v13 = *v9;
      *v9 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v9, a2);
      v5 = *((_QWORD *)this + 11);
    }
  }
  v14 = *(_DWORD **)v5;
  if (*(_QWORD *)v5)
    *v14 += 2;
  v15 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(_OWORD *)(v5 + 8);
  *((_QWORD *)a2 + 3) = *(_QWORD *)(v5 + 24);
  *(_OWORD *)((char *)a2 + 8) = v16;
  result = (uint64_t)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable(&v22, (_QWORD *)(v5 + 32));
  v19 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v22;
  v22 = v19;
  if (v19)
  {
    v20 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v20)
    {
      v21 = (WebCore::IDBObjectStoreInfo *)(v19 + 8);
      do
      {
        if (*((_QWORD *)v21 - 1) != -1)
          WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v21, v18);
        v21 = (WebCore::IDBObjectStoreInfo *)((char *)v21 + 72);
        --v20;
      }
      while (v20);
    }
    result = WTF::fastFree((WTF *)(v19 - 16), v18);
  }
  *(_WORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return result;
}

void WebCore::IDBServer::MemoryBackingStoreTransaction::~MemoryBackingStoreTransaction(WebCore::IDBServer::MemoryBackingStoreTransaction *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF ***v5;
  WTF **v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::IDBServer::MemoryIndex **v36;
  WebCore::IDBServer::MemoryIndex *v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::IDBServer::MemoryIndex **v42;
  WebCore::IDBServer::MemoryIndex *v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::IDBServer::MemoryObjectStore **v48;
  WebCore::IDBServer::MemoryObjectStore *v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  WebCore::IDBServer::MemoryObjectStore **v54;
  WebCore::IDBServer::MemoryObjectStore *v55;
  WTF *v56;
  void *v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WebCore::IDBObjectStoreInfo *v61;
  WTF::StringImpl *v62;

  v3 = *((_QWORD *)this + 22);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF ***)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WTF **)-1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
            std::default_delete<WebCore::IDBServer::IndexValueStore>::operator()[abi:sn180100](v6);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *((_QWORD *)this + 21);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = (WTF::StringImpl **)(v7 + 8);
      do
      {
        if (*(v9 - 1) != (WTF::StringImpl *)-1)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v11 = *((_QWORD *)this + 20);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = (WTF::StringImpl **)(v11 + 8);
      do
      {
        if (*(v13 - 1) != (WTF::StringImpl *)-1)
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  v15 = *((_QWORD *)this + 19);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v16)
    {
      v17 = (uint64_t *)(v15 + 8);
      do
      {
        if (*(v17 - 1) != -1)
        {
          v18 = *v17;
          *v17 = 0;
          if (v18)
          {
            std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(v18, *(WTF **)(v18 + 8));
            MEMORY[0x19AEA7644](v18, 0x1020C4062D53EE8);
          }
        }
        v17 += 2;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree((WTF *)(v15 - 16), a2);
  }
  v19 = *((_QWORD *)this + 18);
  if (v19)
  {
    v20 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v20)
    {
      v21 = (uint64_t **)(v19 + 8);
      do
      {
        if (*(v21 - 1) != (uint64_t *)-1)
        {
          v22 = *v21;
          *v21 = 0;
          if (v22)
          {
            v23 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(v22, a2);
            WTF::fastFree((WTF *)v23, v24);
          }
        }
        v21 += 2;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((WTF *)(v19 - 16), a2);
  }
  v25 = *((_QWORD *)this + 17);
  if (v25)
  {
    v26 = *(unsigned int *)(v25 - 4);
    if ((_DWORD)v26)
    {
      v27 = (uint64_t **)(v25 + 8);
      do
      {
        if (*(v27 - 1) != (uint64_t *)-1)
        {
          v28 = *v27;
          *v27 = 0;
          if (v28)
          {
            v29 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(v28, a2);
            WTF::fastFree((WTF *)v29, v30);
          }
        }
        v27 += 2;
        --v26;
      }
      while (v26);
    }
    WTF::fastFree((WTF *)(v25 - 16), a2);
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable((WTF::StringImpl ***)this + 16, a2);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable((WTF::StringImpl ***)this + 15, v31);
  v33 = *((_QWORD *)this + 14);
  if (v33)
    WTF::fastFree((WTF *)(v33 - 16), v32);
  v34 = *((_QWORD *)this + 13);
  if (v34)
  {
    v35 = *(unsigned int *)(v34 - 4);
    if ((_DWORD)v35)
    {
      v36 = (WebCore::IDBServer::MemoryIndex **)*((_QWORD *)this + 13);
      do
      {
        v37 = *v36;
        if (*v36 != (WebCore::IDBServer::MemoryIndex *)-1)
        {
          *v36 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 1)
            {
              WebCore::IDBServer::MemoryIndex::~MemoryIndex(v37, v32);
              WTF::fastFree(v38, v39);
            }
            else
            {
              --*(_DWORD *)v37;
            }
          }
        }
        ++v36;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree((WTF *)(v34 - 16), v32);
  }
  v40 = *((_QWORD *)this + 12);
  if (v40)
  {
    v41 = *(unsigned int *)(v40 - 4);
    if ((_DWORD)v41)
    {
      v42 = (WebCore::IDBServer::MemoryIndex **)*((_QWORD *)this + 12);
      do
      {
        v43 = *v42;
        if (*v42 != (WebCore::IDBServer::MemoryIndex *)-1)
        {
          *v42 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 1)
            {
              WebCore::IDBServer::MemoryIndex::~MemoryIndex(v43, v32);
              WTF::fastFree(v44, v45);
            }
            else
            {
              --*(_DWORD *)v43;
            }
          }
        }
        ++v42;
        --v41;
      }
      while (v41);
    }
    WTF::fastFree((WTF *)(v40 - 16), v32);
  }
  v46 = *((_QWORD *)this + 11);
  if (v46)
  {
    v47 = *(unsigned int *)(v46 - 4);
    if ((_DWORD)v47)
    {
      v48 = (WebCore::IDBServer::MemoryObjectStore **)*((_QWORD *)this + 11);
      do
      {
        v49 = *v48;
        if (*v48 != (WebCore::IDBServer::MemoryObjectStore *)-1)
        {
          *v48 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 1)
            {
              WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v49, v32);
              WTF::fastFree(v50, v51);
            }
            else
            {
              --*(_DWORD *)v49;
            }
          }
        }
        ++v48;
        --v47;
      }
      while (v47);
    }
    WTF::fastFree((WTF *)(v46 - 16), v32);
  }
  v52 = *((_QWORD *)this + 10);
  if (v52)
  {
    v53 = *(unsigned int *)(v52 - 4);
    if ((_DWORD)v53)
    {
      v54 = (WebCore::IDBServer::MemoryObjectStore **)*((_QWORD *)this + 10);
      do
      {
        v55 = *v54;
        if (*v54 != (WebCore::IDBServer::MemoryObjectStore *)-1)
        {
          *v54 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 1)
            {
              WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v55, v32);
              WTF::fastFree(v56, v57);
            }
            else
            {
              --*(_DWORD *)v55;
            }
          }
        }
        ++v54;
        --v53;
      }
      while (v53);
    }
    WTF::fastFree((WTF *)(v52 - 16), v32);
  }
  v58 = (WTF::StringImpl **)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v58)
  {
    v59 = v58[4];
    if (v59)
    {
      v60 = *((unsigned int *)v59 - 1);
      if ((_DWORD)v60)
      {
        v61 = (WTF::StringImpl *)((char *)v59 + 8);
        do
        {
          if (*((_QWORD *)v61 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v61, (WTF::StringImpl *)v32);
          v61 = (WebCore::IDBObjectStoreInfo *)((char *)v61 + 72);
          --v60;
        }
        while (v60);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v59 - 16), v32);
    }
    v62 = *v58;
    *v58 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v32);
      else
        *(_DWORD *)v62 -= 2;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v58, v32);
  }
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBServer::MemoryBackingStoreTransaction *)((char *)this + 8), (WTF::StringImpl *)v32);
}

_OWORD *WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,unsigned long long,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long>(_OWORD *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v23;
        goto LABEL_33;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_QWORD *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  v20 = *a4;
  *v16 = v11;
  v16[1] = v20;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_28;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
LABEL_29:
    result = WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(a2, v28, v16);
    v16 = result;
    v24 = *a2;
    if (*a2)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
  }
  v30 = v24 + 16 * v27;
  v29 = 1;
LABEL_33:
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v30;
  *((_BYTE *)v7 + 16) = v29;
  return result;
}

uint64_t *WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v6 - 4);
        v28 = 0;
        v29 = v6 + 16 * v22;
        goto LABEL_35;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  result = (uint64_t *)v14[1];
  *v14 = v9;
  v14[1] = 0;
  if (result)
  {
    v18 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(result, a2);
    result = (uint64_t *)WTF::fastFree((WTF *)v18, v19);
  }
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_30;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
      goto LABEL_31;
    }
LABEL_30:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_31:
    result = WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(a2, v27, v14);
    v14 = result;
    v23 = *a2;
    if (*a2)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
  }
  v29 = v23 + 16 * v26;
  v28 = 1;
LABEL_35:
  *v5 = (uint64_t)v14;
  v5[1] = v29;
  *((_BYTE *)v5 + 16) = v28;
  return result;
}

uint64_t WebCore::IDBServer::MemoryBackingStoreTransaction::recordValueChanged(uint64_t result, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  const WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  void *v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  WTF *v50;
  WTF *v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  if (*(_BYTE *)(result + 73))
    return result;
  v6 = *(_QWORD *)(result + 144);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v6 + 16 * v11);
    if (v12 == a2)
      return result;
    v13 = 1;
    while (v12)
    {
      v11 = (v11 + v13) & v7;
      v12 = *(_QWORD *)(v6 + 16 * v11);
      ++v13;
      if (v12 == a2)
        return result;
    }
  }
  v55 = a2;
  WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(&v53, (uint64_t *)(result + 136), &v55);
  if (v54)
  {
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v15 = 0;
    v16 = v53;
    v17 = *(uint64_t **)(v53 + 8);
    *(_QWORD *)(v53 + 8) = v15;
    if (v17)
    {
      v18 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(v17, v14);
      WTF::fastFree((WTF *)v18, v19);
    }
  }
  else
  {
    v16 = v53;
  }
  v20 = *(uint64_t **)(v16 + 8);
  v21 = *v20;
  if (*v20
    || (WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::rehash(v20, 8u, 0), (v21 = *v20) != 0))
  {
    v22 = *(_DWORD *)(v21 - 8);
  }
  else
  {
    v22 = 0;
  }
  LODWORD(v55) = -1640531527;
  WORD2(v55) = 0;
  BYTE6(v55) = 0;
  result = WebCore::add((uint64_t)&v55, a3);
  v24 = v55;
  if (BYTE6(v55))
  {
    v52 = (v55 + WORD2(v55)) ^ (((_DWORD)v55 + WORD2(v55)) << 11);
    v24 = v52 + (v52 >> 17);
  }
  v25 = (v24 ^ (8 * v24)) + ((v24 ^ (8 * v24)) >> 5);
  v26 = (v25 ^ (4 * v25)) + ((v25 ^ (4 * v25)) >> 15);
  v27 = v26 ^ (v26 << 10);
  if (!v27)
    v27 = 0x800000;
  v28 = v27 & v22;
  v29 = v21 + 40 * (v27 & v22);
  if (!*(_DWORD *)(v29 + 24))
    goto LABEL_30;
  v30 = 0;
  v31 = 1;
  do
  {
    if (*(_BYTE *)v29)
    {
      v30 = v29;
    }
    else
    {
      result = WebCore::IDBKeyData::operator==((unsigned __int8 *)v29, (unsigned __int8 *)a3, v23);
      if ((result & 1) != 0)
        return result;
    }
    v28 = (v28 + v31) & v22;
    v29 = v21 + 40 * v28;
    ++v31;
  }
  while (*(_DWORD *)(v29 + 24));
  if (v30)
  {
    *(_QWORD *)(v30 + 32) = 0;
    *(_OWORD *)v30 = 0u;
    *(_OWORD *)(v30 + 16) = 0u;
    --*(_DWORD *)(*v20 - 16);
    v32 = (void *)(v30 + 8);
    v33 = *(_DWORD *)(v30 + 24);
    *(_BYTE *)v30 = *(_BYTE *)a3;
    v34 = *(_DWORD *)(a3 + 24);
    if (v33 == -1)
    {
      if (v34 == -1)
        goto LABEL_35;
    }
    else if (v34 == -1)
    {
      v29 = v30;
LABEL_34:
      result = ((uint64_t (*)(uint64_t *, void *))off_1E335A328[v33])(&v55, v32);
      *(_DWORD *)(v29 + 24) = -1;
      goto LABEL_35;
    }
  }
  else
  {
LABEL_30:
    *(_BYTE *)v29 = *(_BYTE *)a3;
    v32 = (void *)(v29 + 8);
    v34 = *(_DWORD *)(a3 + 24);
    if (v34 == -1)
    {
      v33 = 0;
      v30 = v29;
      goto LABEL_34;
    }
    v30 = v29;
  }
  v55 = (uint64_t)v32;
  result = ((uint64_t (*)(uint64_t *))off_1E335A3B8[v34])(&v55);
LABEL_35:
  v35 = *(_QWORD *)(v30 + 32);
  *(_QWORD *)(v30 + 32) = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr((unsigned int *)v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, (unsigned int *)v35));
    if (!v37)
    {
      atomic_store(1u, (unsigned int *)v35);
      v51 = *(WTF **)(v35 + 8);
      if (v51)
      {
        *(_QWORD *)(v35 + 8) = 0;
        *(_DWORD *)(v35 + 16) = 0;
        WTF::fastFree(v51, v32);
      }
      result = WTF::fastFree((WTF *)v35, v32);
    }
  }
  v38 = *v20;
  if (*v20)
    v39 = *(_DWORD *)(v38 - 12) + 1;
  else
    v39 = 1;
  *(_DWORD *)(v38 - 12) = v39;
  v40 = *v20;
  if (*v20)
    v41 = *(_DWORD *)(v40 - 12);
  else
    v41 = 0;
  v42 = (*(_DWORD *)(v40 - 16) + v41);
  v43 = *(unsigned int *)(v40 - 4);
  if (v43 <= 0x400)
  {
    if (3 * v43 > 4 * v42)
      goto LABEL_51;
    if (!(_DWORD)v43)
    {
      v44 = 8;
      goto LABEL_50;
    }
LABEL_47:
    v44 = (_DWORD)v43 << (6 * *(_DWORD *)(v40 - 12) >= (2 * v43));
LABEL_50:
    result = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::rehash(v20, v44, v30);
    v30 = result;
    goto LABEL_51;
  }
  if (v43 <= 2 * v42)
    goto LABEL_47;
LABEL_51:
  if (a4)
  {
    v45 = *a4;
    if (*a4)
    {
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 + 1, v45));
    }
    v47 = *(_QWORD *)(v30 + 32);
    *(_QWORD *)(v30 + 32) = v45;
    if (v47)
    {
      do
      {
        v48 = __ldaxr((unsigned int *)v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, (unsigned int *)v47));
      if (!v49)
      {
        atomic_store(1u, (unsigned int *)v47);
        v50 = *(WTF **)(v47 + 8);
        if (v50)
        {
          *(_QWORD *)(v47 + 8) = 0;
          *(_DWORD *)(v47 + 16) = 0;
          WTF::fastFree(v50, v32);
        }
        return WTF::fastFree((WTF *)v47, v32);
      }
    }
  }
  return result;
}

uint64_t WebCore::IDBServer::MemoryObjectStore::deleteIndex(uint64_t this, WebCore::IDBServer::MemoryBackingStoreTransaction *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v7;
  WebCore::IDBServer::MemoryIndex *v10;
  void *v11;
  WebCore::IDBServer::MemoryIndex *v12;
  void *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  WebCore::IDBServer::MemoryIndex *v22;
  int v23;
  WebCore::IDBServer::MemoryIndex *v24;
  uint64_t v25;
  int v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  unsigned int v39;
  WTF::StringImpl **v40;
  int i;
  unsigned int v42;
  WTF::StringImpl **v43;
  WTF *v44;
  WTF::StringImpl *v45;
  WebCore::IDBServer::MemoryIndex *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  WebCore::IDBServer::MemoryIndex *v54;
  WTF *v55;
  void *v56;
  WTF *v57;
  void *v58;
  WTF *v59;
  void *v60;
  WTF *v61;
  void *v62;
  WebCore::IDBServer::MemoryIndex *v63;
  WTF::StringImpl **v64;

  v4 = this;
  v5 = *((_QWORD *)a2 + 10);
  if (!v5
    || (v5 == a3 ? (v7 = *(_BYTE *)(v5 + 24) == 2) : (v7 = 0),
        !v7
     || (this = (uint64_t)WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::take((uint64_t *)&v64, (uint64_t *)a2 + 14, a4), (v10 = (WebCore::IDBServer::MemoryIndex *)v64) == 0)|| ((this = WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::take((uint64_t)&v63, (WebCore::IDBServer::MemoryBackingStoreTransaction *)((char *)a2 + 120), v64 + 3), *(_DWORD *)v10 == 1)? (WebCore::IDBServer::MemoryIndex::~MemoryIndex(v10, v11), this = WTF::fastFree(v27, v28)): --*(_DWORD *)v10, (v12 = v63) == 0)))
  {
    *(_WORD *)v4 = 281;
    *(_QWORD *)(v4 + 8) = 0;
    return this;
  }
  v64 = (WTF::StringImpl **)a4;
  WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::remove((uint64_t *)a2 + 9, (WTF::StringImpl *)&v64);
  ++*(_DWORD *)v12;
  v16 = (uint64_t *)(a3 + 96);
  v15 = *(_QWORD *)(a3 + 96);
  if (v15)
  {
    v17 = *(_DWORD *)(v15 - 8);
    v18 = ((unint64_t)v12 + ~((_QWORD)v12 << 32)) ^ (((unint64_t)v12 + ~((_QWORD)v12 << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(WebCore::IDBServer::MemoryIndex **)(v15 + 8 * v21);
    if (v22 != v12)
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(WebCore::IDBServer::MemoryIndex **)(v15 + 8 * v21);
        ++v23;
        if (v22 == v12)
          goto LABEL_20;
      }
      v21 = *(unsigned int *)(v15 - 4);
    }
LABEL_20:
    if (v21 != *(_DWORD *)(v15 - 4))
    {
      v24 = *(WebCore::IDBServer::MemoryIndex **)(v15 + 8 * v21);
      *(_QWORD *)(v15 + 8 * v21) = -1;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
        {
          WebCore::IDBServer::MemoryIndex::~MemoryIndex(v24, v13);
          WTF::fastFree(v61, v62);
        }
        else
        {
          --*(_DWORD *)v24;
        }
      }
      ++*(_DWORD *)(*v16 - 16);
      v25 = *v16;
      if (*v16)
        v26 = *(_DWORD *)(v25 - 12) - 1;
      else
        v26 = -1;
      *(_DWORD *)(v25 - 12) = v26;
      v29 = *v16;
      if (*v16)
      {
        v30 = 6 * *(_DWORD *)(v29 - 12);
        v31 = *(_DWORD *)(v29 - 4);
        if (v30 < v31 && v31 >= 9)
          WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>::rehash((uint64_t *)(a3 + 96), v31 >> 1, 0);
      }
    }
  }
  v35 = *(_QWORD *)(a3 + 128);
  v33 = (uint64_t *)(a3 + 128);
  v34 = v35;
  if (v35
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v33, 8u, 0), (v34 = *v33) != 0))
  {
    v36 = *(_DWORD *)(v34 - 8);
  }
  else
  {
    v36 = 0;
  }
  v37 = (WTF::StringImpl *)*((_QWORD *)v12 + 3);
  v38 = *((_DWORD *)v37 + 4);
  if (v38 < 0x100)
    v39 = WTF::StringImpl::hashSlowCase(v37);
  else
    v39 = v38 >> 8;
  v40 = 0;
  for (i = 1; ; ++i)
  {
    v42 = v39 & v36;
    v43 = (WTF::StringImpl **)(v34 + 16 * (v39 & v36));
    v44 = *v43;
    if (*v43 == (WTF::StringImpl *)-1)
    {
      v40 = (WTF::StringImpl **)(v34 + 16 * v42);
      goto LABEL_47;
    }
    if (!v44)
      break;
    if ((WTF::equal(v44, *((const WTF::StringImpl **)v12 + 3), v14) & 1) != 0)
    {
      if (*(_DWORD *)v12 != 1)
      {
        --*(_DWORD *)v12;
        goto LABEL_73;
      }
      v54 = v12;
      goto LABEL_81;
    }
LABEL_47:
    v39 = i + v42;
  }
  if (v40)
  {
    *v40 = 0;
    v40[1] = 0;
    --*(_DWORD *)(*v33 - 16);
    v43 = v40;
  }
  v45 = (WTF::StringImpl *)*((_QWORD *)v12 + 3);
  if (v45)
    *(_DWORD *)v45 += 2;
  *v43 = v45;
  v46 = v43[1];
  v43[1] = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
    {
      WebCore::IDBServer::MemoryIndex::~MemoryIndex(v46, v13);
      WTF::fastFree(v57, v58);
    }
    else
    {
      --*(_DWORD *)v46;
    }
  }
  v47 = *v33;
  if (*v33)
    v48 = *(_DWORD *)(v47 - 12) + 1;
  else
    v48 = 1;
  *(_DWORD *)(v47 - 12) = v48;
  v49 = *v33;
  if (*v33)
    v50 = *(_DWORD *)(v49 - 12);
  else
    v50 = 0;
  v51 = (*(_DWORD *)(v49 - 16) + v50);
  v52 = *(unsigned int *)(v49 - 4);
  if (v52 > 0x400)
  {
    if (v52 <= 2 * v51)
    {
LABEL_66:
      v53 = (_DWORD)v52 << (6 * *(_DWORD *)(v49 - 12) >= (2 * v52));
      goto LABEL_69;
    }
  }
  else if (3 * v52 <= 4 * v51)
  {
    if ((_DWORD)v52)
      goto LABEL_66;
    v53 = 8;
LABEL_69:
    v43 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v33, v53, v43);
  }
  v54 = v43[1];
  v43[1] = v12;
  if (!v54)
    goto LABEL_73;
  if (*(_DWORD *)v54 != 1)
  {
    --*(_DWORD *)v54;
    goto LABEL_73;
  }
LABEL_81:
  WebCore::IDBServer::MemoryIndex::~MemoryIndex(v54, v13);
  WTF::fastFree(v59, v60);
LABEL_73:
  *(_WORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  this = (uint64_t)v63;
  if (v63)
  {
    if (*(_DWORD *)v63 == 1)
    {
      WebCore::IDBServer::MemoryIndex::~MemoryIndex(v63, v13);
      return WTF::fastFree(v55, v56);
    }
    else
    {
      --*(_DWORD *)v63;
    }
  }
  return this;
}

uint64_t *WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::take(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *a2;
  if (!*a2)
    goto LABEL_9;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != a3)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v10;
      if (v9 == a3)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v8 != *(_DWORD *)(v3 - 4))
  {
    v11 = (_QWORD *)(v3 + 16 * v8);
    v12 = v11[1];
    v11[1] = 0;
    *result = v12;
    v13 = (_QWORD *)*a2;
    if (!*a2 || (v13 += 2 * *((unsigned int *)v13 - 1), v13 != v11))
    {
      if (v13 != v11)
      {
        *v11 = -1;
        v11[1] = 0;
        ++*(_DWORD *)(*a2 - 16);
        v14 = *a2;
        if (*a2)
          v15 = *(_DWORD *)(v14 - 12) - 1;
        else
          v15 = -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *a2;
        if (*a2)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            return WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(a2, v18 >> 1, 0);
        }
      }
    }
  }
  else
  {
LABEL_9:
    *result = 0;
  }
  return result;
}

unsigned int *WebCore::IDBServer::MemoryObjectStore::deleteRecord(WebCore::IDBServer::MemoryObjectStore *this, const WebCore::IDBKeyData *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  const WTF::StringImpl *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const WTF::String *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *result;
  const WTF::String *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int *v31;
  WebCore::IDBKeyData *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  char *v45;
  _DWORD *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v67;
  WebCore::IDBServer::MemoryObjectStore *v68;
  WebCore::IDBKeyData *v69;
  uint64_t v70;
  char v71;

  v4 = (uint64_t *)*((_QWORD *)this + 12);
  if (!v4)
  {
    v15 = *((_QWORD *)this + 10);
    return (unsigned int *)WebCore::IDBServer::MemoryBackingStoreTransaction::recordValueChanged(v15, (uint64_t)this, (uint64_t)a2, 0);
  }
  v5 = *v4;
  if (!*v4)
  {
LABEL_15:
    v13 = 0;
    goto LABEL_16;
  }
  v6 = *(_DWORD *)(v5 - 8);
  LODWORD(v69) = -1640531527;
  WORD2(v69) = 0;
  BYTE6(v69) = 0;
  WebCore::add((uint64_t)&v69, (uint64_t)a2);
  v8 = v69;
  if (BYTE6(v69))
  {
    v67 = ((_DWORD)v69 + WORD2(v69)) ^ (((_DWORD)v69 + WORD2(v69)) << 11);
    v8 = v67 + (v67 >> 17);
  }
  v9 = (v8 ^ (8 * v8)) + ((v8 ^ (8 * v8)) >> 5);
  v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
  v11 = v10 ^ (v10 << 10);
  if (!v11)
    v11 = 0x800000;
  v12 = v11 & v6;
  v13 = v5 + 40 * (v11 & v6);
  if (!*(_DWORD *)(v13 + 24))
  {
LABEL_12:
    if (*v4)
    {
      v13 = *v4 + 40 * *(unsigned int *)(*v4 - 4);
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  v14 = 1;
  while (*(_BYTE *)v13 || (WebCore::IDBKeyData::operator==((unsigned __int8 *)v13, (unsigned __int8 *)a2, v7) & 1) == 0)
  {
    v12 = (v12 + v14) & v6;
    v13 = v5 + 40 * v12;
    ++v14;
    if (!*(_DWORD *)(v13 + 24))
      goto LABEL_12;
  }
LABEL_16:
  v16 = **((_QWORD **)this + 12);
  if (v16)
    v16 += 40 * *(unsigned int *)(v16 - 4);
  v15 = *((_QWORD *)this + 10);
  if (v16 == v13)
    return (unsigned int *)WebCore::IDBServer::MemoryBackingStoreTransaction::recordValueChanged(v15, (uint64_t)this, (uint64_t)a2, 0);
  WebCore::IDBServer::MemoryBackingStoreTransaction::recordValueChanged(v15, (uint64_t)this, (uint64_t)a2, (unsigned int **)(v13 + 32));
  v18 = (_QWORD *)*((_QWORD *)this + 12);
  if (*v18)
  {
    v19 = *v18 + 40 * *(unsigned int *)(*v18 - 4);
    if (v19 == v13)
      goto LABEL_27;
  }
  else
  {
    if (!v13)
      goto LABEL_27;
    v19 = 0;
  }
  if (v19 != v13)
    WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::remove((uint64_t)v18, (_DWORD *)v13);
LABEL_27:
  result = (unsigned int *)std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::__erase_unique<WebCore::IDBKeyData>(*((_QWORD **)this + 13), a2, v17);
  v22 = *((_QWORD *)this + 15);
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    v24 = (_QWORD *)(v22 + 16 * v23);
    if (*(_DWORD *)(v22 - 12))
    {
      v25 = (_QWORD *)*((_QWORD *)this + 15);
      if ((_DWORD)v23)
      {
        v26 = 16 * v23;
        v25 = (_QWORD *)*((_QWORD *)this + 15);
        while ((unint64_t)(*v25 + 1) <= 1)
        {
          v25 += 2;
          v26 -= 16;
          if (!v26)
          {
            v25 = v24;
            goto LABEL_37;
          }
        }
      }
      goto LABEL_37;
    }
    v25 = (_QWORD *)(v22 + 16 * v23);
  }
  else
  {
    v25 = 0;
    v23 = 0;
  }
  v24 = (_QWORD *)(v22 + 16 * v23);
LABEL_37:
  v68 = this;
  if (v22)
    v27 = (_QWORD *)(v22 + 16 * *(unsigned int *)(v22 - 4));
  else
    v27 = 0;
  if (v27 == v25)
    goto LABEL_109;
  do
  {
    v28 = v25[1];
    v29 = *(uint64_t **)(v28 + 72);
    if (!v29)
      goto LABEL_103;
    v70 = 0;
    if (!*v29)
      goto LABEL_103;
    v30 = *(unsigned int *)(*v29 - 12);
    if (!(_DWORD)v30)
      goto LABEL_103;
    if (v30 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    v32 = (WebCore::IDBKeyData *)WTF::fastMalloc((WTF *)(32 * v30));
    LODWORD(v70) = v30;
    v69 = v32;
    v33 = *v29;
    if (!*v29 || !*(_DWORD *)(v33 - 12))
      goto LABEL_102;
    v34 = *(unsigned int *)(v33 - 4);
    if ((_DWORD)v34)
    {
      v35 = 40 * v34;
      v36 = *v29;
      while (!*(_DWORD *)(v36 + 24) || *(_BYTE *)v36 != 0)
      {
        v36 += 40;
        v35 -= 40;
        if (!v35)
          goto LABEL_102;
      }
    }
    else
    {
      v36 = *v29;
    }
    v38 = v33 + 40 * v34;
    if (v36 == v38)
      goto LABEL_102;
LABEL_57:
    v39 = *(_QWORD *)(v36 + 32);
    result = *(unsigned int **)v39;
    if (!*(_BYTE *)(v39 + 8))
    {
      result = (unsigned int *)std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::__erase_unique<WebCore::IDBKeyData>(result, a2, v21);
      if (!result)
        goto LABEL_67;
      goto LABEL_66;
    }
    if (result)
    {
      result = (unsigned int *)WebCore::IDBKeyData::operator==((unsigned __int8 *)result, (unsigned __int8 *)a2, v21);
      if ((_DWORD)result)
      {
        v40 = *(unsigned int **)v39;
        if (*(_QWORD *)v39)
        {
          v41 = v40[6];
          if ((_DWORD)v41 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v41])(&v71, v40 + 2);
          v40[6] = -1;
          WTF::fastFree((WTF *)v40, v31);
        }
        *(_QWORD *)v39 = 0;
LABEL_66:
        result = (unsigned int *)WebCore::IDBServer::MemoryIndex::notifyCursorsOfValueChange(v28, (const WebCore::IDBKeyData *)v36, a2);
      }
    }
LABEL_67:
    v42 = *(uint64_t **)(v36 + 32);
    v43 = *((unsigned __int8 *)v42 + 8);
    v44 = *v42;
    if (v43)
    {
      if (v44)
        goto LABEL_78;
    }
    else if (*(_QWORD *)(v44 + 16))
    {
      goto LABEL_78;
    }
    if (HIDWORD(v70) == (_DWORD)v70)
    {
      result = (unsigned int *)WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, HIDWORD(v70) + 1, v36);
      v45 = (char *)v69 + 32 * HIDWORD(v70);
      *v45 = *(_BYTE *)result;
      v45[8] = 0;
      v31 = (unsigned int *)(v45 + 8);
      *((_DWORD *)v45 + 6) = -1;
      v46 = v45 + 24;
      v47 = result[6];
      if ((_DWORD)v47 == -1)
        goto LABEL_77;
      v48 = (unint64_t)(result + 2);
    }
    else
    {
      v49 = (char *)v69 + 32 * HIDWORD(v70);
      *v49 = *(_BYTE *)v36;
      v49[8] = 0;
      v31 = (unsigned int *)(v49 + 8);
      *((_DWORD *)v49 + 6) = -1;
      v46 = v49 + 24;
      v47 = *(unsigned int *)(v36 + 24);
      if ((_DWORD)v47 == -1)
        goto LABEL_77;
      v48 = v36 + 8;
    }
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *, unint64_t))off_1E335A370[v47])(&v71, v31, v48);
    *v46 = v47;
LABEL_77:
    ++HIDWORD(v70);
LABEL_78:
    while (1)
    {
      v36 += 40;
      if (v36 == v38)
        break;
      if (*(_DWORD *)(v36 + 24))
        v50 = *(_BYTE *)v36 == 0;
      else
        v50 = 0;
      if (v50)
      {
        if (v36 != v38)
          goto LABEL_57;
        break;
      }
    }
    v32 = v69;
    if (!HIDWORD(v70))
      goto LABEL_101;
    v51 = 32 * HIDWORD(v70);
    do
    {
      std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::__erase_unique<WebCore::IDBKeyData>(v29 + 1, v32, v21);
      result = (unsigned int *)WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(v29, (unsigned __int8 *)v32);
      v31 = result;
      if (*v29)
      {
        v52 = *v29 + 40 * *(unsigned int *)(*v29 - 4);
        if ((unsigned int *)v52 == result)
          goto LABEL_94;
      }
      else
      {
        if (!result)
          goto LABEL_94;
        v52 = 0;
      }
      if ((unsigned int *)v52 != result)
        result = (unsigned int *)WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::remove((uint64_t)v29, result);
LABEL_94:
      v32 = (WebCore::IDBKeyData *)((char *)v32 + 32);
      v51 -= 32;
    }
    while (v51);
    v32 = v69;
    if (HIDWORD(v70))
    {
      v53 = 32 * HIDWORD(v70);
      v54 = (_DWORD *)((char *)v69 + 24);
      do
      {
        v55 = *v54;
        if ((_DWORD)v55 != -1)
          result = (unsigned int *)((uint64_t (*)(char *, _DWORD *))off_1E335A328[v55])(&v71, v54 - 4);
        *v54 = -1;
        v54 += 8;
        v53 -= 32;
      }
      while (v53);
      v32 = v69;
    }
LABEL_101:
    if (v32)
    {
LABEL_102:
      v69 = 0;
      LODWORD(v70) = 0;
      result = (unsigned int *)WTF::fastFree(v32, v31);
    }
LABEL_103:
    v56 = v25 + 2;
    v25 = v24;
    if (v56 != v24)
    {
      v25 = v56;
      while ((unint64_t)(*v25 + 1) <= 1)
      {
        v25 += 2;
        if (v25 == v24)
        {
          v25 = v24;
          break;
        }
      }
    }
  }
  while (v25 != v27);
LABEL_109:
  v57 = *((_QWORD *)v68 + 16);
  if (!v57)
  {
    v60 = 0;
    LODWORD(v58) = 0;
LABEL_122:
    v59 = v57 + 24 * v58;
    goto LABEL_123;
  }
  v58 = *(unsigned int *)(v57 - 4);
  v59 = v57 + 24 * v58;
  if (!*(_DWORD *)(v57 - 12))
  {
    v60 = v57 + 24 * v58;
    goto LABEL_122;
  }
  v60 = *((_QWORD *)v68 + 16);
  if ((_DWORD)v58)
  {
    v61 = 24 * v58;
    v60 = *((_QWORD *)v68 + 16);
    while (*(_OWORD *)v60 == 0 || *(_QWORD *)v60 == -1)
    {
      v60 += 24;
      v61 -= 24;
      if (!v61)
      {
        v60 = v59;
        break;
      }
    }
  }
LABEL_123:
  if (v57)
    v63 = v57 + 24 * *(unsigned int *)(v57 - 4);
  else
    v63 = 0;
  while (v60 != v63)
  {
    v64 = *(_QWORD *)(v60 + 16);
    result = (unsigned int *)WebCore::IDBKeyData::operator==((unsigned __int8 *)(v64 + 232), (unsigned __int8 *)a2, v21);
    if ((_DWORD)result && *(_BYTE *)(v64 + 224))
      *(_BYTE *)(v64 + 224) = 0;
    v65 = v60 + 24;
    v60 = v59;
    if (v65 != v59)
    {
      v60 = v65;
      while (*(_OWORD *)v60 == 0 || *(_QWORD *)v60 == -1)
      {
        v60 += 24;
        if (v60 == v59)
        {
          v60 = v59;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::IDBServer::MemoryBackingStoreTransaction::finish(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  *(_BYTE *)(this + 72) = 0;
  if (!*(_BYTE *)(this + 24))
    return this;
  v1 = *(_QWORD *)(this + 80);
  if (!v1)
  {
    v4 = 0;
    v2 = 0;
LABEL_11:
    v3 = v1 + 8 * v2;
    goto LABEL_12;
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = v1 + 8 * v2;
  if (!*(_DWORD *)(v1 - 12))
  {
    v4 = v1 + 8 * v2;
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(this + 80);
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    v4 = *(_QWORD *)(this + 80);
    while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
    {
      v4 += 8;
      v5 -= 8;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_12:
  if (v1)
    v1 += 8 * *(unsigned int *)(v1 - 4);
  while (v4 != v1)
  {
    v6 = v4 + 8;
    *(_QWORD *)(*(_QWORD *)v4 + 80) = 0;
    v4 = v3;
    if (v6 != v3)
    {
      v4 = v6;
      while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
      {
        v4 += 8;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
  v7 = *(_QWORD **)(this + 120);
  if (v7)
  {
    v8 = *((unsigned int *)v7 - 1);
    v9 = &v7[2 * v8];
    if (*((_DWORD *)v7 - 3))
    {
      v10 = *(_QWORD **)(this + 120);
      if ((_DWORD)v8)
      {
        v11 = 16 * v8;
        v10 = *(_QWORD **)(this + 120);
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          v11 -= 16;
          if (!v11)
          {
            v10 = v9;
            goto LABEL_31;
          }
        }
      }
      goto LABEL_31;
    }
    v10 = &v7[2 * v8];
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = &v7[2 * v8];
LABEL_31:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  while (v10 != v7)
  {
    *(_QWORD *)(v10[1] + 80) = 0;
    v12 = v10 + 2;
    v10 = v9;
    if (v12 != v9)
    {
      v10 = v12;
      while ((unint64_t)(*v10 + 1) <= 1)
      {
        v10 += 2;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
  }
  return this;
}

WebCore::IDBServer::MemoryCursor *WebCore::IDBServer::MemoryCursor::MemoryCursor(WebCore::IDBServer::MemoryCursor *this, const WebCore::IDBCursorInfo *a2)
{
  __int128 v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  char v35;
  char v36;

  *(_QWORD *)this = off_1E335A188;
  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 40) = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 8) = v4;
  v6 = *((_BYTE *)a2 + 48);
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 56) = v6;
  *((_DWORD *)this + 20) = -1;
  v7 = *((unsigned int *)a2 + 18);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *))off_1E335A370[v7])(&v35);
    *((_DWORD *)this + 20) = v7;
  }
  v8 = *((_BYTE *)a2 + 80);
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 88) = v8;
  *((_DWORD *)this + 28) = -1;
  v9 = *((unsigned int *)a2 + 26);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *))off_1E335A370[v9])(&v36);
    *((_DWORD *)this + 28) = v9;
  }
  *((_WORD *)this + 60) = *((_WORD *)a2 + 56);
  v10 = *((_WORD *)a2 + 60);
  *((_BYTE *)this + 130) = *((_BYTE *)a2 + 122);
  *((_WORD *)this + 64) = v10;
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_135))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_135))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_135);
LABEL_9:
  if ((byte_1ECE81EC9 & 1) != 0)
  {
    v12 = qword_1ECE81ED0;
    v13 = *((_QWORD *)this + 1);
    v14 = *((_QWORD *)this + 2);
    if (qword_1ECE81ED0)
      goto LABEL_12;
  }
  else
  {
    qword_1ECE81ED0 = 0;
    byte_1ECE81EC9 = 1;
    v13 = *((_QWORD *)this + 1);
    v14 = *((_QWORD *)this + 2);
  }
  WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::MemoryCursor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::MemoryCursor *>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WebCore::IDBServer::MemoryCursor *,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBServer::MemoryCursor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(8u);
  v12 = qword_1ECE81ED0;
  if (!qword_1ECE81ED0)
  {
    v15 = 0;
    goto LABEL_13;
  }
LABEL_12:
  v15 = *(_DWORD *)(v12 - 8);
LABEL_13:
  v16 = (v13 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v13 - 1640531527) << 16) ^ ((unsigned __int16)v13
                                                                                             - 1640531527);
  v17 = (v13 >> 37) & 0x7FFF800 ^ ((v16 + WORD2(v13) + (v16 >> 11)) << 16) ^ (v16 + WORD2(v13) + (v16 >> 11));
  v18 = (v14 >> 5) & 0x7FFF800 ^ ((v17 + (unsigned __int16)v14 + (v17 >> 11)) << 16) ^ (v17 + (unsigned __int16)v14 + (v17 >> 11));
  v19 = (v14 >> 37) & 0x7FFF800 ^ ((v18 + WORD2(v14) + (v18 >> 11)) << 16) ^ (v18 + WORD2(v14) + (v18 >> 11));
  v20 = (v19 + (v19 >> 11)) ^ (8 * (v19 + (v19 >> 11)));
  v21 = (v20 + (v20 >> 5)) ^ (4 * (v20 + (v20 >> 5)));
  v22 = (v21 + (v21 >> 15)) ^ ((v21 + (v21 >> 15)) << 10);
  if (!v22)
    v22 = 0x800000;
  v23 = v22 & v15;
  v24 = (unint64_t *)(v12 + 24 * (v22 & v15));
  v26 = *v24;
  v25 = v24[1];
  if (*(_OWORD *)v24 == 0)
    goto LABEL_16;
  v27 = 0;
  v28 = 1;
  do
  {
    if (v26 == -1)
    {
      v27 = v24;
    }
    else if (v26 == v13 && v25 == v14)
    {
      v24[2] = (unint64_t)this;
      goto LABEL_36;
    }
    v23 = (v23 + v28) & v15;
    v24 = (unint64_t *)(v12 + 24 * v23);
    v26 = *v24;
    v25 = v24[1];
    ++v28;
  }
  while (*(_OWORD *)v24 != 0);
  if (!v27)
  {
LABEL_16:
    v27 = v24;
  }
  else
  {
    *v27 = 0;
    v27[1] = 0;
    v27[2] = 0;
    --*(_DWORD *)(v12 - 16);
    v12 = qword_1ECE81ED0;
  }
  *v27 = v13;
  v27[1] = v14;
  v27[2] = (unint64_t)this;
  ++*(_DWORD *)(v12 - 12);
  if (qword_1ECE81ED0)
    v29 = *(_DWORD *)(qword_1ECE81ED0 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(qword_1ECE81ED0 - 16) + v29);
  v31 = *(unsigned int *)(qword_1ECE81ED0 - 4);
  if (v31 <= 0x400)
  {
    if (3 * v31 > 4 * v30)
      goto LABEL_36;
    if (!(_DWORD)v31)
    {
      v32 = 8;
      goto LABEL_35;
    }
LABEL_32:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(qword_1ECE81ED0 - 12) >= (2 * v31));
LABEL_35:
    WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::MemoryCursor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::MemoryCursor *>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WebCore::IDBServer::MemoryCursor *,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBServer::MemoryCursor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v32);
    goto LABEL_36;
  }
  if (v31 <= 2 * v30)
    goto LABEL_32;
LABEL_36:
  v33 = __ldxr((unsigned __int8 *)&_MergedGlobals_135);
  if (v33 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_135))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_135);
  return this;
}

void WebCore::IDBServer::MemoryCursor::~MemoryCursor(WebCore::IDBServer::MemoryCursor *this)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;

  *(_QWORD *)this = off_1E335A188;
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_135))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_135))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_135);
LABEL_5:
  if ((byte_1ECE81EC9 & 1) != 0)
  {
    if (qword_1ECE81ED0)
    {
      v3 = *((_QWORD *)this + 1);
      v4 = *((_QWORD *)this + 2);
      v5 = *(_DWORD *)(qword_1ECE81ED0 - 8);
      v6 = (v3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v3 - 1640531527) << 16) ^ ((unsigned __int16)v3
                                                                                              - 1640531527);
      v7 = (v3 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(v3) + (v6 >> 11)) << 16) ^ (v6 + WORD2(v3) + (v6 >> 11));
      v8 = (v4 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v4 + (v7 >> 11)) << 16) ^ (v7 + (unsigned __int16)v4 + (v7 >> 11));
      v9 = (v4 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(v4) + (v8 >> 11)) << 16) ^ (v8 + WORD2(v4) + (v8 >> 11));
      v10 = (v9 + (v9 >> 11)) ^ (8 * (v9 + (v9 >> 11)));
      v11 = (v10 + (v10 >> 5)) ^ (4 * (v10 + (v10 >> 5)));
      v12 = (v11 + (v11 >> 15)) ^ ((v11 + (v11 >> 15)) << 10);
      if (!v12)
        v12 = 0x800000;
      v13 = v5 & v12;
      v14 = (uint64_t *)(qword_1ECE81ED0 + 24 * (v5 & v12));
      v15 = *v14;
      v16 = v14[1];
      if (*(_OWORD *)v14 == 0)
      {
LABEL_15:
        v18 = *(_DWORD *)(qword_1ECE81ED0 - 4);
        v14 = (uint64_t *)(qword_1ECE81ED0 + 24 * v18);
      }
      else
      {
        v17 = 1;
        while (v15 == -1 || v15 != v3 || v16 != v4)
        {
          v13 = (v13 + v17) & v5;
          v14 = (uint64_t *)(qword_1ECE81ED0 + 24 * v13);
          v15 = *v14;
          v16 = v14[1];
          ++v17;
          if (*(_OWORD *)v14 == 0)
            goto LABEL_15;
        }
        v18 = *(_DWORD *)(qword_1ECE81ED0 - 4);
      }
      if ((uint64_t *)(qword_1ECE81ED0 + 24 * v18) != v14)
      {
        *v14 = -1;
        v19 = qword_1ECE81ED0;
        ++*(_DWORD *)(qword_1ECE81ED0 - 16);
        v20 = v19 ? *(_DWORD *)(v19 - 12) - 1 : -1;
        *(_DWORD *)(v19 - 12) = v20;
        if (qword_1ECE81ED0)
        {
          v21 = *(_DWORD *)(qword_1ECE81ED0 - 4);
          if (6 * *(_DWORD *)(qword_1ECE81ED0 - 12) < v21 && v21 >= 9)
            WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::MemoryCursor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::MemoryCursor *>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WebCore::IDBServer::MemoryCursor *,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBServer::MemoryCursor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v21 >> 1);
        }
      }
    }
  }
  else
  {
    qword_1ECE81ED0 = 0;
    byte_1ECE81EC9 = 1;
  }
  v23 = __ldxr((unsigned __int8 *)&_MergedGlobals_135);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_135))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_135);
  v24 = *((unsigned int *)this + 28);
  if ((_DWORD)v24 != -1)
    ((void (*)(char *, char *))off_1E335A328[v24])(&v26, (char *)this + 96);
  *((_DWORD *)this + 28) = -1;
  v25 = *((unsigned int *)this + 20);
  if ((_DWORD)v25 != -1)
    ((void (*)(char *, char *))off_1E335A328[v25])(&v27, (char *)this + 64);
  *((_DWORD *)this + 20) = -1;
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::MemoryIDBBackingStore(WebCore::IDBServer::MemoryIDBBackingStore *this, const WebCore::IDBDatabaseIdentifier *a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  char v9;

  *(_QWORD *)this = off_1E335A5B0;
  if (WTF::isMainThread(this))
  {
    result = 102;
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)this = off_1E335A1B8;
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v4 += 2;
    *((_BYTE *)this + 16) = 0;
    *((_QWORD *)this + 1) = v4;
    *((_DWORD *)this + 10) = -1;
    v5 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_0[v5])(&v8);
      *((_DWORD *)this + 10) = v5;
    }
    *((_BYTE *)this + 48) = 0;
    *((_DWORD *)this + 18) = -1;
    v6 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_0[v6])(&v9);
      *((_DWORD *)this + 18) = v6;
    }
    *((_BYTE *)this + 80) = *((_BYTE *)a2 + 72);
    *(_OWORD *)((char *)this + 88) = 0u;
    *(_OWORD *)((char *)this + 104) = 0u;
    return (uint64_t)this;
  }
  return result;
}

{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  char v9;

  *(_QWORD *)this = off_1E335A5B0;
  if (WTF::isMainThread(this))
  {
    result = 102;
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)this = off_1E335A1B8;
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v4 += 2;
    *((_BYTE *)this + 16) = 0;
    *((_QWORD *)this + 1) = v4;
    *((_DWORD *)this + 10) = -1;
    v5 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_0[v5])(&v8);
      *((_DWORD *)this + 10) = v5;
    }
    *((_BYTE *)this + 48) = 0;
    *((_DWORD *)this + 18) = -1;
    v6 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_0[v6])(&v9);
      *((_DWORD *)this + 18) = v6;
    }
    *((_BYTE *)this + 80) = *((_BYTE *)a2 + 72);
    *(_OWORD *)((char *)this + 88) = 0u;
    *(_OWORD *)((char *)this + 104) = 0u;
    return (uint64_t)this;
  }
  return result;
}

void WebCore::IDBServer::MemoryIDBBackingStore::~MemoryIDBBackingStore(WTF::StringImpl ***this, void *a2)
{
  void *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WebCore::IDBServer::MemoryObjectStore **v6;
  WebCore::IDBServer::MemoryObjectStore *v7;
  WTF *v8;
  void *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WebCore::IDBServer::MemoryBackingStoreTransaction **v12;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WebCore::IDBObjectStoreInfo *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  char v24;
  char v25;

  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(this + 14, a2);
  v4 = this[13];
  if (v4)
  {
    v5 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = v4 + 1;
      do
      {
        if (*(v6 - 1) != (WebCore::IDBServer::MemoryObjectStore *)-1)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v7, v3);
              WTF::fastFree(v8, v9);
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 2), v3);
  }
  v10 = this[12];
  if (v10)
  {
    v11 = *((unsigned int *)v10 - 1);
    if ((_DWORD)v11)
    {
      v12 = v10 + 2;
      do
      {
        if (*(v12 - 2) != (WebCore::IDBServer::MemoryBackingStoreTransaction *)-1)
        {
          v13 = *v12;
          *v12 = 0;
          if (v13)
          {
            WebCore::IDBServer::MemoryBackingStoreTransaction::~MemoryBackingStoreTransaction(v13, v3);
            WTF::fastFree(v14, v15);
          }
        }
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v10 - 2), v3);
  }
  v16 = this[11];
  this[11] = 0;
  if (v16)
  {
    v17 = v16[4];
    if (v17)
    {
      v18 = *((unsigned int *)v17 - 1);
      if ((_DWORD)v18)
      {
        v19 = (WTF::StringImpl *)((char *)v17 + 8);
        do
        {
          if (*((_QWORD *)v19 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v19, (WTF::StringImpl *)v3);
          v19 = (WebCore::IDBObjectStoreInfo *)((char *)v19 + 72);
          --v18;
        }
        while (v18);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v17 - 16), v3);
    }
    v20 = *v16;
    *v16 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v20 -= 2;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v16, v3);
  }
  v21 = *((unsigned int *)this + 18);
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, WTF::StringImpl ***))off_1E335A4B0[v21])(&v24, this + 6);
  *((_DWORD *)this + 18) = -1;
  v22 = *((unsigned int *)this + 10);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, WTF::StringImpl ***))off_1E335A4B0[v22])(&v25, this + 2);
  *((_DWORD *)this + 10) = -1;
  v23 = (WTF::StringImpl *)this[1];
  this[1] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      v23 = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v23 -= 2;
  }
  *this = (WTF::StringImpl **)off_1E335A5B0;
  if (WTF::isMainThread(v23))
    __break(0xC471u);
}

{
  WTF *v2;
  void *v3;

  WebCore::IDBServer::MemoryIDBBackingStore::~MemoryIDBBackingStore(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::databaseVersion(WebCore::IDBServer::MemoryIDBBackingStore *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 11);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

void WebCore::IDBServer::MemoryIDBBackingStore::beginTransaction(WebCore::IDBServer::MemoryIDBBackingStore *this@<X0>, const WebCore::IDBTransactionInfo *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  __int128 v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WebCore::IDBObjectStoreInfo *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::IDBObjectStoreInfo *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const WTF::StringImpl **v35;
  const WTF::StringImpl **v36;
  uint64_t v37;
  _QWORD *v38;
  WebCore::IDBServer::MemoryObjectStore *v39;
  void *v40;
  _QWORD *v41;
  WTF *v42;
  void *v43;
  const WTF::StringImpl **v44;
  uint64_t v45;
  WebCore::IDBServer::MemoryObjectStore *v46;
  void *v47;
  const WTF::StringImpl **v48;
  WTF *v49;
  void *v50;
  const WTF::StringImpl **v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v79;
  WTF *v80;
  void *v81;
  uint64_t v82;
  WebCore::IDBServer::MemoryObjectStore *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85[4];
  uint64_t v86;

  v7 = (uint64_t *)((char *)this + 96);
  v6 = *((_QWORD *)this + 12);
  if (!v6
    || !WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(v6, *(_QWORD *)a2, *((_QWORD *)a2 + 1)))
  {
    v11 = WTF::fastMalloc((WTF *)0xB8);
    *(_QWORD *)v11 = this;
    WebCore::IDBTransactionInfo::IDBTransactionInfo(v11 + 8, a2);
    *(_QWORD *)(v11 + 64) = 0;
    *(_WORD *)(v11 + 72) = 1;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_OWORD *)(v11 + 128) = 0u;
    *(_OWORD *)(v11 + 144) = 0u;
    *(_OWORD *)(v11 + 160) = 0u;
    *(_QWORD *)(v11 + 176) = 0;
    v14 = *(unsigned __int8 *)(v11 + 24);
    if (v14 == 2)
    {
      v86 = 0;
      memset(v85, 0, sizeof(v85));
      WebCore::IDBServer::MemoryIDBBackingStore::getOrEstablishDatabaseInfo(*(WebCore::IDBServer::MemoryIDBBackingStore **)v11, (WebCore::IDBDatabaseInfo *)v85, (uint64_t)&v83);
      if (!BYTE1(v83))
      {
        v15 = bmalloc::api::isoAllocate();
        v16 = v15;
        v17 = v85[0];
        if (v85[0])
          *(_DWORD *)v85[0] += 2;
        *(_QWORD *)v15 = v17;
        v18 = *(_OWORD *)&v85[1];
        *(WTF::StringImpl **)(v15 + 24) = v85[3];
        *(_OWORD *)(v15 + 8) = v18;
        WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v15 + 32), &v86);
        v19 = *(WTF::StringImpl ***)(v11 + 64);
        *(_QWORD *)(v11 + 64) = v16;
        if (v19)
        {
          v20 = v19[4];
          if (v20)
          {
            v21 = *((unsigned int *)v20 - 1);
            if ((_DWORD)v21)
            {
              v22 = (WTF::StringImpl *)((char *)v20 + 8);
              do
              {
                if (*((_QWORD *)v22 - 1) != -1)
                  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v22, v12);
                v22 = (WebCore::IDBObjectStoreInfo *)((char *)v22 + 72);
                --v21;
              }
              while (v21);
            }
            WTF::fastFree((WTF::StringImpl *)((char *)v20 - 16), v12);
          }
          v23 = *v19;
          *v19 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v12);
            else
              *(_DWORD *)v23 -= 2;
          }
          bmalloc::api::isoDeallocate((bmalloc::api *)v19, v12);
        }
      }
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
          WTF::StringImpl::destroy(v84, v12);
        else
          *(_DWORD *)v84 -= 2;
      }
      v24 = v86;
      if (v86)
      {
        v25 = *(unsigned int *)(v86 - 4);
        if ((_DWORD)v25)
        {
          v26 = (WebCore::IDBObjectStoreInfo *)(v86 + 8);
          do
          {
            if (*((_QWORD *)v26 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v26, v12);
            v26 = (WebCore::IDBObjectStoreInfo *)((char *)v26 + 72);
            --v25;
          }
          while (v25);
        }
        WTF::fastFree((WTF *)(v24 - 16), v12);
      }
      v27 = v85[0];
      v85[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v12);
        else
          *(_DWORD *)v27 -= 2;
      }
      v14 = *(unsigned __int8 *)(v11 + 24);
    }
    if (!v14)
      goto LABEL_101;
    if (v14 == 2)
    {
      v28 = *((_QWORD *)this + 13);
      if (v28)
      {
        v29 = *(unsigned int *)(v28 - 4);
        v30 = (_QWORD *)(v28 + 16 * v29);
        if (*(_DWORD *)(v28 - 12))
        {
          v31 = (_QWORD *)*((_QWORD *)this + 13);
          if ((_DWORD)v29)
          {
            v32 = 16 * v29;
            v31 = (_QWORD *)*((_QWORD *)this + 13);
            while ((unint64_t)(*v31 + 1) <= 1)
            {
              v31 += 2;
              v32 -= 16;
              if (!v32)
              {
                v31 = v30;
                goto LABEL_56;
              }
            }
          }
          goto LABEL_56;
        }
        v31 = (_QWORD *)(v28 + 16 * v29);
      }
      else
      {
        v31 = 0;
        v29 = 0;
      }
      v30 = (_QWORD *)(v28 + 16 * v29);
LABEL_56:
      if (v28)
        v38 = (_QWORD *)(v28 + 16 * *(unsigned int *)(v28 - 4));
      else
        v38 = 0;
      while (v31 != v38)
      {
        v39 = (WebCore::IDBServer::MemoryObjectStore *)v31[1];
        ++*(_DWORD *)v39;
        v83 = v39;
        WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>::add((WebCore::IDBServer::MemoryObjectStore *)v85, (uint64_t *)(v11 + 80), &v83);
        if (v83)
        {
          if (*(_DWORD *)v83 == 1)
          {
            WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v83, v40);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v83;
          }
        }
        *((_QWORD *)v39 + 10) = v11;
        v82 = *((_QWORD *)v39 + 11);
        v83 = v39;
        WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,unsigned long long,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long>(v85, (uint64_t *)(v11 + 112), (uint64_t *)&v83, &v82);
        v41 = v31 + 2;
        v31 = v30;
        if (v41 != v30)
        {
          v31 = v41;
          while ((unint64_t)(*v31 + 1) <= 1)
          {
            v31 += 2;
            if (v31 == v30)
            {
              v31 = v30;
              break;
            }
          }
        }
      }
      goto LABEL_101;
    }
    v33 = *((_QWORD *)this + 14);
    if (v33)
    {
      v34 = *(unsigned int *)(v33 - 4);
      v35 = (const WTF::StringImpl **)(v33 + 16 * v34);
      if (*(_DWORD *)(v33 - 12))
      {
        v36 = (const WTF::StringImpl **)*((_QWORD *)this + 14);
        if ((_DWORD)v34)
        {
          v37 = 16 * v34;
          v36 = (const WTF::StringImpl **)*((_QWORD *)this + 14);
          while ((unint64_t)*v36 + 1 <= 1)
          {
            v36 += 2;
            v37 -= 16;
            if (!v37)
            {
              v36 = v35;
              goto LABEL_73;
            }
          }
        }
        goto LABEL_73;
      }
      v36 = (const WTF::StringImpl **)(v33 + 16 * v34);
    }
    else
    {
      v36 = 0;
      v34 = 0;
    }
    v35 = (const WTF::StringImpl **)(v33 + 16 * v34);
LABEL_73:
    if (v33)
      v44 = (const WTF::StringImpl **)(v33 + 16 * *(unsigned int *)(v33 - 4));
    else
      v44 = 0;
    if (v44 != v36)
    {
      if (*((_DWORD *)a2 + 11))
      {
LABEL_78:
        v45 = 0;
        while ((WTF::equal(*(WTF **)(*((_QWORD *)a2 + 4) + 8 * v45), *v36, v13) & 1) == 0)
        {
          if (++v45 >= (unint64_t)*((unsigned int *)a2 + 11))
            goto LABEL_86;
        }
        v46 = v36[1];
        ++*(_DWORD *)v46;
        v83 = v46;
        WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>::add((WebCore::IDBServer::MemoryObjectStore *)v85, (uint64_t *)(v11 + 80), &v83);
        if (v83)
        {
          if (*(_DWORD *)v83 == 1)
          {
            WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v83, v47);
            WTF::fastFree(v49, v50);
          }
          else
          {
            --*(_DWORD *)v83;
          }
        }
        *((_QWORD *)v46 + 10) = v11;
        v82 = *((_QWORD *)v46 + 11);
        v83 = v46;
        WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,unsigned long long,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long>(v85, (uint64_t *)(v11 + 112), (uint64_t *)&v83, &v82);
        while (1)
        {
LABEL_86:
          v48 = v36 + 2;
          v36 = v35;
          if (v48 != v35)
          {
            v36 = v48;
            while ((unint64_t)*v36 + 1 <= 1)
            {
              v36 += 2;
              if (v36 == v35)
              {
                v36 = v35;
                break;
              }
            }
          }
          if (v36 == v44)
            break;
          if (*((_DWORD *)a2 + 11))
            goto LABEL_78;
        }
      }
      else
      {
        do
        {
          v51 = v36 + 2;
          v36 = v35;
          if (v51 != v35)
          {
            v36 = v51;
            while ((unint64_t)*v36 + 1 <= 1)
            {
              v36 += 2;
              if (v36 == v35)
              {
                v36 = v35;
                break;
              }
            }
          }
        }
        while (v36 != v44);
      }
    }
LABEL_101:
    v52 = *v7;
    if (*v7
      || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v7, 8u), (v52 = *v7) != 0))
    {
      v53 = *(_DWORD *)(v52 - 8);
    }
    else
    {
      v53 = 0;
    }
    v54 = *((_QWORD *)a2 + 1);
    v55 = (*(_QWORD *)a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_QWORD *)a2 - 1640531527) << 16) ^ ((unsigned __int16)*(_QWORD *)a2 - 1640531527);
    v56 = v55 + (unsigned __int16)WORD2(*(_QWORD *)a2) + (v55 >> 11);
    v57 = (*(_QWORD *)a2 >> 37) & 0x7FFF800 ^ (v56 << 16) ^ v56;
    v58 = (v54 >> 5) & 0x7FFF800 ^ ((v57 + (unsigned __int16)v54 + (v57 >> 11)) << 16) ^ (v57 + (unsigned __int16)v54 + (v57 >> 11));
    v59 = (v54 >> 37) & 0x7FFF800 ^ ((v58 + WORD2(v54) + (v58 >> 11)) << 16) ^ (v58 + WORD2(v54) + (v58 >> 11));
    v60 = (v59 + (v59 >> 11)) ^ (8 * (v59 + (v59 >> 11)));
    v61 = (v60 + (v60 >> 5)) ^ (4 * (v60 + (v60 >> 5)));
    v62 = (v61 + (v61 >> 15)) ^ ((v61 + (v61 >> 15)) << 10);
    if (!v62)
      v62 = 0x800000;
    v63 = v62 & v53;
    v64 = (_QWORD *)(v52 + 24 * (v62 & v53));
    v66 = *v64;
    v65 = v64[1];
    if (*(_OWORD *)v64 != 0)
    {
      v67 = 0;
      v68 = 1;
      do
      {
        if (v66 == -1)
        {
          v67 = v64;
        }
        else if (v66 == *(_QWORD *)a2 && v65 == v54)
        {
          v79 = (WebCore::IDBServer::MemoryBackingStoreTransaction *)v64[2];
          v64[2] = v11;
          if (v79)
          {
            WebCore::IDBServer::MemoryBackingStoreTransaction::~MemoryBackingStoreTransaction(v79, v12);
            WTF::fastFree(v80, v81);
          }
          goto LABEL_133;
        }
        v63 = (v63 + v68) & v53;
        v64 = (_QWORD *)(v52 + 24 * v63);
        v66 = *v64;
        v65 = v64[1];
        ++v68;
      }
      while (*(_OWORD *)v64 != 0);
      if (v67)
      {
        *v67 = 0;
        v67[1] = 0;
        v67[2] = 0;
        --*(_DWORD *)(*v7 - 16);
        v64 = v67;
      }
    }
    *(_OWORD *)v64 = *(_OWORD *)a2;
    v69 = (WebCore::IDBServer::MemoryBackingStoreTransaction *)v64[2];
    v64[2] = v11;
    if (v69)
    {
      WebCore::IDBServer::MemoryBackingStoreTransaction::~MemoryBackingStoreTransaction(v69, v12);
      WTF::fastFree(v70, v71);
    }
    v72 = *v7;
    if (*v7)
      v73 = *(_DWORD *)(v72 - 12) + 1;
    else
      v73 = 1;
    *(_DWORD *)(v72 - 12) = v73;
    v74 = *v7;
    if (*v7)
      v75 = *(_DWORD *)(v74 - 12);
    else
      v75 = 0;
    v76 = (*(_DWORD *)(v74 - 16) + v75);
    v77 = *(unsigned int *)(v74 - 4);
    if (v77 > 0x400)
    {
      if (v77 > 2 * v76)
        goto LABEL_133;
    }
    else
    {
      if (3 * v77 > 4 * v76)
      {
LABEL_133:
        *(_WORD *)a3 = 0;
        goto LABEL_134;
      }
      if (!(_DWORD)v77)
      {
        v78 = 8;
        goto LABEL_132;
      }
    }
    v78 = (_DWORD)v77 << (6 * *(_DWORD *)(v74 - 12) >= (2 * v77));
LABEL_132:
    WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v7, v78);
    goto LABEL_133;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a3 = 264;
  v9 = v85[0];
  if (!v85[0])
  {
LABEL_134:
    *(_QWORD *)(a3 + 8) = 0;
    return;
  }
  v10 = *(_DWORD *)v85[0];
  *(_DWORD *)v85[0] += 2;
  *(_QWORD *)(a3 + 8) = v9;
  v85[0] = 0;
  if (v10)
    *(_DWORD *)v9 = v10;
  else
    WTF::StringImpl::destroy(v9, v8);
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::abortTransaction@<X0>(WebCore::IDBServer::MemoryIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  const WTF::StringImpl *v5;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  void *v33;
  WTF **v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v51;
  WTF::StringImpl *v52;
  unsigned int v53;
  unsigned int v54;
  WTF *v55;
  void *v56;
  WTF *v57;
  void *v58;
  WTF *v59;
  void *v60;
  WTF *v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl **v70;
  uint64_t v71;
  WTF::StringImpl **v72;
  uint64_t v73;
  _DWORD **v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t *v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  int i;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  _DWORD *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl **v91;
  uint64_t v92;
  WTF::StringImpl **v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  WTF::StringImpl *v117;
  unsigned int v118;
  int v119;
  int j;
  uint64_t v121;
  WTF *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  _QWORD *v134;
  WebCore::IDBServer::MemoryObjectStore *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v142;
  WTF *v143;
  void *v144;
  uint64_t v145;
  unsigned int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unsigned int v157;
  uint64_t v158;
  int v159;
  _BOOL4 v160;
  unsigned int v161;
  unsigned int v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  WebCore::IDBServer::MemoryIndex *v165;
  WTF *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  unsigned int v174;
  unsigned int v175;
  unint64_t v176;
  uint64_t *v177;
  double v178;
  double v179;
  double v180;
  unsigned int v181;
  WebCore::IDBServer::MemoryObjectStore **v182;
  uint64_t v183;
  WebCore::IDBServer::MemoryObjectStore **v184;
  WebCore::IDBServer::MemoryObjectStore *v185;
  WTF *v186;
  void *v187;
  WTF::StringImpl **v188;
  uint64_t v189;
  WTF::StringImpl **v190;
  WTF::StringImpl **v191;
  uint64_t v192;
  WTF::StringImpl **v193;
  uint64_t *v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  uint64_t v197;
  int v198;
  WTF::StringImpl *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unsigned int v203;
  WTF::StringImpl *v204;
  const WTF::StringImpl *v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  unint64_t v212;
  unsigned int v213;
  WTF::StringImpl **v214;
  WTF *v215;
  void *v216;
  uint64_t v217;
  WTF::StringImpl **v218;
  WTF::StringImpl *v219;
  WebCore::IDBServer::MemoryObjectStore *v220;
  WTF *v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _DWORD *v227;
  __int128 v228;
  WTF::StringImpl **v229;
  WTF::StringImpl *v230;
  uint64_t v231;
  WebCore::IDBObjectStoreInfo *v232;
  WTF::StringImpl *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  WTF **v242;
  uint64_t *v243;
  uint64_t v244;
  WTF ***v245;
  WTF **v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  void *v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t *v275;
  void *v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  unsigned int *v291;
  unsigned int v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  WTF::StringImpl *v297;
  int v298;
  char v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  WTF::StringImpl *v306;
  WebCore::IDBServer::MemoryIndex *v307;
  WTF *v308;
  WTF *v309;
  uint64_t v310;
  unsigned int v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  uint64_t v319;
  uint64_t v320;
  _DWORD *v321;
  uint64_t v322;
  WTF::StringImpl *v323;
  WTF *v324;
  WTF *v325;
  WTF *v326;
  unsigned int v327;
  unsigned int v328;
  uint64_t v329;
  WTF::StringImpl **v331;
  uint64_t v332;
  WTF::StringImpl *v333;
  WTF::StringImpl **v334;
  uint64_t v335;
  WTF::StringImpl *v336;
  uint64_t v337;
  WTF::StringImpl **v338;
  WTF::StringImpl *v339;
  uint64_t v340;
  WTF::StringImpl **v341;
  WTF::StringImpl *v342;
  WTF *v343;
  WTF *v344;
  uint64_t *v345;
  void *v346;
  uint64_t *v347;
  void *v348;
  uint64_t *v349;
  uint64_t v350;
  unsigned int v351;
  unsigned int v352;
  uint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v357;
  _QWORD *v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unsigned int v368;
  uint64_t *v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  unsigned int v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  WebCore::IDBServer::MemoryIndex **v382;
  WTF **v383;
  unsigned int v384;
  unsigned int v385;
  _QWORD *v386;
  WTF *v387;
  void *v388;
  uint64_t v389;
  WTF::StringImpl **v390;
  WTF::StringImpl *v391;
  WebCore::IDBServer::MemoryIndex *v392;
  WTF *v393;
  void *v394;
  void *v395;
  WTF *v396;
  void *v397;
  char v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t *v401;
  uint64_t *v402;
  uint64_t *v403;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v404;
  WTF::StringImpl **v405;
  WTF::StringImpl *v406;
  uint64_t *v407;
  uint64_t v408;
  uint64_t v409;
  _QWORD *v410;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v411;
  WTF *v412;
  __int128 v413;
  __int128 v414;
  WebCore::IDBServer::MemoryIndex *v415;
  WTF::StringImpl *v416;
  uint64_t *v417;
  uint64_t *v418;
  char v419[8];
  WTF::StringImpl *v420;
  WTF::StringImpl *v421;
  WTF::StringImpl *v422;
  _BYTE v423[16];
  int v424;
  char v425;
  char v426;
  uint64_t v427;
  char v428;
  _BYTE v429[16];
  int v430;
  __int128 v431;
  __int128 v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  WebCore::IDBServer::MemoryIndex *v436[2];
  int v437;
  char v438;
  WebCore::IDBServer::MemoryIndex *v439[2];

  WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>,WTF::HashTableTraits>::take((uint64_t *)&v411, (uint64_t *)this + 12, *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  v6 = v411;
  if (!v411)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a3 = 264;
    result = (uint64_t)v421;
    if (v421)
    {
      v15 = *(_DWORD *)v421;
      *(_DWORD *)v421 += 2;
      *(_QWORD *)(a3 + 8) = result;
      v421 = 0;
      if (v15)
        *(_DWORD *)result = v15;
      else
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
    }
    return result;
  }
  v399 = a3;
  v398 = *((_BYTE *)v411 + 73);
  *((_BYTE *)v411 + 73) = 1;
  v7 = *((_QWORD *)v6 + 21);
  v404 = v6;
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = (uint64_t *)(v7 + 16 * v8);
    if (*(_DWORD *)(v7 - 12))
    {
      v10 = (uint64_t *)*((_QWORD *)v6 + 21);
      if ((_DWORD)v8)
      {
        v11 = 16 * v8;
        v10 = (uint64_t *)*((_QWORD *)v6 + 21);
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          v11 -= 16;
          if (!v11)
          {
            v10 = v9;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v10 = (uint64_t *)(v7 + 16 * v8);
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = (uint64_t *)(v7 + 16 * v8);
  if (!v7)
  {
    v12 = 0;
    goto LABEL_17;
  }
LABEL_9:
  v12 = (uint64_t *)(v7 + 16 * *(unsigned int *)(v7 - 4));
LABEL_17:
  if (v12 == v10)
    goto LABEL_110;
  v407 = v12;
  do
  {
    v16 = *v10;
    v17 = (const WTF::StringImpl *)v10[1];
    if (v17)
      *(_DWORD *)v17 += 2;
    v18 = *(WTF::StringImpl **)(v16 + 8);
    v19 = *((_QWORD *)v404 + 12);
    if (v19)
    {
      v20 = *(unsigned int *)(v19 - 4);
      v21 = (uint64_t *)(v19 + 8 * v20);
      if (*(_DWORD *)(v19 - 12))
      {
        v22 = (uint64_t *)*((_QWORD *)v404 + 12);
        if ((_DWORD)v20)
        {
          v23 = 8 * v20;
          v22 = (uint64_t *)*((_QWORD *)v404 + 12);
          while ((unint64_t)(*v22 + 1) <= 1)
          {
            ++v22;
            v23 -= 8;
            if (!v23)
            {
              v22 = v21;
              break;
            }
          }
        }
LABEL_28:
        v24 = (uint64_t *)(v19 + 8 * *(unsigned int *)(v19 - 4));
        goto LABEL_33;
      }
      v22 = (uint64_t *)(v19 + 8 * v20);
    }
    else
    {
      v22 = 0;
      v20 = 0;
    }
    v21 = (uint64_t *)(v19 + 8 * v20);
    if (v19)
      goto LABEL_28;
    v24 = 0;
LABEL_33:
    if (v24 == v22)
    {
LABEL_48:
      v25 = 0;
      goto LABEL_49;
    }
    while (1)
    {
      v25 = *v22;
      if (*v22)
        ++*(_DWORD *)v25;
      if (WTF::equal(*(WTF **)(v25 + 24), v17, v5) && *(WTF::StringImpl **)(v25 + 8) != v18)
        break;
      if (*(_DWORD *)v25 == 1)
      {
        WebCore::IDBServer::MemoryIndex::~MemoryIndex((WebCore::IDBServer::MemoryIndex *)v25, v4);
        WTF::fastFree(v27, v28);
      }
      else
      {
        --*(_DWORD *)v25;
      }
      v26 = v22 + 1;
      v22 = v21;
      if (v26 != v21)
      {
        v22 = v26;
        while ((unint64_t)(*v22 + 1) <= 1)
        {
          if (++v22 == v21)
          {
            v22 = v21;
            break;
          }
        }
      }
      if (v22 == v24)
        goto LABEL_48;
    }
    v43 = (*(_DWORD *)v25)++;
    if (v43)
    {
      *(_DWORD *)v25 = v43;
    }
    else
    {
      WebCore::IDBServer::MemoryIndex::~MemoryIndex((WebCore::IDBServer::MemoryIndex *)v25, v4);
      WTF::fastFree(v61, v62);
    }
    v44 = *(_QWORD *)(v25 + 64);
    if (v44)
    {
      do
        v45 = __ldaxr((unsigned int *)v44);
      while (__stlxr(v45 + 1, (unsigned int *)v44));
      v46 = *(_QWORD *)(v44 + 8);
      do
      {
        v47 = __ldaxr((unsigned int *)v44);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, (unsigned int *)v44));
      if (v48)
      {
        if (!v46)
          goto LABEL_49;
      }
      else
      {
        atomic_store(1u, (unsigned int *)v44);
        WTF::fastFree((WTF *)v44, v4);
        if (!v46)
          goto LABEL_49;
      }
      v49 = *(_QWORD *)(v25 + 64);
      if (v49)
      {
        do
          v50 = __ldaxr((unsigned int *)v49);
        while (__stlxr(v50 + 1, (unsigned int *)v49));
        v51 = *(WebCore::IDBServer::MemoryBackingStoreTransaction **)(v49 + 8);
      }
      else
      {
        v51 = 0;
      }
      WebCore::IDBServer::MemoryObjectStore::deleteIndex((uint64_t)v419, v51, (uint64_t)v404, *(_QWORD *)(v25 + 8));
      v52 = v420;
      v420 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 != 2)
        {
          *(_DWORD *)v52 -= 2;
          goto LABEL_93;
        }
        WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v4);
        if (!v49)
          goto LABEL_49;
      }
      else
      {
LABEL_93:
        if (!v49)
          goto LABEL_49;
      }
      do
      {
        v53 = __ldaxr((unsigned int *)v49);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, (unsigned int *)v49));
      if (!v54)
      {
        atomic_store(1u, (unsigned int *)v49);
        WTF::fastFree((WTF *)v49, v4);
      }
    }
LABEL_49:
    v29 = *(_QWORD *)(v16 + 64);
    if (!v29)
      goto LABEL_66;
    do
      v30 = __ldaxr((unsigned int *)v29);
    while (__stlxr(v30 + 1, (unsigned int *)v29));
    v31 = *(_QWORD *)(v29 + 8);
    if (v31)
    {
      WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::take((uint64_t *)&v421, (uint64_t *)(v31 + 112), (uint64_t)v18);
      v32 = v421;
      if (v421)
      {
        WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::take((uint64_t)&v412, (WTF::StringImpl *)(v31 + 120), (WTF::StringImpl **)v421 + 3);
        if (*(_DWORD *)v32 == 1)
        {
          WebCore::IDBServer::MemoryIndex::~MemoryIndex(v32, v33);
          WTF::fastFree(v57, v58);
        }
        else
        {
          --*(_DWORD *)v32;
        }
      }
      else
      {
        v412 = 0;
      }
      v34 = (WTF **)v412;
      v415 = v412;
      v35 = *(_QWORD *)(v29 + 8);
      v421 = v18;
      WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::remove((uint64_t *)(v35 + 72), (WTF::StringImpl *)&v421);
      if (v17)
        *(_DWORD *)v17 += 2;
      v37 = *(WTF::StringImpl **)(v16 + 24);
      *(_QWORD *)(v16 + 24) = v17;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v36);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = (uint64_t *)(*(_QWORD *)(v29 + 8) + 72);
      v412 = *(WTF **)(v16 + 8);
      WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBIndexInfo&>(v38, (WTF::StringImpl *)&v412, v16 + 8, (uint64_t)&v421);
      v39 = *(_QWORD *)(v29 + 8);
      v412 = v34[1];
      v436[0] = (WebCore::IDBServer::MemoryIndex *)v34;
      WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::IDBServer::MemoryIndex*>((uint64_t)&v421, (uint64_t *)(v39 + 120), v34 + 3, v436);
      WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::Ref<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>((uint64_t)&v421, (uint64_t *)(v39 + 112), (uint64_t *)&v412, (uint64_t *)&v415);
      if (v415)
      {
        if (*(_DWORD *)v415 == 1)
        {
          WebCore::IDBServer::MemoryIndex::~MemoryIndex(v415, v4);
          WTF::fastFree(v59, v60);
        }
        else
        {
          --*(_DWORD *)v415;
        }
      }
    }
    do
    {
      v40 = __ldaxr((unsigned int *)v29);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, (unsigned int *)v29));
    if (!v41)
    {
      atomic_store(1u, (unsigned int *)v29);
      WTF::fastFree((WTF *)v29, v4);
      if (!v25)
        goto LABEL_69;
    }
    else
    {
LABEL_66:
      if (!v25)
        goto LABEL_69;
    }
    if (*(_DWORD *)v25 == 1)
    {
      WebCore::IDBServer::MemoryIndex::~MemoryIndex((WebCore::IDBServer::MemoryIndex *)v25, v4);
      WTF::fastFree(v55, v56);
    }
    else
    {
      --*(_DWORD *)v25;
    }
LABEL_69:
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v17 -= 2;
    }
    v42 = v10 + 2;
    v10 = v9;
    if (v42 != v9)
    {
      v10 = v42;
      while ((unint64_t)(*v10 + 1) <= 1)
      {
        v10 += 2;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
  }
  while (v10 != v407);
  v7 = *((_QWORD *)v404 + 21);
LABEL_110:
  v63 = (uint64_t *)v404;
  if (v7)
  {
    *((_QWORD *)v404 + 21) = 0;
    v64 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v64)
    {
      v65 = (WTF::StringImpl **)(v7 + 8);
      do
      {
        if (*(v65 - 1) != (WTF::StringImpl *)-1)
        {
          v66 = *v65;
          *v65 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2)
              WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v66 -= 2;
          }
        }
        v65 += 2;
        --v64;
      }
      while (v64);
    }
    WTF::fastFree((WTF *)(v7 - 16), v4);
  }
  v67 = *((_QWORD *)v404 + 20);
  if (v67)
  {
    v68 = *(unsigned int *)(v67 - 4);
    v69 = (WTF::StringImpl **)(v67 + 16 * v68);
    if (*(_DWORD *)(v67 - 12))
    {
      v70 = (WTF::StringImpl **)*((_QWORD *)v404 + 20);
      if ((_DWORD)v68)
      {
        v71 = 16 * v68;
        v70 = (WTF::StringImpl **)*((_QWORD *)v404 + 20);
        while ((unint64_t)*v70 + 1 <= 1)
        {
          v70 += 2;
          v71 -= 16;
          if (!v71)
          {
            v70 = v69;
            break;
          }
        }
      }
LABEL_128:
      v72 = (WTF::StringImpl **)(v67 + 16 * *(unsigned int *)(v67 - 4));
      goto LABEL_133;
    }
    v70 = (WTF::StringImpl **)(v67 + 16 * v68);
  }
  else
  {
    v70 = 0;
    v68 = 0;
  }
  v69 = (WTF::StringImpl **)(v67 + 16 * v68);
  if (v67)
    goto LABEL_128;
  v72 = 0;
LABEL_133:
  if (v72 == v70)
    goto LABEL_173;
  v405 = v72;
  while (2)
  {
    v73 = *v63;
    v74 = (_DWORD **)(v70 + 1);
    v75 = *v70;
    v77 = (WTF::StringImpl *)*((_QWORD *)*v70 + 2);
    v76 = (WTF::StringImpl *)*((_QWORD *)*v70 + 3);
    if (v76)
      *(_DWORD *)v76 += 2;
    v78 = (uint64_t *)(v73 + 112);
    v79 = *(_QWORD *)(v73 + 112);
    if (v79)
    {
      v406 = v77;
      v408 = v73;
      v80 = *(_DWORD *)(v79 - 8);
      v81 = *((_DWORD *)v76 + 4);
      if (v81 < 0x100)
        v82 = WTF::StringImpl::hashSlowCase(v76);
      else
        v82 = v81 >> 8;
      for (i = 0; ; v82 = i + v84)
      {
        v84 = v82 & v80;
        v85 = *(WTF **)(v79 + 16 * v84);
        if (v85 != (WTF *)-1)
        {
          if (!v85)
          {
            v86 = *v78;
            v72 = v405;
            v77 = v406;
            v73 = v408;
            if (!*v78)
              goto LABEL_155;
            v87 = *(unsigned int *)(v86 - 4);
            v88 = (WTF::StringImpl **)(v86 + 16 * v87);
            goto LABEL_150;
          }
          if ((WTF::equal(v85, v76, v5) & 1) != 0)
            break;
        }
        ++i;
      }
      v88 = (WTF::StringImpl **)(v79 + 16 * v84);
      v86 = *v78;
      v72 = v405;
      v77 = v406;
      if (!*v78)
      {
        v73 = v408;
        goto LABEL_153;
      }
      v87 = *(unsigned int *)(v86 - 4);
      v73 = v408;
LABEL_150:
      v86 += 16 * v87;
      if ((WTF::StringImpl **)v86 == v88)
        goto LABEL_155;
LABEL_153:
      if ((WTF::StringImpl **)v86 != v88)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v78, v88);
    }
LABEL_155:
    v412 = v75;
    WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::IDBServer::MemoryObjectStore*>((uint64_t)&v421, v78, v70 + 1, &v412);
    WebCore::IDBDatabaseInfo::renameObjectStore(*(WTF::StringImpl **)(v73 + 88), v77, v70 + 1);
    v89 = *v74;
    if (*v74)
      *v89 += 2;
    v90 = (WTF::StringImpl *)*((_QWORD *)v75 + 3);
    *((_QWORD *)v75 + 3) = v89;
    v63 = (uint64_t *)v404;
    if (!v90)
    {
LABEL_160:
      if (!v76)
        goto LABEL_163;
      goto LABEL_161;
    }
    if (*(_DWORD *)v90 != 2)
    {
      *(_DWORD *)v90 -= 2;
      goto LABEL_160;
    }
    WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v4);
    if (v76)
    {
LABEL_161:
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v76 -= 2;
    }
LABEL_163:
    v91 = v70 + 2;
    v70 = v69;
    if (v91 != v69)
    {
      v70 = v91;
      while ((unint64_t)*v70 + 1 <= 1)
      {
        v70 += 2;
        if (v70 == v69)
        {
          v70 = v69;
          break;
        }
      }
    }
    if (v70 != v72)
      continue;
    break;
  }
  v67 = *((_QWORD *)v404 + 20);
LABEL_173:
  if (v67)
  {
    v63[20] = 0;
    v92 = *(unsigned int *)(v67 - 4);
    if ((_DWORD)v92)
    {
      v93 = (WTF::StringImpl **)(v67 + 8);
      do
      {
        if (*(v93 - 1) != (WTF::StringImpl *)-1)
        {
          v94 = *v93;
          *v93 = 0;
          if (v94)
          {
            if (*(_DWORD *)v94 == 2)
              WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v94 -= 2;
          }
        }
        v93 += 2;
        --v92;
      }
      while (v92);
    }
    WTF::fastFree((WTF *)(v67 - 16), v4);
  }
  v95 = v63[11];
  if (v95)
  {
    v96 = *(unsigned int *)(v95 - 4);
    v97 = v95 + 8 * v96;
    if (*(_DWORD *)(v95 - 12))
    {
      v98 = v63[11];
      if ((_DWORD)v96)
      {
        v99 = 8 * v96;
        v98 = v63[11];
        while ((unint64_t)(*(_QWORD *)v98 + 1) <= 1)
        {
          v98 += 8;
          v99 -= 8;
          if (!v99)
          {
            v98 = v97;
            break;
          }
        }
      }
LABEL_191:
      v100 = v95 + 8 * *(unsigned int *)(v95 - 4);
      goto LABEL_196;
    }
    v98 = v95 + 8 * v96;
  }
  else
  {
    v98 = 0;
    v96 = 0;
  }
  v97 = v95 + 8 * v96;
  if (v95)
    goto LABEL_191;
  v100 = 0;
LABEL_196:
  if (v100 != v98)
  {
    v409 = v100;
    do
    {
      v101 = *v63;
      v103 = (uint64_t *)(*v63 + 104);
      v102 = *v103;
      if (*v103)
      {
        v104 = *(_QWORD *)v98;
        v105 = *(_QWORD *)(*(_QWORD *)v98 + 16);
        v106 = *(_DWORD *)(v102 - 8);
        v107 = (v105 + ~(v105 << 32)) ^ ((unint64_t)(v105 + ~(v105 << 32)) >> 22);
        v108 = 9 * ((v107 + ~(v107 << 13)) ^ ((v107 + ~(v107 << 13)) >> 8));
        v109 = (v108 ^ (v108 >> 15)) + ~((v108 ^ (v108 >> 15)) << 27);
        v110 = v106 & ((v109 >> 31) ^ v109);
        v111 = *(_QWORD *)(v102 + 16 * v110);
        if (v111 == v105)
        {
LABEL_203:
          v115 = *(_QWORD *)(v101 + 112);
          v113 = (uint64_t *)(v101 + 112);
          v114 = v115;
          if (v115)
          {
            v116 = *(_DWORD *)(v114 - 8);
            v117 = *(WTF::StringImpl **)(v104 + 24);
            v118 = *((_DWORD *)v117 + 4);
            if (v118 < 0x100)
              v119 = WTF::StringImpl::hashSlowCase(v117);
            else
              v119 = v118 >> 8;
            for (j = 0; ; v119 = j + v121)
            {
              v121 = v119 & v116;
              v122 = *(WTF **)(v114 + 16 * v121);
              if (v122 != (WTF *)-1)
              {
                if (!v122)
                {
                  v123 = *v113;
                  v100 = v409;
                  if (!*v113)
                    goto LABEL_221;
                  v124 = *(unsigned int *)(v123 - 4);
                  v4 = (void *)(v123 + 16 * v124);
                  goto LABEL_216;
                }
                if ((WTF::equal(v122, *(const WTF::StringImpl **)(v104 + 24), v5) & 1) != 0)
                  break;
              }
              ++j;
            }
            v4 = (void *)(v114 + 16 * v121);
            v123 = *v113;
            if (!*v113)
            {
              v100 = v409;
              goto LABEL_219;
            }
            v124 = *(unsigned int *)(v123 - 4);
            v100 = v409;
LABEL_216:
            v123 += 16 * v124;
            if ((void *)v123 == v4)
              goto LABEL_221;
LABEL_219:
            if ((void *)v123 != v4)
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v113, (WTF::StringImpl **)v4);
          }
LABEL_221:
          v125 = *v103;
          v63 = (uint64_t *)v404;
          if (*v103)
          {
            v126 = *(_QWORD *)(v104 + 16);
            v127 = *(_DWORD *)(v125 - 8);
            v128 = (v126 + ~(v126 << 32)) ^ ((unint64_t)(v126 + ~(v126 << 32)) >> 22);
            v129 = 9 * ((v128 + ~(v128 << 13)) ^ ((v128 + ~(v128 << 13)) >> 8));
            v130 = (v129 ^ (v129 >> 15)) + ~((v129 ^ (v129 >> 15)) << 27);
            v131 = v127 & ((v130 >> 31) ^ v130);
            v132 = *(_QWORD *)(v125 + 16 * v131);
            if (v132 != v126)
            {
              v133 = 1;
              while (v132)
              {
                v131 = ((_DWORD)v131 + v133) & v127;
                v132 = *(_QWORD *)(v125 + 16 * v131);
                ++v133;
                if (v132 == v126)
                  goto LABEL_228;
              }
              v131 = *(unsigned int *)(v125 - 4);
            }
LABEL_228:
            if (v131 != *(_DWORD *)(v125 - 4))
            {
              v134 = (_QWORD *)(v125 + 16 * v131);
              v135 = (WebCore::IDBServer::MemoryObjectStore *)v134[1];
              *v134 = -1;
              v134[1] = 0;
              if (v135)
              {
                if (*(_DWORD *)v135 == 1)
                {
                  WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v135, v4);
                  WTF::fastFree(v143, v144);
                }
                else
                {
                  --*(_DWORD *)v135;
                }
              }
              ++*(_DWORD *)(*v103 - 16);
              v136 = *v103;
              if (*v103)
                v137 = *(_DWORD *)(v136 - 12) - 1;
              else
                v137 = -1;
              *(_DWORD *)(v136 - 12) = v137;
              v138 = *v103;
              if (*v103)
              {
                v139 = 6 * *(_DWORD *)(v138 - 12);
                v140 = *(_DWORD *)(v138 - 4);
                if (v139 < v140 && v140 >= 9)
                  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v103, v140 >> 1);
              }
            }
          }
        }
        else
        {
          v112 = 1;
          while (v111)
          {
            v110 = (v110 + v112) & v106;
            v111 = *(_QWORD *)(v102 + 16 * v110);
            ++v112;
            if (v111 == v105)
              goto LABEL_203;
          }
        }
      }
      v142 = v98 + 8;
      v98 = v97;
      if (v142 != v97)
      {
        v98 = v142;
        while ((unint64_t)(*(_QWORD *)v98 + 1) <= 1)
        {
          v98 += 8;
          if (v98 == v97)
          {
            v98 = v97;
            break;
          }
        }
      }
    }
    while (v98 != v100);
  }
  v145 = v63[16];
  v400 = v63 + 16;
  if (!v145)
    goto LABEL_307;
  v146 = *(_DWORD *)(v145 - 4);
  if (!v146)
    goto LABEL_307;
  v147 = 0;
  while (2)
  {
    v148 = v145 + 16 * --v146;
    if ((unint64_t)(*(_QWORD *)v148 + 1) >= 2)
    {
      v149 = *(_QWORD *)(*(_QWORD *)(v148 + 8) + 64);
      if (v149)
      {
        do
          v150 = __ldaxr((unsigned int *)v149);
        while (__stlxr(v150 + 1, (unsigned int *)v149));
        v151 = *(_QWORD *)(v149 + 8);
      }
      else
      {
        v151 = 0;
      }
      v152 = v63[11];
      if (v152)
      {
        v153 = *(_DWORD *)(v152 - 8);
        v154 = (~(v151 << 32) + v151) ^ ((unint64_t)(~(v151 << 32) + v151) >> 22);
        v155 = 9 * ((v154 + ~(v154 << 13)) ^ ((v154 + ~(v154 << 13)) >> 8));
        v156 = (v155 ^ (v155 >> 15)) + ~((v155 ^ (v155 >> 15)) << 27);
        v157 = v153 & ((v156 >> 31) ^ v156);
        v158 = *(_QWORD *)(v152 + 8 * v157);
        if (v158 == v151)
        {
          v160 = 1;
          if (v149)
          {
            do
            {
LABEL_267:
              v161 = __ldaxr((unsigned int *)v149);
              v162 = v161 - 1;
            }
            while (__stlxr(v162, (unsigned int *)v149));
            if (!v162)
            {
              atomic_store(1u, (unsigned int *)v149);
              WTF::fastFree((WTF *)v149, v4);
            }
          }
LABEL_270:
          if (v160)
          {
            v163 = *(WTF::StringImpl **)v148;
            *(_QWORD *)v148 = -1;
            if (v163)
            {
              if (*(_DWORD *)v163 == 2)
                WTF::StringImpl::destroy(v163, (WTF::StringImpl *)v4);
              else
                *(_DWORD *)v163 -= 2;
            }
            v164 = v145 + 16 * v146;
            v165 = *(WebCore::IDBServer::MemoryIndex **)(v164 + 8);
            *(_QWORD *)(v164 + 8) = 0;
            v63 = (uint64_t *)v404;
            if (v165)
            {
              if (*(_DWORD *)v165 == 1)
              {
                WebCore::IDBServer::MemoryIndex::~MemoryIndex(v165, v4);
                WTF::fastFree(v166, v167);
              }
              else
              {
                --*(_DWORD *)v165;
              }
            }
            ++v147;
          }
          else
          {
            v63 = (uint64_t *)v404;
          }
          goto LABEL_254;
        }
        v159 = 1;
        do
        {
          v160 = v158 != 0;
          if (!v158)
            break;
          v157 = (v157 + v159) & v153;
          v158 = *(_QWORD *)(v152 + 8 * v157);
          ++v159;
        }
        while (v158 != v151);
      }
      else
      {
        v160 = 0;
      }
      if (v149)
        goto LABEL_267;
      goto LABEL_270;
    }
LABEL_254:
    if (v146)
      continue;
    break;
  }
  v168 = *v400;
  if (v147)
  {
    *(_DWORD *)(v168 - 16) += v147;
    v169 = *v400;
    if (*v400)
      v170 = *(_DWORD *)(v169 - 12);
    else
      v170 = 0;
    *(_DWORD *)(v169 - 12) = v170 - v147;
    v168 = *v400;
  }
  if (v168)
  {
    v171 = *(_DWORD *)(v168 - 4);
    v172 = *(unsigned int *)(v168 - 12);
    if (v171 >= 9 && 6 * (int)v172 < v171)
    {
      v174 = (v172 - 1) | ((v172 - 1) >> 1) | ((((_DWORD)v172 - 1) | ((v172 - 1) >> 1)) >> 2);
      v175 = v174 | (v174 >> 4) | ((v174 | (v174 >> 4)) >> 8);
      v176 = (v175 | HIWORD(v175)) + 1;
      if (v176 > 0x400)
      {
        v177 = v400;
        if (v176 <= 2 * v172)
        {
LABEL_296:
          LODWORD(v176) = 2 * v176;
          if (v176 <= 0x400)
            goto LABEL_297;
        }
        v178 = (double)v172;
        v179 = (double)v176;
        v180 = 0.416666667;
      }
      else
      {
        v177 = v400;
        if (3 * v176 <= 4 * v172)
          goto LABEL_296;
LABEL_297:
        v178 = (double)v172;
        v179 = (double)v176;
        v180 = 0.604166667;
      }
      if (v179 * v180 <= v178)
        LODWORD(v176) = 2 * v176;
      if (v176 <= 8)
        v181 = 8;
      else
        v181 = v176;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v177, v181, 0);
    }
  }
LABEL_307:
  v182 = (WebCore::IDBServer::MemoryObjectStore **)v63[11];
  if (v182)
  {
    v63[11] = 0;
    v183 = *((unsigned int *)v182 - 1);
    if ((_DWORD)v183)
    {
      v184 = v182;
      do
      {
        v185 = *v184;
        if (*v184 != (WebCore::IDBServer::MemoryObjectStore *)-1)
        {
          *v184 = 0;
          if (v185)
          {
            if (*(_DWORD *)v185 == 1)
            {
              WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v185, v4);
              WTF::fastFree(v186, v187);
            }
            else
            {
              --*(_DWORD *)v185;
            }
          }
        }
        ++v184;
        --v183;
      }
      while (v183);
    }
    WTF::fastFree((WTF *)(v182 - 2), v4);
  }
  v188 = (WTF::StringImpl **)v63[15];
  if (v188)
  {
    v189 = *((unsigned int *)v188 - 1);
    v190 = &v188[2 * v189];
    if (*((_DWORD *)v188 - 3))
    {
      v191 = (WTF::StringImpl **)v63[15];
      if ((_DWORD)v189)
      {
        v192 = 16 * v189;
        v191 = (WTF::StringImpl **)v63[15];
        while ((unint64_t)*v191 + 1 <= 1)
        {
          v191 += 2;
          v192 -= 16;
          if (!v192)
          {
            v191 = v190;
            break;
          }
        }
      }
LABEL_325:
      v193 = &v188[2 * *((unsigned int *)v188 - 1)];
      goto LABEL_330;
    }
    v191 = &v188[2 * v189];
  }
  else
  {
    v191 = 0;
    v189 = 0;
  }
  v190 = &v188[2 * v189];
  if (v188)
    goto LABEL_325;
  v193 = 0;
LABEL_330:
  if (v193 == v191)
    goto LABEL_371;
  v194 = v63 + 10;
  while (2)
  {
    v195 = *v63;
    v196 = v191[1];
    ++*(_DWORD *)v196;
    v421 = v196;
    WebCore::IDBServer::MemoryIDBBackingStore::registerObjectStore(v195, (const WTF::StringImpl ***)&v421, v5);
    if (v421)
    {
      if (*(_DWORD *)v421 == 1)
      {
        WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v421, v4);
        WTF::fastFree(v215, v216);
      }
      else
      {
        --*(_DWORD *)v421;
      }
    }
    v197 = *v194;
    if (*v194
      || (WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>::rehash(v63 + 10, 8u, 0), (v197 = *v194) != 0))
    {
      v198 = *(_DWORD *)(v197 - 8);
    }
    else
    {
      v198 = 0;
    }
    v199 = v191[1];
    v200 = ((unint64_t)v199 + ~((_QWORD)v199 << 32)) ^ (((unint64_t)v199 + ~((_QWORD)v199 << 32)) >> 22);
    v201 = 9 * ((v200 + ~(v200 << 13)) ^ ((v200 + ~(v200 << 13)) >> 8));
    v202 = (v201 ^ (v201 >> 15)) + ~((v201 ^ (v201 >> 15)) << 27);
    v203 = v198 & ((v202 >> 31) ^ v202);
    v5 = (const WTF::StringImpl *)(v197 + 8 * v203);
    v204 = *(WTF::StringImpl **)v5;
    if (!*(_QWORD *)v5)
    {
LABEL_346:
      if (v199)
        ++*(_DWORD *)v199;
      *(_QWORD *)v5 = v199;
      v207 = *v194;
      if (*v194)
        v208 = *(_DWORD *)(v207 - 12) + 1;
      else
        v208 = 1;
      *(_DWORD *)(v207 - 12) = v208;
      v209 = *v194;
      if (*v194)
        v210 = *(_DWORD *)(v209 - 12);
      else
        v210 = 0;
      v211 = (*(_DWORD *)(v209 - 16) + v210);
      v212 = *(unsigned int *)(v209 - 4);
      if (v212 > 0x400)
      {
        if (v212 > 2 * v211)
          goto LABEL_361;
      }
      else
      {
        if (3 * v212 > 4 * v211)
          goto LABEL_361;
        if (!(_DWORD)v212)
        {
          v213 = 8;
          goto LABEL_360;
        }
      }
      v213 = (_DWORD)v212 << (6 * *(_DWORD *)(v209 - 12) >= (2 * v212));
LABEL_360:
      WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>::rehash(v63 + 10, v213, (WebCore::IDBServer::MemoryObjectStore **)v5);
      goto LABEL_361;
    }
    v205 = 0;
    v206 = 1;
    while (v204 != v199)
    {
      if (v204 == (WTF::StringImpl *)-1)
        v205 = v5;
      v203 = (v203 + v206) & v198;
      v5 = (const WTF::StringImpl *)(v197 + 8 * v203);
      v204 = *(WTF::StringImpl **)v5;
      ++v206;
      if (!*(_QWORD *)v5)
      {
        if (v205)
        {
          *(_QWORD *)v205 = 0;
          --*(_DWORD *)(*v194 - 16);
          v199 = v191[1];
          v5 = v205;
        }
        goto LABEL_346;
      }
    }
LABEL_361:
    v214 = v191 + 2;
    v191 = v190;
    if (v214 != v190)
    {
      v191 = v214;
      while ((unint64_t)*v191 + 1 <= 1)
      {
        v191 += 2;
        if (v191 == v190)
        {
          v191 = v190;
          break;
        }
      }
    }
    if (v191 != v193)
      continue;
    break;
  }
  v188 = (WTF::StringImpl **)v63[15];
LABEL_371:
  if (v188)
  {
    v63[15] = 0;
    v217 = *((unsigned int *)v188 - 1);
    if ((_DWORD)v217)
    {
      v218 = v188;
      do
      {
        v219 = *v218;
        if (*v218 != (WTF::StringImpl *)-1)
        {
          v220 = v218[1];
          v218[1] = 0;
          if (v220)
          {
            if (*(_DWORD *)v220 == 1)
            {
              WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v220, v4);
              WTF::fastFree(v221, v222);
              v219 = *v218;
            }
            else
            {
              --*(_DWORD *)v220;
            }
          }
          *v218 = 0;
          if (v219)
          {
            if (*(_DWORD *)v219 == 2)
              WTF::StringImpl::destroy(v219, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v219 -= 2;
          }
        }
        v218 += 2;
        --v217;
      }
      while (v217);
    }
    WTF::fastFree((WTF *)(v188 - 2), v4);
  }
  v223 = v63[8];
  if (v223)
  {
    v224 = *v63;
    v225 = bmalloc::api::isoAllocate();
    v226 = v225;
    v227 = *(_DWORD **)v223;
    if (*(_QWORD *)v223)
      *v227 += 2;
    *(_QWORD *)v225 = v227;
    v228 = *(_OWORD *)(v223 + 8);
    *(_QWORD *)(v225 + 24) = *(_QWORD *)(v223 + 24);
    *(_OWORD *)(v225 + 8) = v228;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v225 + 32), (_QWORD *)(v223 + 32));
    v229 = *(WTF::StringImpl ***)(v224 + 88);
    *(_QWORD *)(v224 + 88) = v226;
    if (v229)
    {
      v230 = v229[4];
      if (v230)
      {
        v231 = *((unsigned int *)v230 - 1);
        if ((_DWORD)v231)
        {
          v232 = (WTF::StringImpl *)((char *)v230 + 8);
          do
          {
            if (*((_QWORD *)v232 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v232, (WTF::StringImpl *)v4);
            v232 = (WebCore::IDBObjectStoreInfo *)((char *)v232 + 72);
            --v231;
          }
          while (v231);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v230 - 16), v4);
      }
      v233 = *v229;
      *v229 = 0;
      if (v233)
      {
        if (*(_DWORD *)v233 == 2)
          WTF::StringImpl::destroy(v233, (WTF::StringImpl *)v4);
        else
          *(_DWORD *)v233 -= 2;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v229, v4);
    }
  }
  v234 = v63[22];
  if (v234)
  {
    v235 = *(unsigned int *)(v234 - 4);
    v236 = (uint64_t *)(v234 + 16 * v235);
    if (*(_DWORD *)(v234 - 12))
    {
      v237 = (uint64_t *)v63[22];
      if ((_DWORD)v235)
      {
        v238 = 16 * v235;
        v237 = (uint64_t *)v63[22];
        while ((unint64_t)(*v237 + 1) <= 1)
        {
          v237 += 2;
          v238 -= 16;
          if (!v238)
          {
            v237 = v236;
            break;
          }
        }
      }
LABEL_408:
      v239 = (uint64_t *)(v234 + 16 * *(unsigned int *)(v234 - 4));
      goto LABEL_413;
    }
    v237 = (uint64_t *)(v234 + 16 * v235);
  }
  else
  {
    v237 = 0;
    v235 = 0;
  }
  v236 = (uint64_t *)(v234 + 16 * v235);
  if (v234)
    goto LABEL_408;
  v239 = 0;
LABEL_413:
  if (v239 != v237)
  {
    do
    {
      v240 = *v237;
      v241 = v237[1];
      v237[1] = 0;
      v242 = *(WTF ***)(v240 + 72);
      *(_QWORD *)(v240 + 72) = v241;
      if (v242)
        std::default_delete<WebCore::IDBServer::IndexValueStore>::operator()[abi:sn180100](v242);
      v243 = v237 + 2;
      v237 = v236;
      if (v243 != v236)
      {
        v237 = v243;
        while ((unint64_t)(*v237 + 1) <= 1)
        {
          v237 += 2;
          if (v237 == v236)
          {
            v237 = v236;
            break;
          }
        }
      }
    }
    while (v237 != v239);
    v234 = v63[22];
  }
  if (v234)
  {
    v63[22] = 0;
    v244 = *(unsigned int *)(v234 - 4);
    if ((_DWORD)v244)
    {
      v245 = (WTF ***)(v234 + 8);
      do
      {
        if (*(v245 - 1) != (WTF **)-1)
        {
          v246 = *v245;
          *v245 = 0;
          if (v246)
            std::default_delete<WebCore::IDBServer::IndexValueStore>::operator()[abi:sn180100](v246);
        }
        v245 += 2;
        --v244;
      }
      while (v244);
    }
    WTF::fastFree((WTF *)(v234 - 16), v4);
  }
  v247 = v63[10];
  if (v247)
  {
    v248 = *(unsigned int *)(v247 - 4);
    v249 = (uint64_t *)(v247 + 8 * v248);
    if (*(_DWORD *)(v247 - 12))
    {
      v250 = (uint64_t *)v63[10];
      if ((_DWORD)v248)
      {
        v251 = 8 * v248;
        v250 = (uint64_t *)v63[10];
        while ((unint64_t)(*v250 + 1) <= 1)
        {
          ++v250;
          v251 -= 8;
          if (!v251)
          {
            v250 = v249;
            break;
          }
        }
      }
LABEL_438:
      v252 = (uint64_t *)(v247 + 8 * *(unsigned int *)(v247 - 4));
      goto LABEL_443;
    }
    v250 = (uint64_t *)(v247 + 8 * v248);
  }
  else
  {
    v250 = 0;
    v248 = 0;
  }
  v249 = (uint64_t *)(v247 + 8 * v248);
  if (v247)
    goto LABEL_438;
  v252 = 0;
LABEL_443:
  if (v252 == v250)
  {
LABEL_620:
    v354 = *v400;
    if (*v400)
    {
      v355 = *(unsigned int *)(v354 - 4);
      v356 = (_QWORD *)(v354 + 16 * v355);
      v357 = v404;
      if (*(_DWORD *)(v354 - 12))
      {
        v358 = (_QWORD *)*v400;
        if ((_DWORD)v355)
        {
          v359 = 16 * v355;
          v358 = (_QWORD *)*v400;
          while ((unint64_t)(*v358 + 1) <= 1)
          {
            v358 += 2;
            v359 -= 16;
            if (!v359)
            {
              v358 = v356;
              break;
            }
          }
        }
        if (v354)
          goto LABEL_628;
        goto LABEL_632;
      }
      v358 = (_QWORD *)(v354 + 16 * v355);
    }
    else
    {
      v358 = 0;
      v355 = 0;
      v357 = v404;
    }
    v356 = (_QWORD *)(v354 + 16 * v355);
    if (v354)
    {
LABEL_628:
      v360 = (_QWORD *)(v354 + 16 * *(unsigned int *)(v354 - 4));
LABEL_633:
      if (v360 == v358)
      {
LABEL_691:
        if (v354)
        {
          *v400 = 0;
          v389 = *(unsigned int *)(v354 - 4);
          if ((_DWORD)v389)
          {
            v390 = (WTF::StringImpl **)v354;
            do
            {
              v391 = *v390;
              if (*v390 != (WTF::StringImpl *)-1)
              {
                v392 = v390[1];
                v390[1] = 0;
                if (v392)
                {
                  if (*(_DWORD *)v392 == 1)
                  {
                    WebCore::IDBServer::MemoryIndex::~MemoryIndex(v392, v4);
                    WTF::fastFree(v393, v394);
                    v391 = *v390;
                  }
                  else
                  {
                    --*(_DWORD *)v392;
                  }
                }
                *v390 = 0;
                if (v391)
                {
                  if (*(_DWORD *)v391 == 2)
                    WTF::StringImpl::destroy(v391, (WTF::StringImpl *)v4);
                  else
                    *(_DWORD *)v391 -= 2;
                }
              }
              v390 += 2;
              --v389;
            }
            while (v389);
          }
          WTF::fastFree((WTF *)(v354 - 16), v4);
        }
        WebCore::IDBServer::MemoryBackingStoreTransaction::finish((uint64_t)v357);
        *((_BYTE *)v357 + 73) = v398;
        *(_WORD *)v399 = 0;
        *(_QWORD *)(v399 + 8) = 0;
        result = (uint64_t)v411;
        if (v411)
        {
          WebCore::IDBServer::MemoryBackingStoreTransaction::~MemoryBackingStoreTransaction(v411, v395);
          return WTF::fastFree(v396, v397);
        }
        return result;
      }
      v410 = v360;
      while (1)
      {
        v361 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v357 + 88) + 32);
        if (!v361)
          goto LABEL_712;
        v362 = v358[1];
        v363 = *(_QWORD *)(v362 + 16);
        v364 = *(_DWORD *)(v361 - 8);
        v365 = (v363 + ~(v363 << 32)) ^ ((unint64_t)(v363 + ~(v363 << 32)) >> 22);
        v366 = 9 * ((v365 + ~(v365 << 13)) ^ ((v365 + ~(v365 << 13)) >> 8));
        v367 = (v366 ^ (v366 >> 15)) + ~((v366 ^ (v366 >> 15)) << 27);
        v368 = v364 & ((v367 >> 31) ^ v367);
        v369 = (uint64_t *)(v361 + 72 * v368);
        v370 = *v369;
        if (*v369 != v363)
        {
          v371 = 1;
          while (v370)
          {
            v368 = (v368 + v371) & v364;
            v369 = (uint64_t *)(v361 + 72 * v368);
            v370 = *v369;
            ++v371;
            if (*v369 == v363)
              goto LABEL_642;
          }
          v369 = (uint64_t *)(v361 + 72 * *(unsigned int *)(v361 - 4));
        }
LABEL_642:
        if (v369 == (uint64_t *)(v361 + 72 * *(unsigned int *)(v361 - 4)))
          goto LABEL_712;
        v372 = *(_QWORD *)(v362 + 64);
        if (v372)
        {
          do
            v373 = __ldaxr((unsigned int *)v372);
          while (__stlxr(v373 + 1, (unsigned int *)v372));
          v374 = *(uint64_t **)(v372 + 8);
          v362 = v358[1];
        }
        else
        {
          v374 = 0;
        }
        ++*(_DWORD *)v362;
        v435 = v362;
        v375 = v374[9];
        if (v375)
        {
          v376 = *(unsigned int *)(v375 - 4);
          v377 = v375 + (v376 << 6);
          if (*(_DWORD *)(v375 - 12))
          {
            v378 = v374[9];
            if ((_DWORD)v376)
            {
              v379 = v376 << 6;
              v378 = v374[9];
              while ((unint64_t)(*(_QWORD *)v378 + 1) <= 1)
              {
                v378 += 64;
                v379 -= 64;
                if (!v379)
                {
                  v378 = v377;
                  break;
                }
              }
            }
LABEL_653:
            v380 = v375 + ((unint64_t)*(unsigned int *)(v375 - 4) << 6);
            goto LABEL_658;
          }
          v378 = v375 + (v376 << 6);
        }
        else
        {
          v378 = 0;
          v376 = 0;
        }
        v377 = v375 + (v376 << 6);
        if (v375)
          goto LABEL_653;
        v380 = 0;
LABEL_658:
        if (v380 == v378)
        {
LABEL_666:
          v412 = *(WTF **)(v362 + 8);
          WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBIndexInfo&>(v374 + 9, (WTF::StringImpl *)&v412, v362 + 8, (uint64_t)&v421);
          v382 = (WebCore::IDBServer::MemoryIndex **)v435;
          v383 = *(WTF ***)(v435 + 72);
          *(_QWORD *)(v435 + 72) = 0;
          if (v383)
            std::default_delete<WebCore::IDBServer::IndexValueStore>::operator()[abi:sn180100](v383);
          WebCore::IDBServer::MemoryObjectStore::populateIndexWithExistingRecords(&v412, (WebCore::IDBServer::MemoryIndex *)v374, (uint64_t)v382);
          v436[0] = v382[1];
          v439[0] = (WebCore::IDBServer::MemoryIndex *)v382;
          WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::IDBServer::MemoryIndex*>((uint64_t)&v421, v374 + 15, v382 + 3, v439);
          WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::Ref<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>((uint64_t)&v421, v374 + 14, (uint64_t *)v436, &v435);
          v357 = v404;
          if ((_QWORD)v413)
          {
            if (*(_DWORD *)v413 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v413, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v413 -= 2;
          }
          v362 = v435;
          v435 = 0;
          if (!v362)
            goto LABEL_676;
        }
        else
        {
          while (!WTF::equal(*(WTF **)(v378 + 24), *(const WTF::StringImpl **)(v362 + 24), v5))
          {
            v381 = v378 + 64;
            v378 = v377;
            if (v381 != v377)
            {
              v378 = v381;
              while ((unint64_t)(*(_QWORD *)v378 + 1) <= 1)
              {
                v378 += 64;
                if (v378 == v377)
                {
                  v378 = v377;
                  break;
                }
              }
            }
            if (v378 == v380)
              goto LABEL_666;
          }
          v435 = 0;
          v357 = v404;
        }
        if (*(_DWORD *)v362 != 1)
        {
          --*(_DWORD *)v362;
LABEL_676:
          if (v372)
            goto LABEL_677;
          goto LABEL_680;
        }
        WebCore::IDBServer::MemoryIndex::~MemoryIndex((WebCore::IDBServer::MemoryIndex *)v362, v4);
        WTF::fastFree(v387, v388);
        if (v372)
        {
          do
          {
LABEL_677:
            v384 = __ldaxr((unsigned int *)v372);
            v385 = v384 - 1;
          }
          while (__stlxr(v385, (unsigned int *)v372));
          if (!v385)
          {
            atomic_store(1u, (unsigned int *)v372);
            WTF::fastFree((WTF *)v372, v4);
          }
        }
LABEL_680:
        v386 = v358 + 2;
        v358 = v356;
        if (v386 != v356)
        {
          v358 = v386;
          while ((unint64_t)(*v358 + 1) <= 1)
          {
            v358 += 2;
            if (v358 == v356)
            {
              v358 = v356;
              break;
            }
          }
        }
        if (v358 == v410)
        {
          v354 = *v400;
          goto LABEL_691;
        }
      }
    }
LABEL_632:
    v360 = 0;
    goto LABEL_633;
  }
  v403 = (uint64_t *)((char *)v404 + 152);
  v402 = v249;
  v401 = v252;
  while (2)
  {
    v253 = *v250;
    v254 = *((_QWORD *)v404 + 14);
    if (v254)
    {
      v255 = *(_DWORD *)(v254 - 8);
      v256 = (~(v253 << 32) + v253) ^ ((unint64_t)(~(v253 << 32) + v253) >> 22);
      v257 = 9 * ((v256 + ~(v256 << 13)) ^ ((v256 + ~(v256 << 13)) >> 8));
      v258 = (v257 ^ (v257 >> 15)) + ~((v257 ^ (v257 >> 15)) << 27);
      v259 = v255 & ((v258 >> 31) ^ v258);
      v260 = *(_QWORD *)(v254 + 16 * v259);
      if (v260 == v253)
      {
LABEL_450:
        v254 = *(_QWORD *)(v254 + 16 * v259 + 8);
      }
      else
      {
        v261 = 1;
        while (v260)
        {
          v259 = ((_DWORD)v259 + v261) & v255;
          v260 = *(_QWORD *)(v254 + 16 * v259);
          ++v261;
          if (v260 == v253)
            goto LABEL_450;
        }
        v254 = 0;
      }
    }
    *(_QWORD *)(v253 + 88) = v254;
    WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::take((uint64_t *)&v418, (uint64_t *)v404 + 18, v253);
    v263 = v418;
    if (v418)
    {
      v264 = *v250;
      v265 = *v403;
      if (!*v403)
        goto LABEL_461;
      v266 = *(_DWORD *)(v265 - 8);
      v267 = (~(v264 << 32) + v264) ^ ((unint64_t)(~(v264 << 32) + v264) >> 22);
      v268 = 9 * ((v267 + ~(v267 << 13)) ^ ((v267 + ~(v267 << 13)) >> 8));
      v269 = (v268 ^ (v268 >> 15)) + ~((v268 ^ (v268 >> 15)) << 27);
      v270 = v266 & ((v269 >> 31) ^ v269);
      v271 = *(_QWORD *)(v265 + 16 * v270);
      if (v271 != v264)
      {
        v272 = 1;
        while (v271)
        {
          v270 = ((_DWORD)v270 + v272) & v266;
          v271 = *(_QWORD *)(v265 + 16 * v270);
          ++v272;
          if (v271 == v264)
            goto LABEL_460;
        }
        v270 = *(unsigned int *)(v265 - 4);
      }
LABEL_460:
      if (v270 != *(_DWORD *)(v265 - 4))
      {
        v286 = (_QWORD *)(v265 + 16 * v270);
        v273 = v286[1];
        v286[1] = 0;
        v287 = (_QWORD *)*v403;
        if (!*v403 || (v287 += 2 * *((unsigned int *)v287 - 1), v287 != v286))
        {
          if (v287 != v286)
          {
            *v286 = -1;
            v286[1] = 0;
            ++*(_DWORD *)(*v403 - 16);
            v288 = *v403;
            v289 = *v403 ? *(_DWORD *)(v288 - 12) - 1 : -1;
            *(_DWORD *)(v288 - 12) = v289;
            v350 = *v403;
            if (*v403)
            {
              v351 = 6 * *(_DWORD *)(v350 - 12);
              v352 = *(_DWORD *)(v350 - 4);
              if (v351 < v352 && v352 >= 9)
                WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(v403, v352 >> 1);
            }
          }
        }
      }
      else
      {
LABEL_461:
        v273 = 0;
      }
      v418 = 0;
      v274 = *(uint64_t **)(v264 + 96);
      *(_QWORD *)(v264 + 96) = v263;
      if (v274)
      {
        v275 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(v274, v262);
        WTF::fastFree((WTF *)v275, v276);
      }
      v277 = *(_QWORD *)(v264 + 104);
      *(_QWORD *)(v264 + 104) = v273;
      if (v277)
      {
        std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(v277, *(WTF **)(v277 + 8));
        MEMORY[0x19AEA7644](v277, 0x1020C4062D53EE8);
      }
    }
    WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::take((uint64_t *)&v417, (uint64_t *)v404 + 17, *v250);
    v278 = v417;
    if (!v417)
      goto LABEL_603;
    v279 = *v417;
    if (!*v417)
    {
      v282 = 0;
      LODWORD(v280) = 0;
      goto LABEL_486;
    }
    v280 = *(unsigned int *)(v279 - 4);
    v281 = v279 + 40 * v280;
    if (!*(_DWORD *)(v279 - 12))
    {
      v282 = v279 + 40 * v280;
LABEL_486:
      v281 = v279 + 40 * v280;
      if (v279)
        goto LABEL_478;
      goto LABEL_487;
    }
    v282 = *v417;
    if ((_DWORD)v280)
    {
      v283 = 40 * v280;
      v282 = *v417;
      while (!*(_DWORD *)(v282 + 24) || *(_BYTE *)v282 != 0)
      {
        v282 += 40;
        v283 -= 40;
        if (!v283)
        {
          v282 = v281;
          break;
        }
      }
    }
    if (v279)
    {
LABEL_478:
      v285 = v279 + 40 * *(unsigned int *)(v279 - 4);
      goto LABEL_488;
    }
LABEL_487:
    v285 = 0;
LABEL_488:
    if (v285 == v282)
    {
LABEL_601:
      v252 = v401;
      v249 = v402;
      if (v278)
      {
        v345 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(v278, v4);
        WTF::fastFree((WTF *)v345, v346);
      }
LABEL_603:
      if (v418)
      {
        v347 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(v418, v4);
        WTF::fastFree((WTF *)v347, v348);
      }
      v349 = v250 + 1;
      v250 = v249;
      if (v349 != v249)
      {
        v250 = v349;
        while ((unint64_t)(*v250 + 1) <= 1)
        {
          if (++v250 == v249)
          {
            v250 = v249;
            break;
          }
        }
      }
      if (v250 == v252)
        goto LABEL_620;
      continue;
    }
    break;
  }
  while (1)
  {
    WebCore::IDBServer::MemoryObjectStore::deleteRecord((WebCore::IDBServer::MemoryObjectStore *)*v250, (const WebCore::IDBKeyData *)v282);
    v290 = *v250;
    v291 = *(unsigned int **)(v282 + 32);
    if (v291)
    {
      do
        v292 = __ldaxr(v291);
      while (__stlxr(v292 + 1, v291));
    }
    v412 = (WTF *)v291;
    v413 = 0u;
    v414 = 0u;
    v435 = 0;
    WebCore::IDBObjectStoreInfo::isolatedCopy((uint64_t *)(v290 + 16), (uint64_t)&v421);
    v293 = *(unsigned int *)(v282 + 24);
    if ((_DWORD)v293 == -1)
      break;
    v439[0] = (WebCore::IDBServer::MemoryIndex *)&v438;
    ((void (*)(WebCore::IDBServer::MemoryIndex **__return_ptr, WebCore::IDBServer::MemoryIndex **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v293])(v436, v439, v282 + 8);
    v428 = 0;
    v429[0] = 0;
    v430 = -1;
    v294 = v437;
    if (v437 != -1)
    {
      ((void (*)(WebCore::IDBServer::MemoryIndex **, _BYTE *, WebCore::IDBServer::MemoryIndex **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v437])(v439, v429, v436);
      v430 = v294;
      if (v437 != -1)
        ((void (*)(WebCore::IDBServer::MemoryIndex **, WebCore::IDBServer::MemoryIndex **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v437])(v439, v436);
    }
    v433 = 0;
    v431 = 0u;
    v432 = 0u;
    WebCore::IDBValue::setAsIsolatedCopy((WebCore::IDBValue *)&v431, (unsigned int **)&v412);
    v434 = &v435;
    v295 = WTF::fastMalloc((WTF *)0x98);
    v296 = v295;
    *(_QWORD *)v295 = off_1E335A530;
    *(_QWORD *)(v295 + 8) = v421;
    v297 = v422;
    v422 = 0;
    *(_QWORD *)(v295 + 16) = v297;
    *(_BYTE *)(v295 + 24) = 0;
    *(_BYTE *)(v295 + 48) = 0;
    if (v425)
    {
      *(_DWORD *)(v295 + 40) = -1;
      v298 = v424;
      if (v424 != -1)
      {
        ((void (*)(WebCore::IDBServer::MemoryIndex **, uint64_t, _BYTE *))off_1E335A4E0[v424])(v436, v295 + 24, v423);
        *(_DWORD *)(v296 + 40) = v298;
      }
      *(_BYTE *)(v296 + 48) = 1;
    }
    v299 = v426;
    *(_BYTE *)(v296 + 80) = 0;
    *(_BYTE *)(v296 + 56) = v299;
    v300 = v427;
    v427 = 0;
    *(_QWORD *)(v296 + 64) = v300;
    *(_BYTE *)(v296 + 72) = v428;
    *(_DWORD *)(v296 + 96) = -1;
    v301 = v430;
    if (v430 != -1)
    {
      ((void (*)(WebCore::IDBServer::MemoryIndex **))off_1E335A400[v430])(v436);
      *(_DWORD *)(v296 + 96) = v301;
    }
    *(_QWORD *)(v296 + 104) = v431;
    v302 = *((_QWORD *)&v431 + 1);
    v431 = 0uLL;
    *(_QWORD *)(v296 + 112) = v302;
    v303 = v432;
    *(_QWORD *)&v432 = 0;
    *(_QWORD *)(v296 + 120) = v303;
    v304 = *((_QWORD *)&v432 + 1);
    *((_QWORD *)&v432 + 1) = 0;
    *(_QWORD *)(v296 + 128) = v304;
    v305 = v433;
    v433 = 0;
    *(_QWORD *)(v296 + 136) = v305;
    *(_QWORD *)(v296 + 144) = v434;
    v436[0] = (WebCore::IDBServer::MemoryIndex *)v296;
    WebCore::callOnIDBSerializationThreadAndWait((uint64_t *)v436);
    v307 = v436[0];
    v436[0] = 0;
    if (v307)
      (*(void (**)(WebCore::IDBServer::MemoryIndex *))(*(_QWORD *)v307 + 8))(v307);
    if (HIDWORD(v433))
    {
      v331 = (WTF::StringImpl **)*((_QWORD *)&v432 + 1);
      v332 = 8 * HIDWORD(v433);
      do
      {
        v333 = *v331;
        *v331 = 0;
        if (v333)
        {
          if (*(_DWORD *)v333 == 2)
            WTF::StringImpl::destroy(v333, v306);
          else
            *(_DWORD *)v333 -= 2;
        }
        ++v331;
        v332 -= 8;
      }
      while (v332);
    }
    v308 = (WTF *)*((_QWORD *)&v432 + 1);
    if (*((_QWORD *)&v432 + 1))
    {
      *((_QWORD *)&v432 + 1) = 0;
      LODWORD(v433) = 0;
      WTF::fastFree(v308, v306);
    }
    if (DWORD1(v432))
    {
      v334 = (WTF::StringImpl **)*((_QWORD *)&v431 + 1);
      v335 = 8 * DWORD1(v432);
      do
      {
        v336 = *v334;
        *v334 = 0;
        if (v336)
        {
          if (*(_DWORD *)v336 == 2)
            WTF::StringImpl::destroy(v336, v306);
          else
            *(_DWORD *)v336 -= 2;
        }
        ++v334;
        v335 -= 8;
      }
      while (v335);
    }
    v309 = (WTF *)*((_QWORD *)&v431 + 1);
    if (*((_QWORD *)&v431 + 1))
    {
      *((_QWORD *)&v431 + 1) = 0;
      LODWORD(v432) = 0;
      WTF::fastFree(v309, v306);
    }
    v310 = v431;
    *(_QWORD *)&v431 = 0;
    if (v310)
    {
      do
      {
        v311 = __ldaxr((unsigned int *)v310);
        v312 = v311 - 1;
      }
      while (__stlxr(v312, (unsigned int *)v310));
      if (!v312)
      {
        atomic_store(1u, (unsigned int *)v310);
        v343 = *(WTF **)(v310 + 8);
        if (v343)
        {
          *(_QWORD *)(v310 + 8) = 0;
          *(_DWORD *)(v310 + 16) = 0;
          WTF::fastFree(v343, v306);
        }
        WTF::fastFree((WTF *)v310, v306);
      }
    }
    if (v430 != -1)
      ((void (*)(WebCore::IDBServer::MemoryIndex **, _BYTE *))off_1E335A328[v430])(v439, v429);
    v430 = -1;
    v313 = v427;
    if (v427)
    {
      v314 = *(unsigned int *)(v427 - 4);
      if ((_DWORD)v314)
      {
        v315 = v427 + 24;
        do
        {
          if (*(_QWORD *)(v315 - 24) != -1)
          {
            v316 = *(unsigned int *)(v315 + 24);
            if ((_DWORD)v316 != -1)
              ((void (*)(WebCore::IDBServer::MemoryIndex **, uint64_t))off_1E335A490[v316])(v439, v315 + 8);
            *(_DWORD *)(v315 + 24) = -1;
            v317 = *(WTF::StringImpl **)v315;
            *(_QWORD *)v315 = 0;
            if (v317)
            {
              if (*(_DWORD *)v317 == 2)
                WTF::StringImpl::destroy(v317, v306);
              else
                *(_DWORD *)v317 -= 2;
            }
          }
          v315 += 64;
          --v314;
        }
        while (v314);
      }
      WTF::fastFree((WTF *)(v313 - 16), v306);
    }
    if (v425)
    {
      if (v424 != -1)
        ((void (*)(WebCore::IDBServer::MemoryIndex **, _BYTE *))off_1E335A490[v424])(v439, v423);
      v424 = -1;
    }
    v318 = v422;
    v422 = 0;
    if (v318)
    {
      if (*(_DWORD *)v318 == 2)
        WTF::StringImpl::destroy(v318, v306);
      else
        *(_DWORD *)v318 -= 2;
    }
    WebCore::IDBServer::MemoryObjectStore::addRecord((uint64_t)&v415, v290, v282, &v435, (unsigned int **)&v412);
    v319 = v435;
    if (v435)
    {
      v320 = *(unsigned int *)(v435 - 4);
      if ((_DWORD)v320)
      {
        v321 = (_DWORD *)(v435 + 40);
        do
        {
          if (*((_QWORD *)v321 - 5) != -1)
          {
            v322 = *v321;
            if ((_DWORD)v322 != -1)
              ((void (*)(WTF::StringImpl **, _DWORD *))off_1E335A4F0[v322])(&v421, v321 - 8);
            *v321 = -1;
          }
          v321 += 12;
          --v320;
        }
        while (v320);
      }
      WTF::fastFree((WTF *)(v319 - 16), v4);
    }
    v323 = v416;
    v416 = 0;
    if (v323)
    {
      if (*(_DWORD *)v323 == 2)
        WTF::StringImpl::destroy(v323, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v323 -= 2;
    }
    v324 = (WTF *)v414;
    if (HIDWORD(v414))
    {
      v337 = 8 * HIDWORD(v414);
      v338 = (WTF::StringImpl **)v414;
      do
      {
        v339 = *v338;
        *v338 = 0;
        if (v339)
        {
          if (*(_DWORD *)v339 == 2)
            WTF::StringImpl::destroy(v339, (WTF::StringImpl *)v4);
          else
            *(_DWORD *)v339 -= 2;
        }
        ++v338;
        v337 -= 8;
      }
      while (v337);
    }
    if (v324)
    {
      *(_QWORD *)&v414 = 0;
      DWORD2(v414) = 0;
      WTF::fastFree(v324, v4);
    }
    v325 = (WTF *)v413;
    if (HIDWORD(v413))
    {
      v340 = 8 * HIDWORD(v413);
      v341 = (WTF::StringImpl **)v413;
      do
      {
        v342 = *v341;
        *v341 = 0;
        if (v342)
        {
          if (*(_DWORD *)v342 == 2)
            WTF::StringImpl::destroy(v342, (WTF::StringImpl *)v4);
          else
            *(_DWORD *)v342 -= 2;
        }
        ++v341;
        v340 -= 8;
      }
      while (v340);
    }
    if (v325)
    {
      *(_QWORD *)&v413 = 0;
      DWORD2(v413) = 0;
      WTF::fastFree(v325, v4);
    }
    v326 = v412;
    v412 = 0;
    if (v326)
    {
      do
      {
        v327 = __ldaxr((unsigned int *)v326);
        v328 = v327 - 1;
      }
      while (__stlxr(v328, (unsigned int *)v326));
      if (!v328)
      {
        atomic_store(1u, (unsigned int *)v326);
        v344 = (WTF *)*((_QWORD *)v326 + 1);
        if (v344)
        {
          *((_QWORD *)v326 + 1) = 0;
          *((_DWORD *)v326 + 4) = 0;
          WTF::fastFree(v344, v4);
        }
        WTF::fastFree(v326, v4);
      }
    }
    v329 = v282 + 40;
    v282 = v281;
    if (v329 != v281)
    {
      v282 = v329;
      while (!*(_DWORD *)(v282 + 24) || *(_BYTE *)v282 != 0)
      {
        v282 += 40;
        if (v282 == v281)
        {
          v282 = v281;
          break;
        }
      }
    }
    if (v282 == v285)
    {
      v278 = v417;
      goto LABEL_601;
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_712:
  result = 291;
  __break(0xC471u);
  return result;
}

void WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>,WTF::HashTableTraits>::take(uint64_t *a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v5 = *a2;
  if (!*a2)
    goto LABEL_10;
  v7 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*a2, a3, a4);
  v8 = *(_DWORD *)(v5 - 4);
  if (!v7)
    v7 = (uint64_t *)(v5 + 24 * v8);
  if ((uint64_t *)(v5 + 24 * v8) == v7)
  {
LABEL_10:
    *a1 = 0;
  }
  else
  {
    v9 = v7[2];
    v7[2] = 0;
    *a1 = v9;
    v10 = *a2;
    if (!*a2 || (v10 += 24 * *(unsigned int *)(v10 - 4), (uint64_t *)v10 != v7))
    {
      if ((uint64_t *)v10 != v7)
      {
        *v7 = -1;
        v7[2] = 0;
        ++*(_DWORD *)(*a2 - 16);
        v11 = *a2;
        v12 = *a2 ? *(_DWORD *)(v11 - 12) - 1 : -1;
        *(_DWORD *)(v11 - 12) = v12;
        v13 = *a2;
        if (*a2)
        {
          v14 = 6 * *(_DWORD *)(v13 - 12);
          v15 = *(_DWORD *)(v13 - 4);
          if (v14 < v15 && v15 >= 9)
            WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a2, v15 >> 1);
        }
      }
    }
  }
}

WTF::StringImpl *WebCore::IDBServer::MemoryIDBBackingStore::commitTransaction@<X0>(WebCore::IDBServer::MemoryIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::IDBServer::MemoryBackingStoreTransaction *v4;
  void *v5;
  WTF *v6;
  void *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v12;

  WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>,WTF::HashTableTraits>::take((uint64_t *)&v12, (uint64_t *)this + 12, *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  v4 = v12;
  if (v12)
  {
    WebCore::IDBServer::MemoryBackingStoreTransaction::finish((uint64_t)v12);
    *(_WORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    WebCore::IDBServer::MemoryBackingStoreTransaction::~MemoryBackingStoreTransaction(v4, v5);
    return (WTF::StringImpl *)WTF::fastFree(v6, v7);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a3 = 264;
    result = v11;
    if (v11)
    {
      v10 = *(_DWORD *)v11;
      *(_DWORD *)v11 += 2;
      *(_QWORD *)(a3 + 8) = v11;
      if (v10)
        *(_DWORD *)v11 = v10;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v9);
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
    }
  }
  return result;
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::createObjectStore@<X0>(WebCore::IDBServer::MemoryIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, const WebCore::IDBObjectStoreInfo *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::IDBServer::MemoryObjectStore *v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  void *v25;
  const WTF::StringImpl *v26;
  void *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  void *v33;
  WebCore::IDBServer::MemoryObjectStore *v34;
  uint64_t v35;
  __int128 v36;
  WebCore::IDBServer::MemoryObjectStore *v37;

  v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    v10 = v8 + 72 * v9;
    if (*(_DWORD *)(v8 - 12))
    {
      v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
      if ((_DWORD)v9)
      {
        v12 = 72 * v9;
        v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
        while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
        {
          v11 += 72;
          v12 -= 72;
          if (!v12)
          {
            v11 = v10;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v11 = v8 + 72 * v9;
  }
  else
  {
    v11 = 0;
    LODWORD(v9) = 0;
  }
  v10 = v8 + 72 * v9;
  if (v8)
  {
LABEL_8:
    v13 = v8 + 72 * *(unsigned int *)(v8 - 4);
    goto LABEL_13;
  }
  v13 = 0;
LABEL_13:
  if (v13 == v11)
  {
LABEL_21:
    v16 = WTF::fastMalloc((WTF *)0x88);
    v17 = v16;
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = *(_QWORD *)a3;
    v18 = (_DWORD *)*((_QWORD *)a3 + 1);
    if (v18)
      *v18 += 2;
    *(_BYTE *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 24) = v18;
    *(_BYTE *)(v16 + 56) = 0;
    if (*((_BYTE *)a3 + 40))
    {
      *(_DWORD *)(v16 + 48) = -1;
      v19 = *((unsigned int *)a3 + 8);
      if ((_DWORD)v19 != -1)
      {
        ((void (*)(__int128 *))off_1E335A4A0[v19])(&v36);
        *(_DWORD *)(v17 + 48) = v19;
      }
      *(_BYTE *)(v17 + 56) = 1;
    }
    *(_BYTE *)(v17 + 64) = *((_BYTE *)a3 + 48);
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v17 + 72), (uint64_t *)a3 + 7);
    *(_QWORD *)(v17 + 80) = 0;
    *(_QWORD *)(v17 + 88) = 1;
    *(_OWORD *)(v17 + 96) = 0u;
    *(_OWORD *)(v17 + 112) = 0u;
    *(_QWORD *)(v17 + 128) = 0;
    v34 = (WebCore::IDBServer::MemoryObjectStore *)v17;
    v20 = *((_QWORD *)this + 11);
    v21 = *(WebCore::IDBServer::MemoryObjectStore **)a3;
    if (*(_QWORD *)a3 > *(_QWORD *)(v20 + 24))
      *(_QWORD *)(v20 + 24) = v21;
    v37 = v21;
    WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBObjectStoreInfo&>((uint64_t *)(v20 + 32), (uint64_t *)&v37, (uint64_t)a3, (uint64_t)&v36);
    v22 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 12), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
    if (v22)
      v23 = (uint64_t *)v22[2];
    else
      v23 = 0;
    ++*(_DWORD *)v17;
    v37 = (WebCore::IDBServer::MemoryObjectStore *)v17;
    WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>::add((WebCore::IDBServer::MemoryObjectStore *)&v36, v23 + 11, &v37);
    if (v37)
    {
      if (*(_DWORD *)v37 == 1)
      {
        WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v37, v24);
        WTF::fastFree(v28, v29);
      }
      else
      {
        --*(_DWORD *)v37;
      }
    }
    ++*(_DWORD *)v17;
    v37 = (WebCore::IDBServer::MemoryObjectStore *)v17;
    WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>::add((WebCore::IDBServer::MemoryObjectStore *)&v36, v23 + 10, &v37);
    if (v37)
    {
      if (*(_DWORD *)v37 == 1)
      {
        WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v37, v25);
        WTF::fastFree(v30, v31);
      }
      else
      {
        --*(_DWORD *)v37;
      }
    }
    *(_QWORD *)(v17 + 80) = v23;
    v37 = (WebCore::IDBServer::MemoryObjectStore *)v17;
    v35 = *(_QWORD *)(v17 + 88);
    WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,unsigned long long,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long>(&v36, v23 + 14, (uint64_t *)&v37, &v35);
    WebCore::IDBServer::MemoryIDBBackingStore::registerObjectStore((uint64_t)this, (const WTF::StringImpl ***)&v34, v26);
    *(_WORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    result = (uint64_t)v34;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
      {
        WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v34, v27);
        return WTF::fastFree(v32, v33);
      }
      else
      {
        --*(_DWORD *)v34;
      }
    }
  }
  else
  {
    while (1)
    {
      result = WTF::equal(*(WTF **)(v11 + 16), *((const WTF::StringImpl **)a3 + 1), a3);
      if ((result & 1) != 0)
        break;
      v15 = v11 + 72;
      v11 = v10;
      if (v15 != v10)
      {
        v11 = v15;
        while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
        {
          v11 += 72;
          if (v11 == v10)
          {
            v11 = v10;
            break;
          }
        }
      }
      if (v11 == v13)
        goto LABEL_21;
    }
    *(_WORD *)a4 = 281;
    *(_QWORD *)(a4 + 8) = 0;
  }
  return result;
}

WebCore::IDBServer::MemoryObjectStore *WebCore::IDBServer::MemoryIDBBackingStore::registerObjectStore(uint64_t a1, const WTF::StringImpl ***a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t *v5;
  const WTF::StringImpl **v6;
  const WTF::StringImpl *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  const WTF::StringImpl *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  int v20;
  int i;
  int v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  const WTF::StringImpl **v31;
  const WTF::StringImpl *v32;
  const WTF::StringImpl **v33;
  int v34;
  const WTF::StringImpl **v35;
  WebCore::IDBServer::MemoryObjectStore *result;
  uint64_t v37;
  int v38;
  const WTF::StringImpl **v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  WTF *v45;
  void *v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  const WTF::StringImpl **v50;

  v5 = (uint64_t *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 104);
  v6 = *a2;
  v7 = (*a2)[2];
  if (v4)
  {
    v8 = *(_DWORD *)(v4 - 8);
    v9 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(const WTF::StringImpl **)(v4 + 16 * v12);
    if (v13 == v7)
    {
LABEL_52:
      __break(0xC471u);
      JUMPOUT(0x1953BBBA8);
    }
    v14 = 1;
    while (v13)
    {
      v12 = (v12 + v14) & v8;
      v13 = *(const WTF::StringImpl **)(v4 + 16 * v12);
      ++v14;
      if (v13 == v7)
        goto LABEL_52;
    }
  }
  v15 = (uint64_t *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 112);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = v6[3];
    v19 = *((_DWORD *)v18 + 4);
    if (v19 < 0x100)
      v20 = WTF::StringImpl::hashSlowCase(v18);
    else
      v20 = v19 >> 8;
    for (i = 0; ; v20 = i + v22)
    {
      v22 = v20 & v17;
      v23 = *(WTF **)(v16 + 16 * (v20 & v17));
      if (v23 != (WTF *)-1)
      {
        if (!v23)
        {
          v6 = *a2;
          v7 = (*a2)[2];
          break;
        }
        if ((WTF::equal(v23, v6[3], a3) & 1) != 0)
          goto LABEL_52;
      }
      ++i;
    }
  }
  v50 = v6;
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::IDBServer::MemoryObjectStore*>((uint64_t)&v49, v15, v6 + 3, (WebCore::IDBServer::MemoryObjectStore **)&v50);
  v25 = *v5;
  if (*v5
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v5, 8u), (v25 = *v5) != 0))
  {
    v26 = *(_DWORD *)(v25 - 8);
  }
  else
  {
    v26 = 0;
  }
  v27 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
  v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
  v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
  v30 = v26 & ((v29 >> 31) ^ v29);
  v31 = (const WTF::StringImpl **)(v25 + 16 * v30);
  v32 = *v31;
  if (!*v31)
  {
LABEL_28:
    *v31 = v7;
    v35 = *a2;
    *a2 = 0;
    result = v31[1];
    v31[1] = (const WTF::StringImpl *)v35;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(result, v24);
        result = (WebCore::IDBServer::MemoryObjectStore *)WTF::fastFree(v45, v46);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v37 = *v5;
    if (*v5)
      v38 = *(_DWORD *)(v37 - 12) + 1;
    else
      v38 = 1;
    *(_DWORD *)(v37 - 12) = v38;
    v40 = *v5;
    if (*v5)
      v41 = *(_DWORD *)(v40 - 12);
    else
      v41 = 0;
    v42 = (*(_DWORD *)(v40 - 16) + v41);
    v43 = *(unsigned int *)(v40 - 4);
    if (v43 > 0x400)
    {
      if (v43 > 2 * v42)
        return result;
    }
    else
    {
      if (3 * v43 > 4 * v42)
        return result;
      if (!(_DWORD)v43)
      {
        v44 = 8;
        return (WebCore::IDBServer::MemoryObjectStore *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v5, v44);
      }
    }
    v44 = (_DWORD)v43 << (6 * *(_DWORD *)(v40 - 12) >= (2 * v43));
    return (WebCore::IDBServer::MemoryObjectStore *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v5, v44);
  }
  v33 = 0;
  v34 = 1;
  while (v32 != v7)
  {
    if (v32 == (const WTF::StringImpl *)-1)
      v33 = v31;
    v30 = (v30 + v34) & v26;
    v31 = (const WTF::StringImpl **)(v25 + 16 * v30);
    v32 = *v31;
    ++v34;
    if (!*v31)
    {
      if (v33)
      {
        *v33 = 0;
        v33[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v31 = v33;
      }
      goto LABEL_28;
    }
  }
  v39 = *a2;
  *a2 = 0;
  result = v31[1];
  v31[1] = (const WTF::StringImpl *)v39;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(result, v24);
      return (WebCore::IDBServer::MemoryObjectStore *)WTF::fastFree(v47, v48);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::deleteObjectStore@<X0>(uint64_t this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  WTF::StringImpl **v18;
  const WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  WTF::StringImpl ***v35;
  uint64_t v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  int v40;
  int i;
  uint64_t v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  WebCore::IDBServer::MemoryObjectStore *v45;
  WTF::StringImpl **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  _QWORD *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  WTF *v100;
  void *v101;
  WTF *v102;
  void *v103;
  _QWORD *v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  WebCore::IDBServer::MemoryObjectStore **v119;
  WebCore::IDBServer::MemoryObjectStore *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  WTF::StringImpl *v139;
  uint64_t v140;
  WTF *v141;
  void *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  WTF::StringImpl *v147;
  unsigned int v148;
  unsigned int v149;
  WTF::StringImpl **v150;
  int j;
  unsigned int v152;
  WTF::StringImpl **v153;
  WTF *v154;
  WTF::StringImpl *v155;
  WebCore::IDBServer::MemoryObjectStore *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  WTF *v167;
  void *v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int v172;
  unsigned int v173;
  unint64_t v174;
  double v175;
  double v176;
  double v177;
  unsigned int v178;
  WTF *v179;
  void *v180;
  WTF *v181;
  void *v182;
  WTF *v183;
  void *v184;
  WebCore::IDBServer::MemoryObjectStore *v185;
  uint64_t v186;
  WTF::StringImpl *v187;

  v5 = *(_QWORD *)(*(_QWORD *)(this + 88) + 32);
  if (!v5)
    goto LABEL_37;
  v7 = (_QWORD *)this;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  v13 = v8 & v12;
  v14 = (uint64_t *)(v5 + 72 * (v8 & v12));
  v15 = *v14;
  if (*v14 != a3)
  {
    v16 = 1;
    while (v15)
    {
      v13 = (v13 + v16) & v8;
      v14 = (uint64_t *)(v5 + 72 * v13);
      v15 = *v14;
      ++v16;
      if (*v14 == a3)
        goto LABEL_8;
    }
    v14 = (uint64_t *)(v5 + 72 * *(unsigned int *)(v5 - 4));
  }
LABEL_8:
  if (v14 == (uint64_t *)(v5 + 72 * *(unsigned int *)(v5 - 4)))
    goto LABEL_37;
  v17 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*(_QWORD *)(this + 96), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  v20 = v17 ? (uint64_t *)v17[2] : 0;
  this = (uint64_t)(v7 + 13);
  v21 = v7[13];
  if (!v21)
    goto LABEL_37;
  v22 = *(_DWORD *)(v21 - 8);
  v23 = v22 & v12;
  v24 = *(_QWORD *)(v21 + 16 * v23);
  if (v24 != a3)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v22;
      v24 = *(_QWORD *)(v21 + 16 * v23);
      ++v25;
      if (v24 == a3)
        goto LABEL_19;
    }
    v23 = *(unsigned int *)(v21 - 4);
  }
LABEL_19:
  if (v23 == *(_DWORD *)(v21 - 4))
    goto LABEL_37;
  v26 = (_QWORD *)(v21 + 16 * v23);
  v27 = v26[1];
  v26[1] = 0;
  v28 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (v28 += 16 * *(unsigned int *)(v28 - 4), (_QWORD *)v28 != v26))
  {
    if ((_QWORD *)v28 != v26)
    {
      *v26 = -1;
      v26[1] = 0;
      ++*(_DWORD *)(*(_QWORD *)this - 16);
      v29 = *(_QWORD *)this;
      v30 = *(_QWORD *)this ? *(_DWORD *)(v29 - 12) - 1 : -1;
      *(_DWORD *)(v29 - 12) = v30;
      v31 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v32 = 6 * *(_DWORD *)(v31 - 12);
        v33 = *(_DWORD *)(v31 - 4);
        if (v32 < v33 && v33 >= 9)
          this = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash((uint64_t *)this, v33 >> 1);
      }
    }
  }
  if (!v27)
  {
LABEL_37:
    *(_WORD *)a4 = 281;
    *(_QWORD *)(a4 + 8) = 0;
    return this;
  }
  v35 = (WTF::StringImpl ***)(v7 + 14);
  v36 = v7[14];
  if (v36)
  {
    v37 = *(_DWORD *)(v36 - 8);
    v38 = *(WTF::StringImpl **)(v27 + 24);
    v39 = *((_DWORD *)v38 + 4);
    if (v39 < 0x100)
      v40 = WTF::StringImpl::hashSlowCase(v38);
    else
      v40 = v39 >> 8;
    for (i = 0; ; v40 = i + v42)
    {
      v42 = v40 & v37;
      this = *(_QWORD *)(v36 + 16 * v42);
      if (this != -1)
      {
        if (!this)
        {
          v43 = *v35;
          if (!*v35)
            goto LABEL_57;
          v44 = *((unsigned int *)v43 - 1);
          v18 = &v43[2 * v44];
          goto LABEL_48;
        }
        this = WTF::equal((WTF *)this, *(const WTF::StringImpl **)(v27 + 24), v19);
        if ((this & 1) != 0)
          break;
      }
      ++i;
    }
    v18 = (WTF::StringImpl **)(v36 + 16 * v42);
    v43 = *v35;
    if (!*v35)
      goto LABEL_49;
    v44 = *((unsigned int *)v43 - 1);
LABEL_48:
    v43 += 2 * v44;
LABEL_49:
    if (v43 != v18)
    {
      v45 = v18[1];
      v18[1] = 0;
      v46 = *v35;
      if (!*v35 || (v46 += 2 * *((unsigned int *)v46 - 1), v46 != v18))
      {
        if (v46 != v18)
          this = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v7 + 14, v18);
      }
      if (v45)
      {
        if (*(_DWORD *)v45 == 1)
        {
          WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v45, v18);
          this = WTF::fastFree(v100, v101);
        }
        else
        {
          --*(_DWORD *)v45;
        }
      }
    }
  }
LABEL_57:
  v47 = v7[11];
  v50 = *(_QWORD *)(v47 + 32);
  v49 = (uint64_t *)(v47 + 32);
  v48 = v50;
  if (v50)
  {
    v51 = *(unsigned int *)(v48 - 4);
    v52 = v48 + 72 * v51;
    if (*(_DWORD *)(v48 - 12))
    {
      v53 = v48;
      if ((_DWORD)v51)
      {
        v54 = 72 * v51;
        v53 = v48;
        while ((unint64_t)(*(_QWORD *)v53 + 1) <= 1)
        {
          v53 += 72;
          v54 -= 72;
          if (!v54)
          {
            v53 = v52;
            goto LABEL_67;
          }
        }
      }
      goto LABEL_67;
    }
    v53 = v48 + 72 * v51;
  }
  else
  {
    v53 = 0;
    LODWORD(v51) = 0;
  }
  v52 = v48 + 72 * v51;
LABEL_67:
  if (v48)
    v55 = v48 + 72 * *(unsigned int *)(v48 - 4);
  else
    v55 = 0;
  if (v55 != v53)
  {
    while (1)
    {
      this = WTF::equal(*(WTF **)(v53 + 16), *(const WTF::StringImpl **)(v27 + 24), v19);
      if ((this & 1) != 0)
        break;
      v56 = v53 + 72;
      v53 = v52;
      if (v56 != v52)
      {
        v53 = v56;
        while ((unint64_t)(*(_QWORD *)v53 + 1) <= 1)
        {
          v53 += 72;
          if (v53 == v52)
          {
            v53 = v52;
            break;
          }
        }
      }
      if (v53 == v55)
        goto LABEL_80;
    }
    v186 = *(_QWORD *)(v53 + 8);
    this = WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::remove(v49, (WTF::StringImpl *)&v186);
  }
LABEL_80:
  ++*(_DWORD *)v27;
  v58 = v20 + 10;
  v57 = v20[10];
  if (v57)
  {
    v59 = *(_DWORD *)(v57 - 8);
    v60 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
    v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
    v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
    v63 = v59 & ((v62 >> 31) ^ v62);
    v64 = *(_QWORD *)(v57 + 8 * v63);
    if (v64 != v27)
    {
      v65 = 1;
      while (v64)
      {
        v63 = ((_DWORD)v63 + v65) & v59;
        v64 = *(_QWORD *)(v57 + 8 * v63);
        ++v65;
        if (v64 == v27)
          goto LABEL_87;
      }
      v63 = *(unsigned int *)(v57 - 4);
    }
LABEL_87:
    if (v63 != *(_DWORD *)(v57 - 4))
    {
      this = *(_QWORD *)(v57 + 8 * v63);
      *(_QWORD *)(v57 + 8 * v63) = -1;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore((WebCore::IDBServer::MemoryObjectStore *)this, v18);
          this = WTF::fastFree(v102, v103);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
      ++*(_DWORD *)(*v58 - 16);
      v66 = *v58;
      if (*v58)
        v67 = *(_DWORD *)(v66 - 12) - 1;
      else
        v67 = -1;
      *(_DWORD *)(v66 - 12) = v67;
      v68 = *v58;
      if (*v58)
      {
        v69 = 6 * *(_DWORD *)(v68 - 12);
        v70 = *(_DWORD *)(v68 - 4);
        if (v69 < v70 && v70 >= 9)
          this = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>::rehash(v20 + 10, v70 >> 1, 0);
      }
    }
  }
  v73 = v20 + 20;
  v72 = v20[20];
  if (v72)
  {
    v74 = *(_DWORD *)(v72 - 8);
    v75 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
    v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
    v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
    v78 = v74 & ((v77 >> 31) ^ v77);
    v79 = *(_QWORD *)(v72 + 16 * v78);
    if (v79 == v27)
    {
LABEL_111:
      if (v78 != *(_DWORD *)(v72 - 4))
      {
        v84 = (_QWORD *)(v72 + 16 * v78);
        this = v84[1];
        *v84 = -1;
        v84[1] = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v18);
          else
            *(_DWORD *)this -= 2;
        }
        ++*(_DWORD *)(*v73 - 16);
        v85 = *v73;
        if (*v73)
          v86 = *(_DWORD *)(v85 - 12) - 1;
        else
          v86 = -1;
        *(_DWORD *)(v85 - 12) = v86;
        v87 = *v73;
        if (*v73)
        {
          v88 = 6 * *(_DWORD *)(v87 - 12);
          v89 = *(_DWORD *)(v87 - 4);
          if (v88 < v89 && v89 >= 9)
            this = WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,WTF::String>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,WTF::String,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(v20 + 20, v89 >> 1);
        }
      }
    }
    else
    {
      v80 = 1;
      v81 = *(_QWORD *)(v72 + 16 * v78);
      v82 = v78;
      while (v81)
      {
        v82 = (v82 + v80) & v74;
        v81 = *(_QWORD *)(v72 + 16 * v82);
        ++v80;
        if (v81 == v27)
        {
          v83 = 1;
          while (v79)
          {
            v78 = ((_DWORD)v78 + v83) & v74;
            v79 = *(_QWORD *)(v72 + 16 * v78);
            ++v83;
            if (v79 == v27)
              goto LABEL_111;
          }
          v78 = *(unsigned int *)(v72 - 4);
          goto LABEL_111;
        }
      }
    }
  }
  v91 = *(_QWORD *)(v27 + 120);
  if (v91)
  {
    v92 = *(unsigned int *)(v91 - 12);
    if ((_DWORD)v92)
    {
      if (v92 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v93 = WTF::fastMalloc((WTF *)(8 * v92));
      v95 = (WTF *)v93;
      v96 = *(_QWORD *)(v27 + 120);
      if (v96 && *(_DWORD *)(v96 - 12))
      {
        v97 = *(unsigned int *)(v96 - 4);
        if ((_DWORD)v97)
        {
          v98 = 16 * v97;
          v99 = *(_QWORD **)(v27 + 120);
          while ((unint64_t)(*v99 + 1) <= 1)
          {
            v99 += 2;
            v98 -= 16;
            if (!v98)
              goto LABEL_152;
          }
        }
        else
        {
          v99 = *(_QWORD **)(v27 + 120);
        }
        v104 = (_QWORD *)(v96 + 16 * v97);
        if (v99 != v104)
        {
          v105 = 0;
          v106 = 1;
LABEL_140:
          v107 = v106;
          *(_QWORD *)(v93 + 8 * v105++) = *(_QWORD *)(v99[1] + 8);
          while (1)
          {
            v99 += 2;
            if (v99 == v104)
              break;
            if ((unint64_t)(*v99 + 1) > 1)
            {
              ++v106;
              if (v99 != v104)
                goto LABEL_140;
              break;
            }
          }
          if (v105)
          {
            v108 = 8 * v107;
            v109 = (uint64_t *)v93;
            do
            {
              WebCore::IDBServer::MemoryObjectStore::deleteIndex((uint64_t)&v186, (WebCore::IDBServer::MemoryBackingStoreTransaction *)v27, (uint64_t)v20, *v109);
              v110 = v187;
              v187 = 0;
              if (v110)
              {
                if (*(_DWORD *)v110 == 2)
                  WTF::StringImpl::destroy(v110, v94);
                else
                  *(_DWORD *)v110 -= 2;
              }
              ++v109;
              v108 -= 8;
            }
            while (v108);
          }
        }
      }
LABEL_152:
      WTF::fastFree(v95, v94);
    }
  }
  this = (uint64_t)(v20 + 11);
  v111 = v20[11];
  if (v111)
  {
    v112 = *(_DWORD *)(v111 - 8);
    v113 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
    v114 = 9 * ((v113 + ~(v113 << 13)) ^ ((v113 + ~(v113 << 13)) >> 8));
    v115 = (v114 ^ (v114 >> 15)) + ~((v114 ^ (v114 >> 15)) << 27);
    v116 = v112 & ((v115 >> 31) ^ v115);
    v117 = *(_QWORD *)(v111 + 8 * v116);
    if (v117 != v27)
    {
      v118 = 1;
      while (v117)
      {
        v116 = ((_DWORD)v116 + v118) & v112;
        v117 = *(_QWORD *)(v111 + 8 * v116);
        ++v118;
        if (v117 == v27)
          goto LABEL_160;
      }
      v116 = *(unsigned int *)(v111 - 4);
    }
LABEL_160:
    if (v116 != *(_DWORD *)(v111 - 4))
    {
      v119 = (WebCore::IDBServer::MemoryObjectStore **)(v111 + 8 * v116);
      v120 = *v119;
      *v119 = 0;
      v121 = *(_QWORD *)this;
      if (!*(_QWORD *)this
        || (v121 += 8 * *(unsigned int *)(v121 - 4), (WebCore::IDBServer::MemoryObjectStore **)v121 != v119))
      {
        if ((WebCore::IDBServer::MemoryObjectStore **)v121 != v119)
        {
          *v119 = (WebCore::IDBServer::MemoryObjectStore *)-1;
          ++*(_DWORD *)(*(_QWORD *)this - 16);
          v122 = *(_QWORD *)this;
          v123 = *(_QWORD *)this ? *(_DWORD *)(v122 - 12) - 1 : -1;
          *(_DWORD *)(v122 - 12) = v123;
          v124 = *(_QWORD *)this;
          if (*(_QWORD *)this)
          {
            v125 = 6 * *(_DWORD *)(v124 - 12);
            v126 = *(_DWORD *)(v124 - 4);
            if (v125 < v126 && v126 >= 9)
              this = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>::rehash((uint64_t *)this, v126 >> 1, 0);
          }
        }
      }
      if (v120)
      {
        v130 = v20[16];
        v128 = v20 + 16;
        v129 = v130;
        if (!v130)
          goto LABEL_262;
        v131 = *(_DWORD *)(v129 - 4);
        if (!v131)
          goto LABEL_262;
        v185 = v120;
        v132 = 0;
        v133 = *(_QWORD *)(v27 + 16);
        while (1)
        {
          v134 = v129 + 16 * --v131;
          if ((unint64_t)(*(_QWORD *)v134 + 1) >= 2)
          {
            this = *(_QWORD *)(*(_QWORD *)(v134 + 8) + 64);
            if (this)
            {
              do
                v135 = __ldaxr((unsigned int *)this);
              while (__stlxr(v135 + 1, (unsigned int *)this));
              v136 = *(_QWORD *)(*(_QWORD *)(this + 8) + 16);
              do
              {
                v137 = __ldaxr((unsigned int *)this);
                v138 = v137 - 1;
              }
              while (__stlxr(v138, (unsigned int *)this));
              if (!v138)
              {
                atomic_store(1u, (unsigned int *)this);
                this = WTF::fastFree((WTF *)this, v18);
              }
              if (v136 != v133)
                goto LABEL_179;
LABEL_188:
              v139 = *(WTF::StringImpl **)v134;
              *(_QWORD *)v134 = -1;
              if (v139)
              {
                if (*(_DWORD *)v139 == 2)
                  WTF::StringImpl::destroy(v139, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v139 -= 2;
              }
              v140 = v129 + 16 * v131;
              this = *(_QWORD *)(v140 + 8);
              *(_QWORD *)(v140 + 8) = 0;
              if (this)
              {
                if (*(_DWORD *)this == 1)
                {
                  WebCore::IDBServer::MemoryIndex::~MemoryIndex((WebCore::IDBServer::MemoryIndex *)this, v18);
                  this = WTF::fastFree(v141, v142);
                }
                else
                {
                  --*(_DWORD *)this;
                }
              }
              ++v132;
              goto LABEL_179;
            }
            if (MEMORY[0x10] == v133)
              goto LABEL_188;
          }
LABEL_179:
          if (!v131)
          {
            v164 = *v128;
            if (v132)
            {
              *(_DWORD *)(v164 - 16) += v132;
              v165 = *v128;
              if (*v128)
                v166 = *(_DWORD *)(v165 - 12);
              else
                v166 = 0;
              v120 = v185;
              *(_DWORD *)(v165 - 12) = v166 - v132;
              v164 = *v128;
            }
            else
            {
              v120 = v185;
            }
            if (v164)
            {
              v169 = *(_DWORD *)(v164 - 4);
              v170 = *(unsigned int *)(v164 - 12);
              if (v169 >= 9 && 6 * (int)v170 < v169)
              {
                v172 = (v170 - 1) | ((v170 - 1) >> 1) | ((((_DWORD)v170 - 1) | ((v170 - 1) >> 1)) >> 2);
                v173 = v172 | (v172 >> 4) | ((v172 | (v172 >> 4)) >> 8);
                v174 = (v173 | HIWORD(v173)) + 1;
                if (v174 > 0x400)
                {
                  if (v174 <= 2 * v170)
                  {
LABEL_251:
                    LODWORD(v174) = 2 * v174;
                    if (v174 <= 0x400)
                      goto LABEL_252;
                  }
                  v175 = (double)v170;
                  v176 = (double)v174;
                  v177 = 0.416666667;
                }
                else
                {
                  if (3 * v174 <= 4 * v170)
                    goto LABEL_251;
LABEL_252:
                  v175 = (double)v170;
                  v176 = (double)v174;
                  v177 = 0.604166667;
                }
                if (v176 * v177 <= v175)
                  LODWORD(v174) = 2 * v174;
                if (v174 <= 8)
                  v178 = 8;
                else
                  v178 = v174;
                this = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v128, v178, 0);
              }
            }
LABEL_262:
            if (*(_DWORD *)v120 == 1)
            {
              WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v120, v18);
              this = WTF::fastFree(v183, v184);
            }
            else
            {
              --*(_DWORD *)v120;
            }
LABEL_264:
            if (*(_DWORD *)v27 != 1)
            {
              --*(_DWORD *)v27;
              goto LABEL_266;
            }
            this = v27;
LABEL_270:
            WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore((WebCore::IDBServer::MemoryObjectStore *)this, v18);
            this = WTF::fastFree(v181, v182);
            goto LABEL_266;
          }
        }
      }
    }
  }
  v145 = v20[15];
  v143 = v20 + 15;
  v144 = v145;
  if (v145
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v143, 8u, 0), (v144 = *v143) != 0))
  {
    v146 = *(_DWORD *)(v144 - 8);
  }
  else
  {
    v146 = 0;
  }
  v147 = *(WTF::StringImpl **)(v27 + 24);
  v148 = *((_DWORD *)v147 + 4);
  if (v148 < 0x100)
    v149 = WTF::StringImpl::hashSlowCase(v147);
  else
    v149 = v148 >> 8;
  v150 = 0;
  for (j = 1; ; ++j)
  {
    v152 = v149 & v146;
    v153 = (WTF::StringImpl **)(v144 + 16 * (v149 & v146));
    v154 = *v153;
    if (*v153 == (WTF::StringImpl *)-1)
    {
      v150 = (WTF::StringImpl **)(v144 + 16 * v152);
      goto LABEL_211;
    }
    if (!v154)
      break;
    this = WTF::equal(v154, *(const WTF::StringImpl **)(v27 + 24), v19);
    if ((this & 1) != 0)
      goto LABEL_264;
LABEL_211:
    v149 = j + v152;
  }
  if (v150)
  {
    *v150 = 0;
    v150[1] = 0;
    --*(_DWORD *)(*v143 - 16);
    v153 = v150;
  }
  v155 = *(WTF::StringImpl **)(v27 + 24);
  if (v155)
    *(_DWORD *)v155 += 2;
  *v153 = v155;
  v156 = v153[1];
  v153[1] = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 1)
    {
      WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v156, v18);
      WTF::fastFree(v167, v168);
    }
    else
    {
      --*(_DWORD *)v156;
    }
  }
  v157 = *v143;
  if (*v143)
    v158 = *(_DWORD *)(v157 - 12) + 1;
  else
    v158 = 1;
  *(_DWORD *)(v157 - 12) = v158;
  v159 = *v143;
  if (*v143)
    v160 = *(_DWORD *)(v159 - 12);
  else
    v160 = 0;
  v161 = (*(_DWORD *)(v159 - 16) + v160);
  v162 = *(unsigned int *)(v159 - 4);
  if (v162 > 0x400)
  {
    if (v162 <= 2 * v161)
    {
LABEL_228:
      v163 = (_DWORD)v162 << (6 * *(_DWORD *)(v159 - 12) >= (2 * v162));
      goto LABEL_234;
    }
  }
  else if (3 * v162 <= 4 * v161)
  {
    if ((_DWORD)v162)
      goto LABEL_228;
    v163 = 8;
LABEL_234:
    v153 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v143, v163, v153);
  }
  this = (uint64_t)v153[1];
  v153[1] = (WTF::StringImpl *)v27;
  if (this)
  {
    if (*(_DWORD *)this == 1)
      goto LABEL_270;
    --*(_DWORD *)this;
  }
LABEL_266:
  *(_WORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (*(_DWORD *)v27 == 1)
  {
    WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore((WebCore::IDBServer::MemoryObjectStore *)v27, v18);
    return WTF::fastFree(v179, v180);
  }
  else
  {
    --*(_DWORD *)v27;
  }
  return this;
}

_QWORD *WebCore::IDBServer::MemoryIDBBackingStore::renameObjectStore@<X0>(_QWORD *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, WTF::StringImpl **a3@<X3>, WTF::StringImpl *a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t v6;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl **v39;
  WTF::StringImpl ***v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int i;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  WTF::StringImpl **v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  WTF **v67;
  int j;
  uint64_t v69;
  WTF **v70;
  WTF *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  _QWORD *v74;
  WebCore::IDBServer::MemoryObjectStore *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  WebCore::IDBServer::MemoryObjectStore *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  WTF::StringImpl *v85;
  WTF *v86;
  void *v87;
  WTF *v88;
  void *v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;

  v6 = *(_QWORD *)(this[11] + 32);
  if (!v6)
    goto LABEL_43;
  v9 = this;
  v10 = *(_DWORD *)(v6 - 8);
  v11 = ((unint64_t)a4 + ~((_QWORD)a4 << 32)) ^ (((unint64_t)a4 + ~((_QWORD)a4 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  v15 = v10 & v14;
  v16 = (WTF::StringImpl **)(v6 + 72 * (v10 & v14));
  v17 = *v16;
  if (*v16 != a4)
  {
    v18 = 1;
    while (v17)
    {
      v15 = (v15 + v18) & v10;
      v16 = (WTF::StringImpl **)(v6 + 72 * v15);
      v17 = *v16;
      ++v18;
      if (*v16 == a4)
        goto LABEL_8;
    }
    v16 = (WTF::StringImpl **)(v6 + 72 * *(unsigned int *)(v6 - 4));
  }
LABEL_8:
  if (v16 == (WTF::StringImpl **)(v6 + 72 * *(unsigned int *)(v6 - 4))
    || ((this = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(this[12], *(_QWORD *)a2, *((_QWORD *)a2 + 1))) == 0? (v21 = 0): (v21 = this[2]), (v22 = v9[13]) == 0))
  {
LABEL_43:
    *(_WORD *)a5 = 281;
    *(_QWORD *)(a5 + 8) = 0;
    return this;
  }
  v23 = *(_DWORD *)(v22 - 8);
  v24 = v23 & v14;
  v25 = *(WTF::StringImpl **)(v22 + 16 * v24);
  if (v25 != a4)
  {
    v26 = 1;
    while (v25)
    {
      v24 = ((_DWORD)v24 + v26) & v23;
      v25 = *(WTF::StringImpl **)(v22 + 16 * v24);
      ++v26;
      if (v25 == a4)
        goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_17:
  v27 = *(WTF::StringImpl ***)(v22 + 16 * v24 + 8);
  if (!v27)
    goto LABEL_43;
  v28 = v27[3];
  if (v28)
    *(_DWORD *)v28 += 2;
  v29 = *a3;
  if (*a3)
    *(_DWORD *)v29 += 2;
  v27[3] = v29;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v19);
    else
      *(_DWORD *)v28 -= 2;
  }
  v32 = *(_QWORD *)(v21 + 160);
  v31 = (uint64_t *)(v21 + 160);
  v30 = v32;
  if (v32
    || (WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,WTF::String>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,WTF::String,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(v31, 8u), (v30 = *v31) != 0))
  {
    v33 = *(_DWORD *)(v30 - 8);
  }
  else
  {
    v33 = 0;
  }
  v34 = ((unint64_t)v27 + ~((_QWORD)v27 << 32)) ^ (((unint64_t)v27 + ~((_QWORD)v27 << 32)) >> 22);
  v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
  v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
  v37 = v33 & ((v36 >> 31) ^ v36);
  v38 = (WTF::StringImpl ***)(v30 + 16 * v37);
  v39 = *v38;
  if (!*v38)
  {
LABEL_36:
    *v38 = v27;
    if (v28)
      *(_DWORD *)v28 += 2;
    v42 = (WTF::StringImpl *)v38[1];
    v38[1] = (WTF::StringImpl **)v28;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v19);
      else
        *(_DWORD *)v42 -= 2;
    }
    v43 = *v31;
    if (*v31)
      v44 = *(_DWORD *)(v43 - 12) + 1;
    else
      v44 = 1;
    *(_DWORD *)(v43 - 12) = v44;
    v45 = *v31;
    if (*v31)
      v46 = *(_DWORD *)(v45 - 12);
    else
      v46 = 0;
    v47 = (*(_DWORD *)(v45 - 16) + v46);
    v48 = *(unsigned int *)(v45 - 4);
    if (v48 > 0x400)
    {
      if (v48 > 2 * v47)
        goto LABEL_56;
    }
    else
    {
      if (3 * v48 > 4 * v47)
        goto LABEL_56;
      if (!(_DWORD)v48)
      {
        v49 = 8;
        goto LABEL_55;
      }
    }
    v49 = (_DWORD)v48 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v48));
LABEL_55:
    WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,WTF::String>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,WTF::String,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(v31, v49);
    goto LABEL_56;
  }
  v40 = 0;
  v41 = 1;
  while (v39 != v27)
  {
    if (v39 == (WTF::StringImpl **)-1)
      v40 = v38;
    v37 = (v37 + v41) & v33;
    v38 = (WTF::StringImpl ***)(v30 + 16 * v37);
    v39 = *v38;
    ++v41;
    if (!*v38)
    {
      if (v40)
      {
        *v40 = 0;
        v40[1] = 0;
        --*(_DWORD *)(*v31 - 16);
        v38 = v40;
      }
      goto LABEL_36;
    }
  }
LABEL_56:
  v91 = v9;
  v92 = a5;
  v52 = v9[14];
  v50 = v9 + 14;
  v51 = v52;
  if (!v52)
    goto LABEL_75;
  v53 = v50;
  v54 = *(_DWORD *)(v51 - 8);
  v55 = *((_DWORD *)v28 + 4);
  v56 = v55 < 0x100 ? WTF::StringImpl::hashSlowCase(v28) : v55 >> 8;
  for (i = 0; ; v56 = ++i + v58)
  {
    v58 = v56 & v54;
    v59 = *(WTF **)(v51 + 16 * v58);
    if (v59 != (WTF *)-1)
    {
      if (!v59)
      {
        v50 = v53;
        v60 = *v53;
        if (!v60)
          goto LABEL_75;
        v61 = *(unsigned int *)(v60 - 4);
        v62 = (WTF::StringImpl **)(v60 + 16 * v61);
        goto LABEL_69;
      }
      if ((WTF::equal(v59, v28, v20) & 1) != 0)
        break;
    }
  }
  v62 = (WTF::StringImpl **)(v51 + 16 * v58);
  v50 = v53;
  v60 = *v53;
  if (!v60)
  {
    v63 = 0;
    goto LABEL_72;
  }
  v61 = *(unsigned int *)(v60 - 4);
LABEL_69:
  v63 = (WTF::StringImpl **)(v60 + 16 * v61);
  if (v63 == v62)
    goto LABEL_76;
LABEL_72:
  if (v63 != v62)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v50, v62);
    v60 = *v50;
  }
  if (!v60)
  {
LABEL_75:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v50, 8u, 0);
    v60 = *v50;
    if (!*v50)
    {
      v64 = 0;
      goto LABEL_78;
    }
  }
LABEL_76:
  v64 = *(_DWORD *)(v60 - 8);
LABEL_78:
  v65 = *((_DWORD *)*a3 + 4);
  v90 = v50;
  if (v65 < 0x100)
    v66 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v66 = v65 >> 8;
  v67 = 0;
  for (j = 1; ; ++j)
  {
    v69 = v66 & v64;
    v70 = (WTF **)(v60 + 16 * v69);
    v71 = *v70;
    if (*v70 != (WTF *)-1)
      break;
    v67 = (WTF **)(v60 + 16 * v69);
LABEL_87:
    v66 = j + v69;
  }
  if (!v71)
  {
    if (v67)
    {
      *v67 = 0;
      v67[1] = 0;
      --*(_DWORD *)(*v90 - 16);
      v70 = v67;
    }
    v72 = *a3;
    v74 = v91;
    v73 = v92;
    if (*a3)
      *(_DWORD *)v72 += 2;
    *v70 = v72;
    ++*(_DWORD *)v27;
    v75 = v70[1];
    v70[1] = (WTF *)v27;
    if (v75)
    {
      if (*(_DWORD *)v75 == 1)
      {
        WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v75, v62);
        WTF::fastFree(v86, v87);
      }
      else
      {
        --*(_DWORD *)v75;
      }
    }
    v76 = *v90;
    if (*v90)
      v77 = *(_DWORD *)(v76 - 12) + 1;
    else
      v77 = 1;
    *(_DWORD *)(v76 - 12) = v77;
    v80 = *v90;
    if (*v90)
      v81 = *(_DWORD *)(v80 - 12);
    else
      v81 = 0;
    v82 = (*(_DWORD *)(v80 - 16) + v81);
    v83 = *(unsigned int *)(v80 - 4);
    if (v83 > 0x400)
    {
      if (v83 > 2 * v82)
        goto LABEL_112;
    }
    else
    {
      if (3 * v83 > 4 * v82)
        goto LABEL_112;
      if (!(_DWORD)v83)
      {
        v84 = 8;
        goto LABEL_111;
      }
    }
    v84 = (_DWORD)v83 << (6 * *(_DWORD *)(v80 - 12) >= (2 * v83));
LABEL_111:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v90, v84, v70);
    goto LABEL_112;
  }
  if (!WTF::equal(v71, *a3, v20))
    goto LABEL_87;
  v78 = v60 + 16 * v69;
  ++*(_DWORD *)v27;
  v79 = *(WebCore::IDBServer::MemoryObjectStore **)(v78 + 8);
  *(_QWORD *)(v78 + 8) = v27;
  v74 = v91;
  v73 = v92;
  if (v79)
  {
    if (*(_DWORD *)v79 == 1)
    {
      WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v79, v62);
      WTF::fastFree(v88, v89);
    }
    else
    {
      --*(_DWORD *)v79;
    }
  }
LABEL_112:
  this = WebCore::IDBDatabaseInfo::renameObjectStore((WTF::StringImpl *)v74[11], a4, a3);
  *(_WORD *)v73 = 0;
  *(_QWORD *)(v73 + 8) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      return (_QWORD *)WTF::StringImpl::destroy(v28, v85);
    else
      *(_DWORD *)v28 -= 2;
  }
  return this;
}

uint64_t *WebCore::IDBServer::MemoryIDBBackingStore::clearObjectStore@<X0>(uint64_t *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  WTF **v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  WTF **v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  char v85;

  v5 = this[13];
  if (!v5)
    goto LABEL_25;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(v5 + 16 * v10);
  if (v11 != a2)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 16 * v10);
      ++v12;
      if (v11 == a2)
        goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_6:
  v13 = v5 + 16 * v10;
  v14 = *(_QWORD **)(v13 + 8);
  if (!v14)
  {
LABEL_25:
    v37 = 281;
    goto LABEL_119;
  }
  v15 = v14[10];
  v83 = *(_QWORD *)(v13 + 8);
  this = WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(&v84, (uint64_t *)(v15 + 144), &v83);
  if (v85)
  {
    v17 = v84;
    v18 = v14[12];
    v14[12] = 0;
    this = *(uint64_t **)(v17 + 8);
    *(_QWORD *)(v17 + 8) = v18;
    if (this)
    {
      v19 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(this, v16);
      this = (uint64_t *)WTF::fastFree((WTF *)v19, v20);
    }
    v23 = *(_QWORD *)(v15 + 152);
    v22 = (uint64_t *)(v15 + 152);
    v21 = v23;
    if (v23
      || (this = (uint64_t *)WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(v22, 8u), (v21 = *v22) != 0))
    {
      v24 = *(_DWORD *)(v21 - 8);
    }
    else
    {
      v24 = 0;
    }
    v25 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
    v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
    v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
    v28 = v24 & ((v27 >> 31) ^ v27);
    v29 = (_QWORD *)(v21 + 16 * v28);
    v30 = (_QWORD *)*v29;
    if (*v29)
    {
      v31 = 0;
      v32 = 1;
      while (v30 != v14)
      {
        if (v30 == (_QWORD *)-1)
          v31 = v29;
        v28 = (v28 + v32) & v24;
        v29 = (_QWORD *)(v21 + 16 * v28);
        v30 = (_QWORD *)*v29;
        ++v32;
        if (!*v29)
        {
          if (v31)
          {
            *v31 = 0;
            v31[1] = 0;
            --*(_DWORD *)(*v22 - 16);
            v29 = v31;
          }
          goto LABEL_21;
        }
      }
      goto LABEL_38;
    }
LABEL_21:
    *v29 = v14;
    v33 = v14[13];
    v14[13] = 0;
    v34 = v29[1];
    v29[1] = v33;
    if (v34)
    {
      std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(v34, *(WTF **)(v34 + 8));
      this = (uint64_t *)MEMORY[0x19AEA7644](v34, 0x1020C4062D53EE8);
    }
    v35 = *v22;
    if (*v22)
      v36 = *(_DWORD *)(v35 - 12) + 1;
    else
      v36 = 1;
    *(_DWORD *)(v35 - 12) = v36;
    v38 = *v22;
    if (*v22)
      v39 = *(_DWORD *)(v38 - 12);
    else
      v39 = 0;
    v40 = (*(_DWORD *)(v38 - 16) + v39);
    v41 = *(unsigned int *)(v38 - 4);
    if (v41 > 0x400)
    {
      if (v41 > 2 * v40)
        goto LABEL_38;
    }
    else
    {
      if (3 * v41 > 4 * v40)
        goto LABEL_38;
      if (!(_DWORD)v41)
      {
        v42 = 8;
LABEL_37:
        this = (uint64_t *)WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(v22, v42);
        goto LABEL_38;
      }
    }
    v42 = (_DWORD)v41 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v41));
    goto LABEL_37;
  }
LABEL_38:
  v43 = v14[14];
  if (!v43)
  {
    v46 = 0;
    v44 = 0;
LABEL_47:
    v45 = (_QWORD *)(v43 + 16 * v44);
    goto LABEL_48;
  }
  v44 = *(unsigned int *)(v43 - 4);
  v45 = (_QWORD *)(v43 + 16 * v44);
  if (!*(_DWORD *)(v43 - 12))
  {
    v46 = (_QWORD *)(v43 + 16 * v44);
    goto LABEL_47;
  }
  v46 = (_QWORD *)v14[14];
  if ((_DWORD)v44)
  {
    v47 = 16 * v44;
    v46 = (_QWORD *)v14[14];
    while ((unint64_t)(*v46 + 1) <= 1)
    {
      v46 += 2;
      v47 -= 16;
      if (!v47)
      {
        v46 = v45;
        break;
      }
    }
  }
LABEL_48:
  if (v43)
    v48 = (_QWORD *)(v43 + 16 * *(unsigned int *)(v43 - 4));
  else
    v48 = 0;
  if (v48 != v46)
  {
    while (1)
    {
      v49 = v46[1];
      v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 64) + 8) + 80);
      v53 = *(_QWORD *)(v50 + 176);
      v52 = (uint64_t *)(v50 + 176);
      v51 = v53;
      if (v53
        || (WTF::HashTable<WebCore::IDBServer::MemoryIndex *,WTF::KeyValuePair<WebCore::IDBServer::MemoryIndex *,std::unique_ptr<WebCore::IDBServer::IndexValueStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryIndex *,std::unique_ptr<WebCore::IDBServer::IndexValueStore>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryIndex *>,WTF::HashMap<WebCore::IDBServer::MemoryIndex *,std::unique_ptr<WebCore::IDBServer::IndexValueStore>,WTF::DefaultHash<WebCore::IDBServer::MemoryIndex *>,WTF::HashTraits<WebCore::IDBServer::MemoryIndex *>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryIndex *>>::rehash(v52, 8u, 0), (v51 = *v52) != 0))
      {
        v54 = *(_DWORD *)(v51 - 8);
      }
      else
      {
        v54 = 0;
      }
      v55 = (~(v49 << 32) + v49) ^ ((unint64_t)(~(v49 << 32) + v49) >> 22);
      v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
      v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
      v58 = v54 & ((v57 >> 31) ^ v57);
      v59 = (uint64_t *)(v51 + 16 * v58);
      v60 = *v59;
      if (*v59)
      {
        v61 = 0;
        v62 = 1;
        while (v60 != v49)
        {
          if (v60 == -1)
            v61 = v59;
          v58 = (v58 + v62) & v54;
          v59 = (uint64_t *)(v51 + 16 * v58);
          v60 = *v59;
          ++v62;
          if (!*v59)
          {
            if (v61)
            {
              *v61 = 0;
              v61[1] = 0;
              --*(_DWORD *)(*v52 - 16);
              v59 = v61;
            }
            goto LABEL_63;
          }
        }
        goto LABEL_80;
      }
LABEL_63:
      v63 = (WTF **)v59[1];
      *v59 = v49;
      v59[1] = 0;
      if (v63)
        std::default_delete<WebCore::IDBServer::IndexValueStore>::operator()[abi:sn180100](v63);
      v64 = *v52;
      v65 = *v52 ? *(_DWORD *)(v64 - 12) + 1 : 1;
      *(_DWORD *)(v64 - 12) = v65;
      v66 = *v52;
      v67 = *v52 ? *(_DWORD *)(v66 - 12) : 0;
      v68 = (*(_DWORD *)(v66 - 16) + v67);
      v69 = *(unsigned int *)(v66 - 4);
      if (v69 <= 0x400)
        break;
      if (v69 <= 2 * v68)
        goto LABEL_74;
LABEL_78:
      v71 = *(_QWORD *)(v49 + 72);
      *(_QWORD *)(v49 + 72) = 0;
      v72 = (WTF **)v59[1];
      v59[1] = v71;
      if (v72)
        std::default_delete<WebCore::IDBServer::IndexValueStore>::operator()[abi:sn180100](v72);
LABEL_80:
      this = (uint64_t *)WebCore::IDBServer::MemoryIndex::notifyCursorsOfAllRecordsChanged(v49);
      v73 = v46 + 2;
      v46 = v45;
      if (v73 != v45)
      {
        v46 = v73;
        while ((unint64_t)(*v46 + 1) <= 1)
        {
          v46 += 2;
          if (v46 == v45)
          {
            v46 = v45;
            break;
          }
        }
      }
      if (v46 == v48)
        goto LABEL_89;
    }
    if (3 * v69 > 4 * v68)
      goto LABEL_78;
    if ((_DWORD)v69)
LABEL_74:
      v70 = (_DWORD)v69 << (6 * *(_DWORD *)(v66 - 12) >= (2 * v69));
    else
      v70 = 8;
    v59 = WTF::HashTable<WebCore::IDBServer::MemoryIndex *,WTF::KeyValuePair<WebCore::IDBServer::MemoryIndex *,std::unique_ptr<WebCore::IDBServer::IndexValueStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryIndex *,std::unique_ptr<WebCore::IDBServer::IndexValueStore>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryIndex *>,WTF::HashMap<WebCore::IDBServer::MemoryIndex *,std::unique_ptr<WebCore::IDBServer::IndexValueStore>,WTF::DefaultHash<WebCore::IDBServer::MemoryIndex *>,WTF::HashTraits<WebCore::IDBServer::MemoryIndex *>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryIndex *>>::rehash(v52, v70, v59);
    goto LABEL_78;
  }
LABEL_89:
  v74 = v14[16];
  if (v74)
  {
    v75 = *(unsigned int *)(v74 - 4);
    v76 = v74 + 24 * v75;
    if (*(_DWORD *)(v74 - 12))
    {
      v77 = v14[16];
      if ((_DWORD)v75)
      {
        v78 = 24 * v75;
        v77 = v14[16];
        while (*(_OWORD *)v77 == 0 || *(_QWORD *)v77 == -1)
        {
          v77 += 24;
          v78 -= 24;
          if (!v78)
          {
            v77 = v76;
            goto LABEL_103;
          }
        }
      }
      goto LABEL_103;
    }
    v77 = v74 + 24 * v75;
  }
  else
  {
    v77 = 0;
    LODWORD(v75) = 0;
  }
  v76 = v74 + 24 * v75;
LABEL_103:
  if (v74)
    v74 += 24 * *(unsigned int *)(v74 - 4);
  while (v77 != v74)
  {
    v80 = *(_QWORD *)(v77 + 16);
    if (*(_BYTE *)(v80 + 224))
      *(_BYTE *)(v80 + 224) = 0;
    v81 = v77 + 24;
    v77 = v76;
    if (v81 != v76)
    {
      v77 = v81;
      while (*(_OWORD *)v77 == 0 || *(_QWORD *)v77 == -1)
      {
        v77 += 24;
        if (v77 == v76)
        {
          v77 = v76;
          break;
        }
      }
    }
  }
  v37 = 0;
LABEL_119:
  *(_WORD *)a3 = v37;
  *(_QWORD *)(a3 + 8) = 0;
  return this;
}

_QWORD *WebCore::IDBServer::MemoryIDBBackingStore::createIndex@<X0>(_QWORD *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, const WebCore::IDBIndexInfo *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  unsigned int v41;
  void *v42;
  void *v43;
  WebCore::IDBServer::MemoryIndex *v44;
  WTF *v45;
  void *v46;
  WTF *v47;
  void *v48;
  WTF *v49;
  void *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WebCore::IDBServer::MemoryIndex *v53;
  WebCore::IDBServer::MemoryIndex *v54;
  WebCore::IDBServer::MemoryIndex *v55;
  _BYTE v56[24];

  v5 = *(_QWORD *)(this[11] + 32);
  if (!v5)
    goto LABEL_26;
  v7 = this;
  v8 = *((_QWORD *)a3 + 1);
  v9 = *(_DWORD *)(v5 - 8);
  v10 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = (v12 >> 31) ^ v12;
  v14 = v9 & v13;
  v15 = (uint64_t *)(v5 + 72 * (v9 & v13));
  v16 = *v15;
  if (*v15 != v8)
  {
    v17 = 1;
    while (v16)
    {
      v14 = (v14 + v17) & v9;
      v15 = (uint64_t *)(v5 + 72 * v14);
      v16 = *v15;
      ++v17;
      if (*v15 == v8)
        goto LABEL_8;
    }
    v15 = (uint64_t *)(v5 + 72 * *(unsigned int *)(v5 - 4));
  }
LABEL_8:
  v18 = (uint64_t *)(v5 + 72 * *(unsigned int *)(v5 - 4));
  v19 = v15 == v18 ? 0 : (uint64_t)(v15 + 1);
  if (v15 == v18)
    goto LABEL_26;
  this = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(this[12], *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  v20 = this ? this[2] : 0;
  v21 = v7[13];
  if (!v21)
    goto LABEL_26;
  v22 = *(_DWORD *)(v21 - 8);
  v23 = v22 & v13;
  v24 = *(_QWORD *)(v21 + 16 * v23);
  if (v24 != v8)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v22;
      v24 = *(_QWORD *)(v21 + 16 * v23);
      ++v25;
      if (v24 == v8)
        goto LABEL_20;
    }
    goto LABEL_26;
  }
LABEL_20:
  v26 = *(uint64_t **)(v21 + 16 * v23 + 8);
  if (!v26 || (v27 = v26[10]) == 0 || (v27 == v20 ? (v28 = *(_BYTE *)(v27 + 24) == 2) : (v28 = 0), !v28))
  {
LABEL_26:
    *(_WORD *)a4 = 281;
    *(_QWORD *)(a4 + 8) = 0;
    return this;
  }
  v29 = WTF::fastMalloc((WTF *)0x60);
  v30 = v29;
  *(_DWORD *)v29 = 1;
  *(_OWORD *)(v29 + 8) = *(_OWORD *)a3;
  v31 = (_DWORD *)*((_QWORD *)a3 + 2);
  if (v31)
    *v31 += 2;
  *(_BYTE *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 24) = v31;
  *(_DWORD *)(v29 + 48) = -1;
  v32 = *((unsigned int *)a3 + 10);
  if ((_DWORD)v32 != -1)
  {
    ((void (*)(_BYTE *))off_1E335A4A0[v32])(v56);
    *(_DWORD *)(v30 + 48) = v32;
  }
  *(_WORD *)(v30 + 56) = *((_WORD *)a3 + 24);
  v33 = v26[1];
  if (v33)
    goto LABEL_63;
  v33 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)(v33 + 8) = v26;
  v35 = (unsigned int *)v26[1];
  v26[1] = v33;
  if (!v35)
    goto LABEL_63;
  do
  {
    v36 = __ldaxr(v35);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, v35));
  if (!v37)
  {
    atomic_store(1u, v35);
    WTF::fastFree((WTF *)v35, v34);
  }
  v33 = v26[1];
  if (v33)
  {
LABEL_63:
    do
      v38 = __ldaxr((unsigned int *)v33);
    while (__stlxr(v38 + 1, (unsigned int *)v33));
  }
  *(_QWORD *)(v30 + 64) = v33;
  *(_QWORD *)(v30 + 72) = 0;
  *(_QWORD *)(v30 + 80) = 0;
  *(_QWORD *)(v30 + 88) = 0;
  v53 = (WebCore::IDBServer::MemoryIndex *)v30;
  WebCore::IDBServer::MemoryObjectStore::populateIndexWithExistingRecords(&v51, (WebCore::IDBServer::MemoryIndex *)v26, v30);
  if (BYTE1(v51))
  {
    v40 = (unsigned __int16)v51;
    *(_WORD *)a4 = (_WORD)v51;
    *(_QWORD *)(a4 + 8) = v52;
    v41 = v40 >> 8;
    goto LABEL_50;
  }
  v55 = *(WebCore::IDBServer::MemoryIndex **)a3;
  WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBIndexInfo&>(v26 + 9, (WTF::StringImpl *)&v55, (uint64_t)a3, (uint64_t)v56);
  ++*(_DWORD *)v30;
  v55 = (WebCore::IDBServer::MemoryIndex *)v30;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>::add((WebCore::IDBServer::MemoryIndex *)v56, (uint64_t *)(v20 + 104), &v55);
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
    {
      WebCore::IDBServer::MemoryIndex::~MemoryIndex(v55, v42);
      WTF::fastFree(v47, v48);
    }
    else
    {
      --*(_DWORD *)v55;
    }
  }
  ++*(_DWORD *)v30;
  v55 = (WebCore::IDBServer::MemoryIndex *)v30;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>::add((WebCore::IDBServer::MemoryIndex *)v56, (uint64_t *)(v20 + 96), &v55);
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
    {
      WebCore::IDBServer::MemoryIndex::~MemoryIndex(v55, v43);
      WTF::fastFree(v49, v50);
    }
    else
    {
      --*(_DWORD *)v55;
    }
  }
  v44 = *(WebCore::IDBServer::MemoryIndex **)(v30 + 8);
  v54 = (WebCore::IDBServer::MemoryIndex *)v30;
  v55 = v44;
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::IDBServer::MemoryIndex*>((uint64_t)v56, v26 + 15, (WTF::StringImpl **)(v30 + 24), &v54);
  WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::Ref<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>((uint64_t)v56, v26 + 14, (uint64_t *)&v55, (uint64_t *)&v53);
  *(_WORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 != 2)
    {
      v41 = 0;
      *(_DWORD *)v52 -= 2;
      goto LABEL_50;
    }
    WTF::StringImpl::destroy(v52, v39);
  }
  v41 = 0;
LABEL_50:
  this = v53;
  if (v53)
  {
    if (*(_DWORD *)v53 == 1)
    {
      WebCore::IDBServer::MemoryIndex::~MemoryIndex(v53, v39);
      this = (_QWORD *)WTF::fastFree(v45, v46);
      if (!v41)
        goto LABEL_54;
      return this;
    }
    --*(_DWORD *)v53;
  }
  if (!v41)
  {
LABEL_54:
    v51 = *(WTF::StringImpl **)a3;
    this = WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBIndexInfo&>((uint64_t *)(v19 + 56), (WTF::StringImpl *)&v51, (uint64_t)a3, (uint64_t)v56);
    *(_QWORD *)(v7[11] + 16) = *(_QWORD *)a3;
  }
  return this;
}

_QWORD *WebCore::IDBServer::MemoryIDBBackingStore::deleteIndex@<X0>(_QWORD *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v35;
  uint64_t v36;

  v6 = *(_QWORD *)(this[11] + 32);
  if (!v6)
    goto LABEL_28;
  v9 = this;
  v10 = *(_DWORD *)(v6 - 8);
  v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  v15 = v10 & v14;
  v16 = (uint64_t *)(v6 + 72 * (v10 & v14));
  v17 = *v16;
  if (*v16 != a3)
  {
    v18 = 1;
    while (v17)
    {
      v15 = (v15 + v18) & v10;
      v16 = (uint64_t *)(v6 + 72 * v15);
      v17 = *v16;
      ++v18;
      if (*v16 == a3)
        goto LABEL_8;
    }
    v16 = (uint64_t *)(v6 + 72 * *(unsigned int *)(v6 - 4));
  }
LABEL_8:
  if (v16 == (uint64_t *)(v6 + 72 * *(unsigned int *)(v6 - 4)))
    goto LABEL_28;
  v21 = v16[8];
  v20 = v16 + 8;
  v19 = v21;
  if (!v21)
    goto LABEL_28;
  v22 = *(_DWORD *)(v19 - 8);
  v23 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
  v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
  v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
  v26 = v22 & ((v25 >> 31) ^ v25);
  v27 = *(_QWORD *)(v19 + ((unint64_t)v26 << 6));
  if (v27 != a4)
  {
    v28 = 1;
    while (v27)
    {
      v26 = ((_DWORD)v26 + v28) & v22;
      v27 = *(_QWORD *)(v19 + ((unint64_t)v26 << 6));
      ++v28;
      if (v27 == a4)
        goto LABEL_16;
    }
    v26 = *(unsigned int *)(v19 - 4);
  }
LABEL_16:
  if (v26 == *(_DWORD *)(v19 - 4))
    goto LABEL_28;
  this = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(this[12], *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  v29 = this ? this[2] : 0;
  v30 = v9[13];
  if (!v30)
    goto LABEL_28;
  v31 = *(_DWORD *)(v30 - 8);
  v32 = v31 & v14;
  v33 = *(_QWORD *)(v30 + 16 * v32);
  if (v33 != a3)
  {
    v34 = 1;
    while (v33)
    {
      v32 = ((_DWORD)v32 + v34) & v31;
      v33 = *(_QWORD *)(v30 + 16 * v32);
      ++v34;
      if (v33 == a3)
        goto LABEL_25;
    }
    goto LABEL_28;
  }
LABEL_25:
  v35 = *(WebCore::IDBServer::MemoryBackingStoreTransaction **)(v30 + 16 * v32 + 8);
  if (!v35)
  {
LABEL_28:
    *(_WORD *)a5 = 281;
    *(_QWORD *)(a5 + 8) = 0;
    return this;
  }
  this = (_QWORD *)WebCore::IDBServer::MemoryObjectStore::deleteIndex(a5, v35, v29, a4);
  if (!*(_BYTE *)(a5 + 1))
  {
    v36 = a4;
    return (_QWORD *)WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::remove(v20, (WTF::StringImpl *)&v36);
  }
  return this;
}

_QWORD *WebCore::IDBServer::MemoryIDBBackingStore::renameIndex@<X0>(_QWORD *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, WTF::StringImpl **a3@<X4>, uint64_t a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X8>)
{
  uint64_t v7;
  _QWORD *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  void *v61;
  const WTF::StringImpl *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  WTF **v67;
  int i;
  uint64_t v69;
  WTF **v70;
  WTF *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  WTF::StringImpl **v74;
  WTF::StringImpl *v75;
  WebCore::IDBServer::MemoryIndex *v76;
  WebCore::IDBServer::MemoryIndex *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  WebCore::IDBServer::MemoryIndex *v81;
  WebCore::IDBServer::MemoryIndex *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  int v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  WTF::StringImpl *v110;
  WTF *v111;
  void *v112;
  WTF *v113;
  void *v114;
  WTF *v115;
  void *v116;
  uint64_t *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  WebCore::IDBServer::MemoryIndex *v120;

  v7 = *(_QWORD *)(this[11] + 32);
  if (!v7)
    goto LABEL_43;
  v11 = this;
  v12 = *(_DWORD *)(v7 - 8);
  v13 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = (v15 >> 31) ^ v15;
  v17 = v12 & v16;
  v18 = (uint64_t *)(v7 + 72 * (v12 & v16));
  v19 = *v18;
  if (*v18 != a4)
  {
    v20 = 1;
    while (v19)
    {
      v17 = (v17 + v20) & v12;
      v18 = (uint64_t *)(v7 + 72 * v17);
      v19 = *v18;
      ++v20;
      if (*v18 == a4)
        goto LABEL_8;
    }
    v18 = (uint64_t *)(v7 + 72 * *(unsigned int *)(v7 - 4));
  }
LABEL_8:
  if (v18 == (uint64_t *)(v7 + 72 * *(unsigned int *)(v7 - 4)))
    goto LABEL_43;
  v21 = v18[8];
  if (!v21)
    goto LABEL_43;
  v22 = *(_DWORD *)(v21 - 8);
  v23 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
  v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
  v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
  v26 = (v25 >> 31) ^ v25;
  v27 = v22 & v26;
  v28 = *(_QWORD *)(v21 + (v27 << 6));
  if (v28 != a5)
  {
    v29 = 1;
    while (v28)
    {
      v27 = ((_DWORD)v27 + v29) & v22;
      v28 = *(_QWORD *)(v21 + ((unint64_t)v27 << 6));
      ++v29;
      if (v28 == a5)
        goto LABEL_16;
    }
    v27 = *(unsigned int *)(v21 - 4);
  }
LABEL_16:
  v30 = *(unsigned int *)(v21 - 4);
  v31 = v21 + (v27 << 6) + 8;
  v32 = v27 == v30 ? 0 : v31;
  if (v27 == v30
    || ((this = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(this[12], *(_QWORD *)a2, *((_QWORD *)a2 + 1))) == 0? (v34 = 0): (v34 = this[2]), (v35 = v11[13]) == 0))
  {
LABEL_43:
    *(_WORD *)a6 = 281;
    *(_QWORD *)(a6 + 8) = 0;
    return this;
  }
  v36 = *(_DWORD *)(v35 - 8);
  v37 = v36 & v16;
  v38 = *(_QWORD *)(v35 + 16 * v37);
  if (v38 != a4)
  {
    v39 = 1;
    while (v38)
    {
      v37 = ((_DWORD)v37 + v39) & v36;
      v38 = *(_QWORD *)(v35 + 16 * v37);
      ++v39;
      if (v38 == a4)
        goto LABEL_28;
    }
    goto LABEL_43;
  }
LABEL_28:
  v40 = *(_QWORD **)(v35 + 16 * v37 + 8);
  if (!v40)
    goto LABEL_43;
  v41 = v40[14];
  if (!v41)
    goto LABEL_43;
  v42 = *(_DWORD *)(v41 - 8);
  v43 = v42 & v26;
  v44 = *(_QWORD *)(v41 + 16 * v43);
  if (v44 != a5)
  {
    v45 = 1;
    while (v44)
    {
      v43 = ((_DWORD)v43 + v45) & v42;
      v44 = *(_QWORD *)(v41 + 16 * v43);
      ++v45;
      if (v44 == a5)
        goto LABEL_34;
    }
    goto LABEL_43;
  }
LABEL_34:
  v46 = *(_QWORD *)(v41 + 16 * v43 + 8);
  if (!v46)
    goto LABEL_43;
  v47 = *(WTF::StringImpl **)(v46 + 24);
  if (v47)
    *(_DWORD *)v47 += 2;
  v48 = v40[9];
  if (v48)
  {
    v49 = *(_QWORD *)(v46 + 8);
    v50 = *(_DWORD *)(v48 - 8);
    v51 = (v49 + ~(v49 << 32)) ^ ((unint64_t)(v49 + ~(v49 << 32)) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(_QWORD *)(v48 + ((unint64_t)v54 << 6));
    if (v55 != v49)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(_QWORD *)(v48 + ((unint64_t)v54 << 6));
        ++v56;
        if (v55 == v49)
          goto LABEL_47;
      }
      v54 = *(unsigned int *)(v48 - 4);
    }
LABEL_47:
    v57 = v48 + (v54 << 6);
    v48 += (unint64_t)*(unsigned int *)(v48 - 4) << 6;
  }
  else
  {
    v57 = 0;
  }
  if (v57 == v48)
    v58 = 0;
  else
    v58 = v57 + 8;
  v59 = *a3;
  if (*a3)
    *(_DWORD *)v59 += 2;
  v60 = *(WTF::StringImpl **)(v58 + 16);
  *(_QWORD *)(v58 + 16) = v59;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, v33);
    else
      *(_DWORD *)v60 -= 2;
  }
  v117 = v40 + 15;
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::take((uint64_t)&v120, (WTF::StringImpl *)(v40 + 15), (WTF::StringImpl **)(v46 + 24));
  v63 = v40[15];
  if (v63
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v117, 8u, 0), (v63 = *v117) != 0))
  {
    v64 = *(_DWORD *)(v63 - 8);
  }
  else
  {
    v64 = 0;
  }
  v65 = *((_DWORD *)*a3 + 4);
  v118 = v47;
  v119 = v34;
  if (v65 < 0x100)
    v66 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v66 = v65 >> 8;
  v67 = 0;
  for (i = 1; ; ++i)
  {
    v69 = v66 & v64;
    v70 = (WTF **)(v63 + 16 * v69);
    v71 = *v70;
    if (*v70 != (WTF *)-1)
      break;
    v67 = (WTF **)(v63 + 16 * v69);
LABEL_68:
    v66 = i + v69;
  }
  if (!v71)
  {
    if (v67)
    {
      *v67 = 0;
      v67[1] = 0;
      --*(_DWORD *)(*v117 - 16);
      v70 = v67;
    }
    v72 = *a3;
    v73 = v119;
    v74 = (WTF::StringImpl **)(v46 + 24);
    if (*a3)
      *(_DWORD *)v72 += 2;
    *v70 = v72;
    v75 = v118;
    v76 = v120;
    v120 = 0;
    v77 = v70[1];
    v70[1] = v76;
    if (v77)
    {
      if (*(_DWORD *)v77 == 1)
      {
        WebCore::IDBServer::MemoryIndex::~MemoryIndex(v77, v61);
        WTF::fastFree(v113, v114);
      }
      else
      {
        --*(_DWORD *)v77;
      }
    }
    v78 = *v117;
    if (*v117)
      v79 = *(_DWORD *)(v78 - 12) + 1;
    else
      v79 = 1;
    *(_DWORD *)(v78 - 12) = v79;
    v83 = *v117;
    if (*v117)
      v84 = *(_DWORD *)(v83 - 12);
    else
      v84 = 0;
    v85 = (*(_DWORD *)(v83 - 16) + v84);
    v86 = *(unsigned int *)(v83 - 4);
    if (v86 > 0x400)
    {
      if (v86 > 2 * v85)
        goto LABEL_92;
    }
    else
    {
      if (3 * v86 > 4 * v85)
        goto LABEL_92;
      if (!(_DWORD)v86)
      {
        v87 = 8;
        goto LABEL_91;
      }
    }
    v87 = (_DWORD)v86 << (6 * *(_DWORD *)(v83 - 12) >= (2 * v86));
LABEL_91:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v117, v87, v70);
    goto LABEL_92;
  }
  if (!WTF::equal(v71, *a3, v62))
    goto LABEL_68;
  v80 = v63 + 16 * v69;
  v73 = v119;
  v81 = v120;
  v120 = 0;
  v82 = *(WebCore::IDBServer::MemoryIndex **)(v80 + 8);
  *(_QWORD *)(v80 + 8) = v81;
  v74 = (WTF::StringImpl **)(v46 + 24);
  v75 = v118;
  if (v82)
  {
    if (*(_DWORD *)v82 == 1)
    {
      WebCore::IDBServer::MemoryIndex::~MemoryIndex(v82, v61);
      WTF::fastFree(v115, v116);
    }
    else
    {
      --*(_DWORD *)v82;
    }
  }
LABEL_92:
  if (v120)
  {
    if (*(_DWORD *)v120 == 1)
    {
      WebCore::IDBServer::MemoryIndex::~MemoryIndex(v120, v61);
      WTF::fastFree(v111, v112);
    }
    else
    {
      --*(_DWORD *)v120;
    }
  }
  v88 = *a3;
  if (*a3)
    *(_DWORD *)v88 += 2;
  v89 = *v74;
  *v74 = v88;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
      WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v61);
    else
      *(_DWORD *)v89 -= 2;
  }
  v92 = *(_QWORD *)(v73 + 168);
  v91 = (uint64_t *)(v73 + 168);
  v90 = v92;
  if (v92
    || (WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,WTF::String>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,WTF::String,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(v91, 8u), (v90 = *v91) != 0))
  {
    v93 = *(_DWORD *)(v90 - 8);
  }
  else
  {
    v93 = 0;
  }
  v94 = (~(v46 << 32) + v46) ^ ((unint64_t)(~(v46 << 32) + v46) >> 22);
  v95 = 9 * ((v94 + ~(v94 << 13)) ^ ((v94 + ~(v94 << 13)) >> 8));
  v96 = (v95 ^ (v95 >> 15)) + ~((v95 ^ (v95 >> 15)) << 27);
  v97 = v93 & ((v96 >> 31) ^ v96);
  v98 = (_QWORD *)(v90 + 16 * v97);
  v99 = *v98;
  if (!*v98)
  {
LABEL_111:
    *v98 = v46;
    if (v75)
      *(_DWORD *)v75 += 2;
    v102 = (WTF::StringImpl *)v98[1];
    v98[1] = v75;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
        WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v61);
      else
        *(_DWORD *)v102 -= 2;
    }
    v103 = *v91;
    if (*v91)
      v104 = *(_DWORD *)(v103 - 12) + 1;
    else
      v104 = 1;
    *(_DWORD *)(v103 - 12) = v104;
    v105 = *v91;
    if (*v91)
      v106 = *(_DWORD *)(v105 - 12);
    else
      v106 = 0;
    v107 = (*(_DWORD *)(v105 - 16) + v106);
    v108 = *(unsigned int *)(v105 - 4);
    if (v108 > 0x400)
    {
      if (v108 > 2 * v107)
        goto LABEL_129;
    }
    else
    {
      if (3 * v108 > 4 * v107)
        goto LABEL_129;
      if (!(_DWORD)v108)
      {
        v109 = 8;
        goto LABEL_128;
      }
    }
    v109 = (_DWORD)v108 << (6 * *(_DWORD *)(v105 - 12) >= (2 * v108));
LABEL_128:
    WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,WTF::String>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,WTF::String,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(v91, v109);
    goto LABEL_129;
  }
  v100 = 0;
  v101 = 1;
  while (v99 != v46)
  {
    if (v99 == -1)
      v100 = v98;
    v97 = (v97 + v101) & v93;
    v98 = (_QWORD *)(v90 + 16 * v97);
    v99 = *v98;
    ++v101;
    if (!*v98)
    {
      if (v100)
      {
        *v100 = 0;
        v100[1] = 0;
        --*(_DWORD *)(*v91 - 16);
        v98 = v100;
      }
      goto LABEL_111;
    }
  }
LABEL_129:
  v110 = *a3;
  if (*a3)
    *(_DWORD *)v110 += 2;
  this = *(_QWORD **)(v32 + 16);
  *(_QWORD *)(v32 + 16) = v110;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v61);
    else
      *(_DWORD *)this -= 2;
  }
  *(_WORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      return (_QWORD *)WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v61);
    else
      *(_DWORD *)v75 -= 2;
  }
  return this;
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::keyExistsInObjectStore@<X0>(WebCore::IDBServer::MemoryIDBBackingStore *this@<X0>, const WebCore::IDBKeyData *a2@<X3>, BOOL *a3@<X4>, uint64_t a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;

  v7 = *((_QWORD *)this + 13);
  if (!v7)
    goto LABEL_11;
  v9 = *(_DWORD *)(v7 - 8);
  v10 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(_QWORD *)(v7 + 16 * v13);
  if (v14 != a4)
  {
    v15 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(_QWORD *)(v7 + 16 * v13);
      ++v15;
      if (v14 == a4)
        goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_6:
  v16 = *(_QWORD *)(v7 + 16 * v13 + 8);
  if (!v16)
  {
LABEL_11:
    result = 349;
    __break(0xC471u);
    return result;
  }
  v17 = *(uint64_t **)(v16 + 96);
  if (v17)
    result = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(*v17, (unsigned __int8 *)a2);
  else
    result = 0;
  *a3 = result;
  *(_WORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  return result;
}

WTF::StringImpl *WebCore::IDBServer::MemoryIDBBackingStore::deleteRange@<X0>(WebCore::IDBServer::MemoryIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, const WebCore::IDBKeyRangeData *a3@<X3>, uint64_t a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::IDBServer::MemoryObjectStore *v18;
  const WTF::String *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *result;
  uint64_t v23;
  int v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  _BYTE v28[8];
  _BYTE v29[16];
  unsigned int v30;
  WTF::StringImpl *v31;
  _BYTE v32[16];
  int v33;
  char v34;
  _BYTE v35[16];
  int v36;
  __int16 v37;
  _BYTE *v38;

  v7 = *((_QWORD *)this + 12);
  if (!v7)
    goto LABEL_38;
  if (!WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(v7, *(_QWORD *)a2, *((_QWORD *)a2 + 1)))goto LABEL_38;
  v10 = *((_QWORD *)this + 13);
  if (!v10)
    goto LABEL_38;
  v11 = *(_DWORD *)(v10 - 8);
  v12 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = *(_QWORD *)(v10 + 16 * v15);
  if (v16 == a4)
  {
LABEL_8:
    v18 = *(WebCore::IDBServer::MemoryObjectStore **)(v10 + 16 * v15 + 8);
    if (!v18)
      goto LABEL_38;
    if (*((_DWORD *)a3 + 6) | *((_DWORD *)a3 + 14)
      && !*((_BYTE *)a3 + 64)
      && !*((_BYTE *)a3 + 65)
      && WebCore::IDBKeyData::isValid((const WebCore::IDBKeyRangeData *)((char *)a3 + 32))
      && WebCore::IDBKeyData::isValid(a3)
      && !WebCore::IDBKeyData::compare(a3, (const WebCore::IDBKeyRangeData *)((char *)a3 + 32), v19))
    {
      result = (WTF::StringImpl *)WebCore::IDBServer::MemoryObjectStore::deleteRecord(v18, a3);
      goto LABEL_36;
    }
    LOBYTE(v31) = *(_BYTE *)a3;
    v32[0] = 0;
    v33 = -1;
    v20 = *((unsigned int *)a3 + 6);
    if ((_DWORD)v20 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, char *))off_1E335A370[v20])(v28, v32, (char *)a3 + 8);
      v33 = v20;
    }
    v34 = *((_BYTE *)a3 + 32);
    v35[0] = 0;
    v36 = -1;
    v21 = *((unsigned int *)a3 + 14);
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, char *))off_1E335A370[v21])(v28, v35, (char *)a3 + 40);
      v36 = v21;
    }
    v37 = *((_WORD *)a3 + 32);
    while (1)
    {
      WebCore::IDBServer::MemoryObjectStore::lowestKeyWithRecordInRange((uint64_t)v28, v18, (uint64_t)&v31);
      if (!v30)
      {
        v23 = 0;
        v24 = 3;
LABEL_28:
        result = (WTF::StringImpl *)((uint64_t (*)(_BYTE **, _BYTE *))off_1E335A328[v23])(&v38, v29);
        v25 = v24;
        goto LABEL_29;
      }
      WebCore::IDBServer::MemoryObjectStore::deleteRecord(v18, (const WebCore::IDBKeyData *)v28);
      LOBYTE(v31) = v28[0];
      if (v33 == -1)
      {
        if (v30 != -1)
          goto LABEL_26;
        LOBYTE(v37) = 1;
      }
      else
      {
        if (v30 == -1)
        {
          result = (WTF::StringImpl *)((uint64_t (*)(_BYTE **, _BYTE *))off_1E335A328[v33])(&v38, v32);
          v33 = -1;
          goto LABEL_27;
        }
LABEL_26:
        v38 = v32;
        result = (WTF::StringImpl *)((uint64_t (*)(_BYTE **, _BYTE *, _BYTE *))off_1E335A3B8[v30])(&v38, v32, v29);
LABEL_27:
        v24 = 0;
        v25 = 0;
        v23 = v30;
        LOBYTE(v37) = 1;
        if (v30 != -1)
          goto LABEL_28;
LABEL_29:
        if (v25)
        {
          if (v36 != -1)
            result = (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E335A328[v36])(v28, v35);
          v36 = -1;
          if (v33 != -1)
            result = (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E335A328[v33])(v28, v32);
LABEL_36:
          *(_WORD *)a5 = 0;
LABEL_37:
          *(_QWORD *)(a5 + 8) = 0;
          return result;
        }
      }
    }
  }
  v17 = 1;
  while (v16)
  {
    v15 = ((_DWORD)v15 + v17) & v11;
    v16 = *(_QWORD *)(v10 + 16 * v15);
    ++v17;
    if (v16 == a4)
      goto LABEL_8;
  }
LABEL_38:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a5 = 280;
  result = v31;
  if (!v31)
    goto LABEL_37;
  v27 = *(_DWORD *)v31;
  *(_DWORD *)v31 += 2;
  *(_QWORD *)(a5 + 8) = result;
  v31 = 0;
  if (!v27)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
  *(_DWORD *)result = v27;
  return result;
}

void WebCore::IDBServer::MemoryIDBBackingStore::addRecord(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unsigned int **a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;

  v13 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*(_QWORD *)(a1 + 96), *a2, a2[1]);
  if (v13)
  {
    if (v13[2])
    {
      v14 = *(_QWORD *)(a1 + 104);
      if (v14)
      {
        v15 = *(_DWORD *)(v14 - 8);
        v16 = *a3 + ~(*a3 << 32);
        v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
        v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
        v19 = v15 & (((v18 + ~(v18 << 27)) >> 31) ^ ((_DWORD)v18 + ~((_DWORD)v18 << 27)));
        v20 = *(_QWORD *)(v14 + 16 * v19);
        if (v20 == *a3)
        {
LABEL_8:
          v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
          if (v22)
          {
            WebCore::IDBServer::MemoryObjectStore::addRecord(a7, v22, a4, a5, a6);
            return;
          }
        }
        else
        {
          v21 = 1;
          while (v20)
          {
            v19 = ((_DWORD)v19 + v21) & v15;
            v20 = *(_QWORD *)(v14 + 16 * v19);
            ++v21;
            if (v20 == *a3)
              goto LABEL_8;
          }
        }
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a7 = 280;
  if (v25)
  {
    v24 = *(_DWORD *)v25;
    *(_DWORD *)v25 += 2;
    *(_QWORD *)(a7 + 8) = v25;
    if (v24)
      *(_DWORD *)v25 = v24;
    else
      WTF::StringImpl::destroy(v25, v23);
  }
  else
  {
    *(_QWORD *)(a7 + 8) = 0;
  }
}

void WebCore::IDBServer::MemoryObjectStore::addRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int **a5)
{
  void *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  const WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  WTF::StringImpl *v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned int v49;
  unsigned int v50;
  WTF *v51;
  uint64_t v52;
  const WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  unsigned int *v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  unsigned int v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  unsigned int *v80;
  _DWORD *v81;
  uint64_t v82;
  unsigned int *v83;
  int *v84;
  int v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  unsigned int *v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  uint64_t *v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unsigned __int8 *v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  const WTF::StringImpl *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  const WTF::StringImpl *v134;
  uint64_t v135;
  _DWORD *v136;
  unsigned __int8 *v137;
  void *v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _DWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF *v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v170;
  unsigned int *v171;
  unsigned int *v172;
  unsigned int *v174;
  uint64_t v175;
  WTF *v176;
  uint64_t v177;
  WTF::StringImpl **v178;
  WTF::StringImpl *v179;
  _QWORD v180[2];
  int v181;
  int v182;
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a2 + 96))
  {
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v9 = 0;
    v10 = *(uint64_t **)(a2 + 96);
    *(_QWORD *)(a2 + 96) = v9;
    if (v10)
    {
      v11 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(v10, v8);
      WTF::fastFree((WTF *)v11, v12);
    }
    v13 = (_QWORD *)operator new();
    v13[2] = 0;
    v13[1] = 0;
    *v13 = v13 + 1;
    v14 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 104) = v13;
    if (v14)
    {
      std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(v14, *(WTF **)(v14 + 8));
      MEMORY[0x19AEA7644](v14, 0x1020C4062D53EE8);
    }
  }
  v170 = (_QWORD *)a2;
  v15 = *(uint64_t **)(a2 + 96);
  v16 = *v15;
  if (*v15
    || (WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::rehash(v15, 8u, 0), (v16 = *v15) != 0))
  {
    v17 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v17 = 0;
  }
  LODWORD(v179) = -1640531527;
  WORD2(v179) = 0;
  BYTE6(v179) = 0;
  WebCore::add((uint64_t)&v179, a3);
  v19 = v179;
  if (BYTE6(v179))
  {
    v166 = ((_DWORD)v179 + WORD2(v179)) ^ (((_DWORD)v179 + WORD2(v179)) << 11);
    v19 = v166 + (v166 >> 17);
  }
  v20 = (v19 ^ (8 * v19)) + ((v19 ^ (8 * v19)) >> 5);
  v21 = (v20 ^ (4 * v20)) + ((v20 ^ (4 * v20)) >> 15);
  v22 = v21 ^ (v21 << 10);
  if (!v22)
    v22 = 0x800000;
  v23 = v22 & v17;
  v24 = v16 + 40 * (v22 & v17);
  if (*(_DWORD *)(v24 + 24))
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (*(_BYTE *)v24)
      {
        v25 = v24;
      }
      else
      {
        v27 = v24;
        if (WebCore::IDBKeyData::operator==((unsigned __int8 *)v24, (unsigned __int8 *)a3, v18))
        {
          v168 = v27;
          v45 = *a5;
          if (*a5)
          {
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 + 1, v45));
          }
          v47 = *(_QWORD *)(v27 + 32);
          *(_QWORD *)(v27 + 32) = v45;
          v48 = v170;
          if (v47)
          {
            do
            {
              v49 = __ldaxr((unsigned int *)v47);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, (unsigned int *)v47));
            if (!v50)
            {
              atomic_store(1u, (unsigned int *)v47);
              v51 = *(WTF **)(v47 + 8);
              if (v51)
              {
                *(_QWORD *)(v47 + 8) = 0;
                *(_DWORD *)(v47 + 16) = 0;
                WTF::fastFree(v51, v28);
              }
              WTF::fastFree((WTF *)v47, v28);
            }
          }
          goto LABEL_56;
        }
      }
      v23 = (v23 + v26) & v17;
      v24 = v16 + 40 * v23;
      ++v26;
    }
    while (*(_DWORD *)(v24 + 24));
    if (!v25)
      goto LABEL_23;
    *(_QWORD *)(v25 + 32) = 0;
    *(_OWORD *)v25 = 0u;
    *(_OWORD *)(v25 + 16) = 0u;
    --*(_DWORD *)(*v15 - 16);
    v29 = (WTF::StringImpl *)(v25 + 8);
    v30 = *(_DWORD *)(v25 + 24);
    *(_BYTE *)v25 = *(_BYTE *)a3;
    v31 = *(_DWORD *)(a3 + 24);
    if (v30 != -1)
    {
      if (v31 != -1)
        goto LABEL_25;
      v32 = v25;
      goto LABEL_27;
    }
    if (v31 != -1)
      goto LABEL_25;
  }
  else
  {
LABEL_23:
    *(_BYTE *)v24 = *(_BYTE *)a3;
    v29 = (WTF::StringImpl *)(v24 + 8);
    v31 = *(_DWORD *)(a3 + 24);
    if (v31 == -1)
    {
      v30 = 0;
      v25 = v24;
      v32 = v24;
LABEL_27:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E335A328[v30])(&v179, v29);
      *(_DWORD *)(v32 + 24) = -1;
      goto LABEL_28;
    }
    v25 = v24;
LABEL_25:
    v179 = v29;
    ((void (*)(WTF::StringImpl **))off_1E335A3B8[v31])(&v179);
  }
LABEL_28:
  v33 = *a5;
  if (*a5)
  {
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  v35 = *(_QWORD *)(v25 + 32);
  *(_QWORD *)(v25 + 32) = v33;
  if (v35)
  {
    do
    {
      v36 = __ldaxr((unsigned int *)v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, (unsigned int *)v35));
    if (!v37)
    {
      atomic_store(1u, (unsigned int *)v35);
      v165 = *(WTF **)(v35 + 8);
      if (v165)
      {
        *(_QWORD *)(v35 + 8) = 0;
        *(_DWORD *)(v35 + 16) = 0;
        WTF::fastFree(v165, v29);
      }
      WTF::fastFree((WTF *)v35, v29);
    }
  }
  v38 = *v15;
  if (*v15)
    v39 = *(_DWORD *)(v38 - 12) + 1;
  else
    v39 = 1;
  *(_DWORD *)(v38 - 12) = v39;
  v40 = *v15;
  if (*v15)
    v41 = *(_DWORD *)(v40 - 12);
  else
    v41 = 0;
  v42 = (*(_DWORD *)(v40 - 16) + v41);
  v43 = *(unsigned int *)(v40 - 4);
  if (v43 > 0x400)
  {
    if (v43 > 2 * v42)
      goto LABEL_41;
    goto LABEL_43;
  }
  if (3 * v43 <= 4 * v42)
  {
    if (!(_DWORD)v43)
    {
      v44 = 8;
      goto LABEL_54;
    }
LABEL_43:
    v44 = (_DWORD)v43 << (6 * *(_DWORD *)(v40 - 12) >= (2 * v43));
LABEL_54:
    v168 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::rehash(v15, v44, v25);
    goto LABEL_55;
  }
LABEL_41:
  v168 = v25;
LABEL_55:
  v48 = v170;
LABEL_56:
  v52 = std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::__emplace_unique_key_args<WebCore::IDBKeyData,WebCore::IDBKeyData const&>((uint64_t **)v48[13], (WebCore::IDBKeyData *)a3, (unsigned int *)a3);
  v54 = v52;
  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v174 = 0;
  v175 = 0;
  v55 = *a4;
  if (*a4)
  {
    v56 = *(unsigned int *)(v55 - 4);
    v57 = v55 + 48 * v56;
    if (*(_DWORD *)(v55 - 12))
    {
      v58 = *a4;
      if ((_DWORD)v56)
      {
        v59 = 48 * v56;
        v58 = *a4;
        while ((unint64_t)(*(_QWORD *)v58 + 1) <= 1)
        {
          v58 += 48;
          v59 -= 48;
          if (!v59)
          {
            v58 = v57;
            break;
          }
        }
      }
      if (v55)
        goto LABEL_64;
LABEL_68:
      v60 = 0;
      goto LABEL_69;
    }
    v58 = v55 + 48 * v56;
  }
  else
  {
    v58 = 0;
    LODWORD(v56) = 0;
  }
  v57 = v55 + 48 * v56;
  if (!v55)
    goto LABEL_68;
LABEL_64:
  v60 = v55 + 48 * *(unsigned int *)(v55 - 4);
LABEL_69:
  if (v60 == v58)
    goto LABEL_206;
  v167 = v52;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  do
  {
    v64 = v170[14];
    if (!v64)
      goto LABEL_99;
    v65 = *(_DWORD *)(v64 - 8);
    v66 = *(_QWORD *)v58 + ~(*(_QWORD *)v58 << 32);
    v67 = (v66 ^ (v66 >> 22)) + ~((v66 ^ (v66 >> 22)) << 13);
    v68 = (9 * (v67 ^ (v67 >> 8))) ^ ((9 * (v67 ^ (v67 >> 8))) >> 15);
    v69 = v65 & (((v68 + ~(v68 << 27)) >> 31) ^ ((_DWORD)v68 + ~((_DWORD)v68 << 27)));
    v70 = *(_QWORD *)(v64 + 16 * v69);
    if (v70 != *(_QWORD *)v58)
    {
      v71 = 1;
      while (v70)
      {
        v69 = ((_DWORD)v69 + v71) & v65;
        v70 = *(_QWORD *)(v64 + 16 * v69);
        ++v71;
        if (v70 == *(_QWORD *)v58)
          goto LABEL_76;
      }
LABEL_99:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v87 = v179;
      if (v179)
        *(_DWORD *)v179 += 2;
      *(_WORD *)a1 = 264;
      *(_QWORD *)(a1 + 8) = v87;
      v88 = v63;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
        {
          WTF::StringImpl::destroy(v62, v74);
          v87 = v179;
        }
        else
        {
          *(_DWORD *)v62 -= 2;
        }
      }
      v179 = 0;
      v54 = v167;
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
          WTF::StringImpl::destroy(v87, v74);
        else
          *(_DWORD *)v87 -= 2;
      }
LABEL_107:
      if (v61)
      {
        v171 = &v88[12 * v61];
        while (1)
        {
          v89 = v88 + 2;
          v90 = *(_QWORD *)v88;
          if (!*(_BYTE *)(*(_QWORD *)v88 + 57))
          {
            v131 = v88[10];
            if ((_DWORD)v131 == -1)
LABEL_271:
              std::__throw_bad_variant_access[abi:sn180100]();
            v176 = (WTF *)&v178;
            ((void (*)(WTF::StringImpl **__return_ptr, WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8IndexKey8asOneKeyEvE3__0JZNKS9_8asOneKeyEvE3__1ZNKS9_8asOneKeyEvE3__2EEEEEJRKNS0_6__implIJDnNS8_10IDBKeyDataENS6_6VectorISG_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v131])(&v179, &v176, v89);
            v132 = *(uint64_t **)(v90 + 72);
            v133 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(v132, (unsigned __int8 *)&v179);
            v135 = *(_QWORD *)(v133 + 32);
            if (v135)
            {
              v136 = (_DWORD *)v133;
              v137 = *(unsigned __int8 **)v135;
              if (*(_BYTE *)(v135 + 8))
              {
                if (v137 && WebCore::IDBKeyData::operator==(v137, (unsigned __int8 *)a3, v134))
                {
                  v139 = *(unsigned int **)v135;
                  if (*(_QWORD *)v135)
                  {
                    v140 = v139[6];
                    if ((_DWORD)v140 != -1)
                      ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v140])(&v176, v139 + 2);
                    v139[6] = -1;
                    WTF::fastFree((WTF *)v139, v138);
                  }
                  *(_QWORD *)v135 = 0;
LABEL_187:
                  if (*v132)
                  {
                    v141 = *v132 + 40 * *(unsigned int *)(*v132 - 4);
                    if ((_DWORD *)v141 == v136)
                      goto LABEL_194;
                  }
                  else
                  {
                    if (!v136)
                      goto LABEL_194;
                    v141 = 0;
                  }
                  if ((_DWORD *)v141 != v136)
                    WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::remove((uint64_t)v132, v136);
                }
              }
              else if (std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::__erase_unique<WebCore::IDBKeyData>(v137, (WebCore::IDBKeyData *)a3, v134))
              {
                goto LABEL_187;
              }
            }
LABEL_194:
            WebCore::IDBServer::MemoryIndex::notifyCursorsOfValueChange(v90, (const WebCore::IDBKeyData *)&v179, (const WebCore::IDBKeyData *)a3);
            if (v181 != -1)
              ((void (*)(WTF **, _QWORD *))off_1E335A328[v181])(&v176, v180);
            goto LABEL_196;
          }
          v176 = 0;
          v177 = 0;
          v179 = (WTF::StringImpl *)&v176;
          v180[0] = &v176;
          v172 = v88;
          v91 = v88[10];
          if ((_DWORD)v91 == -1)
            goto LABEL_271;
          v178 = &v179;
          ((void (*)(WTF::StringImpl ***, unsigned int *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8IndexKey10multiEntryEvE3__0JZNKS9_10multiEntryEvE3__1ZNKS9_10multiEntryEvE3__2EEEEEJRKNS0_6__implIJDnNS8_10IDBKeyDataENS6_6VectorISG_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix
                                                                     + v91))(&v178, v89);
          v92 = (unsigned __int8 *)v176;
          v93 = (unsigned __int8 *)v176 + 32 * HIDWORD(v177);
          if (!HIDWORD(v177))
            goto LABEL_173;
          do
          {
            v94 = *(uint64_t **)(v90 + 72);
            v95 = *v94;
            if (!*v94)
              goto LABEL_124;
            v96 = *(_DWORD *)(v95 - 8);
            LODWORD(v179) = -1640531527;
            WORD2(v179) = 0;
            BYTE6(v179) = 0;
            WebCore::add((uint64_t)&v179, (uint64_t)v92);
            v97 = v179;
            if (BYTE6(v179))
            {
              v127 = ((_DWORD)v179 + WORD2(v179)) ^ (((_DWORD)v179 + WORD2(v179)) << 11);
              v97 = v127 + (v127 >> 17);
            }
            v98 = (v97 ^ (8 * v97)) + ((v97 ^ (8 * v97)) >> 5);
            v99 = (v98 ^ (4 * v98)) + ((v98 ^ (4 * v98)) >> 15);
            v100 = v99 ^ (v99 << 10);
            if (!v100)
              v100 = 0x800000;
            v101 = v100 & v96;
            v102 = v95 + 40 * (v100 & v96);
            if (!*(_DWORD *)(v102 + 24))
            {
LABEL_122:
              if (*v94)
              {
                v102 = *v94 + 40 * *(unsigned int *)(*v94 - 4);
                goto LABEL_125;
              }
LABEL_124:
              v102 = 0;
              goto LABEL_125;
            }
            v103 = 1;
            while (*(_BYTE *)v102 || (WebCore::IDBKeyData::operator==((unsigned __int8 *)v102, v92, v53) & 1) == 0)
            {
              v101 = (v101 + v103) & v96;
              v102 = v95 + 40 * v101;
              ++v103;
              if (!*(_DWORD *)(v102 + 24))
                goto LABEL_122;
            }
LABEL_125:
            v104 = *(_QWORD *)(v102 + 32);
            if (!v104)
              goto LABEL_142;
            v105 = *(unsigned __int8 **)v104;
            if (*(_BYTE *)(v104 + 8))
            {
              if (!v105 || !WebCore::IDBKeyData::operator==(v105, (unsigned __int8 *)a3, v53))
                goto LABEL_142;
              v106 = *(unsigned int **)v104;
              if (*(_QWORD *)v104)
              {
                v107 = v106[6];
                if ((_DWORD)v107 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v107])(&v179, v106 + 2);
                v106[6] = -1;
                WTF::fastFree((WTF *)v106, v74);
              }
              *(_QWORD *)v104 = 0;
            }
            else if (!std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::__erase_unique<WebCore::IDBKeyData>(v105, (WebCore::IDBKeyData *)a3, v53))
            {
              goto LABEL_142;
            }
            if (*v94)
            {
              v108 = *v94 + 40 * *(unsigned int *)(*v94 - 4);
              if (v108 == v102)
                goto LABEL_142;
            }
            else
            {
              if (!v102)
                goto LABEL_142;
              v108 = 0;
            }
            if (v108 != v102)
              WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::remove((uint64_t)v94, (_DWORD *)v102);
LABEL_142:
            v109 = *(_QWORD *)(v90 + 88);
            if (v109)
            {
              v110 = *(unsigned int *)(v109 - 12);
              if ((_DWORD)v110)
              {
                if (v110 >> 29)
                {
                  __break(0xC471u);
                  return;
                }
                v111 = WTF::fastMalloc((WTF *)(8 * v110));
                v114 = (WTF *)v111;
                v115 = *(_QWORD *)(v90 + 88);
                if (v115 && *(_DWORD *)(v115 - 12))
                {
                  v116 = *(unsigned int *)(v115 - 4);
                  if ((_DWORD)v116)
                  {
                    v117 = 8 * v116;
                    v118 = *(uint64_t **)(v90 + 88);
                    while ((unint64_t)(*v118 + 1) <= 1)
                    {
                      ++v118;
                      v117 -= 8;
                      if (!v117)
                        goto LABEL_165;
                    }
                  }
                  else
                  {
                    v118 = *(uint64_t **)(v90 + 88);
                  }
                  v119 = (uint64_t *)(v115 + 8 * v116);
                  if (v118 != v119)
                  {
                    v120 = 0;
                    v121 = *v118;
                    v122 = 1;
LABEL_155:
                    v123 = v122;
                    *(_QWORD *)(v111 + 8 * v120++) = v121;
                    while (++v118 != v119)
                    {
                      v121 = *v118;
                      if ((unint64_t)(*v118 + 1) > 1)
                      {
                        ++v122;
                        if (v118 != v119)
                          goto LABEL_155;
                        break;
                      }
                    }
                    if (v120)
                    {
                      v124 = 8 * v123;
                      v125 = (uint64_t *)v111;
                      do
                      {
                        v126 = *v125;
                        if (WebCore::IDBKeyData::operator==((unsigned __int8 *)(*v125 + 224), v92, v113)
                          && WebCore::IDBKeyData::operator==((unsigned __int8 *)(v126 + 256), (unsigned __int8 *)a3, v113))
                        {
                          *(_QWORD *)(v126 + 144) = 0;
                          *(_QWORD *)(v126 + 184) = 0;
                          WebCore::IDBServer::MemoryIndex::cursorDidBecomeDirty(*(_QWORD *)(v126 + 136), v126);
                        }
                        ++v125;
                        v124 -= 8;
                      }
                      while (v124);
                    }
                  }
                }
LABEL_165:
                WTF::fastFree(v114, v112);
              }
            }
            v92 += 32;
          }
          while (v92 != v93);
          v92 = (unsigned __int8 *)v176;
          if (HIDWORD(v177))
          {
            v128 = 32 * HIDWORD(v177);
            v129 = (_DWORD *)((char *)v176 + 24);
            do
            {
              v130 = *v129;
              if ((_DWORD)v130 != -1)
                ((void (*)(WTF::StringImpl **, _DWORD *))off_1E335A328[v130])(&v179, v129 - 4);
              *v129 = -1;
              v129 += 8;
              v128 -= 32;
            }
            while (v128);
            v92 = (unsigned __int8 *)v176;
          }
LABEL_173:
          if (v92)
          {
            v176 = 0;
            LODWORD(v177) = 0;
            WTF::fastFree((WTF *)v92, v74);
          }
          v88 = v172;
LABEL_196:
          v88 += 12;
          if (v88 == v171)
          {
            v63 = v174;
            v61 = HIDWORD(v175);
            goto LABEL_198;
          }
        }
      }
LABEL_204:
      if (!v88)
        goto LABEL_206;
LABEL_205:
      v174 = 0;
      LODWORD(v175) = 0;
      WTF::fastFree((WTF *)v88, v74);
      goto LABEL_206;
    }
LABEL_76:
    v72 = v64 + 16 * v69;
    v73 = *(WTF::StringImpl **)(v72 + 8);
    if (!v73)
      goto LABEL_99;
    WebCore::IDBServer::MemoryIndex::putIndexKey((WebCore::IDBServer::IndexValueStore *)&v179, *(_QWORD *)(v72 + 8), (unsigned int *)a3, v58 + 8);
    v75 = (unsigned __int16)v179;
    *(_WORD *)a1 = (_WORD)v179;
    v76 = (WTF::StringImpl *)v180[0];
    *(_QWORD *)(a1 + 8) = v180[0];
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v74);
      else
        *(_DWORD *)v62 -= 2;
    }
    if (v75 > 0xFF)
    {
      v88 = v174;
      v61 = HIDWORD(v175);
      v54 = v167;
      goto LABEL_107;
    }
    v179 = v73;
    LOBYTE(v180[0]) = 0;
    v182 = -1;
    v77 = *(unsigned int *)(v58 + 40);
    if ((_DWORD)v77 != -1)
    {
      ((void (*)(WTF **, _QWORD *, uint64_t))off_1E335A508[v77])(&v176, v180, v58 + 8);
      v182 = v77;
    }
    v78 = HIDWORD(v175);
    if (HIDWORD(v175) == (_DWORD)v175)
    {
      v79 = WTF::Vector<std::pair<WebCore::IDBServer::MemoryIndex *,WebCore::IndexKey>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v174, HIDWORD(v175) + 1, (unint64_t)&v179);
      v78 = HIDWORD(v175);
      v80 = &v174[12 * HIDWORD(v175)];
      v63 = v174;
      *(_QWORD *)v80 = *(_QWORD *)v79;
      *((_BYTE *)v80 + 8) = 0;
      v74 = (WTF::StringImpl *)(v80 + 2);
      v80[10] = -1;
      v81 = v80 + 10;
      v82 = *(unsigned int *)(v79 + 40);
      if ((_DWORD)v82 != -1)
      {
        ((void (*)(WTF **, WTF::StringImpl *, unint64_t))off_1E335A548[v82])(&v176, v74, v79 + 8);
        *v81 = v82;
      }
    }
    else
    {
      v83 = &v174[12 * HIDWORD(v175)];
      v63 = v174;
      *(_QWORD *)v83 = v179;
      *((_BYTE *)v83 + 8) = 0;
      v74 = (WTF::StringImpl *)(v83 + 2);
      v83[10] = -1;
      v84 = (int *)(v83 + 10);
      v85 = v182;
      if (v182 == -1)
      {
        v61 = v78 + 1;
        HIDWORD(v175) = v61;
        goto LABEL_91;
      }
      ((void (*)(WTF **, WTF::StringImpl *, _QWORD *))off_1E335A548[v182])(&v176, v74, v180);
      *v84 = v85;
    }
    v61 = v78 + 1;
    HIDWORD(v175) = v61;
    if (v182 != -1)
      ((void (*)(WTF **, _QWORD *))off_1E335A4F0[v182])(&v176, v180);
LABEL_91:
    v86 = v58 + 48;
    v58 = v57;
    if (v86 != v57)
    {
      v58 = v86;
      while ((unint64_t)(*(_QWORD *)v58 + 1) <= 1)
      {
        v58 += 48;
        if (v58 == v57)
        {
          v58 = v57;
          break;
        }
      }
    }
    v62 = v76;
  }
  while (v58 != v60);
LABEL_198:
  if (v61)
  {
    v142 = 48 * v61;
    v143 = v63 + 10;
    v54 = v167;
    do
    {
      v144 = *v143;
      if ((_DWORD)v144 != -1)
        ((void (*)(WTF::StringImpl **, _DWORD *))off_1E335A4F0[v144])(&v179, v143 - 8);
      *v143 = -1;
      v143 += 12;
      v142 -= 48;
    }
    while (v142);
    v88 = v174;
    goto LABEL_204;
  }
  v54 = v167;
  v88 = v63;
  if (v63)
    goto LABEL_205;
LABEL_206:
  if (!*(_BYTE *)(a1 + 1))
  {
    v148 = v170[16];
    if (v148)
    {
      v149 = *(unsigned int *)(v148 - 4);
      v150 = v148 + 24 * v149;
      if (*(_DWORD *)(v148 - 12))
      {
        v151 = v170[16];
        if ((_DWORD)v149)
        {
          v152 = 24 * v149;
          v151 = v170[16];
          while (1)
          {
            v153 = *(_OWORD *)v151 == 0 || *(_QWORD *)v151 == -1;
            if (!v153)
              break;
            v151 += 24;
            v152 -= 24;
            if (!v152)
            {
              v151 = v150;
              goto LABEL_245;
            }
          }
        }
        goto LABEL_245;
      }
      v151 = v148 + 24 * v149;
    }
    else
    {
      v151 = 0;
      LODWORD(v149) = 0;
    }
    v150 = v148 + 24 * v149;
LABEL_245:
    if (v148)
      v161 = v148 + 24 * *(unsigned int *)(v148 - 4);
    else
      v161 = 0;
    while (v151 != v161)
    {
      v162 = *(_QWORD *)(v151 + 16);
      if (!*(_BYTE *)(v162 + 224)
        && WebCore::IDBKeyData::operator==((unsigned __int8 *)(v54 + 32), (unsigned __int8 *)(v162 + 232), v53))
      {
        if (!*(_BYTE *)(v162 + 224))
          *(_BYTE *)(v162 + 224) = 1;
        *(_QWORD *)(v162 + 216) = v54;
      }
      v163 = v151 + 24;
      v151 = v150;
      if (v163 != v150)
      {
        v151 = v163;
        while (*(_OWORD *)v151 == 0 || *(_QWORD *)v151 == -1)
        {
          v151 += 24;
          if (v151 == v150)
          {
            v151 = v150;
            break;
          }
        }
      }
    }
    return;
  }
  v145 = (_QWORD *)v170[12];
  if (*v145)
  {
    v146 = *v145 + 40 * *(unsigned int *)(*v145 - 4);
    v147 = (_DWORD *)v168;
    if (v146 == v168)
      goto LABEL_225;
  }
  else
  {
    v147 = (_DWORD *)v168;
    if (!v168)
      goto LABEL_225;
    v146 = 0;
  }
  if ((_DWORD *)v146 != v147)
    WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::remove((uint64_t)v145, v147);
LABEL_225:
  v154 = (_QWORD *)v170[13];
  v155 = *(_QWORD **)(v54 + 8);
  if (v155)
  {
    do
    {
      v156 = v155;
      v155 = (_QWORD *)*v155;
    }
    while (v155);
  }
  else
  {
    v157 = (_QWORD *)v54;
    do
    {
      v156 = (_QWORD *)v157[2];
      v153 = *v156 == (_QWORD)v157;
      v157 = v156;
    }
    while (!v153);
  }
  if (*v154 == v54)
    *v154 = v156;
  v158 = (uint64_t *)v154[1];
  --v154[2];
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v158, (uint64_t *)v54);
  v160 = *(unsigned int *)(v54 + 56);
  if ((_DWORD)v160 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t))off_1E335A328[v160])(&v179, v54 + 40);
  *(_DWORD *)(v54 + 56) = -1;
  WTF::fastFree((WTF *)v54, v159);
}

void WebCore::IDBServer::MemoryIDBBackingStore::getRecord(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int *v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  int v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  void *v35;
  WTF *v36;
  unsigned int v37;
  unsigned int v38;
  WTF *v39;
  WTF *v40;
  WTF::StringImpl *v41[5];
  unsigned __int8 v42;
  _BYTE v43[16];
  int v44;
  char v45;
  uint64_t v46;
  int v47;
  char v48[16];
  int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned __int8 v54[8];
  _BYTE v55[16];
  int v56;
  char v57;

  v9 = *(_QWORD *)(a1 + 96);
  if (v9)
  {
    if (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(v9, *a2, a2[1]))
    {
      v14 = *(_QWORD *)(a1 + 104);
      if (v14)
      {
        v15 = *(_DWORD *)(v14 - 8);
        v16 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = *(_QWORD *)(v14 + 16 * v19);
        if (v20 == a3)
        {
LABEL_8:
          v22 = v14 + 16 * v19;
          v23 = *(_QWORD *)(v22 + 8);
          if (v23)
          {
            if (a5)
            {
              WebCore::IDBServer::MemoryObjectStore::lowestKeyWithRecordInRange((uint64_t)v54, *(const WebCore::IDBKeyRangeData **)(v22 + 8), a4);
              if (v56 && (v24 = *(uint64_t **)(v23 + 96)) != 0)
              {
                WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>((uint64_t)&v40, *v24, v54);
                v25 = (unsigned int *)v40;
                if (v40)
                {
                  do
                    v26 = __ldaxr(v25);
                  while (__stlxr(v26 + 1, v25));
                }
              }
              else
              {
                v25 = 0;
                v40 = 0;
              }
              v41[0] = (WTF::StringImpl *)v25;
              memset(&v41[1], 0, 32);
              v42 = v54[0];
              v43[0] = 0;
              v44 = -1;
              v32 = v56;
              if (v56 != -1)
              {
                ((void (*)(char *, _BYTE *, _BYTE *))off_1E335A370[v56])(&v57, v43, v55);
                v44 = v32;
              }
              v45 = 0;
              v46 = 0;
              v47 = 0;
              v48[0] = 0;
              v50 = 0;
              if (*(_BYTE *)(v23 + 56))
              {
                v49 = -1;
                v33 = *(unsigned int *)(v23 + 48);
                if ((_DWORD)v33 != -1)
                {
                  ((void (*)(char *, char *, uint64_t))off_1E335A4A0[v33])(&v57, v48, v23 + 32);
                  v49 = v33;
                }
                v50 = 1;
              }
              v51 = 0;
              v52 = 0;
              v53 = 1;
              WebCore::IDBGetResult::operator=(a6, (uint64_t)v41);
              WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v41, v34);
              v36 = v40;
              v40 = 0;
              if (v36)
              {
                do
                {
                  v37 = __ldaxr((unsigned int *)v36);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, (unsigned int *)v36));
                if (!v38)
                {
                  atomic_store(1u, (unsigned int *)v36);
                  v39 = (WTF *)*((_QWORD *)v36 + 1);
                  if (v39)
                  {
                    *((_QWORD *)v36 + 1) = 0;
                    *((_DWORD *)v36 + 4) = 0;
                    WTF::fastFree(v39, v35);
                  }
                  WTF::fastFree(v36, v35);
                }
              }
              if (v56 != -1)
                ((void (*)(WTF::StringImpl **, _BYTE *))off_1E335A328[v56])(v41, v55);
            }
            else
            {
              WebCore::IDBServer::MemoryObjectStore::lowestKeyWithRecordInRange((uint64_t)v54, *(const WebCore::IDBKeyRangeData **)(v22 + 8), a4);
              memset(v41, 0, sizeof(v41));
              v42 = v54[0];
              v43[0] = 0;
              v44 = -1;
              v30 = v56;
              if (v56 != -1)
              {
                ((void (*)(WTF **, _BYTE *, _BYTE *))off_1E335A370[v56])(&v40, v43, v55);
                v44 = v30;
              }
              v45 = 0;
              v46 = 0;
              v47 = 0;
              v48[0] = 0;
              v50 = 0;
              v51 = 0;
              v52 = 0;
              v53 = 1;
              WebCore::IDBGetResult::operator=(a6, (uint64_t)v41);
              WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v41, v31);
              if (v56 != -1)
                ((void (*)(WTF **, _BYTE *))off_1E335A328[v56])(&v40, v55);
            }
            *(_WORD *)a7 = 0;
            goto LABEL_37;
          }
        }
        else
        {
          v21 = 1;
          while (v20)
          {
            v19 = ((_DWORD)v19 + v21) & v15;
            v20 = *(_QWORD *)(v14 + 16 * v19);
            ++v21;
            if (v20 == a3)
              goto LABEL_8;
          }
        }
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a7 = 280;
  v28 = v41[0];
  if (!v41[0])
  {
LABEL_37:
    *(_QWORD *)(a7 + 8) = 0;
    return;
  }
  v29 = *(_DWORD *)v41[0];
  *(_DWORD *)v41[0] += 2;
  *(_QWORD *)(a7 + 8) = v28;
  v41[0] = 0;
  if (v29)
    *(_DWORD *)v28 = v29;
  else
    WTF::StringImpl::destroy(v28, v27);
}

uint64_t WebCore::IDBServer::MemoryObjectStore::lowestKeyWithRecordInRange(uint64_t this, const WebCore::IDBKeyRangeData *a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  char v17;
  char v18;

  v3 = this;
  if (!*((_QWORD *)a2 + 12))
    goto LABEL_34;
  if (*(_DWORD *)(a3 + 24) | *(_DWORD *)(a3 + 56))
    v6 = *(_BYTE *)(a3 + 64) == 0;
  else
    v6 = 0;
  v7 = v6 && *(_BYTE *)(a3 + 65) == 0;
  if (!v7
    || (this = WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(a3 + 32)), !(_DWORD)this)
    || (this = WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)a3), !(_DWORD)this)
    || (this = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)a3, (const WebCore::IDBKeyData *)(a3 + 32), (const WTF::String *)a3), (_DWORD)this)|| (this = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(**((_QWORD **)a2 + 12), (unsigned __int8 *)a3), !(_DWORD)this))
  {
    v9 = *((_QWORD *)a2 + 13);
    v10 = (_QWORD *)(v9 + 8);
    v11 = *(_QWORD **)(v9 + 8);
    if (v11)
    {
      do
      {
        this = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v11 + 4), (const WebCore::IDBKeyData *)a3, (const WTF::String *)a3);
        v12 = v11 + 1;
        if ((int)this >= 0)
        {
          v12 = v11;
          v10 = v11;
        }
        v11 = (_QWORD *)*v12;
      }
      while (*v12);
      v9 = *((_QWORD *)a2 + 13);
    }
    if (v10 != (_QWORD *)(v9 + 8))
    {
      if (*(_BYTE *)(a3 + 64)
        && (this = WebCore::IDBKeyData::operator==((unsigned __int8 *)v10 + 32, (unsigned __int8 *)a3, (const WTF::StringImpl *)a3), (_DWORD)this))
      {
        v13 = (_QWORD *)v10[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v10[2];
            v6 = *v14 == (_QWORD)v10;
            v10 = v14;
          }
          while (!v6);
        }
      }
      else
      {
        v14 = v10;
      }
      if (v14 != (_QWORD *)(*((_QWORD *)a2 + 13) + 8))
      {
        if (!*(_DWORD *)(a3 + 56)
          || (this = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v14 + 4), (const WebCore::IDBKeyData *)(a3 + 32), (const WTF::String *)a3), (int)this < 1)&& (!*(_BYTE *)(a3 + 65)|| (this = WebCore::IDBKeyData::operator==((unsigned __int8 *)v14 + 32, (unsigned __int8 *)(a3 + 32), v15), !(_DWORD)this)))
        {
          *(_BYTE *)v3 = *((_BYTE *)v14 + 32);
          *(_BYTE *)(v3 + 8) = 0;
          *(_DWORD *)(v3 + 24) = -1;
          v16 = *((unsigned int *)v14 + 14);
          if ((_DWORD)v16 != -1)
          {
            this = ((uint64_t (*)(char *, uint64_t, _QWORD *))off_1E335A370[v16])(&v18, v3 + 8, v14 + 5);
            *(_DWORD *)(v3 + 24) = v16;
          }
          return this;
        }
      }
    }
LABEL_34:
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    return this;
  }
  *(_BYTE *)v3 = *(_BYTE *)a3;
  *(_BYTE *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 24) = -1;
  v8 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v8 != -1)
  {
    this = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E335A370[v8])(&v17, v3 + 8, a3 + 8);
    *(_DWORD *)(v3 + 24) = v8;
  }
  return this;
}

uint64_t WebCore::IDBGetResult::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  WebCore::IDBValue *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v22;

  WebCore::IDBValue::operator=((uint64_t *)a1, (uint64_t *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(unsigned int *)(a1 + 64);
  v5 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v4 == -1)
  {
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v5 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E335A328[v4])(&v22, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
    goto LABEL_6;
  }
  v22 = a1 + 48;
  ((void (*)(uint64_t *))off_1E335A448[v5])(&v22);
LABEL_6:
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v6 = *(unsigned int *)(a1 + 96);
  v7 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v6 == -1)
  {
    if ((_DWORD)v7 == -1)
      goto LABEL_11;
  }
  else if ((_DWORD)v7 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E335A328[v6])(&v22, a1 + 80);
    *(_DWORD *)(a1 + 96) = -1;
    goto LABEL_11;
  }
  v22 = a1 + 80;
  ((void (*)(uint64_t *))off_1E335A448[v7])(&v22);
LABEL_11:
  v8 = (WTF::StringImpl *)(a1 + 104);
  v9 = a2 + 104;
  if (*(unsigned __int8 *)(a1 + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_25;
    v10 = *(unsigned int *)(a1 + 120);
    v11 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v10 == -1)
    {
      if ((_DWORD)v11 == -1)
        goto LABEL_25;
    }
    else if ((_DWORD)v11 == -1)
    {
      ((void (*)(uint64_t *, WTF::StringImpl *, uint64_t))off_1E335A490[v10])(&v22, v8, v9);
      *(_DWORD *)(a1 + 120) = -1;
      goto LABEL_25;
    }
    v22 = a1 + 104;
    ((void (*)(uint64_t *))off_1E335A4D0[v11])(&v22);
  }
  else if (*(_BYTE *)(a1 + 128))
  {
    v12 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v12 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl *, uint64_t))off_1E335A490[v12])(&v22, v8, v9);
    *(_DWORD *)(a1 + 120) = -1;
    *(_BYTE *)(a1 + 128) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 120) = -1;
    v13 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(uint64_t *, WTF::StringImpl *, uint64_t))off_1E335A4E0[v13])(&v22, v8, v9);
      *(_DWORD *)(a1 + 120) = v13;
    }
    *(_BYTE *)(a1 + 128) = 1;
  }
LABEL_25:
  v14 = *(_DWORD *)(a1 + 148);
  if (v14)
  {
    v15 = 104 * v14;
    v16 = (WebCore::IDBValue *)(*(_QWORD *)(a1 + 136) + 64);
    do
    {
      WebCore::IDBValue::~IDBValue(v16, v8);
      v17 = *((unsigned int *)v16 - 2);
      if ((_DWORD)v17 != -1)
        ((void (*)(uint64_t *, char *))off_1E335A328[v17])(&v22, (char *)v16 - 24);
      *((_DWORD *)v16 - 2) = -1;
      v18 = *((unsigned int *)v16 - 10);
      if ((_DWORD)v18 != -1)
        ((void (*)(uint64_t *, char *))off_1E335A328[v18])(&v22, (char *)v16 - 56);
      *((_DWORD *)v16 - 10) = -1;
      v16 = (WebCore::IDBValue *)((char *)v16 + 104);
      v15 -= 104;
    }
    while (v15);
  }
  v19 = *(WTF **)(a1 + 136);
  if (v19)
  {
    *(_QWORD *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 144) = 0;
    WTF::fastFree(v19, v8);
  }
  v20 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 136) = v20;
  LODWORD(v20) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(_DWORD *)(a1 + 144) = v20;
  LODWORD(v20) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 148) = 0;
  *(_DWORD *)(a1 + 148) = v20;
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

void WebCore::IDBServer::MemoryIDBBackingStore::getAllRecords(WebCore::IDBServer::MemoryIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, const WebCore::IDBGetAllRecordsData *a3@<X2>, WebCore::IDBGetAllResult *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WebCore::IDBValue *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  unsigned int *v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;
  unsigned int v93;
  unsigned int v94;
  WTF *v95;
  unsigned int v96;
  unsigned int v97;
  WTF::StringImpl **v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl **v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF *v104;
  WTF *v105;
  uint64_t v106;
  _DWORD *v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WebCore::IDBValue *v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  WTF *v120;
  uint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  BOOL v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  WTF::StringImpl *v134;
  void *v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  WTF *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _DWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  int v163;
  unsigned int *v164;
  __int128 v165;
  __int128 v166;
  _BYTE v167[16];
  int v168;
  __int16 v169;
  WTF *v170;
  WTF *v171;
  __int128 v172;
  __int128 v173;
  WTF *v174;
  uint64_t v175;
  unsigned __int8 v176[8];
  uint64_t v177;
  unsigned int v178;
  unsigned int *v179;
  uint64_t v180;
  unsigned int v181;
  char v182;
  WTF::StringImpl *v183;
  __int128 v184;
  __int128 v185;
  _BYTE v186[16];
  int v187;
  __int16 v188;

  v7 = *((_QWORD *)this + 12);
  if (!v7)
    goto LABEL_171;
  if (!WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(v7, *(_QWORD *)a2, *((_QWORD *)a2 + 1)))goto LABEL_171;
  v10 = *((_QWORD *)this + 13);
  if (!v10)
    goto LABEL_171;
  v11 = *(_DWORD *)(v10 - 8);
  v12 = *((_QWORD *)a3 + 11);
  v13 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v11 & ((v15 >> 31) ^ v15);
  v17 = *(_QWORD *)(v10 + 16 * v16);
  if (v17 != v12)
  {
    v18 = 1;
    while (v17)
    {
      v16 = ((_DWORD)v16 + v18) & v11;
      v17 = *(_QWORD *)(v10 + 16 * v16);
      ++v18;
      if (v17 == v12)
        goto LABEL_8;
    }
    goto LABEL_171;
  }
LABEL_8:
  v19 = *(_QWORD *)(v10 + 16 * v16 + 8);
  if (!v19)
    goto LABEL_171;
  v20 = *((_QWORD *)a3 + 12);
  if (v20)
  {
    v21 = *(_QWORD *)(v19 + 112);
    if (!v21)
      goto LABEL_171;
    v22 = *(_DWORD *)(v21 - 8);
    v23 = (v20 + ~(v20 << 32)) ^ ((unint64_t)(v20 + ~(v20 << 32)) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = *(_QWORD *)(v21 + 16 * v26);
    if (v27 != v20)
    {
      v28 = 1;
      while (v27)
      {
        v26 = ((_DWORD)v26 + v28) & v22;
        v27 = *(_QWORD *)(v21 + 16 * v26);
        ++v28;
        if (v27 == v20)
          goto LABEL_15;
      }
      goto LABEL_171;
    }
LABEL_15:
    v29 = *(_QWORD *)(v21 + 16 * v26 + 8);
    if (!v29)
    {
LABEL_171:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)a5 = 280;
      v110 = v183;
      if (!v183)
        goto LABEL_263;
      v111 = *(_DWORD *)v183;
      *(_DWORD *)v183 += 2;
      *(_QWORD *)(a5 + 8) = v110;
      v183 = 0;
      if (v111)
        *(_DWORD *)v110 = v111;
      else
        WTF::StringImpl::destroy(v110, v109);
      return;
    }
    v163 = *((unsigned __int8 *)a3 + 72);
    v30 = *(_QWORD *)(v29 + 64);
    if (v30)
      v30 = *(_QWORD *)(v30 + 8);
    v31 = *(_QWORD *)((char *)a3 + 76);
    LOBYTE(v183) = *((_BYTE *)a3 + 72);
    LOBYTE(v188) = 0;
    v184 = 0u;
    v185 = 0u;
    v186[0] = 0;
    if (*(_BYTE *)(v30 + 56))
    {
      v187 = -1;
      v32 = *(unsigned int *)(v30 + 48);
      if ((_DWORD)v32 != -1)
      {
        ((void (*)(unsigned int **, _BYTE *, uint64_t))off_1E335A4A0[v32])(&v164, v186, v30 + 32);
        v187 = v32;
      }
      LOBYTE(v188) = 1;
    }
    WebCore::IDBGetAllResult::operator=((uint64_t)a4, &v183);
    if ((_BYTE)v188)
    {
      if (v187 != -1)
        ((void (*)(unsigned int **, _BYTE *))off_1E335A490[v187])(&v164, v186);
      v187 = -1;
    }
    if (HIDWORD(v185))
    {
      v34 = (WebCore::IDBValue *)v185;
      v35 = 40 * HIDWORD(v185);
      do
      {
        WebCore::IDBValue::~IDBValue(v34, v33);
        v34 = (WebCore::IDBValue *)(v36 + 40);
        v35 -= 40;
      }
      while (v35);
    }
    v37 = (WTF *)v185;
    if ((_QWORD)v185)
    {
      *(_QWORD *)&v185 = 0;
      DWORD2(v185) = 0;
      WTF::fastFree(v37, v33);
    }
    v38 = (WTF *)v184;
    v160 = v29;
    if (HIDWORD(v184))
    {
      v39 = 32 * HIDWORD(v184);
      v40 = (_DWORD *)(v184 + 24);
      do
      {
        v41 = *v40;
        if ((_DWORD)v41 != -1)
          ((void (*)(unsigned int **, _DWORD *))off_1E335A328[v41])(&v164, v40 - 4);
        *v40 = -1;
        v40 += 8;
        v39 -= 32;
      }
      while (v39);
      v38 = (WTF *)v184;
    }
    if (v38)
    {
      *(_QWORD *)&v184 = 0;
      DWORD2(v184) = 0;
      WTF::fastFree(v38, v33);
    }
    if (!*(_QWORD *)(v29 + 72))
      goto LABEL_262;
    if ((_DWORD)v31)
      v42 = (v31 & 0xFF00000000) == 0;
    else
      v42 = 1;
    if (v42)
      v43 = -1;
    else
      v43 = v31;
    v158 = v43;
    LOBYTE(v183) = *(_BYTE *)a3;
    LOBYTE(v184) = 0;
    LODWORD(v185) = -1;
    v44 = *((unsigned int *)a3 + 6);
    if ((_DWORD)v44 != -1)
    {
      ((void (*)(unsigned int **, __int128 *, char *))off_1E335A370[v44])(&v164, &v184, (char *)a3 + 8);
      LODWORD(v185) = v44;
    }
    BYTE8(v185) = *((_BYTE *)a3 + 32);
    v186[0] = 0;
    v187 = -1;
    v45 = *((unsigned int *)a3 + 14);
    if ((_DWORD)v45 != -1)
    {
      ((void (*)(unsigned int **, _BYTE *, char *))off_1E335A370[v45])(&v164, v186, (char *)a3 + 40);
      v187 = v45;
    }
    v46 = 0;
    v188 = *((_WORD *)a3 + 32);
    v161 = (_QWORD *)((char *)a4 + 8);
    v159 = (_QWORD *)((char *)a4 + 24);
    while (1)
    {
      if (v158 <= v46)
      {
LABEL_167:
        if (v187 != -1)
          ((void (*)(unsigned int **, _BYTE *))off_1E335A328[v187])(&v164, v186);
        v187 = -1;
        if ((_DWORD)v185 != -1)
          goto LABEL_261;
        goto LABEL_262;
      }
      WebCore::IDBServer::IndexValueStore::lowestKeyWithRecordInRange((WebCore::IDBServer::IndexValueStore *)v176, *(const WebCore::IDBKeyRangeData **)(v29 + 72), (uint64_t)&v183);
      v47 = v178;
      if (!v178)
      {
        v48 = 0;
        v49 = v46;
LABEL_165:
        ((void (*)(unsigned int **, uint64_t *))off_1E335A328[v48])(&v164, &v177);
        goto LABEL_166;
      }
      LOBYTE(v183) = v176[0];
      if ((_DWORD)v185 == -1)
      {
        if (v178 == -1)
          goto LABEL_59;
      }
      else if (v178 == -1)
      {
        ((void (*)(unsigned int **, __int128 *))off_1E335A328[v185])(&v164, &v184);
        LODWORD(v185) = -1;
        goto LABEL_59;
      }
      v164 = (unsigned int *)&v184;
      ((void (*)(unsigned int **))off_1E335A3B8[v178])(&v164);
LABEL_59:
      v157 = v47;
      LOBYTE(v188) = 1;
      v50 = WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(**(_QWORD **)(v29 + 72), v176);
      v174 = 0;
      v175 = 0;
      if (!v50)
      {
        v49 = v46;
        goto LABEL_164;
      }
      v52 = v50;
      if (*(_BYTE *)(v50 + 8))
        v53 = 0;
      else
        v53 = **(_QWORD ***)v50;
      v49 = v158;
      if (v158 != (_DWORD)v46)
      {
        v54 = 0;
        while (v52)
        {
          if (*(_BYTE *)(v52 + 8))
            v55 = *(_QWORD *)v52;
          else
            v55 = (unint64_t)(v53 + 4);
          if (v54 == (_DWORD)v175)
          {
            v56 = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v174, v54 + 1, v55);
            v57 = (char *)v174 + 32 * HIDWORD(v175);
            *v57 = *(_BYTE *)v56;
            v57[8] = 0;
            v51 = (WTF::StringImpl *)(v57 + 8);
            *((_DWORD *)v57 + 6) = -1;
            v58 = v57 + 24;
            v59 = *(unsigned int *)(v56 + 24);
            if ((_DWORD)v59 == -1)
              goto LABEL_76;
            v60 = v56 + 8;
          }
          else
          {
            v61 = (char *)v174 + 32 * v54;
            *v61 = *(_BYTE *)v55;
            v61[8] = 0;
            v51 = (WTF::StringImpl *)(v61 + 8);
            *((_DWORD *)v61 + 6) = -1;
            v58 = v61 + 24;
            v59 = *(unsigned int *)(v55 + 24);
            if ((_DWORD)v59 == -1)
              goto LABEL_76;
            v60 = v55 + 8;
          }
          ((void (*)(unsigned int **, WTF::StringImpl *, unint64_t))off_1E335A370[v59])(&v164, v51, v60);
          *v58 = v59;
LABEL_76:
          v54 = ++HIDWORD(v175);
          if (*(_BYTE *)(v52 + 8))
          {
            v62 = v53;
          }
          else
          {
            v63 = (_QWORD *)v53[1];
            if (v63)
            {
              do
              {
                v62 = v63;
                v63 = (_QWORD *)*v63;
              }
              while (v63);
            }
            else
            {
              do
              {
                v62 = (_QWORD *)v53[2];
                v42 = *v62 == (_QWORD)v53;
                v53 = v62;
              }
              while (!v42);
            }
            if (v62 != (_QWORD *)(*(_QWORD *)v52 + 8))
              goto LABEL_85;
          }
          v52 = 0;
LABEL_85:
          v53 = v62;
          if (v54 >= v158 - v46)
            break;
        }
        v64 = (unsigned int *)v174;
        if (!v54)
        {
          v49 = v46;
          goto LABEL_162;
        }
        v65 = (unsigned int *)((char *)v174 + 32 * v54);
        while (2)
        {
          LOBYTE(v164) = *(_BYTE *)v64;
          LOBYTE(v165) = 0;
          LODWORD(v166) = -1;
          v66 = v64[6];
          if ((_DWORD)v66 != -1)
          {
            ((void (*)(WTF **, __int128 *, unsigned int *))off_1E335A370[v66])(&v171, &v165, v64 + 2);
            LODWORD(v166) = v66;
          }
          v67 = *((unsigned int *)a4 + 5);
          if ((_DWORD)v67 == *((_DWORD *)a4 + 4))
          {
            v68 = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v161, v67 + 1, (unint64_t)&v164);
            v69 = *((_QWORD *)a4 + 1) + 32 * *((unsigned int *)a4 + 5);
            *(_BYTE *)v69 = *(_BYTE *)v68;
            *(_BYTE *)(v69 + 8) = 0;
            v51 = (WTF::StringImpl *)(v69 + 8);
            *(_DWORD *)(v69 + 24) = -1;
            v70 = (_DWORD *)(v69 + 24);
            v71 = *(unsigned int *)(v68 + 24);
            if ((_DWORD)v71 != -1)
            {
              ((void (*)(WTF **, WTF::StringImpl *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v71])(&v171, v51, v68 + 8);
              goto LABEL_95;
            }
            goto LABEL_96;
          }
          v72 = *v161 + 32 * v67;
          *(_BYTE *)v72 = (_BYTE)v164;
          *(_BYTE *)(v72 + 8) = 0;
          v51 = (WTF::StringImpl *)(v72 + 8);
          *(_DWORD *)(v72 + 24) = -1;
          v70 = (_DWORD *)(v72 + 24);
          LODWORD(v71) = v166;
          if ((_DWORD)v166 == -1)
          {
            ++*((_DWORD *)a4 + 5);
          }
          else
          {
            ((void (*)(WTF **, WTF::StringImpl *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v166])(&v171, v51, &v165);
LABEL_95:
            *v70 = v71;
LABEL_96:
            v73 = v166;
            ++*((_DWORD *)a4 + 5);
            if ((_DWORD)v73 != -1)
              ((void (*)(WTF **, __int128 *))off_1E335A328[v73])(&v171, &v165);
          }
          if (v163)
          {
            v74 = *(_QWORD *)(v160 + 64);
            if (v74)
              v75 = *(uint64_t ***)(v74 + 8);
            else
              v75 = 0;
            LOBYTE(v164) = *(_BYTE *)v64;
            LOBYTE(v165) = 0;
            LODWORD(v166) = -1;
            v76 = v64[6];
            if ((_DWORD)v76 != -1)
            {
              ((void (*)(unsigned int **, __int128 *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v76])(&v179, &v165, v64 + 2);
              LODWORD(v166) = v76;
            }
            BYTE8(v166) = *(_BYTE *)v64;
            v167[0] = 0;
            v168 = -1;
            v77 = v64[6];
            if ((_DWORD)v77 != -1)
            {
              ((void (*)(unsigned int **, _BYTE *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v77])(&v179, v167, v64 + 2);
              v168 = v77;
            }
            v169 = 0;
            WebCore::IDBServer::MemoryObjectStore::lowestKeyWithRecordInRange((uint64_t)&v179, (const WebCore::IDBKeyRangeData *)v75, (uint64_t)&v164);
            if (v181)
            {
              WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>((uint64_t)&v170, *v75[12], (unsigned __int8 *)&v179);
              v78 = v181;
              if (v181 == -1)
              {
LABEL_112:
                v79 = (unsigned int *)v170;
                if (v170)
                {
                  do
                    v80 = __ldaxr(v79);
                  while (__stlxr(v80 + 1, v79));
                }
                v171 = (WTF *)v79;
                v172 = 0u;
                v173 = 0u;
                v81 = *((unsigned int *)a4 + 9);
                if ((_DWORD)v81 == *((_DWORD *)a4 + 8))
                {
                  v82 = WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v159, v81 + 1, (unint64_t)&v171);
                  v83 = *((_QWORD *)a4 + 3) + 40 * *((unsigned int *)a4 + 9);
                  v84 = *(_QWORD *)v82;
                  *(_QWORD *)v82 = 0;
                  *(_QWORD *)(v83 + 8) = 0;
                  *(_QWORD *)(v83 + 16) = 0;
                  *(_QWORD *)v83 = v84;
                  v85 = *(_QWORD *)(v82 + 8);
                  *(_QWORD *)(v82 + 8) = 0;
                  *(_QWORD *)(v83 + 8) = v85;
                  LODWORD(v85) = *(_DWORD *)(v82 + 16);
                  *(_DWORD *)(v82 + 16) = 0;
                  *(_DWORD *)(v83 + 16) = v85;
                  LODWORD(v85) = *(_DWORD *)(v82 + 20);
                  *(_DWORD *)(v82 + 20) = 0;
                  *(_DWORD *)(v83 + 20) = v85;
                  *(_QWORD *)(v83 + 24) = 0;
                  *(_QWORD *)(v83 + 32) = 0;
                  v86 = *(_QWORD *)(v82 + 24);
                  *(_QWORD *)(v82 + 24) = 0;
                  *(_QWORD *)(v83 + 24) = v86;
                  LODWORD(v86) = *(_DWORD *)(v82 + 32);
                  *(_DWORD *)(v82 + 32) = 0;
                  *(_DWORD *)(v83 + 32) = v86;
                  LODWORD(v86) = *(_DWORD *)(v82 + 36);
                  *(_DWORD *)(v82 + 36) = 0;
                  *(_DWORD *)(v83 + 36) = v86;
                }
                else
                {
                  v87 = *v159 + 40 * v81;
                  v171 = 0;
                  *(_QWORD *)(v87 + 8) = 0;
                  *(_QWORD *)(v87 + 16) = 0;
                  *(_QWORD *)v87 = v79;
                  v88 = v172;
                  *(_QWORD *)&v172 = 0;
                  *(_QWORD *)(v87 + 8) = v88;
                  LODWORD(v88) = DWORD2(v172);
                  DWORD2(v172) = 0;
                  *(_DWORD *)(v87 + 16) = v88;
                  LODWORD(v88) = HIDWORD(v172);
                  HIDWORD(v172) = 0;
                  *(_DWORD *)(v87 + 20) = v88;
                  *(_QWORD *)(v87 + 24) = 0;
                  *(_QWORD *)(v87 + 32) = 0;
                  v89 = v173;
                  *(_QWORD *)&v173 = 0;
                  *(_QWORD *)(v87 + 24) = v89;
                  LODWORD(v89) = DWORD2(v173);
                  DWORD2(v173) = 0;
                  *(_DWORD *)(v87 + 32) = v89;
                  LODWORD(v89) = HIDWORD(v173);
                  HIDWORD(v173) = 0;
                  *(_DWORD *)(v87 + 36) = v89;
                }
                ++*((_DWORD *)a4 + 9);
                if (HIDWORD(v173))
                {
                  v98 = (WTF::StringImpl **)v173;
                  v99 = 8 * HIDWORD(v173);
                  do
                  {
                    v100 = *v98;
                    *v98 = 0;
                    if (v100)
                    {
                      if (*(_DWORD *)v100 == 2)
                        WTF::StringImpl::destroy(v100, v51);
                      else
                        *(_DWORD *)v100 -= 2;
                    }
                    ++v98;
                    v99 -= 8;
                  }
                  while (v99);
                }
                v90 = (WTF *)v173;
                if ((_QWORD)v173)
                {
                  *(_QWORD *)&v173 = 0;
                  DWORD2(v173) = 0;
                  WTF::fastFree(v90, v51);
                }
                if (HIDWORD(v172))
                {
                  v101 = (WTF::StringImpl **)v172;
                  v102 = 8 * HIDWORD(v172);
                  do
                  {
                    v103 = *v101;
                    *v101 = 0;
                    if (v103)
                    {
                      if (*(_DWORD *)v103 == 2)
                        WTF::StringImpl::destroy(v103, v51);
                      else
                        *(_DWORD *)v103 -= 2;
                    }
                    ++v101;
                    v102 -= 8;
                  }
                  while (v102);
                }
                v91 = (WTF *)v172;
                if ((_QWORD)v172)
                {
                  *(_QWORD *)&v172 = 0;
                  DWORD2(v172) = 0;
                  WTF::fastFree(v91, v51);
                }
                v92 = v171;
                v171 = 0;
                if (v92)
                {
                  do
                  {
                    v93 = __ldaxr((unsigned int *)v92);
                    v94 = v93 - 1;
                  }
                  while (__stlxr(v94, (unsigned int *)v92));
                  if (!v94)
                  {
                    atomic_store(1u, (unsigned int *)v92);
                    v104 = (WTF *)*((_QWORD *)v92 + 1);
                    if (v104)
                    {
                      *((_QWORD *)v92 + 1) = 0;
                      *((_DWORD *)v92 + 4) = 0;
                      WTF::fastFree(v104, v51);
                    }
                    WTF::fastFree(v92, v51);
                  }
                }
                v95 = v170;
                v170 = 0;
                if (v95)
                {
                  do
                  {
                    v96 = __ldaxr((unsigned int *)v95);
                    v97 = v96 - 1;
                  }
                  while (__stlxr(v97, (unsigned int *)v95));
                  if (!v97)
                  {
                    atomic_store(1u, (unsigned int *)v95);
                    v105 = (WTF *)*((_QWORD *)v95 + 1);
                    if (v105)
                    {
                      *((_QWORD *)v95 + 1) = 0;
                      *((_DWORD *)v95 + 4) = 0;
                      WTF::fastFree(v105, v51);
                    }
                    WTF::fastFree(v95, v51);
                  }
                }
                if (v168 != -1)
                  ((void (*)(unsigned int **, _BYTE *))off_1E335A328[v168])(&v179, v167);
                v168 = -1;
                if ((_DWORD)v166 != -1)
                  ((void (*)(unsigned int **, __int128 *))off_1E335A328[v166])(&v179, &v165);
                goto LABEL_133;
              }
            }
            else
            {
              v78 = 0;
              v170 = 0;
            }
            ((void (*)(char *, uint64_t *))off_1E335A328[v78])(&v182, &v180);
            goto LABEL_112;
          }
LABEL_133:
          v64 += 8;
          if (v64 == v65)
          {
            v64 = (unsigned int *)v174;
            v49 = (HIDWORD(v175) + v46);
            if (HIDWORD(v175))
            {
              v106 = 32 * HIDWORD(v175);
              v107 = (_DWORD *)((char *)v174 + 24);
              do
              {
                v108 = *v107;
                if ((_DWORD)v108 != -1)
                  ((void (*)(unsigned int **, _DWORD *))off_1E335A328[v108])(&v164, v107 - 4);
                *v107 = -1;
                v107 += 8;
                v106 -= 32;
              }
              while (v106);
              v64 = (unsigned int *)v174;
            }
LABEL_162:
            if (v64)
            {
              v174 = 0;
              LODWORD(v175) = 0;
              WTF::fastFree((WTF *)v64, v51);
            }
            break;
          }
          continue;
        }
      }
LABEL_164:
      v48 = v178;
      v29 = v160;
      v47 = v157;
      if (v178 != -1)
        goto LABEL_165;
LABEL_166:
      v46 = v49;
      if (!v47)
        goto LABEL_167;
    }
  }
  v112 = *(_QWORD *)((char *)a3 + 76);
  v113 = *((unsigned __int8 *)a3 + 72);
  LOBYTE(v183) = *((_BYTE *)a3 + 72);
  LOBYTE(v188) = 0;
  v184 = 0u;
  v185 = 0u;
  v186[0] = 0;
  if (*(_BYTE *)(v19 + 56))
  {
    v187 = -1;
    v114 = *(unsigned int *)(v19 + 48);
    if ((_DWORD)v114 != -1)
    {
      ((void (*)(unsigned int **, _BYTE *, uint64_t))off_1E335A4A0[v114])(&v164, v186, v19 + 32);
      v187 = v114;
    }
    LOBYTE(v188) = 1;
  }
  WebCore::IDBGetAllResult::operator=((uint64_t)a4, &v183);
  if ((_BYTE)v188)
  {
    if (v187 != -1)
      ((void (*)(unsigned int **, _BYTE *))off_1E335A490[v187])(&v164, v186);
    v187 = -1;
  }
  if (HIDWORD(v185))
  {
    v116 = (WebCore::IDBValue *)v185;
    v117 = 40 * HIDWORD(v185);
    do
    {
      WebCore::IDBValue::~IDBValue(v116, v115);
      v116 = (WebCore::IDBValue *)(v118 + 40);
      v117 -= 40;
    }
    while (v117);
  }
  v119 = (WTF *)v185;
  if ((_QWORD)v185)
  {
    *(_QWORD *)&v185 = 0;
    DWORD2(v185) = 0;
    WTF::fastFree(v119, v115);
  }
  v120 = (WTF *)v184;
  if (HIDWORD(v184))
  {
    v121 = 32 * HIDWORD(v184);
    v122 = (_DWORD *)(v184 + 24);
    do
    {
      v123 = *v122;
      if ((_DWORD)v123 != -1)
        ((void (*)(unsigned int **, _DWORD *))off_1E335A328[v123])(&v164, v122 - 4);
      *v122 = -1;
      v122 += 8;
      v121 -= 32;
    }
    while (v121);
    v120 = (WTF *)v184;
  }
  if (v120)
  {
    *(_QWORD *)&v184 = 0;
    DWORD2(v184) = 0;
    WTF::fastFree(v120, v115);
  }
  if ((_DWORD)v112)
    v124 = (v112 & 0xFF00000000) == 0;
  else
    v124 = 1;
  if (v124)
    v125 = -1;
  else
    v125 = v112;
  LOBYTE(v183) = *(_BYTE *)a3;
  LOBYTE(v184) = 0;
  LODWORD(v185) = -1;
  v126 = *((unsigned int *)a3 + 6);
  if ((_DWORD)v126 != -1)
  {
    ((void (*)(unsigned int **, __int128 *, char *))off_1E335A370[v126])(&v164, &v184, (char *)a3 + 8);
    LODWORD(v185) = v126;
  }
  BYTE8(v185) = *((_BYTE *)a3 + 32);
  v186[0] = 0;
  v187 = -1;
  v127 = *((unsigned int *)a3 + 14);
  if ((_DWORD)v127 != -1)
  {
    ((void (*)(unsigned int **, _BYTE *, char *))off_1E335A370[v127])(&v164, v186, (char *)a3 + 40);
    v187 = v127;
  }
  v188 = *((_WORD *)a3 + 32);
  if (v113)
  {
    v128 = 0;
    v162 = (_QWORD *)((char *)a4 + 8);
    while (1)
    {
      if (v128 >= v125)
        goto LABEL_258;
      WebCore::IDBServer::MemoryObjectStore::lowestKeyWithRecordInRange((uint64_t)&v171, (const WebCore::IDBKeyRangeData *)v19, (uint64_t)&v183);
      v129 = v173;
      if (!(_DWORD)v173)
      {
        v130 = 0;
LABEL_232:
        ((void (*)(unsigned int **, __int128 *))off_1E335A328[v130])(&v164, &v172);
        goto LABEL_233;
      }
      LOBYTE(v183) = (_BYTE)v171;
      if ((_DWORD)v185 == -1)
      {
        if ((_DWORD)v173 != -1)
        {
LABEL_216:
          v164 = (unsigned int *)&v184;
          ((void (*)(unsigned int **, __int128 *, __int128 *))off_1E335A3B8[v173])(&v164, &v184, &v172);
        }
      }
      else
      {
        if ((_DWORD)v173 != -1)
          goto LABEL_216;
        ((void (*)(unsigned int **, __int128 *))off_1E335A328[v185])(&v164, &v184);
        LODWORD(v185) = -1;
      }
      LOBYTE(v188) = 1;
      v131 = *(unsigned int **)(v19 + 96);
      if (v131
        && (WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>((uint64_t)&v179, *(_QWORD *)v131, (unsigned __int8 *)&v171), (v131 = v179) != 0))
      {
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 + 1, v131));
        v133 = v179;
      }
      else
      {
        v133 = 0;
      }
      v164 = v131;
      v165 = 0u;
      v166 = 0u;
      WebCore::IDBGetAllResult::addValue((uint64_t)a4, (unint64_t)&v164);
      WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v164, v134);
      v179 = 0;
      if (v133)
      {
        do
        {
          v136 = __ldaxr(v133);
          v137 = v136 - 1;
        }
        while (__stlxr(v137, v133));
        if (!v137)
        {
          atomic_store(1u, v133);
          v146 = (WTF *)*((_QWORD *)v133 + 1);
          if (v146)
          {
            *((_QWORD *)v133 + 1) = 0;
            v133[4] = 0;
            WTF::fastFree(v146, v135);
          }
          WTF::fastFree((WTF *)v133, v135);
        }
      }
      v138 = *((unsigned int *)a4 + 5);
      if ((_DWORD)v138 == *((_DWORD *)a4 + 4))
      {
        v139 = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v162, v138 + 1, (unint64_t)&v171);
        v140 = *((_QWORD *)a4 + 1) + 32 * *((unsigned int *)a4 + 5);
        *(_BYTE *)v140 = *(_BYTE *)v139;
        *(_BYTE *)(v140 + 8) = 0;
        v141 = v140 + 8;
        *(_DWORD *)(v140 + 24) = -1;
        v142 = (_DWORD *)(v140 + 24);
        v143 = *(unsigned int *)(v139 + 24);
        if ((_DWORD)v143 == -1)
          goto LABEL_231;
        ((void (*)(unsigned int **, uint64_t, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v143])(&v164, v141, v139 + 8);
      }
      else
      {
        v144 = *v162 + 32 * v138;
        *(_BYTE *)v144 = (_BYTE)v171;
        *(_BYTE *)(v144 + 8) = 0;
        v145 = v144 + 8;
        *(_DWORD *)(v144 + 24) = -1;
        v142 = (_DWORD *)(v144 + 24);
        LODWORD(v143) = v173;
        if ((_DWORD)v173 == -1)
        {
          ++*((_DWORD *)a4 + 5);
          ++v128;
          goto LABEL_233;
        }
        ((void (*)(unsigned int **, uint64_t, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v173])(&v164, v145, &v172);
      }
      *v142 = v143;
LABEL_231:
      v130 = v173;
      ++*((_DWORD *)a4 + 5);
      ++v128;
      if ((_DWORD)v130 != -1)
        goto LABEL_232;
LABEL_233:
      if (!v129)
        goto LABEL_258;
    }
  }
  while (v113 < v125)
  {
    WebCore::IDBServer::MemoryObjectStore::lowestKeyWithRecordInRange((uint64_t)&v171, (const WebCore::IDBKeyRangeData *)v19, (uint64_t)&v183);
    v147 = v173;
    if (!(_DWORD)v173)
    {
      v148 = 0;
LABEL_254:
      ((void (*)(unsigned int **, __int128 *))off_1E335A328[v148])(&v164, &v172);
      goto LABEL_255;
    }
    LOBYTE(v183) = (_BYTE)v171;
    if ((_DWORD)v185 == -1)
    {
      if ((_DWORD)v173 != -1)
      {
LABEL_246:
        v164 = (unsigned int *)&v184;
        ((void (*)(unsigned int **, __int128 *, __int128 *))off_1E335A3B8[v173])(&v164, &v184, &v172);
      }
    }
    else
    {
      if ((_DWORD)v173 != -1)
        goto LABEL_246;
      ((void (*)(unsigned int **, __int128 *))off_1E335A328[v185])(&v164, &v184);
      LODWORD(v185) = -1;
    }
    LOBYTE(v188) = 1;
    v149 = *((unsigned int *)a4 + 5);
    if ((_DWORD)v149 == *((_DWORD *)a4 + 4))
    {
      v150 = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a4 + 8, v149 + 1, (unint64_t)&v171);
      v151 = *((_QWORD *)a4 + 1) + 32 * *((unsigned int *)a4 + 5);
      *(_BYTE *)v151 = *(_BYTE *)v150;
      *(_BYTE *)(v151 + 8) = 0;
      v152 = v151 + 8;
      *(_DWORD *)(v151 + 24) = -1;
      v153 = (_DWORD *)(v151 + 24);
      v154 = *(unsigned int *)(v150 + 24);
      if ((_DWORD)v154 == -1)
        goto LABEL_253;
      ((void (*)(unsigned int **, uint64_t, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v154])(&v164, v152, v150 + 8);
LABEL_252:
      *v153 = v154;
LABEL_253:
      v148 = v173;
      ++*((_DWORD *)a4 + 5);
      ++v113;
      if ((_DWORD)v148 != -1)
        goto LABEL_254;
LABEL_255:
      if (!v147)
        break;
    }
    else
    {
      v155 = *((_QWORD *)a4 + 1) + 32 * v149;
      *(_BYTE *)v155 = (_BYTE)v171;
      *(_BYTE *)(v155 + 8) = 0;
      v156 = v155 + 8;
      *(_DWORD *)(v155 + 24) = -1;
      v153 = (_DWORD *)(v155 + 24);
      LODWORD(v154) = v173;
      if ((_DWORD)v173 != -1)
      {
        ((void (*)(unsigned int **, uint64_t, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v173])(&v164, v156, &v172);
        goto LABEL_252;
      }
      ++*((_DWORD *)a4 + 5);
      ++v113;
      if (!v147)
        break;
    }
  }
LABEL_258:
  if (v187 != -1)
    ((void (*)(unsigned int **, _BYTE *))off_1E335A328[v187])(&v164, v186);
  v187 = -1;
  if ((_DWORD)v185 != -1)
LABEL_261:
    ((void (*)(unsigned int **, __int128 *))off_1E335A328[v185])(&v164, &v184);
LABEL_262:
  *(_WORD *)a5 = 0;
LABEL_263:
  *(_QWORD *)(a5 + 8) = 0;
}

void WebCore::IDBServer::MemoryIDBBackingStore::getIndexRecord(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  BOOL v37;
  BOOL v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  WTF *v60;
  WTF::StringImpl *v61[6];
  _QWORD v62[2];
  int v63;
  char v64;
  uint64_t v65;
  int v66;
  char v67[16];
  int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  _BYTE v74[16];
  int v75;
  char v76;
  _BYTE v77[16];
  int v78;
  __int16 v79;
  unsigned int *v80;
  unsigned __int8 v81[8];
  _QWORD v82[2];
  int v83;
  _BYTE v84[9];

  v10 = *(_QWORD *)(a1 + 96);
  if (!v10)
    goto LABEL_15;
  if (!WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(v10, *a2, a2[1]))goto LABEL_15;
  v16 = *(_QWORD *)(a1 + 104);
  if (!v16)
    goto LABEL_15;
  v17 = *(_DWORD *)(v16 - 8);
  v18 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = *(_QWORD *)(v16 + 16 * v21);
  if (v22 == a3)
  {
LABEL_8:
    v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
    if (!v24)
      goto LABEL_15;
    v25 = *(_QWORD *)(v24 + 112);
    if (v25)
    {
      v26 = *(_DWORD *)(v25 - 8);
      v27 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
      v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
      v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
      v30 = v26 & ((v29 >> 31) ^ v29);
      v31 = *(_QWORD *)(v25 + 16 * v30);
      if (v31 == a4)
      {
LABEL_14:
        v33 = *(_QWORD *)(v25 + 16 * v30 + 8);
        goto LABEL_20;
      }
      v32 = 1;
      while (v31)
      {
        v30 = ((_DWORD)v30 + v32) & v26;
        v31 = *(_QWORD *)(v25 + 16 * v30);
        ++v32;
        if (v31 == a4)
          goto LABEL_14;
      }
    }
    v33 = 0;
LABEL_20:
    if (!*(_QWORD *)(v33 + 72))
    {
      v62[0] = 0;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v66 = 0;
      v67[0] = 0;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      memset(v61, 0, 41);
LABEL_53:
      WebCore::IDBGetResult::operator=(a7, (uint64_t)v61);
      WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v61, v44);
      *(_WORD *)a8 = 0;
      goto LABEL_54;
    }
    v81[0] = 0;
    v82[0] = 0;
    v83 = 0;
    if (*(_DWORD *)(a6 + 24) | *(_DWORD *)(a6 + 56))
      v37 = *(_BYTE *)(a6 + 64) == 0;
    else
      v37 = 0;
    v38 = v37 && *(_BYTE *)(a6 + 65) == 0;
    if (v38
      && WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(a6 + 32))
      && WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)a6)
      && !WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)a6, (const WebCore::IDBKeyData *)(a6 + 32), v39))
    {
      v81[0] = *(_BYTE *)a6;
      v46 = *(unsigned int *)(a6 + 24);
      if ((_DWORD)v46 == -1)
      {
        v83 = -1;
LABEL_41:
        v40 = WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(**(_QWORD **)(v33 + 72), v81);
        if (v40)
        {
          v41 = *(_QWORD *)v40;
          if (*(_BYTE *)(v40 + 8))
          {
            if (!v41)
              goto LABEL_50;
LABEL_47:
            if ((a5 & 1) == 0)
            {
              memset(v61, 0, 40);
              LOBYTE(v61[5]) = *(_BYTE *)v41;
              LOBYTE(v62[0]) = 0;
              v63 = -1;
              v45 = *(unsigned int *)(v41 + 24);
              if ((_DWORD)v45 != -1)
              {
                ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E335A370[v45])(&v73, v62, v41 + 8);
                v63 = v45;
              }
              v64 = 0;
              v65 = 0;
              v66 = 0;
              v67[0] = 0;
              v69 = 0;
              v70 = 0;
              v71 = 0;
              v72 = 1;
              goto LABEL_51;
            }
            v42 = *(_QWORD *)(v33 + 64);
            if (v42)
              v43 = *(uint64_t ***)(v42 + 8);
            else
              v43 = 0;
            LOBYTE(v73) = *(_BYTE *)v41;
            v74[0] = 0;
            v75 = -1;
            v47 = *(unsigned int *)(v41 + 24);
            if ((_DWORD)v47 != -1)
            {
              ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v47])(v61, v74, v41 + 8);
              v75 = v47;
            }
            v76 = *(_BYTE *)v41;
            v77[0] = 0;
            v78 = -1;
            v48 = *(unsigned int *)(v41 + 24);
            if ((_DWORD)v48 != -1)
            {
              ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v48])(v61, v77, v41 + 8);
              v78 = v48;
            }
            v79 = 0;
            WebCore::IDBServer::MemoryObjectStore::lowestKeyWithRecordInRange((uint64_t)v61, (const WebCore::IDBKeyRangeData *)v43, (uint64_t)&v73);
            v49 = (int)v61[3];
            if (LODWORD(v61[3]))
            {
              WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>((uint64_t)&v80, *v43[12], (unsigned __int8 *)v61);
              v49 = (int)v61[3];
              if (LODWORD(v61[3]) == -1)
                goto LABEL_70;
            }
            else
            {
              v80 = 0;
            }
            ((void (*)(_BYTE *, WTF::StringImpl **))off_1E335A328[v49])(v84, &v61[1]);
LABEL_70:
            v51 = *(_QWORD *)(v33 + 64);
            if (v51)
              v52 = *(_QWORD *)(v51 + 8);
            else
              v52 = 0;
            v53 = v80;
            if (v80)
            {
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 + 1, v53));
            }
            v61[0] = (WTF::StringImpl *)v53;
            memset(&v61[1], 0, 32);
            LOBYTE(v61[5]) = *(_BYTE *)v41;
            LOBYTE(v62[0]) = 0;
            v63 = -1;
            v55 = *(unsigned int *)(v41 + 24);
            if ((_DWORD)v55 != -1)
            {
              ((void (*)(_BYTE *, _QWORD *, uint64_t))off_1E335A370[v55])(v84, v62, v41 + 8);
              v63 = v55;
            }
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v67[0] = 0;
            v69 = 0;
            if (*(_BYTE *)(v52 + 56))
            {
              v68 = -1;
              v56 = *(unsigned int *)(v52 + 48);
              if ((_DWORD)v56 != -1)
              {
                ((void (*)(_BYTE *, char *, uint64_t))off_1E335A4A0[v56])(v84, v67, v52 + 32);
                v68 = v56;
              }
              v69 = 1;
            }
            v70 = 0;
            v71 = 0;
            v72 = 1;
            v57 = v80;
            v80 = 0;
            if (v57)
            {
              do
              {
                v58 = __ldaxr(v57);
                v59 = v58 - 1;
              }
              while (__stlxr(v59, v57));
              if (!v59)
              {
                atomic_store(1u, v57);
                v60 = (WTF *)*((_QWORD *)v57 + 1);
                if (v60)
                {
                  *((_QWORD *)v57 + 1) = 0;
                  v57[4] = 0;
                  WTF::fastFree(v60, v50);
                }
                WTF::fastFree((WTF *)v57, v50);
              }
            }
            if (v78 != -1)
              ((void (*)(_BYTE *, _BYTE *))off_1E335A328[v78])(v84, v77);
            v78 = -1;
            if (v75 != -1)
              ((void (*)(_BYTE *, _BYTE *))off_1E335A328[v75])(v84, v74);
            goto LABEL_51;
          }
          if (*(_QWORD *)(v41 + 16))
          {
            v41 = *(_QWORD *)v41 + 32;
            goto LABEL_47;
          }
        }
LABEL_50:
        v62[0] = 0;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67[0] = 0;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = 0;
        memset(v61, 0, 41);
LABEL_51:
        if (v83 != -1)
          ((void (*)(_QWORD **, _QWORD *))off_1E335A328[v83])(&v73, v82);
        goto LABEL_53;
      }
      v61[0] = (WTF::StringImpl *)v82;
      ((void (*)(WTF::StringImpl **, _QWORD *, uint64_t))off_1E335A3B8[v46])(v61, v82, a6 + 8);
LABEL_40:
      if (!v83)
        goto LABEL_50;
      goto LABEL_41;
    }
    WebCore::IDBServer::IndexValueStore::lowestKeyWithRecordInRange((WebCore::IDBServer::IndexValueStore *)v61, *(const WebCore::IDBKeyRangeData **)(v33 + 72), a6);
    v81[0] = v61[0];
    if (v83 == -1)
    {
      if (LODWORD(v61[3]) == -1)
        goto LABEL_40;
    }
    else if (LODWORD(v61[3]) == -1)
    {
      ((void (*)(_QWORD **, _QWORD *))off_1E335A328[v83])(&v73, v82);
      v83 = -1;
      goto LABEL_38;
    }
    v73 = v82;
    ((void (*)(_QWORD **, _QWORD *, WTF::StringImpl **))off_1E335A448[LODWORD(v61[3])])(&v73, v82, &v61[1]);
LABEL_38:
    if (LODWORD(v61[3]) != -1)
      ((void (*)(_QWORD **, WTF::StringImpl **))off_1E335A328[LODWORD(v61[3])])(&v73, &v61[1]);
    goto LABEL_40;
  }
  v23 = 1;
  while (v22)
  {
    v21 = ((_DWORD)v21 + v23) & v17;
    v22 = *(_QWORD *)(v16 + 16 * v21);
    ++v23;
    if (v22 == a3)
      goto LABEL_8;
  }
LABEL_15:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a8 = 280;
  v35 = v61[0];
  if (!v61[0])
  {
LABEL_54:
    *(_QWORD *)(a8 + 8) = 0;
    return;
  }
  v36 = *(_DWORD *)v61[0];
  *(_DWORD *)v61[0] += 2;
  *(_QWORD *)(a8 + 8) = v35;
  v61[0] = 0;
  if (v36)
    *(_DWORD *)v35 = v36;
  else
    WTF::StringImpl::destroy(v35, v34);
}

WTF::StringImpl *WebCore::IDBServer::MemoryIDBBackingStore::getCount@<X0>(WebCore::IDBServer::MemoryIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, const WebCore::IDBKeyRangeData *a3@<X4>, unint64_t *a4@<X5>, uint64_t a5@<X2>, uint64_t a6@<X3>, uint64_t a7@<X8>)
{
  uint64_t v9;
  WTF::StringImpl *result;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const WebCore::IDBKeyRangeData *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned __int8 v48[8];
  _BYTE v49[16];
  unsigned int v50;
  WTF::StringImpl *v51;
  _BYTE v52[16];
  int v53;
  char v54;
  _BYTE v55[16];
  int v56;
  __int16 v57;
  _BYTE *v58;

  v9 = *((_QWORD *)this + 12);
  if (!v9)
    goto LABEL_16;
  result = (WTF::StringImpl *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(v9, *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (!result)
    goto LABEL_16;
  v15 = *((_QWORD *)this + 13);
  if (!v15)
    goto LABEL_16;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(_QWORD *)(v15 + 16 * v20);
  if (v21 == a5)
  {
LABEL_8:
    v23 = *(const WebCore::IDBKeyRangeData **)(v15 + 16 * v20 + 8);
    if (!v23)
      goto LABEL_16;
    if (a6)
    {
      v24 = *((_QWORD *)v23 + 14);
      if (v24)
      {
        v25 = *(_DWORD *)(v24 - 8);
        v26 = (~(a6 << 32) + a6) ^ ((unint64_t)(~(a6 << 32) + a6) >> 22);
        v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
        v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
        v29 = v25 & ((v28 >> 31) ^ v28);
        v30 = *(_QWORD *)(v24 + 16 * v29);
        if (v30 == a6)
        {
LABEL_15:
          v32 = *(_QWORD *)(v24 + 16 * v29 + 8);
          goto LABEL_42;
        }
        v31 = 1;
        while (v30)
        {
          v29 = ((_DWORD)v29 + v31) & v25;
          v30 = *(_QWORD *)(v24 + 16 * v29);
          ++v31;
          if (v30 == a6)
            goto LABEL_15;
        }
      }
      v32 = 0;
LABEL_42:
      if (*(_QWORD *)(v32 + 72))
      {
        LOBYTE(v51) = *(_BYTE *)a3;
        v52[0] = 0;
        v53 = -1;
        v41 = *((unsigned int *)a3 + 6);
        if ((_DWORD)v41 != -1)
        {
          ((void (*)(unsigned __int8 *, _BYTE *, char *))off_1E335A370[v41])(v48, v52, (char *)a3 + 8);
          v53 = v41;
        }
        v54 = *((_BYTE *)a3 + 32);
        v55[0] = 0;
        v56 = -1;
        v42 = *((unsigned int *)a3 + 14);
        if ((_DWORD)v42 != -1)
        {
          ((void (*)(unsigned __int8 *, _BYTE *, char *))off_1E335A370[v42])(v48, v55, (char *)a3 + 40);
          v56 = v42;
        }
        v37 = 0;
        v57 = *((_WORD *)a3 + 32);
        while (1)
        {
          WebCore::IDBServer::IndexValueStore::lowestKeyWithRecordInRange((WebCore::IDBServer::IndexValueStore *)v48, *(const WebCore::IDBKeyRangeData **)(v32 + 72), (uint64_t)&v51);
          if (!v50)
          {
            v45 = 0;
            v46 = 3;
LABEL_61:
            result = (WTF::StringImpl *)((uint64_t (*)(_BYTE **, _BYTE *))off_1E335A328[v45])(&v58, v49);
            v47 = v46;
            goto LABEL_62;
          }
          result = (WTF::StringImpl *)WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(**(_QWORD **)(v32 + 72), v48);
          if (result)
          {
            v43 = *(_QWORD *)result;
            if (*((_BYTE *)result + 8))
              v44 = v43 != 0;
            else
              v44 = *(_QWORD *)(v43 + 16);
          }
          else
          {
            v44 = 0;
          }
          v37 += v44;
          LOBYTE(v51) = v48[0];
          if (v53 == -1)
          {
            if (v50 == -1)
            {
              v47 = 0;
              LOBYTE(v57) = 1;
              goto LABEL_62;
            }
          }
          else if (v50 == -1)
          {
            result = (WTF::StringImpl *)((uint64_t (*)(_BYTE **, _BYTE *))off_1E335A328[v53])(&v58, v52);
            v53 = -1;
            goto LABEL_60;
          }
          v58 = v52;
          result = (WTF::StringImpl *)((uint64_t (*)(_BYTE **, _BYTE *, _BYTE *))off_1E335A3B8[v50])(&v58, v52, v49);
LABEL_60:
          v46 = 0;
          v47 = 0;
          v45 = v50;
          LOBYTE(v57) = 1;
          if (v50 != -1)
            goto LABEL_61;
LABEL_62:
          if (v47)
            goto LABEL_37;
        }
      }
LABEL_65:
      v37 = 0;
      goto LABEL_66;
    }
    if (!*((_QWORD *)v23 + 12))
      goto LABEL_65;
    LOBYTE(v51) = *(_BYTE *)a3;
    v52[0] = 0;
    v53 = -1;
    v35 = *((unsigned int *)a3 + 6);
    if ((_DWORD)v35 != -1)
    {
      ((void (*)(unsigned __int8 *, _BYTE *, char *))off_1E335A370[v35])(v48, v52, (char *)a3 + 8);
      v53 = v35;
    }
    v54 = *((_BYTE *)a3 + 32);
    v55[0] = 0;
    v56 = -1;
    v36 = *((unsigned int *)a3 + 14);
    if ((_DWORD)v36 != -1)
    {
      ((void (*)(unsigned __int8 *, _BYTE *, char *))off_1E335A370[v36])(v48, v55, (char *)a3 + 40);
      v56 = v36;
    }
    v37 = 0;
    v57 = *((_WORD *)a3 + 32);
    while (1)
    {
      result = (WTF::StringImpl *)WebCore::IDBServer::MemoryObjectStore::lowestKeyWithRecordInRange((uint64_t)v48, v23, (uint64_t)&v51);
      if (!v50)
      {
        v38 = 0;
        v39 = 3;
LABEL_35:
        result = (WTF::StringImpl *)((uint64_t (*)(_BYTE **, _BYTE *))off_1E335A328[v38])(&v58, v49);
        v40 = v39;
        goto LABEL_36;
      }
      LOBYTE(v51) = v48[0];
      if (v53 == -1)
      {
        if (v50 == -1)
          goto LABEL_34;
      }
      else if (v50 == -1)
      {
        result = (WTF::StringImpl *)((uint64_t (*)(_BYTE **, _BYTE *))off_1E335A328[v53])(&v58, v52);
        v53 = -1;
        goto LABEL_34;
      }
      v58 = v52;
      result = (WTF::StringImpl *)((uint64_t (*)(_BYTE **, _BYTE *, _BYTE *))off_1E335A3B8[v50])(&v58, v52, v49);
LABEL_34:
      v39 = 0;
      v40 = 0;
      ++v37;
      LOBYTE(v57) = 1;
      v38 = v50;
      if (v50 != -1)
        goto LABEL_35;
LABEL_36:
      if (v40)
      {
LABEL_37:
        if (v56 != -1)
          result = (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, _BYTE *))off_1E335A328[v56])(v48, v55);
        v56 = -1;
        if (v53 != -1)
          result = (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, _BYTE *))off_1E335A328[v53])(v48, v52);
LABEL_66:
        *a4 = v37;
        *(_WORD *)a7 = 0;
LABEL_67:
        *(_QWORD *)(a7 + 8) = 0;
        return result;
      }
    }
  }
  v22 = 1;
  while (v21)
  {
    v20 = ((_DWORD)v20 + v22) & v16;
    v21 = *(_QWORD *)(v15 + 16 * v20);
    ++v22;
    if (v21 == a5)
      goto LABEL_8;
  }
LABEL_16:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a7 = 280;
  result = v51;
  if (!v51)
    goto LABEL_67;
  v34 = *(_DWORD *)v51;
  *(_DWORD *)v51 += 2;
  *(_QWORD *)(a7 + 8) = result;
  v51 = 0;
  if (!v34)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
  *(_DWORD *)result = v34;
  return result;
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::generateKeyNumber@<X0>(uint64_t this@<X0>, unint64_t *a2@<X3>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;

  v6 = *(_QWORD *)(this + 104);
  if (!v6)
    goto LABEL_15;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(_QWORD *)(v6 + 16 * v11);
  if (v12 != a3)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(_QWORD *)(v6 + 16 * v11);
      ++v13;
      if (v12 == a3)
        goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_15:
    this = 484;
    __break(0xC471u);
    return this;
  }
  v15 = *(_QWORD *)(v14 + 88);
  *a2 = v15;
  if (v15 < 0x20000000000001)
  {
    *(_QWORD *)(v14 + 88) = v15 + 1;
    *(_WORD *)a4 = 0;
    goto LABEL_12;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a4 = 281;
  this = (uint64_t)v18;
  if (!v18)
  {
LABEL_12:
    *(_QWORD *)(a4 + 8) = 0;
    return this;
  }
  v17 = *(_DWORD *)v18;
  *(_DWORD *)v18 += 2;
  *(_QWORD *)(a4 + 8) = v18;
  if (!v17)
    return WTF::StringImpl::destroy(v18, v16);
  *(_DWORD *)v18 = v17;
  return this;
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::revertGeneratedKeyNumber@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(result + 104);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        *(_QWORD *)(v12 + 88) = a3;
        *(_WORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        return result;
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(_QWORD *)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  result = 503;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::maybeUpdateKeyGeneratorNumber@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(result + 104);
  if (!v4)
    goto LABEL_13;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = *(_QWORD *)(v4 + 16 * v9);
  if (v10 != a2)
  {
    v11 = 1;
    while (v10)
    {
      v9 = ((_DWORD)v9 + v11) & v5;
      v10 = *(_QWORD *)(v4 + 16 * v9);
      ++v11;
      if (v10 == a2)
        goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_6:
  v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
  if (!v12)
  {
LABEL_13:
    result = 518;
    __break(0xC471u);
    return result;
  }
  if ((double)*(unint64_t *)(v12 + 88) <= a4)
  {
    if (a4 < 9.00719925e15)
      v13 = (unint64_t)a4 + 1;
    else
      v13 = 0x20000000000001;
    *(_QWORD *)(v12 + 88) = v13;
  }
  *(_WORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return result;
}

WTF::StringImpl *WebCore::IDBServer::MemoryIDBBackingStore::openCursor@<X0>(WebCore::IDBServer::MemoryIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, const WebCore::IDBCursorInfo *a3@<X2>, WebCore::IDBGetResult *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *result;
  int v77;
  int v78;
  unint64_t *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  WebCore::IDBServer::MemoryCursor *v88;
  const WTF::String *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  int v95;
  unint64_t *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  WebCore::IDBServer::MemoryCursor *v105;
  _OWORD *v106;
  _QWORD *v107;
  WTF::StringImpl *v108;
  WebCore::IDBServer::IndexValueStore *v109;
  unsigned int v110;
  __int128 v111;
  __int128 v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  BOOL v116;
  const WebCore::IDBKeyData *v117;
  const WTF::String *v118;
  int v119;
  const WTF::String *v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  WTF::StringImpl *v136[2];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;

  v7 = *((_QWORD *)this + 12);
  if (!v7
    || !WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(v7, *(_QWORD *)a2, *((_QWORD *)a2 + 1)))
  {
    goto LABEL_41;
  }
  v10 = *((_QWORD *)this + 13);
  if (*((_BYTE *)a3 + 120))
  {
    if (!v10)
      goto LABEL_41;
    v11 = *((_QWORD *)a3 + 5);
    v12 = *(_DWORD *)(v10 - 8);
    v13 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(_QWORD *)(v10 + 16 * v16);
    if (v17 != v11)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(_QWORD *)(v10 + 16 * v16);
        ++v18;
        if (v17 == v11)
          goto LABEL_9;
      }
      goto LABEL_41;
    }
LABEL_9:
    v19 = *(_QWORD *)(v10 + 16 * v16 + 8);
    if (!v19)
      goto LABEL_41;
    v21 = (uint64_t *)(v19 + 128);
    v20 = *(_QWORD *)(v19 + 128);
    v22 = *(_QWORD *)a3;
    v23 = *((_QWORD *)a3 + 1);
    if (v20
      || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)(v19 + 128), 8u, 0), (v20 = *v21) != 0))
    {
      v24 = *(_DWORD *)(v20 - 8);
    }
    else
    {
      v24 = 0;
    }
    v25 = (v22 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v22 - 1640531527) << 16) ^ ((unsigned __int16)v22
                                                                                               - 1640531527);
    v26 = (v22 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v22) + (v25 >> 11)) << 16) ^ (v25 + WORD2(v22) + (v25 >> 11));
    v27 = (v23 >> 5) & 0x7FFF800 ^ ((v26 + (unsigned __int16)v23 + (v26 >> 11)) << 16) ^ (v26 + (unsigned __int16)v23 + (v26 >> 11));
    v28 = (v23 >> 37) & 0x7FFF800 ^ ((v27 + WORD2(v23) + (v27 >> 11)) << 16) ^ (v27 + WORD2(v23) + (v27 >> 11));
    v29 = (v28 + (v28 >> 11)) ^ (8 * (v28 + (v28 >> 11)));
    v30 = (v29 + (v29 >> 5)) ^ (4 * (v29 + (v29 >> 5)));
    v31 = (v30 + (v30 >> 15)) ^ ((v30 + (v30 >> 15)) << 10);
    if (!v31)
      v31 = 0x800000;
    v32 = v24 & v31;
    v33 = (unint64_t *)(v20 + 24 * (v24 & v31));
    v35 = *v33;
    v34 = v33[1];
    if (*(_OWORD *)v33 != 0)
    {
      v37 = 0;
      v78 = 1;
      while (1)
      {
        v79 = v37;
        v37 = v33;
        if (v35 != -1)
        {
          v37 = v79;
          if (v35 == v22 && v34 == v23)
            goto LABEL_41;
        }
        v32 = (v32 + v78) & v24;
        v33 = (unint64_t *)(v20 + 24 * v32);
        v35 = *v33;
        v34 = v33[1];
        ++v78;
        if (*(_OWORD *)v33 == 0)
        {
          if (!v37)
            break;
          *v37 = 0;
          v37[1] = 0;
          v37[2] = 0;
          --*(_DWORD *)(*v21 - 16);
          *v37 = v22;
          v37[1] = v23;
          v37[2] = 0;
          goto LABEL_52;
        }
      }
    }
    v36 = v33[2];
    *v33 = v22;
    v33[1] = v23;
    v33[2] = 0;
    if (v36)
      (*(void (**)(unint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = v33;
LABEL_52:
    v80 = *v21;
    if (*v21)
      v81 = *(_DWORD *)(v80 - 12) + 1;
    else
      v81 = 1;
    *(_DWORD *)(v80 - 12) = v81;
    v82 = *v21;
    if (*v21)
      v83 = *(_DWORD *)(v82 - 12);
    else
      v83 = 0;
    v84 = (*(_DWORD *)(v82 - 16) + v83);
    v85 = *(unsigned int *)(v82 - 4);
    if (v85 > 0x400)
    {
      if (v85 > 2 * v84)
        goto LABEL_66;
    }
    else
    {
      if (3 * v85 > 4 * v84)
      {
LABEL_66:
        v87 = WTF::fastMalloc((WTF *)0x108);
        v88 = WebCore::IDBServer::MemoryCursor::MemoryCursor((WebCore::IDBServer::MemoryCursor *)v87, a3);
        *(_QWORD *)v88 = off_1E335A308;
        *((_QWORD *)v88 + 17) = v19;
        *((_BYTE *)v88 + 144) = *((_BYTE *)a3 + 48);
        *((_BYTE *)v88 + 152) = 0;
        *((_DWORD *)v88 + 42) = -1;
        v90 = *((unsigned int *)a3 + 18);
        if ((_DWORD)v90 != -1)
        {
          ((void (*)(WTF::StringImpl **, char *, char *))off_1E335A370[v90])(v136, (char *)v88 + 152, (char *)a3 + 56);
          *(_DWORD *)(v87 + 168) = v90;
        }
        v91 = *((_BYTE *)a3 + 80);
        *(_BYTE *)(v87 + 184) = 0;
        *(_BYTE *)(v87 + 176) = v91;
        *(_DWORD *)(v87 + 200) = -1;
        v92 = *((unsigned int *)a3 + 26);
        if ((_DWORD)v92 != -1)
        {
          ((void (*)(WTF::StringImpl **))off_1E335A370[v92])(v136);
          *(_DWORD *)(v87 + 200) = v92;
        }
        *(_WORD *)(v87 + 208) = *((_WORD *)a3 + 56);
        *(_BYTE *)(v87 + 216) = 0;
        *(_BYTE *)(v87 + 224) = 0;
        *(_BYTE *)(v87 + 232) = 0;
        *(_QWORD *)(v87 + 240) = 0;
        *(_DWORD *)(v87 + 256) = 0;
        v93 = *(_QWORD **)(v19 + 104);
        if (v93)
          WebCore::IDBServer::MemoryObjectStoreCursor::setFirstInRemainingRange(v87, v93, v89);
        v94 = v37[2];
        v37[2] = v87;
        if (v94)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v94 + 8))(v94);
          v87 = v37[2];
          if (!v87)
            goto LABEL_41;
        }
        result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WebCore::IDBGetResult *))(*(_QWORD *)v87 + 16))(v87, a4);
LABEL_75:
        *(_WORD *)a5 = 0;
        goto LABEL_76;
      }
      if (!(_DWORD)v85)
      {
        v86 = 8;
        goto LABEL_65;
      }
    }
    v86 = (_DWORD)v85 << (6 * *(_DWORD *)(v82 - 12) >= (2 * v85));
LABEL_65:
    v37 = (unint64_t *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)(v19 + 128), v86, v37);
    goto LABEL_66;
  }
  if (!v10)
    goto LABEL_41;
  v38 = *((_QWORD *)a3 + 4);
  v39 = *(_DWORD *)(v10 - 8);
  v40 = (v38 + ~(v38 << 32)) ^ ((unint64_t)(v38 + ~(v38 << 32)) >> 22);
  v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
  v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
  v43 = v39 & ((v42 >> 31) ^ v42);
  v44 = *(_QWORD *)(v10 + 16 * v43);
  if (v44 == v38)
  {
LABEL_25:
    v46 = *(_QWORD *)(v10 + 16 * v43 + 8);
    if (!v46)
      goto LABEL_41;
    v47 = *(_QWORD *)(v46 + 112);
    if (!v47)
      goto LABEL_41;
    v48 = *((_QWORD *)a3 + 5);
    v49 = *(_DWORD *)(v47 - 8);
    v50 = (v48 + ~(v48 << 32)) ^ ((unint64_t)(v48 + ~(v48 << 32)) >> 22);
    v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
    v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
    v53 = v49 & ((v52 >> 31) ^ v52);
    v54 = *(_QWORD *)(v47 + 16 * v53);
    if (v54 != v48)
    {
      v55 = 1;
      while (v54)
      {
        v53 = ((_DWORD)v53 + v55) & v49;
        v54 = *(_QWORD *)(v47 + 16 * v53);
        ++v55;
        if (v54 == v48)
          goto LABEL_31;
      }
      goto LABEL_41;
    }
LABEL_31:
    v56 = *(_QWORD *)(v47 + 16 * v53 + 8);
    if (!v56)
      goto LABEL_41;
    v58 = (uint64_t *)(v56 + 80);
    v57 = *(_QWORD *)(v56 + 80);
    v59 = *(_QWORD *)a3;
    v60 = *((_QWORD *)a3 + 1);
    if (v57
      || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)(v56 + 80), 8u, 0), (v57 = *v58) != 0))
    {
      v61 = *(_DWORD *)(v57 - 8);
    }
    else
    {
      v61 = 0;
    }
    v62 = (v59 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v59 - 1640531527) << 16) ^ ((unsigned __int16)v59
                                                                                               - 1640531527);
    v63 = (v59 >> 37) & 0x7FFF800 ^ ((v62 + WORD2(v59) + (v62 >> 11)) << 16) ^ (v62 + WORD2(v59) + (v62 >> 11));
    v64 = (v60 >> 5) & 0x7FFF800 ^ ((v63 + (unsigned __int16)v60 + (v63 >> 11)) << 16) ^ (v63 + (unsigned __int16)v60 + (v63 >> 11));
    v65 = (v60 >> 37) & 0x7FFF800 ^ ((v64 + WORD2(v60) + (v64 >> 11)) << 16) ^ (v64 + WORD2(v60) + (v64 >> 11));
    v66 = (v65 + (v65 >> 11)) ^ (8 * (v65 + (v65 >> 11)));
    v67 = (v66 + (v66 >> 5)) ^ (4 * (v66 + (v66 >> 5)));
    v68 = (v67 + (v67 >> 15)) ^ ((v67 + (v67 >> 15)) << 10);
    if (!v68)
      v68 = 0x800000;
    v69 = v61 & v68;
    v70 = (unint64_t *)(v57 + 24 * (v61 & v68));
    v72 = *v70;
    v71 = v70[1];
    if (*(_OWORD *)v70 != 0)
    {
      v74 = 0;
      v95 = 1;
      while (1)
      {
        v96 = v74;
        v74 = v70;
        if (v72 != -1)
        {
          v74 = v96;
          if (v72 == v59 && v71 == v60)
            goto LABEL_41;
        }
        v69 = (v69 + v95) & v61;
        v70 = (unint64_t *)(v57 + 24 * v69);
        v72 = *v70;
        v71 = v70[1];
        ++v95;
        if (*(_OWORD *)v70 == 0)
        {
          if (!v74)
            break;
          *v74 = 0;
          v74[1] = 0;
          v74[2] = 0;
          --*(_DWORD *)(*v58 - 16);
          *v74 = v59;
          v74[1] = v60;
          v74[2] = 0;
          goto LABEL_87;
        }
      }
    }
    v73 = v70[2];
    *v70 = v59;
    v70[1] = v60;
    v70[2] = 0;
    if (v73)
      (*(void (**)(unint64_t))(*(_QWORD *)v73 + 8))(v73);
    v74 = v70;
LABEL_87:
    v97 = *v58;
    if (*v58)
      v98 = *(_DWORD *)(v97 - 12) + 1;
    else
      v98 = 1;
    *(_DWORD *)(v97 - 12) = v98;
    v99 = *v58;
    if (*v58)
      v100 = *(_DWORD *)(v99 - 12);
    else
      v100 = 0;
    v101 = (*(_DWORD *)(v99 - 16) + v100);
    v102 = *(unsigned int *)(v99 - 4);
    if (v102 > 0x400)
    {
      if (v102 > 2 * v101)
      {
LABEL_100:
        v104 = WTF::fastMalloc((WTF *)0x120);
        v105 = WebCore::IDBServer::MemoryCursor::MemoryCursor((WebCore::IDBServer::MemoryCursor *)v104, a3);
        *(_QWORD *)v105 = off_1E335A2D8;
        *((_QWORD *)v105 + 17) = v56;
        *((_QWORD *)v105 + 18) = 0;
        v106 = (_OWORD *)((char *)v105 + 144);
        *((_BYTE *)v105 + 152) = 1;
        *((_DWORD *)v105 + 47) = 0;
        *(_OWORD *)((char *)v105 + 172) = 0u;
        *(_OWORD *)((char *)v105 + 156) = 0u;
        *((_QWORD *)v105 + 25) = 0;
        v107 = (_QWORD *)((char *)v105 + 200);
        *((_BYTE *)v105 + 192) = 1;
        *((_QWORD *)v105 + 29) = 0;
        v108 = (WebCore::IDBServer::MemoryCursor *)((char *)v105 + 232);
        *((_DWORD *)v105 + 62) = 0;
        *((_BYTE *)v105 + 256) = 0;
        *((_QWORD *)v105 + 33) = 0;
        *((_DWORD *)v105 + 70) = 0;
        *((_QWORD *)v105 + 26) = 0;
        *((_QWORD *)v105 + 27) = 0;
        *((_BYTE *)v105 + 224) = 0;
        v109 = *(WebCore::IDBServer::IndexValueStore **)(v56 + 72);
        if (!v109)
          goto LABEL_123;
        v110 = *(unsigned __int8 *)(v104 + 129);
        if (v110 > 1)
          WebCore::IDBServer::IndexValueStore::reverseFind((uint64_t)v136, v109, (unsigned int *)(v104 + 88), (v110 & 0xFFFFFFFD) == 1, *(_BYTE *)(v104 + 121));
        else
          WebCore::IDBServer::IndexValueStore::find((WebCore::IDBServer::IndexValueStore *)v136, v109, (unsigned int *)(v104 + 56), *(_BYTE *)(v104 + 120));
        v111 = v139;
        v106[2] = v138;
        v106[3] = v111;
        v106[4] = v140;
        v112 = v137;
        *v106 = *(_OWORD *)v136;
        v106[1] = v112;
        if (!*(_QWORD *)v106 || !*(_QWORD *)(v104 + 184))
          goto LABEL_122;
        if (*(_BYTE *)(v104 + 152))
        {
          v113 = *(_QWORD **)(v104 + 160);
        }
        else
        {
          v114 = *(_QWORD **)(v104 + 176);
          v115 = (_QWORD *)*v114;
          if (*v114)
          {
            do
            {
              v113 = v115;
              v115 = (_QWORD *)v115[1];
            }
            while (v115);
          }
          else
          {
            do
            {
              v113 = (_QWORD *)v114[2];
              v116 = *v113 == (_QWORD)v114;
              v114 = v113;
            }
            while (v116);
          }
        }
        if ((v117 = (const WebCore::IDBKeyData *)(v113 + 4),
              WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(v104 + 56)))
          && ((v119 = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v104 + 56), v117, v118), v119 > 0)
           || !v119 && *(_BYTE *)(v104 + 120))
          || WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(v104 + 88))
          && ((v121 = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v104 + 88), v117, v120), v121 < 0)
           || !v121 && *(_BYTE *)(v104 + 121)))
        {
LABEL_122:
          *(_QWORD *)(v104 + 144) = 0;
          *(_QWORD *)(v104 + 184) = 0;
          goto LABEL_123;
        }
        if (*(_BYTE *)(v104 + 152))
        {
          v123 = *(_QWORD *)(v104 + 160);
        }
        else
        {
          v124 = *(uint64_t **)(v104 + 176);
          v125 = *v124;
          if (*v124)
          {
            do
            {
              v123 = v125;
              v125 = *(_QWORD *)(v125 + 8);
            }
            while (v125);
          }
          else
          {
            do
            {
              v123 = v124[2];
              v116 = *(_QWORD *)v123 == (_QWORD)v124;
              v124 = (uint64_t *)v123;
            }
            while (v116);
          }
        }
        *(_BYTE *)(v104 + 224) = *(_BYTE *)(v123 + 32);
        v126 = *(unsigned int *)(v104 + 248);
        v127 = *(unsigned int *)(v123 + 56);
        if ((_DWORD)v126 == -1)
        {
          if ((_DWORD)v127 == -1)
            goto LABEL_138;
        }
        else if ((_DWORD)v127 == -1)
        {
          ((void (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E335A328[v126])(v136, v108);
          *(_DWORD *)(v104 + 248) = -1;
          goto LABEL_138;
        }
        v136[0] = v108;
        ((void (*)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))off_1E335A3B8[v127])(v136, v108, v123 + 40);
LABEL_138:
        v128 = *(_QWORD *)(v104 + 184);
        if (*(_BYTE *)(v128 + 8))
        {
          v129 = *(_QWORD *)v128;
        }
        else if (*(_BYTE *)(v104 + 192))
        {
          v129 = *v107 + 32;
        }
        else
        {
          v130 = *(_QWORD **)(v104 + 216);
          v131 = (_QWORD *)*v130;
          if (*v130)
          {
            do
            {
              v132 = v131;
              v131 = (_QWORD *)v131[1];
            }
            while (v131);
          }
          else
          {
            do
            {
              v132 = (_QWORD *)v130[2];
              v116 = *v132 == (_QWORD)v130;
              v130 = v132;
            }
            while (v116);
          }
          v129 = (uint64_t)(v132 + 4);
        }
        *(_BYTE *)(v104 + 256) = *(_BYTE *)v129;
        v133 = *(unsigned int *)(v104 + 280);
        v134 = *(unsigned int *)(v129 + 24);
        if ((_DWORD)v133 == -1)
        {
          if ((_DWORD)v134 == -1)
            goto LABEL_152;
        }
        else if ((_DWORD)v134 == -1)
        {
          ((void (*)(WTF::StringImpl **, uint64_t))off_1E335A328[v133])(v136, v104 + 264);
          *(_DWORD *)(v104 + 280) = -1;
LABEL_152:
          v135 = (uint64_t *)(*(_QWORD *)(v104 + 136) + 88);
          v141 = v104;
          WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)v136, v135, &v141);
LABEL_123:
          v122 = v74[2];
          v74[2] = v104;
          if (v122)
          {
            (*(void (**)(unint64_t))(*(_QWORD *)v122 + 8))(v122);
            v104 = v74[2];
            if (!v104)
              goto LABEL_41;
          }
          result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WebCore::IDBGetResult *))(*(_QWORD *)v104
                                                                                                  + 16))(v104, a4);
          goto LABEL_75;
        }
        v136[0] = (WTF::StringImpl *)(v104 + 264);
        ((void (*)(WTF::StringImpl **))off_1E335A3B8[v134])(v136);
        goto LABEL_152;
      }
    }
    else
    {
      if (3 * v102 > 4 * v101)
        goto LABEL_100;
      if (!(_DWORD)v102)
      {
        v103 = 8;
        goto LABEL_99;
      }
    }
    v103 = (_DWORD)v102 << (6 * *(_DWORD *)(v99 - 12) >= (2 * v102));
LABEL_99:
    v74 = (unint64_t *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)(v56 + 80), v103, v74);
    goto LABEL_100;
  }
  v45 = 1;
  while (v44)
  {
    v43 = ((_DWORD)v43 + v45) & v39;
    v44 = *(_QWORD *)(v10 + 16 * v43);
    ++v45;
    if (v44 == v38)
      goto LABEL_25;
  }
LABEL_41:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a5 = 280;
  result = v136[0];
  if (!v136[0])
  {
LABEL_76:
    *(_QWORD *)(a5 + 8) = 0;
    return result;
  }
  v77 = *(_DWORD *)v136[0];
  *(_DWORD *)v136[0] += 2;
  *(_QWORD *)(a5 + 8) = result;
  v136[0] = 0;
  if (!v77)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v75);
  *(_DWORD *)result = v77;
  return result;
}

WTF::StringImpl *WebCore::IDBServer::MemoryIDBBackingStore::iterateCursor@<X0>(WebCore::IDBServer::MemoryIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, const WebCore::IDBResourceIdentifier *a3@<X2>, const WebCore::IDBIterateCursorData *a4@<X3>, WebCore::IDBGetResult *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;

  v7 = *((_QWORD *)this + 12);
  if (!v7
    || !WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(v7, *(_QWORD *)a2, *((_QWORD *)a2 + 1)))
  {
    goto LABEL_5;
  }
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_135))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_135))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_135);
LABEL_10:
  if ((byte_1ECE81EC9 & 1) != 0)
  {
    if (!qword_1ECE81ED0)
      goto LABEL_20;
    v15 = *((_QWORD *)a3 + 1);
    v16 = *(_DWORD *)(qword_1ECE81ED0 - 8);
    v17 = (*(_QWORD *)a3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_QWORD *)a3 - 1640531527) << 16) ^ ((unsigned __int16)*(_QWORD *)a3 - 1640531527);
    v18 = v17 + (unsigned __int16)WORD2(*(_QWORD *)a3) + (v17 >> 11);
    v19 = (*(_QWORD *)a3 >> 37) & 0x7FFF800 ^ (v18 << 16) ^ v18;
    v20 = (v15 >> 5) & 0x7FFF800 ^ ((v19 + (unsigned __int16)v15 + (v19 >> 11)) << 16) ^ (v19 + (unsigned __int16)v15 + (v19 >> 11));
    v21 = (v15 >> 37) & 0x7FFF800 ^ ((v20 + WORD2(v15) + (v20 >> 11)) << 16) ^ (v20 + WORD2(v15) + (v20 >> 11));
    v22 = (v21 + (v21 >> 11)) ^ (8 * (v21 + (v21 >> 11)));
    v23 = (v22 + (v22 >> 5)) ^ (4 * (v22 + (v22 >> 5)));
    v24 = (v23 + (v23 >> 15)) ^ ((v23 + (v23 >> 15)) << 10);
    if (!v24)
      v24 = 0x800000;
    v25 = v16 & v24;
    v26 = (uint64_t *)(qword_1ECE81ED0 + 24 * v25);
    v28 = *v26;
    v27 = v26[1];
    if (*(_OWORD *)v26 == 0)
    {
LABEL_20:
      v30 = 0;
    }
    else
    {
      v29 = 1;
      while (v28 == -1 || v28 != *(_QWORD *)a3 || v27 != v15)
      {
        v25 = ((_DWORD)v25 + v29) & v16;
        v28 = *(_QWORD *)(qword_1ECE81ED0 + 24 * v25);
        v27 = *(_QWORD *)(qword_1ECE81ED0 + 24 * v25 + 8);
        ++v29;
        if (*(_OWORD *)(qword_1ECE81ED0 + 24 * v25) == 0)
          goto LABEL_20;
      }
      v30 = *(_QWORD *)(qword_1ECE81ED0 + 24 * v25 + 16);
    }
  }
  else
  {
    v30 = 0;
    qword_1ECE81ED0 = 0;
    byte_1ECE81EC9 = 1;
  }
  v31 = __ldxr((unsigned __int8 *)&_MergedGlobals_135);
  if (v31 != 1)
  {
    __clrex();
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_135);
    if (v30)
      goto LABEL_24;
    goto LABEL_5;
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_135))
    goto LABEL_28;
  if (v30)
  {
LABEL_24:
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, const WebCore::IDBIterateCursorData *, char *, _QWORD, WebCore::IDBGetResult *))(*(_QWORD *)v30 + 24))(v30, a4, (char *)a4 + 32, *((unsigned int *)a4 + 16), a5);
    *(_WORD *)a6 = 0;
    goto LABEL_25;
  }
LABEL_5:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a6 = 280;
  result = v32;
  if (!v32)
  {
LABEL_25:
    *(_QWORD *)(a6 + 8) = 0;
    return result;
  }
  v14 = *(_DWORD *)v32;
  *(_DWORD *)v32 += 2;
  *(_QWORD *)(a6 + 8) = v32;
  if (!v14)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v32, v12);
  *(_DWORD *)v32 = v14;
  return result;
}

uint64_t *WebCore::IDBServer::MemoryIDBBackingStore::infoForObjectStore(WebCore::IDBServer::MemoryIDBBackingStore *this, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v2 = *(uint64_t **)(*((_QWORD *)this + 11) + 32);
  if (v2)
  {
    v3 = *((_DWORD *)v2 - 2);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = &v2[9 * v7];
    v9 = *v8;
    if (*v8 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v7 = (v7 + v10) & v3;
        v8 = &v2[9 * v7];
        v9 = *v8;
        ++v10;
        if (*v8 == a2)
          goto LABEL_9;
      }
      v8 = &v2[9 * *((unsigned int *)v2 - 1)];
    }
LABEL_9:
    v2 += 9 * *((unsigned int *)v2 - 1);
  }
  else
  {
    v8 = 0;
  }
  if (v8 == v2)
    return 0;
  else
    return v8 + 1;
}

void WebCore::IDBServer::MemoryIndex::~MemoryIndex(WebCore::IDBServer::MemoryIndex *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;

  v3 = *((_QWORD *)this + 11);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)(v4 + 16);
      do
      {
        if (*(v6 - 2) != -1)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
        v6 += 3;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v8 = (WTF **)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    std::default_delete<WebCore::IDBServer::IndexValueStore>::operator()[abi:sn180100](v8);
  v9 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = *((unsigned int *)this + 12);
  if ((_DWORD)v12 != -1)
    ((void (*)(char *, char *))off_1E335A490[v12])(&v14, (char *)this + 32);
  *((_DWORD *)this + 12) = -1;
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
}

uint64_t *WebCore::IDBServer::MemoryIndex::cursorDidBecomeDirty(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v4 = *(_QWORD *)(a1 + 88);
  result = (uint64_t *)(a1 + 88);
  v3 = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(v3 + 8 * v9);
    if (v10 != a2)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(_QWORD *)(v3 + 8 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_8;
      }
      v9 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v9 != *(_DWORD *)(v3 - 4))
    {
      *(_QWORD *)(v3 + 8 * v9) = -1;
      ++*(_DWORD *)(*result - 16);
      v12 = *result;
      v13 = *result ? *(_DWORD *)(v12 - 12) - 1 : -1;
      *(_DWORD *)(v12 - 12) = v13;
      v14 = *result;
      if (*result)
      {
        v15 = 6 * *(_DWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
          return WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(result, v16 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebCore::IDBServer::MemoryIndex::notifyCursorsOfAllRecordsChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v1 = *(_QWORD *)(this + 88);
  if (v1)
  {
    v2 = *(unsigned int *)(v1 - 12);
    if ((_DWORD)v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v3 = this;
        v4 = WTF::fastMalloc((WTF *)(8 * v2));
        v6 = (WTF *)v4;
        v7 = *(_QWORD *)(v3 + 88);
        if (v7 && *(_DWORD *)(v7 - 12))
        {
          v8 = *(unsigned int *)(v7 - 4);
          if ((_DWORD)v8)
          {
            v9 = 8 * v8;
            for (i = *(uint64_t **)(v3 + 88); (unint64_t)(*i + 1) <= 1; ++i)
            {
              v9 -= 8;
              if (!v9)
                return WTF::fastFree(v6, v5);
            }
          }
          else
          {
            i = *(uint64_t **)(v3 + 88);
          }
          v11 = (uint64_t *)(v7 + 8 * v8);
          if (i != v11)
          {
            v12 = 0;
            v13 = *i;
            v14 = 1;
LABEL_15:
            v15 = v14;
            *(_QWORD *)(v4 + 8 * v12++) = v13;
            while (++i != v11)
            {
              v13 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v14;
                if (i != v11)
                  goto LABEL_15;
                break;
              }
            }
            if (v12)
            {
              v16 = 8 * v15;
              v17 = (uint64_t **)v4;
              do
              {
                v18 = *v17++;
                v18[18] = 0;
                v18[23] = 0;
                WebCore::IDBServer::MemoryIndex::cursorDidBecomeDirty(v18[17], (uint64_t)v18);
                v16 -= 8;
              }
              while (v16);
            }
          }
        }
        return WTF::fastFree(v6, v5);
      }
    }
  }
  return this;
}

uint64_t WebCore::IDBGetAllResult::operator=(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::IDBValue *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  *(_BYTE *)a1 = *a2;
  v4 = *(unsigned int *)(a1 + 20);
  v5 = *(WTF **)(a1 + 8);
  if ((_DWORD)v4)
  {
    v6 = 32 * v4;
    v7 = (_DWORD *)((char *)v5 + 24);
    do
    {
      v8 = *v7;
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, _DWORD *))off_1E335A328[v8])(&v23, v7 - 4);
      *v7 = -1;
      v7 += 8;
      v6 -= 32;
    }
    while (v6);
    v5 = *(WTF **)(a1 + 8);
  }
  if (v5)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v5, a2);
  }
  v9 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 8) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 16) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 20) = v9;
  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10)
  {
    v11 = *(WebCore::IDBValue **)(a1 + 24);
    v12 = 40 * v10;
    do
    {
      WebCore::IDBValue::~IDBValue(v11, (WTF::StringImpl *)a2);
      v11 = (WebCore::IDBValue *)(v13 + 40);
      v12 -= 40;
    }
    while (v12);
  }
  v14 = *(WTF **)(a1 + 24);
  if (v14)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(a1 + 24) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(a1 + 36) = v15;
  v16 = a1 + 40;
  v17 = a2 + 40;
  if (*(unsigned __int8 *)(a1 + 64) == a2[64])
  {
    if (*(_BYTE *)(a1 + 64))
    {
      v18 = *(unsigned int *)(a1 + 56);
      v19 = *((unsigned int *)a2 + 14);
      if ((_DWORD)v18 == -1)
      {
        if ((_DWORD)v19 == -1)
          return a1;
      }
      else if ((_DWORD)v19 == -1)
      {
        ((void (*)(char *, uint64_t, _BYTE *))off_1E335A490[v18])(&v25, v16, v17);
        *(_DWORD *)(a1 + 56) = -1;
        return a1;
      }
      v24 = a1 + 40;
      ((void (*)(uint64_t *))off_1E335A4D0[v19])(&v24);
    }
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    v20 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v20 != -1)
      ((void (*)(char *, uint64_t, _BYTE *))off_1E335A490[v20])(&v26, v16, v17);
    *(_DWORD *)(a1 + 56) = -1;
    *(_BYTE *)(a1 + 64) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 56) = -1;
    v21 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(char *, uint64_t, _BYTE *))off_1E335A4E0[v21])(&v27, v16, v17);
      *(_DWORD *)(a1 + 56) = v21;
    }
    *(_BYTE *)(a1 + 64) = 1;
  }
  return a1;
}

void WebCore::IDBServer::MemoryIndex::putIndexKey(WebCore::IDBServer::IndexValueStore *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  WebCore::IDBServer::MemoryIndexCursor *v22;
  WTF *v23;
  uint64_t v24;
  WTF **v25;
  WTF::StringImpl *v26;
  int v27;
  WTF ***v28;

  if (!*(_QWORD *)(a2 + 72))
  {
    v8 = *(_BYTE *)(a2 + 56);
    v9 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = v9 + 16;
    *(_BYTE *)(v9 + 32) = v8;
    v10 = *(WTF ***)(a2 + 72);
    *(_QWORD *)(a2 + 72) = v9;
    if (v10)
      std::default_delete<WebCore::IDBServer::IndexValueStore>::operator()[abi:sn180100](v10);
    WebCore::IDBServer::MemoryIndex::notifyCursorsOfAllRecordsChanged(a2);
  }
  if (!*(_BYTE *)(a2 + 57))
  {
    v17 = *(unsigned int *)(a4 + 32);
    if ((_DWORD)v17 != -1)
    {
      v23 = (WTF *)&v28;
      ((void (*)(WTF ***__return_ptr, WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8IndexKey8asOneKeyEvE3__0JZNKS9_8asOneKeyEvE3__1ZNKS9_8asOneKeyEvE3__2EEEEEJRKNS0_6__implIJDnNS8_10IDBKeyDataENS6_6VectorISG_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v17])(&v25, &v23, a4);
      WebCore::IDBServer::IndexValueStore::addRecord(a1, *(const WebCore::IDBKeyData **)(a2 + 72), (const WebCore::IDBKeyData *)&v25, a3);
      WebCore::IDBServer::MemoryIndex::notifyCursorsOfValueChange(a2, (const WebCore::IDBKeyData *)&v25, (const WebCore::IDBKeyData *)a3);
      if (v27 != -1)
        ((void (*)(WTF **, WTF::StringImpl **))off_1E335A328[v27])(&v23, &v26);
      return;
    }
LABEL_34:
    v22 = (WebCore::IDBServer::MemoryIndexCursor *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::IDBServer::MemoryIndexCursor::~MemoryIndexCursor(v22);
    return;
  }
  v23 = 0;
  v24 = 0;
  v25 = &v23;
  v26 = (WTF::StringImpl *)&v23;
  v11 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v11 == -1)
    goto LABEL_34;
  v28 = &v25;
  ((void (*)(WTF ****, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8IndexKey10multiEntryEvE3__0JZNKS9_10multiEntryEvE3__1ZNKS9_10multiEntryEvE3__2EEEEEJRKNS0_6__implIJDnNS8_10IDBKeyDataENS6_6VectorISG_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix
                                           + v11))(&v28, a4);
  v13 = (unsigned __int8 *)v23;
  if (*(_BYTE *)(a2 + 56) && HIDWORD(v24))
  {
    v14 = 32 * HIDWORD(v24);
    while (!WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(**(_QWORD **)(a2 + 72), v13))
    {
      v13 += 32;
      v14 -= 32;
      if (!v14)
      {
        v13 = (unsigned __int8 *)v23;
        goto LABEL_13;
      }
    }
    v15 = 281;
  }
  else
  {
LABEL_13:
    v15 = WORD2(v24);
    if (HIDWORD(v24))
    {
      v16 = 32 * HIDWORD(v24);
      do
      {
        WebCore::IDBServer::IndexValueStore::addRecord((WebCore::IDBServer::IndexValueStore *)&v25, *(const WebCore::IDBKeyData **)(a2 + 72), (const WebCore::IDBKeyData *)v13, a3);
        WebCore::IDBServer::MemoryIndex::notifyCursorsOfValueChange(a2, (const WebCore::IDBKeyData *)v13, (const WebCore::IDBKeyData *)a3);
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v12);
          else
            *(_DWORD *)v26 -= 2;
        }
        v13 += 32;
        v16 -= 32;
      }
      while (v16);
      v15 = 0;
    }
  }
  *(_WORD *)a1 = v15;
  *((_QWORD *)a1 + 1) = 0;
  v18 = v23;
  if (HIDWORD(v24))
  {
    v19 = 32 * HIDWORD(v24);
    v20 = (_DWORD *)((char *)v23 + 24);
    do
    {
      v21 = *v20;
      if ((_DWORD)v21 != -1)
        ((void (*)(WTF ***, _DWORD *))off_1E335A328[v21])(&v25, v20 - 4);
      *v20 = -1;
      v20 += 8;
      v19 -= 32;
    }
    while (v19);
    v18 = v23;
  }
  if (v18)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v18, v12);
  }
}

void WebCore::IDBServer::MemoryIndexCursor::~MemoryIndexCursor(WebCore::IDBServer::MemoryIndexCursor *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  *(_QWORD *)this = off_1E335A2D8;
  v2 = *((unsigned int *)this + 70);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E335A328[v2])(&v4, (char *)this + 264);
  *((_DWORD *)this + 70) = -1;
  v3 = *((unsigned int *)this + 62);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E335A328[v3])(&v5, (char *)this + 232);
  *((_DWORD *)this + 62) = -1;
  WebCore::IDBServer::MemoryCursor::~MemoryCursor(this);
}

{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  void *v5;
  char v6;
  char v7;

  *(_QWORD *)this = off_1E335A2D8;
  v2 = *((unsigned int *)this + 70);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E335A328[v2])(&v6, (char *)this + 264);
  *((_DWORD *)this + 70) = -1;
  v3 = *((unsigned int *)this + 62);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E335A328[v3])(&v7, (char *)this + 232);
  *((_DWORD *)this + 62) = -1;
  WebCore::IDBServer::MemoryCursor::~MemoryCursor(this);
  WTF::fastFree(v4, v5);
}

void WebCore::IDBServer::MemoryIndexCursor::currentData(WebCore::IDBServer::MemoryIndexCursor *this, WebCore::IDBGetResult *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  uint64_t v28;
  _OWORD v29[3];
  __int128 v30;
  _OWORD v31[2];
  _QWORD v32[2];
  int v33;
  char v34;
  _QWORD v35[2];
  int v36;
  _BYTE v37[16];
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;

  if (!*((_QWORD *)this + 18) || !*((_QWORD *)this + 23))
  {
    v32[0] = 0;
    v33 = 0;
    v34 = 0;
    v35[0] = 0;
    v36 = 0;
    v37[0] = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v30 = 0u;
    memset(v31, 0, 25);
LABEL_10:
    WebCore::IDBGetResult::operator=((uint64_t)a2, (uint64_t)&v30);
    WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)&v30, v6);
    return;
  }
  if (*((_BYTE *)this + 130))
  {
    v30 = 0u;
    memset(v31, 0, 24);
    BYTE8(v31[1]) = *((_BYTE *)this + 224);
    LOBYTE(v32[0]) = 0;
    v33 = -1;
    v4 = *((unsigned int *)this + 62);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(_OWORD *, _QWORD *, char *))off_1E335A370[v4])(v29, v32, (char *)this + 232);
      v33 = v4;
    }
    v34 = *((_BYTE *)this + 256);
    LOBYTE(v35[0]) = 0;
    v36 = -1;
    v5 = *((unsigned int *)this + 70);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(_OWORD *, _QWORD *, char *))off_1E335A370[v5])(v29, v35, (char *)this + 264);
      v36 = v5;
    }
    v37[0] = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 1;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 17) + 64);
  do
    v8 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v8 + 1, (unsigned int *)v7));
  v9 = *(unsigned int **)(*(_QWORD *)(v7 + 8) + 96);
  if (v9
    && (WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>((uint64_t)&v30, *(_QWORD *)v9, (unsigned __int8 *)this + 256), (v9 = (unsigned int *)v30) != 0))
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = v30;
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)&v29[0] = v9;
  memset((char *)v29 + 8, 0, 32);
  *(_QWORD *)&v30 = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v27 = *(WTF **)(v11 + 8);
      if (v27)
      {
        *(_QWORD *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 16) = 0;
        v28 = v11;
        WTF::fastFree(v27, a2);
        v11 = v28;
      }
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  do
  {
    v14 = __ldaxr((unsigned int *)v7);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)v7));
  if (!v15)
  {
    atomic_store(1u, (unsigned int *)v7);
    WTF::fastFree((WTF *)v7, a2);
  }
  v16 = *(_QWORD *)(*((_QWORD *)this + 17) + 64);
  if (v16)
  {
    do
      v17 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v17 + 1, (unsigned int *)v16));
    v18 = *(_QWORD *)(v16 + 8);
  }
  else
  {
    v18 = 0;
  }
  v19 = v29[0];
  memset(v29, 0, 40);
  v30 = v19;
  v31[0] = v29[1];
  *(_QWORD *)&v31[1] = *(_QWORD *)&v29[2];
  BYTE8(v31[1]) = *((_BYTE *)this + 224);
  LOBYTE(v32[0]) = 0;
  v33 = -1;
  v20 = *((unsigned int *)this + 62);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(char *, _QWORD *, char *))off_1E335A370[v20])(&v43, v32, (char *)this + 232);
    v33 = v20;
  }
  v34 = *((_BYTE *)this + 256);
  LOBYTE(v35[0]) = 0;
  v36 = -1;
  v21 = *((unsigned int *)this + 70);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(char *, _QWORD *, char *))off_1E335A370[v21])(&v43, v35, (char *)this + 264);
    v36 = v21;
  }
  v37[0] = 0;
  v39 = 0;
  if (*(_BYTE *)(v18 + 56))
  {
    v38 = -1;
    v22 = *(unsigned int *)(v18 + 48);
    if ((_DWORD)v22 != -1)
    {
      ((void (*)(char *, _BYTE *, uint64_t))off_1E335A4A0[v22])(&v43, v37, v18 + 32);
      v38 = v22;
    }
    v39 = 1;
  }
  v40 = 0;
  v41 = 0;
  v42 = 1;
  WebCore::IDBGetResult::operator=((uint64_t)a2, (uint64_t)&v30);
  WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)&v30, v23);
  if (v16)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v16);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v16));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v16);
      WTF::fastFree((WTF *)v16, v24);
    }
  }
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v29, (WTF::StringImpl *)v24);
}

void WebCore::IDBServer::MemoryIndexCursor::iterate(WebCore::IDBServer::MemoryIndexCursor *this, const WebCore::IDBKeyData *a2, const WebCore::IDBKeyData *a3, unsigned int a4, WebCore::IDBGetResult *a5)
{
  WebCore::IDBServer::IndexValueStore *v10;
  int isValid;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  _OWORD *v15;
  uint64_t **v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  const WebCore::IDBKeyData *v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  const WebCore::IDBKeyData *v46;
  const WTF::String *v47;
  int v48;
  const WTF::String *v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t *v55;
  const WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  const WTF::StringImpl *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  const WebCore::IDBKeyData *v81;
  const WTF::String *v82;
  int v83;
  const WTF::String *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  WTF::StringImpl *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _BYTE v99[48];
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  int v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  WebCore::IDBServer::MemoryIndexCursor *v109;

  if (!WebCore::IDBKeyData::isValid(a2))
  {
    if (a4 <= 1)
      v13 = 1;
    else
      v13 = a4;
    v15 = (_OWORD *)((char *)this + 144);
    v14 = (uint64_t *)*((_QWORD *)this + 18);
    if (v14 && *((_QWORD *)this + 23))
      goto LABEL_11;
    v40 = *(const WebCore::IDBKeyData **)(*((_QWORD *)this + 17) + 72);
    if (!v40)
      goto LABEL_164;
    switch(*((_BYTE *)this + 129))
    {
      case 0:
        WebCore::IDBServer::IndexValueStore::find((WebCore::IDBServer::IndexValueStore *)v99, v40, (WebCore::IDBServer::MemoryIndexCursor *)((char *)this + 224), (unsigned __int8 *)this + 256);
        goto LABEL_98;
      case 1:
        WebCore::IDBServer::IndexValueStore::find((WebCore::IDBServer::IndexValueStore *)v99, v40, (unsigned int *)this + 56, 1);
        goto LABEL_98;
      case 2:
        WebCore::IDBServer::IndexValueStore::reverseFind((uint64_t)v99, v40, (unsigned int *)this + 56, (unsigned __int8 *)this + 256, 0);
        goto LABEL_98;
      case 3:
        WebCore::IDBServer::IndexValueStore::reverseFind((uint64_t)v99, v40, (unsigned int *)this + 56, 1, 1);
LABEL_98:
        v53 = v100;
        *((_OWORD *)this + 11) = *(_OWORD *)&v99[32];
        *((_OWORD *)this + 12) = v53;
        *((_OWORD *)this + 13) = v101;
        v54 = *(_OWORD *)&v99[16];
        *v15 = *(_OWORD *)v99;
        *((_OWORD *)this + 10) = v54;
        break;
      default:
        break;
    }
    if (!*(_QWORD *)v15 || !*((_QWORD *)this + 23))
      goto LABEL_164;
    v55 = (uint64_t *)(*((_QWORD *)this + 17) + 88);
    v109 = this;
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)v99, v55, (uint64_t *)&v109);
    if (*((_BYTE *)this + 152))
    {
      v57 = *((_QWORD *)this + 20);
    }
    else
    {
      v58 = (uint64_t *)*((_QWORD *)this + 22);
      v59 = *v58;
      if (*v58)
      {
        do
        {
          v57 = v59;
          v59 = *(_QWORD *)(v59 + 8);
        }
        while (v59);
      }
      else
      {
        do
        {
          v57 = v58[2];
          v21 = *(_QWORD *)v57 == (_QWORD)v58;
          v58 = (uint64_t *)v57;
        }
        while (v21);
      }
    }
    if (WebCore::IDBKeyData::operator==((unsigned __int8 *)this + 224, (unsigned __int8 *)(v57 + 32), v56))
    {
      v61 = *((_QWORD *)this + 23);
      if (*(_BYTE *)(v61 + 8))
      {
        v62 = *(unsigned __int8 **)v61;
      }
      else if (*((_BYTE *)this + 192))
      {
        v62 = (unsigned __int8 *)(*((_QWORD *)this + 25) + 32);
      }
      else
      {
        v75 = (_QWORD *)*((_QWORD *)this + 27);
        v76 = (_QWORD *)*v75;
        if (*v75)
        {
          do
          {
            v77 = v76;
            v76 = (_QWORD *)v76[1];
          }
          while (v76);
        }
        else
        {
          do
          {
            v77 = (_QWORD *)v75[2];
            v21 = *v77 == (_QWORD)v75;
            v75 = v77;
          }
          while (v21);
        }
        v62 = (unsigned __int8 *)(v77 + 4);
      }
      if (WebCore::IDBKeyData::operator==((unsigned __int8 *)this + 256, v62, v60))
      {
        v14 = *(uint64_t **)v15;
LABEL_11:
        v16 = (uint64_t **)((char *)this + 184);
        while (1)
        {
          if ((*((_BYTE *)this + 129) & 0xFD) != 1)
          {
            if (!v14)
              goto LABEL_164;
            v17 = *v16;
            if (!*v16)
              goto LABEL_144;
            if (!*((_BYTE *)v17 + 8))
            {
              if (*((_BYTE *)this + 192))
              {
                v31 = (_QWORD *)*((_QWORD *)this + 25);
                v32 = (_QWORD *)v31[1];
                if (v32)
                {
                  do
                  {
                    v33 = v32;
                    v32 = (_QWORD *)*v32;
                  }
                  while (v32);
                }
                else
                {
                  do
                  {
                    v33 = (_QWORD *)v31[2];
                    v21 = *v33 == (_QWORD)v31;
                    v31 = v33;
                  }
                  while (!v21);
                }
                *((_QWORD *)this + 25) = v33;
                v34 = *v17 + 8;
              }
              else
              {
                v38 = (_QWORD *)*((_QWORD *)this + 27);
                v39 = (_QWORD *)*v38;
                if (*v38)
                {
                  do
                  {
                    v33 = v39;
                    v39 = (_QWORD *)v39[1];
                  }
                  while (v39);
                }
                else
                {
                  do
                  {
                    v33 = (_QWORD *)v38[2];
                    v21 = *v33 == (_QWORD)v38;
                    v38 = v33;
                  }
                  while (v21);
                }
                *((_QWORD *)this + 27) = v33;
                v34 = *(_QWORD *)*v17;
              }
              if (v33 != (_QWORD *)v34)
                goto LABEL_63;
            }
            *v16 = 0;
          }
          if (!v14)
            goto LABEL_164;
          if (*((_BYTE *)this + 152))
          {
            v18 = (unsigned __int8 *)*((_QWORD *)this + 20);
            v19 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
            if (v19)
            {
              do
              {
                v20 = v19;
                v19 = *(unsigned __int8 **)v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                v20 = (unsigned __int8 *)*((_QWORD *)v18 + 2);
                v21 = *(_QWORD *)v20 == (_QWORD)v18;
                v18 = v20;
              }
              while (!v21);
            }
            *((_QWORD *)this + 20) = v20;
            if (v20 == (unsigned __int8 *)(v14 + 2))
              goto LABEL_159;
            v17 = (uint64_t *)WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(*v14, v20 + 32);
            if (*((_BYTE *)v17 + 8))
              v22 = 0;
            else
              v22 = *(_QWORD *)*v17;
            *((_QWORD *)this + 23) = v17;
            *((_BYTE *)this + 192) = 1;
            *((_QWORD *)this + 25) = v22;
            *((_QWORD *)this + 26) = 0;
            *((_QWORD *)this + 27) = 0;
          }
          else
          {
            v23 = (_QWORD *)*((_QWORD *)this + 22);
            v24 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v25 = v24;
                v24 = (_QWORD *)v24[1];
              }
              while (v24);
            }
            else
            {
              do
              {
                v25 = (_QWORD *)v23[2];
                v21 = *v25 == (_QWORD)v23;
                v23 = v25;
              }
              while (v21);
            }
            *((_QWORD *)this + 22) = v25;
            if (v25 == (_QWORD *)v14[1])
              goto LABEL_159;
            v26 = *v25;
            if (*v25)
            {
              do
              {
                v27 = v26;
                v26 = *(_QWORD *)(v26 + 8);
              }
              while (v26);
            }
            else
            {
              do
              {
                v27 = v25[2];
                v21 = *(_QWORD *)v27 == (_QWORD)v25;
                v25 = (_QWORD *)v27;
              }
              while (v21);
            }
            v17 = (uint64_t *)WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(*v14, (unsigned __int8 *)(v27 + 32));
            if (*((_BYTE *)v17 + 8))
            {
              v28 = 0;
              v29 = 0;
              v30 = 1;
            }
            else
            {
              v35 = (uint64_t *)*v17;
              if (*((_DWORD *)this + 39))
              {
                v28 = (_QWORD *)*v35;
                v36 = (_QWORD *)v28[1];
                v37 = v28;
                if (v36)
                {
                  do
                  {
                    v29 = v36;
                    v36 = (_QWORD *)*v36;
                  }
                  while (v36);
                }
                else
                {
                  do
                  {
                    v29 = (_QWORD *)v37[2];
                    v21 = *v29 == (_QWORD)v37;
                    v37 = v29;
                  }
                  while (!v21);
                }
                v30 = 0;
              }
              else
              {
                v30 = 0;
                v28 = v35 + 1;
                v29 = v28;
              }
            }
            *((_QWORD *)this + 23) = v17;
            *((_BYTE *)this + 192) = v30;
            *((_QWORD *)this + 25) = 0;
            *((_QWORD *)this + 26) = v28;
            *((_QWORD *)this + 27) = v29;
          }
LABEL_63:
          v14 = *(uint64_t **)v15;
          if (!*(_QWORD *)v15)
            goto LABEL_164;
          if (v17)
          {
            if (--v13)
              continue;
          }
          goto LABEL_144;
        }
      }
    }
    v14 = *(uint64_t **)v15;
    if (--v13)
      goto LABEL_11;
    if (!v14)
      goto LABEL_164;
LABEL_144:
    v16 = (uint64_t **)((char *)this + 184);
    if (*((_QWORD *)this + 23))
    {
      if (*((_BYTE *)this + 152))
      {
        v78 = (_QWORD *)*((_QWORD *)this + 20);
      }
      else
      {
        v79 = (_QWORD *)*((_QWORD *)this + 22);
        v80 = (_QWORD *)*v79;
        if (*v79)
        {
          do
          {
            v78 = v80;
            v80 = (_QWORD *)v80[1];
          }
          while (v80);
        }
        else
        {
          do
          {
            v78 = (_QWORD *)v79[2];
            v21 = *v78 == (_QWORD)v79;
            v79 = v78;
          }
          while (v21);
        }
      }
      if ((v81 = (const WebCore::IDBKeyData *)(v78 + 4),
            WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryIndexCursor *)((char *)this + 56)))
        && ((v83 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryIndexCursor *)((char *)this + 56), v81, v82),
             v83 > 0)
         || !v83 && *((_BYTE *)this + 120))
        || WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryIndexCursor *)((char *)this + 88))
        && ((v85 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryIndexCursor *)((char *)this + 88), v81, v84),
             v85 < 0)
         || !v85 && *((_BYTE *)this + 121)))
      {
LABEL_159:
        *(_QWORD *)v15 = 0;
        *v16 = 0;
        goto LABEL_164;
      }
    }
    if (!*(_QWORD *)v15 || !*v16)
    {
LABEL_164:
      *((_BYTE *)this + 224) = 0;
      v87 = *((unsigned int *)this + 62);
      if ((_DWORD)v87 != -1)
      {
        v88 = (_QWORD *)((char *)this + 232);
        if (!(_DWORD)v87)
        {
          *v88 = 0;
          goto LABEL_169;
        }
        ((void (*)(_BYTE *, _QWORD *))off_1E335A328[v87])(v99, v88);
      }
      *((_QWORD *)this + 29) = 0;
      *((_DWORD *)this + 62) = 0;
LABEL_169:
      *((_BYTE *)this + 256) = 0;
      v89 = *((unsigned int *)this + 70);
      if ((_DWORD)v89 != -1)
      {
        v90 = (_QWORD *)((char *)this + 264);
        if (!(_DWORD)v89)
        {
          *v90 = 0;
LABEL_174:
          *(_QWORD *)&v100 = 0;
          LODWORD(v101) = 0;
          BYTE8(v101) = 0;
          v102 = 0;
          v103 = 0;
          v104 = 0;
          v105 = 0;
          v106 = 0;
          v107 = 0;
          v108 = 0;
          memset(v99, 0, 41);
          WebCore::IDBGetResult::operator=((uint64_t)a5, (uint64_t)v99);
          WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v99, v91);
          return;
        }
        ((void (*)(_BYTE *, _QWORD *))off_1E335A328[v89])(v99, v90);
      }
      *((_QWORD *)this + 33) = 0;
      *((_DWORD *)this + 70) = 0;
      goto LABEL_174;
    }
    if (*((_BYTE *)this + 152))
    {
      v86 = *((_QWORD *)this + 20);
    }
    else
    {
      v92 = (uint64_t *)*((_QWORD *)this + 22);
      v93 = *v92;
      if (*v92)
      {
        do
        {
          v86 = v93;
          v93 = *(_QWORD *)(v93 + 8);
        }
        while (v93);
      }
      else
      {
        do
        {
          v86 = v92[2];
          v21 = *(_QWORD *)v86 == (_QWORD)v92;
          v92 = (uint64_t *)v86;
        }
        while (v21);
      }
    }
    *((_BYTE *)this + 224) = *(_BYTE *)(v86 + 32);
    v94 = *((unsigned int *)this + 62);
    v95 = *(unsigned int *)(v86 + 56);
    if ((_DWORD)v94 == -1)
    {
      if ((_DWORD)v95 == -1)
        goto LABEL_184;
    }
    else if ((_DWORD)v95 == -1)
    {
      ((void (*)(_BYTE *, char *))off_1E335A328[v94])(v99, (char *)this + 232);
      *((_DWORD *)this + 62) = -1;
      goto LABEL_184;
    }
    *(_QWORD *)v99 = (char *)this + 232;
    ((void (*)(_BYTE *))off_1E335A3B8[v95])(v99);
LABEL_184:
    if (*((_BYTE *)*v16 + 8))
    {
      v68 = **v16;
    }
    else if (*((_BYTE *)this + 192))
    {
      v68 = *((_QWORD *)this + 25) + 32;
    }
    else
    {
      v96 = (_QWORD *)*((_QWORD *)this + 27);
      v97 = (_QWORD *)*v96;
      if (*v96)
      {
        do
        {
          v98 = v97;
          v97 = (_QWORD *)v97[1];
        }
        while (v97);
      }
      else
      {
        do
        {
          v98 = (_QWORD *)v96[2];
          v21 = *v98 == (_QWORD)v96;
          v96 = v98;
        }
        while (v21);
      }
      v68 = (uint64_t)(v98 + 4);
    }
    *((_BYTE *)this + 256) = *(_BYTE *)v68;
    v72 = (char *)this + 264;
    v73 = *((unsigned int *)this + 70);
    v74 = *(unsigned int *)(v68 + 24);
    if ((_DWORD)v73 == -1)
    {
      if ((_DWORD)v74 == -1)
        goto LABEL_198;
    }
    else if ((_DWORD)v74 == -1)
    {
LABEL_195:
      ((void (*)(_BYTE *, char *))off_1E335A328[v73])(v99, v72);
      *((_DWORD *)this + 70) = -1;
      goto LABEL_198;
    }
LABEL_197:
    *(_QWORD *)v99 = (char *)this + 264;
    ((void (*)(_BYTE *, char *, uint64_t))off_1E335A3B8[v74])(v99, v72, v68 + 8);
    goto LABEL_198;
  }
  v10 = *(WebCore::IDBServer::IndexValueStore **)(*((_QWORD *)this + 17) + 72);
  if (!v10)
    goto LABEL_164;
  isValid = WebCore::IDBKeyData::isValid(a3);
  v12 = *((unsigned __int8 *)this + 129);
  if (isValid)
  {
    if (v12 > 1)
      WebCore::IDBServer::IndexValueStore::reverseFind((uint64_t)v99, v10, (unsigned int *)a2, (unsigned __int8 *)a3, (v12 & 0xFFFFFFFD) == 1);
    else
      WebCore::IDBServer::IndexValueStore::find((WebCore::IDBServer::IndexValueStore *)v99, v10, a2, (unsigned __int8 *)a3);
  }
  else if (v12 > 1)
  {
    WebCore::IDBServer::IndexValueStore::reverseFind((uint64_t)v99, v10, (unsigned int *)a2, (v12 & 0xFFFFFFFD) == 1, 0);
  }
  else
  {
    WebCore::IDBServer::IndexValueStore::find((WebCore::IDBServer::IndexValueStore *)v99, v10, (unsigned int *)a2, 0);
  }
  v41 = v100;
  *((_OWORD *)this + 11) = *(_OWORD *)&v99[32];
  *((_OWORD *)this + 12) = v41;
  *((_OWORD *)this + 13) = v101;
  v42 = *(_OWORD *)&v99[16];
  *((_OWORD *)this + 9) = *(_OWORD *)v99;
  *((_OWORD *)this + 10) = v42;
  if (!*((_QWORD *)this + 18))
    goto LABEL_164;
  if (*((_QWORD *)this + 23))
  {
    if (*((_BYTE *)this + 152))
    {
      v43 = (_QWORD *)*((_QWORD *)this + 20);
    }
    else
    {
      v44 = (_QWORD *)*((_QWORD *)this + 22);
      v45 = (_QWORD *)*v44;
      if (*v44)
      {
        do
        {
          v43 = v45;
          v45 = (_QWORD *)v45[1];
        }
        while (v45);
      }
      else
      {
        do
        {
          v43 = (_QWORD *)v44[2];
          v21 = *v43 == (_QWORD)v44;
          v44 = v43;
        }
        while (v21);
      }
    }
    if ((v46 = (const WebCore::IDBKeyData *)(v43 + 4),
          WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryIndexCursor *)((char *)this + 56)))
      && ((v48 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryIndexCursor *)((char *)this + 56), v46, v47),
           v48 > 0)
       || !v48 && *((_BYTE *)this + 120))
      || WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryIndexCursor *)((char *)this + 88))
      && ((v50 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryIndexCursor *)((char *)this + 88), v46, v49),
           v50 < 0)
       || !v50 && *((_BYTE *)this + 121)))
    {
      *((_QWORD *)this + 18) = 0;
      *((_QWORD *)this + 23) = 0;
      goto LABEL_164;
    }
  }
  if (!*((_QWORD *)this + 18) || !*((_QWORD *)this + 23))
    goto LABEL_164;
  v51 = (uint64_t *)(*((_QWORD *)this + 17) + 88);
  v109 = this;
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)v99, v51, (uint64_t *)&v109);
  if (*((_BYTE *)this + 152))
  {
    v52 = *((_QWORD *)this + 20);
  }
  else
  {
    v63 = (uint64_t *)*((_QWORD *)this + 22);
    v64 = *v63;
    if (*v63)
    {
      do
      {
        v52 = v64;
        v64 = *(_QWORD *)(v64 + 8);
      }
      while (v64);
    }
    else
    {
      do
      {
        v52 = v63[2];
        v21 = *(_QWORD *)v52 == (_QWORD)v63;
        v63 = (uint64_t *)v52;
      }
      while (v21);
    }
  }
  *((_BYTE *)this + 224) = *(_BYTE *)(v52 + 32);
  v65 = *((unsigned int *)this + 62);
  v66 = *(unsigned int *)(v52 + 56);
  if ((_DWORD)v65 == -1)
  {
    if ((_DWORD)v66 == -1)
      goto LABEL_119;
  }
  else if ((_DWORD)v66 == -1)
  {
    ((void (*)(_BYTE *, char *))off_1E335A328[v65])(v99, (char *)this + 232);
    *((_DWORD *)this + 62) = -1;
    goto LABEL_119;
  }
  *(_QWORD *)v99 = (char *)this + 232;
  ((void (*)(_BYTE *))off_1E335A3B8[v66])(v99);
LABEL_119:
  v67 = *((_QWORD *)this + 23);
  if (*(_BYTE *)(v67 + 8))
  {
    v68 = *(_QWORD *)v67;
  }
  else if (*((_BYTE *)this + 192))
  {
    v68 = *((_QWORD *)this + 25) + 32;
  }
  else
  {
    v69 = (_QWORD *)*((_QWORD *)this + 27);
    v70 = (_QWORD *)*v69;
    if (*v69)
    {
      do
      {
        v71 = v70;
        v70 = (_QWORD *)v70[1];
      }
      while (v70);
    }
    else
    {
      do
      {
        v71 = (_QWORD *)v69[2];
        v21 = *v71 == (_QWORD)v69;
        v69 = v71;
      }
      while (v21);
    }
    v68 = (uint64_t)(v71 + 4);
  }
  *((_BYTE *)this + 256) = *(_BYTE *)v68;
  v72 = (char *)this + 264;
  v73 = *((unsigned int *)this + 70);
  v74 = *(unsigned int *)(v68 + 24);
  if ((_DWORD)v73 != -1)
  {
    if ((_DWORD)v74 == -1)
      goto LABEL_195;
    goto LABEL_197;
  }
  if ((_DWORD)v74 != -1)
    goto LABEL_197;
LABEL_198:
  WebCore::IDBServer::MemoryIndexCursor::currentData(this, a5);
}

void WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(WebCore::IDBServer::MemoryObjectStore *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::IDBServer::MemoryIndex **v10;
  WebCore::IDBServer::MemoryIndex *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  *((_QWORD *)this + 10) = 0;
  v3 = *((_QWORD *)this + 16);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)(v3 + 16);
      do
      {
        if (*(v5 - 2) != -1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        }
        v5 += 3;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable((WTF::StringImpl ***)this + 15, a2);
  v8 = *((_QWORD *)this + 14);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (WebCore::IDBServer::MemoryIndex **)(v8 + 8);
      do
      {
        if (*(v10 - 1) != (WebCore::IDBServer::MemoryIndex *)-1)
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 1)
            {
              WebCore::IDBServer::MemoryIndex::~MemoryIndex(v11, v7);
              WTF::fastFree(v12, v13);
            }
            else
            {
              --*(_DWORD *)v11;
            }
          }
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), v7);
  }
  v14 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v14)
  {
    std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(v14, *(WTF **)(v14 + 8));
    MEMORY[0x19AEA7644](v14, 0x1020C4062D53EE8);
  }
  v15 = (uint64_t *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v15)
  {
    v16 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(v15, v7);
    WTF::fastFree((WTF *)v16, v17);
  }
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBServer::MemoryObjectStore *)((char *)this + 16), (WTF::StringImpl *)v7);
  v19 = *((_QWORD *)this + 1);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    v20 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v18);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::IDBServer::MemoryObjectStore::populateIndexWithExistingRecords(WTF::StringImpl **this, WebCore::IDBServer::MemoryIndex *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  char v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void *v27;
  WTF *v28;
  unsigned int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v37;
  uint64_t *v39;
  uint64_t *v40;
  char v41[8];
  _BYTE v42[16];
  int v43;
  WTF *v44[2];
  uint64_t v45;
  int v46;
  char v47;
  char v48;
  uint64_t v49;
  __int128 v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  _BYTE *v55;
  uint64_t v56[2];
  int v57;
  char v58;
  char *v59;
  _BYTE v60[32];
  unsigned int v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)*((_QWORD *)a2 + 12);
  if (!v4)
    goto LABEL_77;
  v5 = *v4;
  if (!v5)
  {
    v8 = 0;
    LODWORD(v6) = 0;
LABEL_14:
    v7 = v5 + 40 * v6;
    goto LABEL_15;
  }
  v6 = *(unsigned int *)(v5 - 4);
  v7 = v5 + 40 * v6;
  if (!*(_DWORD *)(v5 - 12))
  {
    v8 = v5 + 40 * v6;
    goto LABEL_14;
  }
  v8 = v5;
  if ((_DWORD)v6)
  {
    v9 = 40 * v6;
    v8 = v5;
    while (!*(_DWORD *)(v8 + 24) || *(_BYTE *)v8 != 0)
    {
      v8 += 40;
      v9 -= 40;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_15:
  if (v5)
    v11 = v5 + 40 * *(unsigned int *)(v5 - 4);
  else
    v11 = 0;
  if (v11 != v8)
  {
    v39 = (uint64_t *)(a3 + 8);
    v40 = (uint64_t *)((char *)a2 + 16);
    while (1)
    {
      v60[0] = 0;
      v62 = 0;
      v12 = *(unsigned int *)(v8 + 24);
      if ((_DWORD)v12 == -1)
        std::__throw_bad_variant_access[abi:sn180100]();
      v59 = &v58;
      ((void (*)(uint64_t *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v12])(v56, &v59, v8 + 8);
      v41[0] = 0;
      v42[0] = 0;
      v43 = -1;
      v13 = v57;
      if (v57 != -1)
      {
        ((void (*)(char **, _BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v57])(&v59, v42, v56);
        v43 = v13;
        if (v57 != -1)
          ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v57])(&v59, v56);
      }
      v14 = *(unsigned int **)(v8 + 32);
      if (v14)
      {
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
      v44[0] = (WTF *)v14;
      WebCore::IDBObjectStoreInfo::isolatedCopy(v40, (uint64_t)&v44[1]);
      WebCore::IDBIndexInfo::isolatedCopy(v39, (uint64_t)&v50);
      v55 = v60;
      v16 = WTF::fastMalloc((WTF *)0xB0);
      *(_QWORD *)v16 = off_1E335A570;
      *(_BYTE *)(v16 + 8) = v41[0];
      *(_BYTE *)(v16 + 16) = 0;
      *(_DWORD *)(v16 + 32) = -1;
      v17 = v43;
      if (v43 != -1)
      {
        ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E335A400[v43])(v56, v16 + 16, v42);
        *(_DWORD *)(v16 + 32) = v17;
      }
      v18 = *(_OWORD *)v44;
      *(_BYTE *)(v16 + 64) = 0;
      *(_OWORD *)(v16 + 40) = v18;
      v19 = v45;
      v44[0] = 0;
      v45 = 0;
      *(_QWORD *)(v16 + 56) = v19;
      *(_BYTE *)(v16 + 88) = 0;
      if (v47)
      {
        *(_DWORD *)(v16 + 80) = -1;
        v20 = v46;
        if (v46 != -1)
        {
          ((void (*)(uint64_t *))off_1E335A4E0[v46])(v56);
          *(_DWORD *)(v16 + 80) = v20;
        }
        *(_BYTE *)(v16 + 88) = 1;
      }
      v21 = v48;
      *(_BYTE *)(v16 + 136) = 0;
      *(_BYTE *)(v16 + 96) = v21;
      *(_QWORD *)(v16 + 104) = v49;
      *(_OWORD *)(v16 + 112) = v50;
      v22 = v51;
      v49 = 0;
      v51 = 0;
      *(_QWORD *)(v16 + 128) = v22;
      *(_DWORD *)(v16 + 152) = -1;
      v23 = v53;
      if (v53 != -1)
      {
        ((void (*)(uint64_t *))off_1E335A4E0[v53])(v56);
        *(_DWORD *)(v16 + 152) = v23;
      }
      *(_WORD *)(v16 + 160) = v54;
      *(_QWORD *)(v16 + 168) = v55;
      v56[0] = v16;
      WebCore::callOnIDBSerializationThreadAndWait(v56);
      v25 = v56[0];
      v56[0] = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      if (v53 != -1)
        ((void (*)(char **, uint64_t *))off_1E335A490[v53])(&v59, &v52);
      v53 = -1;
      v26 = v51;
      v51 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v24);
        else
          *(_DWORD *)v26 -= 2;
      }
      WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)&v44[1], v24);
      v28 = v44[0];
      v44[0] = 0;
      if (v28)
      {
        do
        {
          v29 = __ldaxr((unsigned int *)v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, (unsigned int *)v28));
        if (!v30)
        {
          atomic_store(1u, (unsigned int *)v28);
          v37 = (WTF *)*((_QWORD *)v28 + 1);
          if (v37)
          {
            *((_QWORD *)v28 + 1) = 0;
            *((_DWORD *)v28 + 4) = 0;
            WTF::fastFree(v37, v27);
          }
          WTF::fastFree(v28, v27);
        }
      }
      if (v43 != -1)
        ((void (*)(char **, _BYTE *))off_1E335A328[v43])(&v59, v42);
      if (!v62)
        break;
      if (v61)
      {
        WebCore::IDBServer::MemoryIndex::putIndexKey((WebCore::IDBServer::IndexValueStore *)this, a3, (unsigned int *)v8, (uint64_t)v60);
        if (!*((_BYTE *)this + 1))
        {
          v32 = this[1];
          this[1] = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 != 2)
            {
              v33 = 0;
              *(_DWORD *)v32 -= 2;
LABEL_54:
              if (!v62)
                goto LABEL_59;
              v34 = v61;
              if (v61 == 0xFFFFFFFFLL)
                goto LABEL_59;
              goto LABEL_58;
            }
            WTF::StringImpl::destroy(v32, v31);
          }
          v33 = 0;
          goto LABEL_54;
        }
LABEL_53:
        v33 = 1;
        goto LABEL_54;
      }
      v34 = 0;
      v33 = 3;
LABEL_58:
      ((void (*)(char *, _BYTE *))off_1E335A4F0[v34])(v41, v60);
LABEL_59:
      if (v33 != 3 && v33)
        return;
      v35 = v8 + 40;
      v8 = v7;
      if (v35 != v7)
      {
        v8 = v35;
        while (!*(_DWORD *)(v8 + 24) || *(_BYTE *)v8 != 0)
        {
          v8 += 40;
          if (v8 == v7)
          {
            v8 = v7;
            break;
          }
        }
      }
      if (v8 == v11)
        goto LABEL_77;
    }
    *(_WORD *)this = 0;
    this[1] = 0;
    goto LABEL_53;
  }
LABEL_77:
  *(_WORD *)this = 0;
  this[1] = 0;
}

uint64_t *WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::take(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *a2;
  if (!*a2)
    goto LABEL_9;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != a3)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v10;
      if (v9 == a3)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v8 != *(_DWORD *)(v3 - 4))
  {
    v11 = (_QWORD *)(v3 + 16 * v8);
    v12 = v11[1];
    v11[1] = 0;
    *result = v12;
    v13 = (_QWORD *)*a2;
    if (!*a2 || (v13 += 2 * *((unsigned int *)v13 - 1), v13 != v11))
    {
      if (v13 != v11)
      {
        *v11 = -1;
        v11[1] = 0;
        ++*(_DWORD *)(*a2 - 16);
        v14 = *a2;
        if (*a2)
          v15 = *(_DWORD *)(v14 - 12) - 1;
        else
          v15 = -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *a2;
        if (*a2)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a2, v18 >> 1, 0);
        }
      }
    }
  }
  else
  {
LABEL_9:
    *result = 0;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::take(uint64_t result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v23;
  void *v24;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_27;
  v7 = *(_DWORD *)(v4 - 8);
  v8 = *((_DWORD *)*a3 + 4);
  v9 = v8 < 0x100 ? WTF::StringImpl::hashSlowCase(*a3) : v8 >> 8;
  for (i = 0; ; v9 = ++i + v11)
  {
    v11 = v9 & v7;
    result = *(_QWORD *)(v4 + 16 * v11);
    if (result != -1)
    {
      if (!result)
      {
        v12 = *(_QWORD *)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_27;
        v13 = *(unsigned int *)(v12 - 4);
        v14 = v12 + 16 * v13;
        goto LABEL_14;
      }
      result = WTF::equal((WTF *)result, *a3, (const WTF::StringImpl *)a3);
      if ((result & 1) != 0)
        break;
    }
  }
  v14 = v4 + 16 * v11;
  v12 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_15;
  v13 = *(unsigned int *)(v12 - 4);
LABEL_14:
  v12 += 16 * v13;
LABEL_15:
  if (v12 == v14)
  {
LABEL_27:
    *v3 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v14 + 8) = 0;
    *v3 = v15;
    v16 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2 || (v16 += 16 * *(unsigned int *)(v16 - 4), v16 != v14))
    {
      if (v16 != v14)
      {
        v17 = *(WTF::StringImpl **)v14;
        *(_QWORD *)v14 = -1;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, a2);
          else
            *(_DWORD *)v17 -= 2;
        }
        result = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::IDBServer::MemoryIndex::~MemoryIndex((WebCore::IDBServer::MemoryIndex *)result, a2);
            result = WTF::fastFree(v23, v24);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        ++*(_DWORD *)(*(_QWORD *)a2 - 16);
        v18 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
          v19 = *(_DWORD *)(v18 - 12) - 1;
        else
          v19 = -1;
        *(_DWORD *)(v18 - 12) = v19;
        v20 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v21 = 6 * *(_DWORD *)(v20 - 12);
          v22 = *(_DWORD *)(v20 - 4);
          if (v21 < v22 && v22 >= 9)
            return (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)a2, v22 >> 1, 0);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::IDBServer::MemoryObjectStoreCursor::setFirstInRemainingRange(uint64_t result, _QWORD *a2, const WTF::String *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  const WTF::String *v13;
  const WTF::String *v14;
  const WTF::String *v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  BOOL v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  const WebCore::IDBKeyData *v32;
  const WTF::String *v33;
  const WTF::String *v34;
  const WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;

  v4 = result;
  if (*(_BYTE *)(result + 224))
    *(_BYTE *)(result + 224) = 0;
  v5 = a2[2];
  if (*(unsigned __int8 *)(result + 129) > 1u)
  {
    if (!v5)
      return result;
    if ((*(_DWORD *)(result + 168) || *(_DWORD *)(result + 200))
      && !*(_BYTE *)(result + 208)
      && !*(_BYTE *)(result + 209)
      && WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(result + 176))
      && WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(v4 + 144))
      && (result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v4 + 144), (const WebCore::IDBKeyData *)(v4 + 176), v13), !(_DWORD)result))
    {
      v46 = (_QWORD *)a2[1];
      v44 = a2 + 1;
      v45 = v46;
      if (!v46)
        goto LABEL_121;
      v47 = v44;
      do
      {
        result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v45 + 4), (const WebCore::IDBKeyData *)(v4 + 144), v14);
        v48 = v45 + 1;
        if ((int)result >= 0)
        {
          v48 = v45;
          v47 = v45;
        }
        v45 = (_QWORD *)*v48;
      }
      while (*v48);
      if (v47 == v44
        || (result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v4 + 144), (const WebCore::IDBKeyData *)(v47 + 4), v14), (result & 0x80000000) != 0))
      {
LABEL_121:
        v47 = v44;
      }
      if (!*(_BYTE *)(v4 + 224))
        *(_BYTE *)(v4 + 224) = 1;
      *(_QWORD *)(v4 + 216) = v47;
      if (v47 == v44)
        goto LABEL_82;
    }
    else
    {
      result = WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(v4 + 176));
      if ((result & 1) != 0)
      {
        if (*(_BYTE *)(v4 + 224))
          *(_BYTE *)(v4 + 224) = 0;
        v16 = (unsigned __int8 *)(a2 + 1);
        v17 = (_QWORD *)a2[1];
        if (v17)
        {
          do
          {
            result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v4 + 176), (const WebCore::IDBKeyData *)(v17 + 4), v15);
            v18 = v17 + 1;
            if ((int)result < 0)
            {
              v18 = v17;
              v16 = (unsigned __int8 *)v17;
            }
            v17 = (_QWORD *)*v18;
          }
          while (*v18);
        }
        if (v16 != (unsigned __int8 *)*a2)
        {
          v19 = *(_QWORD *)v16;
          if (*(_QWORD *)v16)
          {
            do
            {
              v20 = (unsigned __int8 *)v19;
              v19 = *(_QWORD *)(v19 + 8);
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (unsigned __int8 *)*((_QWORD *)v16 + 2);
              v21 = *(_QWORD *)v20 == (_QWORD)v16;
              v16 = v20;
            }
            while (v21);
          }
          if (*(_BYTE *)(v4 + 209)
            && (result = WebCore::IDBKeyData::operator==(v20 + 32, (unsigned __int8 *)(v4 + 176), v15), (_DWORD)result))
          {
            if (v20 == (unsigned __int8 *)*a2)
              goto LABEL_94;
            v22 = *(unsigned __int8 **)v20;
            if (*(_QWORD *)v20)
            {
              do
              {
                v23 = v22;
                v22 = (unsigned __int8 *)*((_QWORD *)v22 + 1);
              }
              while (v22);
            }
            else
            {
              do
              {
                v23 = (unsigned __int8 *)*((_QWORD *)v20 + 2);
                v21 = *(_QWORD *)v23 == (_QWORD)v20;
                v20 = v23;
              }
              while (v21);
            }
          }
          else
          {
            v23 = v20;
          }
          if (!*(_DWORD *)(v4 + 168)
            || (result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v23 + 32), (const WebCore::IDBKeyData *)(v4 + 144), v15), (result & 0x80000000) == 0)&& (!*(_BYTE *)(v4 + 208)|| (result = WebCore::IDBKeyData::operator==(v23 + 32, (unsigned __int8 *)(v4 + 144), v35), (result & 1) == 0)))
          {
            if (!*(_BYTE *)(v4 + 224))
              *(_BYTE *)(v4 + 224) = 1;
            *(_QWORD *)(v4 + 216) = v23;
          }
        }
      }
      else
      {
        v30 = (_QWORD *)a2[1];
        v29 = a2 + 1;
        v28 = v30;
        if (v30)
        {
          do
          {
            v31 = v28;
            v28 = (_QWORD *)v28[1];
          }
          while (v28);
        }
        else
        {
          do
          {
            v31 = (_QWORD *)v29[2];
            v21 = *v31 == (_QWORD)v29;
            v29 = v31;
          }
          while (v21);
        }
        if (!*(_BYTE *)(v4 + 224))
          *(_BYTE *)(v4 + 224) = 1;
        *(_QWORD *)(v4 + 216) = v31;
        v32 = (const WebCore::IDBKeyData *)(v31 + 4);
        if (WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(v4 + 144))
          && ((result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v4 + 144), v32, v33), (int)result > 0)
           || !(_DWORD)result && *(_BYTE *)(v4 + 208))
          || (result = WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(v4 + 176)), (_DWORD)result)
          && ((result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v4 + 176), v32, v34),
               (result & 0x80000000) != 0)
           || !(_DWORD)result && *(_BYTE *)(v4 + 209)))
        {
          if (!*(_BYTE *)(v4 + 224))
            return result;
          goto LABEL_82;
        }
      }
    }
LABEL_94:
    if (!*(_BYTE *)(v4 + 224))
      return result;
    v36 = *(_QWORD *)(v4 + 216);
    *(_BYTE *)(v4 + 176) = *(_BYTE *)(v36 + 32);
    v37 = *(unsigned int *)(v4 + 200);
    v38 = *(unsigned int *)(v36 + 56);
    if ((_DWORD)v37 == -1)
    {
      if ((_DWORD)v38 == -1)
        goto LABEL_100;
    }
    else if ((_DWORD)v38 == -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E335A328[v37])(&v49, v4 + 184);
      *(_DWORD *)(v4 + 200) = -1;
LABEL_100:
      *(_BYTE *)(v4 + 209) = 1;
      return result;
    }
    v49 = v4 + 184;
    result = ((uint64_t (*)(uint64_t *))off_1E335A3B8[v38])(&v49);
    goto LABEL_100;
  }
  if (!v5)
    return result;
  if (!*(_DWORD *)(result + 168) && !*(_DWORD *)(result + 200)
    || *(_BYTE *)(result + 208)
    || *(_BYTE *)(result + 209)
    || (result = WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(result + 176)), !(_DWORD)result)
    || (result = WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(v4 + 144)), !(_DWORD)result)
    || (result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v4 + 144), (const WebCore::IDBKeyData *)(v4 + 176), a3), (_DWORD)result))
  {
    if (*(_BYTE *)(v4 + 224))
      *(_BYTE *)(v4 + 224) = 0;
    v8 = (_QWORD *)a2[1];
    v6 = (unsigned __int8 *)(a2 + 1);
    v7 = v8;
    if (v8)
    {
      v9 = v6;
      do
      {
        result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v7 + 4), (const WebCore::IDBKeyData *)(v4 + 144), a3);
        v10 = v7 + 1;
        if ((int)result >= 0)
        {
          v10 = v7;
          v9 = (unsigned __int8 *)v7;
        }
        v7 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v9 != v6)
      {
        if (!*(_BYTE *)(v4 + 208))
          goto LABEL_128;
        result = WebCore::IDBKeyData::operator==(v9 + 32, (unsigned __int8 *)(v4 + 144), a3);
        if (!(_DWORD)result)
          goto LABEL_128;
        v11 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = *(unsigned __int8 **)v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (unsigned __int8 *)*((_QWORD *)v9 + 2);
            v21 = *(_QWORD *)v12 == (_QWORD)v9;
            v9 = v12;
          }
          while (!v21);
        }
        v9 = v12;
        if (v12 != v6)
        {
LABEL_128:
          if (!*(_DWORD *)(v4 + 200)
            || (result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v9 + 32), (const WebCore::IDBKeyData *)(v4 + 176), a3), (int)result <= 0)&& (!*(_BYTE *)(v4 + 209)|| (result = WebCore::IDBKeyData::operator==(v9 + 32, (unsigned __int8 *)(v4 + 176), v24), (result & 1) == 0)))
          {
            if (!*(_BYTE *)(v4 + 224))
              *(_BYTE *)(v4 + 224) = 1;
            *(_QWORD *)(v4 + 216) = v9;
          }
        }
      }
    }
    goto LABEL_61;
  }
  v41 = (_QWORD *)a2[1];
  v39 = a2 + 1;
  v40 = v41;
  if (!v41)
    goto LABEL_109;
  v42 = v39;
  do
  {
    result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v40 + 4), (const WebCore::IDBKeyData *)(v4 + 144), a3);
    v43 = v40 + 1;
    if ((int)result >= 0)
    {
      v43 = v40;
      v42 = v40;
    }
    v40 = (_QWORD *)*v43;
  }
  while (*v43);
  if (v42 == v39
    || (result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(v4 + 144), (const WebCore::IDBKeyData *)(v42 + 4), a3), (result & 0x80000000) != 0))
  {
LABEL_109:
    v42 = v39;
  }
  if (!*(_BYTE *)(v4 + 224))
    *(_BYTE *)(v4 + 224) = 1;
  *(_QWORD *)(v4 + 216) = v42;
  if (v42 == v39)
  {
LABEL_82:
    *(_BYTE *)(v4 + 224) = 0;
    return result;
  }
LABEL_61:
  if (*(_BYTE *)(v4 + 224))
  {
    v25 = *(_QWORD *)(v4 + 216);
    *(_BYTE *)(v4 + 144) = *(_BYTE *)(v25 + 32);
    v26 = *(unsigned int *)(v4 + 168);
    v27 = *(unsigned int *)(v25 + 56);
    if ((_DWORD)v26 == -1)
    {
      if ((_DWORD)v27 == -1)
        goto LABEL_85;
    }
    else if ((_DWORD)v27 == -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E335A328[v26])(&v49, v4 + 152);
      *(_DWORD *)(v4 + 168) = -1;
LABEL_85:
      *(_BYTE *)(v4 + 208) = 1;
      return result;
    }
    v49 = v4 + 152;
    result = ((uint64_t (*)(uint64_t *))off_1E335A3B8[v27])(&v49);
    goto LABEL_85;
  }
  return result;
}

void WebCore::IDBServer::MemoryObjectStoreCursor::currentData(WebCore::IDBServer::MemoryObjectStoreCursor *this, WebCore::IDBGetResult *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t **v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  WTF *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  WTF *v35;
  _OWORD v36[3];
  __int128 v37;
  _OWORD v38[2];
  uint64_t v39;
  int v40;
  int v41;
  char v42;
  _QWORD v43[2];
  int v44;
  _BYTE v45[16];
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;

  v4 = (_QWORD *)((char *)this + 240);
  if (!*((_BYTE *)this + 224))
  {
    *((_BYTE *)this + 232) = 0;
    v8 = *((unsigned int *)this + 64);
    if ((_DWORD)v8 != -1)
    {
      if (!(_DWORD)v8)
      {
        *v4 = 0;
LABEL_21:
        v39 = 0;
        v41 = 0;
        v42 = 0;
        v43[0] = 0;
        v44 = 0;
        v45[0] = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v37 = 0u;
        memset(v38, 0, 25);
LABEL_22:
        WebCore::IDBGetResult::operator=((uint64_t)a2, (uint64_t)&v37);
        WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)&v37, v17);
        return;
      }
      ((void (*)(__int128 *, _QWORD *))off_1E335A328[v8])(&v37, v4);
    }
    *((_QWORD *)this + 30) = 0;
    *((_DWORD *)this + 64) = 0;
    goto LABEL_21;
  }
  v5 = *((_QWORD *)this + 27);
  *((_BYTE *)this + 232) = *(_BYTE *)(v5 + 32);
  v6 = *((unsigned int *)this + 64);
  v7 = *(unsigned int *)(v5 + 56);
  if ((_DWORD)v6 == -1)
  {
    if ((_DWORD)v7 == -1)
      goto LABEL_10;
  }
  else if ((_DWORD)v7 == -1)
  {
    ((void (*)(__int128 *, _QWORD *))off_1E335A328[v6])(&v37, v4);
    *((_DWORD *)this + 64) = -1;
    goto LABEL_10;
  }
  *(_QWORD *)&v37 = (char *)this + 240;
  ((void (*)(__int128 *, _QWORD *, uint64_t))off_1E335A3B8[v7])(&v37, v4, v5 + 40);
LABEL_10:
  if (*((_BYTE *)this + 130))
  {
    v37 = 0u;
    memset(v38, 0, 24);
    v9 = *((_BYTE *)this + 232);
    BYTE8(v38[1]) = v9;
    LOBYTE(v39) = 0;
    v41 = -1;
    v10 = *((unsigned int *)this + 64);
    if ((_DWORD)v10 == -1)
    {
      v42 = v9;
      LOBYTE(v43[0]) = 0;
      v44 = -1;
    }
    else
    {
      ((void (*)(_OWORD *, uint64_t *, _QWORD *))off_1E335A370[v10])(v36, &v39, v4);
      v41 = v10;
      v11 = *((_BYTE *)this + 232);
      v12 = *((unsigned int *)this + 64);
      v42 = v11;
      LOBYTE(v43[0]) = 0;
      v44 = -1;
      if ((_DWORD)v12 != -1)
      {
        ((void (*)(_OWORD *, _QWORD *, _QWORD *))off_1E335A370[v12])(v36, v43, v4);
        v44 = v12;
      }
    }
    v45[0] = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 1;
    goto LABEL_22;
  }
  v13 = (uint64_t **)*((_QWORD *)this + 17);
  v14 = *((_BYTE *)this + 232);
  LOBYTE(v37) = v14;
  BYTE8(v37) = 0;
  DWORD2(v38[0]) = -1;
  v15 = *((unsigned int *)this + 64);
  if ((_DWORD)v15 == -1)
  {
    LOBYTE(v38[1]) = v14;
    BYTE8(v38[1]) = 0;
    v40 = -1;
  }
  else
  {
    ((void (*)(_OWORD *, char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v15])(v36, (char *)&v37 + 8, v4);
    DWORD2(v38[0]) = v15;
    v16 = *((unsigned int *)this + 64);
    LOBYTE(v38[1]) = *((_BYTE *)this + 232);
    BYTE8(v38[1]) = 0;
    v40 = -1;
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(_OWORD *, char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v16])(v36, (char *)&v38[1] + 8, v4);
      v40 = v16;
    }
  }
  LOWORD(v41) = 0;
  WebCore::IDBServer::MemoryObjectStore::lowestKeyWithRecordInRange((uint64_t)v36, (const WebCore::IDBKeyRangeData *)v13, (uint64_t)&v37);
  v18 = DWORD2(v36[1]);
  if (DWORD2(v36[1]))
  {
    WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>((uint64_t)&v35, *v13[12], (unsigned __int8 *)v36);
    v18 = DWORD2(v36[1]);
    if (DWORD2(v36[1]) == -1)
      goto LABEL_29;
  }
  else
  {
    v35 = 0;
  }
  ((void (*)(char *, char *))off_1E335A328[v18])(&v51, (char *)v36 + 8);
LABEL_29:
  v20 = (unsigned int *)v35;
  if (v35)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    v22 = v35;
  }
  else
  {
    v22 = 0;
  }
  v35 = 0;
  *(_QWORD *)&v36[0] = v20;
  memset((char *)v36 + 8, 0, 32);
  if (v22)
  {
    do
    {
      v23 = __ldaxr((unsigned int *)v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)v22));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v22);
      v34 = (WTF *)*((_QWORD *)v22 + 1);
      if (v34)
      {
        *((_QWORD *)v22 + 1) = 0;
        *((_DWORD *)v22 + 4) = 0;
        WTF::fastFree(v34, v19);
      }
      WTF::fastFree(v22, v19);
    }
  }
  if (v40 != -1)
    ((void (*)(char *, char *))off_1E335A328[v40])(&v51, (char *)&v38[1] + 8);
  v40 = -1;
  if (DWORD2(v38[0]) != -1)
    ((void (*)(char *, char *))off_1E335A328[DWORD2(v38[0])])(&v51, (char *)&v37 + 8);
  v25 = *((_QWORD *)this + 17);
  v26 = v36[0];
  memset(v36, 0, 40);
  v37 = v26;
  v38[0] = v36[1];
  *(_QWORD *)&v38[1] = *(_QWORD *)&v36[2];
  v27 = *((_BYTE *)this + 232);
  BYTE8(v38[1]) = v27;
  LOBYTE(v39) = 0;
  v41 = -1;
  v28 = *((unsigned int *)this + 64);
  if ((_DWORD)v28 == -1)
  {
    v42 = v27;
    LOBYTE(v43[0]) = 0;
    v44 = -1;
  }
  else
  {
    ((void (*)(WTF **, uint64_t *, _QWORD *))off_1E335A370[v28])(&v35, &v39, v4);
    v41 = v28;
    v29 = *((_BYTE *)this + 232);
    v30 = *((unsigned int *)this + 64);
    v42 = v29;
    LOBYTE(v43[0]) = 0;
    v44 = -1;
    if ((_DWORD)v30 != -1)
    {
      ((void (*)(WTF **, _QWORD *, _QWORD *))off_1E335A370[v30])(&v35, v43, v4);
      v44 = v30;
    }
  }
  v45[0] = 0;
  v47 = 0;
  if (*(_BYTE *)(v25 + 56))
  {
    v46 = -1;
    v31 = *(unsigned int *)(v25 + 48);
    if ((_DWORD)v31 != -1)
    {
      ((void (*)(WTF **, _BYTE *, uint64_t))off_1E335A4A0[v31])(&v35, v45, v25 + 32);
      v46 = v31;
    }
    v47 = 1;
  }
  v48 = 0;
  v49 = 0;
  v50 = 1;
  WebCore::IDBGetResult::operator=((uint64_t)a2, (uint64_t)&v37);
  WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)&v37, v32);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v36, v33);
}

void WebCore::IDBServer::MemoryObjectStoreCursor::iterate(WebCore::IDBServer::MemoryObjectStoreCursor *this, const WebCore::IDBKeyData *a2, const WebCore::IDBKeyData *a3, unsigned int a4, WebCore::IDBGetResult *a5)
{
  const WTF::String *v9;
  int v10;
  const WTF::String *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  const WTF::String *v17;
  int v18;
  const WTF::String *v19;
  int v20;
  const WTF::String *v21;
  uint64_t v22;
  uint64_t v23;
  const WTF::String *v24;
  const WTF::String *v25;
  int v26;
  const WTF::String *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  const WTF::String *v31;
  uint64_t v32;
  uint64_t v33;
  const WTF::String *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  const WebCore::IDBKeyData *v42;
  const WTF::String *v43;
  int v44;
  const WTF::String *v45;
  int v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  const WebCore::IDBKeyData *v51;
  const WTF::String *v52;
  int v53;
  const WTF::String *v54;
  int v55;
  const WTF::String *v56;
  int v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  WTF::StringImpl *v61;
  _OWORD v62[3];
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  int v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;

  if (!*(_QWORD *)(*((_QWORD *)this + 17) + 104)
    || WebCore::IDBKeyData::isValid(a2)
    && (WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 56))
     && ((v10 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 56), a2, v9),
          v10 > 0)
      || !v10 && *((_BYTE *)this + 120))
     || WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 88))
     && ((v12 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 88), a2, v11), v12 < 0)|| !v12 && *((_BYTE *)this + 121))))
  {
    *((_BYTE *)this + 232) = 0;
    v13 = *((unsigned int *)this + 64);
    if ((_DWORD)v13 != -1)
    {
      v14 = (_QWORD *)((char *)this + 240);
      if (!(_DWORD)v13)
      {
        *v14 = 0;
LABEL_129:
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = 0;
        memset(v62, 0, 41);
        WebCore::IDBGetResult::operator=((uint64_t)a5, (uint64_t)v62);
        WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v62, v61);
        return;
      }
      ((void (*)(_OWORD *, _QWORD *, const WebCore::IDBKeyData *))off_1E335A328[v13])(v62, v14, a3);
    }
    *((_QWORD *)this + 30) = 0;
    *((_DWORD *)this + 64) = 0;
    goto LABEL_129;
  }
  v15 = *(_QWORD **)(*((_QWORD *)this + 17) + 104);
  if (!v15)
    goto LABEL_122;
  v16 = *((unsigned __int8 *)this + 224);
  if (*((unsigned __int8 *)this + 129) <= 1u)
  {
    if (*((_BYTE *)this + 224))
    {
      if ((WebCore::IDBKeyData::isValid(a2) & 1) == 0)
      {
        if (a4 <= 1)
          v37 = 1;
        else
          v37 = a4;
        goto LABEL_60;
      }
      goto LABEL_18;
    }
    if (!WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 232)))
      goto LABEL_122;
    *((_BYTE *)this + 144) = *((_BYTE *)this + 232);
    v32 = *((unsigned int *)this + 42);
    v33 = *((unsigned int *)this + 64);
    if ((_DWORD)v32 == -1)
    {
      if ((_DWORD)v33 == -1)
        goto LABEL_103;
    }
    else if ((_DWORD)v33 == -1)
    {
      ((void (*)(_OWORD *, char *))off_1E335A328[v32])(v62, (char *)this + 152);
      *((_DWORD *)this + 42) = -1;
      goto LABEL_103;
    }
    *(_QWORD *)&v62[0] = (char *)this + 152;
    ((void (*)(_OWORD *))off_1E335A3B8[v33])(v62);
LABEL_103:
    *((_BYTE *)this + 208) = 0;
    WebCore::IDBServer::MemoryObjectStoreCursor::setFirstInRemainingRange((uint64_t)this, v15, v31);
    if (!*((_BYTE *)this + 224))
      goto LABEL_122;
    if (!WebCore::IDBKeyData::isValid(a2))
    {
      if (!*((_BYTE *)this + 224))
        goto LABEL_130;
      if (a4 <= 1)
        v57 = 1;
      else
        v57 = a4;
      v58 = (int)WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(*((_QWORD *)this + 27) + 32), (WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 232), v56) > 0;
      v37 = v57 - v58;
      if (v57 != v58)
      {
LABEL_60:
        while (*((_BYTE *)this + 224))
        {
          v38 = (_QWORD *)*((_QWORD *)this + 27);
          v39 = (_QWORD *)v38[1];
          if (v39)
          {
            do
            {
              v40 = v39;
              v39 = (_QWORD *)*v39;
            }
            while (v39);
          }
          else
          {
            do
            {
              v40 = (_QWORD *)v38[2];
              v41 = *v40 == (_QWORD)v38;
              v38 = v40;
            }
            while (!v41);
          }
          *((_QWORD *)this + 27) = v40;
          if (v40 == v15 + 1)
            goto LABEL_100;
          v42 = (const WebCore::IDBKeyData *)(v40 + 4);
          if (WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 56)))
          {
            v44 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 56), v42, v43);
            if (v44 > 0 || !v44 && *((_BYTE *)this + 120))
              goto LABEL_99;
          }
          if (WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 88)))
          {
            v46 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 88), v42, v45);
            if (v46 < 0 || !v46 && *((_BYTE *)this + 121))
              goto LABEL_99;
          }
          if (!--v37)
            goto LABEL_122;
        }
        goto LABEL_130;
      }
      goto LABEL_122;
    }
LABEL_18:
    if (!WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 56))
      || (v18 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 56), a2, v17), v18 <= 0)&& (v18 || !*((_BYTE *)this + 120)))
    {
      if (!WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 88))
        || (v20 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 88), a2, v19), (v20 & 0x80000000) == 0)&& (v20 || !*((_BYTE *)this + 121)))
      {
        if (*((_BYTE *)this + 224))
        {
          if ((WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(*((_QWORD *)this + 27) + 32), a2, v19) & 0x80000000) == 0)
            goto LABEL_122;
          *((_BYTE *)this + 144) = *(_BYTE *)a2;
          v22 = *((unsigned int *)this + 42);
          v23 = *((unsigned int *)a2 + 6);
          if ((_DWORD)v22 == -1)
          {
            if ((_DWORD)v23 == -1)
              goto LABEL_120;
          }
          else if ((_DWORD)v23 == -1)
          {
            ((void (*)(_OWORD *, char *))off_1E335A328[v22])(v62, (char *)this + 152);
            *((_DWORD *)this + 42) = -1;
LABEL_120:
            *((_BYTE *)this + 208) = 0;
            goto LABEL_121;
          }
          *(_QWORD *)&v62[0] = (char *)this + 152;
          ((void (*)(_OWORD *))off_1E335A3B8[v23])(v62);
          goto LABEL_120;
        }
        goto LABEL_130;
      }
    }
LABEL_122:
    *((_BYTE *)this + 232) = 0;
    v59 = *((unsigned int *)this + 64);
    if ((_DWORD)v59 != -1)
    {
      v60 = (_QWORD *)((char *)this + 240);
      if (!(_DWORD)v59)
      {
        *v60 = 0;
        goto LABEL_127;
      }
      ((void (*)(_OWORD *, _QWORD *))off_1E335A328[v59])(v62, v60);
    }
    *((_QWORD *)this + 30) = 0;
    *((_DWORD *)this + 64) = 0;
LABEL_127:
    if (*((_BYTE *)this + 224))
    {
      WebCore::IDBServer::MemoryObjectStoreCursor::currentData(this, a5);
      return;
    }
    goto LABEL_129;
  }
  if (!*((_BYTE *)this + 224))
  {
    if (!WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 232)))
      goto LABEL_122;
    *((_BYTE *)this + 176) = *((_BYTE *)this + 232);
    v35 = *((unsigned int *)this + 50);
    v36 = *((unsigned int *)this + 64);
    if ((_DWORD)v35 == -1)
    {
      if ((_DWORD)v36 == -1)
        goto LABEL_113;
    }
    else if ((_DWORD)v36 == -1)
    {
      ((void (*)(_OWORD *, char *))off_1E335A328[v35])(v62, (char *)this + 184);
      *((_DWORD *)this + 50) = -1;
      goto LABEL_113;
    }
    *(_QWORD *)&v62[0] = (char *)this + 184;
    ((void (*)(_OWORD *))off_1E335A3B8[v36])(v62);
LABEL_113:
    *((_BYTE *)this + 209) = 0;
    WebCore::IDBServer::MemoryObjectStoreCursor::setFirstInRemainingRange((uint64_t)this, v15, v34);
    if (!*((_BYTE *)this + 224))
      goto LABEL_122;
  }
  if (*((_QWORD **)this + 27) == v15 + 1)
    goto LABEL_122;
  if (WebCore::IDBKeyData::isValid(a2))
  {
    if (WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 56)))
    {
      v26 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 56), a2, v25);
      if (v26 > 0 || !v26 && *((_BYTE *)this + 120))
        goto LABEL_122;
    }
    if (WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 88)))
    {
      v28 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 88), a2, v27);
      if (v28 < 0 || !v28 && *((_BYTE *)this + 121))
        goto LABEL_122;
    }
    if (!*((_BYTE *)this + 224))
      goto LABEL_130;
    if ((int)WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(*((_QWORD *)this + 27) + 32), a2, v27) < 1)
      goto LABEL_122;
    *((_BYTE *)this + 176) = *(_BYTE *)a2;
    v29 = *((unsigned int *)this + 50);
    v30 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v29 == -1)
    {
      if ((_DWORD)v30 == -1)
        goto LABEL_117;
    }
    else if ((_DWORD)v30 == -1)
    {
      ((void (*)(_OWORD *, char *))off_1E335A328[v29])(v62, (char *)this + 184);
      *((_DWORD *)this + 50) = -1;
LABEL_117:
      *((_BYTE *)this + 209) = 0;
LABEL_121:
      WebCore::IDBServer::MemoryObjectStoreCursor::setFirstInRemainingRange((uint64_t)this, v15, v21);
      goto LABEL_122;
    }
    *(_QWORD *)&v62[0] = (char *)this + 184;
    ((void (*)(_OWORD *))off_1E335A3B8[v30])(v62);
    goto LABEL_117;
  }
  if (a4 <= 1)
    v47 = 1;
  else
    v47 = a4;
  if (v16)
  {
LABEL_83:
    while (*((_BYTE *)this + 224))
    {
      v48 = (_QWORD *)*((_QWORD *)this + 27);
      if (v48 == (_QWORD *)*v15)
        goto LABEL_100;
      v49 = (_QWORD *)*v48;
      if (*v48)
      {
        do
        {
          v50 = v49;
          v49 = (_QWORD *)v49[1];
        }
        while (v49);
      }
      else
      {
        do
        {
          v50 = (_QWORD *)v48[2];
          v41 = *v50 == (_QWORD)v48;
          v48 = v50;
        }
        while (v41);
      }
      *((_QWORD *)this + 27) = v50;
      v51 = (const WebCore::IDBKeyData *)(v50 + 4);
      if (WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 56))
        && ((v53 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 56), v51, v52), v53 > 0)|| !v53 && *((_BYTE *)this + 120))|| WebCore::IDBKeyData::isValid((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 88))&& ((v55 = WebCore::IDBKeyData::compare((WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 88), v51, v54), v55 < 0)|| !v55 && *((_BYTE *)this + 121)))
      {
LABEL_99:
        if (!*((_BYTE *)this + 224))
          goto LABEL_122;
LABEL_100:
        *((_BYTE *)this + 224) = 0;
        goto LABEL_122;
      }
      if (!--v47)
        goto LABEL_122;
    }
    goto LABEL_130;
  }
  if (*((_BYTE *)this + 224))
  {
    v47 += (int)WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(*((_QWORD *)this + 27) + 32), (WebCore::IDBServer::MemoryObjectStoreCursor *)((char *)this + 232), v24) >> 31;
    if (v47)
      goto LABEL_83;
    goto LABEL_122;
  }
LABEL_130:
  __break(1u);
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::supportsSimultaneousTransactions(WebCore::IDBServer::MemoryIDBBackingStore *this)
{
  return 1;
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::isEphemeral(WebCore::IDBServer::MemoryIDBBackingStore *this)
{
  return 1;
}

void WebCore::IDBServer::MemoryIDBBackingStore::fullDatabasePath(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::hasTransaction(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(result, *a2, a2[1]) != 0;
  return result;
}

void WebCore::IDBServer::MemoryObjectStoreCursor::~MemoryObjectStoreCursor(WebCore::IDBServer::MemoryObjectStoreCursor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;

  *(_QWORD *)this = off_1E335A308;
  v2 = *((unsigned int *)this + 64);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E335A328[v2])(&v5, (char *)this + 240);
  *((_DWORD *)this + 64) = -1;
  v3 = *((unsigned int *)this + 50);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E335A328[v3])(&v6, (char *)this + 184);
  *((_DWORD *)this + 50) = -1;
  v4 = *((unsigned int *)this + 42);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E335A328[v4])(&v7, (char *)this + 152);
  *((_DWORD *)this + 42) = -1;
  WebCore::IDBServer::MemoryCursor::~MemoryCursor(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  char v7;
  char v8;
  char v9;

  *(_QWORD *)this = off_1E335A308;
  v2 = *((unsigned int *)this + 64);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E335A328[v2])(&v7, (char *)this + 240);
  *((_DWORD *)this + 64) = -1;
  v3 = *((unsigned int *)this + 50);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E335A328[v3])(&v8, (char *)this + 184);
  *((_DWORD *)this + 50) = -1;
  v4 = *((unsigned int *)this + 42);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E335A328[v4])(&v9, (char *)this + 152);
  *((_DWORD *)this + 42) = -1;
  WebCore::IDBServer::MemoryCursor::~MemoryCursor(this);
  WTF::fastFree(v5, v6);
}

WTF::StringImpl ***WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(WTF::StringImpl ***a1, void *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WebCore::IDBServer::MemoryIndex *v7;
  WTF *v8;
  void *v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              WebCore::IDBServer::MemoryIndex::~MemoryIndex(v7, a2);
              WTF::fastFree(v8, v9);
              v6 = *v5;
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

WTF::StringImpl ***WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(WTF::StringImpl ***a1, void *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WebCore::IDBServer::MemoryObjectStore *v7;
  WTF *v8;
  void *v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v7, a2);
              WTF::fastFree(v8, v9);
              v6 = *v5;
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  char v14;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = v3 + 40 * i;
        if (!*(_BYTE *)v6)
        {
          v7 = v3 + 40 * i;
          v8 = *(_QWORD *)(v7 + 32);
          *(_QWORD *)(v7 + 32) = 0;
          if (v8)
          {
            do
            {
              v9 = __ldaxr((unsigned int *)v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, (unsigned int *)v8));
            if (!v10)
            {
              atomic_store(1u, (unsigned int *)v8);
              v12 = *(WTF **)(v8 + 8);
              if (v12)
              {
                *(_QWORD *)(v8 + 8) = 0;
                *(_DWORD *)(v8 + 16) = 0;
                WTF::fastFree(v12, a2);
              }
              WTF::fastFree((WTF *)v8, a2);
            }
          }
          v11 = *(unsigned int *)(v6 + 24);
          if ((_DWORD)v11 != -1)
            ((void (*)(char *, uint64_t))off_1E335A328[v11])(&v14, v6 + 8);
          *(_DWORD *)(v6 + 24) = -1;
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t std::default_delete<WebCore::IDBServer::IndexValueStore>::operator()[abi:sn180100](WTF **a1)
{
  void *v2;
  WTF *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  char v12;

  std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy((uint64_t)(a1 + 1), a1[2]);
  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = (_QWORD *)((char *)v3 + 32);
      do
      {
        if (!*((_BYTE *)v5 - 32))
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            v7 = *(_QWORD *)v6;
            if (*(_BYTE *)(v6 + 8))
            {
              if (v7)
              {
                v8 = *(unsigned int *)(v7 + 24);
                if ((_DWORD)v8 != -1)
                  ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v8])(&v12, v7 + 8);
                *(_DWORD *)(v7 + 24) = -1;
                WTF::fastFree((WTF *)v7, v2);
              }
            }
            else if (v7)
            {
              std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(*(_QWORD *)v6, *(WTF **)(v7 + 8));
              MEMORY[0x19AEA7644](v7, 0x1020C4062D53EE8);
            }
            WTF::fastFree((WTF *)v6, v2);
          }
          v9 = *((unsigned int *)v5 - 2);
          if ((_DWORD)v9 != -1)
            ((void (*)(char *, _QWORD *))off_1E335A328[v9])(&v11, v5 - 3);
          *((_DWORD *)v5 - 2) = -1;
        }
        v5 += 5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)((char *)v3 - 16), v2);
  }
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJDnS9_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E335A328[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJDnS9_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v8;

  v3 = *((unsigned int *)a2 + 3);
  result = *a2;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    v6 = (_DWORD *)((char *)result + 24);
    do
    {
      v7 = *v6;
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _DWORD *))off_1E335A328[v7])(&v8, v6 - 4);
      *v6 = -1;
      v6 += 8;
      v5 -= 32;
    }
    while (v5);
    result = *a2;
  }
  if (result)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 8) = 0;
  v4 = a2 + 8;
  *(_DWORD *)(a2 + 24) = -1;
  v5 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E335A370[v5])(&v7, v4, a3 + 8);
    *(_DWORD *)(a2 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = WTF::fastMalloc((WTF *)(32 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      v7 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)a3 + 32 * v7;
        v9 = (_DWORD *)(v6 + 24);
        v10 = *(_QWORD *)a3 + 8;
        do
        {
          v11 = v10 - 8;
          *((_BYTE *)v9 - 24) = *(_BYTE *)(v10 - 8);
          *((_BYTE *)v9 - 16) = 0;
          *v9 = -1;
          v12 = *(unsigned int *)(v10 + 16);
          if ((_DWORD)v12 != -1)
          {
            ((void (*)(char *, _DWORD *, uint64_t))off_1E335A370[v12])(&v13, v9 - 4, v10);
            *v9 = v12;
          }
          v9 += 8;
          v10 += 32;
        }
        while (v11 + 32 != v8);
      }
    }
  }
}

uint64_t WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v3;
  unsigned int v4;
  const WTF::StringImpl *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned __int16 v15;
  char v16;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v14 = -1640531527;
    v15 = 0;
    v16 = 0;
    WebCore::add((uint64_t)&v14, (uint64_t)a2);
    v6 = v14;
    if (v16)
    {
      v13 = (v14 + v15) ^ ((v14 + v15) << 11);
      v6 = v13 + (v13 >> 17);
    }
    v7 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
    v8 = (v7 ^ (4 * v7)) + ((v7 ^ (4 * v7)) >> 15);
    v9 = v8 ^ (v8 << 10);
    if (!v9)
      v9 = 0x800000;
    v10 = v9 & v4;
    v11 = v3 + 40 * (v9 & v4);
    if (*(_DWORD *)(v11 + 24))
    {
      v12 = 1;
      while (*(_BYTE *)v11 || (WebCore::IDBKeyData::operator==((unsigned __int8 *)v11, a2, v5) & 1) == 0)
      {
        v10 = (v10 + v12) & v4;
        v11 = v3 + 40 * v10;
        ++v12;
        if (!*(_DWORD *)(v11 + 24))
          return 0;
      }
      return *(_QWORD *)(v11 + 32);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::add(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  int v32;

  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 == -1)
    v2 = -1;
  if (v2 >= 9)
  {
    __break(0xC471u);
    JUMPOUT(0x1953C6DA0);
  }
  v3 = (unsigned int *)result;
  v4 = *(_DWORD *)result + dword_1968DE22C[v2];
  v5 = (v4 ^ (v4 << 16)) + ((v4 ^ (v4 << 16)) >> 11);
  *(_DWORD *)result = v5;
  if (!*(_DWORD *)(a2 + 24))
    ++v5;
  v6 = (v5 ^ (v5 << 16)) + ((v5 ^ (v5 << 16)) >> 11);
  *(_DWORD *)result = v6;
  v7 = *(_DWORD *)(a2 + 24);
  if (v7 == -1)
    v8 = -1;
  else
    v8 = *(unsigned int *)(a2 + 24);
  switch(v8)
  {
    case 0:
    case 1:
    case 7:
    case 8:
      return result;
    case 2:
      if (v7 != 2)
        goto LABEL_54;
      v9 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        v11 = 32 * v9;
        do
        {
          result = WebCore::add(v3, v10);
          v10 += 32;
          v11 -= 32;
        }
        while (v11);
      }
      return result;
    case 3:
      if (v7 != 3)
        goto LABEL_54;
      result = *(_QWORD *)(a2 + 8);
      if (result)
      {
        v12 = *(_DWORD *)(result + 4);
        *(_DWORD *)result += 2;
        v13 = v12 & 0xFFFFFFFE;
        if ((v12 & 0xFFFFFFFE) != 0)
        {
          v14 = 0;
          v15 = *v3;
          do
          {
            v16 = *(unsigned int *)(result + 4);
            if (v14 >= v16)
            {
              v18 = 0;
            }
            else
            {
              v17 = *(_QWORD *)(result + 8);
              if ((*(_BYTE *)(result + 16) & 4) != 0)
                v18 = *(unsigned __int8 *)(v17 + v14);
              else
                v18 = *(unsigned __int16 *)(v17 + 2 * v14);
            }
            v19 = v14 + 1;
            if (v14 + 1 >= v16)
            {
              v21 = 0;
            }
            else
            {
              v20 = *(_QWORD *)(result + 8);
              if ((*(_BYTE *)(result + 16) & 4) != 0)
                v21 = *(unsigned __int8 *)(v20 + v14 + 1);
              else
                v21 = *(unsigned __int16 *)(v20 + 2 * v14 + 2);
            }
            v22 = (v18 << 11) ^ ((v15 + v21) << 16) ^ (v15 + v21);
            v15 = v22 + (v22 >> 11);
            *v3 = v15;
            v14 = v19 + 1;
          }
          while (v19 + 1 < v13);
        }
        if ((v12 & 1) != 0)
        {
          if (*(_DWORD *)(result + 4) <= v13)
          {
            v32 = 0;
          }
          else
          {
            v31 = *(_QWORD *)(result + 8);
            if ((*(_BYTE *)(result + 16) & 4) != 0)
              v32 = *(unsigned __int8 *)(v31 + v13);
            else
              v32 = *(unsigned __int16 *)(v31 + 2 * v13);
          }
          *v3 = ((*v3 + v32) ^ ((*v3 + v32) << 16)) + (((*v3 + v32) ^ ((*v3 + v32) << 16)) >> 11);
        }
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    case 4:
      if (v7 == 4)
        goto LABEL_34;
      goto LABEL_54;
    case 5:
      if (v7 != 5)
        goto LABEL_54;
LABEL_34:
      v23 = *(_QWORD *)(a2 + 8);
      v24 = (v23 >> 5) & 0x7FFF800 ^ ((v6 + (unsigned __int16)v23) << 16) ^ (v6 + (unsigned __int16)v23);
      v25 = (v23 >> 37) & 0x7FFF800 ^ ((v24 + WORD2(v23) + (v24 >> 11)) << 16) ^ (v24 + WORD2(v23) + (v24 >> 11));
      goto LABEL_35;
    case 6:
      if (v7 != 6)
      {
LABEL_54:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_55:
        __break(0xC471u);
        JUMPOUT(0x1953C6DC4);
      }
      v26 = *(_QWORD *)(a2 + 8);
      if (v26)
      {
        v27 = (v6 ^ (v6 << 16)) + ((v6 ^ (v6 << 16)) >> 11);
        *(_DWORD *)result = v27;
        v28 = *(unsigned int *)(v26 + 20);
        if ((_DWORD)v28)
        {
          v29 = *(unsigned __int8 **)(v26 + 8);
          do
          {
            v30 = *v29++;
            v27 = ((v27 + v30) ^ ((v27 + v30) << 16)) + (((v27 + v30) ^ ((v27 + v30) << 16)) >> 11);
            *(_DWORD *)result = v27;
            --v28;
          }
          while (v28);
        }
      }
      else
      {
        v25 = (v6 + 1) ^ ((v6 + 1) << 16);
LABEL_35:
        *(_DWORD *)result = v25 + (v25 >> 11);
      }
      return result;
    default:
      goto LABEL_55;
  }
}

uint64_t WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t result;
  char v49;
  char v50;
  char v51;
  int v52;
  unsigned __int16 v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    while (1)
    {
      v14 = v4 + 40 * v11;
      if (!*(_BYTE *)v14)
        break;
LABEL_58:
      if (++v11 == v13)
        goto LABEL_61;
    }
    if (*(_DWORD *)(v14 + 24))
    {
      v15 = *a1;
      if (*a1)
        v16 = *(_DWORD *)(v15 - 8);
      else
        v16 = 0;
      v52 = -1640531527;
      v53 = 0;
      v54 = 0;
      WebCore::add((uint64_t)&v52, v4 + 40 * v11);
      v22 = v52;
      if (v54)
      {
        v45 = (v52 + v53) ^ ((v52 + v53) << 11);
        v22 = v45 + (v45 >> 17);
      }
      v23 = 0;
      v24 = (v22 ^ (8 * v22)) + ((v22 ^ (8 * v22)) >> 5);
      v25 = (v24 ^ (4 * v24)) + ((v24 ^ (4 * v24)) >> 15);
      v26 = v25 ^ (v25 << 10);
      if (v26)
        v27 = v26;
      else
        v27 = 0x800000;
      do
      {
        v28 = v27 & v16;
        v29 = v15 + 40 * (v27 & v16);
        v27 = ++v23 + (v27 & v16);
      }
      while (*(_DWORD *)(v29 + 24));
      v30 = v15 + 40 * v28;
      v33 = *(_QWORD *)(v30 + 32);
      v31 = (_QWORD *)(v30 + 32);
      v32 = v33;
      *v31 = 0;
      if (v33)
      {
        v34 = *(_QWORD *)v32;
        if (*(_BYTE *)(v32 + 8))
        {
          if (v34)
          {
            v35 = *(unsigned int *)(v34 + 24);
            if ((_DWORD)v35 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v35])(&v57, v34 + 8);
            *(_DWORD *)(v34 + 24) = -1;
            WTF::fastFree((WTF *)v34, v21);
          }
        }
        else if (v34)
        {
          std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(*(_QWORD *)v32, *(WTF **)(v34 + 8));
          MEMORY[0x19AEA7644](v34, 0x1020C4062D53EE8);
        }
        WTF::fastFree((WTF *)v32, v21);
        v36 = *(unsigned int *)(v29 + 24);
        if ((_DWORD)v36 != -1)
LABEL_35:
          ((void (*)(char *, uint64_t))off_1E335A328[v36])(&v55, v29 + 8);
        *(_BYTE *)v29 = *(_BYTE *)v14;
        *(_BYTE *)(v29 + 8) = 0;
        v8 = (void *)(v29 + 8);
        *(_DWORD *)(v29 + 24) = -1;
        v37 = *(unsigned int *)(v14 + 24);
        if ((_DWORD)v37 != -1)
        {
          ((void (*)(char *, void *, uint64_t))off_1E335A400[v37])(&v56, v8, v14 + 8);
          *(_DWORD *)(v29 + 24) = v37;
        }
        v38 = v4 + 40 * v11;
        v39 = *(_QWORD *)(v38 + 32);
        *(_QWORD *)(v38 + 32) = 0;
        *v31 = v39;
        v40 = *(_QWORD *)(v38 + 32);
        *(_QWORD *)(v38 + 32) = 0;
        if (v40)
        {
          v41 = *(_QWORD *)v40;
          if (*(_BYTE *)(v40 + 8))
          {
            if (v41)
            {
              v42 = *(unsigned int *)(v41 + 24);
              if ((_DWORD)v42 != -1)
                ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v42])(&v58, v41 + 8);
              *(_DWORD *)(v41 + 24) = -1;
              WTF::fastFree((WTF *)v41, v8);
            }
          }
          else if (v41)
          {
            std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(*(_QWORD *)v40, *(WTF **)(v41 + 8));
            MEMORY[0x19AEA7644](v41, 0x1020C4062D53EE8);
          }
          WTF::fastFree((WTF *)v40, v8);
        }
        v43 = *(unsigned int *)(v14 + 24);
        if ((_DWORD)v43 != -1)
          ((void (*)(char *, uint64_t))off_1E335A328[v43])(&v50, v14 + 8);
        *(_DWORD *)(v14 + 24) = -1;
        if (v14 == a3)
          v12 = v29;
        goto LABEL_58;
      }
      v36 = 0;
      goto LABEL_35;
    }
    v17 = v4 + 40 * v11;
    v18 = *(_QWORD *)(v17 + 32);
    *(_QWORD *)(v17 + 32) = 0;
    if (v18)
    {
      v19 = *(_QWORD *)v18;
      if (*(_BYTE *)(v18 + 8))
      {
        if (v19)
        {
          v20 = *(unsigned int *)(v19 + 24);
          if ((_DWORD)v20 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v20])(&v51, v19 + 8);
          *(_DWORD *)(v19 + 24) = -1;
          WTF::fastFree((WTF *)v19, v8);
        }
      }
      else if (v19)
      {
        std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(*(_QWORD *)v18, *(WTF **)(v19 + 8));
        MEMORY[0x19AEA7644](v19, 0x1020C4062D53EE8);
      }
      WTF::fastFree((WTF *)v18, v8);
      v44 = *(unsigned int *)(v14 + 24);
      if ((_DWORD)v44 == -1)
        goto LABEL_57;
    }
    else
    {
      v44 = 0;
    }
    ((void (*)(char *, uint64_t))off_1E335A328[v44])(&v49, v14 + 8);
LABEL_57:
    *(_DWORD *)(v14 + 24) = -1;
    goto LABEL_58;
  }
  v12 = 0;
  result = 0;
  if (v4)
  {
LABEL_61:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v5;
  const WTF::StringImpl *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v15;
  int v16;
  unsigned __int16 v17;
  char v18;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v16 = -1640531527;
  v17 = 0;
  v18 = 0;
  WebCore::add((uint64_t)&v16, (uint64_t)a2);
  v7 = v16;
  if (v18)
  {
    v15 = (v16 + v17) ^ ((v16 + v17) << 11);
    v7 = v15 + (v15 >> 17);
  }
  v8 = (v7 ^ (8 * v7)) + ((v7 ^ (8 * v7)) >> 5);
  v9 = (v8 ^ (4 * v8)) + ((v8 ^ (4 * v8)) >> 15);
  v10 = v9 ^ (v9 << 10);
  if (!v10)
    v10 = 0x800000;
  v11 = v10 & v5;
  v12 = v2 + 40 * (v10 & v5);
  if (!*(_DWORD *)(v12 + 24))
  {
LABEL_11:
    if (*a1)
      return *a1 + 40 * *(unsigned int *)(*a1 - 4);
    return 0;
  }
  v13 = 1;
  while (*(_BYTE *)v12 || (WebCore::IDBKeyData::operator==((unsigned __int8 *)v12, a2, v6) & 1) == 0)
  {
    v11 = (v11 + v13) & v5;
    v12 = v2 + 40 * v11;
    ++v13;
    if (!*(_DWORD *)(v12 + 24))
      goto LABEL_11;
  }
  return v12;
}

uint64_t WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::remove(uint64_t result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char v14;
  char v15;

  v3 = (uint64_t *)result;
  v4 = a2[6];
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E335A328[v4])(&v14, a2 + 2);
  a2[6] = -1;
  *(_BYTE *)a2 = 1;
  v5 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)v5;
    if (*(_BYTE *)(v5 + 8))
    {
      if (v6)
      {
        v7 = *(unsigned int *)(v6 + 24);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v7])(&v15, v6 + 8);
        *(_DWORD *)(v6 + 24) = -1;
        WTF::fastFree((WTF *)v6, a2);
      }
    }
    else if (v6)
    {
      std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(*(_QWORD *)v5, *(WTF **)(v6 + 8));
      MEMORY[0x19AEA7644](v6, 0x1020C4062D53EE8);
    }
    result = WTF::fastFree((WTF *)v5, a2);
  }
  ++*(_DWORD *)(*v3 - 16);
  v8 = *v3;
  if (*v3)
    v9 = *(_DWORD *)(v8 - 12) - 1;
  else
    v9 = -1;
  *(_DWORD *)(v8 - 12) = v9;
  v10 = *v3;
  if (*v3)
  {
    v11 = 6 * *(_DWORD *)(v10 - 12);
    v12 = *(_DWORD *)(v10 - 4);
    if (v11 < v12 && v12 >= 9)
      return WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,std::unique_ptr<WebCore::IDBServer::IndexValueEntry>,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::rehash(v3, v12 >> 1, 0);
  }
  return result;
}

WebCore::IDBServer::MemoryObjectStore *WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>::add(WebCore::IDBServer::MemoryObjectStore *result, uint64_t *a2, _QWORD *a3)
{
  WebCore::IDBServer::MemoryObjectStore *v5;
  uint64_t v6;
  char v7;
  int v8;
  WebCore::IDBServer::MemoryObjectStore *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  WebCore::IDBServer::MemoryObjectStore **v14;
  WebCore::IDBServer::MemoryObjectStore *v15;
  WebCore::IDBServer::MemoryObjectStore **v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  WTF *v28;
  void *v29;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (WebCore::IDBServer::MemoryObjectStore *)WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = (WebCore::IDBServer::MemoryObjectStore *)*a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (WebCore::IDBServer::MemoryObjectStore **)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v20;
        goto LABEL_36;
      }
      if (v15 == (WebCore::IDBServer::MemoryObjectStore *)-1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (WebCore::IDBServer::MemoryObjectStore **)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = (WebCore::IDBServer::MemoryObjectStore *)*a3;
      v14 = v16;
    }
  }
  *a3 = 0;
  result = *v14;
  *v14 = v9;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(result, a2);
      result = (WebCore::IDBServer::MemoryObjectStore *)WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_26;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
LABEL_31:
      result = (WebCore::IDBServer::MemoryObjectStore *)WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>::rehash(a2, v25, v14);
      v14 = (WebCore::IDBServer::MemoryObjectStore **)result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_35;
    }
LABEL_26:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_31;
  }
LABEL_35:
  v27 = v21 + 8 * v24;
  v26 = 1;
LABEL_36:
  *(_QWORD *)v5 = v14;
  *((_QWORD *)v5 + 1) = v27;
  *((_BYTE *)v5 + 16) = v26;
  return result;
}

WebCore::IDBServer::MemoryObjectStore **WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>::rehash(uint64_t *a1, unsigned int a2, WebCore::IDBServer::MemoryObjectStore **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WebCore::IDBServer::MemoryObjectStore **v12;
  WebCore::IDBServer::MemoryObjectStore **v13;
  WebCore::IDBServer::MemoryObjectStore *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::IDBServer::MemoryObjectStore **v24;
  WebCore::IDBServer::MemoryObjectStore *v25;
  WebCore::IDBServer::MemoryObjectStore *v26;
  WTF *v27;
  void *v28;
  WebCore::IDBServer::MemoryObjectStore **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WebCore::IDBServer::MemoryObjectStore **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (WebCore::IDBServer::MemoryObjectStore *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (WebCore::IDBServer::MemoryObjectStore **)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
            {
              WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v26, v10);
              WTF::fastFree(v27, v28);
            }
            else
            {
              --*(_DWORD *)v26;
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebCore::IDBServer::MemoryIndex *WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>::add(WebCore::IDBServer::MemoryIndex *result, uint64_t *a2, _QWORD *a3)
{
  WebCore::IDBServer::MemoryIndex *v5;
  uint64_t v6;
  char v7;
  int v8;
  WebCore::IDBServer::MemoryIndex *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  WebCore::IDBServer::MemoryIndex **v14;
  WebCore::IDBServer::MemoryIndex *v15;
  WebCore::IDBServer::MemoryIndex **v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  WTF *v28;
  void *v29;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (WebCore::IDBServer::MemoryIndex *)WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = (WebCore::IDBServer::MemoryIndex *)*a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (WebCore::IDBServer::MemoryIndex **)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v20;
        goto LABEL_36;
      }
      if (v15 == (WebCore::IDBServer::MemoryIndex *)-1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (WebCore::IDBServer::MemoryIndex **)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = (WebCore::IDBServer::MemoryIndex *)*a3;
      v14 = v16;
    }
  }
  *a3 = 0;
  result = *v14;
  *v14 = v9;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::IDBServer::MemoryIndex::~MemoryIndex(result, a2);
      result = (WebCore::IDBServer::MemoryIndex *)WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_26;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
LABEL_31:
      result = (WebCore::IDBServer::MemoryIndex *)WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>::rehash(a2, v25, v14);
      v14 = (WebCore::IDBServer::MemoryIndex **)result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_35;
    }
LABEL_26:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_31;
  }
LABEL_35:
  v27 = v21 + 8 * v24;
  v26 = 1;
LABEL_36:
  *(_QWORD *)v5 = v14;
  *((_QWORD *)v5 + 1) = v27;
  *((_BYTE *)v5 + 16) = v26;
  return result;
}

WebCore::IDBServer::MemoryIndex **WTF::HashTable<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>::rehash(uint64_t *a1, unsigned int a2, WebCore::IDBServer::MemoryIndex **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WebCore::IDBServer::MemoryIndex **v12;
  WebCore::IDBServer::MemoryIndex **v13;
  WebCore::IDBServer::MemoryIndex *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::IDBServer::MemoryIndex **v24;
  WebCore::IDBServer::MemoryIndex *v25;
  WebCore::IDBServer::MemoryIndex *v26;
  WTF *v27;
  void *v28;
  WebCore::IDBServer::MemoryIndex **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WebCore::IDBServer::MemoryIndex **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (WebCore::IDBServer::MemoryIndex *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (WebCore::IDBServer::MemoryIndex **)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
            {
              WebCore::IDBServer::MemoryIndex::~MemoryIndex(v26, v10);
              WTF::fastFree(v27, v28);
            }
            else
            {
              --*(_DWORD *)v26;
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::IDBServer::MemoryIndex *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WebCore::IDBServer::MemoryIndex *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore::IDBServer::MemoryIndex *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  void *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v14);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = (WTF::StringImpl **)(v17 + 16 * v22);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 != 1)
            {
              --*(_DWORD *)v24;
              goto LABEL_25;
            }
            WebCore::IDBServer::MemoryIndex::~MemoryIndex(v24, v10);
            WTF::fastFree(v32, v33);
            v34 = *v23;
            *v23 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v10);
              else
                *(_DWORD *)v34 -= 2;
            }
          }
          else
          {
LABEL_25:
            *v23 = 0;
          }
          v25 = *v13;
          *v13 = 0;
          *v23 = v25;
          v26 = v6 + 16 * v11;
          v27 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v23[1] = v27;
          v28 = *(WebCore::IDBServer::MemoryIndex **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
            {
              WebCore::IDBServer::MemoryIndex::~MemoryIndex(v28, v10);
              WTF::fastFree(v35, v36);
            }
            else
            {
              --*(_DWORD *)v28;
            }
          }
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
          goto LABEL_34;
        }
        v15 = v6 + 16 * v11;
        v16 = *(WebCore::IDBServer::MemoryIndex **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::IDBServer::MemoryIndex::~MemoryIndex(v16, v10);
            WTF::fastFree(v30, v31);
            v14 = *v13;
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_34:
      if (++v11 == v7)
        goto LABEL_45;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_45:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,WTF::String>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,WTF::String,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (WTF::StringImpl *)v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v8);
            else
              *(_DWORD *)v24 -= 2;
          }
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(WTF::StringImpl **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_22;
          if (*(_DWORD *)v13 == 2)
          {
LABEL_24:
            WTF::StringImpl::destroy(v13, v8);
            goto LABEL_22;
          }
          *(_DWORD *)v13 -= 2;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(WTF::StringImpl **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              goto LABEL_24;
            *(_DWORD *)v13 -= 2;
          }
        }
      }
LABEL_22:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::IDBServer::MemoryObjectStore *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WebCore::IDBServer::MemoryObjectStore *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore::IDBServer::MemoryObjectStore *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  void *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v14);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = (WTF::StringImpl **)(v17 + 16 * v22);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 != 1)
            {
              --*(_DWORD *)v24;
              goto LABEL_25;
            }
            WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v24, v10);
            WTF::fastFree(v32, v33);
            v34 = *v23;
            *v23 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v10);
              else
                *(_DWORD *)v34 -= 2;
            }
          }
          else
          {
LABEL_25:
            *v23 = 0;
          }
          v25 = *v13;
          *v13 = 0;
          *v23 = v25;
          v26 = v6 + 16 * v11;
          v27 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v23[1] = v27;
          v28 = *(WebCore::IDBServer::MemoryObjectStore **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
            {
              WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v28, v10);
              WTF::fastFree(v35, v36);
            }
            else
            {
              --*(_DWORD *)v28;
            }
          }
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
          goto LABEL_34;
        }
        v15 = v6 + 16 * v11;
        v16 = *(WebCore::IDBServer::MemoryObjectStore **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v16, v10);
            WTF::fastFree(v30, v31);
            v14 = *v13;
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_34:
      if (++v11 == v7)
        goto LABEL_45;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_45:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  void *v36;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (uint64_t *)(v19 + 16 * v26);
          v29 = (uint64_t *)v28[1];
          v28[1] = 0;
          if (v29)
          {
            v30 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(v29, v10);
            WTF::fastFree((WTF *)v30, v31);
          }
          *v28 = *v13;
          v32 = v6 + 16 * v11;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          v28[1] = v33;
          v34 = *(uint64_t **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            v35 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(v34, v10);
            WTF::fastFree((WTF *)v35, v36);
          }
          if (v13 == a3)
            v12 = v28;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(uint64_t **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            v17 = WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::~HashTable(v16, v10);
            WTF::fastFree((WTF *)v17, v18);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WebCore::IDBServer::MemoryObjectStore *,WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashMap<WebCore::IDBServer::MemoryObjectStore *,std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>,WTF::HashTraits<std::unique_ptr<std::set<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryObjectStore *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
          {
            std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(v24, *(WTF **)(v24 + 8));
            MEMORY[0x19AEA7644](v24, 0x1020C4062D53EE8);
          }
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          std::__tree<WebCore::IDBKeyData,std::less<WebCore::IDBKeyData>,WTF::FastAllocator<WebCore::IDBKeyData>>::destroy(v13, *(WTF **)(v13 + 8));
          MEMORY[0x19AEA7644](v13, 0x1020C4062D53EE8);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t *WTF::HashTable<WebCore::IDBServer::MemoryIndex *,WTF::KeyValuePair<WebCore::IDBServer::MemoryIndex *,std::unique_ptr<WebCore::IDBServer::IndexValueStore>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBServer::MemoryIndex *,std::unique_ptr<WebCore::IDBServer::IndexValueStore>>>,WTF::DefaultHash<WebCore::IDBServer::MemoryIndex *>,WTF::HashMap<WebCore::IDBServer::MemoryIndex *,std::unique_ptr<WebCore::IDBServer::IndexValueStore>,WTF::DefaultHash<WebCore::IDBServer::MemoryIndex *>,WTF::HashTraits<WebCore::IDBServer::MemoryIndex *>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::IndexValueStore>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBServer::MemoryIndex *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  WTF **v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (WTF **)v26[1];
          v26[1] = 0;
          if (v27)
            std::default_delete<WebCore::IDBServer::IndexValueStore>::operator()[abi:sn180100](v27);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(WTF ***)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            std::default_delete<WebCore::IDBServer::IndexValueStore>::operator()[abi:sn180100](v30);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WTF ***)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            std::default_delete<WebCore::IDBServer::IndexValueStore>::operator()[abi:sn180100](v16);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  unsigned int v49;
  uint64_t result;
  char v52;
  char v53;
  int v54;
  unsigned __int16 v55;
  char v56;
  char v57;
  char v58;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (a2)
    bzero((void *)(v8 + 16), 40 * a2);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    v14 = v6;
    do
    {
      v15 = v5 + 40 * v12;
      if (!*(_BYTE *)v15)
      {
        if (*(_DWORD *)(v15 + 24))
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v54 = -1640531527;
          v55 = 0;
          v56 = 0;
          WebCore::add((uint64_t)&v54, v5 + 40 * v12);
          v24 = v54;
          if (v56)
          {
            v49 = (v54 + v55) ^ ((v54 + v55) << 11);
            v24 = v49 + (v49 >> 17);
          }
          v25 = 0;
          v26 = (v24 ^ (8 * v24)) + ((v24 ^ (8 * v24)) >> 5);
          v27 = (v26 ^ (4 * v26)) + ((v26 ^ (4 * v26)) >> 15);
          v28 = v27 ^ (v27 << 10);
          if (v28)
            v29 = v28;
          else
            v29 = 0x800000;
          do
          {
            v30 = v29 & v17;
            v31 = v16 + 40 * (v29 & v17);
            v29 = ++v25 + (v29 & v17);
          }
          while (*(_DWORD *)(v31 + 24));
          v32 = v16 + 40 * v30;
          v35 = *(_QWORD *)(v32 + 32);
          v34 = (_QWORD *)(v32 + 32);
          v33 = v35;
          *v34 = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr((unsigned int *)v33);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, (unsigned int *)v33));
            if (!v37)
            {
              atomic_store(1u, (unsigned int *)v33);
              v46 = *(WTF **)(v33 + 8);
              if (v46)
              {
                *(_QWORD *)(v33 + 8) = 0;
                *(_DWORD *)(v33 + 16) = 0;
                WTF::fastFree(v46, v23);
              }
              WTF::fastFree((WTF *)v33, v23);
            }
          }
          v38 = *(unsigned int *)(v31 + 24);
          if ((_DWORD)v38 != -1)
            ((void (*)(char *, uint64_t))off_1E335A328[v38])(&v57, v31 + 8);
          *(_BYTE *)v31 = *(_BYTE *)v15;
          *(_BYTE *)(v31 + 8) = 0;
          v9 = (void *)(v31 + 8);
          *(_DWORD *)(v31 + 24) = -1;
          v39 = *(unsigned int *)(v15 + 24);
          if ((_DWORD)v39 != -1)
          {
            ((void (*)(char *, void *, uint64_t))off_1E335A400[v39])(&v58, v9, v15 + 8);
            *(_DWORD *)(v31 + 24) = v39;
          }
          v40 = v5 + 40 * v12;
          v41 = *(_QWORD *)(v40 + 32);
          *(_QWORD *)(v40 + 32) = 0;
          *v34 = v41;
          v42 = *(_QWORD *)(v40 + 32);
          *(_QWORD *)(v40 + 32) = 0;
          if (v42)
          {
            do
            {
              v43 = __ldaxr((unsigned int *)v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, (unsigned int *)v42));
            if (!v44)
            {
              atomic_store(1u, (unsigned int *)v42);
              v47 = *(WTF **)(v42 + 8);
              if (v47)
              {
                *(_QWORD *)(v42 + 8) = 0;
                *(_DWORD *)(v42 + 16) = 0;
                WTF::fastFree(v47, v9);
              }
              WTF::fastFree((WTF *)v42, v9);
            }
          }
          v45 = *(unsigned int *)(v15 + 24);
          if ((_DWORD)v45 != -1)
            ((void (*)(char *, uint64_t))off_1E335A328[v45])(&v53, v15 + 8);
          *(_DWORD *)(v15 + 24) = -1;
          if (v15 == a3)
            v13 = v31;
        }
        else
        {
          v18 = v5 + 40 * v12;
          v19 = *(_QWORD *)(v18 + 32);
          *(_QWORD *)(v18 + 32) = 0;
          if (v19)
          {
            do
            {
              v20 = __ldaxr((unsigned int *)v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, (unsigned int *)v19));
            if (!v21)
            {
              atomic_store(1u, (unsigned int *)v19);
              v48 = *(WTF **)(v19 + 8);
              if (v48)
              {
                *(_QWORD *)(v19 + 8) = 0;
                *(_DWORD *)(v19 + 16) = 0;
                WTF::fastFree(v48, v9);
              }
              WTF::fastFree((WTF *)v19, v9);
            }
          }
          v22 = *(unsigned int *)(v15 + 24);
          if ((_DWORD)v22 != -1)
            ((void (*)(char *, uint64_t))off_1E335A328[v22])(&v52, v15 + 8);
          *(_DWORD *)(v15 + 24) = -1;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

void WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::MemoryCursor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::MemoryCursor *>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WebCore::IDBServer::MemoryCursor *,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBServer::MemoryCursor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;

  v2 = qword_1ECE81ED0;
  if (qword_1ECE81ED0)
  {
    v3 = *(_DWORD *)(qword_1ECE81ED0 - 4);
    v4 = *(_DWORD *)(qword_1ECE81ED0 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  v7 = (_DWORD *)v5;
  v8 = v5 + 16;
  if (a1)
    bzero((void *)(v5 + 16), 24 * a1);
  qword_1ECE81ED0 = v8;
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE81ED0 - 12) = v4;
  if (v3)
  {
    v9 = 0;
    v10 = qword_1ECE81ED0;
    do
    {
      v11 = v2 + 24 * v9;
      v6 = *(_QWORD *)v11;
      if (*(_QWORD *)v11 != -1)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12 | v6)
        {
          if (v10)
            v13 = *(_DWORD *)(v10 - 8);
          else
            v13 = 0;
          v14 = 0;
          v15 = (v6 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v6 - 1640531527) << 16) ^ ((unsigned __int16)v6 - 1640531527);
          v16 = (v6 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v6) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v6) + (v15 >> 11));
          v17 = (v12 >> 5) & 0x7FFF800 ^ ((v16 + (v16 >> 11) + (unsigned __int16)v12) << 16) ^ (v16 + (v16 >> 11) + (unsigned __int16)v12);
          v18 = (v12 >> 37) & 0x7FFF800 ^ ((v17 + WORD2(v12) + (v17 >> 11)) << 16) ^ (v17 + WORD2(v12) + (v17 >> 11));
          v19 = (v18 + (v18 >> 11)) ^ (8 * (v18 + (v18 >> 11)));
          v20 = (v19 + (v19 >> 5)) ^ (4 * (v19 + (v19 >> 5)));
          v21 = (v20 + (v20 >> 15)) ^ ((v20 + (v20 >> 15)) << 10);
          if (v21)
            LODWORD(v6) = v21;
          else
            LODWORD(v6) = 0x800000;
          do
          {
            v22 = v6 & v13;
            v23 = v10 + 24 * v22;
            v6 = ++v14 + v22;
          }
          while (*(_OWORD *)v23 != 0);
          v24 = *(_OWORD *)v11;
          *(_QWORD *)(v23 + 16) = *(_QWORD *)(v11 + 16);
          *(_OWORD *)v23 = v24;
        }
      }
      ++v9;
    }
    while (v9 != v3);
  }
  else if (!v2)
  {
    return;
  }
  WTF::fastFree((WTF *)(v2 - 16), (void *)v6);
}

void WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::MemoryBackingStoreTransaction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  _OWORD *v29;
  uint64_t v30;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v31;
  _QWORD *v32;
  WebCore::IDBServer::MemoryBackingStoreTransaction *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (unint64_t *)(v4 + 24 * v11);
      v13 = *v12;
      if (*v12 != -1)
      {
        v14 = v12[1];
        if (v14 | v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v19 = 0;
          v20 = (v13 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v13 - 1640531527) << 16) ^ ((unsigned __int16)v13 - 1640531527);
          v21 = (v13 >> 37) & 0x7FFF800 ^ ((v20 + WORD2(v13) + (v20 >> 11)) << 16) ^ (v20 + WORD2(v13) + (v20 >> 11));
          v22 = (v14 >> 5) & 0x7FFF800 ^ ((v21 + (v21 >> 11) + (unsigned __int16)v14) << 16) ^ (v21 + (v21 >> 11) + (unsigned __int16)v14);
          v23 = (v14 >> 37) & 0x7FFF800 ^ ((v22 + WORD2(v14) + (v22 >> 11)) << 16) ^ (v22 + WORD2(v14) + (v22 >> 11));
          v24 = (v23 + (v23 >> 11)) ^ (8 * (v23 + (v23 >> 11)));
          v25 = (v24 + (v24 >> 5)) ^ (4 * (v24 + (v24 >> 5)));
          v26 = (v25 + (v25 >> 15)) ^ ((v25 + (v25 >> 15)) << 10);
          if (v26)
            v27 = v26;
          else
            v27 = 0x800000;
          do
          {
            v28 = v27 & v16;
            v29 = (_OWORD *)(v15 + 24 * (v27 & v16));
            v27 = ++v19 + (v27 & v16);
          }
          while (*v29 != 0);
          v30 = v15 + 24 * v28;
          v33 = *(WebCore::IDBServer::MemoryBackingStoreTransaction **)(v30 + 16);
          v32 = (_QWORD *)(v30 + 16);
          v31 = v33;
          *v32 = 0;
          if (v33)
          {
            WebCore::IDBServer::MemoryBackingStoreTransaction::~MemoryBackingStoreTransaction(v31, v8);
            WTF::fastFree(v34, v35);
          }
          *v29 = *(_OWORD *)v12;
          v36 = v4 + 24 * v11;
          v37 = *(_QWORD *)(v36 + 16);
          *(_QWORD *)(v36 + 16) = 0;
          *v32 = v37;
          v18 = *(WebCore::IDBServer::MemoryBackingStoreTransaction **)(v36 + 16);
          *(_QWORD *)(v36 + 16) = 0;
          if (!v18)
            goto LABEL_23;
LABEL_22:
          WebCore::IDBServer::MemoryBackingStoreTransaction::~MemoryBackingStoreTransaction(v18, v8);
          WTF::fastFree(v38, v39);
          goto LABEL_23;
        }
        v17 = v4 + 24 * v11;
        v18 = *(WebCore::IDBServer::MemoryBackingStoreTransaction **)(v17 + 16);
        *(_QWORD *)(v17 + 16) = 0;
        if (v18)
          goto LABEL_22;
      }
LABEL_23:
      if (++v11 == v5)
        goto LABEL_26;
    }
  }
  if (v4)
LABEL_26:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl **result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v12;
  void *v13;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (WTF::StringImpl **)a2[1];
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore((WebCore::IDBServer::MemoryObjectStore *)result, a2);
      result = (WTF::StringImpl **)WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

WebCore::IDBServer::MemoryObjectStore *WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::IDBServer::MemoryObjectStore*>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WebCore::IDBServer::MemoryObjectStore **a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF **v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  WebCore::IDBServer::MemoryObjectStore *result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  WebCore::IDBServer::MemoryObjectStore *v29;
  WebCore::IDBServer::MemoryObjectStore **v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = v12;
    }
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    *v15 = v17;
    v18 = *a4;
    if (*a4)
      ++*(_DWORD *)v18;
    result = v15[1];
    v15[1] = v18;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(result, a2);
        result = (WebCore::IDBServer::MemoryObjectStore *)WTF::fastFree(v31, v32);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v20 = *a2;
    if (*a2)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_34;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_43:
        result = (WebCore::IDBServer::MemoryObjectStore *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v28, v15);
        v15 = (WTF **)result;
        v24 = *a2;
        if (*a2)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_47;
      }
LABEL_34:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_43;
    }
LABEL_47:
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v24 + 16 * v27;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v22 = *a2;
  if (*a2)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v22 + 16 * v23;
  *(_BYTE *)(a1 + 16) = 0;
  v29 = *a4;
  v30 = (WebCore::IDBServer::MemoryObjectStore **)(v8 + 16 * v14 + 8);
  if (*a4)
    ++*(_DWORD *)v29;
  result = *v30;
  *v30 = v29;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(result, a2);
      return (WebCore::IDBServer::MemoryObjectStore *)WTF::fastFree(v33, v34);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryObjectStore,WTF::RawPtrTraits<WebCore::IDBServer::MemoryObjectStore>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryObjectStore>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::IDBServer::MemoryObjectStore *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  WebCore::IDBServer::MemoryObjectStore *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  WTF *v29;
  void *v30;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (WebCore::IDBServer::MemoryObjectStore *)v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
            {
              WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v24, v8);
              WTF::fastFree(v29, v30);
            }
            else
            {
              --*(_DWORD *)v24;
            }
          }
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(WebCore::IDBServer::MemoryObjectStore **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_22;
          if (*(_DWORD *)v13 == 1)
          {
LABEL_24:
            WebCore::IDBServer::MemoryObjectStore::~MemoryObjectStore(v13, v8);
            WTF::fastFree(v27, v28);
            goto LABEL_22;
          }
          --*(_DWORD *)v13;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(WebCore::IDBServer::MemoryObjectStore **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
              goto LABEL_24;
            --*(_DWORD *)v13;
          }
        }
      }
LABEL_22:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_OWORD *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::MemoryIndexCursor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unint64_t *)(v6 + 24 * v13);
      v16 = *v15;
      if (*v15 != -1)
      {
        v17 = v15[1];
        if (v17 | v16)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v22 = 0;
          v23 = (v16 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v16 - 1640531527) << 16) ^ ((unsigned __int16)v16 - 1640531527);
          v24 = (v16 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v16) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v16) + (v23 >> 11));
          v25 = (v17 >> 5) & 0x7FFF800 ^ ((v24 + (v24 >> 11) + (unsigned __int16)v17) << 16) ^ (v24 + (v24 >> 11) + (unsigned __int16)v17);
          v26 = (v17 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v17) + (v25 >> 11)) << 16) ^ (v25 + WORD2(v17) + (v25 >> 11));
          v27 = (v26 + (v26 >> 11)) ^ (8 * (v26 + (v26 >> 11)));
          v28 = (v27 + (v27 >> 5)) ^ (4 * (v27 + (v27 >> 5)));
          v29 = (v28 + (v28 >> 15)) ^ ((v28 + (v28 >> 15)) << 10);
          if (v29)
            v30 = v29;
          else
            v30 = 0x800000;
          do
          {
            v31 = v30 & v19;
            v32 = (_OWORD *)(v18 + 24 * (v30 & v19));
            v30 = ++v22 + (v30 & v19);
          }
          while (*v32 != 0);
          v33 = v18 + 24 * v31;
          v36 = *(_QWORD *)(v33 + 16);
          v35 = (_QWORD *)(v33 + 16);
          v34 = v36;
          *v35 = 0;
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          *v32 = *(_OWORD *)v15;
          v37 = v6 + 24 * v13;
          v38 = *(_QWORD *)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          *v35 = v38;
          v39 = *(_QWORD *)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          if (v15 == a3)
            v14 = v32;
        }
        else
        {
          v20 = v6 + 24 * v13;
          v21 = *(_QWORD *)(v20 + 16);
          *(_QWORD *)(v20 + 16) = 0;
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::IDBServer::MemoryIndex *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  WebCore::IDBServer::MemoryIndex *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::IDBServer::MemoryIndex *v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;
  WTF *v35;
  void *v36;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (WebCore::IDBServer::MemoryIndex *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 1)
            {
              WebCore::IDBServer::MemoryIndex::~MemoryIndex(v27, v10);
              WTF::fastFree(v33, v34);
            }
            else
            {
              --*(_DWORD *)v27;
            }
          }
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(WebCore::IDBServer::MemoryIndex **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
            {
              WebCore::IDBServer::MemoryIndex::~MemoryIndex(v30, v10);
              WTF::fastFree(v35, v36);
            }
            else
            {
              --*(_DWORD *)v30;
            }
          }
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebCore::IDBServer::MemoryIndex **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 1)
            {
              WebCore::IDBServer::MemoryIndex::~MemoryIndex(v16, v10);
              WTF::fastFree(v31, v32);
            }
            else
            {
              --*(_DWORD *)v16;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v3;
  unsigned int v4;
  const WTF::StringImpl *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned __int16 v15;
  char v16;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v14 = -1640531527;
    v15 = 0;
    v16 = 0;
    WebCore::add((uint64_t)&v14, (uint64_t)a2);
    v6 = v14;
    if (v16)
    {
      v13 = (v14 + v15) ^ ((v14 + v15) << 11);
      v6 = v13 + (v13 >> 17);
    }
    v7 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
    v8 = (v7 ^ (4 * v7)) + ((v7 ^ (4 * v7)) >> 15);
    v9 = v8 ^ (v8 << 10);
    if (!v9)
      v9 = 0x800000;
    v10 = v9 & v4;
    v11 = v3 + 40 * (v9 & v4);
    if (*(_DWORD *)(v11 + 24))
    {
      v12 = 1;
      while (*(_BYTE *)v11 || (WebCore::IDBKeyData::operator==((unsigned __int8 *)v11, a2, v5) & 1) == 0)
      {
        v10 = (v10 + v12) & v4;
        v11 = v3 + 40 * v10;
        ++v12;
        if (!*(_DWORD *)(v11 + 24))
          return 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::remove(uint64_t result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v14;
  char v15;

  v3 = (uint64_t *)result;
  v4 = a2[6];
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E335A328[v4])(&v15, a2 + 2);
  a2[6] = -1;
  *(_BYTE *)a2 = 1;
  v5 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v14 = *(WTF **)(v5 + 8);
      if (v14)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        WTF::fastFree(v14, a2);
      }
      result = WTF::fastFree((WTF *)v5, a2);
    }
  }
  ++*(_DWORD *)(*v3 - 16);
  v8 = *v3;
  if (*v3)
    v9 = *(_DWORD *)(v8 - 12) - 1;
  else
    v9 = -1;
  *(_DWORD *)(v8 - 12) = v9;
  v10 = *v3;
  if (*v3)
  {
    v11 = 6 * *(_DWORD *)(v10 - 12);
    v12 = *(_DWORD *)(v10 - 4);
    if (v11 < v12 && v12 >= 9)
      return WTF::HashTable<WebCore::IDBKeyData,WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer>>,WebCore::IDBKeyDataHash,WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHashTraits>::rehash(v3, v12 >> 1, 0);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::MemoryObjectStore::addRecord(WebCore::IDBServer::MemoryBackingStoreTransaction &,WebCore::IDBKeyData const&,WebCore::IDBValue const&)::$_0,void,JSC::JSGlobalObject &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)a1 = off_1E335A530;
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + 104), a2);
  v4 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E335A328[v4])(&v6, a1 + 80);
  *(_DWORD *)(a1 + 96) = -1;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 8), v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::MemoryObjectStore::addRecord(WebCore::IDBServer::MemoryBackingStoreTransaction &,WebCore::IDBKeyData const&,WebCore::IDBValue const&)::$_0,void,JSC::JSGlobalObject &>::~CallableWrapper(unsigned int *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  void *v5;
  char v7;

  *(_QWORD *)a1 = off_1E335A530;
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + 26), a2);
  v4 = a1[24];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, unsigned int *))off_1E335A328[v4])(&v7, a1 + 20);
  a1[24] = -1;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 2), v3);
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::MemoryObjectStore::addRecord(WebCore::IDBServer::MemoryBackingStoreTransaction &,WebCore::IDBKeyData const&,WebCore::IDBValue const&)::$_0,void,JSC::JSGlobalObject &>::call(_QWORD *a1, WebCore *a2, uint64_t a3, uint64_t a4, const WebCore::IDBValue *a5)
{
  uint64_t result;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  result = (uint64_t)WebCore::generateIndexKeyMapForValueIsolatedCopy(a2, (JSC::JSGlobalObject *)(a1 + 1), (const WebCore::IDBObjectStoreInfo *)(a1 + 9), (const WebCore::IDBKeyData *)(a1 + 13), a5, &v18);
  v8 = (uint64_t *)a1[18];
  v9 = v18;
  v18 = 0;
  v10 = *v8;
  *v8 = v9;
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      v12 = (_DWORD *)(v10 + 40);
      do
      {
        if (*((_QWORD *)v12 - 5) != -1)
        {
          v13 = *v12;
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, _DWORD *))off_1E335A4F0[v13])(&v19, v12 - 8);
          *v12 = -1;
        }
        v12 += 12;
        --v11;
      }
      while (v11);
    }
    result = WTF::fastFree((WTF *)(v10 - 16), v7);
  }
  v14 = v18;
  if (v18)
  {
    v15 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v15)
    {
      v16 = (_DWORD *)(v18 + 40);
      do
      {
        if (*((_QWORD *)v16 - 5) != -1)
        {
          v17 = *v16;
          if ((_DWORD)v17 != -1)
            ((void (*)(char *, _DWORD *))off_1E335A4F0[v17])(&v20, v16 - 8);
          *v16 = -1;
        }
        v16 += 12;
        --v15;
      }
      while (v15);
    }
    return WTF::fastFree((WTF *)(v14 - 16), v7);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 8) = 0;
  v4 = a2 + 8;
  *(_DWORD *)(a2 + 24) = -1;
  v5 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E335A400[v5])(&v7, v4, a3 + 8);
    *(_DWORD *)(a2 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

unint64_t WTF::Vector<std::pair<WebCore::IDBServer::MemoryIndex *,WebCore::IndexKey>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WebCore::IDBServer::MemoryIndex *,WebCore::IndexKey>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WebCore::IDBServer::MemoryIndex *,WebCore::IndexKey>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WebCore::IDBServer::MemoryIndex *,WebCore::IndexKey>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 48 * a2;
      result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = (_DWORD *)(result + 40);
        v8 = 48 * v4;
        v9 = (_DWORD *)((char *)v3 + 40);
        do
        {
          *((_QWORD *)v7 - 5) = *((_QWORD *)v9 - 5);
          *((_BYTE *)v7 - 32) = 0;
          v6 = v7 - 8;
          *v7 = -1;
          v10 = *v9;
          if ((_DWORD)v10 != -1)
          {
            result = ((uint64_t (*)(char *, _DWORD *, _DWORD *))off_1E335A548[v10])(&v12, v6, v9 - 8);
            *v7 = v10;
            v11 = *v9;
            if ((_DWORD)v11 != -1)
              result = ((uint64_t (*)(char *, _DWORD *))off_1E335A4F0[v11])(&v13, v9 - 8);
          }
          *v9 = -1;
          v9 += 12;
          v7 += 12;
          v8 -= 48;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::MemoryObjectStore::populateIndexWithExistingRecords(WebCore::IDBServer::MemoryIndex &)::$_0,void,JSC::JSGlobalObject &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v11;
  char v12;
  char v13;

  *(_QWORD *)a1 = off_1E335A570;
  v3 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E335A490[v3])(&v12, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v4 = *(WTF::StringImpl **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 48), a2);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v11 = *(WTF **)(v6 + 8);
      if (v11)
      {
        *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
        WTF::fastFree(v11, v5);
      }
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  v9 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E335A328[v9])(&v13, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v11;
  char v12;
  char v13;

  *(_QWORD *)a1 = off_1E335A570;
  v3 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E335A490[v3])(&v12, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v4 = *(WTF::StringImpl **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 48), a2);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v11 = *(WTF **)(v6 + 8);
      if (v11)
      {
        *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
        WTF::fastFree(v11, v5);
      }
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  v9 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E335A328[v9])(&v13, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  return WTF::fastFree((WTF *)a1, v5);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::MemoryObjectStore::populateIndexWithExistingRecords(WebCore::IDBServer::MemoryIndex &)::$_0,void,JSC::JSGlobalObject &>::call(uint64_t a1, WebCore *a2, uint64_t a3, const WebCore::IDBValue *a4)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  _QWORD v17[4];
  int v18;
  _QWORD v19[4];
  int v20;
  unsigned int *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int **)(a1 + 40);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v21 = v6;
  v22 = 0u;
  v23 = 0u;
  v8 = WebCore::deserializeIDBValueToJSValue(a2, a2, (JSC::JSGlobalObject *)&v21, a4);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v21, v9);
  if ((v8 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v19[0] = 0;
    v20 = 0;
    WebCore::generateIndexKeyForValue((uint64_t)a2, a1 + 112, v8, (uint64_t)v19, a1 + 64, a1 + 8);
    if (v20 == -1)
    {
      v14 = std::__throw_bad_variant_access[abi:sn180100]();
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEEOST_EEEDcSL_DpT0_(v14, v15);
      return;
    }
    v17[0] = &v16;
    ((void (*)(unsigned int **__return_ptr, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyDataENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE4copyEOSF_EUlOT_E_EEJNS0_6__implIJDnSA_SE_EEEEEEDcSJ_DpOT0____fmatrix[v20])(&v21, v17, v19);
    LOBYTE(v17[0]) = 0;
    v18 = -1;
    v10 = DWORD2(v23);
    if (DWORD2(v23) != -1)
    {
      ((void (*)(char *, _QWORD *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS7_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[DWORD2(v23)])(&v16, v17, &v21);
      v18 = v10;
      if (DWORD2(v23) != -1)
        ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS7_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[DWORD2(v23)])(&v16, &v21);
    }
    v11 = *(_QWORD *)(a1 + 168);
    if (!*(_BYTE *)(v11 + 40))
    {
      *(_BYTE *)v11 = 0;
      *(_DWORD *)(v11 + 32) = -1;
      v13 = v18;
      if (v18 != -1)
      {
        ((void (*)(unsigned int **, uint64_t, _QWORD *))off_1E335A548[v18])(&v21, v11, v17);
        *(_DWORD *)(v11 + 32) = v13;
      }
      *(_BYTE *)(v11 + 40) = 1;
      goto LABEL_17;
    }
    v12 = *(unsigned int *)(v11 + 32);
    if ((_DWORD)v12 == -1)
    {
      if (v18 == -1)
      {
LABEL_19:
        if (v20 != -1)
          ((void (*)(unsigned int **, _QWORD *))off_1E335A4F0[v20])(&v21, v19);
        return;
      }
    }
    else if (v18 == -1)
    {
      ((void (*)(unsigned int **, uint64_t))off_1E335A4F0[v12])(&v21, v11);
      *(_DWORD *)(v11 + 32) = -1;
      goto LABEL_17;
    }
    v21 = (unsigned int *)v11;
    ((void (*)(unsigned int **, uint64_t, _QWORD *))off_1E335A588[v18])(&v21, v11, v17);
LABEL_17:
    if (v18 != -1)
      ((void (*)(unsigned int **, _QWORD *))off_1E335A4F0[v18])(&v21, v17);
    goto LABEL_19;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E335A4F0[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
  {
LABEL_7:
    *(_DWORD *)(v4 + 32) = -1;
    *(_BYTE *)v4 = *(_BYTE *)a3;
    *(_BYTE *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 24) = -1;
    v10 = *(unsigned int *)(a3 + 24);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E335A400[v10])(&v14, v4 + 8, a3 + 8);
      *(_DWORD *)(v4 + 24) = v10;
    }
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E335A4F0[v5])(&v13, v4);
    goto LABEL_7;
  }
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v7 = a2 + 8;
  v8 = *(unsigned int *)(a2 + 24);
  v9 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v8 == -1)
  {
    if ((_DWORD)v9 == -1)
      return result;
  }
  else if ((_DWORD)v9 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E335A328[v8])(&v12, v7);
    *(_DWORD *)(a2 + 24) = -1;
    return result;
  }
  v11 = v7;
  return ((uint64_t (*)(uint64_t *))off_1E335A448[v9])(&v11);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEEOST_EEEDcSL_DpT0_(unsigned int **a1, _DWORD *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*a1, a2, a3);
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unsigned int *result, _DWORD *a2, uint64_t *a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = result;
  v5 = result[8];
  if ((_DWORD)v5 == -1)
    goto LABEL_13;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E335A4F0[v5])(&v14, result);
LABEL_13:
    v4[8] = -1;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    v4[2] = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    v4[3] = v12;
    v4[8] = 2;
    return result;
  }
  v7 = a2[3];
  result = *(unsigned int **)a2;
  if ((_DWORD)v7)
  {
    v8 = 32 * v7;
    v9 = result + 6;
    do
    {
      v10 = *v9;
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, _DWORD *))off_1E335A328[v10])(&v13, v9 - 4);
      *v9 = -1;
      v9 += 8;
      v8 -= 32;
    }
    while (v8);
    result = *(unsigned int **)a2;
  }
  if (result)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v11;
  return result;
}

uint64_t WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBKeyData,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyDataHash,WebCore::IDBKeyDataHashTraits,WTF::HashTraits<WebCore::ThreadSafeDataBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::IDBKeyDataHash>,WebCore::IDBKeyData>(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  _QWORD *v3;
  unsigned int v6;
  const WTF::StringImpl *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned __int16 v19;
  char v20;

  v3 = (_QWORD *)result;
  if (!a2)
    goto LABEL_11;
  v6 = *(_DWORD *)(a2 - 8);
  v18 = -1640531527;
  v19 = 0;
  v20 = 0;
  result = WebCore::add((uint64_t)&v18, (uint64_t)a3);
  v8 = v18;
  if (v20)
  {
    v17 = (v18 + v19) ^ ((v18 + v19) << 11);
    v8 = v17 + (v17 >> 17);
  }
  v9 = (v8 ^ (8 * v8)) + ((v8 ^ (8 * v8)) >> 5);
  v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
  v11 = v10 ^ (v10 << 10);
  if (!v11)
    v11 = 0x800000;
  v12 = v11 & v6;
  v13 = a2 + 40 * (v11 & v6);
  if (*(_DWORD *)(v13 + 24))
  {
    v14 = 1;
    while (1)
    {
      if (!*(_BYTE *)v13)
      {
        result = WebCore::IDBKeyData::operator==((unsigned __int8 *)v13, a3, v7);
        if ((result & 1) != 0)
          break;
      }
      v12 = (v12 + v14) & v6;
      v13 = a2 + 40 * v12;
      ++v14;
      if (!*(_DWORD *)(v13 + 24))
        goto LABEL_11;
    }
    v15 = *(unsigned int **)(v13 + 32);
    if (v15)
    {
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
  }
  else
  {
LABEL_11:
    v15 = 0;
  }
  *v3 = v15;
  return result;
}

WebCore::IDBServer::MemoryIndex *WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::IDBServer::MemoryIndex*>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WebCore::IDBServer::MemoryIndex **a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF **v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  WebCore::IDBServer::MemoryIndex *result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  WebCore::IDBServer::MemoryIndex *v29;
  WebCore::IDBServer::MemoryIndex **v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = v12;
    }
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    *v15 = v17;
    v18 = *a4;
    if (*a4)
      ++*(_DWORD *)v18;
    result = v15[1];
    v15[1] = v18;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::IDBServer::MemoryIndex::~MemoryIndex(result, a2);
        result = (WebCore::IDBServer::MemoryIndex *)WTF::fastFree(v31, v32);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v20 = *a2;
    if (*a2)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_34;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_43:
        result = (WebCore::IDBServer::MemoryIndex *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v28, v15);
        v15 = (WTF **)result;
        v24 = *a2;
        if (*a2)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_47;
      }
LABEL_34:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_43;
    }
LABEL_47:
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v24 + 16 * v27;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v22 = *a2;
  if (*a2)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v22 + 16 * v23;
  *(_BYTE *)(a1 + 16) = 0;
  v29 = *a4;
  v30 = (WebCore::IDBServer::MemoryIndex **)(v8 + 16 * v14 + 8);
  if (*a4)
    ++*(_DWORD *)v29;
  result = *v30;
  *v30 = v29;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::IDBServer::MemoryIndex::~MemoryIndex(result, a2);
      return (WebCore::IDBServer::MemoryIndex *)WTF::fastFree(v33, v34);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WebCore::IDBServer::MemoryIndex *WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::Ref<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  WebCore::IDBServer::MemoryIndex *result;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    v20 = *a4;
    *a4 = 0;
    result = (WebCore::IDBServer::MemoryIndex *)v16[1];
    *v16 = v11;
    v16[1] = v20;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::IDBServer::MemoryIndex::~MemoryIndex(result, a2);
        result = (WebCore::IDBServer::MemoryIndex *)WTF::fastFree(v31, v32);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v25 = *a2;
    if (*a2)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
        goto LABEL_26;
    }
    else if (3 * v28 <= 4 * v27)
    {
      if (!(_DWORD)v28)
      {
        v29 = 8;
LABEL_33:
        result = (WebCore::IDBServer::MemoryIndex *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::MemoryIndex,WTF::RawPtrTraits<WebCore::IDBServer::MemoryIndex>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::MemoryIndex>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a2, v29, v16);
        v16 = (uint64_t *)result;
        v25 = *a2;
        if (*a2)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
        goto LABEL_37;
      }
LABEL_26:
      v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
      goto LABEL_33;
    }
LABEL_37:
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v25 + 16 * v28;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v8 + 16 * v24;
  *(_BYTE *)(a1 + 16) = 0;
  v30 = *a4;
  *a4 = 0;
  result = (WebCore::IDBServer::MemoryIndex *)v16[1];
  v16[1] = v30;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::IDBServer::MemoryIndex::~MemoryIndex(result, a2);
      return (WebCore::IDBServer::MemoryIndex *)WTF::fastFree(v33, v34);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void WebCore::NetworkStorageSession::~NetworkStorageSession(WebCore::NetworkStorageSession *this, void *a2)
{
  id v3;
  id v4;
  id v5;
  WebCore::CookieStorageObserver *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  WTF *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t i;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  id v57;

  if (*((_BYTE *)this + 41))
  {
    WebCore::NetworkStorageSession::nsCookieStorage(this, &v57);
    v3 = v57;
    objc_msgSend(v57, "_setCookiesChangedHandler:onQueue:", 0, 0);
    if (v3)
      CFRelease(v3);
    WebCore::NetworkStorageSession::nsCookieStorage(this, &v57);
    v4 = v57;
    objc_msgSend(v57, "_setCookiesRemovedHandler:onQueue:", 0, 0);
    if (v4)
      CFRelease(v4);
    WebCore::NetworkStorageSession::nsCookieStorage(this, &v57);
    v5 = v57;
    objc_msgSend(v57, "_setSubscribedDomainsForCookieChanges:", 0);
    if (v5)
      CFRelease(v5);
    *((_BYTE *)this + 41) = 0;
  }
  v6 = (WebCore::CookieStorageObserver *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v6)
  {
    WebCore::CookieStorageObserver::~CookieStorageObserver(v6, a2);
    WTF::fastFree(v7, v8);
  }
  v9 = *((_QWORD *)this + 35);
  if (v9)
  {
    v37 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v37)
    {
      v38 = (WTF::StringImpl **)*((_QWORD *)this + 35);
      do
      {
        v39 = *v38;
        if (*v38 != (WTF::StringImpl *)-1)
        {
          *v38 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v39 -= 2;
          }
        }
        ++v38;
        --v37;
      }
      while (v37);
    }
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  v10 = *((_QWORD *)this + 34);
  if (v10)
  {
    v40 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v40)
    {
      v41 = (WTF::StringImpl **)*((_QWORD *)this + 34);
      do
      {
        v42 = *v41;
        if (*v41 != (WTF::StringImpl *)-1)
        {
          *v41 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v42 -= 2;
          }
        }
        ++v41;
        --v40;
      }
      while (v40);
    }
    WTF::fastFree((WTF *)(v10 - 16), a2);
  }
  v11 = *((_QWORD *)this + 32);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = (WTF::StringImpl **)(v11 + 8);
      do
      {
        if (*(v13 - 1) != (WTF::StringImpl *)-1)
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  v15 = *((_QWORD *)this + 23);
  if (v15)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v15, (WTF::StringImpl *)a2);
  v16 = *((_QWORD *)this + 22);
  if (v16)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v16, (WTF::StringImpl *)a2);
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::~HashTable((uint64_t *)this + 21, (WTF::StringImpl *)a2);
  v18 = *((_QWORD *)this + 20);
  if (v18)
  {
    v43 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v43)
    {
      v44 = (WTF::StringImpl **)*((_QWORD *)this + 20);
      do
      {
        v45 = *v44;
        if (*v44 != (WTF::StringImpl *)-1)
        {
          *v44 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v17);
            else
              *(_DWORD *)v45 -= 2;
          }
        }
        ++v44;
        --v43;
      }
      while (v43);
    }
    WTF::fastFree((WTF *)(v18 - 16), v17);
  }
  v19 = *((_QWORD *)this + 19);
  if (v19)
  {
    v46 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v46)
    {
      v47 = (WTF::StringImpl **)*((_QWORD *)this + 19);
      do
      {
        v48 = *v47;
        if (*v47 != (WTF::StringImpl *)-1)
        {
          *v47 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, v17);
            else
              *(_DWORD *)v48 -= 2;
          }
        }
        ++v47;
        --v46;
      }
      while (v46);
    }
    WTF::fastFree((WTF *)(v19 - 16), v17);
  }
  v20 = *((_QWORD *)this + 18);
  if (v20)
  {
    v49 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v49)
    {
      v50 = (WTF::StringImpl **)*((_QWORD *)this + 18);
      do
      {
        v51 = *v50;
        if (*v50 != (WTF::StringImpl *)-1)
        {
          *v50 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v17);
            else
              *(_DWORD *)v51 -= 2;
          }
        }
        ++v50;
        --v49;
      }
      while (v49);
    }
    WTF::fastFree((WTF *)(v20 - 16), v17);
  }
  v21 = *((_QWORD *)this + 16);
  if (v21)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProtectionSpace,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProtectionSpace>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v21, v17);
  v22 = (WTF *)*((_QWORD *)this + 13);
  if (v22)
  {
    v23 = *((unsigned int *)this + 28);
    if ((_DWORD)v23)
    {
      v24 = (WTF::StringImpl **)*((_QWORD *)this + 13);
      do
      {
        v25 = *v24;
        *v24 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v17);
          else
            *(_DWORD *)v25 -= 2;
        }
        ++v24;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree(v22, v17);
  }
  v26 = *((_QWORD *)this + 12);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 - 4);
    if ((_DWORD)v27)
    {
      v28 = (_QWORD *)*((_QWORD *)this + 12);
      do
      {
        if (*v28 != -1)
          v28 = (_QWORD *)WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>::~KeyValuePair((uint64_t)v28, v17);
        v28 += 9;
        --v27;
      }
      while (v27);
    }
    WTF::fastFree((WTF *)(v26 - 16), v17);
  }
  v29 = *((_QWORD *)this + 10);
  if (v29)
  {
    v52 = *(unsigned int *)(v29 - 4);
    if ((_DWORD)v52)
    {
      for (i = 0; i != v52; ++i)
      {
        v54 = *(unsigned int **)(v29 + 8 * i);
        if (v54 != (unsigned int *)-1)
        {
          *(_QWORD *)(v29 + 8 * i) = 0;
          if (v54)
          {
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              atomic_store(1u, v54);
              WTF::fastFree((WTF *)v54, v17);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v29 - 16), v17);
  }
  v30 = (WTF *)*((_QWORD *)this + 7);
  if (v30)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v30, (void *)*((unsigned int *)this + 16));
  v31 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v31)
    CFRelease(v31);
  v32 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v32)
    CFRelease(v32);
  v33 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v33)
    CFRelease(v33);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v34 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v34)
    {
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, v17);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void sub_1953CB09C(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;
  const void *v3;
  WebCore::CookieStorageObserver *v5;
  WTF *v6;
  void *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  WTF *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;

  if (v3)
    CFRelease(v3);
  v5 = (WebCore::CookieStorageObserver *)v2[36];
  v2[36] = 0;
  if (v5)
  {
    WebCore::CookieStorageObserver::~CookieStorageObserver(v5, a2);
    WTF::fastFree(v6, v7);
  }
  v8 = v2[35];
  if (v8)
  {
    v36 = *(v8 - 1);
    if ((_DWORD)v36)
    {
      v46 = (WTF::StringImpl **)v2[35];
      do
      {
        v47 = *v46;
        if (*v46 != (WTF::StringImpl *)-1)
        {
          *v46 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v47 -= 2;
          }
        }
        ++v46;
        --v36;
      }
      while (v36);
    }
    WTF::fastFree((WTF *)(v8 - 4), a2);
  }
  v9 = v2[34];
  if (v9)
  {
    v37 = *(v9 - 1);
    if ((_DWORD)v37)
    {
      v48 = (WTF::StringImpl **)v2[34];
      do
      {
        v49 = *v48;
        if (*v48 != (WTF::StringImpl *)-1)
        {
          *v48 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v49 -= 2;
          }
        }
        ++v48;
        --v37;
      }
      while (v37);
    }
    WTF::fastFree((WTF *)(v9 - 4), a2);
  }
  v10 = v2[32];
  if (v10)
  {
    v11 = *(v10 - 1);
    if ((_DWORD)v11)
    {
      v34 = (WTF::StringImpl **)(v10 + 2);
      do
      {
        if (*(v34 - 1) != (WTF::StringImpl *)-1)
        {
          v35 = *v34;
          *v34 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v35 -= 2;
          }
        }
        v34 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v10 - 4), a2);
  }
  v12 = (uint64_t)v2[23];
  if (v12)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v12, (WTF::StringImpl *)a2);
  v13 = (uint64_t)v2[22];
  if (v13)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v13, (WTF::StringImpl *)a2);
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::~HashTable((uint64_t *)v2 + 21, (WTF::StringImpl *)a2);
  v15 = v2[20];
  if (v15)
  {
    v38 = *(v15 - 1);
    if ((_DWORD)v38)
    {
      v50 = (WTF::StringImpl **)v2[20];
      do
      {
        v51 = *v50;
        if (*v50 != (WTF::StringImpl *)-1)
        {
          *v50 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v14);
            else
              *(_DWORD *)v51 -= 2;
          }
        }
        ++v50;
        --v38;
      }
      while (v38);
    }
    WTF::fastFree((WTF *)(v15 - 4), v14);
  }
  v16 = v2[19];
  if (v16)
  {
    v39 = *(v16 - 1);
    if ((_DWORD)v39)
    {
      v52 = (WTF::StringImpl **)v2[19];
      do
      {
        v53 = *v52;
        if (*v52 != (WTF::StringImpl *)-1)
        {
          *v52 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v14);
            else
              *(_DWORD *)v53 -= 2;
          }
        }
        ++v52;
        --v39;
      }
      while (v39);
    }
    WTF::fastFree((WTF *)(v16 - 4), v14);
  }
  v17 = v2[18];
  if (v17)
  {
    v40 = *(v17 - 1);
    if ((_DWORD)v40)
    {
      v54 = (WTF::StringImpl **)v2[18];
      do
      {
        v55 = *v54;
        if (*v54 != (WTF::StringImpl *)-1)
        {
          *v54 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v14);
            else
              *(_DWORD *)v55 -= 2;
          }
        }
        ++v54;
        --v40;
      }
      while (v40);
    }
    WTF::fastFree((WTF *)(v17 - 4), v14);
  }
  v18 = (uint64_t)v2[16];
  if (v18)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProtectionSpace,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProtectionSpace>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v14);
  v19 = (WTF *)v2[13];
  if (v19)
  {
    v20 = *((unsigned int *)v2 + 28);
    if ((_DWORD)v20)
    {
      v21 = (WTF::StringImpl **)v2[13];
      do
      {
        v22 = *v21;
        *v21 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v14);
          else
            *(_DWORD *)v22 -= 2;
        }
        ++v21;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree(v19, v14);
  }
  v23 = v2[12];
  if (v23)
  {
    v24 = *(v23 - 1);
    if ((_DWORD)v24)
    {
      v25 = v2[12];
      do
      {
        if (*(_QWORD *)v25 != -1)
          v25 = (unsigned int *)WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>::~KeyValuePair((uint64_t)v25, v14);
        v25 += 18;
        --v24;
      }
      while (v24);
    }
    WTF::fastFree((WTF *)(v23 - 4), v14);
  }
  v26 = v2[10];
  if (v26)
  {
    v41 = *(v26 - 1);
    if ((_DWORD)v41)
    {
      for (i = 0; i != v41; ++i)
      {
        v43 = *(unsigned int **)&v26[2 * i];
        if (v43 != (unsigned int *)-1)
        {
          *(_QWORD *)&v26[2 * i] = 0;
          if (v43)
          {
            do
            {
              v44 = __ldaxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
            {
              atomic_store(1u, v43);
              WTF::fastFree((WTF *)v43, v14);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v26 - 4), v14);
  }
  v27 = (WTF *)v2[7];
  if (v27)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v27, (void *)*((unsigned int *)v2 + 16));
  v28 = v2[6];
  v2[6] = 0;
  if (v28)
    CFRelease(v28);
  v29 = v2[4];
  v2[4] = 0;
  if (v29)
    CFRelease(v29);
  v30 = v2[3];
  v2[3] = 0;
  if (v30)
    CFRelease(v30);
  if (*v2)
  {
    *((_QWORD *)*v2 + 1) = 0;
    v31 = *v2;
    *v2 = 0;
    if (v31)
    {
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v14);
      }
    }
  }
  else
  {
    *v2 = 0;
  }
  _Unwind_Resume(a1);
}

WebCore::CookieStorageObserver **std::unique_ptr<WebCore::CookieStorageObserver>::~unique_ptr[abi:sn180100](WebCore::CookieStorageObserver **a1, void *a2)
{
  WebCore::CookieStorageObserver *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::CookieStorageObserver::~CookieStorageObserver(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

void WebCore::NetworkStorageSession::setCookies(WebCore::NetworkStorageSession *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)a2;
    v7 = 136 * v5;
    do
    {
      v8 = WebCore::Cookie::operator NSHTTPCookie *(v6);
      if (v8)
        objc_msgSend(v4, "addObject:", v8);
      v6 += 136;
      v7 -= 136;
    }
    while (v7);
  }
  WebCore::NetworkStorageSession::nsCookieStorage(a1, &v11);
  v9 = v11;
  v10 = WTF::URL::operator NSURL *();
  objc_msgSend(v9, "setCookies:forURL:mainDocumentURL:", v4, v10, WTF::URL::operator NSURL *());
  if (v9)
    CFRelease(v9);
  if (v4)
    CFRelease(v4);
}

void sub_1953CB60C(_Unwind_Exception *a1)
{
  const void *v1;

  objc_end_catch();
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::NetworkStorageSession::deleteCookie(WebCore::NetworkStorageSession *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  const void *v6;
  const void *v7;
  id v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;
  _QWORD *v12;
  NSObject *global_queue;
  uint64_t v14;
  id v15[2];
  _QWORD *v16;

  v5 = *a3;
  *a3 = 0;
  v14 = v5;
  WebCore::NetworkStorageSession::nsCookieStorage(a1, v15);
  v6 = (const void *)WebCore::Cookie::operator NSHTTPCookie *(a2);
  v7 = v6;
  if (v6)
    CFRetain(v6);
  if (*((_BYTE *)a1 + 40))
  {
    v8 = v15[0];
    objc_msgSend(v15[0], "deleteCookie:", v7);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E335A710;
    v9[1] = v14;
    if (v14)
    {
      v16 = v9;
      WTF::ensureOnMainThread();
      v10 = v16;
      v16 = 0;
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
      if (v7)
        CFRelease(v7);
      if (v8)
        CFRelease(v8);
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    v11 = v15[0];
    v12 = malloc_type_malloc(0x38uLL, 0x10E0040C9DFF2F4uLL);
    *v12 = MEMORY[0x1E0C809A0];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteCookie(WebCore::Cookie const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteCookie(WebCore::Cookie const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke;
    v12[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteCookie(WebCore::Cookie const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteCookie(WebCore::Cookie const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
    v12[4] = v14;
    v12[5] = v11;
    v12[6] = v7;
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v12);
    _Block_release(v12);
  }
}

void sub_1953CB7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;
  uint64_t v13;
  const void *v14;

  if (v12)
    CFRelease(v12);
  if (v14)
    CFRelease(v14);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void WebCore::NetworkStorageSession::getAllCookies(WebCore::NetworkStorageSession *this@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  id v5;

  WebCore::NetworkStorageSession::nsCookieStorage(this, &v5);
  v3 = v5;
  v4 = 0;
  WebCore::nsCookiesToCookieVector(a2, (void *)objc_msgSend(v5, "cookies"), &v4);
  if (v3)
    CFRelease(v3);
}

void sub_1953CB8C0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::NetworkStorageSession::getCookies(WebCore::NetworkStorageSession *this@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;

  WebCore::NetworkStorageSession::nsCookieStorage(this, &v7);
  v4 = v7;
  v5 = (void *)objc_msgSend(v7, "cookiesForURL:", WTF::URL::operator NSURL *());
  v6 = 0;
  WebCore::nsCookiesToCookieVector(a2, v5, &v6);
  if (v4)
    CFRelease(v4);
}

void sub_1953CB95C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::NetworkStorageSession::hasCookies(WebCore::NetworkStorageSession *a1, const WTF::StringImpl **a2, uint64_t *a3)
{
  WTF::StringImpl *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  WebCore::NetworkStorageSession::nsCookieStorage(a1, &v19);
  v5 = v19;
  v6 = (void *)-[WTF::StringImpl cookies](v19, "cookies");
  if (v5)
    CFRelease(v5);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (!v7)
    goto LABEL_21;
  v8 = *(_QWORD *)v21;
  do
  {
    v9 = 0;
    do
    {
      if (*(_QWORD *)v21 != v8)
        objc_enumerationMutation(v6);
      MEMORY[0x19AEA5508](&v18, objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v9), "domain", v18));
      WebCore::RegistrableDomain::uncheckedCreateFromHost(&v18, &v19);
      v12 = WTF::equal(v19, *a2, v10);
      v13 = v19;
      v19 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v18;
      v18 = 0;
      if (!v14)
        goto LABEL_14;
      if (*(_DWORD *)v14 != 2)
      {
        *(_DWORD *)v14 -= 2;
LABEL_14:
        if (v12)
          goto LABEL_22;
        goto LABEL_15;
      }
      WTF::StringImpl::destroy(v14, v11);
      if (v12)
      {
LABEL_22:
        v16 = *a3;
        *a3 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 1);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
LABEL_15:
      ++v9;
    }
    while (v7 != v9);
    v15 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16, v18);
    v7 = v15;
  }
  while (v15);
LABEL_21:
  v16 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
}

void sub_1953CBB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebCore::RegistrableDomain::uncheckedCreateFromHost@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;

  v5 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v5 != -1)
  {
    v16 = (WTF::StringImpl *)&v14;
    v15 = &v16;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  v6 = *this;
  if (*this)
  {
    v7 = *((_QWORD *)v6 + 1);
    v8 = *((unsigned int *)v6 + 1) | ((unint64_t)((*((_DWORD *)v6 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  result = (WTF::StringImpl *)WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v7, v8, (uint64_t *)&v13);
  if (v13 && *((_DWORD *)v13 + 1))
  {
    *a2 = v13;
  }
  else
  {
    v11 = *this;
    if (v11 && (v12 = *((_DWORD *)v11 + 1), *(_DWORD *)v11 += 2, v12))
    {
      *a2 = v11;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *a2 = v16;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1953CBD18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WTF::StringImpl *v9;

  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::NetworkStorageSession::setAllCookiesToSameSiteStrict(uint64_t a1, const WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  void *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  WebCore::NetworkStorageSession *v28;
  void *v29;
  WebCore::NetworkStorageSession *v30;
  uint64_t v31;
  WebCore::NetworkStorageSession *v32;
  const void *v33;
  const void *v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  id v42;
  id obj;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  WTF::StringImpl *v48[2];
  uint64_t v49;
  WTF::StringImpl *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  obj = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v42 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  WebCore::NetworkStorageSession::nsCookieStorage((WebCore::NetworkStorageSession *)a1, v48);
  v6 = v48[0];
  v7 = (void *)-[WTF::StringImpl cookies](v48[0], "cookies");
  v41 = a3;
  if (v6)
    CFRelease(v6);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v52;
    v10 = *MEMORY[0x1E0C92B00];
    v11 = *MEMORY[0x1E0C92AF8];
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v52 != v9)
          objc_enumerationMutation(v7);
        v13 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * v12);
        MEMORY[0x19AEA5508](&v50, objc_msgSend(v13, "domain"));
        WebCore::RegistrableDomain::uncheckedCreateFromHost(&v50, v48);
        if (WTF::equal(v48[0], *a2, v14))
        {
          v17 = objc_msgSend(v13, "sameSitePolicy");
          v18 = v48[0];
          v48[0] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v16);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = v50;
          v50 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v16);
            else
              *(_DWORD *)v19 -= 2;
          }
          if (v17 != v10)
          {
            objc_msgSend(obj, "addObject:", v13);
            v20 = (void *)objc_msgSend((id)objc_msgSend(v13, "properties"), "mutableCopy");
            objc_msgSend(v20, "setObject:forKeyedSubscript:", v10, v11);
            objc_msgSend(v42, "addObject:", objc_msgSend(MEMORY[0x1E0C92C00], "cookieWithProperties:", v20));
            if (v20)
              CFRelease(v20);
          }
        }
        else
        {
          v21 = v48[0];
          v48[0] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v15);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = v50;
          v50 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v15);
            else
              *(_DWORD *)v22 -= 2;
          }
        }
        ++v12;
      }
      while (v8 != v12);
      v23 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
      v8 = v23;
    }
    while (v23);
  }
  v24 = *v41;
  *v41 = 0;
  v48[0] = v24;
  v48[1] = (WTF::StringImpl *)v42;
  WebCore::NetworkStorageSession::nsCookieStorage((WebCore::NetworkStorageSession *)a1, &v49);
  v25 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v25 = &off_1E335A978;
  v26 = *(_OWORD *)v48;
  v48[0] = 0;
  v48[1] = 0;
  *(_OWORD *)(v25 + 8) = v26;
  *(_QWORD *)(v25 + 24) = v49;
  v27 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v27 = 1;
  *(_QWORD *)(v27 + 8) = v25;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v28 = (WebCore::NetworkStorageSession *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v55, 16);
  v30 = v28;
  if (v28)
  {
    v31 = *(_QWORD *)v45;
    while (1)
    {
      v32 = 0;
      do
      {
        if (*(_QWORD *)v45 != v31)
          objc_enumerationMutation(obj);
        v33 = *(const void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)v32);
        if ((WebCore::NetworkStorageSession::processMayUseCookieAPI(v28) & 1) == 0 && !*(_BYTE *)(a1 + 40))
          goto LABEL_50;
        v34 = *(const void **)(a1 + 32);
        if (v34)
        {
          CFRetain(*(CFTypeRef *)(a1 + 32));
          goto LABEL_39;
        }
        if (*(_QWORD *)(a1 + 24))
          v34 = (const void *)_CFURLStorageSessionCopyCookieStorage();
        else
LABEL_50:
          v34 = 0;
        do
LABEL_39:
          v35 = __ldaxr((unsigned int *)v27);
        while (__stlxr(v35 + 1, (unsigned int *)v27));
        v36 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v36 = &off_1E335A9A0;
        *((_QWORD *)v36 + 1) = v27;
        v48[0] = v36;
        WebCore::NetworkStorageSession::deleteHTTPCookie(a1, v34, v33, (uint64_t *)v48);
        v28 = v48[0];
        if (v48[0])
          v28 = (WebCore::NetworkStorageSession *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v48[0] + 8))(v48[0]);
        if (v34)
          CFRelease(v34);
        v32 = (WebCore::NetworkStorageSession *)((char *)v32 + 1);
      }
      while (v32 != v30);
      v28 = (WebCore::NetworkStorageSession *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v55, 16);
      v30 = v28;
      if (!v28)
        goto LABEL_52;
    }
  }
  do
  {
LABEL_52:
    v37 = __ldaxr((unsigned int *)v27);
    v38 = v37 - 1;
  }
  while (__stlxr(v38, (unsigned int *)v27));
  if (!v38)
  {
    atomic_store(1u, (unsigned int *)v27);
    v39 = *(_QWORD *)(v27 + 8);
    *(_QWORD *)(v27 + 8) = 0;
    if (v39)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      v40 = *(_QWORD *)(v27 + 8);
      *(_QWORD *)(v27 + 8) = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
    WTF::fastFree((WTF *)v27, v29);
  }
  if (obj)
    CFRelease(obj);
}

void sub_1953CC1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,CFTypeRef a22,CFTypeRef a23,WTF::StringImpl *a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v27 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v24 + 8) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  _Unwind_Resume(a1);
}

uint64_t WebCore::NetworkStorageSession::deleteHTTPCookie(uint64_t a1, CFTypeRef cf, CFTypeRef a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *v8;
  NSObject *global_queue;
  uint64_t result;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef cfa;

  v7 = *a4;
  *a4 = 0;
  v11 = v7;
  v12 = cf;
  if (cf)
    CFRetain(cf);
  cfa = a3;
  if (a3)
    CFRetain(a3);
  if (*(_BYTE *)(a1 + 40))
  {
    WebCore::NetworkStorageSession::deleteHTTPCookie(OpaqueCFHTTPCookieStorage *,NSHTTPCookie *,WTF::CompletionHandler<void ()(void)> &&)const::$_0::operator()(&v11);
    if (cfa)
      CFRelease(cfa);
  }
  else
  {
    v11 = 0;
    v12 = 0;
    cfa = 0;
    v8 = malloc_type_malloc(0x40uLL, 0x10E00407468195FuLL);
    *v8 = MEMORY[0x1E0C809A0];
    v8[1] = 50331650;
    v8[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteHTTPCookie(OpaqueCFHTTPCookieStorage *,NSHTTPCookie *,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteHTTPCookie(OpaqueCFHTTPCookieStorage *,NSHTTPCookie *,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke;
    v8[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteHTTPCookie(OpaqueCFHTTPCookieStorage *,NSHTTPCookie *,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteHTTPCookie(OpaqueCFHTTPCookieStorage *,NSHTTPCookie *,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
    v8[4] = v7;
    v8[5] = cf;
    v8[6] = a3;
    *((_BYTE *)v8 + 56) = 0;
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v8);
    _Block_release(v8);
  }
  if (v12)
    CFRelease(v12);
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

void sub_1953CC5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11)
{
  uint64_t v11;
  const void *v12;
  const void *v13;
  const void *v14;

  v14 = v12;
  if (v14)
  {
    CFRelease(v14);
    if (!v13)
    {
LABEL_3:
      if (!v11)
      {
LABEL_8:
        if (cf)
          CFRelease(cf);
        if (a9)
          (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      goto LABEL_8;
    }
  }
  else if (!v13)
  {
    goto LABEL_3;
  }
  CFRelease(v13);
  if (!v11)
    goto LABEL_8;
  goto LABEL_7;
}

WebCore::CookieStorageObserver *WebCore::NetworkStorageSession::cookieStorageObserver(WebCore::NetworkStorageSession *this)
{
  WebCore::CookieStorageObserver *result;
  NSHTTPCookieStorage *v3;
  WebCore::CookieStorageObserver **v4;
  void *v5;
  NSHTTPCookieStorage *v6;
  NSHTTPCookieStorage *v7;
  WebCore::CookieStorageObserver *v8;

  result = (WebCore::CookieStorageObserver *)*((_QWORD *)this + 36);
  if (!result)
  {
    WebCore::NetworkStorageSession::nsCookieStorage(this, &v6);
    v3 = v6;
    v7 = v6;
    std::make_unique[abi:sn180100]<WebCore::CookieStorageObserver,NSHTTPCookieStorage *>(&v8, &v7);
    v4 = (WebCore::CookieStorageObserver **)((char *)this + 288);
    std::unique_ptr<WebCore::CookieStorageObserver>::operator=[abi:sn180100](v4, &v8);
    std::unique_ptr<WebCore::CookieStorageObserver>::~unique_ptr[abi:sn180100](&v8, v5);
    if (v3)
      CFRelease(v3);
    return *v4;
  }
  return result;
}

void sub_1953CC6C4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebCore::CookieStorageObserver **std::unique_ptr<WebCore::CookieStorageObserver>::operator=[abi:sn180100](WebCore::CookieStorageObserver **a1, WebCore::CookieStorageObserver **a2)
{
  WebCore::CookieStorageObserver *v3;
  WebCore::CookieStorageObserver *v4;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::CookieStorageObserver::~CookieStorageObserver(v4, a2);
    WTF::fastFree(v5, v6);
  }
  return a1;
}

void WebCore::NetworkStorageSession::httpCookies(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  const void *v5;
  const void *v6;

  if (a3)
  {
    v4 = (const void *)CFHTTPCookieStorageCopyCookies();
    v5 = (const void *)objc_msgSend(MEMORY[0x1E0C92C00], "_cf2nsCookies:", v4);
    *a1 = v5;
    if (v5)
      CFRetain(v5);
    if (v4)
      CFRelease(v4);
  }
  else if (*(_BYTE *)(a2 + 40))
  {
    __break(0xC471u);
  }
  else
  {
    v6 = (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C92C08], "sharedHTTPCookieStorage"), "cookies");
    *a1 = v6;
    if (v6)
      CFRetain(v6);
  }
}

void sub_1953CC7C0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::NetworkStorageSession::deleteHTTPCookie(OpaqueCFHTTPCookieStorage *,NSHTTPCookie *,WTF::CompletionHandler<void ()(void)> &&)const::$_0::operator()(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  if (a1[1])
  {
    objc_msgSend((id)a1[2], "_GetInternalCFHTTPCookie");
    CFHTTPCookieStorageDeleteCookie();
  }
  else
  {
    if (*((_BYTE *)a1 + 24))
    {
LABEL_9:
      __break(0xC471u);
      JUMPOUT(0x1953CC898);
    }
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C92C08], "sharedHTTPCookieStorage"), "deleteCookie:", a1[2]);
  }
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v3 = *a1;
  *a1 = 0;
  *v2 = &off_1E335A710;
  v2[1] = v3;
  if (!v3)
    goto LABEL_9;
  v5 = v2;
  WTF::ensureOnMainThread();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

void sub_1953CC8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void *WebCore::NetworkStorageSession::capExpiryOfPersistentCookie(void *a1, double a2)
{
  void *v3;
  double v4;
  void *v5;
  const void *v6;

  v3 = a1;
  if ((objc_msgSend(a1, "isSessionOnly") & 1) == 0)
  {
    if (!objc_msgSend(v3, "expiresDate")
      || (objc_msgSend((id)objc_msgSend(v3, "expiresDate"), "timeIntervalSinceNow"), v4 > a2))
    {
      v5 = (void *)objc_msgSend((id)objc_msgSend(v3, "properties"), "mutableCopy");
      v6 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceNow:", a2);
      objc_msgSend(v5, "setObject:forKey:", v6, *MEMORY[0x1E0C92AB8]);
      v3 = (void *)objc_msgSend(MEMORY[0x1E0C92C00], "cookieWithProperties:", v5);
      if (v6)
        CFRelease(v6);
      if (v5)
        CFRelease(v5);
    }
  }
  return v3;
}

void sub_1953CC9A8(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::NetworkStorageSession::cookiesForURL(uint64_t *a1, WebCore::NetworkStorageSession *this, const WTF::URL *a3, __int16 *a4, const WTF::URL *a5, uint64_t a6, uint64_t a7, char a8, char a9, char a10)
{
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  char v17;
  char v18;
  const void *v19;
  __int128 v20;
  uint64_t v21;

  if (a9
    && (v20 = *(_OWORD *)a6,
        v21 = *(_QWORD *)(a6 + 16),
        WebCore::NetworkStorageSession::shouldBlockCookies((uint64_t)this, a3, a5, &v20, a7, a8, a10)))
  {
    *a1 = 0;
  }
  else
  {
    WebCore::NetworkStorageSession::cookieStorage(this, &v19);
    v13 = v19;
    v14 = WTF::URL::operator NSURL *();
    v16 = *a4;
    v17 = *((_BYTE *)a4 + 2);
    v18 = 1;
    v15 = WTF::URL::operator NSURL *();
    WebCore::NetworkStorageSession::httpCookiesForURL(a1, (uint64_t)this, (uint64_t)v13, v14, &v16, v15);
    if (v13)
      CFRelease(v13);
  }
}

void sub_1953CCAC4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::NetworkStorageSession::cookiesForSession(WebCore::NetworkStorageSession *this@<X0>, const WTF::URL *a2@<X1>, __int16 *a3@<X2>, const WTF::URL *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12)
{
  id v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t i;
  void *v19;
  _BOOL4 v20;
  int8x16_t *v21;
  const __CFString *v22;
  const __CFString *v23;
  uint64_t k;
  void *v25;
  BOOL v26;
  _BOOL4 v27;
  int8x16_t *v28;
  const __CFString *v29;
  const __CFString *v30;
  uint64_t j;
  void *v32;
  _BOOL4 v33;
  int8x16_t *v34;
  const __CFString *v35;
  const __CFString *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  id v51;
  CFStringRef v52;
  char v53;
  CFStringRef v54;
  int8x16_t *v55;
  int v56;
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v49 = *a5;
  v50 = *((_QWORD *)a5 + 2);
  WebCore::NetworkStorageSession::cookiesForURL((uint64_t *)&v51, this, a2, a3, a4, (uint64_t)&v49, a6, a7, a11, a12);
  v13 = v51;
  if (objc_msgSend(v51, "count"))
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 1;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v41, v57, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v42;
      v17 = 0;
      if (a8)
      {
        if ((a10 & 1) != 0)
        {
          do
          {
            for (i = 0; i != v15; ++i)
            {
              if (*(_QWORD *)v42 != v16)
                objc_enumerationMutation(v13);
              v19 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
              if (objc_msgSend((id)objc_msgSend(v19, "name"), "length"))
              {
                if (objc_msgSend(v19, "isSecure"))
                  v17 = 1;
                v20 = v47 != 0;
                if (v47)
                  v21 = (int8x16_t *)"; ";
                else
                  v21 = (int8x16_t *)"";
                v22 = (const __CFString *)objc_msgSend(v19, "name");
                v23 = (const __CFString *)objc_msgSend(v19, "value");
                v54 = v22;
                v55 = v21;
                v56 = 2 * v20;
                v53 = 61;
                v52 = v23;
                WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<NSString *,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<NSString *,void>>((uint64_t *)&v45, &v55, &v54, &v53, &v52);
              }
            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v41, v57, 16);
          }
          while (v15);
        }
        else
        {
          do
          {
            for (j = 0; j != v15; ++j)
            {
              if (*(_QWORD *)v42 != v16)
                objc_enumerationMutation(v13);
              v32 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * j);
              if (objc_msgSend((id)objc_msgSend(v32, "name"), "length"))
              {
                if ((objc_msgSend(v32, "isSecure") & 1) != 0)
                {
                  v17 = 1;
                }
                else
                {
                  v33 = v47 != 0;
                  if (v47)
                    v34 = (int8x16_t *)"; ";
                  else
                    v34 = (int8x16_t *)"";
                  v35 = (const __CFString *)objc_msgSend(v32, "name");
                  v36 = (const __CFString *)objc_msgSend(v32, "value");
                  v54 = v35;
                  v55 = v34;
                  v56 = 2 * v33;
                  v53 = 61;
                  v52 = v36;
                  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<NSString *,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<NSString *,void>>((uint64_t *)&v45, &v55, &v54, &v53, &v52);
                }
              }
            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v41, v57, 16);
          }
          while (v15);
        }
      }
      else
      {
        do
        {
          for (k = 0; k != v15; ++k)
          {
            if (*(_QWORD *)v42 != v16)
              objc_enumerationMutation(v13);
            v25 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * k);
            if (objc_msgSend((id)objc_msgSend(v25, "name"), "length") && (objc_msgSend(v25, "isHTTPOnly") & 1) == 0)
            {
              if (objc_msgSend(v25, "isSecure"))
              {
                v17 = 1;
                v26 = a10 == 0;
              }
              else
              {
                v26 = 0;
              }
              if (v26)
              {
                v17 = 1;
              }
              else
              {
                v27 = v47 != 0;
                if (v47)
                  v28 = (int8x16_t *)"; ";
                else
                  v28 = (int8x16_t *)"";
                v29 = (const __CFString *)objc_msgSend(v25, "name");
                v30 = (const __CFString *)objc_msgSend(v25, "value");
                v54 = v29;
                v55 = v28;
                v56 = 2 * v27;
                v53 = 61;
                v52 = v30;
                WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<NSString *,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<NSString *,void>>((uint64_t *)&v45, &v55, &v54, &v53, &v52);
              }
            }
          }
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v41, v57, 16);
        }
        while (v15);
      }
    }
    else
    {
      v17 = 0;
    }
    v37 = v45;
    if (v45
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v45),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v45),
          (v37 = v45) != 0))
    {
      *(_DWORD *)v37 += 2;
    }
    *(_QWORD *)a9 = v37;
    *(_BYTE *)(a9 + 8) = v17;
    v38 = v46;
    v46 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v14);
      else
        *(_DWORD *)v38 -= 2;
    }
    v39 = v45;
    v45 = 0;
    if (!v39)
    {
LABEL_59:
      if (!v13)
        return;
      goto LABEL_60;
    }
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      goto LABEL_59;
    }
    WTF::StringImpl::destroy(v39, v14);
    if (!v13)
      return;
  }
  else
  {
    *(_QWORD *)a9 = 0;
    *(_BYTE *)(a9 + 8) = 0;
    if (!v13)
      return;
  }
LABEL_60:
  CFRelease(v13);
}

void sub_1953CCF40(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21)
{
  const void *v21;
  int v22;
  NSException *v24;

  v22 = (int)a2;
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
    {
      WTF::StringImpl::destroy(a20, a2);
      if (!v21)
      {
LABEL_9:
        if (v22 == 1)
        {
          v24 = (NSException *)objc_begin_catch(exception_object);
          ReportBlockedObjCException(v24);
          objc_end_catch();
          *(_QWORD *)a10 = 0;
          *(_BYTE *)(a10 + 8) = 0;
          JUMPOUT(0x1953CCEF0);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_8:
      CFRelease(v21);
      goto LABEL_9;
    }
    *(_DWORD *)a20 -= 2;
  }
  if (!v21)
    goto LABEL_9;
  goto LABEL_8;
}

void WebCore::NetworkStorageSession::cookiesForDOM(WebCore::NetworkStorageSession *a1@<X0>, const WTF::URL *a2@<X1>, __int16 *a3@<X2>, const WTF::URL *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, __int16 a10)
{
  __int128 v10;
  uint64_t v11;

  v10 = *(_OWORD *)a5;
  v11 = *(_QWORD *)(a5 + 16);
  WebCore::NetworkStorageSession::cookiesForSession(a1, a2, a3, a4, &v10, a6, a7, 0, a9, a8, a10, SHIBYTE(a10));
}

void WebCore::NetworkStorageSession::cookiesForDOMAsVector(WebCore::NetworkStorageSession *this@<X0>, const WTF::URL *a2@<X1>, __int16 *a3@<X2>, const WTF::URL *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, __int16 a10, _QWORD *a11)
{
  id v13;
  const __CFString *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t i;
  NSHTTPCookie *v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  id v77;
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v75 = *a5;
  v76 = *((_QWORD *)a5 + 2);
  WebCore::NetworkStorageSession::cookiesForURL((uint64_t *)&v77, this, a2, a3, a4, (uint64_t)&v75, a6, a7, a10, SHIBYTE(a10));
  v13 = v77;
  if (!objc_msgSend(v77, "count"))
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_BYTE *)(a9 + 16) = 1;
    if (!v13)
      return;
    goto LABEL_25;
  }
  v73 = 0;
  v74 = 0;
  if (*a11)
    v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v14 = &stru_1E3487BC0;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v69, v78, 16);
  v53 = a9;
  v16 = 0;
  if (v15)
  {
    v17 = *(_QWORD *)v70;
    v18 = a8 ^ 1;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v70 != v17)
          objc_enumerationMutation(v13);
        v20 = *(NSHTTPCookie **)(*((_QWORD *)&v69 + 1) + 8 * i);
        if (-[NSString length](-[NSHTTPCookie name](v20, "name"), "length")
          && !-[NSHTTPCookie isHTTPOnly](v20, "isHTTPOnly")
          && (-[NSHTTPCookie isSecure](v20, "isSecure") & v18 & 1) == 0
          && (!*a11 || -[NSString isEqualToString:](-[NSHTTPCookie name](v20, "name"), "isEqualToString:", v14)))
        {
          WebCore::Cookie::Cookie((WebCore::Cookie *)&v54, v20);
          if (v16 == (_DWORD)v74)
          {
            v22 = WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v73, v16 + 1, (unint64_t)&v54);
            v16 = HIDWORD(v74);
            v23 = v73 + 136 * HIDWORD(v74);
            v24 = *v22;
            *v22 = 0;
            *(_QWORD *)v23 = v24;
            v25 = v22[1];
            v22[1] = 0;
            *(_QWORD *)(v23 + 8) = v25;
            v26 = v22[2];
            v22[2] = 0;
            *(_QWORD *)(v23 + 16) = v26;
            v27 = v22[3];
            v22[3] = 0;
            *(_QWORD *)(v23 + 24) = v27;
            v28 = *((_OWORD *)v22 + 2);
            *(_OWORD *)(v23 + 43) = *(_OWORD *)((char *)v22 + 43);
            *(_OWORD *)(v23 + 32) = v28;
            v29 = v22[8];
            v22[8] = 0;
            *(_QWORD *)(v23 + 64) = v29;
            v30 = v22[9];
            v22[9] = 0;
            *(_QWORD *)(v23 + 72) = v30;
            v31 = *(_DWORD *)(v23 + 80) & 0xFFFFFFFE | v22[10] & 1;
            *(_DWORD *)(v23 + 80) = v31;
            v32 = v31 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v22 + 20) >> 1) & 1));
            *(_DWORD *)(v23 + 80) = v32;
            v33 = v32 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v22 + 20) >> 2) & 1));
            *(_DWORD *)(v23 + 80) = v33;
            v34 = v33 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v22 + 20) >> 3) & 7));
            *(_DWORD *)(v23 + 80) = v34;
            *(_DWORD *)(v23 + 80) = v22[10] & 0xFFFFFFC0 | v34 & 0x3F;
            *(_OWORD *)(v23 + 84) = *(_OWORD *)((char *)v22 + 84);
            *(_QWORD *)(v23 + 100) = *(uint64_t *)((char *)v22 + 100);
            *(_DWORD *)(v23 + 108) = *((_DWORD *)v22 + 27);
            *((_DWORD *)v22 + 20) &= ~1u;
            *(_QWORD *)(v23 + 112) = 0;
            *(_QWORD *)(v23 + 120) = 0;
            v35 = v22[14];
            v22[14] = 0;
            *(_QWORD *)(v23 + 112) = v35;
            LODWORD(v35) = *((_DWORD *)v22 + 30);
            *((_DWORD *)v22 + 30) = 0;
            *(_DWORD *)(v23 + 120) = v35;
            LODWORD(v35) = *((_DWORD *)v22 + 31);
            *((_DWORD *)v22 + 31) = 0;
            *(_DWORD *)(v23 + 124) = v35;
            v36 = (_BYTE *)(v23 + 128);
            v37 = v22 + 16;
          }
          else
          {
            v38 = v73 + 136 * v16;
            v39 = v54;
            v54 = 0;
            *(_QWORD *)v38 = v39;
            v40 = v55;
            v55 = 0;
            *(_QWORD *)(v38 + 8) = v40;
            v41 = v56;
            v56 = 0;
            *(_QWORD *)(v38 + 16) = v41;
            v42 = v57;
            v57 = 0;
            *(_QWORD *)(v38 + 24) = v42;
            v43 = v58[0];
            *(_OWORD *)(v38 + 43) = *(_OWORD *)((char *)v58 + 11);
            *(_OWORD *)(v38 + 32) = v43;
            v44 = v59;
            v59 = 0;
            *(_QWORD *)(v38 + 64) = v44;
            v45 = v60;
            v60 = 0;
            *(_QWORD *)(v38 + 72) = v45;
            v46 = *(_DWORD *)(v38 + 80) & 0xFFFFFFFE | v61 & 1;
            *(_DWORD *)(v38 + 80) = v46;
            v47 = v46 & 0xFFFFFFFD | (2 * ((v61 >> 1) & 1));
            *(_DWORD *)(v38 + 80) = v47;
            v48 = v47 & 0xFFFFFFFB | (4 * ((v61 >> 2) & 1));
            *(_DWORD *)(v38 + 80) = v48;
            v49 = v48 & 0xFFFFFFC7 | (8 * ((v61 >> 3) & 7));
            *(_DWORD *)(v38 + 80) = v49;
            *(_DWORD *)(v38 + 80) = v61 & 0xFFFFFFC0 | v49 & 0x3F;
            *(_OWORD *)(v38 + 84) = v62;
            *(_QWORD *)(v38 + 100) = v63;
            *(_DWORD *)(v38 + 108) = v64;
            v61 &= ~1u;
            *(_QWORD *)(v38 + 112) = 0;
            *(_QWORD *)(v38 + 120) = 0;
            v50 = v65;
            v65 = 0;
            *(_QWORD *)(v38 + 112) = v50;
            LODWORD(v50) = v66;
            v66 = 0;
            *(_DWORD *)(v38 + 120) = v50;
            LODWORD(v50) = v67;
            v67 = 0;
            *(_DWORD *)(v38 + 124) = v50;
            v36 = (_BYTE *)(v38 + 128);
            v37 = &v68;
          }
          *v36 = *(_BYTE *)v37;
          HIDWORD(v74) = ++v16;
          WebCore::Cookie::~Cookie((WebCore::Cookie *)&v54, v21);
        }
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v69, v78, 16);
    }
    while (v15);
    v51 = v73;
    v52 = v74;
  }
  else
  {
    v52 = 0;
    v51 = 0;
  }
  *(_QWORD *)v53 = v51;
  *(_DWORD *)(v53 + 8) = v52;
  *(_DWORD *)(v53 + 12) = v16;
  *(_BYTE *)(v53 + 16) = 1;
  if (v13)
LABEL_25:
    CFRelease(v13);
}

void sub_1953CD4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF *a37,int a38,int a39)
{
  const void *v39;
  _BYTE *v40;
  NSException *v43;

  if (v39)
    CFRelease(v39);
  if (a2 == 1)
  {
    v43 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v43);
    objc_end_catch();
    *v40 = 0;
    v40[16] = 0;
    JUMPOUT(0x1953CD498);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::NetworkStorageSession::cookieRequestHeaderFieldValue(WebCore::NetworkStorageSession *a1@<X0>, const WTF::URL *a2@<X1>, __int16 *a3@<X2>, const WTF::URL *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, __int16 a10)
{
  __int128 v10;
  uint64_t v11;

  v10 = *(_OWORD *)a5;
  v11 = *(_QWORD *)(a5 + 16);
  WebCore::NetworkStorageSession::cookiesForSession(a1, a2, a3, a4, &v10, a6, a7, 1, a9, a8, a10, SHIBYTE(a10));
}

void WebCore::NetworkStorageSession::cookieRequestHeaderFieldValue(WebCore::NetworkStorageSession *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 88);
  v3 = *(_QWORD *)(a2 + 112);
  v5 = *(_QWORD *)(a2 + 104);
  WebCore::NetworkStorageSession::cookiesForSession(a1, (const WTF::URL *)a2, (__int16 *)(a2 + 40), (const WTF::URL *)(a2 + 48), &v4, v3, *(_QWORD *)(a2 + 120), 1, a3, *(_BYTE *)(a2 + 128), 1, 0);
}

void WebCore::NetworkStorageSession::setCookiesFromDOM(WebCore::NetworkStorageSession *a1, const WTF::URL *a2, _BYTE *a3, const WTF::URL *a4, uint64_t a5, const WTF::StringImpl *a6, char a7, int a8, WTF::StringImpl **a9, char a10)
{
  void *v15;
  WTF::StringImpl *v16;
  double v17;
  double v18;
  double v19;
  float v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  int v30;
  void *v31;
  void *v32;
  void *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  _QWORD v40[2];

  v40[1] = *MEMORY[0x1E0C80C00];
  if (!a8
    || (v37 = *(_OWORD *)a5,
        v38 = *(_QWORD *)(a5 + 16),
        (WebCore::NetworkStorageSession::shouldBlockCookies((uint64_t)a1, a2, a4, &v37, (uint64_t)a6, a7, a10) & 1) == 0))
  {
    v15 = (void *)WTF::URL::operator NSURL *();
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v39, a2);
    v17 = COERCE_DOUBLE(WebCore::NetworkStorageSession::clientSideCookieCap((uint64_t)a1, &v39, a6, a7));
    v21 = (char)v16;
    v22 = v39;
    v39 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v16);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = *a9;
    if (*a9)
    {
      v24 = *((_DWORD *)v23 + 1);
      *(_DWORD *)v23 += 2;
      if (v24)
      {
        v26 = WTF::StringImpl::find((uint64_t)v23, 0x3Du, 0, v18, v19, v20);
        v27 = *(_DWORD *)v23 + 2;
        *(_DWORD *)v23 = v27;
        v28 = v23;
        if (v26 == -1)
        {
          v29 = *((_DWORD *)v23 + 1);
          if (v29 < 0
            || __OFADD__(v29, 1)
            || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((v29 + 1), (*((_DWORD *)v23 + 4) >> 2) & 1, (uint64_t)v23, 61, &v39), (v28 = v39) == 0))
          {
            __break(0xC471u);
            return;
          }
          v27 = *(_DWORD *)v23;
        }
        v30 = v27 - 2;
        if (v30)
          *(_DWORD *)v23 = v30;
        else
          WTF::StringImpl::destroy(v23, v25);
        if (v26 == -1)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v25);
          else
            *(_DWORD *)v23 -= 2;
        }
        v31 = (void *)objc_msgSend(MEMORY[0x1E0C92C00], "_cookieForSetCookieString:forURL:partition:", WTF::StringImpl::operator NSString *(), v15, 0);
        if (v31)
        {
          v32 = (void *)objc_msgSend((id)objc_msgSend(v31, "properties"), "mutableCopy");
          objc_msgSend(v32, "setValue:forKey:", &unk_1E349D840, CFSTR("SetInJavaScript"));
          v33 = (void *)objc_msgSend(MEMORY[0x1E0C92C00], "cookieWithProperties:", v32);
          if (objc_msgSend((id)objc_msgSend(v33, "name"), "length") && (objc_msgSend(v33, "isHTTPOnly") & 1) == 0)
          {
            if (v21)
              v33 = WebCore::NetworkStorageSession::capExpiryOfPersistentCookie(v33, v17);
          }
          else
          {
            v33 = 0;
          }
          if (v32)
            CFRelease(v32);
        }
        else
        {
          v33 = 0;
        }
        v23 = v28;
      }
      else
      {
        v33 = 0;
      }
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::destroy(v23, v16);
        if (!v33)
          return;
      }
      else
      {
        *(_DWORD *)v23 -= 2;
        if (!v33)
          return;
      }
      WebCore::NetworkStorageSession::cookieStorage(a1, &v39);
      v34 = v39;
      v40[0] = v33;
      v35 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v40, 1);
      v36 = (void *)WTF::URL::operator NSURL *();
      WebCore::NetworkStorageSession::setHTTPCookiesForURL((uint64_t)v34, v35, v15, v36, a3);
      if (v34)
        CFRelease(v34);
    }
  }
}

void sub_1953CD938(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  int v3;
  NSException *v5;

  v3 = (int)a2;
  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  if (v3 == 1)
  {
    v5 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v5);
    objc_end_catch();
    JUMPOUT(0x1953CD8C4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::NetworkStorageSession::setCookieFromDOM(WebCore::NetworkStorageSession *a1, const WTF::URL *a2, _BYTE *a3, const WTF::URL *a4, uint64_t a5, uint64_t a6, char a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const void *v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  if (a8)
  {
    v19 = *(_OWORD *)a5;
    v20 = *(_QWORD *)(a5 + 16);
    if ((WebCore::NetworkStorageSession::shouldBlockCookies((uint64_t)a1, a2, a4, &v19, a6, a7, a10) & 1) != 0)
      return 0;
  }
  v12 = WebCore::Cookie::operator NSHTTPCookie *(a9);
  if (!v12)
    return 0;
  WebCore::NetworkStorageSession::cookieStorage(a1, &v18);
  v13 = v18;
  v21[0] = v12;
  v14 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1);
  v15 = (void *)WTF::URL::operator NSURL *();
  v16 = (void *)WTF::URL::operator NSURL *();
  WebCore::NetworkStorageSession::setHTTPCookiesForURL((uint64_t)v13, v14, v15, v16, a3);
  if (v13)
    CFRelease(v13);
  return 1;
}

void sub_1953CDB58()
{
  objc_end_catch();
  JUMPOUT(0x1953CDB60);
}

unint64_t WebCore::NetworkStorageSession::getRawCookies(WebCore::NetworkStorageSession *this, const WTF::URL *a2, __int16 *a3, const WTF::URL *a4, __int128 *a5, uint64_t a6, char a7, char a8, char a9, uint64_t a10)
{
  id v10;
  unint64_t result;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  WebCore::Cookie *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  __int128 v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  char v50;

  v33 = *a5;
  v34 = *((_QWORD *)a5 + 2);
  WebCore::NetworkStorageSession::cookiesForURL((uint64_t *)&v35, this, a2, a3, a4, (uint64_t)&v33, a6, a7, a8, a9);
  v10 = v35;
  result = objc_msgSend(v35, "count");
  v13 = result;
  if (v10)
    result = (unint64_t)CFRetain(v10);
  if (v13)
  {
    if (v13 >= 0x1E1E1E2)
    {
      __break(0xC471u);
      return result;
    }
    v14 = WTF::fastMalloc((WTF *)(136 * v13));
    v15 = 0;
    v16 = 0;
    v17 = 136 * (int)v13 / 0x88u;
    do
    {
      WebCore::Cookie::Cookie((WebCore::Cookie *)&v36, (NSHTTPCookie *)objc_msgSend(v10, "objectAtIndex:", v16));
      v18 = v14 + v15;
      v19 = v36;
      v36 = 0;
      *(_QWORD *)v18 = v19;
      v20 = v37;
      v37 = 0;
      *(_QWORD *)(v18 + 8) = v20;
      v21 = v38;
      v38 = 0;
      *(_QWORD *)(v18 + 16) = v21;
      v22 = v39;
      v39 = 0;
      *(_QWORD *)(v18 + 24) = v22;
      v23 = v40[0];
      *(_OWORD *)(v18 + 43) = *(_OWORD *)((char *)v40 + 11);
      *(_OWORD *)(v18 + 32) = v23;
      v24 = v41;
      v41 = 0;
      *(_QWORD *)(v18 + 64) = v24;
      v25 = v42;
      v42 = 0;
      *(_QWORD *)(v18 + 72) = v25;
      LODWORD(v25) = v43;
      *(_DWORD *)(v18 + 80) = v43;
      *(_OWORD *)(v18 + 84) = v44;
      *(_QWORD *)(v18 + 100) = v45;
      *(_DWORD *)(v18 + 108) = v46;
      v43 = v25 & 0xFFFFFFFE;
      *(_QWORD *)(v18 + 120) = 0;
      v26 = v47;
      v47 = 0;
      *(_QWORD *)(v18 + 112) = v26;
      LODWORD(v26) = v48;
      v48 = 0;
      *(_DWORD *)(v18 + 120) = v26;
      LODWORD(v26) = v49;
      v49 = 0;
      *(_DWORD *)(v18 + 124) = v26;
      *(_BYTE *)(v18 + 128) = v50;
      ++v16;
      WebCore::Cookie::~Cookie((WebCore::Cookie *)&v36, v27);
      v15 += 136;
    }
    while (v13 != v16);
  }
  else
  {
    v14 = 0;
    v17 = 0;
  }
  v28 = *(unsigned int *)(a10 + 12);
  if ((_DWORD)v28)
  {
    v29 = *(WebCore::Cookie **)a10;
    v30 = 136 * v28;
    do
    {
      WebCore::Cookie::~Cookie(v29, v12);
      v29 = (WebCore::Cookie *)(v31 + 136);
      v30 -= 136;
    }
    while (v30);
  }
  v32 = *(WTF **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)a10 = 0;
    *(_DWORD *)(a10 + 8) = 0;
    WTF::fastFree(v32, v12);
  }
  *(_QWORD *)a10 = v14;
  *(_DWORD *)(a10 + 8) = v17;
  *(_DWORD *)(a10 + 12) = v13;
  if (v10)
  {
    CFRelease(v10);
    CFRelease(v10);
  }
  return 1;
}

void sub_1953CDDA4(_Unwind_Exception *exception_object, void *a2)
{
  const void *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v7;
  WebCore::Cookie *v8;
  uint64_t v9;
  NSException *v10;

  v5 = (int)a2;
  if (v4)
  {
    v7 = 136 * v4;
    v8 = v3;
    do
    {
      WebCore::Cookie::~Cookie(v8, a2);
      v8 = (WebCore::Cookie *)(v9 + 136);
      v7 -= 136;
    }
    while (v7);
  }
  if (v3)
    WTF::fastFree(v3, a2);
  if (v2)
  {
    CFRelease(v2);
    CFRelease(v2);
  }
  if (v5 == 1)
  {
    v10 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v10);
    objc_end_catch();
    JUMPOUT(0x1953CDD7CLL);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::NetworkStorageSession::deleteCookie(WebCore::NetworkStorageSession *a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;
  const __CFString *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  CFTypeRef v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  CFTypeRef cf;

  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  v8 = *a4;
  *a4 = 0;
  *(_QWORD *)(v7 + 8) = v8;
  WebCore::NetworkStorageSession::cookieStorage(a1, &cf);
  v9 = cf;
  LOBYTE(v24) = 0;
  BYTE3(v24) = 0;
  v10 = WTF::URL::operator NSURL *();
  WebCore::NetworkStorageSession::httpCookiesForURL((uint64_t *)&v25, (uint64_t)a1, (uint64_t)v9, 0, &v24, v10);
  if (*a3)
    v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v11 = &stru_1E3487BC0;
  v12 = v25;
  v14 = objc_msgSend(v25, "count");
  if (v14)
  {
    for (i = 0; i != v14; ++i)
    {
      v16 = (void *)objc_msgSend(v25, "objectAtIndex:", i);
      if (objc_msgSend((id)objc_msgSend(v16, "name"), "isEqualToString:", v11))
      {
        v17 = cf;
        do
          v18 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v18 + 1, (unsigned int *)v7));
        v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v19 = &off_1E335A9C8;
        v19[1] = v7;
        v24 = v19;
        WebCore::NetworkStorageSession::deleteHTTPCookie((uint64_t)a1, v17, v16, (uint64_t *)&v24);
        if (v24)
          (*(void (**)(_QWORD *))(*v24 + 8))(v24);
      }
    }
    v12 = v25;
  }
  if (v12)
    CFRelease(v12);
  if (cf)
    CFRelease(cf);
  do
  {
    v20 = __ldaxr((unsigned int *)v7);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, (unsigned int *)v7));
  if (!v21)
  {
    atomic_store(1u, (unsigned int *)v7);
    v22 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    if (v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      v23 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
    WTF::fastFree((WTF *)v7, v13);
  }
}

void sub_1953CE04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, CFTypeRef a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v12 + 8) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void WebCore::NetworkStorageSession::getHostnamesWithCookies(WebCore::NetworkStorageSession *a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF **v15;
  int i;
  unsigned int v17;
  WTF **v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t j;
  WTF::StringImpl *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  id obj;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  WTF::StringImpl *v49;
  id v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  WebCore::NetworkStorageSession::cookieStorage(a1, &v49);
  v4 = v49;
  WebCore::NetworkStorageSession::httpCookies(&v50, (uint64_t)a1, (uint64_t)v49);
  if (v4)
    CFRelease(v4);
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  obj = v50;
  v5 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v46;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v46 != v6)
          objc_enumerationMutation(obj);
        if (!objc_msgSend(*(id *)(*((_QWORD *)&v45 + 1) + 8 * v7), "domain"))
          goto LABEL_60;
        MEMORY[0x19AEA5508](&v49);
        v10 = *a2;
        if (*a2
          || (v11 = WTF::fastZeroedMalloc((WTF *)0x50),
              *a2 = v11 + 16,
              *(_DWORD *)(v11 + 12) = 8,
              *(_DWORD *)(*a2 - 8) = 7,
              *(_DWORD *)(*a2 - 16) = 0,
              *(_DWORD *)(*a2 - 12) = 0,
              (v10 = *a2) != 0))
        {
          v12 = *(_DWORD *)(v10 - 8);
        }
        else
        {
          v12 = 0;
        }
        v13 = *((_DWORD *)v49 + 4);
        if (v13 < 0x100)
          v14 = WTF::StringImpl::hashSlowCase(v49);
        else
          v14 = v13 >> 8;
        v15 = 0;
        for (i = 1; ; ++i)
        {
          v17 = v14 & v12;
          v18 = (WTF **)(v10 + 8 * (v14 & v12));
          v19 = *v18;
          if (*v18 == (WTF *)-1)
          {
            v15 = (WTF **)(v10 + 8 * v17);
            goto LABEL_21;
          }
          if (!v19)
            break;
          if ((WTF::equal(v19, v49, v9) & 1) != 0)
            goto LABEL_57;
LABEL_21:
          v14 = i + v17;
        }
        if (v15)
        {
          *v15 = 0;
          --*(_DWORD *)(*a2 - 16);
          v18 = v15;
        }
        v20 = v49;
        v49 = 0;
        v21 = *v18;
        *v18 = v20;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v8);
          else
            *(_DWORD *)v21 -= 2;
        }
        v22 = *a2;
        if (*a2)
          v23 = *(_DWORD *)(v22 - 12) + 1;
        else
          v23 = 1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *a2;
        if (*a2)
          v25 = *(_DWORD *)(v24 - 12);
        else
          v25 = 0;
        v26 = (*(_DWORD *)(v24 - 16) + v25);
        v27 = *(unsigned int *)(v24 - 4);
        if (v27 > 0x400)
        {
          if (v27 <= 2 * v26)
          {
LABEL_36:
            v28 = *(_DWORD *)(v24 - 12);
            v29 = (_DWORD)v27 << (6 * v28 >= (2 * v27));
            goto LABEL_37;
          }
        }
        else if (3 * v27 <= 4 * v26)
        {
          if ((_DWORD)v27)
            goto LABEL_36;
          v28 = *(_DWORD *)(v24 - 12);
          v29 = 8;
LABEL_37:
          v30 = WTF::fastZeroedMalloc((WTF *)(8 * v29 + 16));
          *a2 = v30 + 16;
          *(_DWORD *)(v30 + 12) = v29;
          *(_DWORD *)(*a2 - 8) = v29 - 1;
          *(_DWORD *)(*a2 - 16) = 0;
          *(_DWORD *)(*a2 - 12) = v28;
          if ((_DWORD)v27)
          {
            for (j = 0; j != v27; ++j)
            {
              v33 = *(WTF::StringImpl **)(v24 + 8 * j);
              if (v33)
              {
                if (v33 != (WTF::StringImpl *)-1)
                {
                  v34 = *a2;
                  v35 = *a2 ? *(_DWORD *)(v34 - 8) : 0;
                  v36 = *((_DWORD *)v33 + 4);
                  v37 = v36 < 0x100 ? WTF::StringImpl::hashSlowCase(v33) : v36 >> 8;
                  v38 = 0;
                  do
                  {
                    v39 = v37 & v35;
                    v37 = ++v38 + v39;
                  }
                  while (*(_QWORD *)(v34 + 8 * v39));
                  *(_QWORD *)(v34 + 8 * v39) = 0;
                  v40 = *(_QWORD *)(v24 + 8 * j);
                  *(_QWORD *)(v24 + 8 * j) = 0;
                  *(_QWORD *)(v34 + 8 * v39) = v40;
                  v41 = *(WTF::StringImpl **)(v24 + 8 * j);
                  *(_QWORD *)(v24 + 8 * j) = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, v31);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                }
              }
              else
              {
                *(_QWORD *)(v24 + 8 * j) = 0;
              }
            }
          }
          WTF::fastFree((WTF *)(v24 - 16), v31);
        }
LABEL_57:
        v42 = v49;
        v49 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v8);
          else
            *(_DWORD *)v42 -= 2;
        }
LABEL_60:
        ++v7;
      }
      while (v7 != v5);
      v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
      v5 = v43;
    }
    while (v43);
  }
  if (obj)
    CFRelease(obj);
}

void sub_1953CE5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19)
{
  NSException *v21;

  if (cf)
    CFRelease(cf);
  if (a2 == 1)
  {
    v21 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v21);
    objc_end_catch();
    JUMPOUT(0x1953CE58CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::NetworkStorageSession::deleteAllCookies(WebCore::NetworkStorageSession *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  CFTypeRef v5;
  _QWORD *v6;
  NSObject *global_queue;
  uint64_t result;
  uint64_t v9;
  CFTypeRef cf;

  v3 = *a2;
  *a2 = 0;
  v9 = v3;
  WebCore::NetworkStorageSession::cookieStorage(a1, &cf);
  if (*((_BYTE *)a1 + 40))
  {
    WebCore::NetworkStorageSession::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(&v9);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v4 = v9;
    v5 = cf;
    v9 = 0;
    v6 = malloc_type_malloc(0x30uLL, 0x10E004095F28C21uLL);
    *v6 = MEMORY[0x1E0C809A0];
    v6[1] = 50331650;
    v6[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke;
    v6[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
    v6[4] = v4;
    v6[5] = v5;
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v6);
    _Block_release(v6);
  }
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

void sub_1953CE75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::NetworkStorageSession::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(uint64_t *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1[1])
  {
    CFHTTPCookieStorageDeleteAllCookies();
  }
  else
  {
    v2 = (void *)objc_msgSend(MEMORY[0x1E0C92C08], "sharedHTTPCookieStorage");
    v3 = (void *)objc_msgSend(v2, "cookies");
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v12 != v5)
            objc_enumerationMutation(v3);
          objc_msgSend(v2, "deleteCookie:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i));
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v4);
    }
  }
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E335A710;
  v8 = *a1;
  *a1 = 0;
  v7[1] = v8;
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1953CE920);
  }
  v10 = v7;
  WTF::ensureOnMainThread();
  result = (uint64_t)v10;
  if (v10)
    return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  return result;
}

void sub_1953CE928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::NetworkStorageSession::deleteCookiesMatching(WebCore::NetworkStorageSession *a1, _QWORD *a2, uint64_t *a3)
{
  id v6;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  const void *v17;
  CFTypeRef v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  CFTypeRef cf;
  CFTypeRef v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  WebCore::NetworkStorageSession::cookieStorage(a1, &v31);
  v6 = objc_alloc(MEMORY[0x1E0C92C08]);
  v7 = v31;
  v8 = objc_msgSend(v6, "_initWithCFHTTPCookieStorage:", v31);
  v9 = *a3;
  *a3 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E335A9F0;
  v10[1] = v9;
  v10[2] = v8;
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = v10;
  WebCore::NetworkStorageSession::httpCookies(&cf, (uint64_t)a1, (uint64_t)v7);
  v13 = (void *)cf;
  if (!cf)
    goto LABEL_18;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v14 = objc_msgSend((id)cf, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
  if (!v14)
  {
    cf = 0;
LABEL_17:
    CFRelease(v13);
    goto LABEL_18;
  }
  v15 = *(_QWORD *)v27;
  do
  {
    for (i = 0; i != v14; ++i)
    {
      if (*(_QWORD *)v27 != v15)
        objc_enumerationMutation(v13);
      v17 = *(const void **)(*((_QWORD *)&v26 + 1) + 8 * i);
      if ((*(unsigned int (**)(_QWORD, const void *))(*(_QWORD *)*a2 + 16))(*a2, v17))
      {
        v18 = v31;
        do
          v19 = __ldaxr((unsigned int *)v11);
        while (__stlxr(v19 + 1, (unsigned int *)v11));
        v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v20 = &off_1E335AA38;
        v20[1] = v11;
        v25 = v20;
        WebCore::NetworkStorageSession::deleteHTTPCookie((uint64_t)a1, v18, v17, (uint64_t *)&v25);
        if (v25)
          (*(void (**)(_QWORD *))(*v25 + 8))(v25);
      }
    }
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
  }
  while (v14);
  v13 = (void *)cf;
  if (cf)
    goto LABEL_17;
  do
  {
LABEL_18:
    v21 = __ldaxr((unsigned int *)v11);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v11));
  if (!v22)
  {
    atomic_store(1u, (unsigned int *)v11);
    v23 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      v24 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    }
    WTF::fastFree((WTF *)v11, v12);
  }
  if (v31)
    CFRelease(v31);
}

void sub_1953CEBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, CFTypeRef a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v23 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v20 + 8) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebCore::NetworkStorageSession::deleteCookies(WebCore::NetworkStorageSession *a1, unsigned int *a2, uint64_t *a3)
{
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v10;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  _Unwind_Exception *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  char v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;

  v6 = a2 + 8;
  v7 = a2[6];
  v8 = a2[14];
  v10 = v8 == (_DWORD)v7 && v8 != -1;
  if ((_DWORD)v7 == -1 || !v10)
  {
    v12 = v8 == -1;
    if ((_DWORD)v7 != -1)
      v12 = v10;
    if (v12)
      goto LABEL_17;
LABEL_20:
    if ((_DWORD)v7 == -1)
      goto LABEL_37;
    v31 = (WTF::StringImpl *)&v30;
    v14 = (uint64_t *)((uint64_t (*)(WTF::StringImpl **, unsigned int *))off_1E335A7B8[v7])(&v31, a2);
    if (*v14)
    {
      v15 = v14;
      v16 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
      if (v16 != -1)
      {
        v31 = (WTF::StringImpl *)&v29;
        v30 = &v31;
        std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v30, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
      }
      v17 = *v15;
      if (*v15)
      {
        v18 = *(_QWORD *)(v17 + 8);
        v19 = *(unsigned int *)(v17 + 4) | ((unint64_t)((*(_DWORD *)(v17 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v18 = 0;
        v19 = 0x100000000;
      }
      WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v18, v19, (uint64_t *)&v31);
      v13 = v31;
      if (v31)
        goto LABEL_27;
    }
    goto LABEL_17;
  }
  v31 = (WTF::StringImpl *)&v30;
  if ((((uint64_t (*)(WTF::StringImpl **, unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v7])(&v31, a2, a2 + 8) & 1) == 0)
  {
    LODWORD(v7) = a2[6];
    goto LABEL_20;
  }
LABEL_17:
  v13 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v13 += 2;
LABEL_27:
  v28 = v13;
  v20 = a2[14];
  if ((_DWORD)v20 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
LABEL_37:
    v25 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 8))(a2);
    v27 = v28;
    v28 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    _Unwind_Resume(v25);
  }
  v31 = (WTF::StringImpl *)&v29;
  v21 = *(WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, unsigned int *))off_1E335A7B8[v20])(&v31, v6);
  if (v21)
    *(_DWORD *)v21 += 2;
  v22 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x18);
  *v22 = (WTF::StringImpl *)&off_1E335AA60;
  v22[1] = v21;
  v22[2] = (WTF::StringImpl *)&v28;
  v30 = v22;
  WebCore::NetworkStorageSession::deleteCookiesMatching(a1, &v30, a3);
  (*((void (**)(WTF::StringImpl **))*v22 + 1))(v22);
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WebCore::NetworkStorageSession::deleteCookiesForHostnames(WebCore::NetworkStorageSession *a1, uint64_t a2, const WTF::StringImpl *a3, char a4, uint64_t *a5)
{
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **result;
  _QWORD v13[3];
  WTF::StringImpl **v14;
  char v15;
  char v16;

  v16 = (char)a3;
  v15 = a4;
  v14 = 0;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(WTF::StringImpl ***)a2;
    v9 = 8 * v7;
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v14, v8++, a3, (uint64_t)v13);
      v9 -= 8;
    }
    while (v9);
  }
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E335AA88;
  v10[1] = &v16;
  v10[2] = &v15;
  v10[3] = &v14;
  v13[0] = v10;
  WebCore::NetworkStorageSession::deleteCookiesMatching(a1, v13, a5);
  (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  result = v14;
  if (v14)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v11);
  return result;
}

void sub_1953CF114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl **a13)
{
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, v15);
  _Unwind_Resume(a1);
}

void WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WebCore::NetworkStorageSession *a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  const void *v7;
  const void *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  NSObject *global_queue;
  uint64_t v15;
  id v16[2];

  if ((objc_msgSend(MEMORY[0x1E0C92C08], "instancesRespondToSelector:", sel_removeCookiesSinceDate_) & 1) != 0)
  {
    v6 = *a2;
    *a2 = 0;
    v15 = v6;
    WebCore::NetworkStorageSession::nsCookieStorage(a1, v16);
    v7 = (const void *)objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", a3);
    v8 = v7;
    if (v7)
      CFRetain(v7);
    if (*((_BYTE *)a1 + 40))
    {
      v9 = v16[0];
      objc_msgSend(v16[0], "removeCookiesSinceDate:", v8);
      v10 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
      *v10 = MEMORY[0x1E0C809A0];
      v10[1] = 50331650;
      v10[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void *)#1}::__invoke;
      v10[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::descriptor;
      v10[4] = v15;
      objc_msgSend(v9, "_saveCookies:", v10);
      _Block_release(v10);
      if (v8)
        CFRelease(v8);
      if (v9)
        CFRelease(v9);
    }
    else
    {
      v12 = v16[0];
      v13 = malloc_type_malloc(0x38uLL, 0x10E0040C9DFF2F4uLL);
      *v13 = MEMORY[0x1E0C809A0];
      v13[1] = 50331650;
      v13[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke;
      v13[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
      v13[4] = v15;
      v13[5] = v12;
      v13[6] = v8;
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_async(global_queue, v13);
      _Block_release(v13);
    }
  }
  else
  {
    v11 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

void sub_1953CF34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  const void *v11;
  uint64_t v12;
  const void *v13;

  if (v11)
    CFRelease(v11);
  if (v13)
    CFRelease(v13);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::NetworkStorageSession::stopListeningForCookieChangeNotifications(uint64_t a1, _QWORD *a2, _QWORD **a3)
{
  WTF::StringImpl **v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const __CFString *v16;
  id v17;
  id v18;

  v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a3);
  v8 = v6;
  v10 = v9;
  if (*a3)
    v11 = (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)];
  else
    v11 = 0;
  if ((WTF::StringImpl **)v11 != v6)
  {
    v12 = 0;
    do
    {
      v13 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 56), v8, v7);
      if (*(_QWORD *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 64) != v13)
      {
        v14 = v13;
        WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::MotionManagerClient>((unsigned int *)(v13 + 8), a2);
        if (WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(*(_QWORD **)(v14 + 8)))
        {
          if (*(_QWORD *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 64) != v14)
            WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(a1 + 56, (WTF::StringImpl **)v14);
          v15 = *(void **)(a1 + 48);
          if (*v8)
            v16 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v16 = &stru_1E3487BC0;
          objc_msgSend(v15, "removeObject:", v16);
          v12 = 1;
        }
      }
      while (++v8 != v10)
      {
        if ((unint64_t)*v8 + 1 > 1)
          goto LABEL_17;
      }
      v8 = v10;
LABEL_17:
      ;
    }
    while (v8 != (WTF::StringImpl **)v11);
    if ((v12 & 1) != 0)
    {
      WebCore::NetworkStorageSession::nsCookieStorage((WebCore::NetworkStorageSession *)a1, &v18);
      v17 = v18;
      objc_msgSend(v18, "_setSubscribedDomainsForCookieChanges:", *(_QWORD *)(a1 + 48));
      if (v17)
        CFRelease(v17);
    }
  }
}

void sub_1953CF598(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1 || !*((_DWORD *)a1 - 3))
    return 1;
  v2 = *((unsigned int *)a1 - 1);
  v3 = &a1[v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*a1 + 1) <= 1)
    {
      ++a1;
      v4 -= 8;
      if (!v4)
        goto LABEL_8;
    }
  }
  if (a1 != v3)
  {
    v5 = *a1;
LABEL_12:
    if (*(_QWORD *)(v5 + 8))
      return a1 == v3;
    while (++a1 != v3)
    {
      v5 = *a1;
      if ((unint64_t)(*a1 + 1) > 1)
      {
        if (a1 != v3)
          goto LABEL_12;
        break;
      }
    }
  }
LABEL_8:
  a1 = v3;
  return a1 == v3;
}

void sub_1953CF748(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  const void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v14 = *(const void **)(v12 + 24);
  *(_QWORD *)(v12 + 24) = 0;
  if (v14)
    CFRelease(v14);
  v15 = *(WTF::StringImpl **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(WTF::StringImpl **)v12;
  *(_QWORD *)v12 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ProtectionSpace::receivesCredentialSecurely(WebCore::ProtectionSpace *this)
{
  return objc_msgSend((id)WebCore::ProtectionSpace::nsSpace(this), "receivesCredentialSecurely");
}

BOOL WebCore::ProtectionSpace::encodingRequiresPlatformData(WebCore::ProtectionSpace *this, NSURLProtectionSpace *a2)
{
  return -[WebCore::ProtectionSpace distinguishedNames](this, "distinguishedNames")
      || -[WebCore::ProtectionSpace serverTrust](this, "serverTrust") != 0;
}

WebCore::RangeResponseGenerator *WebCore::RangeResponseGenerator::RangeResponseGenerator(WebCore::RangeResponseGenerator *this, RefCountedSerialFunctionDispatcher *a2)
{
  uint64_t v4;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_19689B170;
  *(_QWORD *)(v4 + 24) = this;
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 1) = 0;
  (*((void (**)(RefCountedSerialFunctionDispatcher *))a2->var0 + 4))(a2);
  *((_QWORD *)this + 2) = a2;
  return this;
}

void sub_1953CF8A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  v3 = v2;
  v5 = *(_QWORD *)(v3 + 8);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(v3 + 8);
      do
      {
        v8 = *(WTF::StringImpl **)v7;
        if (*(_QWORD *)v7 != -1)
        {
          v9 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
            v8 = *(WTF::StringImpl **)v7;
          }
          *(_QWORD *)v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v7 += 16;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::RangeResponseGenerator::removeTask(WebCore::RangeResponseGenerator *this, WebCoreNSURLSessionDataTask *a2)
{
  NSURL *v4;
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  WebCoreNSURLSessionDataTask *v23;
  int v24;
  uint64_t v25;
  const void *v26;
  WTF *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v37;

  v4 = -[NSURLRequest URL](-[WebCoreNSURLSessionDataTask originalRequest](a2, "originalRequest"), "URL");
  if (!v4)
    return;
  MEMORY[0x19AEA5508](&v37, -[NSURL absoluteString](v4, "absoluteString"));
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = *((_DWORD *)v37 + 4);
    if (v9 < 0x100)
      v10 = WTF::StringImpl::hashSlowCase(v37);
    else
      v10 = v9 >> 8;
    for (i = 0; ; v10 = i + v12)
    {
      v12 = v10 & v8;
      v13 = *(WTF **)(v7 + 16 * v12);
      if (v13 != (WTF *)-1)
      {
        if (!v13)
        {
          v7 = 0;
          goto LABEL_13;
        }
        if ((WTF::equal(v13, v37, v6) & 1) != 0)
          break;
      }
      ++i;
    }
    v7 = *(_QWORD *)(v7 + 16 * v12 + 8);
  }
LABEL_13:
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v5);
      if (!v7)
        return;
      goto LABEL_17;
    }
    *(_DWORD *)v14 -= 2;
  }
  if (!v7)
    return;
LABEL_17:
  v17 = *(_QWORD *)(v7 + 8);
  v16 = (uint64_t *)(v7 + 8);
  v15 = v17;
  if (v17)
  {
    v18 = *(_DWORD *)(v15 - 8);
    v19 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(WebCoreNSURLSessionDataTask **)(v15 + 16 * v22);
    if (v23 != a2)
    {
      v24 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v24) & v18;
        v23 = *(WebCoreNSURLSessionDataTask **)(v15 + 16 * v22);
        ++v24;
        if (v23 == a2)
          goto LABEL_24;
      }
      v22 = *(unsigned int *)(v15 - 4);
    }
LABEL_24:
    if (v22 != *(_DWORD *)(v15 - 4))
    {
      v25 = v15 + 16 * v22;
      v26 = *(const void **)v25;
      *(_QWORD *)v25 = 0;
      if (v26)
        CFRelease(v26);
      v27 = *(WTF **)(v25 + 8);
      *(_QWORD *)v25 = -1;
      *(_QWORD *)(v25 + 8) = 0;
      if (v27)
      {
        if (*(_QWORD *)v27)
        {
          *(_QWORD *)(*(_QWORD *)v27 + 8) = 0;
          v28 = *(unsigned int **)v27;
          *(_QWORD *)v27 = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, v5);
            }
          }
        }
        else
        {
          *(_QWORD *)v27 = 0;
        }
        WTF::fastFree(v27, v5);
      }
      ++*(_DWORD *)(*v16 - 16);
      v31 = *v16;
      if (*v16)
        v32 = *(_DWORD *)(v31 - 12) - 1;
      else
        v32 = -1;
      *(_DWORD *)(v31 - 12) = v32;
      v33 = *v16;
      if (*v16)
      {
        v34 = 6 * *(_DWORD *)(v33 - 12);
        v35 = *(_DWORD *)(v33 - 4);
        if (v34 < v35 && v35 >= 9)
          WTF::HashTable<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashMap<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>>::rehash(v16, v35 >> 1, 0);
      }
    }
  }
}

void sub_1953CFB74(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(uint64_t *result, void *cf, unint64_t *a3, unint64_t a4, char a5, uint64_t a6)
{
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _OWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  int v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  BOOL v50;
  int v51;
  char v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _WORD *v61;
  BOOL v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  _WORD *v66;
  unint64_t v67;
  _WORD *v68;
  _WORD *v69;
  int v70;
  unint64_t v71;
  _WORD *v72;
  unsigned __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  unint64_t v81;
  char *v82;
  int v83;
  unint64_t v84;
  char *v85;
  size_t v86;
  unsigned __int128 *v87;
  unsigned __int128 *v88;
  __int128 v89;
  int8x16_t v90;
  __int128 v91;
  __int128 v92;
  char *v93;
  char *v94;
  char *v95;
  __int16 v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const void *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  void *v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  WTF::StringImpl *v120;
  const void *v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  WTF::StringImpl *v125;
  CFTypeRef v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  WTF *v136;
  unsigned __int128 *v138;
  unsigned __int128 *v139;
  unsigned __int128 v140;
  char v141;
  _BYTE v142[80];
  _WORD v143[29];
  char v144;
  __int16 v145;
  CFTypeRef cfa;
  char v147;
  __int128 v148;
  unint64_t v149;
  __int128 v150;
  __int128 v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  __int128 v154;
  _BYTE v155[24];
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x2_t v161;

  v11 = result;
  v158 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a6 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 48);
    if (v13 < *a3)
      return result;
    do
      v14 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v14 + 1, (unsigned int *)v12));
  }
  else
  {
    if (*a3)
      return result;
    v13 = 0;
  }
  v15 = *(_QWORD *)(a6 + 8);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)cf + ~((_QWORD)cf << 32)) ^ (((unint64_t)cf + ~((_QWORD)cf << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(void **)(v15 + 16 * v20);
    if (v21 != cf)
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(void **)(v15 + 16 * v20);
        ++v22;
        if (v21 == cf)
          goto LABEL_12;
      }
      goto LABEL_160;
    }
LABEL_12:
    v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
    if (v23)
    {
      *(_QWORD *)&v148 = cf;
      if (cf)
        CFRetain(cf);
      if (v12)
      {
        do
          v24 = __ldaxr((unsigned int *)v12);
        while (__stlxr(v24 + 1, (unsigned int *)v12));
      }
      *((_QWORD *)&v148 + 1) = v12;
      v149 = v13;
      v25 = *(_QWORD *)v23;
      if (*(_QWORD *)v23)
        goto LABEL_208;
      v25 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = v23;
      v27 = *(unsigned int **)v23;
      *(_QWORD *)v23 = v25;
      if (!v27)
        goto LABEL_208;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v26);
      }
      v25 = *(_QWORD *)v23;
      if (*(_QWORD *)v23)
      {
LABEL_208:
        do
          v30 = __ldaxr((unsigned int *)v25);
        while (__stlxr(v30 + 1, (unsigned int *)v25));
      }
      *(_QWORD *)&v150 = v25;
      v31 = *v11;
      if (!*v11)
      {
        v33 = 0;
        goto LABEL_36;
      }
      if (__ldaxr((unsigned __int8 *)v31))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v31))
      {
        goto LABEL_29;
      }
      MEMORY[0x19AEA534C](v31);
LABEL_29:
      if (*(_QWORD *)(v31 + 24))
      {
        ++*(_QWORD *)(v31 + 16);
        v33 = v31;
      }
      else
      {
        v33 = 0;
      }
      v34 = __ldxr((unsigned __int8 *)v31);
      if (v34 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v31))
        {
LABEL_36:
          *((_QWORD *)&v150 + 1) = v33;
          *(_QWORD *)&v151 = v11;
          v35 = v11[2];
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
          *((_QWORD *)&v151 + 1) = v35;
          if (*(_BYTE *)(v23 + 32))
          {
            if (*(_BYTE *)(v23 + 32) == 2)
              WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_0::operator()((uint64_t)&v148);
LABEL_159:
            result = (uint64_t *)WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_0::~$_0((uint64_t)&v148, v36);
            goto LABEL_160;
          }
          v37 = *a3;
          v38 = a3[1];
          if (a5)
          {
            LODWORD(v39) = 0;
            v40 = a4;
            do
            {
              v39 = (v39 + 1);
              v41 = v40 > 9;
              v40 /= 0xAuLL;
            }
            while (v41);
            if ((v39 & 0x80000000) != 0)
              goto LABEL_203;
            if (!(_DWORD)v39)
            {
              v42 = MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
              goto LABEL_50;
            }
            WTF::tryFastCompactMalloc((WTF *)(v39 + 20));
            v42 = v154;
            if (!(_QWORD)v154)
            {
LABEL_203:
              __break(0xC471u);
              goto LABEL_204;
            }
            v43 = 0;
            v44 = (void *)(v154 + 20);
            *(_DWORD *)v154 = 2;
            *(_DWORD *)(v42 + 4) = v39;
            *(_QWORD *)(v42 + 8) = v42 + 20;
            *(_DWORD *)(v42 + 16) = 4;
            do
            {
              v155[v43-- + 8] = (a4 % 0xA) | 0x30;
              v41 = a4 > 9;
              a4 /= 0xAuLL;
            }
            while (v41);
            if (v43 + 26 <= 25)
              memcpy(v44, &v155[v43 + 9], -v43);
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v42 = v154;
          }
LABEL_50:
          v45 = 0;
          v46 = v37;
          do
          {
            ++v45;
            v41 = v46 > 9;
            v46 /= 0xAuLL;
          }
          while (v41);
          v47 = 0;
          v48 = v38;
          do
          {
            ++v47;
            v41 = v48 > 9;
            v48 /= 0xAuLL;
          }
          while (v41);
          if (v42)
          {
            v49 = *(_DWORD *)(v42 + 4);
            if (v49 < 0)
              goto LABEL_202;
          }
          else
          {
            v49 = 0;
          }
          v50 = __OFADD__(v49, 1);
          v51 = v49 + 1;
          v52 = v50;
          if ((v47 & 0x80000000) == 0 && (v52 & 1) == 0)
          {
            v50 = __OFADD__(v47, v51);
            v53 = v47 + v51;
            if (!v50)
            {
              v50 = __OFADD__(v53, 1);
              v54 = v53 + 1;
              v55 = v50;
              if ((v45 & 0x80000000) == 0 && !v55)
              {
                v50 = __OFADD__(v45, v54);
                v56 = v45 + v54;
                if (!v50)
                {
                  v57 = (v56 + 6);
                  if (!__OFADD__(v56, 6))
                  {
                    if (!v42 || (*(_BYTE *)(v42 + 16) & 4) != 0)
                    {
                      if (v56 != -6)
                      {
                        if ((v57 & 0x80000000) == 0)
                        {
                          WTF::tryFastCompactMalloc((WTF *)(v57 + 20));
                          v58 = v154;
                          if ((_QWORD)v154)
                          {
                            v75 = 0;
                            *(_DWORD *)v154 = 2;
                            *(_DWORD *)(v58 + 4) = v57;
                            *(_QWORD *)(v58 + 8) = v58 + 20;
                            *(_QWORD *)(v58 + 16) = 0x6574796200000004;
                            v76 = v37;
                            *(_WORD *)(v58 + 24) = 8307;
                            do
                            {
                              v155[v75-- + 8] = (v76 % 0xA) | 0x30;
                              v41 = v76 > 9;
                              v76 /= 0xAuLL;
                            }
                            while (v41);
                            if (v75 + 26 <= 25)
                              memcpy((void *)(v58 + 26), &v155[v75 + 9], -v75);
                            v77 = 0;
                            v78 = v37;
                            do
                            {
                              ++v77;
                              v41 = v78 > 9;
                              v78 /= 0xAuLL;
                            }
                            while (v41);
                            v79 = 0;
                            v80 = (_BYTE *)(v58 + 26 + v77);
                            *v80 = 45;
                            v81 = v38;
                            do
                            {
                              v155[v79-- + 8] = (v81 % 0xA) | 0x30;
                              v41 = v81 > 9;
                              v81 /= 0xAuLL;
                            }
                            while (v41);
                            v82 = v80 + 1;
                            if (v79 + 26 <= 25)
                              memcpy(v82, &v155[v79 + 9], -v79);
                            v83 = 0;
                            v84 = v38;
                            do
                            {
                              ++v83;
                              v41 = v84 > 9;
                              v84 /= 0xAuLL;
                            }
                            while (v41);
                            v85 = &v82[v83];
                            *v85 = 47;
                            v73 = (unsigned __int128 *)(v85 + 1);
                            if (!v42)
                            {
                              v153 = (WTF::StringImpl *)v58;
LABEL_122:
                              LODWORD(v97) = 0;
                              v98 = v38 - v37 + 1;
                              v99 = v98;
                              do
                              {
                                v97 = (v97 + 1);
                                v41 = v99 > 9;
                                v99 /= 0xAuLL;
                              }
                              while (v41);
                              if ((v97 & 0x80000000) == 0)
                              {
                                if (!(_DWORD)v97)
                                {
                                  v100 = MEMORY[0x1E0CBEF70];
                                  *MEMORY[0x1E0CBEF70] += 2;
LABEL_131:
                                  v152 = (WTF::StringImpl *)v100;
                                  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v142, (const WebCore::ResourceResponseBase *)(a6 + 24));
                                  v103 = *(const void **)(a6 + 264);
                                  cfa = v103;
                                  if (v103)
                                    CFRetain(v103);
                                  v147 = *(_BYTE *)(a6 + 272);
                                  WebCore::ResourceResponse::platformLazyInit((uint64_t)v142, 2);
                                  v145 &= ~0x20u;
                                  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)v143, (WTF::StringImpl *)0x17, &v153);
                                  WebCore::ResourceResponse::platformLazyInit((uint64_t)v142, 2);
                                  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)v143, (WTF::StringImpl *)0x15, &v152);
                                  WebCore::ResourceResponse::platformLazyInit((uint64_t)v142, 1);
                                  v143[28] = 206;
                                  v144 &= ~1u;
                                  WebCore::ResourceResponse::initNSURLResponse((WebCore::ResourceResponse *)v142);
                                  v105 = v152;
                                  v152 = 0;
                                  if (v105)
                                  {
                                    if (*(_DWORD *)v105 == 2)
                                      WTF::StringImpl::destroy(v105, v104);
                                    else
                                      *(_DWORD *)v105 -= 2;
                                  }
                                  v106 = v153;
                                  v153 = 0;
                                  if (v106)
                                  {
                                    if (*(_DWORD *)v106 == 2)
                                      WTF::StringImpl::destroy(v106, v104);
                                    else
                                      *(_DWORD *)v106 -= 2;
                                  }
                                  v107 = v148;
                                  v148 = 0u;
                                  v154 = v107;
                                  *(_QWORD *)v155 = v149;
                                  *(_OWORD *)&v155[8] = v150;
                                  v150 = 0u;
                                  v108 = v151;
                                  v151 = 0u;
                                  v156 = v108;
                                  v109 = *(_QWORD *)v23;
                                  if (*(_QWORD *)v23)
                                    goto LABEL_209;
                                  v109 = WTF::fastCompactMalloc((WTF *)0x10);
                                  *(_DWORD *)v109 = 1;
                                  *(_QWORD *)(v109 + 8) = v23;
                                  v111 = *(unsigned int **)v23;
                                  *(_QWORD *)v23 = v109;
                                  if (!v111)
                                    goto LABEL_209;
                                  do
                                  {
                                    v112 = __ldaxr(v111);
                                    v113 = v112 - 1;
                                  }
                                  while (__stlxr(v113, v111));
                                  if (!v113)
                                  {
                                    atomic_store(1u, v111);
                                    WTF::fastFree((WTF *)v111, v110);
                                  }
                                  v109 = *(_QWORD *)v23;
                                  if (*(_QWORD *)v23)
                                  {
LABEL_209:
                                    do
                                      v114 = __ldaxr((unsigned int *)v109);
                                    while (__stlxr(v114 + 1, (unsigned int *)v109));
                                  }
                                  *(_QWORD *)&v157 = v109;
                                  *((_QWORD *)&v157 + 1) = cf;
                                  if (cf)
                                    CFRetain(cf);
                                  v115 = WTF::fastMalloc((WTF *)0x50);
                                  *(_QWORD *)v115 = off_1E335AAD8;
                                  *(_QWORD *)(v115 + 8) = v154;
                                  v116 = *((_QWORD *)&v154 + 1);
                                  v154 = 0u;
                                  *(_QWORD *)(v115 + 16) = v116;
                                  *(_OWORD *)(v115 + 24) = *(_OWORD *)v155;
                                  *(_QWORD *)(v115 + 40) = *(_QWORD *)&v155[16];
                                  *(_OWORD *)&v155[8] = 0u;
                                  *(_QWORD *)(v115 + 48) = v156;
                                  v117 = *((_QWORD *)&v156 + 1);
                                  v156 = 0u;
                                  *(_QWORD *)(v115 + 56) = v117;
                                  *(_QWORD *)(v115 + 64) = v157;
                                  v118 = *((_QWORD *)&v157 + 1);
                                  v157 = 0u;
                                  *(_QWORD *)(v115 + 72) = v118;
                                  v153 = (WTF::StringImpl *)v115;
                                  objc_msgSend(cf, "resource:receivedResponse:completionHandler:", 0, v142, &v153);
                                  v120 = v153;
                                  v153 = 0;
                                  if (v120)
                                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v120 + 8))(v120);
                                  v121 = (const void *)*((_QWORD *)&v157 + 1);
                                  *((_QWORD *)&v157 + 1) = 0;
                                  if (v121)
                                    CFRelease(v121);
                                  v122 = (unsigned int *)v157;
                                  *(_QWORD *)&v157 = 0;
                                  if (v122)
                                  {
                                    do
                                    {
                                      v123 = __ldaxr(v122);
                                      v124 = v123 - 1;
                                    }
                                    while (__stlxr(v124, v122));
                                    if (!v124)
                                    {
                                      atomic_store(1u, v122);
                                      WTF::fastFree((WTF *)v122, v119);
                                    }
                                  }
                                  WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_0::~$_0((uint64_t)&v154, v119);
                                  *(_BYTE *)(v23 + 32) = 1;
                                  v126 = cfa;
                                  cfa = 0;
                                  if (v126)
                                    CFRelease(v126);
                                  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v142, v125);
                                  goto LABEL_159;
                                }
                                WTF::tryFastCompactMalloc((WTF *)(v97 + 20));
                                v100 = v154;
                                if ((_QWORD)v154)
                                {
                                  v101 = 0;
                                  v102 = (void *)(v154 + 20);
                                  *(_DWORD *)v154 = 2;
                                  *(_DWORD *)(v100 + 4) = v97;
                                  *(_QWORD *)(v100 + 8) = v100 + 20;
                                  *(_DWORD *)(v100 + 16) = 4;
                                  do
                                  {
                                    v155[v101-- + 8] = (v98 % 0xA) | 0x30;
                                    v41 = v98 > 9;
                                    v98 /= 0xAuLL;
                                  }
                                  while (v41);
                                  if (v101 + 26 <= 25)
                                    memcpy(v102, &v155[v101 + 9], -v101);
                                  goto LABEL_131;
                                }
                              }
                              __break(0xC471u);
LABEL_204:
                              JUMPOUT(0x1953D088CLL);
                            }
                            v36 = *(_OWORD **)(v42 + 8);
                            v86 = *(unsigned int *)(v42 + 4);
                            if ((*(_BYTE *)(v42 + 16) & 4) == 0)
                            {
                              v138 = (unsigned __int128 *)((char *)v73 + v86);
                              if (v86 >= 0x10)
                              {
                                v139 = (unsigned __int128 *)((char *)v73 + (v86 & 0xFFFFFFF0));
                                do
                                {
                                  v140 = (unsigned __int128)vld2q_s8((const char *)v36);
                                  v36 += 2;
                                  *v73++ = v140;
                                }
                                while (v73 != v139);
                                v73 = v139;
                              }
                              while (v73 != v138)
                              {
                                v141 = *(_BYTE *)v36;
                                v36 = (_OWORD *)((char *)v36 + 2);
                                *(_BYTE *)v73 = v141;
                                v73 = (unsigned __int128 *)((char *)v73 + 1);
                              }
                              goto LABEL_119;
                            }
                            if ((_DWORD)v86)
                            {
                              if ((_DWORD)v86 != 1)
                              {
LABEL_112:
                                memcpy(v73, v36, v86);
                                goto LABEL_119;
                              }
                              *(_BYTE *)v73 = *(_BYTE *)v36;
                            }
LABEL_119:
                            v153 = (WTF::StringImpl *)v58;
                            if (v42)
                            {
                              if (*(_DWORD *)v42 == 2)
                                WTF::StringImpl::destroy((WTF::StringImpl *)v42, (WTF::StringImpl *)v36);
                              else
                                *(_DWORD *)v42 -= 2;
                            }
                            goto LABEL_122;
                          }
                        }
                        goto LABEL_201;
                      }
                    }
                    else if (v56 != -6)
                    {
                      if (v57 <= 0x7FFFFFEF)
                      {
                        WTF::tryFastCompactMalloc((WTF *)(2 * v57 + 20));
                        v58 = v154;
                        if ((_QWORD)v154)
                        {
                          v59 = 0;
                          *(_DWORD *)v154 = 2;
                          *(_DWORD *)(v58 + 4) = v57;
                          *(_QWORD *)(v58 + 20) = 0x65007400790062;
                          *(_QWORD *)(v58 + 8) = v58 + 20;
                          *(_DWORD *)(v58 + 16) = 0;
                          *(_DWORD *)(v58 + 28) = 2097267;
                          v60 = v37;
                          do
                          {
                            v155[v59-- + 8] = (v60 % 0xA) | 0x30;
                            v41 = v60 > 9;
                            v60 /= 0xAuLL;
                          }
                          while (v41);
                          if (v59 + 26 <= 25)
                          {
                            v61 = (_WORD *)(v58 + 32);
                            do
                            {
                              *v61++ = v155[v59 + 9];
                              v62 = __CFADD__(v59++, 1);
                            }
                            while (!v62);
                          }
                          v63 = 0;
                          v64 = v37;
                          do
                          {
                            ++v63;
                            v41 = v64 > 9;
                            v64 /= 0xAuLL;
                          }
                          while (v41);
                          v65 = 0;
                          v66 = (_WORD *)(v58 + 32 + 2 * v63);
                          *v66 = 45;
                          v67 = v38;
                          do
                          {
                            v155[v65-- + 8] = (v67 % 0xA) | 0x30;
                            v41 = v67 > 9;
                            v67 /= 0xAuLL;
                          }
                          while (v41);
                          v68 = v66 + 1;
                          if (v65 + 26 <= 25)
                          {
                            v69 = v68;
                            do
                            {
                              *v69++ = v155[v65 + 9];
                              v62 = __CFADD__(v65++, 1);
                            }
                            while (!v62);
                          }
                          v70 = 0;
                          v71 = v38;
                          do
                          {
                            ++v70;
                            v41 = v71 > 9;
                            v71 /= 0xAuLL;
                          }
                          while (v41);
                          v72 = &v68[v70];
                          *v72 = 47;
                          v73 = (unsigned __int128 *)(v72 + 1);
                          v36 = *(_OWORD **)(v42 + 8);
                          v74 = *(unsigned int *)(v42 + 4);
                          if ((*(_BYTE *)(v42 + 16) & 4) != 0)
                          {
                            v87 = (unsigned __int128 *)((char *)v73 + 2 * v74);
                            if (v74 >= 0x40)
                            {
                              v88 = (unsigned __int128 *)((char *)v73 + 2 * (v74 & 0xFFFFFFC0));
                              v89 = 0uLL;
                              do
                              {
                                v159.val[0] = (int8x16_t)*v36;
                                v90 = *((int8x16_t *)v36 + 1);
                                v160.val[0] = (int8x16_t)v36[2];
                                v91 = v36[3];
                                v36 += 4;
                                v92 = v91;
                                v160.val[1] = 0uLL;
                                v161.val[0] = v90;
                                v159.val[1] = 0uLL;
                                v93 = (char *)v73;
                                vst2q_s8(v93, v159);
                                v93 += 32;
                                v161.val[1] = 0uLL;
                                vst2q_s8(v93, v161);
                                v94 = (char *)(v73 + 4);
                                vst2q_s8(v94, v160);
                                v95 = (char *)(v73 + 6);
                                vst2q_s8(v95, *(int8x16x2_t *)(&v89 - 1));
                                v73 += 8;
                              }
                              while (v73 != v88);
                              v73 = v88;
                            }
                            while (v73 != v87)
                            {
                              v96 = *(unsigned __int8 *)v36;
                              v36 = (_OWORD *)((char *)v36 + 1);
                              *(_WORD *)v73 = v96;
                              v73 = (unsigned __int128 *)((char *)v73 + 2);
                            }
                            goto LABEL_119;
                          }
                          if ((_DWORD)v74 == 1)
                          {
                            *(_WORD *)v73 = *(_WORD *)v36;
                            goto LABEL_119;
                          }
                          if ((_DWORD)v74)
                          {
                            v86 = 2 * v74;
                            goto LABEL_112;
                          }
                          goto LABEL_119;
                        }
                      }
LABEL_201:
                      v153 = 0;
                      goto LABEL_202;
                    }
                    v58 = MEMORY[0x1E0CBEF70];
                    *MEMORY[0x1E0CBEF70] += 2;
                    goto LABEL_119;
                  }
                }
              }
            }
          }
LABEL_202:
          __break(0xC471u);
          JUMPOUT(0x1953D0898);
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v31);
      goto LABEL_36;
    }
  }
LABEL_160:
  if (v12)
  {
    do
    {
      v127 = __ldaxr((unsigned int *)v12);
      v128 = v127 - 1;
    }
    while (__stlxr(v128, (unsigned int *)v12));
    if (!v128)
    {
      atomic_store(1u, (unsigned int *)v12);
      v129 = *(unsigned int *)(v12 + 20);
      if ((_DWORD)v129)
      {
        v130 = *(_QWORD *)(v12 + 8);
        v131 = v130 + 16 * v129;
        do
        {
          v132 = *(unsigned int **)(v130 + 8);
          *(_QWORD *)(v130 + 8) = 0;
          if (v132)
          {
            do
            {
              v133 = __ldaxr(v132);
              v134 = v133 - 1;
            }
            while (__stlxr(v134, v132));
            if (!v134)
            {
              atomic_store(1u, v132);
              v135 = v132[6];
              if ((_DWORD)v135 != -1)
                ((void (*)(_BYTE *, unsigned int *))off_1E335A898[v135])(v142, v132 + 2);
              v132[6] = -1;
              WTF::fastFree((WTF *)v132, cf);
            }
          }
          v130 += 16;
        }
        while (v130 != v131);
      }
      v136 = *(WTF **)(v12 + 8);
      if ((WTF *)(v12 + 24) != v136 && v136 != 0)
      {
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 16) = 0;
        WTF::fastFree(v136, cf);
      }
      return (uint64_t *)WTF::fastFree((WTF *)v12, cf);
    }
  }
  return result;
}

void sub_1953D08A4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,CFTypeRef cf)
{
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  void *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  WTF *v57;

  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a11, a2);
  *(_QWORD *)(v43 - 192) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v45);
    else
      *(_DWORD *)v42 -= 2;
  }
  v46 = *(WTF::StringImpl **)(v43 - 184);
  *(_QWORD *)(v43 - 184) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v45);
    else
      *(_DWORD *)v46 -= 2;
  }
  WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_0::~$_0(v43 - 256, v45);
  if (v41)
  {
    do
    {
      v48 = __ldaxr((unsigned int *)v41);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, (unsigned int *)v41));
    if (!v49)
    {
      atomic_store(1u, (unsigned int *)v41);
      v50 = *(unsigned int *)(v41 + 20);
      if ((_DWORD)v50)
      {
        v51 = *(_QWORD *)(v41 + 8);
        v52 = v51 + 16 * v50;
        do
        {
          v53 = *(unsigned int **)(v51 + 8);
          *(_QWORD *)(v51 + 8) = 0;
          if (v53)
          {
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              atomic_store(1u, v53);
              v56 = v53[6];
              if ((_DWORD)v56 != -1)
                ((void (*)(char *, unsigned int *))off_1E335A898[v56])(&a11, v53 + 2);
              v53[6] = -1;
              WTF::fastFree((WTF *)v53, v47);
            }
          }
          v51 += 16;
        }
        while (v51 != v52);
      }
      v57 = *(WTF **)(v41 + 8);
      if ((WTF *)(v41 + 24) != v57 && v57 != 0)
      {
        *(_QWORD *)(v41 + 8) = 0;
        *(_DWORD *)(v41 + 16) = 0;
        WTF::fastFree(v57, v47);
      }
      WTF::fastFree((WTF *)v41, v47);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  const void *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (!v4)
    goto LABEL_16;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v17 = __ldxr((unsigned __int8 *)v4);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
LABEL_16:
  v9 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v18 = *(unsigned int *)(v12 + 20);
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD *)(v12 + 8);
        v20 = v19 + 16 * v18;
        do
        {
          v21 = *(unsigned int **)(v19 + 8);
          *(_QWORD *)(v19 + 8) = 0;
          if (v21)
          {
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              v29 = v20;
              v30 = v19;
              v24 = v12;
              atomic_store(1u, v21);
              v25 = v21[6];
              if ((_DWORD)v25 != -1)
                ((void (*)(char *, unsigned int *))off_1E335A898[v25])(&v31, v21 + 2);
              v21[6] = -1;
              WTF::fastFree((WTF *)v21, a2);
              v12 = v24;
              v20 = v29;
              v19 = v30;
            }
          }
          v19 += 16;
        }
        while (v19 != v20);
      }
      v26 = *(WTF **)(v12 + 8);
      if ((WTF *)(v12 + 24) != v26 && v26 != 0)
      {
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 16) = 0;
        v28 = v12;
        WTF::fastFree(v26, a2);
        v12 = v28;
      }
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  v15 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v15)
    CFRelease(v15);
  return a1;
}

WTF *WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_0::operator()(uint64_t a1)
{
  WTF *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  id v13;
  unsigned int *v14;
  unsigned int v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  WebCoreSharedBufferData *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  int v39;
  uint64_t v40;
  id v41;
  WTF *v42;
  WTF *v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  WTF::StringImpl *v48[2];
  int v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  WTF *v53[3];
  WebCore::SharedBuffer *v54;
  WebCoreSharedBufferData *v55;
  unsigned int *v56;
  char v57;

  result = (WTF *)objc_msgSend(*(id *)a1, "state");
  if (!result)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        while (1)
        {
          v5 = *(_QWORD *)(v4 + 24);
          if (v5 >= *(_QWORD *)(a1 + 16))
            break;
          result = (WTF *)WebCore::FragmentedSharedBuffer::getSomeData(*(WebCore::FragmentedSharedBuffer **)(a1 + 8), v5, v43);
          if ((_QWORD)v44 && (v8 = *(_QWORD *)(v4 + 16), v7 = *(_QWORD *)(v4 + 24), v9 = v8 >= v7, v10 = v8 - v7, v9))
          {
            if (v10 + 1 < (unint64_t)v44)
              v12 = v10 + 1;
            else
              v12 = v44;
            *(_QWORD *)(v4 + 24) = v12 + v7;
            v13 = *(id *)a1;
            v14 = (unsigned int *)v43[0];
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 + 1, v14));
            v56 = v14;
            WebCore::SharedBufferDataView::SharedBufferDataView(v53, (uint64_t *)&v56, (unint64_t)v43[1], v12, 1);
            v17 = v56;
            v56 = 0;
            if (v17)
            {
              do
              {
                v18 = __ldaxr(v17);
                v19 = v18 - 1;
              }
              while (__stlxr(v19, v17));
              if (!v19)
              {
                atomic_store(1u, v17);
                v29 = v17[6];
                if ((_DWORD)v29 != -1)
                  ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v29])(&v57, v17 + 2);
                v17[6] = -1;
                WTF::fastFree((WTF *)v17, v16);
              }
            }
            WebCore::SharedBufferDataView::createSharedBuffer((unsigned int **)v53, (uint64_t *)&v54);
            WebCore::SharedBuffer::createNSData(v54, &v55);
            objc_msgSend(v13, "resource:receivedData:", 0, &v55);
            v21 = v55;
            v55 = 0;
            if (v21)
              CFRelease(v21);
            result = (WTF *)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v54, v20);
            v22 = (unsigned int *)v53[0];
            v53[0] = 0;
            if (v22)
            {
              do
              {
                v23 = __ldaxr(v22);
                v24 = v23 - 1;
              }
              while (__stlxr(v24, v22));
              if (!v24)
              {
                atomic_store(1u, v22);
                v30 = v22[6];
                if ((_DWORD)v30 != -1)
                  ((void (*)(unsigned int **, unsigned int *))off_1E335A898[v30])(&v56, v22 + 2);
                v22[6] = -1;
                result = (WTF *)WTF::fastFree((WTF *)v22, v6);
              }
            }
            v11 = 1;
          }
          else
          {
            v11 = 0;
          }
          v25 = (unsigned int *)v43[0];
          v43[0] = 0;
          if (!v25)
            goto LABEL_26;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            atomic_store(1u, v25);
            v28 = v25[6];
            if ((_DWORD)v28 != -1)
              ((void (*)(WTF **, unsigned int *))off_1E335A898[v28])(v53, v25 + 2);
            v25[6] = -1;
            result = (WTF *)WTF::fastFree((WTF *)v25, v6);
            if ((v11 & 1) == 0)
            {
LABEL_38:
              v5 = *(_QWORD *)(v4 + 24);
              break;
            }
          }
          else
          {
LABEL_26:
            if ((v11 & 1) == 0)
              goto LABEL_38;
          }
        }
        if (v5 >= *(_QWORD *)(v4 + 16))
        {
          v31 = *(id *)a1;
          v49 = 0;
          v47 = 0u;
          *(_OWORD *)v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          *(_OWORD *)v43 = 0u;
          v44 = 0u;
          v50 = -1;
          v51 = -1;
          v52 = 0;
          objc_msgSend(v31, "resourceFinished:metrics:", 0, v43);
          v33 = v52;
          v52 = 0;
          if (v33)
            WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v33, v32);
          v34 = v48[1];
          v48[1] = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v32);
            else
              *(_DWORD *)v34 -= 2;
          }
          v35 = *(_QWORD *)(a1 + 48);
          v36 = *(_QWORD *)(a1 + 32);
          if (!v36)
          {
            v38 = 0;
            goto LABEL_57;
          }
          if (__ldaxr((unsigned __int8 *)v36))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v36))
          {
LABEL_50:
            if (*(_QWORD *)(v36 + 24))
            {
              ++*(_QWORD *)(v36 + 16);
              v38 = v36;
            }
            else
            {
              v38 = 0;
            }
            v39 = __ldxr((unsigned __int8 *)v36);
            if (v39 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v36))
                goto LABEL_57;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v36);
LABEL_57:
            v40 = *(_QWORD *)(a1 + 40);
            v41 = *(id *)a1;
            if (*(_QWORD *)a1)
              CFRetain(*(CFTypeRef *)a1);
            v42 = (WTF *)WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v42 = &off_1E335A8C8;
            *((_QWORD *)v42 + 1) = v38;
            *((_QWORD *)v42 + 2) = v40;
            *((_QWORD *)v42 + 3) = v41;
            v43[0] = v42;
            (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v43);
            result = v43[0];
            v43[0] = 0;
            if (result)
              return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
            return result;
          }
          MEMORY[0x19AEA534C](v36);
          goto LABEL_50;
        }
      }
    }
  }
  return result;
}

void sub_1953D1268(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26)
{
  uint64_t v26;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;

  if (!v26)
LABEL_20:
    _Unwind_Resume(exception_object);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
LABEL_7:
    v29 = *(_QWORD *)(v26 + 16) - 1;
    *(_QWORD *)(v26 + 16) = v29;
    if (v29)
    {
      v32 = __ldxr((unsigned __int8 *)v26);
      if (v32 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v26))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v26);
      goto LABEL_20;
    }
    v30 = *(_QWORD *)(v26 + 8);
    v31 = __ldxr((unsigned __int8 *)v26);
    if (v31 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v26))
      {
LABEL_13:
        if (!v30)
          WTF::fastFree((WTF *)v26, a2);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
  goto LABEL_7;
}

void WebCore::RangeResponseGenerator::giveResponseToTasksWithFinishedRanges(WebCore::RangeResponseGenerator *this, WebCore::RangeResponseGenerator::Data *a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (*((_BYTE *)a2 + 280))
  {
    v4 = *((_QWORD *)a2 + 2);
    if (v4)
      v4 = *(_QWORD *)(v4 + 48);
    v5 = v4 & 0xFFFFFFFFFFFFFF00;
    v6 = 1;
  }
  else
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a2 + 24, 1);
    v4 = *((_QWORD *)a2 + 9);
    v5 = v4 & 0xFFFFFFFFFFFFFF00;
    v6 = v4 != -1;
    if (v4 == -1)
    {
      LOBYTE(v4) = 0;
      v5 = 0;
    }
  }
  v7 = *((_QWORD *)a2 + 1);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = v7 + 16 * v8;
    if (*(_DWORD *)(v7 - 12))
    {
      v10 = *((_QWORD *)a2 + 1);
      if ((_DWORD)v8)
      {
        v11 = 16 * v8;
        v10 = *((_QWORD *)a2 + 1);
        while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
        {
          v10 += 16;
          v11 -= 16;
          if (!v11)
          {
            v10 = v9;
            goto LABEL_14;
          }
        }
      }
      goto LABEL_14;
    }
    v10 = v7 + 16 * v8;
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = v7 + 16 * v8;
  if (v7)
  {
LABEL_14:
    v12 = v7 + 16 * *(unsigned int *)(v7 - 4);
    goto LABEL_19;
  }
  v12 = 0;
LABEL_19:
  if (v12 != v10)
  {
    v13 = v5 | v4;
    do
    {
      WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived((uint64_t *)this, *(void **)v10, (unint64_t *)(*(_QWORD *)(v10 + 8) + 8), v13, v6, (uint64_t)a2);
      v14 = v10 + 16;
      v10 = v9;
      if (v14 != v9)
      {
        v10 = v14;
        while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
        {
          v10 += 16;
          if (v10 == v9)
          {
            v10 = v9;
            break;
          }
        }
      }
    }
    while (v10 != v12);
  }
}

void WebCore::RangeResponseGenerator::willHandleRequest(WebCore::RangeResponseGenerator *this, WebCoreNSURLSessionDataTask *a2, NSURLRequest *a3)
{
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int i;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;
  const char *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  WTF::StringImpl *v31[3];
  WTF *v32;
  CFTypeRef cf;
  WTF::StringImpl *v34[2];
  char v35;

  if (!-[NSURLRequest URL](a3, "URL"))
    return;
  MEMORY[0x19AEA5508](v34, -[NSURL absoluteString](-[NSURLRequest URL](a3, "URL"), "absoluteString"));
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = *((_DWORD *)v34[0] + 4);
    if (v10 < 0x100)
      v11 = WTF::StringImpl::hashSlowCase(v34[0]);
    else
      v11 = v10 >> 8;
    for (i = 0; ; v11 = i + v13)
    {
      v13 = v11 & v9;
      v14 = *(WTF **)(v8 + 16 * v13);
      if (v14 != (WTF *)-1)
      {
        if (!v14)
        {
          v8 = 0;
          goto LABEL_13;
        }
        if ((WTF::equal(v14, v34[0], v7) & 1) != 0)
          break;
      }
      ++i;
    }
    v8 = *(_QWORD *)(v8 + 16 * v13 + 8);
  }
LABEL_13:
  v15 = v34[0];
  v34[0] = 0;
  if (!v15)
    goto LABEL_16;
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
LABEL_16:
    if (!v8)
      return;
    goto LABEL_17;
  }
  WTF::StringImpl::destroy(v15, v6);
  if (!v8)
    return;
LABEL_17:
  MEMORY[0x19AEA5508](v31, -[NSURLRequest valueForHTTPHeaderField:](a3, "valueForHTTPHeaderField:", CFSTR("Range")));
  if (v31[0])
  {
    v16 = (const char *)*((_QWORD *)v31[0] + 1);
    v17 = *((unsigned int *)v31[0] + 1) | ((unint64_t)((*((_DWORD *)v31[0] + 4) >> 2) & 1) << 32);
  }
  else
  {
    v16 = 0;
    v17 = 0x100000000;
  }
  WebCore::ParsedRequestRange::parse(v16, v17, (uint64_t)v34);
  v19 = v31[0];
  v31[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (v35)
  {
    if (*(_BYTE *)(v8 + 280))
    {
      v20 = *(_QWORD *)(v8 + 16);
      if (v20)
        v21 = *(_QWORD *)(v20 + 48);
      else
        v21 = 0;
    }
    else
    {
      WebCore::ResourceResponse::platformLazyInit(v8 + 24, 1);
      v21 = *(_QWORD *)(v8 + 72);
      if (v21 == -1)
      {
        v22 = 0;
        LOBYTE(v21) = 0;
        v23 = 0;
LABEL_30:
        cf = a2;
        if (a2)
          CFRetain(a2);
        if (!v35)
          goto LABEL_49;
        v24 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v24 = 0;
        *(_OWORD *)(v24 + 8) = *(_OWORD *)v34;
        *(WTF::StringImpl **)(v24 + 24) = v34[0];
        *(_BYTE *)(v24 + 32) = 0;
        v32 = (WTF *)v24;
        WTF::HashMap<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>((uint64_t)v31, (uint64_t *)(v8 + 8), &cf, (uint64_t *)&v32);
        v26 = v32;
        v32 = 0;
        if (v26)
        {
          if (*(_QWORD *)v26)
          {
            *(_QWORD *)(*(_QWORD *)v26 + 8) = 0;
            v27 = *(unsigned int **)v26;
            *(_QWORD *)v26 = 0;
            if (v27)
            {
              do
              {
                v28 = __ldaxr(v27);
                v29 = v28 - 1;
              }
              while (__stlxr(v29, v27));
              if (!v29)
              {
                atomic_store(1u, v27);
                v30 = v26;
                WTF::fastFree((WTF *)v27, v25);
                v26 = v30;
              }
            }
          }
          else
          {
            *(_QWORD *)v26 = 0;
          }
          WTF::fastFree(v26, v25);
        }
        if (cf)
          CFRelease(cf);
        if (v35)
          WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived((uint64_t *)this, a2, (unint64_t *)v34, v23 | v21, v22, v8);
        else
LABEL_49:
          __break(1u);
        return;
      }
    }
    v23 = v21 & 0xFFFFFFFFFFFFFF00;
    v22 = 1;
    goto LABEL_30;
  }
}

void sub_1953D185C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, CFTypeRef cf, WTF::StringImpl *a16)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WTF::HashMap<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  const void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  _QWORD *v18;
  int v19;
  const void *v20;
  uint64_t v21;
  WTF *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashMap<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = (const void *)*a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = v8 + 16 * v15;
  v17 = *(const void **)v16;
  if (*(_QWORD *)v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v8 - 4);
        v34 = 0;
        v35 = v8 + 16 * v26;
        goto LABEL_43;
      }
      if (v17 == (const void *)-1)
        v18 = (_QWORD *)v16;
      v15 = (v15 + v19) & v10;
      v16 = v8 + 16 * v15;
      v17 = *(const void **)v16;
      ++v19;
    }
    while (*(_QWORD *)v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = (const void *)*a3;
      v16 = (uint64_t)v18;
    }
  }
  *a3 = 0;
  v20 = *(const void **)v16;
  *(_QWORD *)v16 = v11;
  if (v20)
    CFRelease(v20);
  v21 = *a4;
  *a4 = 0;
  v22 = *(WTF **)(v16 + 8);
  *(_QWORD *)(v16 + 8) = v21;
  if (v22)
  {
    if (*(_QWORD *)v22)
    {
      *(_QWORD *)(*(_QWORD *)v22 + 8) = 0;
      v23 = *(unsigned int **)v22;
      *(_QWORD *)v22 = 0;
      if (v23)
      {
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v23);
          WTF::fastFree((WTF *)v23, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v22 = 0;
    }
    WTF::fastFree(v22, a2);
  }
  v27 = *a2;
  if (*a2)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *a2;
  if (*a2)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 <= 2 * v31)
      goto LABEL_33;
  }
  else if (3 * v32 <= 4 * v31)
  {
    if (!(_DWORD)v32)
    {
      v33 = 8;
LABEL_38:
      v16 = WTF::HashTable<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashMap<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>>::rehash(a2, v33, (const void **)v16);
      v29 = *a2;
      if (*a2)
        v32 = *(unsigned int *)(v29 - 4);
      else
        v32 = 0;
      goto LABEL_42;
    }
LABEL_33:
    v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
    goto LABEL_38;
  }
LABEL_42:
  v35 = v29 + 16 * v32;
  v34 = 1;
LABEL_43:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v35;
  *(_BYTE *)(a1 + 16) = v34;
}

BOOL WebCore::RangeResponseGenerator::willSynthesizeRangeResponses(WebCore::RangeResponseGenerator *this, WebCoreNSURLSessionDataTask *a2, unint64_t i, const WebCore::ResourceResponse *a4)
{
  NSURLRequest *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const char *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _BOOL8 v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v20;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  unsigned __int8 *v25;
  uint64_t internal;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  const WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  NSURLRequest *v40;
  unsigned int v41;
  WTF *isa;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  WTF *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  WTF *v64;
  CFTypeRef cf;
  WTF::StringImpl *v66;
  __int128 v67;
  char v68;
  WTF::StringImpl *v69[36];

  v8 = -[WebCoreNSURLSessionDataTask originalRequest](a2, "originalRequest");
  if (!-[NSURLRequest URL](v8, "URL"))
    return 0;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a4, 1);
  if (*((_WORD *)a4 + 68) != 200)
    return 0;
  WebCore::ResourceResponseBase::httpHeaderField((uint64_t)a4, 23, v69);
  v10 = v69[0];
  if (!v69[0])
    goto LABEL_4;
  v20 = *((_DWORD *)v69[0] + 1);
  v69[0] = 0;
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, v9);
    if (v20)
      return 0;
  }
  else
  {
    *(_DWORD *)v10 -= 2;
    if (v20)
      return 0;
  }
LABEL_4:
  MEMORY[0x19AEA5508](v69, -[NSURLRequest valueForHTTPHeaderField:](v8, "valueForHTTPHeaderField:", CFSTR("Range")));
  if (v69[0])
  {
    v11 = (const char *)*((_QWORD *)v69[0] + 1);
    v12 = *((unsigned int *)v69[0] + 1) | ((unint64_t)((*((_DWORD *)v69[0] + 4) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WebCore::ParsedRequestRange::parse(v11, v12, (uint64_t)&v67);
  v14 = v69[0];
  v69[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v68 != 0;
  if (!v68)
    return v15;
  v16 = WTF::fastMalloc((WTF *)0x28);
  MEMORY[0x19AEA52E0](v69, -[NSURLRequest URL](v8, "URL"));
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)v16 = off_1E335A918;
  v18 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v22 = 0;
    goto LABEL_26;
  }
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v18);
LABEL_19:
  if (*(_QWORD *)(v18 + 24))
  {
    ++*(_QWORD *)(v18 + 16);
    v22 = v18;
  }
  else
  {
    v22 = 0;
  }
  v23 = __ldxr((unsigned __int8 *)v18);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
LABEL_25:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_26:
  *(_QWORD *)(v16 + 16) = v22;
  *(_QWORD *)(v16 + 24) = this;
  v24 = v69[0];
  if (v69[0])
    *(_DWORD *)v69[0] += 2;
  *(_QWORD *)(v16 + 32) = v24;
  v25 = (unsigned __int8 *)(i + 24);
  if (__ldaxr((unsigned __int8 *)(i + 24)))
  {
    __clrex();
LABEL_31:
    MEMORY[0x19AEA534C](i + 24);
    goto LABEL_32;
  }
  if (__stxr(1u, v25))
    goto LABEL_31;
LABEL_32:
  internal = *(_QWORD *)(i + 16);
  *(_QWORD *)(i + 16) = v16;
  if (internal)
  {
    v28 = (unsigned int *)(internal + 8);
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
LABEL_113:
      atomic_store(1u, (unsigned int *)(internal + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)internal + 8))(internal);
    }
  }
  v31 = __ldxr(v25);
  if (v31 == 1)
  {
    if (!__stlxr(0, v25))
      goto LABEL_41;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_41:
  v32 = v69[0];
  v69[0] = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v17);
    else
      *(_DWORD *)v32 -= 2;
  }
  MEMORY[0x19AEA5508](&v66, -[NSURL absoluteString](-[NSURLRequest URL](v8, "URL"), "absoluteString"));
  v37 = *((_QWORD *)this + 1);
  v35 = (uint64_t *)((char *)this + 8);
  v36 = v37;
  if (v37
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::RangeResponseGenerator::Data>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::RangeResponseGenerator::Data>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::RangeResponseGenerator::Data>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGenerator::Data>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v35, 8u, 0), (v36 = *v35) != 0))
  {
    v25 = (unsigned __int8 *)*(unsigned int *)(v36 - 8);
  }
  else
  {
    v25 = 0;
  }
  v38 = *((_DWORD *)v66 + 4);
  v63 = i;
  if (v38 < 0x100)
    v39 = WTF::StringImpl::hashSlowCase(v66);
  else
    v39 = v38 >> 8;
  v40 = 0;
  for (i = 1; ; i = (i + 1))
  {
    v41 = v39 & v25;
    v8 = (NSURLRequest *)(v36 + 16 * (v39 & v25));
    isa = v8->super.isa;
    if (v8->super.isa == (Class)-1)
    {
      v40 = (NSURLRequest *)(v36 + 16 * v41);
      goto LABEL_56;
    }
    if (!isa)
      break;
    internal = WTF::equal(isa, v66, v34);
    if ((internal & 1) != 0)
      goto LABEL_88;
LABEL_56:
    v39 = i + v41;
  }
  if (v40)
  {
    v40->super.isa = 0;
    v40->_internal = 0;
    --*(_DWORD *)(*v35 - 16);
    v8 = v40;
  }
  v43 = v66;
  v66 = 0;
  v44 = v8->super.isa;
  v8->super.isa = v43;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v33);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = WTF::fastMalloc((WTF *)0x128);
  *(_QWORD *)v45 = off_1E335AB00;
  *(_QWORD *)(v45 + 8) = 0;
  *(_QWORD *)(v45 + 16) = 0;
  WebCore::ResourceResponseBase::crossThreadData(a4, (uint64_t)v69);
  a4 = (const WebCore::ResourceResponse *)(v45 + 24);
  WebCore::ResourceResponseBase::fromCrossThreadData((uint64_t)v69, v45 + 24);
  WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v69, v46);
  *(_BYTE *)(v45 + 280) = 0;
  v25 = *(unsigned __int8 **)(v63 + 8);
  if (__ldaxr(v25))
  {
    __clrex();
    goto LABEL_65;
  }
  if (__stxr(1u, v25))
LABEL_65:
    MEMORY[0x19AEA534C](v25);
  ++*((_QWORD *)v25 + 1);
  v48 = __ldxr(v25);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_70;
  }
  if (__stlxr(0, v25))
LABEL_70:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
  *(_QWORD *)(v45 + 288) = v63;
  internal = (uint64_t)v8->_internal;
  v8->_internal = (NSURLRequestInternal *)v45;
  if (internal)
    internal = (*(uint64_t (**)(uint64_t))(*(_QWORD *)internal + 8))(internal);
  v49 = *v35;
  if (*v35)
    v50 = *(_DWORD *)(v49 - 12) + 1;
  else
    v50 = 1;
  *(_DWORD *)(v49 - 12) = v50;
  v51 = *v35;
  if (*v35)
    v52 = *(_DWORD *)(v51 - 12);
  else
    v52 = 0;
  v53 = (*(_DWORD *)(v51 - 16) + v52);
  v54 = *(unsigned int *)(v51 - 4);
  if (v54 > 0x400)
  {
    if (v54 <= 2 * v53)
    {
LABEL_82:
      v55 = (_DWORD)v54 << (6 * *(_DWORD *)(v51 - 12) >= (2 * v54));
      goto LABEL_87;
    }
  }
  else if (3 * v54 <= 4 * v53)
  {
    if ((_DWORD)v54)
      goto LABEL_82;
    v55 = 8;
LABEL_87:
    internal = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::RangeResponseGenerator::Data>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::RangeResponseGenerator::Data>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::RangeResponseGenerator::Data>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGenerator::Data>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v35, v55, &v8->super.isa);
    v8 = (NSURLRequest *)internal;
  }
LABEL_88:
  this = v8->_internal;
  cf = a2;
  if (a2)
    internal = (uint64_t)CFRetain(a2);
  if (!v68)
  {
    __break(1u);
    goto LABEL_113;
  }
  v56 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v56 = 0;
  *(_OWORD *)(v56 + 8) = v67;
  *(_QWORD *)(v56 + 24) = v67;
  *(_BYTE *)(v56 + 32) = 0;
  v64 = (WTF *)v56;
  WTF::HashMap<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>((uint64_t)v69, (uint64_t *)this + 1, &cf, (uint64_t *)&v64);
  v58 = v64;
  v64 = 0;
  if (v58)
  {
    if (*(_QWORD *)v58)
    {
      *(_QWORD *)(*(_QWORD *)v58 + 8) = 0;
      v59 = *(unsigned int **)v58;
      *(_QWORD *)v58 = 0;
      if (v59)
      {
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
        {
          atomic_store(1u, v59);
          WTF::fastFree((WTF *)v59, v57);
        }
      }
    }
    else
    {
      *(_QWORD *)v58 = 0;
    }
    WTF::fastFree(v58, v57);
  }
  if (cf)
    CFRelease(cf);
  v62 = v66;
  v66 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v57);
    else
      *(_DWORD *)v62 -= 2;
  }
  return v15;
}

void sub_1953D213C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, CFTypeRef cf, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17)
{
  WebCore::ResourceResponseBase *v17;
  WTF *v18;
  uint64_t *v19;
  const void *v21;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;

  v21 = (const void *)*((_QWORD *)v18 + 33);
  *((_QWORD *)v18 + 33) = 0;
  if (v21)
    CFRelease(v21);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v17, a2);
  v23 = *((_QWORD *)v18 + 2);
  *((_QWORD *)v18 + 2) = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v23));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v23);
      v27 = *(unsigned int *)(v23 + 20);
      if ((_DWORD)v27)
      {
        v28 = *(_QWORD *)(v23 + 8);
        v29 = v28 + 16 * v27;
        do
        {
          v30 = *(unsigned int **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              atomic_store(1u, v30);
              v33 = v30[6];
              if ((_DWORD)v33 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335A898[v33])(&a17, v30 + 2);
              v30[6] = -1;
              WTF::fastFree((WTF *)v30, v22);
            }
          }
          v28 += 16;
        }
        while (v28 != v29);
      }
      v34 = *(WTF **)(v23 + 8);
      if ((WTF *)(v23 + 24) != v34 && v34 != 0)
      {
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 16) = 0;
        WTF::fastFree(v34, v22);
      }
      WTF::fastFree((WTF *)v23, v22);
    }
  }
  if (*v19)
    WTF::HashTable<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashMap<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>>::deallocateTable(*v19, v22);
  WTF::fastFree(v18, v22);
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v26);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebCore::ResourceRequestBase::~ResourceRequestBase(WebCore::ResourceRequestBase *this, void *a2)
{
  WebCore::FormData *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::FormData *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FormData::~FormData(v3, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::ResourceRequestBase::RequestData::~RequestData(this, (WTF::StringImpl *)a2);
}

void WebCore::ResourceRequest::replacePlatformRequest(uint64_t a1, int a2)
{
  const void *v4;
  char v5;

  WebCore::ResourceRequestBase::updateResourceRequest((WebCore::ResourceRequest *)a1, 0);
  v4 = *(const void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v4)
    CFRelease(v4);
  *(_BYTE *)(a1 + 184) &= ~2u;
  WebCore::ResourceRequest::doUpdatePlatformRequest((WebCore::ResourceRequest *)a1);
  v5 = *(_BYTE *)(a1 + 184);
  *(_BYTE *)(a1 + 184) = v5 | 2;
  if (a2 == 1 && (v5 & 8) == 0)
  {
    WebCore::ResourceRequest::doUpdatePlatformHTTPBody((WebCore::ResourceRequest *)a1);
    *(_BYTE *)(a1 + 184) |= 8u;
  }
}

uint64_t WebCore::ResourceRequest::cfURLRequest(WebCore::ResourceRequest *a1, int a2)
{
  const void *v3;

  WebCore::ResourceRequestBase::updatePlatformRequest(a1, a2);
  v3 = (const void *)*((_QWORD *)a1 + 24);
  if (v3)
    CFRetain(v3);
  return objc_msgSend((id)(id)CFMakeCollectable(v3), "_CFURLRequest");
}

WebCore::FormData **WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::operator=(WebCore::FormData **a1, WebCore::FormData *a2)
{
  WebCore::FormData *v3;
  bmalloc::api *v5;
  void *v6;

  ++*(_DWORD *)a2;
  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FormData::~FormData(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

void WebCore::copyRequestWithStorageSession(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  const void *MutableCopy;
  void *v6;

  if (a1 && a2)
  {
    objc_msgSend(a2, "_CFURLRequest");
    MutableCopy = (const void *)CFURLRequestCreateMutableCopy();
    _CFURLRequestSetStorageSession();
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92C28]), "_initWithCFURLRequest:", MutableCopy);
    objc_msgSend(v6, "setAttribution:", objc_msgSend(a2, "attribution"));
    *a3 = v6;
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  else
  {
    *a3 = objc_msgSend(a2, "copy");
  }
}

void sub_1953D25E4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::cachedResponseForRequest(uint64_t a1, void *a2)
{
  const void *v3;
  const void *v4;
  CFTypeRef v5;

  if (a1)
  {
    v3 = (const void *)_CFURLStorageSessionCopyCache();
    objc_msgSend(a2, "_CFURLRequest");
    v4 = (const void *)CFURLCacheCopyResponseForRequest();
    if (v4)
    {
      v5 = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(objc_alloc(MEMORY[0x1E0C92BF8]), "_initWithCFCachedURLResponse:", v4));
      CFRelease(v4);
      if (!v3)
        return (uint64_t)v5;
    }
    else
    {
      v5 = 0;
      if (!v3)
        return (uint64_t)v5;
    }
    CFRelease(v3);
    return (uint64_t)v5;
  }
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C92C50], "sharedURLCache"), "cachedResponseForRequest:", a2);
}

void sub_1953D26D4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::adjustMIMETypeIfNecessary(uint64_t a1, int a2, int a3)
{
  __CFString *MIMEType;
  WebCore::MIMETypeRegistry *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  CFStringRef v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  BOOL v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  PAL *v16;
  NSString *v17;
  const __CFString *v18;
  const __CFString *v19;
  WTF::StringImpl *v20;
  int v21;
  CFStringRef v22;
  CFStringRef v23;
  const __CFString *PreferredIdentifierForTag;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  CFStringRef theString1;

  MIMEType = (__CFString *)CFURLResponseGetMIMEType();
  if (!MIMEType)
  {
    WebCore::filePathExtension(&theString1);
    v9 = theString1;
    if (theString1)
    {
      if (CFStringCompare(theString1, CFSTR("mjs"), 1uLL) == kCFCompareEqualTo)
      {
        CFURLResponseSetMIMEType();
        v22 = v9;
LABEL_59:
        CFRelease(v22);
        return;
      }
      CFRelease(v9);
    }
  }
  if (a3 || !a2)
    goto LABEL_65;
  v6 = (WebCore::MIMETypeRegistry *)MEMORY[0x19AEA5508](&v28, MIMEType);
  if (!v28)
  {
    v7 = 0;
    goto LABEL_6;
  }
  if (*((_DWORD *)v28 + 1))
  {
    v10 = WebCore::MIMETypeRegistry::supportedNonImageMIMETypes(v6);
    if (*v10)
    {
      if (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v10, (WTF::ASCIICaseInsensitiveHash *)&v28))
      {
        goto LABEL_23;
      }
    }
  }
  v7 = v28;
  if (v28 && *((_DWORD *)v28 + 1))
  {
    *(_DWORD *)v28 += 2;
    theString1 = (CFStringRef)v7;
    if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&theString1) & 1) != 0)
    {
      v12 = 1;
    }
    {
      if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
        v12 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&theString1) != 0;
      else
        v12 = 0;
    }
    else
    {
      v12 = 0;
      WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
    }
    v13 = (WTF::StringImpl *)theString1;
    theString1 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        if (v12)
          goto LABEL_23;
LABEL_78:
        v7 = v28;
        goto LABEL_6;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (v12)
      goto LABEL_23;
    goto LABEL_78;
  }
LABEL_6:
  if ((MEMORY[0x19AEA53F4](v7, "text/css", 8) & 1) == 0
    && !MEMORY[0x19AEA53F4](v28, "application/pdf", 15))
  {
    goto LABEL_25;
  }
LABEL_23:
  if ((MEMORY[0x19AEA53F4](v28, "text/plain", 10) & 1) != 0 || (MEMORY[0x19AEA53F4](v28, "text/xml", 8) & 1) != 0)
  {
LABEL_25:
    v14 = 1;
    goto LABEL_26;
  }
  v14 = MEMORY[0x19AEA53F4](v28, "application/xml", 15);
LABEL_26:
  v15 = v28;
  v28 = 0;
  if (!v15)
    goto LABEL_29;
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
LABEL_29:
    if (v14)
      goto LABEL_30;
    goto LABEL_65;
  }
  WTF::StringImpl::destroy(v15, v8);
  if (v14)
  {
LABEL_30:
    v16 = (PAL *)CFURLResponseCopySuggestedFilename();
    v18 = (const __CFString *)PAL::softLinkQuickLookQLTypeCopyBestMimeTypeForFileNameAndMimeType(v16, &MIMEType->isa, v17);
    v19 = v18;
    if (v18)
    {
      CFRetain(v18);
      CFRelease(v19);
    }
    else
    {
      WebCore::filePathExtension(&theString1);
      v23 = theString1;
      if (!theString1)
      {
        v19 = 0;
        goto LABEL_61;
      }
      PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x1E0CA5A88], theString1, 0);
      WebCore::mimeTypeFromUTITree(PreferredIdentifierForTag, (CFStringRef *)&v28);
      if (PreferredIdentifierForTag)
        CFRelease(PreferredIdentifierForTag);
      v19 = (const __CFString *)v28;
      CFRelease(v23);
      if (!v19)
        goto LABEL_61;
    }
    MEMORY[0x19AEA5508](&theString1, MIMEType);
    MEMORY[0x19AEA5508](&v28, v19);
    if ((MEMORY[0x19AEA53F4](theString1, "text/plain", 10) & 1) != 0)
    {
      if ((MEMORY[0x19AEA53F4](v28, "text/xml", 8) & 1) != 0
        || (MEMORY[0x19AEA53F4](v28, "application/xhtml+xml", 21) & 1) != 0
        || (MEMORY[0x19AEA53F4](v28, "application/xml", 15) & 1) != 0)
      {
        v21 = 0;
LABEL_49:
        v25 = v28;
        v28 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v20);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = (WTF::StringImpl *)theString1;
        theString1 = 0;
        if (!v26)
        {
LABEL_55:
          if (v21)
          {
LABEL_56:
            CFURLResponseSetMIMEType();
            if (v16)
              CFRelease(v16);
            v22 = v19;
            goto LABEL_59;
          }
          goto LABEL_61;
        }
        if (*(_DWORD *)v26 != 2)
        {
          *(_DWORD *)v26 -= 2;
          goto LABEL_55;
        }
        WTF::StringImpl::destroy(v26, v20);
        if (v21)
          goto LABEL_56;
LABEL_61:
        if (v16)
          CFRelease(v16);
        if (v19)
          CFRelease(v19);
        goto LABEL_65;
      }
      v27 = MEMORY[0x19AEA53F4](v28, "image/svg+xml", 13);
      v21 = v27 ^ 1;
      if (!MIMEType || (v27 & 1) != 0)
        goto LABEL_49;
    }
    else if (!MIMEType)
    {
      v21 = 1;
      goto LABEL_49;
    }
    v21 = CFStringCompare(MIMEType, v19, 1uLL) != kCFCompareEqualTo;
    goto LABEL_49;
  }
LABEL_65:
  if (!MIMEType)
    CFURLResponseSetMIMEType();
}

void sub_1953D2B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  const void *v10;
  const void *v11;
  const void *v12;

  if (v11)
    CFRelease(v11);
  CFRelease(v12);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_1953D2CE8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,CFTypeRef a61,CFTypeRef cf)
{
  CFTypeRef v63;
  CFTypeRef v64;

  v63 = cf;
  cf = 0;
  if (v63)
    CFRelease(v63);
  v64 = a61;
  a61 = 0;
  if (v64)
    CFRelease(v64);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a9, a2);
  _Unwind_Resume(a1);
}

WebCore::AuthenticationChallenge *WebCore::core@<X0>(NSURLAuthenticationChallenge *this@<X0>, WebCore::AuthenticationChallenge *a2@<X8>)
{
  return WebCore::AuthenticationChallenge::AuthenticationChallenge(a2, this);
}

void sub_1953D2D98(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,CFTypeRef a61,CFTypeRef cf)
{
  CFTypeRef v63;
  CFTypeRef v64;

  v63 = cf;
  cf = 0;
  if (v63)
    CFRelease(v63);
  v64 = a61;
  a61 = 0;
  if (v64)
    CFRelease(v64);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1953D2EB0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef a65;
  CFTypeRef a66;
  CFTypeRef v67;
  CFTypeRef v68;

  if (cf)
    CFRelease(cf);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v67 = a66;
  a66 = 0;
  if (v67)
    CFRelease(v67);
  v68 = a65;
  a65 = 0;
  if (v68)
    CFRelease(v68);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1953D2FB4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,CFTypeRef a61,CFTypeRef cf)
{
  CFTypeRef v63;
  CFTypeRef v64;

  v63 = cf;
  cf = 0;
  if (v63)
    CFRelease(v63);
  v64 = a61;
  a61 = 0;
  if (v64)
    CFRelease(v64);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1953D3058(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,CFTypeRef a61,CFTypeRef cf)
{
  CFTypeRef v63;
  CFTypeRef v64;

  v63 = cf;
  cf = 0;
  if (v63)
    CFRelease(v63);
  v64 = a61;
  a61 = 0;
  if (v64)
    CFRelease(v64);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a9, a2);
  _Unwind_Resume(a1);
}

void WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase(WebCore::AuthenticationChallengeBase *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WebCore::ResourceResponseBase *v7;
  const void *v8;
  WTF::StringImpl *v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v3 = (const void *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WebCore::AuthenticationChallengeBase *)((char *)this + 80);
  v8 = (const void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v8)
  {
    CFRelease(v8);
    v7 = (WebCore::AuthenticationChallengeBase *)((char *)this + 80);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v7, a2);
  v10 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
    CFRelease(v13);
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v9);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v9);
    else
      *(_DWORD *)v15 -= 2;
  }
}

void WebCore::AuthenticationChallenge::setAuthenticationClient(WebCore::AuthenticationChallenge *this, AuthenticationClient *a2)
{
  WebCoreAuthenticationClientAsChallengeSender *v3;
  const void *v4;
  uint64_t v5;
  const void *v6;

  if (a2)
  {
    v3 = -[WebCoreAuthenticationClientAsChallengeSender initWithAuthenticationClient:]([WebCoreAuthenticationClientAsChallengeSender alloc], "initWithAuthenticationClient:", a2);
    v4 = (const void *)*((_QWORD *)this + 52);
    *((_QWORD *)this + 52) = v3;
    if (v4)
      CFRelease(v4);
    if (*((_QWORD *)this + 53))
    {
      v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0C92C48]), "initWithAuthenticationChallenge:sender:", *((_QWORD *)this + 53), *((_QWORD *)this + 52));
      v6 = (const void *)*((_QWORD *)this + 53);
      *((_QWORD *)this + 53) = v5;
      if (v6)
        CFRelease(v6);
    }
  }
  else if (objc_msgSend(*((id *)this + 52), "isMemberOfClass:", objc_opt_class()))
  {
    objc_msgSend(*((id *)this + 52), "detachClient");
  }
}

uint64_t WebCore::AuthenticationChallenge::authenticationClient(id *this)
{
  if (objc_msgSend(this[52], "isMemberOfClass:", objc_opt_class()))
    return objc_msgSend(this[52], "client");
  else
    return 0;
}

WTF::StringImpl *WebCore::BlobDataFileReference::generateReplacementFile(WTF::StringImpl **this)
{
  WTF::FileSystemImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  WTF::StringImpl *v11;

  v2 = (WTF::FileSystemImpl *)(this + 2);
  (*((void (**)(WTF::StringImpl **))*this + 2))(this);
  WTF::FileSystemImpl::createTemporaryZipArchive(v2, v3);
  v5 = v11;
  if (v11)
  {
    v11 = 0;
    v6 = this[3];
    this[3] = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  v7 = this[3];
  *((_BYTE *)this + 32) = 0;
  if (v7)
  {
    v8 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)(this + 3), v4);
    if (v9)
      this[5] = (WTF::StringImpl *)v8;
  }
  (*((void (**)(WTF::StringImpl **))*this + 3))(this);
  return v11;
}

void sub_1953D33EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 16 * i;
      v6 = *(WTF::StringImpl **)v5;
      if (*(_QWORD *)v5 != -1)
      {
        v7 = *(_QWORD *)(v5 + 8);
        if (v7)
        {
          v8 = *(unsigned int *)(v7 - 4);
          if ((_DWORD)v8)
          {
            v9 = *(WTF::StringImpl ***)(v5 + 8);
            do
            {
              v10 = *v9;
              if (*v9 != (WTF::StringImpl *)-1)
              {
                *v9 = 0;
                if (v10)
                {
                  if (*(_DWORD *)v10 == 2)
                    WTF::StringImpl::destroy(v10, a2);
                  else
                    *(_DWORD *)v10 -= 2;
                }
              }
              ++v9;
              --v8;
            }
            while (v8);
          }
          WTF::fastFree((WTF *)(v7 - 16), a2);
          v6 = *(WTF::StringImpl **)v5;
        }
        *(_QWORD *)v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + 16 * i) != -1)
      {
        v5 = a1 + 16 * i;
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = *(unsigned int *)(v6 - 4);
          if ((_DWORD)v7)
          {
            v8 = *(WTF::StringImpl ***)(v5 + 8);
            do
            {
              v9 = *v8;
              if (*v8 != (WTF::StringImpl *)-1)
              {
                v10 = v8[1];
                v8[1] = 0;
                if (v10)
                {
                  if (*(_DWORD *)v10 == 2)
                  {
                    WTF::StringImpl::destroy(v10, a2);
                    v9 = *v8;
                  }
                  else
                  {
                    *(_DWORD *)v10 -= 2;
                  }
                }
                *v8 = 0;
                if (v9)
                {
                  if (*(_DWORD *)v9 == 2)
                    WTF::StringImpl::destroy(v9, a2);
                  else
                    *(_DWORD *)v9 -= 2;
                }
              }
              v8 += 2;
              --v7;
            }
            while (v7);
          }
          WTF::fastFree((WTF *)(v6 - 16), a2);
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::~HashTable(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 16 * i) != -1)
        {
          v6 = *(_QWORD *)(v3 + 16 * i + 8);
          if (v6)
          {
            v7 = *(unsigned int *)(v6 - 4);
            if ((_DWORD)v7)
            {
              v8 = (WTF::StringImpl **)(v6 + 16);
              do
              {
                if (*(v8 - 1) != (WTF::StringImpl *)-1)
                {
                  v9 = *v8;
                  *v8 = 0;
                  if (v9)
                  {
                    if (*(_DWORD *)v9 == 2)
                      WTF::StringImpl::destroy(v9, a2);
                    else
                      *(_DWORD *)v9 -= 2;
                  }
                }
                v8 += 3;
                --v7;
              }
              while (v7);
            }
            WTF::fastFree((WTF *)(v6 - 16), a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProtectionSpace,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProtectionSpace>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 16;
    do
    {
      if (*(_QWORD *)(v4 - 16) != -1)
      {
        v5 = *(const void **)(v4 + 16);
        *(_QWORD *)(v4 + 16) = 0;
        if (v5)
          CFRelease(v5);
        v6 = *(WTF::StringImpl **)v4;
        *(_QWORD *)v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v7 = *(WTF::StringImpl **)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = *(WTF::StringImpl **)(v4 - 16);
        *(_QWORD *)(v4 - 16) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
      v4 += 40;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if ((_DWORD)a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      v5 = (char *)this + 24 * v3;
      v6 = *((_QWORD *)v5 + 1);
      if (v6)
      {
        v8 = *(unsigned int *)(v6 - 4);
        if ((_DWORD)v8)
        {
          for (i = 0; i != v8; ++i)
          {
            v10 = *(unsigned int **)(v6 + 8 * i);
            if (v10 != (unsigned int *)-1)
            {
              *(_QWORD *)(v6 + 8 * i) = 0;
              if (v10)
              {
                do
                {
                  v11 = __ldaxr(v10);
                  v12 = v11 - 1;
                }
                while (__stlxr(v12, v10));
                if (!v12)
                {
                  atomic_store(1u, v10);
                  WTF::fastFree((WTF *)v10, a2);
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v6 - 16), a2);
      }
      v7 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return WTF::fastFree(this, a2);
}

