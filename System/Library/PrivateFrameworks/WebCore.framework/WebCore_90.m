uint64_t std::__variant_detail::__visitation::__base::__dispatcher<19ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, uint64_t a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  unint64_t v5;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  v5 = *(char *)(a2 + 48);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (v5 <= 3)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<20ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  WTF::TextStream *v3;

  v1 = *a1;
  result = WTF::TextStream::operator<<();
  if ((**(_BYTE **)(v1 + 8) & 2) != 0)
  {
    v3 = *(WTF::TextStream **)v1;
    WTF::TextStream::startGroup(v3);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::endGroup(v3);
    WTF::TextStream::startGroup(v3);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    return WTF::TextStream::endGroup(v3);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<21ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, uint64_t *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v14;
  unsigned int v15;
  char v16;
  double v17;
  char *v18;
  double v19;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  WTF::TextStream::operator<<();
  if (!*((_DWORD *)a2 + 3))
    goto LABEL_12;
  v15 = *((_DWORD *)a2 + 3);
  v5 = *a2;
  v6 = *(unsigned int *)(*a2 + 352);
  v16 = 3;
  v17 = *(double *)&v4;
  v18 = &v16;
  if ((_DWORD)v6 != -1)
  {
    v19 = COERCE_DOUBLE(&v17);
    ((void (*)(double *, uint64_t))off_1E3414950[v6])(&v19, v5 + 8);
    v7 = 1;
    if (v15 != 1 && *((_DWORD *)v4 + 8) != 1)
    {
      v8 = 360 * v15 - 360;
      v9 = v5 + 368;
      v7 = 2;
      while (1)
      {
        WTF::TextStream::operator<<();
        v16 = 3;
        v17 = *(double *)&v4;
        v18 = &v16;
        v10 = *(unsigned int *)(v9 + 344);
        if ((_DWORD)v10 == -1)
          goto LABEL_13;
        v19 = COERCE_DOUBLE(&v17);
        ((void (*)(double *, uint64_t))off_1E3414950[v10])(&v19, v9);
        if (v7 == *((_DWORD *)v4 + 8))
          break;
        ++v7;
        v9 += 360;
        v8 -= 360;
        if (!v8)
        {
          v7 = v15;
          break;
        }
      }
    }
    if (*((_DWORD *)a2 + 3) != v7)
      WTF::TextStream::operator<<();
LABEL_12:
    WTF::TextStream::operator<<();
    v11 = *((float *)a2 + 4);
    v12 = *((float *)a2 + 5);
    WTF::TextStream::startGroup(v4);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v17 = v11;
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v19 = v12;
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    return WTF::TextStream::endGroup(v4);
  }
LABEL_13:
  v14 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<22ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(v14);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<22ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(uint64_t *a1)
{
  uint64_t v1;
  WTF::TextStream *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *(WTF::TextStream **)v1;
  if ((**(_BYTE **)(v1 + 8) & 2) != 0)
  {
    WTF::TextStream::startGroup(v2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::endGroup(v2);
  }
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  WebCore::operator<<(v3);
  WTF::TextStream::endGroup(v2);
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  v4 = WTF::TextStream::operator<<();
  WebCore::operator<<(v4);
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<23ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v2);
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<24ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, uint64_t a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  WTF::streamSizedContainer<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2 + 16);
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<25ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(uint64_t *a1)
{
  uint64_t v1;
  WTF::TextStream *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *(WTF::TextStream **)v1;
  if ((**(_BYTE **)(v1 + 8) & 2) != 0)
  {
    WTF::TextStream::startGroup(v2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::endGroup(v2);
  }
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  WebCore::operator<<(v3);
  WTF::TextStream::endGroup(v2);
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  v4 = WTF::TextStream::operator<<();
  WebCore::operator<<(v4);
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<26ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, uint64_t a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  char v10;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  v10 = 1;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E340EC70;
  v6[1] = v5;
  v6[2] = &v10;
  v9 = v6;
  WebCore::Path::applySegments(a2, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<27ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  WTF::TextStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *(WTF::TextStream **)v3;
  if ((**(_BYTE **)(v3 + 8) & 2) != 0)
  {
    WTF::TextStream::startGroup(v4);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::endGroup(v4);
  }
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  WebCore::operator<<(v5, (float64x2_t *)(a2 + 40));
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v6 = WTF::TextStream::operator<<();
  WebCore::operator<<(v6);
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v7 = WTF::TextStream::operator<<();
  WebCore::operator<<(v7);
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<28ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;
  uint64_t v3;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  WebCore::operator<<(v3);
  WTF::TextStream::endGroup(v2);
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<29ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;
  uint64_t v3;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  WebCore::operator<<(v3);
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<30ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>()
{
  return WTF::TextStream::operator<<();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<31ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, uint64_t a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  char *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19[2];
  WTF::StringImpl *v20;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  *(_OWORD *)v19 = *(_OWORD *)a2;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  WebCore::operator<<(v5);
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WebCore::serializationForRenderTreeAsText((WebCore *)(a2 + 16), (uint64_t *)v19);
  WTF::TextStream::operator<<();
  v7 = v19[0];
  v19[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::TextStream::endGroup(v4);
  v8 = *(unsigned __int8 *)(a2 + 24);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v9 = (&WebCore::compositeOperatorNames)[2 * v8 + 1];
  if (v9)
  {
    if (v9 == (char *)1)
    {
      v10 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v10 = v19[0];
    }
    v20 = v10;
  }
  else
  {
    v20 = 0;
  }
  WTF::TextStream::operator<<();
  v12 = v20;
  v20 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::TextStream::endGroup(v4);
  v13 = *(unsigned __int8 *)(a2 + 25);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v14 = (&WebCore::blendOperatorNames)[2 * (v13 - 1) + 1];
  if (v14)
  {
    if (v14 == (char *)1)
    {
      v15 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = v19[0];
    }
    v20 = v15;
  }
  else
  {
    v20 = 0;
  }
  WTF::TextStream::operator<<();
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<32ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;
  uint64_t v3;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  WebCore::operator<<(v3);
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<33ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, __int128 *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  _BYTE v17[8];
  _OWORD v18[3];
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v5 = a2[1];
  v21 = *a2;
  v22 = v5;
  v23 = a2[2];
  v24 = *((_QWORD *)a2 + 6);
  v6 = WTF::fastMalloc((WTF *)0x38);
  v7 = v21;
  *(_OWORD *)v6 = v21;
  v8 = v22;
  *(_OWORD *)(v6 + 16) = v22;
  v9 = v23;
  *(_OWORD *)(v6 + 32) = v23;
  v10 = v24;
  *(_QWORD *)(v6 + 48) = v24;
  v19 = v10;
  v18[1] = v8;
  v18[2] = v9;
  v18[0] = v7;
  v20 = 1;
  WTF::fastFree((WTF *)v6, v11);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v12 = WTF::TextStream::operator<<();
  v16 = 1;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E340EC70;
  v13[1] = v12;
  v13[2] = &v16;
  *(_QWORD *)&v21 = v13;
  WebCore::Path::applySegments((uint64_t)v17, &v21);
  v14 = v21;
  *(_QWORD *)&v21 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  result = WTF::TextStream::endGroup(v4);
  if (v20 != -1)
    return ((uint64_t (*)(__int128 *, _OWORD *))off_1E3413D68[v20])(&v21, v18);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<34ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, uint64_t a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  char v10;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  v10 = 1;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E340EC70;
  v6[1] = v5;
  v6[2] = &v10;
  v9 = v6;
  WebCore::Path::applySegments(a2, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<35ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;
  uint64_t v3;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  WebCore::operator<<(v3);
  WTF::TextStream::endGroup(v2);
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<36ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, _OWORD *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9[2];

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  *(_OWORD *)v9 = *a2;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  WebCore::operator<<(v5);
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WebCore::serializationForRenderTreeAsText((WebCore *)(a2 + 1), (uint64_t *)v9);
  WTF::TextStream::operator<<();
  v7 = v9[0];
  v9[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<37ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;
  uint64_t v3;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  WebCore::operator<<(v3);
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<38ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, uint64_t a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  WebCore::operator<<(v5);
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v6 = WTF::TextStream::operator<<();
  WebCore::operator<<(v6, (float64x2_t *)(a2 + 24));
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<39ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, uint64_t a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  WTF::TextStream *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  WebCore::operator<<(v5);
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v6 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v6);
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WebCore::serializationForRenderTreeAsText((WebCore *)(a2 + 64), (uint64_t *)&v10);
  WTF::TextStream::operator<<();
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<40ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, uint64_t a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  WTF::TextStream *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v5);
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WebCore::serializationForRenderTreeAsText((WebCore *)(a2 + 48), (uint64_t *)&v14);
  WTF::TextStream::operator<<();
  v7 = v14;
  v14 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::TextStream::endGroup(v4);
  v8 = *(unsigned __int8 *)(a2 + 56);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v9 = (&WebCore::blendOperatorNames)[2 * (v8 - 1) + 1];
  if (v9)
  {
    if (v9 == (char *)1)
    {
      v10 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v10 = v14;
    }
    v13 = v10;
  }
  else
  {
    v13 = 0;
  }
  WTF::TextStream::operator<<();
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<41ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>()
{
  return WTF::TextStream::operator<<();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<42ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>()
{
  return WTF::TextStream::operator<<();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<43ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<44ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>()
{
  return WTF::TextStream::operator<<();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<45ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<46ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, float64x2_t *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  WebCore::operator<<(v5, a2);
  return WTF::TextStream::endGroup(v4);
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<47ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, unsigned int *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *result;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v11 = *a2 | 0x1104000000000000;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WebCore::serializationForRenderTreeAsText((WebCore *)&v11, (uint64_t *)&v12);
  WTF::TextStream::operator<<();
  v6 = v12;
  v12 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = (unsigned int *)WTF::TextStream::endGroup(v4);
  if ((v11 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(result);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, result));
    if (!v10)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<48ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, unsigned int *a2)
{
  WTF::TextStream **v3;
  unsigned int *result;
  WTF::TextStream *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  WTF::StringImpl *v13;

  v3 = *a1;
  result = (unsigned int *)WTF::TextStream::operator<<();
  v5 = *v3;
  if (*((_BYTE *)a2 + 4))
  {
    v11 = *a2 | 0x1104000000000000;
    v12 = 1;
    WTF::TextStream::startGroup(v5);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WebCore::serializationForRenderTreeAsText((WebCore *)&v11, (uint64_t *)&v13);
    WTF::TextStream::operator<<();
    v7 = v13;
    v13 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = (unsigned int *)WTF::TextStream::endGroup(v5);
    if (v12)
    {
      if ((v11 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
        do
        {
          v9 = __ldaxr(result);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, result));
        if (!v10)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
        }
      }
    }
  }
  if (*((_BYTE *)a2 + 12))
  {
    WTF::TextStream::startGroup(v5);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    return (unsigned int *)WTF::TextStream::endGroup(v5);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<49ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, char *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  unint64_t v5;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v5 = *a2;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (v5 <= 2)
    WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<50ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, uint64_t a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  WTF::streamSizedContainer<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  WTF::TextStream::endGroup(v4);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<51ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, char *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  unint64_t v5;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v5 = *a2;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (v5 <= 2)
    WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<52ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v2);
}

WTF::TextStream *std::__variant_detail::__visitation::__base::__dispatcher<53ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, WebCore::GraphicsContextState *a2)
{
  WTF::TextStream **v3;

  v3 = *a1;
  WTF::TextStream::operator<<();
  return WebCore::GraphicsContextState::dump(a2, *v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<54ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;
  uint64_t v3;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  WebCore::operator<<(v3);
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<55ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v2);
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<56ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, __int128 *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  _BYTE v17[8];
  _OWORD v18[3];
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v5 = a2[1];
  v21 = *a2;
  v22 = v5;
  v23 = a2[2];
  v24 = *((_QWORD *)a2 + 6);
  v6 = WTF::fastMalloc((WTF *)0x38);
  v7 = v21;
  *(_OWORD *)v6 = v21;
  v8 = v22;
  *(_OWORD *)(v6 + 16) = v22;
  v9 = v23;
  *(_OWORD *)(v6 + 32) = v23;
  v10 = v24;
  *(_QWORD *)(v6 + 48) = v24;
  v19 = v10;
  v18[1] = v8;
  v18[2] = v9;
  v18[0] = v7;
  v20 = 1;
  WTF::fastFree((WTF *)v6, v11);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v12 = WTF::TextStream::operator<<();
  v16 = 1;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E340EC70;
  v13[1] = v12;
  v13[2] = &v16;
  *(_QWORD *)&v21 = v13;
  WebCore::Path::applySegments((uint64_t)v17, &v21);
  v14 = v21;
  *(_QWORD *)&v21 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  result = WTF::TextStream::endGroup(v4);
  if (v20 != -1)
    return ((uint64_t (*)(__int128 *, _OWORD *))off_1E3413D68[v20])(&v21, v18);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<57ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, uint64_t a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  char v10;

  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  v10 = 1;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E340EC70;
  v6[1] = v5;
  v6[2] = &v10;
  v9 = v6;
  WebCore::Path::applySegments(a2, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return WTF::TextStream::endGroup(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<58ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;
  uint64_t v3;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  WebCore::operator<<(v3);
  WTF::TextStream::endGroup(v2);
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<59ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v2);
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<60ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, __int128 *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  char v10;
  char v11[8];
  __int128 v12[3];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v12[0] = *a2;
  v13 = 0x10000000BLL;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  v10 = 1;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E340EC70;
  v6[1] = v5;
  v6[2] = &v10;
  v9 = v6;
  WebCore::Path::applySegments((uint64_t)v11, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  result = WTF::TextStream::endGroup(v4);
  if (HIDWORD(v13) != -1)
    return ((uint64_t (*)(_QWORD **, __int128 *))off_1E3413D68[HIDWORD(v13)])(&v9, v12);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<61ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, __int128 *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  char v10;
  char v11[8];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = 0x100000005;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  v10 = 1;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E340EC70;
  v6[1] = v5;
  v6[2] = &v10;
  v9 = v6;
  WebCore::Path::applySegments((uint64_t)v11, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  result = WTF::TextStream::endGroup(v4);
  if (HIDWORD(v14) != -1)
    return ((uint64_t (*)(_QWORD **, __int128 *))off_1E3413D68[HIDWORD(v14)])(&v9, &v12);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<62ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, __int128 *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  char v10;
  char v11[8];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = 0x100000006;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  v10 = 1;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E340EC70;
  v6[1] = v5;
  v6[2] = &v10;
  v9 = v6;
  WebCore::Path::applySegments((uint64_t)v11, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  result = WTF::TextStream::endGroup(v4);
  if (HIDWORD(v14) != -1)
    return ((uint64_t (*)(_QWORD **, __int128 *))off_1E3413D68[HIDWORD(v14)])(&v9, &v12);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<63ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, __int128 *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  char v10;
  char v11[8];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = 0x10000000CLL;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  v10 = 1;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E340EC70;
  v6[1] = v5;
  v6[2] = &v10;
  v9 = v6;
  WebCore::Path::applySegments((uint64_t)v11, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  result = WTF::TextStream::endGroup(v4);
  if (HIDWORD(v14) != -1)
    return ((uint64_t (*)(_QWORD **, __int128 *))off_1E3413D68[HIDWORD(v14)])(&v9, &v12);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<64ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, _OWORD *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  char v11;
  char v12[8];
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v5 = a2[1];
  v13[0] = *a2;
  v13[1] = v5;
  v14 = 0x10000000DLL;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v6 = WTF::TextStream::operator<<();
  v11 = 1;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = off_1E340EC70;
  v7[1] = v6;
  v7[2] = &v11;
  v10 = v7;
  WebCore::Path::applySegments((uint64_t)v12, &v10);
  v8 = v10;
  v10 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  result = WTF::TextStream::endGroup(v4);
  if (HIDWORD(v14) != -1)
    return ((uint64_t (*)(_QWORD **, _OWORD *))off_1E3413D68[HIDWORD(v14)])(&v10, v13);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<65ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, __int128 *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  char v10;
  char v11[8];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = 0x100000005;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  v10 = 1;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E340EC70;
  v6[1] = v5;
  v6[2] = &v10;
  v9 = v6;
  WebCore::Path::applySegments((uint64_t)v11, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  result = WTF::TextStream::endGroup(v4);
  if (HIDWORD(v14) != -1)
    return ((uint64_t (*)(_QWORD **, __int128 *))off_1E3413D68[HIDWORD(v14)])(&v9, &v12);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<66ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, __int128 *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  char v10;
  char v11[8];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = 0x100000006;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  v10 = 1;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E340EC70;
  v6[1] = v5;
  v6[2] = &v10;
  v9 = v6;
  WebCore::Path::applySegments((uint64_t)v11, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  result = WTF::TextStream::endGroup(v4);
  if (HIDWORD(v14) != -1)
    return ((uint64_t (*)(_QWORD **, __int128 *))off_1E3413D68[HIDWORD(v14)])(&v9, &v12);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<67ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, __int128 *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  char v10;
  char v11[8];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = 0x10000000CLL;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  v10 = 1;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E340EC70;
  v6[1] = v5;
  v6[2] = &v10;
  v9 = v6;
  WebCore::Path::applySegments((uint64_t)v11, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  result = WTF::TextStream::endGroup(v4);
  if (HIDWORD(v14) != -1)
    return ((uint64_t (*)(_QWORD **, __int128 *))off_1E3413D68[HIDWORD(v14)])(&v9, &v12);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<68ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1, _OWORD *a2)
{
  WTF::TextStream **v3;
  WTF::TextStream *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  char v11;
  char v12[8];
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  WTF::TextStream::operator<<();
  v4 = *v3;
  v5 = a2[1];
  v13[0] = *a2;
  v13[1] = v5;
  v14 = 0x10000000DLL;
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  v6 = WTF::TextStream::operator<<();
  v11 = 1;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = off_1E340EC70;
  v7[1] = v6;
  v7[2] = &v11;
  v10 = v7;
  WebCore::Path::applySegments((uint64_t)v12, &v10);
  v8 = v10;
  v10 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  result = WTF::TextStream::endGroup(v4);
  if (HIDWORD(v14) != -1)
    return ((uint64_t (*)(_QWORD **, _OWORD *))off_1E3413D68[HIDWORD(v14)])(&v10, v13);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<69ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;
  uint64_t v3;

  v1 = *a1;
  WTF::TextStream::operator<<();
  v2 = *v1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  WebCore::operator<<(v3);
  return WTF::TextStream::endGroup(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<70ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>()
{
  return WTF::TextStream::operator<<();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<71ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayList::dumpItem(WTF::TextStream &,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,WTF::OptionSet<WebCore::DisplayList::AsTextFlag>)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&>()
{
  return WTF::TextStream::operator<<();
}

uint64_t WTF::streamSizedContainer<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;

  WTF::TextStream::operator<<();
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    WTF::TextStream::operator<<();
    if ((_DWORD)v4 == 1 || *(_DWORD *)(a1 + 32) == 1)
    {
      LODWORD(v4) = 1;
    }
    else
    {
      v6 = 8 * v4 - 8;
      v7 = 1;
      while (1)
      {
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        if (v7 + 1 == *(_DWORD *)(a1 + 32))
          break;
        ++v7;
        v6 -= 8;
        if (!v6)
          goto LABEL_12;
      }
      LODWORD(v4) = v7 + 1;
    }
LABEL_12:
    if (*(_DWORD *)(a2 + 12) != (_DWORD)v4)
      WTF::TextStream::operator<<();
  }
  return WTF::TextStream::operator<<();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  *(_DWORD *)(a2 + 64) = 0;
  v3 = *(unsigned int *)(a3 + 64);
  if ((_DWORD)v3 == -1)
  {
    *(_DWORD *)(a2 + 64) = -1;
  }
  else
  {
    v5 = a2 + 8;
    return ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v3])(&v5);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  *(_DWORD *)(a2 + 64) = 0;
  v5 = *(unsigned int *)(a3 + 64);
  if ((_DWORD)v5 == -1)
  {
    *(_DWORD *)(a2 + 64) = -1;
  }
  else
  {
    v7 = a2 + 8;
    result = ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v5])(&v7);
  }
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a3 + 72);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, __n128 *a3)
{
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v3 = a3->n128_u64[0];
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a3->n128_u64[0] + 8) + 1;
  *(_QWORD *)a2 = v3;
  v4 = *(__int128 *)((char *)a3 + 8);
  v5 = *(__int128 *)((char *)&a3[1] + 8);
  v6 = *(__int128 *)((char *)&a3[2] + 8);
  *(_DWORD *)(a2 + 56) = a3[3].n128_u32[2];
  *(_OWORD *)(a2 + 40) = v6;
  *(_OWORD *)(a2 + 24) = v5;
  *(_OWORD *)(a2 + 8) = v4;
  v7 = a3[4].n128_i64[0];
  *(_DWORD *)(a2 + 72) = a3[4].n128_u32[2];
  *(_QWORD *)(a2 + 64) = v7;
  v8 = a3[5].n128_i64[0];
  *(_QWORD *)(a2 + 80) = v8;
  if ((v8 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v9 = a3[5].n128_i64[1];
  *(_QWORD *)(a2 + 88) = v9;
  if ((v9 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  result = a3[6];
  *(__n128 *)(a2 + 96) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a3 + 16);
  v3 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  if ((v3 & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v9;

  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *(_QWORD *)(a3 + 32);
  v6 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v6);
LABEL_5:
  ++*(_QWORD *)(v6 + 8);
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  *(_QWORD *)(a2 + 32) = v5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17ELm17EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  *(_DWORD *)(a2 + 64) = 0;
  v5 = *(unsigned int *)(a3 + 64);
  if ((_DWORD)v5 == -1)
  {
    *(_DWORD *)(a2 + 64) = -1;
  }
  else
  {
    v10 = a2 + 8;
    result = ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v5])(&v10);
  }
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a3 + 72);
  v7 = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 80) = v7;
  if ((v7 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18ELm18EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;

  v5 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v7 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v7;
    v8 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v8)
    {
      v9 = *(__int128 **)a3;
      v10 = 16 * v8;
      do
      {
        v11 = *v9++;
        *v7++ = v11;
        v10 -= 16;
      }
      while (v10);
    }
  }
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 24) = v6;
  if ((v6 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19ELm19EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  v5 = *(unsigned int *)(a3 + 20);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v5;
  if ((_DWORD)v5)
  {
    if ((v5 & 0x80000000) != 0)
      goto LABEL_8;
    v6 = (void *)WTF::fastMalloc((WTF *)(2 * v5));
    *(_DWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 8) = v6;
    memcpy(v6, *(const void **)(a3 + 8), 2 * *(unsigned int *)(a3 + 20));
  }
  v7 = *(unsigned int *)(a3 + 36);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 36) = v7;
  if ((_DWORD)v7)
  {
    if (!(v7 >> 28))
    {
      v8 = (void *)WTF::fastMalloc((WTF *)(16 * v7));
      *(_DWORD *)(a2 + 32) = v7;
      *(_QWORD *)(a2 + 24) = v8;
      memcpy(v8, *(const void **)(a3 + 24), 16 * *(unsigned int *)(a3 + 36));
      goto LABEL_7;
    }
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x196252904);
  }
LABEL_7:
  v9 = *(_QWORD *)(a3 + 40);
  *(_BYTE *)(a2 + 48) = *(_BYTE *)(a3 + 48);
  *(_QWORD *)(a2 + 40) = v9;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm20ELm20EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21ELm21EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  char v13;

  v5 = *(_DWORD *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if (!v5)
  {
LABEL_8:
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    return;
  }
  if (v5 < 0xB60B61)
  {
    v6 = 360 * v5;
    v7 = WTF::fastMalloc((WTF *)(360 * v5));
    *(_DWORD *)(a2 + 8) = v6 / 0x168;
    *(_QWORD *)a2 = v7;
    v8 = *(_DWORD *)(a3 + 12);
    if (v8)
    {
      v9 = v7;
      v10 = 360 * v8;
      v11 = (unsigned int *)(*(_QWORD *)a3 + 352);
      do
      {
        *(_BYTE *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 352) = -1;
        v12 = *v11;
        if ((_DWORD)v12 != -1)
        {
          ((void (*)(char *))off_1E3414B90[v12])(&v13);
          *(_DWORD *)(v9 + 352) = v12;
        }
        v9 += 360;
        v11 += 90;
        v10 -= 360;
      }
      while (v10);
    }
    goto LABEL_8;
  }
  __break(0xC471u);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm22ELm22EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm23ELm23EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm24ELm24EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  int v7;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v5 = *(unsigned int *)(a3 + 28);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v5;
  if (!(_DWORD)v5)
    goto LABEL_4;
  if (!(v5 >> 29))
  {
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(a2 + 24) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    memcpy(v6, *(const void **)(a3 + 16), 8 * *(unsigned int *)(a3 + 28));
LABEL_4:
    v7 = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 35) = *(_DWORD *)(a3 + 35);
    *(_DWORD *)(a2 + 32) = v7;
    return;
  }
  __break(0xC471u);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm25ELm25EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm26ELm26EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  *(_DWORD *)(a2 + 64) = 0;
  v3 = *(unsigned int *)(a3 + 64);
  if ((_DWORD)v3 == -1)
  {
    *(_DWORD *)(a2 + 64) = -1;
  }
  else
  {
    v5 = a2 + 8;
    return ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v3])(&v5);
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm27ELm27EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v3 = *a3;
  v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  result = (__n128)a3[3];
  v6 = a3[4];
  v7 = a3[6];
  *(_OWORD *)(a2 + 80) = a3[5];
  *(_OWORD *)(a2 + 96) = v7;
  *(__n128 *)(a2 + 48) = result;
  *(_OWORD *)(a2 + 64) = v6;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm28ELm28EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u32[0] = a3[1].n128_u32[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm29ELm29EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(*a3 + 8) + 1;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm31ELm31EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v3 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 16) = v3;
  if ((v3 & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_WORD *)(a2 + 24) = *(_WORD *)(a3 + 24);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm32ELm32EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm33ELm33EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm34ELm34EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  *(_DWORD *)(a2 + 64) = 0;
  v3 = *(unsigned int *)(a3 + 64);
  if ((_DWORD)v3 == -1)
  {
    *(_DWORD *)(a2 + 64) = -1;
  }
  else
  {
    v5 = a2 + 8;
    return ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v3])(&v5);
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm35ELm35EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u32[0] = a3[1].n128_u32[0];
  *a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm36ELm36EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v3 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 16) = v3;
  if ((v3 & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm37ELm37EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_10:
  *(_QWORD *)(a2 + 16) = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm38ELm38EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_5:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  *(_QWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(a3 + 24);
  v10 = *(_OWORD *)(a3 + 40);
  v11 = *(_OWORD *)(a3 + 56);
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a3 + 72);
  *(_OWORD *)(a2 + 56) = v11;
  *(_OWORD *)(a2 + 40) = v10;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm39ELm39EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  v6 = *((_QWORD *)a3 + 8);
  *(_QWORD *)(a2 + 64) = v6;
  if ((v6 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm40ELm40EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a3;
  v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  v5 = *((_QWORD *)a3 + 6);
  *(_QWORD *)(a2 + 48) = v5;
  if ((v5 & 0x8000000000000) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_BYTE *)(a2 + 56) = *((_BYTE *)a3 + 56);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm43ELm43EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm45ELm45EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm46ELm46EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm47ELm47EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm48ELm48EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm49ELm49EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm50ELm50EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;

  v5 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if (!(_DWORD)v5)
    goto LABEL_4;
  if (!(v5 >> 29))
  {
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v6;
    memcpy(v6, *(const void **)a3, 8 * *(unsigned int *)(a3 + 12));
LABEL_4:
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
    return;
  }
  __break(0xC471u);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm51ELm51EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm52ELm52EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm53ELm53EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebCore::GraphicsContextState::GraphicsContextState(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm54ELm54EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm55ELm55EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm56ELm56EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm57ELm57EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  *(_DWORD *)(a2 + 64) = 0;
  v3 = *(unsigned int *)(a3 + 64);
  if ((_DWORD)v3 == -1)
  {
    *(_DWORD *)(a2 + 64) = -1;
  }
  else
  {
    v5 = a2 + 8;
    return ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v3])(&v5);
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm58ELm58EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u32[0] = a3[1].n128_u32[0];
  *a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm59ELm59EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm60ELm60EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm61ELm61EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm62ELm62EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm63ELm63EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm64ELm64EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm65ELm65EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm66ELm66EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm67ELm67EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm68ELm68EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm69ELm69EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2A_LNS0_6_TraitE1EEEEEvRS2B_OT_EUlRS2J_OT0_E_JRNS0_6__baseILS2E_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEERKS2R_EEEDcS2J_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

unsigned int *WTF::VectorTypeOperations<WebCore::DisplayList::Recorder::ContextState>::destruct(unsigned int *result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;

  if (result != a2)
  {
    v35 = v2;
    v36 = v3;
    v5 = result;
    do
    {
      if (*((_BYTE *)v5 + 752))
      {
        if (*((_BYTE *)v5 + 728))
        {
          v6 = v5[180];
          if ((_DWORD)v6 != -1)
            result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E3413CF0[v6])(&v32, v5 + 160);
          v5[180] = -1;
        }
        if (*((_BYTE *)v5 + 632))
        {
          v7 = *((_QWORD *)v5 + 77);
          if ((v7 & 0x8000000000000) != 0)
          {
            result = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
            do
            {
              v27 = __ldaxr(result);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, result));
            if (!v28)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
            }
          }
        }
        v8 = v5[144];
        if ((_DWORD)v8 != -1)
          result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E3413D08[v8])(&v33, v5 + 128);
        v5[144] = -1;
        v9 = *((_QWORD *)v5 + 62);
        if ((v9 & 0x8000000000000) != 0)
        {
          result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
          do
          {
            v21 = __ldaxr(result);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, result));
          if (!v22)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          }
        }
        v10 = v5[122];
        if ((_DWORD)v10 != -1)
          result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E3413D08[v10])(&v34, v5 + 106);
        v5[122] = -1;
        v11 = *((_QWORD *)v5 + 51);
        if ((v11 & 0x8000000000000) != 0)
        {
          result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
          do
          {
            v23 = __ldaxr(result);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, result));
          if (!v24)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          }
        }
      }
      if (*((_BYTE *)v5 + 320))
      {
        v12 = v5[78];
        if ((_DWORD)v12 != -1)
          result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E3413CF0[v12])(&v29, v5 + 58);
        v5[78] = -1;
      }
      if (*((_BYTE *)v5 + 224))
      {
        v13 = *((_QWORD *)v5 + 26);
        if ((v13 & 0x8000000000000) != 0)
        {
          result = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
          do
          {
            v25 = __ldaxr(result);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, result));
          if (!v26)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          }
        }
      }
      v14 = v5[42];
      if ((_DWORD)v14 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E3413D08[v14])(&v30, v5 + 26);
      v5[42] = -1;
      v15 = *((_QWORD *)v5 + 11);
      if ((v15 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
        do
        {
          v17 = __ldaxr(result);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, result));
        if (!v18)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v16 = v5[20];
      if ((_DWORD)v16 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E3413D08[v16])(&v31, v5 + 4);
      v5[20] = -1;
      if ((*(_QWORD *)v5 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(*(_QWORD *)v5 & 0xFFFFFFFFFFFFLL);
        do
        {
          v19 = __ldaxr(result);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, result));
        if (!v20)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v5 += 190;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WebCore::DisplayList::Recorder::ContextState::ContextState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = WebCore::GraphicsContextState::GraphicsContextState(a1, a2);
  v5 = *(_OWORD *)(a2 + 344);
  v6 = *(_OWORD *)(a2 + 360);
  v7 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(v4 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(v4 + 392) = v7;
  *(_OWORD *)(v4 + 344) = v5;
  *(_OWORD *)(v4 + 360) = v6;
  *(_BYTE *)(v4 + 408) = 0;
  *(_BYTE *)(v4 + 752) = 0;
  if (*(_BYTE *)(a2 + 752))
  {
    WebCore::GraphicsContextState::GraphicsContextState(a1 + 408, a2 + 408);
    *(_BYTE *)(a1 + 752) = 1;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::DisplayList::Recorder::ContextState,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DisplayList::Recorder::ContextState>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = WTF::Vector<WebCore::DisplayList::Recorder::ContextState,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = WebCore::DisplayList::Recorder::ContextState::ContextState(*(_QWORD *)a1 + 760 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11DisplayList8Recorder20drawDisplayListItemsERKNS8_6VectorINS_7variantIJNSB_22ApplyDeviceScaleFactorENSB_22BeginTransparencyLayerENSB_39BeginTransparencyLayerWithCompositeModeENSB_9ClearRectENSB_15ClearDropShadowENSB_4ClipENSB_15ClipRoundedRectENSB_7ClipOutENSB_18ClipOutRoundedRectENSB_13ClipOutToPathENSB_8ClipPathENSB_17ClipToImageBufferENSB_14ConcatenateCTMENSB_15DrawControlPartENSB_25DrawDotsForDocumentMarkerENSB_11DrawEllipseENSB_23DrawFilteredImageBufferENSB_17DrawFocusRingPathENSB_18DrawFocusRingRectsENSB_10DrawGlyphsENSB_20DrawDecomposedGlyphsENSB_20DrawDisplayListItemsENSB_15DrawImageBufferENSB_8DrawLineENSB_16DrawLinesForTextENSB_15DrawNativeImageENSB_8DrawPathENSB_11DrawPatternENSB_8DrawRectENSB_15DrawSystemImageENSB_20EndTransparencyLayerENSB_18FillCompositedRectENSB_11FillEllipseENSB_15FillPathSegmentENSB_8FillPathENSB_8FillRectENSB_17FillRectWithColorENSB_20FillRectWithGradientENSB_37FillRectWithGradientAndSpaceTransformENSB_23FillRectWithRoundedHoleENSB_15FillRoundedRectENSB_9ResetClipENSB_7RestoreENSB_6RotateENSB_4SaveENSB_5ScaleENSB_6SetCTMENSB_18SetInlineFillColorENSB_15SetInlineStrokeENSB_10SetLineCapENSB_11SetLineDashENSB_11SetLineJoinENSB_13SetMiterLimitENSB_8SetStateENSB_13StrokeEllipseENSB_10StrokeLineENSB_17StrokePathSegmentENSB_10StrokePathENSB_10StrokeRectENSB_9TranslateENSB_8FillLineENSB_7FillArcENSB_13FillClosedArcENSB_13FillQuadCurveENSB_15FillBezierCurveENSB_9StrokeArcENSB_15StrokeClosedArcENSB_15StrokeQuadCurveENSB_17StrokeBezierCurveENSB_18PaintFrameForMediaENSB_16ApplyFillPatternENSB_18ApplyStrokePatternEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEERKNSB_12ResourceHeapERNSA_14ControlFactoryERKNSA_10FloatPointEE3__0JZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__1ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__2ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__3ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__4EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateENS8_3RefINSA_11ImageBufferENS8_12RawPtrTraitsIS35_EENS8_21DefaultRefDerefTraitsIS35_EEEENS34_INSA_17RenderingResourceENS36_IS3B_EENS38_IS3B_EEEENS34_INSA_4FontENS36_IS3F_EENS38_IS3F_EEEENS34_INSA_22FontCustomPlatformDataENS36_IS3J_EENS38_IS3J_EEEEEEEEEEDcT_DpT0_()
{
  __break(0xC471u);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11DisplayList8Recorder20drawDisplayListItemsERKNS8_6VectorINS_7variantIJNSB_22ApplyDeviceScaleFactorENSB_22BeginTransparencyLayerENSB_39BeginTransparencyLayerWithCompositeModeENSB_9ClearRectENSB_15ClearDropShadowENSB_4ClipENSB_15ClipRoundedRectENSB_7ClipOutENSB_18ClipOutRoundedRectENSB_13ClipOutToPathENSB_8ClipPathENSB_17ClipToImageBufferENSB_14ConcatenateCTMENSB_15DrawControlPartENSB_25DrawDotsForDocumentMarkerENSB_11DrawEllipseENSB_23DrawFilteredImageBufferENSB_17DrawFocusRingPathENSB_18DrawFocusRingRectsENSB_10DrawGlyphsENSB_20DrawDecomposedGlyphsENSB_20DrawDisplayListItemsENSB_15DrawImageBufferENSB_8DrawLineENSB_16DrawLinesForTextENSB_15DrawNativeImageENSB_8DrawPathENSB_11DrawPatternENSB_8DrawRectENSB_15DrawSystemImageENSB_20EndTransparencyLayerENSB_18FillCompositedRectENSB_11FillEllipseENSB_15FillPathSegmentENSB_8FillPathENSB_8FillRectENSB_17FillRectWithColorENSB_20FillRectWithGradientENSB_37FillRectWithGradientAndSpaceTransformENSB_23FillRectWithRoundedHoleENSB_15FillRoundedRectENSB_9ResetClipENSB_7RestoreENSB_6RotateENSB_4SaveENSB_5ScaleENSB_6SetCTMENSB_18SetInlineFillColorENSB_15SetInlineStrokeENSB_10SetLineCapENSB_11SetLineDashENSB_11SetLineJoinENSB_13SetMiterLimitENSB_8SetStateENSB_13StrokeEllipseENSB_10StrokeLineENSB_17StrokePathSegmentENSB_10StrokePathENSB_10StrokeRectENSB_9TranslateENSB_8FillLineENSB_7FillArcENSB_13FillClosedArcENSB_13FillQuadCurveENSB_15FillBezierCurveENSB_9StrokeArcENSB_15StrokeClosedArcENSB_15StrokeQuadCurveENSB_17StrokeBezierCurveENSB_18PaintFrameForMediaENSB_16ApplyFillPatternENSB_18ApplyStrokePatternEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEERKNSB_12ResourceHeapERNSA_14ControlFactoryERKNSA_10FloatPointEE3__0JZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__1ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__2ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__3ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__4EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateENS8_3RefINSA_11ImageBufferENS8_12RawPtrTraitsIS35_EENS8_21DefaultRefDerefTraitsIS35_EEEENS34_INSA_17RenderingResourceENS36_IS3B_EENS38_IS3B_EEEENS34_INSA_4FontENS36_IS3F_EENS38_IS3F_EEEENS34_INSA_22FontCustomPlatformDataENS36_IS3J_EENS38_IS3J_EEEEEEEEEEDcT_DpT0_(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 1328))(**a1, *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11DisplayList8Recorder20drawDisplayListItemsERKNS8_6VectorINS_7variantIJNSB_22ApplyDeviceScaleFactorENSB_22BeginTransparencyLayerENSB_39BeginTransparencyLayerWithCompositeModeENSB_9ClearRectENSB_15ClearDropShadowENSB_4ClipENSB_15ClipRoundedRectENSB_7ClipOutENSB_18ClipOutRoundedRectENSB_13ClipOutToPathENSB_8ClipPathENSB_17ClipToImageBufferENSB_14ConcatenateCTMENSB_15DrawControlPartENSB_25DrawDotsForDocumentMarkerENSB_11DrawEllipseENSB_23DrawFilteredImageBufferENSB_17DrawFocusRingPathENSB_18DrawFocusRingRectsENSB_10DrawGlyphsENSB_20DrawDecomposedGlyphsENSB_20DrawDisplayListItemsENSB_15DrawImageBufferENSB_8DrawLineENSB_16DrawLinesForTextENSB_15DrawNativeImageENSB_8DrawPathENSB_11DrawPatternENSB_8DrawRectENSB_15DrawSystemImageENSB_20EndTransparencyLayerENSB_18FillCompositedRectENSB_11FillEllipseENSB_15FillPathSegmentENSB_8FillPathENSB_8FillRectENSB_17FillRectWithColorENSB_20FillRectWithGradientENSB_37FillRectWithGradientAndSpaceTransformENSB_23FillRectWithRoundedHoleENSB_15FillRoundedRectENSB_9ResetClipENSB_7RestoreENSB_6RotateENSB_4SaveENSB_5ScaleENSB_6SetCTMENSB_18SetInlineFillColorENSB_15SetInlineStrokeENSB_10SetLineCapENSB_11SetLineDashENSB_11SetLineJoinENSB_13SetMiterLimitENSB_8SetStateENSB_13StrokeEllipseENSB_10StrokeLineENSB_17StrokePathSegmentENSB_10StrokePathENSB_10StrokeRectENSB_9TranslateENSB_8FillLineENSB_7FillArcENSB_13FillClosedArcENSB_13FillQuadCurveENSB_15FillBezierCurveENSB_9StrokeArcENSB_15StrokeClosedArcENSB_15StrokeQuadCurveENSB_17StrokeBezierCurveENSB_18PaintFrameForMediaENSB_16ApplyFillPatternENSB_18ApplyStrokePatternEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEERKNSB_12ResourceHeapERNSA_14ControlFactoryERKNSA_10FloatPointEE3__0JZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__1ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__2ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__3ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__4EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateENS8_3RefINSA_11ImageBufferENS8_12RawPtrTraitsIS35_EENS8_21DefaultRefDerefTraitsIS35_EEEENS34_INSA_17RenderingResourceENS36_IS3B_EENS38_IS3B_EEEENS34_INSA_4FontENS36_IS3F_EENS38_IS3F_EEEENS34_INSA_22FontCustomPlatformDataENS36_IS3J_EENS38_IS3J_EEEEEEEEEEDcT_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  if (!*a2)
    goto LABEL_14;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v2 + 16))(*a2))
  {
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 1320);
    goto LABEL_8;
  }
  v2 = *a2;
  if (!*a2)
    goto LABEL_14;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v2 + 40))(*a2))
  {
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 1368);
    goto LABEL_8;
  }
  v2 = *a2;
  if (!*a2)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x1962534ACLL);
  }
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v2 + 32))(*a2))
  {
    v8 = *a2;
    if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
    {
      v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 1360);
      v6 = v4;
      v7 = v8;
      return v5(v6, v7);
    }
    goto LABEL_14;
  }
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 1352);
LABEL_8:
  v6 = v4;
  v7 = v2;
  return v5(v6, v7);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11DisplayList8Recorder20drawDisplayListItemsERKNS8_6VectorINS_7variantIJNSB_22ApplyDeviceScaleFactorENSB_22BeginTransparencyLayerENSB_39BeginTransparencyLayerWithCompositeModeENSB_9ClearRectENSB_15ClearDropShadowENSB_4ClipENSB_15ClipRoundedRectENSB_7ClipOutENSB_18ClipOutRoundedRectENSB_13ClipOutToPathENSB_8ClipPathENSB_17ClipToImageBufferENSB_14ConcatenateCTMENSB_15DrawControlPartENSB_25DrawDotsForDocumentMarkerENSB_11DrawEllipseENSB_23DrawFilteredImageBufferENSB_17DrawFocusRingPathENSB_18DrawFocusRingRectsENSB_10DrawGlyphsENSB_20DrawDecomposedGlyphsENSB_20DrawDisplayListItemsENSB_15DrawImageBufferENSB_8DrawLineENSB_16DrawLinesForTextENSB_15DrawNativeImageENSB_8DrawPathENSB_11DrawPatternENSB_8DrawRectENSB_15DrawSystemImageENSB_20EndTransparencyLayerENSB_18FillCompositedRectENSB_11FillEllipseENSB_15FillPathSegmentENSB_8FillPathENSB_8FillRectENSB_17FillRectWithColorENSB_20FillRectWithGradientENSB_37FillRectWithGradientAndSpaceTransformENSB_23FillRectWithRoundedHoleENSB_15FillRoundedRectENSB_9ResetClipENSB_7RestoreENSB_6RotateENSB_4SaveENSB_5ScaleENSB_6SetCTMENSB_18SetInlineFillColorENSB_15SetInlineStrokeENSB_10SetLineCapENSB_11SetLineDashENSB_11SetLineJoinENSB_13SetMiterLimitENSB_8SetStateENSB_13StrokeEllipseENSB_10StrokeLineENSB_17StrokePathSegmentENSB_10StrokePathENSB_10StrokeRectENSB_9TranslateENSB_8FillLineENSB_7FillArcENSB_13FillClosedArcENSB_13FillQuadCurveENSB_15FillBezierCurveENSB_9StrokeArcENSB_15StrokeClosedArcENSB_15StrokeQuadCurveENSB_17StrokeBezierCurveENSB_18PaintFrameForMediaENSB_16ApplyFillPatternENSB_18ApplyStrokePatternEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEERKNSB_12ResourceHeapERNSA_14ControlFactoryERKNSA_10FloatPointEE3__0JZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__1ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__2ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__3ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__4EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateENS8_3RefINSA_11ImageBufferENS8_12RawPtrTraitsIS35_EENS8_21DefaultRefDerefTraitsIS35_EEEENS34_INSA_17RenderingResourceENS36_IS3B_EENS38_IS3B_EEEENS34_INSA_4FontENS36_IS3F_EENS38_IS3F_EEEENS34_INSA_22FontCustomPlatformDataENS36_IS3J_EENS38_IS3J_EEEEEEEEEEDcT_DpT0_(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 1344))(*(_QWORD *)(*(_QWORD *)a1 + 16), *a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11DisplayList8Recorder20drawDisplayListItemsERKNS8_6VectorINS_7variantIJNSB_22ApplyDeviceScaleFactorENSB_22BeginTransparencyLayerENSB_39BeginTransparencyLayerWithCompositeModeENSB_9ClearRectENSB_15ClearDropShadowENSB_4ClipENSB_15ClipRoundedRectENSB_7ClipOutENSB_18ClipOutRoundedRectENSB_13ClipOutToPathENSB_8ClipPathENSB_17ClipToImageBufferENSB_14ConcatenateCTMENSB_15DrawControlPartENSB_25DrawDotsForDocumentMarkerENSB_11DrawEllipseENSB_23DrawFilteredImageBufferENSB_17DrawFocusRingPathENSB_18DrawFocusRingRectsENSB_10DrawGlyphsENSB_20DrawDecomposedGlyphsENSB_20DrawDisplayListItemsENSB_15DrawImageBufferENSB_8DrawLineENSB_16DrawLinesForTextENSB_15DrawNativeImageENSB_8DrawPathENSB_11DrawPatternENSB_8DrawRectENSB_15DrawSystemImageENSB_20EndTransparencyLayerENSB_18FillCompositedRectENSB_11FillEllipseENSB_15FillPathSegmentENSB_8FillPathENSB_8FillRectENSB_17FillRectWithColorENSB_20FillRectWithGradientENSB_37FillRectWithGradientAndSpaceTransformENSB_23FillRectWithRoundedHoleENSB_15FillRoundedRectENSB_9ResetClipENSB_7RestoreENSB_6RotateENSB_4SaveENSB_5ScaleENSB_6SetCTMENSB_18SetInlineFillColorENSB_15SetInlineStrokeENSB_10SetLineCapENSB_11SetLineDashENSB_11SetLineJoinENSB_13SetMiterLimitENSB_8SetStateENSB_13StrokeEllipseENSB_10StrokeLineENSB_17StrokePathSegmentENSB_10StrokePathENSB_10StrokeRectENSB_9TranslateENSB_8FillLineENSB_7FillArcENSB_13FillClosedArcENSB_13FillQuadCurveENSB_15FillBezierCurveENSB_9StrokeArcENSB_15StrokeClosedArcENSB_15StrokeQuadCurveENSB_17StrokeBezierCurveENSB_18PaintFrameForMediaENSB_16ApplyFillPatternENSB_18ApplyStrokePatternEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEERKNSB_12ResourceHeapERNSA_14ControlFactoryERKNSA_10FloatPointEE3__0JZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__1ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__2ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__3ZNSC_20drawDisplayListItemsES2K_S2N_S2P_S2S_E3__4EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateENS8_3RefINSA_11ImageBufferENS8_12RawPtrTraitsIS35_EENS8_21DefaultRefDerefTraitsIS35_EEEENS34_INSA_17RenderingResourceENS36_IS3B_EENS38_IS3B_EEEENS34_INSA_4FontENS36_IS3F_EENS38_IS3F_EEEENS34_INSA_22FontCustomPlatformDataENS36_IS3J_EENS38_IS3J_EEEEEEEEEEDcT_DpT0_()
{
  __break(0xC471u);
}

void WebCore::FEBlend::create(char a1@<W0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  const void *v7;
  uint64_t v8;

  v6 = WTF::fastMalloc((WTF *)0x48);
  v7 = *a2;
  if (v7)
  {
    CFRetain(v7);
    CFRetain(v7);
  }
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = v6;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_BYTE *)(v6 + 48) = 2;
  *(_QWORD *)v6 = off_1E34164C8;
  *(_QWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 56) = v7;
  if (v7)
  {
    CFRetain(v7);
    CFRelease(v7);
    *(_QWORD *)v6 = off_1E3414F60;
    *(_BYTE *)(v6 + 64) = a1;
    CFRelease(v7);
  }
  else
  {
    *(_QWORD *)v6 = off_1E3414F60;
    *(_BYTE *)(v6 + 64) = a1;
  }
  *a3 = v6;
}

_QWORD *WebCore::FEBlend::createSoftwareApplier@<X0>(WebCore::FEBlend *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416850;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FEBlend::externalRepresentation(uint64_t a1, WTF::TextStream *this, int a3)
{
  unsigned int v6;
  char *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  v6 = *(unsigned __int8 *)(a1 + 64);
  if (v6 < 2)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    v7 = (&WebCore::blendOperatorNames)[2 * v6 - 1];
    if (v7)
    {
      if (v7 == (char *)1)
      {
        v8 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v8 = v12;
      }
      v11 = v8;
    }
    else
    {
      v11 = 0;
    }
  }
  WTF::TextStream::operator<<();
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::FEColorMatrix::create(char a1@<W0>, uint64_t *a2@<X1>, const void **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = WTF::fastMalloc((WTF *)0x58);
  v9 = *a3;
  if (v9)
  {
    CFRetain(v9);
    CFRetain(v9);
  }
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_19689B170;
  *(_QWORD *)(v10 + 24) = v8;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_BYTE *)(v8 + 48) = 3;
  *(_QWORD *)v8 = off_1E34164C8;
  *(_QWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 56) = v9;
  if (v9)
  {
    CFRetain(v9);
    CFRelease(v9);
  }
  *(_QWORD *)v8 = off_1E3415018;
  *(_BYTE *)(v8 + 64) = a1;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(v8 + 72) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(v8 + 80) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(v8 + 84) = v11;
  *a4 = v8;
  if (v9)
    CFRelease(v9);
}

BOOL WTF::operator==<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(a1 + 12);
  return (_DWORD)v2 == *(_DWORD *)(a2 + 12) && memcmp(*(const void **)a1, *(const void **)a2, 4 * v2) == 0;
}

BOOL WebCore::FEColorMatrix::setValues(uint64_t a1, uint64_t a2)
{
  WTF **v4;
  _BOOL4 v5;
  void *v6;
  _BOOL4 v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v13;

  v4 = (WTF **)(a1 + 72);
  v5 = WTF::operator==<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a1 + 72, a2);
  v7 = v5;
  if (v4 != (WTF **)a2 && !v5)
  {
    v8 = *(_DWORD *)(a1 + 84);
    v9 = *(_DWORD *)(a2 + 12);
    if (v8 <= v9)
    {
      v10 = *(_DWORD *)(a1 + 80);
      if (v9 > v10)
      {
        if (v10)
        {
          if (v8)
            *(_DWORD *)(a1 + 84) = 0;
          v13 = *v4;
          if (*v4)
          {
            *(_QWORD *)(a1 + 72) = 0;
            *(_DWORD *)(a1 + 80) = 0;
            WTF::fastFree(v13, v6);
          }
        }
        WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v4, *(unsigned int *)(a2 + 12));
        v8 = *(_DWORD *)(a1 + 84);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 84) = v9;
      v8 = v9;
    }
    if (v8)
    {
      memmove(*(void **)(a1 + 72), *(const void **)a2, 4 * v8);
      v11 = *(unsigned int *)(a1 + 84);
    }
    else
    {
      v11 = 0;
    }
    memcpy((void *)(*(_QWORD *)(a1 + 72) + 4 * v11), (const void *)(*(_QWORD *)a2 + 4 * v11), *(_QWORD *)a2 + 4 * *(unsigned int *)(a2 + 12) - (*(_QWORD *)a2 + 4 * v11));
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 12);
  }
  return !v7;
}

uint64_t WebCore::FEColorMatrix::calculateSaturateComponents(uint64_t this, float *a2, float a3)
{
  float32x2_t v3;
  float v4;
  float32x2_t v5;

  v3 = vmla_n_f32((float32x2_t)0x3D9374BC3F370A3DLL, (float32x2_t)0x3F6D9168BF370A3DLL, a3);
  v4 = (float)(a3 * -0.072) + 0.072;
  v5 = vmla_n_f32((float32x2_t)0x3F370A3D3E5A1CACLL, (float32x2_t)0x3E91EB85BE5A1CACLL, a3);
  *(float *)this = (float)(a3 * 0.787) + 0.213;
  *(_DWORD *)(this + 4) = v3.i32[0];
  *(float *)(this + 8) = v4;
  *(float32x2_t *)(this + 12) = v5;
  *(float *)(this + 20) = v4;
  *(_DWORD *)(this + 24) = v5.i32[0];
  *(float32x2_t *)(this + 28) = v3;
  return this;
}

float WebCore::FEColorMatrix::calculateHueRotateComponents(WebCore::FEColorMatrix *this, float *a2, float a3)
{
  __float2 v4;
  float v5;
  float v6;
  float v7;
  float result;

  v4 = __sincosf_stret(a3 * 0.017453);
  v5 = 0.715 - (float)(v4.__cosval * 0.715);
  v6 = 0.072 - (float)(v4.__cosval * 0.072);
  v7 = 0.213 - (float)(v4.__cosval * 0.213);
  *(float *)this = (float)((float)(v4.__cosval * 0.787) + 0.213) - (float)(v4.__sinval * 0.213);
  *((float *)this + 1) = v5 - (float)(v4.__sinval * 0.715);
  *((float *)this + 2) = v6 + (float)(v4.__sinval * 0.928);
  *((float *)this + 3) = v7 + (float)(v4.__sinval * 0.143);
  result = (float)((float)(v4.__cosval * 0.928) + 0.072) + (float)(v4.__sinval * 0.072);
  *((float *)this + 4) = (float)((float)(v4.__cosval * 0.285) + 0.715) + (float)(v4.__sinval * 0.14);
  *((float *)this + 5) = v6 + (float)(v4.__sinval * -0.283);
  *((float *)this + 6) = v7 - (float)(v4.__sinval * 0.787);
  *((float *)this + 7) = v5 + (float)(v4.__sinval * 0.715);
  *((float *)this + 8) = result;
  return result;
}

BOOL WebCore::FEColorMatrix::resultIsAlphaImage(uint64_t a1)
{
  return *(_BYTE *)(a1 + 64) == 4;
}

uint64_t WebCore::FEColorMatrix::supportedFilterRenderingModes(WebCore::FEColorMatrix *this)
{
  int v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 64);
  if ((v1 - 1) >= 3)
    v2 = 1;
  else
    v2 = 3;
  if (v1 == 1)
    return v2 | 4;
  else
    return v2;
}

_QWORD *WebCore::FEColorMatrix::createAcceleratedApplier@<X0>(WebCore::FEColorMatrix *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E334F760;
  result[1] = this;
  *a2 = result;
  return result;
}

uint64_t WebCore::FEColorMatrix::createSoftwareApplier@<X0>(WebCore::FEColorMatrix *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::FEColorMatrixSoftwareApplier *v4;
  uint64_t result;

  v4 = (WebCore::FEColorMatrixSoftwareApplier *)WTF::fastMalloc((WTF *)0x38);
  result = WebCore::FEColorMatrixSoftwareApplier::FEColorMatrixSoftwareApplier(v4, this);
  *a2 = result;
  return result;
}

__n128 WebCore::FEColorMatrix::createGraphicsStyle@<Q0>(WebCore::FEColorMatrix *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v5;
  __int128 v6;
  __n128 result;
  _OWORD __dst[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)this + 21);
  if (v5 >= 0x14)
    v5 = 20;
  if (v5)
    memcpy(__dst, *((const void **)this + 9), 4 * v5);
  v6 = __dst[3];
  *(_OWORD *)(a2 + 32) = __dst[2];
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 64) = __dst[4];
  result = (__n128)__dst[1];
  *(_OWORD *)a2 = __dst[0];
  *(__n128 *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 80) = 2;
  *(_BYTE *)(a2 + 88) = 1;
  return result;
}

WTF::TextStream *WebCore::FEColorMatrix::externalRepresentation(uint64_t a1, WTF::TextStream *this, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  if ((unint64_t)*(char *)(a1 + 64) <= 4)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 84))
  {
    WTF::TextStream::operator<<();
    v6 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(a1 + 72);
      WTF::TextStream::operator<<();
      if ((_DWORD)v6 != 1)
      {
        v8 = v7 + 4 * v6;
        v9 = v7 + 4;
        do
        {
          WTF::TextStream::operator<<();
          v9 += 4;
          WTF::TextStream::operator<<();
        }
        while (v9 < v8);
      }
    }
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::FEComponentTransfer::create(__int128 *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, const void **a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  CFTypeRef v15;

  v12 = WTF::fastMalloc((WTF *)0xE0);
  v13 = v12;
  v14 = *a5;
  v15 = v14;
  if (v14)
  {
    CFRetain(v14);
    WebCore::FEComponentTransfer::FEComponentTransfer(v13, a1, a2, a3, a4, &v15);
    CFRelease(v14);
  }
  else
  {
    WebCore::FEComponentTransfer::FEComponentTransfer(v12, a1, a2, a3, a4, &v15);
  }
  *a6 = v13;
}

uint64_t WebCore::FEComponentTransfer::FEComponentTransfer(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, CFTypeRef *a6)
{
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v11 = *a6;
  if (*a6)
    CFRetain(*a6);
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_19689B170;
  *(_QWORD *)(v12 + 24) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 4;
  *(_QWORD *)a1 = off_1E34164C8;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 56) = v11;
  if (v11)
  {
    CFRetain(v11);
    CFRelease(v11);
  }
  *(_QWORD *)a1 = off_1E34150D0;
  v28 = *a2;
  v29 = *((_QWORD *)a2 + 2);
  v13 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v13)
  {
    if (v13 >> 30)
      goto LABEL_25;
    v14 = (void *)WTF::fastMalloc((WTF *)(4 * v13));
    memcpy(v14, *((const void **)a2 + 3), 4 * *((unsigned int *)a2 + 9));
  }
  else
  {
    v14 = 0;
  }
  v26 = *a3;
  v27 = *((_QWORD *)a3 + 2);
  v15 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v15)
  {
    if (v15 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x196253FECLL);
    }
    v16 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
    memcpy(v16, *((const void **)a3 + 3), 4 * *((unsigned int *)a3 + 9));
  }
  else
  {
    v16 = 0;
  }
  v24 = *a4;
  v25 = *((_QWORD *)a4 + 2);
  v17 = *((unsigned int *)a4 + 9);
  if ((_DWORD)v17)
  {
    if (v17 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x196253FF4);
    }
    v18 = (void *)WTF::fastMalloc((WTF *)(4 * v17));
    memcpy(v18, *((const void **)a4 + 3), 4 * *((unsigned int *)a4 + 9));
  }
  else
  {
    v18 = 0;
  }
  v22 = *a5;
  v23 = *((_QWORD *)a5 + 2);
  v19 = *((unsigned int *)a5 + 9);
  if (!(_DWORD)v19)
  {
    v20 = 0;
    goto LABEL_17;
  }
  if (v19 >> 30)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x196253FE4);
  }
  v20 = (void *)WTF::fastMalloc((WTF *)(4 * v19));
  memcpy(v20, *((const void **)a5 + 3), 4 * *((unsigned int *)a5 + 9));
LABEL_17:
  *(_OWORD *)(a1 + 64) = v28;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)(a1 + 88) = v14;
  *(_DWORD *)(a1 + 96) = v13;
  *(_DWORD *)(a1 + 100) = v13;
  *(_OWORD *)(a1 + 104) = v26;
  *(_QWORD *)(a1 + 120) = v27;
  *(_QWORD *)(a1 + 128) = v16;
  *(_DWORD *)(a1 + 136) = v15;
  *(_DWORD *)(a1 + 140) = v15;
  *(_OWORD *)(a1 + 144) = v24;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = v18;
  *(_DWORD *)(a1 + 176) = v17;
  *(_DWORD *)(a1 + 180) = v17;
  *(_OWORD *)(a1 + 184) = v22;
  *(_QWORD *)(a1 + 200) = v23;
  *(_QWORD *)(a1 + 208) = v20;
  *(_DWORD *)(a1 + 216) = v19;
  *(_DWORD *)(a1 + 220) = v19;
  return a1;
}

uint64_t WebCore::FEComponentTransfer::FEComponentTransfer(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char **v17;
  char *v18;

  v4 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v4 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v5 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_19689B170;
  *(_QWORD *)(v6 + 24) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 4;
  *(_QWORD *)a1 = off_1E34164C8;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  if (v5)
  {
    CFRetain(v5);
    CFRelease(v5);
  }
  *(_QWORD *)a1 = off_1E34150D0;
  v7 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 88) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 96) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 100) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = v9;
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 128) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 136) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(a1 + 140) = v10;
  v11 = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = v11;
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 168) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 176) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a1 + 180) = v12;
  v13 = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = v13;
  v14 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 208) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_DWORD *)(a1 + 216) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a2 + 156) = 0;
  *(_DWORD *)(a1 + 220) = v14;
  return a1;
}

uint64_t WebCore::FEComponentTransfer::supportedFilterRenderingModes(WebCore::FEComponentTransfer *this, void *a2)
{
  if (WebCore::FEComponentTransferCoreImageApplier::supportsCoreImageRendering((uint64_t)this, a2))
    return 3;
  else
    return 1;
}

_QWORD *WebCore::FEComponentTransfer::createAcceleratedApplier@<X0>(WebCore::FEComponentTransfer *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3350A90;
  result[1] = this;
  *a2 = result;
  return result;
}

_QWORD *WebCore::FEComponentTransfer::createSoftwareApplier@<X0>(WebCore::FEComponentTransfer *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416878;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FEComponentTransfer::externalRepresentation(_BYTE *a1, WTF::TextStream *this, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation((int)a1, this, a3);
  WTF::TextStream::operator<<();
  *((_DWORD *)this + 6) += 2;
  WTF::TextStream::writeIndent(this);
  v6 = WTF::TextStream::operator<<();
  WebCore::operator<<(v6, a1 + 64);
  WTF::TextStream::operator<<();
  WTF::TextStream::writeIndent(this);
  v7 = WTF::TextStream::operator<<();
  WebCore::operator<<(v7, a1 + 104);
  WTF::TextStream::operator<<();
  WTF::TextStream::writeIndent(this);
  v8 = WTF::TextStream::operator<<();
  WebCore::operator<<(v8, a1 + 144);
  WTF::TextStream::operator<<();
  WTF::TextStream::writeIndent(this);
  v9 = WTF::TextStream::operator<<();
  WebCore::operator<<(v9, a1 + 184);
  WTF::TextStream::operator<<();
  *((_DWORD *)this + 6) -= 2;
  WTF::TextStream::operator<<();
  return this;
}

uint64_t WebCore::FEComponentTransfer::computeLookupTable@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD v16[7];

  v4 = 0;
  v16[6] = *MEMORY[0x1E0C80C00];
  v5 = (int8x16_t)xmmword_1969F1C50;
  v6.i64[0] = 0x1010101010101010;
  v6.i64[1] = 0x1010101010101010;
  do
  {
    *(int8x16_t *)(a2 + v4) = v5;
    v4 += 16;
    v5 = vaddq_s8(v5, v6);
  }
  while (v4 != 256);
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E3415520;
  v16[0] = v7;
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E3415548;
  v16[1] = v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E3415570;
  v9[1] = a2;
  v16[2] = v9;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E3415598;
  v10[1] = a2;
  v16[3] = v10;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E34155C0;
  v11[1] = a2;
  v16[4] = v11;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = off_1E34155E8;
  v12[1] = a2;
  v16[5] = v12;
  v13 = *a1;
  if (v13 >= 6)
  {
    __break(0xC471u);
    JUMPOUT(0x19625466CLL);
  }
  v14 = v12;
  (*(void (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)v16[v13] + 16))(v16[v13], a1);
  (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

void WebCore::FEComposite::create(_BYTE *a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>, float a5@<S1>, float a6@<S2>, float a7@<S3>)
{
  uint64_t v14;
  const void *v15;
  uint64_t v16;

  v14 = WTF::fastMalloc((WTF *)0x58);
  v15 = *a2;
  if (v15)
  {
    CFRetain(v15);
    CFRetain(v15);
  }
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v16 = 0;
  *(_OWORD *)(v16 + 8) = xmmword_19689B170;
  *(_QWORD *)(v16 + 24) = v14;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_BYTE *)(v14 + 48) = 5;
  *(_QWORD *)v14 = off_1E34164C8;
  *(_QWORD *)(v14 + 8) = v16;
  *(_QWORD *)(v14 + 56) = v15;
  if (v15)
  {
    CFRetain(v15);
    CFRelease(v15);
  }
  *(_QWORD *)v14 = off_1E3415188;
  *(_BYTE *)(v14 + 64) = *a1;
  *(float *)(v14 + 68) = a4;
  *(float *)(v14 + 72) = a5;
  *(float *)(v14 + 76) = a6;
  *(float *)(v14 + 80) = a7;
  *a3 = v14;
  if (v15)
    CFRelease(v15);
}

void WebCore::FEComposite::calculateImageRect(uint64_t a1, WebCore::Filter *this, float32x2_t *a3, unint64_t a4, float32x2_t *a5)
{
  int v5;

  v5 = *(unsigned __int8 *)(a1 + 64);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 6:
      WebCore::intersection(a5, (float32x2_t *)((char *)this + 60), (const WebCore::FloatRect *)a3);
      return;
    case 4:
LABEL_4:
      if (a4 <= 1)
        __break(1u);
      else
        WebCore::Filter::clipToMaxEffectRect(this, a3 + 2, a5);
      break;
    default:
      WebCore::FilterEffect::calculateImageRect(a1, (uint64_t)this, (WebCore::FloatRect *)a3, a4, a5);
      break;
  }
}

_QWORD *WebCore::FEComposite::createSoftwareApplier@<X0>(WebCore::FEComposite *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  _QWORD *result;
  void (**v6)(WebCore::FECompositeSoftwareApplier *__hidden);

  v4 = *((unsigned __int8 *)this + 64);
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v6 = off_1E34168A0;
  if (v4 == 6)
    v6 = off_1E34168C8;
  *result = v6;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FEComposite::externalRepresentation(uint64_t a1, WTF::TextStream *this, int a3)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  if ((unint64_t)*(char *)(a1 + 64) <= 7)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_BYTE *)(a1 + 64) == 6)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::FEConvolveMatrix::create(_QWORD *a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, _QWORD *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, const void **a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>, float a10@<S1>)
{
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  CFTypeRef v23;

  v20 = WTF::fastMalloc((WTF *)0x78);
  v21 = v20;
  v22 = *a7;
  v23 = v22;
  if (v22)
  {
    CFRetain(v22);
    WebCore::FEConvolveMatrix::FEConvolveMatrix(v21, a1, a2, a3, a4, a5, a6, &v23, a9, a10);
    CFRelease(v22);
  }
  else
  {
    WebCore::FEConvolveMatrix::FEConvolveMatrix(v20, a1, a2, a3, a4, a5, a6, &v23, a9, a10);
  }
  *a8 = v21;
}

void WebCore::FEConvolveMatrix::FEConvolveMatrix(uint64_t a1, _QWORD *a2, _QWORD *a3, char a4, _QWORD *a5, char a6, uint64_t a7, CFTypeRef *a8, float a9, float a10)
{
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v19 = *a8;
  if (*a8)
    CFRetain(*a8);
  v20 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v20 = 0;
  *(_OWORD *)(v20 + 8) = xmmword_19689B170;
  *(_QWORD *)(v20 + 24) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 6;
  *(_QWORD *)a1 = off_1E34164C8;
  *(_QWORD *)(a1 + 8) = v20;
  *(_QWORD *)(a1 + 56) = v19;
  if (v19)
  {
    CFRetain(v19);
    CFRelease(v19);
  }
  *(_QWORD *)a1 = off_1E3415240;
  *(_QWORD *)(a1 + 64) = *a2;
  *(float *)(a1 + 72) = a9;
  *(float *)(a1 + 76) = a10;
  *(_QWORD *)(a1 + 80) = *a3;
  *(_BYTE *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 92) = *a5;
  *(_BYTE *)(a1 + 100) = a6;
  v21 = *(unsigned int *)(a7 + 12);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = v21;
  if ((_DWORD)v21)
  {
    if (v21 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v22 = (void *)WTF::fastMalloc((WTF *)(4 * v21));
      *(_DWORD *)(a1 + 112) = v21;
      *(_QWORD *)(a1 + 104) = v22;
      memcpy(v22, *(const void **)a7, 4 * *(unsigned int *)(a7 + 12));
    }
  }
}

float32_t WebCore::FEConvolveMatrix::calculateImageRect(int a1, uint64_t a2, const WebCore::FloatRect *a3, int a4, float32x2_t *this)
{
  return WebCore::intersection(this, (float32x2_t *)(a2 + 60), a3);
}

_QWORD *WebCore::FEConvolveMatrix::createSoftwareApplier@<X0>(WebCore::FEConvolveMatrix *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E34168F0;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FEConvolveMatrix::externalRepresentation(uint64_t a1, WTF::TextStream *this, int a3)
{
  uint64_t v6;

  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v6 = WTF::TextStream::operator<<();
  WTF::streamSizedContainer<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v6, a1 + 104);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)*(char *)(a1 + 88) <= 3)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::FEDiffuseLighting::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, const void **a3@<X2>, uint64_t *a4@<X8>, float a5@<S0>, float a6@<S1>, float a7@<S2>, float a8@<S3>)
{
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;

  v16 = WTF::fastMalloc((WTF *)0x68);
  v17 = *a3;
  if (v17)
  {
    CFRetain(v17);
    CFRetain(v17);
    CFRetain(v17);
  }
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v18 = 0;
  *(_OWORD *)(v18 + 8) = xmmword_19689B170;
  *(_QWORD *)(v18 + 24) = v16;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_BYTE *)(v16 + 48) = 7;
  *(_QWORD *)v16 = off_1E34164C8;
  *(_QWORD *)(v16 + 8) = v18;
  *(_QWORD *)(v16 + 56) = v17;
  if (v17)
  {
    CFRetain(v17);
    CFRelease(v17);
  }
  *(_QWORD *)v16 = off_1E3415918;
  v19 = *a1;
  *(_QWORD *)(v16 + 64) = *a1;
  if ((v19 & 0x8000000000000) != 0)
  {
    v22 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v20 = 0.0;
  if (a6 >= 0.0)
    v20 = a6;
  *(float *)(v16 + 72) = a5;
  *(float *)(v16 + 76) = v20;
  *(_QWORD *)(v16 + 80) = 0x3F80000000000000;
  *(float *)(v16 + 88) = a7;
  *(float *)(v16 + 92) = a8;
  v21 = *a2;
  *a2 = 0;
  *(_QWORD *)(v16 + 96) = v21;
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)v16 = off_1E34152F8;
    CFRelease(v17);
  }
  else
  {
    *(_QWORD *)v16 = off_1E34152F8;
  }
  *a4 = v16;
}

WTF::TextStream *WebCore::FEDiffuseLighting::externalRepresentation(int a1, WTF::TextStream *this, int a3)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::FEDisplacementMap::create(char a1@<W0>, char a2@<W1>, const void **a3@<X2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v10;
  const void *v11;
  uint64_t v12;

  v10 = WTF::fastMalloc((WTF *)0x48);
  v11 = *a3;
  if (v11)
  {
    CFRetain(v11);
    CFRetain(v11);
  }
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_19689B170;
  *(_QWORD *)(v12 + 24) = v10;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_BYTE *)(v10 + 48) = 8;
  *(_QWORD *)v10 = off_1E34164C8;
  *(_QWORD *)(v10 + 8) = v12;
  *(_QWORD *)(v10 + 56) = v11;
  if (v11)
  {
    CFRetain(v11);
    CFRelease(v11);
    *(_QWORD *)v10 = off_1E34153B0;
    *(_BYTE *)(v10 + 64) = a1;
    *(_BYTE *)(v10 + 65) = a2;
    *(float *)(v10 + 68) = a5;
    CFRelease(v11);
  }
  else
  {
    *(_QWORD *)v10 = off_1E34153B0;
    *(_BYTE *)(v10 + 64) = a1;
    *(_BYTE *)(v10 + 65) = a2;
    *(float *)(v10 + 68) = a5;
  }
  *a4 = v10;
}

float32_t WebCore::FEDisplacementMap::calculateImageRect(int a1, uint64_t a2, const WebCore::FloatRect *a3, int a4, float32x2_t *this)
{
  return WebCore::intersection(this, (float32x2_t *)(a2 + 60), a3);
}

uint64_t WebCore::FEDisplacementMap::resultColorSpace(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a2 + 12))
    return **(_QWORD **)a2 + 56;
  __break(0xC471u);
  return result;
}

void WebCore::FEDisplacementMap::transformInputsColorSpace(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 12) <= 1u)
    __break(0xC471u);
}

_QWORD *WebCore::FEDisplacementMap::createSoftwareApplier@<X0>(WebCore::FEDisplacementMap *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416918;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FEDisplacementMap::externalRepresentation(uint64_t a1, WTF::TextStream *this, int a3)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)*(char *)(a1 + 64) <= 4)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)*(char *)(a1 + 65) <= 4)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::FEDropShadow::create(uint64_t *a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>, float a5@<S1>, float a6@<S2>, float a7@<S3>, float a8@<S4>)
{
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;

  v16 = WTF::fastMalloc((WTF *)0x60);
  v17 = *a2;
  if (v17)
  {
    CFRetain(v17);
    CFRetain(v17);
  }
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v18 = 0;
  *(_OWORD *)(v18 + 8) = xmmword_19689B170;
  *(_QWORD *)(v18 + 24) = v16;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_BYTE *)(v16 + 48) = 9;
  *(_QWORD *)v16 = off_1E34164C8;
  *(_QWORD *)(v16 + 8) = v18;
  *(_QWORD *)(v16 + 56) = v17;
  if (v17)
  {
    CFRetain(v17);
    CFRelease(v17);
  }
  *(_QWORD *)v16 = off_1E3415468;
  *(float *)(v16 + 64) = a4;
  *(float *)(v16 + 68) = a5;
  *(float *)(v16 + 72) = a6;
  *(float *)(v16 + 76) = a7;
  v19 = *a1;
  *(_QWORD *)(v16 + 80) = *a1;
  if ((v19 & 0x8000000000000) != 0)
  {
    v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  *(float *)(v16 + 88) = a8;
  *a3 = v16;
  if (v17)
    CFRelease(v17);
}

uint64_t WebCore::FEDropShadow::setShadowColor(WebCore::FEDropShadow *this, const WebCore::Color *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  _BOOL4 v19;
  const WebCore::Color *v20;
  const WebCore::Color *v21;
  WebCore::FEDropShadow *v22;
  WebCore::FEDropShadow *v23;
  float v24[4];
  float v25[4];

  v2 = *((_QWORD *)this + 10);
  v3 = *(_QWORD *)a2;
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0)
      goto LABEL_6;
    v21 = a2;
    v23 = this;
    v12 = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 8);
    v13 = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 0xC);
    v14 = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 0x10);
    v15 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    v16 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 8);
    v17 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC);
    v18 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10);
    if (*(float *)((v2 & 0xFFFFFFFFFFFFLL) + 4) != v15
      || v12 != v16
      || v13 != v17
      || v14 != v18
      || HIBYTE(v2) != HIBYTE(v3)
      || BYTE6(v2) != BYTE6(v3))
    {
      v25[0] = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
      v25[1] = v12;
      v25[2] = v13;
      v25[3] = v14;
      v24[0] = v15;
      v24[1] = v16;
      v24[2] = v17;
      v24[3] = v18;
      v19 = WebCore::operator==<float,4ul>(v25, v24);
      v2 = *((_QWORD *)v23 + 10);
      if (v19 && HIBYTE(v2) == HIBYTE(*(_QWORD *)v21))
      {
        a2 = v21;
        this = v23;
        if (BYTE6(v2) == BYTE6(*(_QWORD *)v21))
          return 1;
      }
      else
      {
        a2 = v21;
        this = v23;
      }
      goto LABEL_6;
    }
    return 0;
  }
  if (v2 == v3 && (v3 & 0x8000000000000) == 0)
    return 0;
LABEL_6:
  if ((v2 & 0x8000000000000) != 0)
  {
    v20 = a2;
    v22 = this;
    v9 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
      a2 = v20;
      this = v22;
    }
  }
  v5 = *(_QWORD *)a2;
  *((_QWORD *)this + 10) = *(_QWORD *)a2;
  if ((v5 & 0x8000000000000) == 0)
    return 1;
  v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
  result = 1;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  return result;
}

void WebCore::FEDropShadow::calculateImageRect(uint64_t a1, WebCore::Filter *a2, __int128 *a3, uint64_t a4, float32x2_t *a5)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  __int128 v28;

  if (a4)
  {
    v28 = *a3;
    v9 = *((float *)&v28 + 1);
    v8 = *(float *)&v28;
    v11 = *((float *)&v28 + 3);
    v10 = *((float *)&v28 + 2);
    v27 = *(_QWORD *)(a1 + 72);
    v12 = (*(float (**)(WebCore::Filter *, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v27);
    v14 = v9 + v13;
    v15 = v8 + v12;
    if (v15 >= v8)
      v16 = v8;
    else
      v16 = v15;
    if (v14 >= v9)
      v17 = v9;
    else
      v17 = v14;
    v18 = v10 + v15;
    if ((float)(v10 + v8) >= v18)
      v18 = v10 + v8;
    v19 = v11 + v14;
    if ((float)(v11 + v9) >= v19)
      v19 = v11 + v9;
    v20 = v18 - v16;
    v21 = v19 - v17;
    if (v11 <= 0.0)
    {
      v21 = v11;
      v17 = v9;
      v20 = v10;
      v16 = v8;
    }
    if (v10 > 0.0)
    {
      v11 = v21;
      v9 = v17;
      v10 = v20;
      v8 = v16;
    }
    v27 = *(_QWORD *)(a1 + 64);
    v22 = (*(float (**)(WebCore::Filter *, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v27);
    v24 = WebCore::FEGaussianBlur::calculateUnscaledKernelSize(v22, v23);
    v25 = (float)(3 * v24) * 0.5;
    v26 = (float)(3 * HIDWORD(v24)) * 0.5;
    *(float *)&v28 = v8 - v25;
    *((float *)&v28 + 1) = v9 - v26;
    *((float *)&v28 + 2) = v25 + (float)(v10 + v25);
    *((float *)&v28 + 3) = v26 + (float)(v26 + v11);
    WebCore::Filter::clipToMaxEffectRect(a2, (float32x2_t *)&v28, a5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t WebCore::FEDropShadow::supportedFilterRenderingModes(WebCore::FEDropShadow *this)
{
  if (*((float *)this + 16) == *((float *)this + 17))
    return 5;
  else
    return 1;
}

uint64_t WebCore::FEDropShadow::createGraphicsStyle@<X0>(WebCore::FEDropShadow *this@<X0>, WebCore::GraphicsContext *a2@<X1>, const WebCore::Filter *a3@<X2>, uint64_t a4@<X8>)
{
  float v7;
  float v8;
  int v9;
  int v10;
  float v11;
  float v12;
  uint64_t result;
  float v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;

  v7 = *((float *)this + 19);
  if (*((_BYTE *)a2 + 345))
    v7 = -v7;
  LODWORD(v20) = *((_DWORD *)this + 18);
  *((float *)&v20 + 1) = v7;
  v8 = (*(float (**)(const WebCore::Filter *, uint64_t *))(*(_QWORD *)a3 + 80))(a3, &v20);
  v10 = v9;
  v20 = *((_QWORD *)this + 8);
  v11 = (*(float (**)(const WebCore::Filter *, uint64_t *))(*(_QWORD *)a3 + 80))(a3, &v20);
  result = WebCore::FEGaussianBlur::calculateUnscaledKernelSize(v11, v12);
  v14 = (float)(int)result;
  v15 = *((_QWORD *)this + 10);
  if ((v15 & 0x8000000000000) != 0)
  {
    v18 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    v16 = *((_DWORD *)this + 22);
    *(float *)a4 = v8;
    *(_DWORD *)(a4 + 4) = v10;
    v17 = (_QWORD *)(a4 + 16);
    *(float *)(a4 + 8) = v14;
    goto LABEL_5;
  }
  v16 = *((_DWORD *)this + 22);
  *(float *)a4 = v8;
  *(_DWORD *)(a4 + 4) = v10;
  *(float *)(a4 + 8) = v14;
  *(_QWORD *)(a4 + 16) = 0;
  v17 = (_QWORD *)(a4 + 16);
  if (v15)
LABEL_5:
    *v17 = v15;
  *(_DWORD *)(a4 + 24) = 0;
  *(_DWORD *)(a4 + 28) = v16;
  *(_DWORD *)(a4 + 80) = 0;
  *(_BYTE *)(a4 + 88) = 1;
  return result;
}

void WebCore::FEDropShadow::createAcceleratedApplier(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *WebCore::FEDropShadow::createSoftwareApplier@<X0>(WebCore::FEDropShadow *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E34169E0;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FEDropShadow::externalRepresentation(uint64_t a1, WTF::TextStream *this, int a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WebCore::serializationForRenderTreeAsText((WebCore *)(a1 + 80), (uint64_t *)&v9);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::FEBlend::~FEBlend(WebCore::FEBlend *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v4, v5);
}

BOOL WebCore::FilterFunction::isFilter(WebCore::FilterFunction *this)
{
  return *((unsigned __int8 *)this + 48) < 2u;
}

uint64_t WebCore::FilterFunction::supportedFilterRenderingModes(WebCore::FilterFunction *this)
{
  return 1;
}

uint64_t WebCore::FEBlend::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 48) != 2 || *(_BYTE *)(a1 + 48) != 2)
    return 0;
  result = CGColorSpaceEqualToColorSpace();
  if ((_DWORD)result)
    return *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64);
  return result;
}

const void **WebCore::FilterEffect::setOperatingColorSpace(const void **this, CFTypeRef *a2)
{
  return WTF::RetainPtr<CGColorSpace *>::operator=(this + 7, a2);
}

uint64_t WebCore::FEBlend::numberOfEffectInputs(WebCore::FEBlend *this)
{
  return 2;
}

uint64_t WebCore::FilterEffect::resultIsAlphaImage()
{
  return 0;
}

uint64_t WebCore::FilterEffect::resultIsValidPremultiplied(WebCore::FilterEffect *this)
{
  return 1;
}

uint64_t WebCore::FilterEffect::resultColorSpace(uint64_t a1)
{
  return a1 + 56;
}

void WebCore::FilterEffect::createAcceleratedApplier(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::FilterEffect::createGraphicsStyle(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[88] = 0;
}

void WebCore::FEColorMatrix::~FEColorMatrix(WebCore::FEColorMatrix *this, void *a2)
{
  WTF *v3;
  const void *v4;

  *(_QWORD *)this = off_1E3415018;
  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E34164C8;
  v4 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  WTF *v3;
  const void *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E3415018;
  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E34164C8;
  v4 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::FEColorMatrix::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  if (*(_BYTE *)(a2 + 48) != 3 || *(_BYTE *)(a1 + 48) != 3)
    return 0;
  result = CGColorSpaceEqualToColorSpace();
  if (!(_DWORD)result)
    return result;
  if (*(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64))
    return 0;
  v5 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 84))
    return 0;
  return memcmp(*(const void **)(a1 + 72), *(const void **)(a2 + 72), 4 * v5) == 0;
}

uint64_t WebCore::FilterEffect::numberOfEffectInputs(WebCore::FilterEffect *this)
{
  return 1;
}

void WebCore::FEComponentTransfer::~FEComponentTransfer(WebCore::FEComponentTransfer *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  const void *v7;

  *(_QWORD *)this = off_1E34150D0;
  v3 = (WTF *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 11);
  if (v6)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v6, a2);
  }
  *(_QWORD *)this = off_1E34164C8;
  v7 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  const void *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = off_1E34150D0;
  v3 = (WTF *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 11);
  if (v6)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v6, a2);
  }
  *(_QWORD *)this = off_1E34164C8;
  v7 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v8, v9);
}

BOOL WebCore::FEComponentTransfer::operator==(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 48) == 4
      && *(_BYTE *)(a1 + 48) == 4
      && CGColorSpaceEqualToColorSpace()
      && *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64)
      && *(float *)(a1 + 68) == *(float *)(a2 + 68)
      && *(float *)(a1 + 72) == *(float *)(a2 + 72)
      && *(float *)(a1 + 76) == *(float *)(a2 + 76)
      && *(float *)(a1 + 80) == *(float *)(a2 + 80)
      && *(float *)(a1 + 84) == *(float *)(a2 + 84)
      && WTF::operator==<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a1 + 88, a2 + 88)&& *(unsigned __int8 *)(a1 + 104) == *(unsigned __int8 *)(a2 + 104)&& *(float *)(a1 + 108) == *(float *)(a2 + 108)&& *(float *)(a1 + 112) == *(float *)(a2 + 112)&& *(float *)(a1 + 116) == *(float *)(a2 + 116)&& *(float *)(a1 + 120) == *(float *)(a2 + 120)&& *(float *)(a1 + 124) == *(float *)(a2 + 124)&& WTF::operator==<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a1 + 128, a2 + 128)&& *(unsigned __int8 *)(a1 + 144) == *(unsigned __int8 *)(a2 + 144)&& *(float *)(a1 + 148) == *(float *)(a2 + 148)&& *(float *)(a1 + 152) == *(float *)(a2 + 152)&& *(float *)(a1 + 156) == *(float *)(a2 + 156)&& *(float *)(a1 + 160) == *(float *)(a2 + 160)&& *(float *)(a1 + 164) == *(float *)(a2 + 164)&& WTF::operator==<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a1 + 168,
           a2 + 168)
      && *(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(a2 + 184)
      && *(float *)(a1 + 188) == *(float *)(a2 + 188)
      && *(float *)(a1 + 192) == *(float *)(a2 + 192)
      && *(float *)(a1 + 196) == *(float *)(a2 + 196)
      && *(float *)(a1 + 200) == *(float *)(a2 + 200)
      && *(float *)(a1 + 204) == *(float *)(a2 + 204)
      && WTF::operator==<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a1 + 208, a2 + 208);
}

void WebCore::FEComposite::~FEComposite(WebCore::FEComposite *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::FEComposite::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 48) != 5 || *(_BYTE *)(a1 + 48) != 5)
    return 0;
  result = CGColorSpaceEqualToColorSpace();
  if (!(_DWORD)result)
    return result;
  return *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64)
      && *(float *)(a1 + 68) == *(float *)(a2 + 68)
      && *(float *)(a1 + 72) == *(float *)(a2 + 72)
      && *(float *)(a1 + 76) == *(float *)(a2 + 76)
      && *(float *)(a1 + 80) == *(float *)(a2 + 80);
}

uint64_t WebCore::FEComposite::numberOfEffectInputs(WebCore::FEComposite *this)
{
  return 2;
}

BOOL WebCore::FEComposite::resultIsValidPremultiplied(WebCore::FEComposite *this)
{
  return *((_BYTE *)this + 64) != 6;
}

void WebCore::FEConvolveMatrix::~FEConvolveMatrix(WebCore::FEConvolveMatrix *this, void *a2)
{
  WTF *v3;
  const void *v4;

  *(_QWORD *)this = off_1E3415240;
  v3 = (WTF *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E34164C8;
  v4 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  WTF *v3;
  const void *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E3415240;
  v3 = (WTF *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E34164C8;
  v4 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v5, v6);
}

BOOL WebCore::FEConvolveMatrix::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v5;

  v2 = *(_BYTE *)(a2 + 48) == 6 && *(_BYTE *)(a1 + 48) == 6;
  if (v2
    && CGColorSpaceEqualToColorSpace()
    && (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64) ? (v5 = *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68)) : (v5 = 0),
        v5
     && *(float *)(a1 + 72) == *(float *)(a2 + 72)
     && *(float *)(a1 + 76) == *(float *)(a2 + 76)
     && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
     && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84)
     && *(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88)
     && *(float *)(a1 + 92) == *(float *)(a2 + 92)
     && *(float *)(a1 + 96) == *(float *)(a2 + 96)
     && *(unsigned __int8 *)(a1 + 100) == *(unsigned __int8 *)(a2 + 100)))
  {
    return WTF::operator==<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a1 + 104, a2 + 104);
  }
  else
  {
    return 0;
  }
}

void WebCore::FEDiffuseLighting::~FEDiffuseLighting(WebCore::FEDiffuseLighting *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  const void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E3415918;
  v3 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 8);
  if ((v4 & 0x8000000000000) != 0)
  {
    v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  *(_QWORD *)this = off_1E34164C8;
  v5 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  _DWORD *v3;
  uint64_t v4;
  const void *v5;
  WTF *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E3415918;
  v3 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 8);
  if ((v4 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  *(_QWORD *)this = off_1E34164C8;
  v5 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::FEDiffuseLighting::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48) == 7)
    return WebCore::FELighting::operator==(a1, a2);
  else
    return 0;
}

void WebCore::FEDisplacementMap::~FEDisplacementMap(WebCore::FEDisplacementMap *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::FEDisplacementMap::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 48) != 8 || *(_BYTE *)(a1 + 48) != 8)
    return 0;
  result = CGColorSpaceEqualToColorSpace();
  if (!(_DWORD)result)
    return result;
  return *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64)
      && *(unsigned __int8 *)(a1 + 65) == *(unsigned __int8 *)(a2 + 65)
      && *(float *)(a1 + 68) == *(float *)(a2 + 68);
}

uint64_t WebCore::FEDisplacementMap::numberOfEffectInputs(WebCore::FEDisplacementMap *this)
{
  return 2;
}

void WebCore::FEDropShadow::~FEDropShadow(WebCore::FEDropShadow *this, void *a2)
{
  uint64_t v3;
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E3415468;
  v3 = *((_QWORD *)this + 10);
  if ((v3 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  *(_QWORD *)this = off_1E34164C8;
  v4 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  uint64_t v3;
  const void *v4;
  WTF *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E3415468;
  v3 = *((_QWORD *)this + 10);
  if ((v3 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  *(_QWORD *)this = off_1E34164C8;
  v4 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::FEDropShadow::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 48) != 9 || *(_BYTE *)(a1 + 48) != 9)
    return 0;
  result = CGColorSpaceEqualToColorSpace();
  if (!(_DWORD)result)
    return result;
  if (*(float *)(a1 + 64) != *(float *)(a2 + 64)
    || *(float *)(a1 + 68) != *(float *)(a2 + 68)
    || *(float *)(a1 + 72) != *(float *)(a2 + 72)
    || *(float *)(a1 + 76) != *(float *)(a2 + 76))
  {
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a2 + 80);
  if ((v5 & 0x8000000000000) != 0)
  {
    if ((v6 & 0x8000000000000) != 0
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4))
    {
      if (*(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8))
        return 0;
      if (*(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC))
        return 0;
      if (*(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10))
        return 0;
      if (HIBYTE(v5) == HIBYTE(v6) && BYTE6(v5) == BYTE6(v6))
        return *(float *)(a1 + 88) == *(float *)(a2 + 88);
    }
    return 0;
  }
  result = 0;
  if (v5 == v6 && (v6 & 0x8000000000000) == 0)
    return *(float *)(a1 + 88) == *(float *)(a2 + 88);
  return result;
}

uint64_t WTF::streamSizedContainer<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;

  WTF::TextStream::operator<<();
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    WTF::TextStream::operator<<();
    if ((_DWORD)v4 == 1 || *(_DWORD *)(a1 + 32) == 1)
    {
      LODWORD(v4) = 1;
    }
    else
    {
      v6 = 4 * v4 - 4;
      v7 = 1;
      while (1)
      {
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        if (v7 + 1 == *(_DWORD *)(a1 + 32))
          break;
        ++v7;
        v6 -= 4;
        if (!v6)
          goto LABEL_12;
      }
      LODWORD(v4) = v7 + 1;
    }
LABEL_12:
    if (*(_DWORD *)(a2 + 12) != (_DWORD)v4)
      WTF::TextStream::operator<<();
  }
  return WTF::TextStream::operator<<();
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FEComponentTransfer::computeLookupTable(WebCore::ComponentTransferFunction const&)::$_2,void,WebCore::ComponentTransferFunction const&>::call(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  double v5;
  double v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  double v11;

  v2 = *(_DWORD *)(a2 + 36);
  if (v2)
  {
    v3 = 0;
    v4 = v2 - 1;
    v5 = (double)v4;
    do
    {
      v6 = (double)v3 / 255.0;
      v7 = (v6 * v5);
      v8 = *(_DWORD *)(a2 + 36);
      if (v8 <= v7 || (v4 >= v7 + 1 ? (v9 = v7 + 1) : (v9 = v4), v8 <= v9))
      {
        __break(0xC471u);
        JUMPOUT(0x196256898);
      }
      v10 = *(_QWORD *)(a2 + 24);
      v11 = *(float *)(v10 + 4 * v7);
      *(_BYTE *)(*(_QWORD *)(result + 8) + v3++) = (int)fmax(fmin((v11+ -((double)v7 - v6 * v5)* (*(float *)(v10 + 4 * v9) - v11))* 255.0, 255.0), 0.0);
    }
    while (v3 != 256);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FEComponentTransfer::computeLookupTable(WebCore::ComponentTransferFunction const&)::$_3,void,WebCore::ComponentTransferFunction const&>::call(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  v2 = *(_DWORD *)(a2 + 36);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      v5 = ((double)v3 / 255.0);
      if (v2 - 1 < v5)
        v5 = v2 - 1;
      if (*(_DWORD *)(a2 + 36) <= v5)
        break;
      *(_BYTE *)(*(_QWORD *)(result + 8) + v4++) = (int)fmax(fmin((float)(*(float *)(*(_QWORD *)(a2 + 24) + 4 * v5) * 255.0), 255.0), 0.0);
      v3 += v2;
      if (v4 == 256)
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FEComponentTransfer::computeLookupTable(WebCore::ComponentTransferFunction const&)::$_4,void,WebCore::ComponentTransferFunction const&>::call(uint64_t result, uint64_t a2)
{
  uint64_t i;

  for (i = 0; i != 256; ++i)
    *(_BYTE *)(*(_QWORD *)(result + 8) + i) = (int)fmax(fmin((float)((float)(*(float *)(a2 + 8) * 255.0)+ (float)(*(float *)(a2 + 4) * (float)i)), 255.0), 0.0);
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::FEComponentTransfer::computeLookupTable(WebCore::ComponentTransferFunction const&)::$_5,void,WebCore::ComponentTransferFunction const&>::call(uint64_t a1, float *a2)
{
  uint64_t i;

  for (i = 0; i != 256; ++i)
    *(_BYTE *)(*(_QWORD *)(a1 + 8) + i) = (int)fmax(fmin((a2[5] + a2[3] * pow((double)i / 255.0, a2[4])) * 255.0, 255.0), 0.0);
}

void WebCore::FEFlood::create(uint64_t *a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>)
{
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v8 = WTF::fastMalloc((WTF *)0x50);
  v9 = *a2;
  if (v9)
  {
    CFRetain(v9);
    CFRetain(v9);
  }
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_19689B170;
  *(_QWORD *)(v10 + 24) = v8;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_BYTE *)(v8 + 48) = 10;
  *(_QWORD *)v8 = off_1E34164C8;
  *(_QWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 56) = v9;
  if (v9)
  {
    CFRetain(v9);
    CFRelease(v9);
  }
  *(_QWORD *)v8 = off_1E34156F0;
  v11 = *a1;
  *(_QWORD *)(v8 + 64) = *a1;
  if ((v11 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  *(float *)(v8 + 72) = a4;
  *a3 = v8;
  if (v9)
    CFRelease(v9);
}

uint64_t WebCore::FEFlood::setFloodColor(WebCore::FEFlood *this, const WebCore::Color *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  _BOOL4 v19;
  const WebCore::Color *v20;
  const WebCore::Color *v21;
  WebCore::FEFlood *v22;
  WebCore::FEFlood *v23;
  float v24[4];
  float v25[4];

  v2 = *((_QWORD *)this + 8);
  v3 = *(_QWORD *)a2;
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0)
      goto LABEL_6;
    v21 = a2;
    v23 = this;
    v12 = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 8);
    v13 = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 0xC);
    v14 = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 0x10);
    v15 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    v16 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 8);
    v17 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC);
    v18 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10);
    if (*(float *)((v2 & 0xFFFFFFFFFFFFLL) + 4) != v15
      || v12 != v16
      || v13 != v17
      || v14 != v18
      || HIBYTE(v2) != HIBYTE(v3)
      || BYTE6(v2) != BYTE6(v3))
    {
      v25[0] = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
      v25[1] = v12;
      v25[2] = v13;
      v25[3] = v14;
      v24[0] = v15;
      v24[1] = v16;
      v24[2] = v17;
      v24[3] = v18;
      v19 = WebCore::operator==<float,4ul>(v25, v24);
      v2 = *((_QWORD *)v23 + 8);
      if (v19 && HIBYTE(v2) == HIBYTE(*(_QWORD *)v21))
      {
        a2 = v21;
        this = v23;
        if (BYTE6(v2) == BYTE6(*(_QWORD *)v21))
          return 1;
      }
      else
      {
        a2 = v21;
        this = v23;
      }
      goto LABEL_6;
    }
    return 0;
  }
  if (v2 == v3 && (v3 & 0x8000000000000) == 0)
    return 0;
LABEL_6:
  if ((v2 & 0x8000000000000) != 0)
  {
    v20 = a2;
    v22 = this;
    v9 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
      a2 = v20;
      this = v22;
    }
  }
  v5 = *(_QWORD *)a2;
  *((_QWORD *)this + 8) = *(_QWORD *)a2;
  if ((v5 & 0x8000000000000) == 0)
    return 1;
  v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
  result = 1;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  return result;
}

float32_t WebCore::FEFlood::calculateImageRect(int a1, uint64_t a2, const WebCore::FloatRect *a3, int a4, float32x2_t *this)
{
  return WebCore::intersection(this, (float32x2_t *)(a2 + 60), a3);
}

_QWORD *WebCore::FEFlood::createSoftwareApplier@<X0>(WebCore::FEFlood *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416940;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FEFlood::externalRepresentation(uint64_t a1, WTF::TextStream *this, int a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  WebCore::serializationForRenderTreeAsText((WebCore *)(a1 + 64), (uint64_t *)&v9);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::FEGaussianBlur::create(char a1@<W0>, const void **a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  uint64_t v10;
  const void *v11;
  uint64_t v12;

  v10 = WTF::fastMalloc((WTF *)0x50);
  v11 = *a2;
  if (v11)
  {
    CFRetain(v11);
    CFRetain(v11);
  }
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_19689B170;
  *(_QWORD *)(v12 + 24) = v10;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_BYTE *)(v10 + 48) = 11;
  *(_QWORD *)v10 = off_1E34164C8;
  *(_QWORD *)(v10 + 8) = v12;
  *(_QWORD *)(v10 + 56) = v11;
  if (v11)
  {
    CFRetain(v11);
    CFRelease(v11);
    *(_QWORD *)v10 = off_1E34157A8;
    *(float *)(v10 + 64) = a4;
    *(float *)(v10 + 68) = a5;
    *(_BYTE *)(v10 + 72) = a1;
    CFRelease(v11);
  }
  else
  {
    *(_QWORD *)v10 = off_1E34157A8;
    *(float *)(v10 + 64) = a4;
    *(float *)(v10 + 68) = a5;
    *(_BYTE *)(v10 + 72) = a1;
  }
  *a3 = v10;
}

uint64_t WebCore::FEGaussianBlur::calculateUnscaledKernelSize(float a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1 == 0.0)
  {
    v2 = 0;
  }
  else
  {
    LODWORD(v2) = vcvtms_u32_f32((float)(a1 * 1.88) + 0.5);
    if (v2 <= 2)
      LODWORD(v2) = 2;
    if (v2 >= 0x1F4)
      v2 = 500;
    else
      v2 = v2;
  }
  if (a2 == 0.0)
  {
    v4 = 0;
  }
  else
  {
    LODWORD(v3) = vcvtms_u32_f32((float)(a2 * 1.88) + 0.5);
    if (v3 <= 2)
      LODWORD(v3) = 2;
    if (v3 >= 0x1F4)
      v3 = 500;
    else
      v3 = v3;
    v4 = v3 << 32;
  }
  return v4 | v2;
}

uint64_t WebCore::FEGaussianBlur::calculateKernelSize(WebCore::Filter *a1, float a2, float a3)
{
  __int32 v4;
  float v5;
  float v6;
  unint64_t v8;

  v8 = __PAIR64__(LODWORD(a3), LODWORD(a2));
  LODWORD(v8) = (*(float (**)(WebCore::Filter *, unint64_t *))(*(_QWORD *)a1 + 80))(a1, &v8);
  HIDWORD(v8) = v4;
  LODWORD(v5) = WebCore::Filter::scaledByFilterScale(a1, (float32x2_t *)&v8).u32[0];
  return WebCore::FEGaussianBlur::calculateUnscaledKernelSize(v5, v6);
}

unint64_t WebCore::FEGaussianBlur::calculateOutsetSize(float a1, float a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;

  if (a1 == 0.0)
  {
    v3 = 0;
  }
  else
  {
    v2 = vcvtms_u32_f32((float)(a1 * 1.88) + 0.5);
    if (v2 <= 2)
      v2 = 2;
    if (v2 >= 0x1F4)
      v2 = 500;
    v3 = (3 * v2) >> 1;
  }
  if (a2 == 0.0)
  {
    v5 = 0;
  }
  else
  {
    v4 = vcvtms_u32_f32((float)(a2 * 1.88) + 0.5);
    if (v4 <= 2)
      v4 = 2;
    if (v4 >= 0x1F4)
      v4 = 500;
    v5 = (unint64_t)((3 * v4) >> 1) << 32;
  }
  return v5 | v3;
}

void WebCore::FEGaussianBlur::calculateImageRect(uint64_t a1, WebCore::Filter *a2, __int128 *a3, uint64_t a4, float32x2_t *a5)
{
  float v7;
  float v8;
  float32x2_t v9;
  uint64_t v10;
  _QWORD v11[2];
  __int128 v12;
  int v13;

  if (a4)
  {
    v12 = *a3;
    if (*(_BYTE *)(a1 + 72) == 3)
    {
      v11[0] = *(_QWORD *)(a1 + 64);
      v7 = (*(float (**)(WebCore::Filter *, _QWORD *))(*(_QWORD *)a2 + 80))(a2, v11);
      v9 = vmul_f32(vcvt_f32_s32(vmul_s32((int32x2_t)WebCore::FEGaussianBlur::calculateUnscaledKernelSize(v7, v8), (int32x2_t)0x300000003)), (float32x2_t)0x3F0000003F000000);
      *(float *)&v12 = *(float *)&v12 - v9.f32[0];
      *((float *)&v12 + 1) = *((float *)&v12 + 1) - v9.f32[1];
      *((float32x2_t *)&v12 + 1) = vadd_f32(v9, vadd_f32(*(float32x2_t *)((char *)&v12 + 8), v9));
      WebCore::Filter::clipToMaxEffectRect(a2, (float32x2_t *)&v12, a5);
    }
    else
    {
      v11[0] = WebCore::enclosingIntRect((WebCore *)&v12, a2);
      v11[1] = v10;
      WebCore::FloatRect::FloatRect((float *)&v13, (int *)v11);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t WebCore::FEGaussianBlur::resultIsAlphaImage(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (a2[3])
    return *(unsigned __int8 *)(**(_QWORD **)a2 + 52);
  __break(0xC471u);
  return result;
}

uint64_t WebCore::FEGaussianBlur::supportedFilterRenderingModes(WebCore::FEGaussianBlur *this)
{
  return 1;
}

void WebCore::FEGaussianBlur::createAcceleratedApplier(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *WebCore::FEGaussianBlur::createSoftwareApplier@<X0>(WebCore::FEGaussianBlur *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416968;
  result[1] = this;
  *a2 = result;
  return result;
}

void WebCore::FEGaussianBlur::createGraphicsStyle(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v10 = *(_QWORD *)(a1 + 64);
  v4 = (*(float (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v10);
  v6 = 0.0;
  v7 = 0.0;
  if (v4 != 0.0)
  {
    v8 = vcvtms_u32_f32((float)(v4 * 1.88) + 0.5);
    if (v8 <= 2)
      v8 = 2;
    if (v8 >= 0x1F4)
      v8 = 500;
    v7 = (float)(int)v8;
  }
  if (v5 != 0.0)
  {
    v9 = vcvtms_u32_f32((float)(v5 * 1.88) + 0.5);
    if (v9 <= 2)
      v9 = 2;
    if (v9 >= 0x1F4)
      v9 = 500;
    v6 = (float)(int)v9;
  }
  *(float *)a3 = v7;
  *(float *)(a3 + 4) = v6;
  *(_DWORD *)(a3 + 80) = 1;
  *(_BYTE *)(a3 + 88) = 1;
}

WTF::TextStream *WebCore::FEGaussianBlur::externalRepresentation(int a1, WTF::TextStream *this, int a3)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return this;
}

uint64_t WebCore::FEImage::create@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, _WORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x80);
  result = WebCore::FEImage::FEImage(v8, a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t WebCore::FEImage::FEImage(uint64_t a1, uint64_t a2, _OWORD *a3, _WORD *a4)
{
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  char **v15;
  char *v16;

  v8 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v8 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v9 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_19689B170;
  *(_QWORD *)(v10 + 24) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 12;
  *(_QWORD *)a1 = off_1E34164C8;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    CFRetain(v9);
    CFRelease(v9);
  }
  *(_QWORD *)a1 = off_1E3415860;
  *(_BYTE *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = -1;
  v11 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal_1[v11])(&v16, a1 + 64, a2);
    *(_DWORD *)(a1 + 72) = v11;
  }
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_DWORD *)(a1 + 88) = -1;
    v12 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal_1[v12])(&v16);
      *(_DWORD *)(a1 + 88) = v12;
    }
    *(_BYTE *)(a1 + 96) = 1;
  }
  *(_OWORD *)(a1 + 104) = *a3;
  *(_WORD *)(a1 + 120) = *a4;
  return a1;
}

float32_t WebCore::FEImage::calculateImageRect(uint64_t a1, uint64_t a2, const WebCore::FloatRect *a3, int a4, float32x2_t *this)
{
  int v7;
  uint64_t v8;
  BOOL v9;
  __int128 v11;
  float32_t result;
  __int128 v13;
  __int128 v14;

  v7 = *(_DWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 64);
  if (v7)
    v9 = 1;
  else
    v9 = v8 == 0;
  if (v9)
  {
    result = 0.0;
    if (v7 == 1 && v8 != 0)
      return WebCore::intersection(this, (float32x2_t *)(a2 + 60), a3);
  }
  else
  {
    v11 = *(_OWORD *)this->f32;
    v13 = *(_OWORD *)(a1 + 104);
    v14 = v11;
    WebCore::SVGPreserveAspectRatioValue::transformRect((WebCore::SVGPreserveAspectRatioValue *)(a1 + 120), (WebCore::FloatRect *)&v14, (WebCore::FloatRect *)&v13, *(float *)&v13);
    return WebCore::Filter::clipToMaxEffectRect((WebCore::Filter *)a2, (float32x2_t *)&v14, this);
  }
  return result;
}

_QWORD *WebCore::FEImage::createSoftwareApplier@<X0>(WebCore::FEImage *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416990;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FEImage::externalRepresentation(int a1, WTF::TextStream *this, int a3)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return this;
}

uint64_t WebCore::FELighting::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48) || !CGColorSpaceEqualToColorSpace())
    return 0;
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a2 + 64);
  if ((v4 & 0x8000000000000) != 0)
  {
    if ((v5 & 0x8000000000000) == 0
      || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v4) != HIBYTE(v5)
      || BYTE6(v4) != BYTE6(v5))
    {
      return 0;
    }
  }
  else if (v4 != v5 || (v5 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if (*(float *)(a1 + 72) == *(float *)(a2 + 72)
    && *(float *)(a1 + 76) == *(float *)(a2 + 76)
    && *(float *)(a1 + 80) == *(float *)(a2 + 80)
    && *(float *)(a1 + 84) == *(float *)(a2 + 84)
    && *(float *)(a1 + 88) == *(float *)(a2 + 88)
    && *(float *)(a1 + 92) == *(float *)(a2 + 92))
  {
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 96));
  }
  return 0;
}

float32_t WebCore::FELighting::calculateImageRect(int a1, uint64_t a2, const WebCore::FloatRect *a3, int a4, float32x2_t *this)
{
  return WebCore::intersection(this, (float32x2_t *)(a2 + 60), a3);
}

_QWORD *WebCore::FELighting::createSoftwareApplier@<X0>(WebCore::FELighting *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416A08;
  result[1] = this;
  *a2 = result;
  return result;
}

void WebCore::FEMerge::create(int a1@<W0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  const void *v7;
  uint64_t v8;

  v6 = WTF::fastMalloc((WTF *)0x48);
  v7 = *a2;
  if (v7)
  {
    CFRetain(v7);
    CFRetain(v7);
  }
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = v6;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_BYTE *)(v6 + 48) = 13;
  *(_QWORD *)v6 = off_1E34164C8;
  *(_QWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 56) = v7;
  if (v7)
  {
    CFRetain(v7);
    CFRelease(v7);
    *(_QWORD *)v6 = off_1E34159D0;
    *(_DWORD *)(v6 + 64) = a1;
    CFRelease(v7);
  }
  else
  {
    *(_QWORD *)v6 = off_1E34159D0;
    *(_DWORD *)(v6 + 64) = a1;
  }
  *a3 = v6;
}

_QWORD *WebCore::FEMerge::createSoftwareApplier@<X0>(WebCore::FEMerge *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416A38;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FEMerge::externalRepresentation(int a1, WTF::TextStream *this, int a3)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::FEMorphology::create(char a1@<W0>, const void **a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  uint64_t v10;
  const void *v11;
  uint64_t v12;

  v10 = WTF::fastMalloc((WTF *)0x50);
  v11 = *a2;
  if (v11)
  {
    CFRetain(v11);
    CFRetain(v11);
  }
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_19689B170;
  *(_QWORD *)(v12 + 24) = v10;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_BYTE *)(v10 + 48) = 14;
  *(_QWORD *)v10 = off_1E34164C8;
  *(_QWORD *)(v10 + 8) = v12;
  *(_QWORD *)(v10 + 56) = v11;
  if (v11)
  {
    CFRetain(v11);
    CFRelease(v11);
  }
  *(_QWORD *)v10 = off_1E3415A88;
  *(_BYTE *)(v10 + 64) = a1;
  *(float *)(v10 + 68) = fmaxf(a4, 0.0);
  *(float *)(v10 + 72) = fmaxf(a5, 0.0);
  *a3 = v10;
  if (v11)
    CFRelease(v11);
}

void WebCore::FEMorphology::calculateImageRect(uint64_t a1, WebCore::Filter *a2, __int128 *a3, uint64_t a4, float32x2_t *a5)
{
  float32x2_t v7;
  float32_t v8;
  uint64_t v9;
  __int128 v10;

  if (a4)
  {
    v10 = *a3;
    v9 = *(_QWORD *)(a1 + 68);
    v7.f32[0] = (*(float (**)(WebCore::Filter *, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v9);
    *(float *)&v10 = *(float *)&v10 - v7.f32[0];
    *((float *)&v10 + 1) = *((float *)&v10 + 1) - v8;
    v7.f32[1] = v8;
    *((float32x2_t *)&v10 + 1) = vadd_f32(v7, vadd_f32(v7, *(float32x2_t *)((char *)&v10 + 8)));
    WebCore::Filter::clipToMaxEffectRect(a2, (float32x2_t *)&v10, a5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t WebCore::FEMorphology::resultIsAlphaImage(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (a2[3])
    return *(unsigned __int8 *)(**(_QWORD **)a2 + 52);
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::FEMorphology::createSoftwareApplier@<X0>(WebCore::FEMorphology *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416A60;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FEMorphology::externalRepresentation(uint64_t a1, WTF::TextStream *this, int a3)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  if ((unint64_t)*(char *)(a1 + 64) <= 2)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::FEOffset::create(const void **a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  uint64_t v8;
  const void *v9;
  uint64_t v10;

  v8 = WTF::fastMalloc((WTF *)0x48);
  v9 = *a1;
  if (v9)
  {
    CFRetain(v9);
    CFRetain(v9);
  }
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_19689B170;
  *(_QWORD *)(v10 + 24) = v8;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_BYTE *)(v8 + 48) = 15;
  *(_QWORD *)v8 = off_1E34164C8;
  *(_QWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 56) = v9;
  if (v9)
  {
    CFRetain(v9);
    CFRelease(v9);
    *(_QWORD *)v8 = off_1E3415B40;
    *(float *)(v8 + 64) = a3;
    *(float *)(v8 + 68) = a4;
    CFRelease(v9);
  }
  else
  {
    *(_QWORD *)v8 = off_1E3415B40;
    *(float *)(v8 + 64) = a3;
    *(float *)(v8 + 68) = a4;
  }
  *a2 = v8;
}

void WebCore::FEOffset::calculateImageRect(uint64_t a1, WebCore::Filter *a2, __int128 *a3, uint64_t a4, float32x2_t *a5)
{
  float v7;
  float v8;
  uint64_t v9;
  __int128 v10;

  if (a4)
  {
    v10 = *a3;
    v9 = *(_QWORD *)(a1 + 64);
    v7 = (*(float (**)(WebCore::Filter *, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v9);
    *(float *)&v10 = v7 + *(float *)&v10;
    *((float *)&v10 + 1) = v8 + *((float *)&v10 + 1);
    WebCore::Filter::clipToMaxEffectRect(a2, (float32x2_t *)&v10, a5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t WebCore::FEOffset::resultIsAlphaImage(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (a2[3])
    return *(unsigned __int8 *)(**(_QWORD **)a2 + 52);
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::FEOffset::createSoftwareApplier@<X0>(WebCore::FEOffset *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416A88;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FEOffset::externalRepresentation(int a1, WTF::TextStream *this, int a3)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::FESpecularLighting::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, const void **a3@<X2>, uint64_t *a4@<X8>, float a5@<S0>, float a6@<S1>, float a7@<S2>, float a8@<S3>, float a9@<S4>)
{
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  CFTypeRef v21;

  v18 = WTF::fastMalloc((WTF *)0x68);
  v19 = v18;
  v20 = *a3;
  v21 = v20;
  if (v20)
  {
    CFRetain(v20);
    WebCore::FESpecularLighting::FESpecularLighting(v19, a1, a2, &v21, a5, a6, a7, a8, a9);
    CFRelease(v20);
  }
  else
  {
    WebCore::FESpecularLighting::FESpecularLighting(v18, a1, a2, &v21, a5, a6, a7, a8, a9);
  }
  *a4 = v19;
}

uint64_t WebCore::FESpecularLighting::FESpecularLighting(uint64_t a1, uint64_t *a2, uint64_t *a3, CFTypeRef *a4, float a5, float a6, float a7, float a8, float a9)
{
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  unsigned int *v24;
  unsigned int v25;

  v17 = *a4;
  if (*a4)
  {
    CFRetain(*a4);
    CFRetain(v17);
  }
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v18 = 0;
  *(_OWORD *)(v18 + 8) = xmmword_19689B170;
  *(_QWORD *)(v18 + 24) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 16;
  *(_QWORD *)a1 = off_1E34164C8;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 56) = v17;
  if (v17)
  {
    CFRetain(v17);
    CFRelease(v17);
  }
  *(_QWORD *)a1 = off_1E3415918;
  v19 = *a2;
  *(_QWORD *)(a1 + 64) = *a2;
  if ((v19 & 0x8000000000000) != 0)
  {
    v24 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  *(float *)(a1 + 72) = a5;
  v20 = 0.0;
  if (a6 >= 0.0)
    v20 = a6;
  v21 = 1.0;
  if (a7 > 1.0)
    v21 = a7;
  *(_DWORD *)(a1 + 76) = 0;
  if (a7 >= 128.0)
    v21 = 128.0;
  *(float *)(a1 + 80) = v20;
  *(float *)(a1 + 84) = v21;
  *(float *)(a1 + 88) = a8;
  *(float *)(a1 + 92) = a9;
  v22 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 96) = v22;
  if (v17)
    CFRelease(v17);
  *(_QWORD *)a1 = off_1E3415BF8;
  return a1;
}

WTF::TextStream *WebCore::FESpecularLighting::externalRepresentation(int a1, WTF::TextStream *this, int a3)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::FEFlood::~FEFlood(WebCore::FEFlood *this, void *a2)
{
  uint64_t v3;
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E34156F0;
  v3 = *((_QWORD *)this + 8);
  if ((v3 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  *(_QWORD *)this = off_1E34164C8;
  v4 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  uint64_t v3;
  const void *v4;
  WTF *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E34156F0;
  v3 = *((_QWORD *)this + 8);
  if ((v3 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  *(_QWORD *)this = off_1E34164C8;
  v4 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::FEFlood::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 48) != 10 || *(_BYTE *)(a1 + 48) != 10)
    return 0;
  result = CGColorSpaceEqualToColorSpace();
  if (!(_DWORD)result)
    return result;
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a2 + 64);
  if ((v5 & 0x8000000000000) != 0)
  {
    if ((v6 & 0x8000000000000) != 0
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v5) == HIBYTE(v6)
      && BYTE6(v5) == BYTE6(v6))
    {
      return *(float *)(a1 + 72) == *(float *)(a2 + 72);
    }
    return 0;
  }
  result = 0;
  if (v5 == v6 && (v6 & 0x8000000000000) == 0)
    return *(float *)(a1 + 72) == *(float *)(a2 + 72);
  return result;
}

uint64_t WebCore::FEFlood::numberOfEffectInputs(WebCore::FEFlood *this)
{
  return 0;
}

void WebCore::FEGaussianBlur::~FEGaussianBlur(WebCore::FEGaussianBlur *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::FEGaussianBlur::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 48) != 11 || *(_BYTE *)(a1 + 48) != 11)
    return 0;
  result = CGColorSpaceEqualToColorSpace();
  if (!(_DWORD)result)
    return result;
  if (*(float *)(a1 + 64) != *(float *)(a2 + 64) || *(float *)(a1 + 68) != *(float *)(a2 + 68))
    return 0;
  return *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72);
}

void WebCore::FEImage::~FEImage(WebCore::FEImage *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  char v6;
  char v7;

  if (*((_BYTE *)this + 96))
  {
    v3 = *((unsigned int *)this + 22);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E3415CA0[v3])(&v6, (char *)this + 80);
    *((_DWORD *)this + 22) = -1;
  }
  v4 = *((unsigned int *)this + 18);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3415CA0[v4])(&v7, (char *)this + 64);
  *((_DWORD *)this + 18) = -1;
  *(_QWORD *)this = off_1E34164C8;
  v5 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  WTF *v6;
  void *v7;
  char v8;
  char v9;

  if (*((_BYTE *)this + 96))
  {
    v3 = *((unsigned int *)this + 22);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E3415CA0[v3])(&v8, (char *)this + 80);
    *((_DWORD *)this + 22) = -1;
  }
  v4 = *((unsigned int *)this + 18);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3415CA0[v4])(&v9, (char *)this + 64);
  *((_DWORD *)this + 18) = -1;
  *(_QWORD *)this = off_1E34164C8;
  v5 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::FEImage::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char *v9;

  if (*(_BYTE *)(a2 + 48) != 12 || *(_BYTE *)(a1 + 48) != 12)
    return 0;
  result = CGColorSpaceEqualToColorSpace();
  if (!(_DWORD)result)
    return result;
  v5 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v5 == -1
    || (v9 = &v8,
        v6 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11SourceImage15imageIdentifierEvE3__0JZNKS9_15imageIdentifierEvE3__1ZNKS9_15imageIdentifierEvE3__2EEEEEJRKNS0_6__implIJNS6_3RefINS8_11NativeImageENS6_12RawPtrTraitsISH_EENS6_21DefaultRefDerefTraitsISH_EEEENSG_INS8_11ImageBufferENSI_ISN_EENSK_ISN_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v9, a1 + 64), v7 = *(unsigned int *)(a2 + 72), (_DWORD)v7 == -1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1962586BCLL);
  }
  v9 = &v8;
  if (v6 != ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11SourceImage15imageIdentifierEvE3__0JZNKS9_15imageIdentifierEvE3__1ZNKS9_15imageIdentifierEvE3__2EEEEEJRKNS0_6__implIJNS6_3RefINS8_11NativeImageENS6_12RawPtrTraitsISH_EENS6_21DefaultRefDerefTraitsISH_EEEENSG_INS8_11ImageBufferENSI_ISN_EENSK_ISN_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v9, a2 + 64))return 0;
  result = 0;
  if (*(float *)(a1 + 104) == *(float *)(a2 + 104) && *(float *)(a1 + 108) == *(float *)(a2 + 108))
  {
    result = 0;
    if (*(float *)(a1 + 112) == *(float *)(a2 + 112) && *(float *)(a1 + 116) == *(float *)(a2 + 116))
    {
      if (*(unsigned __int8 *)(a1 + 120) == *(unsigned __int8 *)(a2 + 120))
        return *(unsigned __int8 *)(a1 + 121) == *(unsigned __int8 *)(a2 + 121);
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::FEImage::numberOfEffectInputs(WebCore::FEImage *this)
{
  return 0;
}

void WebCore::FELighting::~FELighting(WebCore::FELighting *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  const void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E3415918;
  v3 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 8);
  if ((v4 & 0x8000000000000) != 0)
  {
    v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  *(_QWORD *)this = off_1E34164C8;
  v5 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  _DWORD *v3;
  uint64_t v4;
  const void *v5;
  WTF *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E3415918;
  v3 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 8);
  if ((v4 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  *(_QWORD *)this = off_1E34164C8;
  v5 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v6, v7);
}

void WebCore::FEMerge::~FEMerge(WebCore::FEMerge *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::FEMerge::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 48) != 13 || *(_BYTE *)(a1 + 48) != 13)
    return 0;
  result = CGColorSpaceEqualToColorSpace();
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64);
  return result;
}

uint64_t WebCore::FEMerge::numberOfEffectInputs(WebCore::FEMerge *this)
{
  return *((unsigned int *)this + 16);
}

void WebCore::FEMorphology::~FEMorphology(WebCore::FEMorphology *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::FEMorphology::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 48) != 14 || *(_BYTE *)(a1 + 48) != 14)
    return 0;
  result = CGColorSpaceEqualToColorSpace();
  if (!(_DWORD)result)
    return result;
  return *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64)
      && *(float *)(a1 + 68) == *(float *)(a2 + 68)
      && *(float *)(a1 + 72) == *(float *)(a2 + 72);
}

void WebCore::FEOffset::~FEOffset(WebCore::FEOffset *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::FEOffset::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 48) != 15 || *(_BYTE *)(a1 + 48) != 15)
    return 0;
  result = CGColorSpaceEqualToColorSpace();
  if (!(_DWORD)result)
    return result;
  if (*(float *)(a1 + 64) != *(float *)(a2 + 64))
    return 0;
  return *(float *)(a1 + 68) == *(float *)(a2 + 68);
}

void WebCore::FESpecularLighting::~FESpecularLighting(WebCore::FESpecularLighting *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  const void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E3415918;
  v3 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 8);
  if ((v4 & 0x8000000000000) != 0)
  {
    v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  *(_QWORD *)this = off_1E34164C8;
  v5 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  _DWORD *v3;
  uint64_t v4;
  const void *v5;
  WTF *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E3415918;
  v3 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 8);
  if ((v4 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  *(_QWORD *)this = off_1E34164C8;
  v5 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::FESpecularLighting::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48) == 16)
    return WebCore::FELighting::operator==(a1, a2);
  else
    return 0;
}

void WebCore::FETile::create(const void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x40);
  v5 = *a1;
  if (v5)
  {
    CFRetain(v5);
    CFRetain(v5);
  }
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_19689B170;
  *(_QWORD *)(v6 + 24) = v4;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_BYTE *)(v4 + 48) = 17;
  *(_QWORD *)v4 = off_1E34164C8;
  *(_QWORD *)(v4 + 8) = v6;
  *(_QWORD *)(v4 + 56) = v5;
  if (v5)
  {
    CFRetain(v5);
    CFRelease(v5);
    *(_QWORD *)v4 = off_1E3415CF8;
    CFRelease(v5);
  }
  else
  {
    *(_QWORD *)v4 = off_1E3415CF8;
  }
  *a2 = v4;
}

float32_t WebCore::FETile::calculateImageRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t *a5)
{
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  int8x8_t v9;

  v5 = *(float32x2_t *)(a2 + 60);
  v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v5, *a5), (int8x8_t)v5, (int8x8_t)*a5);
  v7 = vadd_f32(*a5, a5[1]);
  v8 = vadd_f32(v5, *(float32x2_t *)(a2 + 68));
  v9 = vmvn_s8((int8x8_t)vcge_f32(v6, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v8), (int8x8_t)v8, (int8x8_t)v7)));
  if ((v9.i32[0] & v9.i32[1] & 1) == 0)
    v6.i32[0] = 0;
  return v6.f32[0];
}

uint64_t WebCore::FETile::resultIsAlphaImage(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (a2[3])
    return *(unsigned __int8 *)(**(_QWORD **)a2 + 52);
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::FETile::createSoftwareApplier@<X0>(WebCore::FETile *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416B10;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FETile::externalRepresentation(int a1, WTF::TextStream *this, int a3)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  return this;
}

WTF::TextStream *WebCore::FilterEffect::externalRepresentation(int a1, WTF::TextStream *this, int a3)
{
  uint64_t v4;
  WTF::TextStream *v5;

  if (a3 == 1)
  {
    ++*((_DWORD *)this + 6);
    WTF::TextStream::startGroup(this);
    WTF::TextStream::operator<<();
    v4 = WTF::TextStream::operator<<();
    WebCore::operator<<(v4);
    WTF::TextStream::endGroup(this);
    v5 = (WTF::TextStream *)WTF::TextStream::operator<<();
    WTF::TextStream::writeIndent(v5);
    --*((_DWORD *)this + 6);
  }
  return this;
}

void WebCore::FETurbulence::create(char a1@<W0>, int a2@<W1>, char a3@<W2>, const void **a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>, float a7@<S1>, float a8@<S2>)
{
  uint64_t v16;
  const void *v17;
  uint64_t v18;

  v16 = WTF::fastMalloc((WTF *)0x58);
  v17 = *a4;
  if (v17)
  {
    CFRetain(v17);
    CFRetain(v17);
  }
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v18 = 0;
  *(_OWORD *)(v18 + 8) = xmmword_19689B170;
  *(_QWORD *)(v18 + 24) = v16;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_BYTE *)(v16 + 48) = 18;
  *(_QWORD *)v16 = off_1E34164C8;
  *(_QWORD *)(v16 + 8) = v18;
  *(_QWORD *)(v16 + 56) = v17;
  if (v17)
  {
    CFRetain(v17);
    CFRelease(v17);
  }
  *(_QWORD *)v16 = off_1E3415DB0;
  *(_BYTE *)(v16 + 64) = a1;
  *(float *)(v16 + 68) = a6;
  *(float *)(v16 + 72) = a7;
  *(_DWORD *)(v16 + 76) = a2;
  *(float *)(v16 + 80) = a8;
  *(_BYTE *)(v16 + 84) = a3;
  *a5 = v16;
  if (v17)
    CFRelease(v17);
}

uint64_t WebCore::FilterEffect::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
    return CGColorSpaceEqualToColorSpace();
  else
    return 0;
}

float32_t WebCore::FETurbulence::calculateImageRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t *a5)
{
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  int8x8_t v9;

  v5 = *(float32x2_t *)(a2 + 60);
  v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v5, *a5), (int8x8_t)v5, (int8x8_t)*a5);
  v7 = vadd_f32(*a5, a5[1]);
  v8 = vadd_f32(v5, *(float32x2_t *)(a2 + 68));
  v9 = vmvn_s8((int8x8_t)vcge_f32(v6, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v8), (int8x8_t)v8, (int8x8_t)v7)));
  if ((v9.i32[0] & v9.i32[1] & 1) == 0)
    v6.i32[0] = 0;
  return v6.f32[0];
}

_QWORD *WebCore::FETurbulence::createSoftwareApplier@<X0>(WebCore::FETurbulence *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416B38;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::FETurbulence::externalRepresentation(uint64_t a1, WTF::TextStream *this, int a3)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WebCore::FilterEffect::externalRepresentation(a1, this, a3);
  WTF::TextStream::operator<<();
  if ((unint64_t)*(char *)(a1 + 64) <= 2)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return this;
}

uint64_t WebCore::Filter::Filter(uint64_t a1, char a2, _QWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_19689B170;
  *(_QWORD *)(v12 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 48) = a2;
  *(_QWORD *)a1 = off_1E3415E68;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 49) = 1;
  *(_QWORD *)(a1 + 52) = *a3;
  *(_OWORD *)(a1 + 60) = *a4;
  return a1;
}

float32x2_t WebCore::Filter::scaledByFilterScale(WebCore::Filter *this, float32x2_t *a2)
{
  return vmul_f32(*a2, *(float32x2_t *)((char *)this + 52));
}

float32_t WebCore::Filter::scaledByFilterScale(WebCore::Filter *this, float32x4_t *a2)
{
  double v2;
  float32x4_t v4;

  v4 = *a2;
  HIDWORD(v2) = v4.i32[1];
  LODWORD(v2) = *((_DWORD *)this + 13);
  WebCore::FloatRect::scale(&v4, v2, *((float *)this + 14));
  return v4.f32[0];
}

float32_t WebCore::intersection(float32x2_t *this, float32x2_t *a2, const WebCore::FloatRect *a3)
{
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  int8x8_t v6;

  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, *this), (int8x8_t)*a2, (int8x8_t)*this);
  v4 = vadd_f32(*this, this[1]);
  v5 = vadd_f32(*a2, a2[1]);
  v6 = vmvn_s8((int8x8_t)vcge_f32(v3, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v4, v5), (int8x8_t)v5, (int8x8_t)v4)));
  if ((v6.i32[0] & v6.i32[1] & 1) == 0)
    v3.i32[0] = 0;
  return v3.f32[0];
}

float32_t WebCore::Filter::clipToMaxEffectRect(WebCore::Filter *this, float32x2_t *a2, float32x2_t *a3)
{
  __int32 v4;
  int v5;
  int v6;
  const WebCore::FloatRect *v7;
  float32x2_t v9;
  int v10;
  int v11;

  v9.i32[0] = WebCore::intersection(a3, (float32x2_t *)((char *)this + 60), (const WebCore::FloatRect *)a3);
  v9.i32[1] = v4;
  v10 = v5;
  v11 = v6;
  return WebCore::intersection(a2, &v9, v7);
}

float32x2_t WebCore::Filter::clampFilterRegionIfNeeded(WebCore::Filter *this)
{
  int v7;
  int v8;
  WebCore::FloatSize *v9;
  float32x2_t result;
  _DWORD v11[2];
  float32x2_t v12;

  WebCore::Filter::scaledByFilterScale(this, (float32x4_t *)((char *)this + 60));
  __asm { FMOV            V0.2S, #1.0 }
  v12 = _D0;
  v11[0] = v7;
  v11[1] = v8;
  if (WebCore::ImageBuffer::sizeNeedsClamping((WebCore::ImageBuffer *)v11, (const WebCore::FloatSize *)&v12, v9))
  {
    result = vmul_f32(*(float32x2_t *)((char *)this + 52), v12);
    *(float32x2_t *)((char *)this + 52) = result;
  }
  return result;
}

uint64_t WebCore::Filter::renderingMode(WebCore::Filter *this)
{
  return (*((unsigned __int8 *)this + 49) >> 1) & 1;
}

uint64_t WebCore::Filter::setFilterRenderingModes(_BYTE *a1, char a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
  a1[49] = result & a2;
  return result;
}

void WebCore::Filter::apply(WebCore::Filter *this@<X0>, WebCore::ImageBuffer *a2@<X1>, float32x4_t *a3@<X2>, WebCore::FilterResults *a4@<X3>, WebCore::FilterImage **a5@<X8>)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  void *v39;
  unint64_t v40;
  WebCore::FilterImage *v41;
  WebCore::FilterImage *v42;
  char v43;
  char **v44;
  char *v45;

  if (!a2)
  {
    v37 = 0;
    goto LABEL_37;
  }
  v10 = WebCore::Filter::scaledByFilterScale(this, a3);
  v14 = floorf(v10);
  v15 = 2147500000.0;
  if (v14 < 2147500000.0)
  {
    v15 = -2147500000.0;
    v16 = v14 <= -2147500000.0;
    v17 = (float)(int)v14;
    if (!v16)
      v15 = v17;
  }
  v18 = floorf(v11);
  v19 = 2147500000.0;
  if (v18 < 2147500000.0)
  {
    v19 = -2147500000.0;
    if (v18 > -2147500000.0)
      v19 = (float)(int)v18;
  }
  v20 = v11 + v13;
  v21 = ceilf(v10 + v12);
  v22 = 2147500000.0;
  if (v21 < 2147500000.0)
  {
    v22 = -2147500000.0;
    if (v21 > -2147500000.0)
      v22 = (float)(int)v21;
  }
  v23 = ceilf(v20);
  v24 = 2147500000.0;
  if (v23 < 2147500000.0)
  {
    v24 = -2147500000.0;
    if (v23 > -2147500000.0)
      v24 = (float)(int)v23;
  }
  if (v15 >= 2147500000.0)
  {
    v25 = 0x7FFFFFFFLL;
  }
  else if (v15 <= -2147500000.0)
  {
    v25 = 0x80000000;
  }
  else
  {
    v25 = (int)v15;
  }
  if (v19 >= 2147500000.0)
  {
    v26 = 0x7FFFFFFF00000000;
  }
  else if (v19 <= -2147500000.0)
  {
    v26 = 0x8000000000000000;
  }
  else
  {
    v26 = (unint64_t)(int)v19 << 32;
  }
  v27 = v22 - v15;
  v28 = v24 - v19;
  if (v27 >= 2147500000.0)
  {
    v29 = 0x7FFFFFFFLL;
  }
  else if (v27 <= -2147500000.0)
  {
    v29 = 0x80000000;
  }
  else
  {
    v29 = (int)v27;
  }
  if (v28 >= 2147500000.0)
  {
    v30 = 0x7FFFFFFF00000000;
  }
  else if (v28 <= -2147500000.0)
  {
    v30 = 0x8000000000000000;
  }
  else
  {
    v30 = (unint64_t)(int)v28 << 32;
  }
  v31 = *((_QWORD *)a2 + 1);
  if (__ldaxr((unsigned __int8 *)v31))
  {
    __clrex();
LABEL_28:
    MEMORY[0x19AEA534C](v31);
    goto LABEL_29;
  }
  if (__stxr(1u, (unsigned __int8 *)v31))
    goto LABEL_28;
LABEL_29:
  v33 = v26 | v25;
  v34 = v30 | v29;
  ++*(_QWORD *)(v31 + 8);
  v35 = __ldxr((unsigned __int8 *)v31);
  if (v35 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v31))
      goto LABEL_34;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v31);
LABEL_34:
  v36 = *((_QWORD *)a4 + 2);
  v37 = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)v37 = 1;
  *(_OWORD *)(v37 + 4) = *(_OWORD *)((char *)this + 60);
  *(float32x4_t *)(v37 + 20) = *a3;
  *(_QWORD *)(v37 + 36) = v33;
  *(_QWORD *)(v37 + 44) = v34;
  *(_WORD *)(v37 + 52) = 256;
  *(_BYTE *)(v37 + 54) = *((_BYTE *)a2 + 48);
  v38 = (const void *)*((_QWORD *)a2 + 4);
  *(_QWORD *)(v37 + 56) = v38;
  if (v38)
    CFRetain(v38);
  *(_QWORD *)(v37 + 64) = a2;
  *(_QWORD *)(v37 + 72) = 0;
  *(_QWORD *)(v37 + 80) = 0;
  *(_QWORD *)(v37 + 88) = 0;
  *(_QWORD *)(v37 + 96) = v36;
LABEL_37:
  (*(void (**)(WebCore::FilterImage **__return_ptr, WebCore::Filter *, uint64_t, WebCore::FilterResults *))(*(_QWORD *)this + 104))(&v42, this, v37, a4);
  if (v42)
  {
    WebCore::FilterImage::correctPremultipliedPixelBuffer((uint64_t)v42);
    v40 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v40 != -1)
    {
      v45 = &v43;
      v44 = &v45;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v44, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v41 = v42;
  }
  else
  {
    v41 = 0;
  }
  *a5 = v41;
  if (v37)
    WTF::RefCounted<WebCore::FilterImage>::deref((WebCore::FilterImage *)v37, v39);
}

uint64_t WebCore::FilterImage::correctPremultipliedPixelBuffer(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  unsigned int v6;

  v1 = *(_QWORD *)(this + 80);
  if (v1)
  {
    if (!*(_BYTE *)(this + 53))
    {
      v2 = *(_DWORD *)(v1 + 48);
      if (v2 >= 4)
      {
        v3 = *(_QWORD *)(v1 + 40);
        v4 = (v2 >> 2) + 1;
        v5 = (unsigned __int8 *)(v3 + 1);
        do
        {
          v6 = v5[2];
          if (*(v5 - 1) > v6)
            *(v5 - 1) = v6;
          if (*v5 > v6)
            *v5 = v6;
          if (v5[1] > v6)
            v5[1] = v6;
          --v4;
          v5 += 4;
        }
        while (v4 > 1);
      }
    }
  }
  return this;
}

WTF *WebCore::Filter::createFilterStyles@<X0>(WebCore::Filter *this@<X0>, const WebCore::FloatRect *a2@<X2>, WTF **a3@<X8>)
{
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF *result;
  WTF *v12;
  void *v13;
  _BYTE v14[80];
  int v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14[0] = 0;
  v16 = 0;
  v5 = *(_OWORD *)a2;
  v17 = *(_OWORD *)((char *)this + 60);
  v18 = v5;
  (*(void (**)(WTF **__return_ptr))(*(_QWORD *)this + 112))(&v12);
  v6 = HIDWORD(v13);
  if (HIDWORD(v13))
  {
    if (HIDWORD(v13) != 1)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        if (v9 >= v6 || (v10 = v8 + (v6 - 1), v10 >= v6))
        {
          __break(0xC471u);
          JUMPOUT(0x1962598ACLL);
        }
        std::swap[abi:sn180100]<WebCore::FilterStyle>((uint64_t)v12 + v7, (uint64_t)v12 + 128 * v10);
        ++v9;
        v6 = HIDWORD(v13);
        --v8;
        v7 += 128;
      }
      while (v9 < (unint64_t)HIDWORD(v13) >> 1);
    }
    result = (WTF *)WTF::Vector<WebCore::FilterStyle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v12, v6);
    *a3 = v12;
    a3[1] = (WTF *)v13;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    result = v12;
    if (v12)
    {
      v12 = 0;
      LODWORD(v13) = 0;
      result = (WTF *)WTF::fastFree(result, (void *)v6);
    }
  }
  if (v16)
  {
    if (v15 != -1)
      return (WTF *)((uint64_t (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v15])(&v12, v14);
  }
  return result;
}

WebCore::FilterImage *WebCore::FilterEffect::takeImageInputs@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::FilterImage *result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  WebCore::FilterImage *v12;
  WebCore::FilterImage *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::FilterImage *v16;
  WebCore::FilterImage **v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;
  WebCore::FilterImage *v22;

  if (a1[48] == 20)
  {
    *(_QWORD *)(a3 + 8) = 0;
    v7 = 1;
    v6 = 1;
    goto LABEL_5;
  }
  result = (WebCore::FilterImage *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 96))(a1);
  if ((_DWORD)result)
  {
    v6 = (int)result;
    *(_QWORD *)(a3 + 8) = 0;
    if (result >> 29)
    {
      __break(0xC471u);
      goto LABEL_24;
    }
    v7 = result;
LABEL_5:
    v8 = WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(a3 + 8) = v6;
    *(_QWORD *)a3 = v8;
    while (1)
    {
      v10 = *(unsigned int *)(a2 + 12);
      if (!(_DWORD)v10)
        break;
      v11 = v10 - 1;
      v12 = *(WebCore::FilterImage **)(*(_QWORD *)a2 + 8 * (v10 - 1));
      *(_QWORD *)(*(_QWORD *)a2 + 8 * (v10 - 1)) = 0;
      v22 = v12;
      v13 = *(WebCore::FilterImage **)(*(_QWORD *)a2 + 8 * (v10 - 1));
      *(_QWORD *)(*(_QWORD *)a2 + 8 * (v10 - 1)) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
        {
          WebCore::FilterImage::~FilterImage(v13, v9);
          WTF::fastFree(v18, v19);
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
      *(_DWORD *)(a2 + 12) = v11;
      v14 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v14 == *(_DWORD *)(a3 + 8))
      {
        v17 = (WebCore::FilterImage **)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v14 + 1, (unint64_t)&v22);
        v14 = *(unsigned int *)(a3 + 12);
        v15 = *(_QWORD *)a3;
        v16 = *v17;
        *v17 = 0;
      }
      else
      {
        v15 = *(_QWORD *)a3;
        v16 = v22;
        v22 = 0;
      }
      *(_QWORD *)(v15 + 8 * v14) = v16;
      *(_DWORD *)(a3 + 12) = v14 + 1;
      result = v22;
      v22 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::FilterImage::~FilterImage(result, v9);
          result = (WebCore::FilterImage *)WTF::fastFree(v20, v21);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      if (!--v6)
        return result;
    }
    __break(0xC471u);
LABEL_24:
    JUMPOUT(0x196259A14);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return result;
}

float WebCore::FilterEffect::calculatePrimitiveSubregion(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char v9;
  __int128 v10;

  v10 = 0uLL;
  if (!a4 || *(_BYTE *)(a1 + 48) == 17)
  {
    v10 = *(_OWORD *)(a2 + 60);
  }
  else
  {
    v7 = 16 * a4;
    do
    {
      WebCore::FloatRect::unite((float32x2_t *)&v10, a3);
      a3 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (*(_BYTE *)(a5 + 20))
  {
    v9 = *(_BYTE *)(a5 + 16);
    if ((v9 & 1) != 0)
      LODWORD(v10) = *(_DWORD *)a5;
    if ((v9 & 2) != 0)
      DWORD1(v10) = *(_DWORD *)(a5 + 4);
    if ((v9 & 4) != 0)
      DWORD2(v10) = *(_DWORD *)(a5 + 8);
    if ((v9 & 8) != 0)
      HIDWORD(v10) = *(_DWORD *)(a5 + 12);
  }
  return *(float *)&v10;
}

float32_t WebCore::FilterEffect::calculateImageRect(int a1, uint64_t a2, WebCore::FloatRect *a3, uint64_t a4, float32x2_t *this)
{
  float32x2_t *v7;
  uint64_t v8;
  float32x2_t v10[2];

  if (!a4)
    return WebCore::intersection(this, (float32x2_t *)(a2 + 60), a3);
  v7 = (float32x2_t *)a3;
  v10[0] = 0;
  v10[1] = 0;
  v8 = 16 * a4;
  do
  {
    WebCore::FloatRect::unite(v10, v7);
    v7 += 2;
    v8 -= 16;
  }
  while (v8);
  return WebCore::Filter::clipToMaxEffectRect((WebCore::Filter *)a2, v10, this);
}

WTF *WebCore::FilterEffect::apply@<X0>(WebCore::FilterEffect *this@<X0>, const WebCore::Filter *a2@<X1>, WebCore::FilterImage *a3@<X2>, WebCore::FilterResults *a4@<X3>, WebCore::FilterImage **a5@<X8>)
{
  WTF *v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WebCore::FilterImage *v14;
  WTF *v15;
  void *v16;
  WTF *result;
  WTF *v18;
  void *v19;
  _BYTE v20[24];
  WTF *v21;
  uint64_t v22;

  ++*(_DWORD *)a3;
  v10 = (WTF *)WTF::fastMalloc((WTF *)8);
  v21 = v10;
  ++*(_DWORD *)a3;
  *(_QWORD *)v10 = a3;
  v22 = 0x100000001;
  v20[0] = 0;
  v20[20] = 0;
  WebCore::FilterEffect::apply((uint64_t)this, (uint64_t)a2, (uint64_t)&v21, (uint64_t)a4, (uint64_t)v20, a5);
  if (HIDWORD(v22))
  {
    v12 = v21;
    v13 = 8 * HIDWORD(v22);
    do
    {
      v14 = *(WebCore::FilterImage **)v12;
      *(_QWORD *)v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          WebCore::FilterImage::~FilterImage(v14, v11);
          WTF::fastFree(v15, v16);
        }
        else
        {
          --*(_DWORD *)v14;
        }
      }
      v12 = (WTF *)((char *)v12 + 8);
      v13 -= 8;
    }
    while (v13);
  }
  result = v21;
  if (v21)
  {
    v21 = 0;
    LODWORD(v22) = 0;
    result = (WTF *)WTF::fastFree(result, v11);
  }
  if (*(_DWORD *)a3 == 1)
  {
    WebCore::FilterImage::~FilterImage(a3, v11);
    return (WTF *)WTF::fastFree(v18, v19);
  }
  else
  {
    --*(_DWORD *)a3;
  }
  return result;
}

void WebCore::FilterEffect::apply(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, WebCore::FilterImage **a6@<X8>)
{
  WebCore::FilterResults *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  WebCore::FilterImage *v21;
  WTF *v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  int v35;
  double v36;
  const WebCore::FloatRect *v37;
  WebCore::FloatRect *v38;
  uint64_t v39;
  char v40;
  int v41;
  const void *v42;
  __n128 v43;
  WebCore::FilterImage *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  WebCore::FilterImage *v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  WTF *v60;
  void *v61;
  WebCore::FilterImage *v62;
  WebCore::FilterImage *v63;
  const void *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  WebCore::FloatRect *v68[2];

  v12 = *(WebCore::FilterResults **)a4;
  if (*(_QWORD *)a4)
  {
    v13 = *((_DWORD *)v12 - 2);
    v14 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    for (i = 1; ; ++i)
    {
      v19 = *((_QWORD *)v12 + 2 * v17);
      if (!v19)
        break;
      if (v19 != -1 && v19 == a1)
      {
        v21 = (WebCore::FilterImage *)*((_QWORD *)v12 + 2 * v17 + 1);
        if (!v21)
          goto LABEL_13;
        ++*(_DWORD *)v21;
        *a6 = v21;
        return;
      }
      v17 = (v17 + i) & v13;
    }
  }
  v68[0] = 0;
  WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>::~Ref(v68, (void *)a2);
LABEL_13:
  WTF::Vector<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::inputPrimitiveSubregions(WTF::Vector<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>(v68, a3);
  v22 = v68[0];
  LODWORD(v67) = WebCore::FilterEffect::calculatePrimitiveSubregion(a1, a2, (float32x2_t *)v68[0], HIDWORD(v68[1]), a5);
  *(_QWORD *)((char *)&v67 + 4) = __PAIR64__(v24, v23);
  HIDWORD(v67) = v26;
  if (v22)
    WTF::fastFree(v22, v25);
  v27 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v27)
  {
    if (v27 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v28 = WTF::fastMalloc((WTF *)(16 * v27));
    v29 = (WTF *)v28;
    v27 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v27)
    {
      v30 = 0;
      v31 = *(_QWORD *)a3;
      do
      {
        *(_OWORD *)(v28 + 16 * v30) = *(_OWORD *)(*(_QWORD *)(v31 + 8 * v30) + 20);
        ++v30;
      }
      while (v27 != v30);
    }
  }
  else
  {
    v29 = 0;
  }
  LODWORD(v66) = (*(float (**)(uint64_t, uint64_t, WTF *, _QWORD, __int128 *))(*(_QWORD *)a1 + 104))(a1, a2, v29, v27, &v67);
  *(_QWORD *)((char *)&v66 + 4) = __PAIR64__(v33, v32);
  HIDWORD(v66) = v35;
  if (v29)
    WTF::fastFree(v29, v34);
  HIDWORD(v36) = DWORD1(v66);
  *(_OWORD *)v68 = v66;
  LODWORD(v36) = *(_DWORD *)(a2 + 52);
  WebCore::FloatRect::scale((float32x4_t *)v68, v36, *(float *)(a2 + 56));
  v65 = *(_OWORD *)v68;
  v68[0] = (WebCore::FloatRect *)WebCore::enclosingIntRect((WebCore *)&v65, v37);
  v68[1] = v38;
  if ((int)v38 <= 0)
    goto LABEL_43;
  if (SHIDWORD(v38) < 1)
    goto LABEL_43;
  *(float *)&v65 = (float)(int)v38;
  *((float *)&v65 + 1) = (float)SHIDWORD(v38);
  if (WebCore::ImageBuffer::sizeNeedsClamping((WebCore::ImageBuffer *)&v65, v38))
    goto LABEL_43;
  v39 = 144;
  if ((*(_BYTE *)(a2 + 49) & 2) == 0)
    v39 = 152;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + v39))(&v65, a1);
  if (!(_QWORD)v65)
  {
LABEL_43:
    *a6 = 0;
    return;
  }
  v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, a3);
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v42 = *(const void **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a3);
  v64 = v42;
  if (v42)
    CFRetain(v42);
  v43.n128_f64[0] = WebCore::FilterImage::create((uint64_t *)&v63, &v67, &v66, v68, v40, v41, (*(_BYTE *)(a2 + 49) & 2) != 0, &v64, *(_QWORD *)(a4 + 16));
  v44 = v63;
  if (v63)
  {
    (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)a1 + 136))(a1, a3, v43.n128_f64[0]);
    if (v41)
    {
      v45 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v45)
      {
        v46 = *(_QWORD *)a3;
        v47 = *(_QWORD *)a3 + 8 * v45;
        do
        {
          v48 = *(_QWORD *)(*(_QWORD *)v46 + 80);
          if (v48)
          {
            if (!*(_BYTE *)(*(_QWORD *)v46 + 53))
            {
              v55 = *(_DWORD *)(v48 + 48);
              if (v55 >= 4)
              {
                v56 = *(_QWORD *)(v48 + 40);
                v57 = (v55 >> 2) + 1;
                v58 = (unsigned __int8 *)(v56 + 1);
                do
                {
                  v59 = v58[2];
                  if (*(v58 - 1) > v59)
                    *(v58 - 1) = v59;
                  if (*v58 > v59)
                    *v58 = v59;
                  if (v58[1] > v59)
                    v58[1] = v59;
                  --v57;
                  v58 += 4;
                }
                while (v57 > 1);
              }
            }
          }
          v46 += 8;
        }
        while (v46 != v47);
      }
    }
    if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, WebCore::FilterImage *))(*(_QWORD *)v65 + 16))(v65, a2, a3, v44))
    {
      *a6 = 0;
      if (*(_DWORD *)v44 == 1)
      {
        WebCore::FilterImage::~FilterImage(v44, v49);
        WTF::fastFree(v60, v61);
      }
      else
      {
        --*(_DWORD *)v44;
      }
      goto LABEL_39;
    }
    ++*(_DWORD *)v44;
    v62 = v44;
    WebCore::FilterResults::setEffectResult((WebCore::FilterResults **)a4, a1, a3, &v62);
    v51 = v62;
    v62 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1)
      {
        WebCore::FilterImage::~FilterImage(v51, v50);
        WTF::fastFree(v53, v54);
      }
      else
      {
        --*(_DWORD *)v51;
      }
    }
  }
  *a6 = v44;
LABEL_39:
  if (v42)
    CFRelease(v42);
  v52 = v65;
  *(_QWORD *)&v65 = 0;
  if (v52)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v52 + 8))(v52, v43);
}

double WebCore::FilterImage::create(uint64_t *a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, char a5, char a6, char a7, const void **a8, uint64_t a9)
{
  uint64_t v17;
  const void *v18;
  double result;

  v17 = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)v17 = 1;
  *(_OWORD *)(v17 + 4) = *a2;
  *(_OWORD *)(v17 + 20) = *a3;
  *(_OWORD *)(v17 + 36) = *a4;
  *(_BYTE *)(v17 + 52) = a5;
  *(_BYTE *)(v17 + 53) = a6;
  *(_BYTE *)(v17 + 54) = a7;
  v18 = *a8;
  *(_QWORD *)(v17 + 56) = *a8;
  if (v18)
    CFRetain(v18);
  result = 0.0;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_QWORD *)(v17 + 96) = a9;
  *a1 = v17;
  return result;
}

double WebCore::FilterEffect::createFilterStyles@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float32x2_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  _BYTE v13[27];
  char v14;
  _BYTE v15[80];
  int v16;
  unsigned __int8 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v13[0] = 0;
  v13[20] = 0;
  WebCore::FilterEffect::createFilterStyle(a1, a2, a3, a4, (uint64_t)v13, (uint64_t)v15);
  *(_QWORD *)(a5 + 8) = 1;
  v6 = WTF::fastMalloc((WTF *)0x80);
  v7 = v6;
  *(_QWORD *)a5 = v6;
  *(_BYTE *)v6 = 0;
  *(_BYTE *)(v6 + 88) = 0;
  if (v17)
  {
    *(_DWORD *)(v6 + 80) = -1;
    v8 = v16;
    if (v16 != -1)
    {
      ((void (*)(char *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v16])(&v14, v6, v15);
      *(_DWORD *)(v7 + 80) = v8;
    }
    *(_BYTE *)(v7 + 88) = 1;
    v9 = v17;
    v10 = v19;
    *(_OWORD *)(v7 + 96) = v18;
    *(_OWORD *)(v7 + 112) = v10;
    *(_DWORD *)(a5 + 12) = 1;
    if (v9 && v16 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v16])(&v14, v15);
  }
  else
  {
    *(_QWORD *)&v10 = v18;
    v11 = v19;
    *(_OWORD *)(v6 + 96) = v18;
    *(_OWORD *)(v6 + 112) = v11;
    *(_DWORD *)(a5 + 12) = 1;
  }
  return *(double *)&v10;
}

_QWORD *WebCore::FilterEffect::createFilterStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float32x2_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v11;
  unsigned int v12;
  int v13;
  float v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _QWORD *result;
  int v22;
  int v23;
  __int128 v24;
  char v25;
  _QWORD v26[10];
  int v27;
  unsigned __int8 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  LODWORD(v24) = WebCore::FilterEffect::calculatePrimitiveSubregion(a1, a3, a4 + 12, 1, a5);
  *(_QWORD *)((char *)&v24 + 4) = __PAIR64__(v12, v11);
  HIDWORD(v24) = v13;
  v14 = (*(float (**)(uint64_t, uint64_t, float32x2_t *, uint64_t, __int128 *))(*(_QWORD *)a1 + 104))(a1, a3, a4 + 14, 1, &v24);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(v26, a1, a2, a3);
  *(_BYTE *)a6 = 0;
  *(_BYTE *)(a6 + 88) = 0;
  v22 = v28;
  if (v28)
  {
    *(_DWORD *)(a6 + 80) = -1;
    v23 = v27;
    if (v27 == -1)
    {
      v22 = 1;
    }
    else
    {
      result = (_QWORD *)((uint64_t (*)(char *, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v27])(&v25, a6, v26);
      *(_DWORD *)(a6 + 80) = v23;
      v22 = v28;
    }
    *(_BYTE *)(a6 + 88) = 1;
  }
  *(_OWORD *)(a6 + 96) = v24;
  *(float *)(a6 + 112) = v14;
  *(_DWORD *)(a6 + 116) = v16;
  *(_DWORD *)(a6 + 120) = v18;
  *(_DWORD *)(a6 + 124) = v20;
  if (v22)
  {
    if (v27 != -1)
      return (_QWORD *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v27])(&v25, v26);
  }
  return result;
}

uint64_t WebCore::FilterFunction::filterName@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = 21;
  v3 = (unsigned __int8 *)&WebCore::FilterFunction::filterName(WebCore::FilterFunction::Type)::namesArray;
  do
  {
    v4 = v2 >> 1;
    v5 = &v3[24 * (v2 >> 1)];
    v7 = *v5;
    v6 = v5 + 24;
    v2 += ~(v2 >> 1);
    if (v7 < result)
      v3 = v6;
    else
      v2 = v4;
  }
  while (v2);
    && *v3 == (_DWORD)result
    && *((_QWORD *)v3 + 2) >= 2uLL)
  {
    v9 = a2;
    result = WTF::AtomStringImpl::add();
    a2 = v9;
    v8 = v10;
  }
  else
  {
    v8 = *MEMORY[0x1E0CBF3B8];
    *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
  }
  *a2 = v8;
  return result;
}

unint64_t WebCore::FilterImage::memoryCost(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(this + 64);
  if (v1)
    v2 = *(_QWORD *)(v1 + 104);
  else
    v2 = 0;
  v3 = *(_QWORD *)(this + 72);
  if (v3)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = __CFADD__(v2, v9);
    v11 = v2 + v9;
    v4 = v10;
    if (!v10)
      v2 = v11;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(this + 80);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 48);
    v7 = __CFADD__(v2, v6);
    v8 = v2 + v6;
    if (v7)
      v4 = 1;
    if (!v7)
      v2 = v8;
  }
  if (!*(_QWORD *)(this + 88)
    || (this = WebCore::FilterImage::memoryCostOfCIImage((id *)this), v7 = __CFADD__(v2, this), v2 += this, !v7))
  {
    if (!v4)
      return v2;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebCore::FilterImage::imageBuffer(WebCore::FilterImage *this)
{
  if (*((_QWORD *)this + 11))
    return WebCore::FilterImage::imageBufferFromCIImage(this);
  else
    return WebCore::FilterImage::imageBufferFromPixelBuffer(this);
}

uint64_t WebCore::FilterImage::imageBufferFromPixelBuffer(WebCore::FilterImage *this)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  float v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];
  uint64_t v11;

  v3 = (uint64_t *)((char *)this + 64);
  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v4 = *((_QWORD *)this + 12);
    v5 = (float)*((int *)this + 12);
    *(float *)&v11 = (float)*((int *)this + 11);
    *((float *)&v11 + 1) = v5;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, char *, _QWORD))(*(_QWORD *)v4 + 16))(v10, v4, &v11, (char *)this + 56, *((unsigned __int8 *)this + 54));
    WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=(v3, v10);
    v7 = v10[0];
    v10[0] = 0;
    if (v7)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v7 + 8), v6);
    result = *v3;
    if (*v3)
    {
      v8 = *(_QWORD *)((char *)this + 44);
      v10[0] = 0;
      v10[1] = v8;
      v9 = *((_QWORD *)this + 10);
      if (v9 || (v9 = *((_QWORD *)this + 9)) != 0)
      {
        v11 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, _QWORD))(*(_QWORD *)result + 96))(result, v9, v10, &v11, 0);
      }
      return *v3;
    }
  }
  return result;
}

WebCore::PixelBuffer *WebCore::FilterImage::pixelBuffer(_QWORD *a1, int a2)
{
  WebCore **v2;
  WebCore **v3;
  uint64_t v4;
  WebCore::PixelBuffer **v5;
  WebCore::PixelBuffer *v6;
  const void *v9;
  uint64_t v10;
  WebCore::PixelBuffer *v11;
  WebCore::PixelBuffer *v12;
  int v13;
  WebCore *v14;
  uint64_t v15;
  WebCore::PixelBuffer *v16;
  int v17;
  CFTypeRef v18;
  _QWORD v20[2];
  WebCore::PixelBuffer *v21;
  _BYTE v22[8];
  CFTypeRef cf;

  v2 = (WebCore **)(a1 + 9);
  v3 = (WebCore **)(a1 + 10);
  if (a2 == 1)
    v4 = 9;
  else
    v4 = 10;
  if (a2 == 1)
    v5 = (WebCore::PixelBuffer **)(a1 + 9);
  else
    v5 = (WebCore::PixelBuffer **)(a1 + 10);
  v6 = (WebCore::PixelBuffer *)a1[v4];
  if (v6)
    return v6;
  v22[0] = a2;
  v22[1] = 0;
  v9 = (const void *)a1[7];
  cf = v9;
  if (v9)
    CFRetain(v9);
  v10 = a1[8];
  if (v10)
  {
    v15 = *(_QWORD *)((char *)a1 + 44);
    v20[0] = 0;
    v20[1] = v15;
    (*(void (**)(WebCore::PixelBuffer **__return_ptr, uint64_t, _BYTE *, _QWORD *, _QWORD))(*(_QWORD *)v10 + 88))(&v21, v10, v22, v20, a1[12]);
    v6 = v21;
    v21 = 0;
    v16 = (WebCore::PixelBuffer *)a1[v4];
    a1[v4] = v6;
    if (!v16)
      goto LABEL_23;
    v17 = *((_DWORD *)v16 + 2) - 1;
    if (*((_DWORD *)v16 + 2) == 1)
    {
      (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v16 + 8))(v16);
      v16 = v21;
      v21 = 0;
      if (!v16)
        goto LABEL_22;
      v17 = *((_DWORD *)v16 + 2) - 1;
      if (*((_DWORD *)v16 + 2) == 1)
      {
        (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v16 + 8))(v16);
        goto LABEL_22;
      }
    }
    *((_DWORD *)v16 + 2) = v17;
LABEL_22:
    v6 = *v5;
    goto LABEL_23;
  }
  v20[0] = *(_QWORD *)((char *)a1 + 44);
  (*(void (**)(WebCore::PixelBuffer **__return_ptr, _QWORD, _BYTE *, _QWORD *))(*(_QWORD *)a1[12] + 24))(&v21, a1[12], v22, v20);
  v6 = v21;
  v21 = 0;
  v12 = (WebCore::PixelBuffer *)a1[v4];
  a1[v4] = v6;
  if (v12)
  {
    v13 = *((_DWORD *)v12 + 2) - 1;
    if (*((_DWORD *)v12 + 2) == 1)
    {
      (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v12 + 8))(v12);
      v12 = v21;
      v21 = 0;
      if (!v12)
        goto LABEL_14;
      v13 = *((_DWORD *)v12 + 2) - 1;
      if (*((_DWORD *)v12 + 2) == 1)
      {
        (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v12 + 8))(v12);
        goto LABEL_14;
      }
    }
    *((_DWORD *)v12 + 2) = v13;
LABEL_14:
    v6 = *v5;
  }
  if (!v6)
    goto LABEL_23;
  if (a2 != 1)
  {
    v14 = *v2;
    if (!*v2)
      goto LABEL_23;
    goto LABEL_18;
  }
  v14 = *v3;
  if (*v3)
  {
LABEL_18:
    WebCore::copyImageBytes(v14, v6, v11);
    goto LABEL_22;
  }
LABEL_23:
  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);
  return v6;
}

void WebCore::copyImageBytes(WebCore *this, const WebCore::PixelBuffer *a2, WebCore::PixelBuffer *a3)
{
  uint64_t v3;
  int v6;
  const void *v7;
  const void *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  unsigned __int8 v11[8];
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  unsigned __int8 v15[8];
  CFTypeRef v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *((_QWORD *)a2 + 4);
  v19 = v3;
  if (!(v3 >> 30))
  {
    v6 = 4 * v3;
    *(_WORD *)v15 = *((_WORD *)this + 8);
    v7 = (const void *)*((_QWORD *)this + 3);
    v16 = v7;
    if (v7)
      CFRetain(v7);
    v17 = v6;
    v18 = *((_QWORD *)this + 5);
    *(_WORD *)v11 = *((_WORD *)a2 + 8);
    v8 = (const void *)*((_QWORD *)a2 + 3);
    cf = v8;
    if (v8)
      CFRetain(v8);
    v13 = v6;
    v14 = *((_QWORD *)a2 + 5);
    WebCore::convertImagePixels(v15, v11, (int *)&v19);
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
    v10 = v16;
    v16 = 0;
    if (v10)
      CFRelease(v10);
  }
}

WebCore::PixelBuffer *WebCore::FilterImage::copyPixelBuffer(WebCore::FilterImage *this, WebCore::PixelBuffer *a2, int32x2_t *a3)
{
  int v6;
  uint64_t v7;
  WebCore *v8;
  const void *v9;
  char v10;
  WebCore::PixelBuffer *result;
  const void *v12;
  char v13;
  const WebCore::IntRect *v14;
  uint64_t v15;
  WebCore *v16;
  uint64_t v17;
  const void *v18;
  void *v19;
  CFTypeRef v20;
  const WebCore::IntRect *v21;
  const void *v22;
  const WebCore::IntRect *v23;
  const void *v24;
  CFTypeRef cf;
  uint64_t v26;
  WebCore *v27;
  WebCore *v28[2];

  v6 = *((unsigned __int8 *)a2 + 16);
  v7 = 80;
  if (v6 == 1)
    v7 = 72;
  v8 = *(WebCore **)((char *)this + v7);
  if (v8)
    goto LABEL_7;
  v9 = (const void *)*((_QWORD *)a2 + 3);
  if (v9)
  {
    CFRetain(*((CFTypeRef *)a2 + 3));
    v10 = CGColorSpaceEqualToColorSpace();
    CFRelease(v9);
    if ((v10 & 1) != 0)
      goto LABEL_6;
  }
  else if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
  {
    goto LABEL_6;
  }
  v15 = *((_QWORD *)this + 8);
  if (!v15)
  {
LABEL_6:
    result = WebCore::FilterImage::pixelBuffer(this, v6);
    v8 = result;
    if (!result)
      return result;
LABEL_7:
    v12 = (const void *)*((_QWORD *)a2 + 3);
    if (v12)
    {
      CFRetain(*((CFTypeRef *)a2 + 3));
      v13 = CGColorSpaceEqualToColorSpace();
      CFRelease(v12);
      if ((v13 & 1) != 0)
        return (WebCore::PixelBuffer *)WebCore::copyImageBytes(v8, a2, a3, v14);
    }
    else if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
    {
      return (WebCore::PixelBuffer *)WebCore::copyImageBytes(v8, a2, a3, v14);
    }
    v22 = (const void *)*((_QWORD *)a2 + 3);
    v24 = v22;
    if (v22)
    {
      CFRetain(v22);
      WebCore::getConvertedPixelBuffer(v28, (uint64_t)v8, v6, &v24, *((_QWORD *)this + 12));
      CFRelease(v22);
    }
    else
    {
      WebCore::getConvertedPixelBuffer(v28, (uint64_t)v8, v6, &v24, *((_QWORD *)this + 12));
    }
    result = v28[0];
    if (v28[0])
    {
      WebCore::copyImageBytes(v28[0], a2, a3, v23);
      result = v28[0];
      v28[0] = 0;
      if (result)
        goto LABEL_24;
    }
    return result;
  }
  v16 = *(WebCore **)((char *)this + 44);
  v28[0] = 0;
  v28[1] = v16;
  WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(&v26, v15);
  v17 = v26;
  v18 = (const void *)*((_QWORD *)a2 + 3);
  cf = v18;
  if (v18)
    CFRetain(v18);
  WebCore::getConvertedPixelBuffer(&v27, v17, v6, (int *)v28, &cf, *((_QWORD *)this + 12));
  v20 = cf;
  cf = 0;
  if (v20)
    CFRelease(v20);
  WTF::Ref<WebCore::ScrollingStateStickyNode,WTF::RawPtrTraits<WebCore::ScrollingStateStickyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateStickyNode>>::~Ref(&v26, v19);
  result = v27;
  if (v27)
  {
    WebCore::copyImageBytes(v27, a2, a3, v21);
    result = v27;
    v27 = 0;
    if (result)
    {
LABEL_24:
      if (*((_DWORD *)result + 2) == 1)
        return (WebCore::PixelBuffer *)(*(uint64_t (**)(WebCore::PixelBuffer *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  return result;
}

void WebCore::getConvertedPixelBuffer(_QWORD *a1, uint64_t a2, unsigned __int8 a3, int *a4, const void **a5, uint64_t a6)
{
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  const void *v16;
  void *v17;
  CFTypeRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  float v28[4];
  uint64_t v29;
  _DWORD v30[2];
  uint64_t v31;
  CFTypeRef cf;

  v12 = fminf((float)a4[3], 4096.0);
  v30[0] = fminf((float)a4[2], 4096.0);
  *(float *)&v30[1] = v12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _DWORD *, const void **, _QWORD))(*(_QWORD *)a6 + 16))(&v29, a6, v30, a5, 0);
  if (!v29)
  {
    *a1 = 0;
    return;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  v14 = (float)a4[1];
  v28[0] = (float)*a4;
  v28[1] = v14;
  v15 = (float)a4[3];
  v28[2] = (float)a4[2];
  v28[3] = v15;
  v31 = 0;
  cf = *(CFTypeRef *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, float *, uint64_t *, uint64_t))(*(_QWORD *)v13 + 384))(v13, a2, v28, &v31, 4641);
  LOWORD(v31) = a3;
  v16 = *a5;
  cf = v16;
  if (v16)
    CFRetain(v16);
  (*(void (**)(uint64_t, uint64_t *, int *, uint64_t))(*(_QWORD *)v29 + 88))(v29, &v31, a4, a6);
  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 8);
    if (__ldaxr((unsigned __int8 *)v20))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v20))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v20);
LABEL_12:
    v22 = *(_QWORD *)(v20 + 8);
    v23 = v22 - 1;
    *(_QWORD *)(v20 + 8) = v22 - 1;
    if (v22 == 1)
    {
      v27 = *(_QWORD *)(v20 + 16);
      v24 = *(_QWORD *)(v20 + 24);
      *(_QWORD *)(v20 + 24) = 0;
      v25 = v27 != 0;
    }
    else
    {
      v24 = 0;
      v25 = 1;
    }
    v26 = __ldxr((unsigned __int8 *)v20);
    if (v26 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
      {
        if (v23)
          return;
LABEL_20:
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        if (!v25)
          WTF::fastFree((WTF *)v20, v17);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
    if (v23)
      return;
    goto LABEL_20;
  }
}

uint64_t WebCore::copyImageBytes(WebCore *this, const WebCore::PixelBuffer *a2, int32x2_t *a3, const WebCore::IntRect *a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int32 v10;
  uint64_t result;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  _BOOL4 v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  char v34;
  char *v35;
  char *v36;
  int32x2_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v7 = *((_QWORD *)this + 4);
  v8 = *((_QWORD *)a2 + 4);
  v37 = 0;
  v38 = v8;
  v39 = 0;
  v40 = v7;
  WebCore::IntRect::intersect((int32x2_t *)&v39, a3);
  v9 = v39;
  v39 = 0;
  if (a3->i32[0] < 0)
    LODWORD(v39) = -a3->i32[0];
  v10 = a3->i32[1];
  if (v10 < 0)
    HIDWORD(v39) = -v10;
  result = (uint64_t)WebCore::IntRect::intersect((int32x2_t *)&v39, &v37);
  v12 = v40;
  v13 = HIDWORD(v40);
  if ((_DWORD)v40 != (_DWORD)v38 || (v14 = HIDWORD(v40), v15 = v40, HIDWORD(v40) != HIDWORD(v38)))
  {
    result = WebCore::PixelBuffer::zeroRange(a2, 0, *((_QWORD *)a2 + 6));
    v15 = v40;
    LODWORD(v14) = HIDWORD(v40);
  }
  if (v15 >= 1 && (int)v14 >= 1)
  {
    if ((v12 & 0x80000000) != 0)
    {
      v17 = 0;
      v16 = 1;
    }
    else
    {
      v16 = v12 >> 30 != 0;
      if (v12 >> 30)
        v17 = 0;
      else
        v17 = 4 * v12;
    }
    if (v38 >> 30)
      v18 = 0;
    else
      v18 = (4 * v38);
    v19 = (4 * v7);
    if (v7 >> 30)
      v19 = 0;
    v20 = (v7 & 0x80000000) != 0 || v7 >> 30 != 0;
    if ((v7 & 0x80000000) == 0)
      v21 = v19;
    else
      v21 = 0;
    if (v38 >> 30)
    {
      v23 = 0;
      LODWORD(v22) = 0;
    }
    else
    {
      v22 = SHIDWORD(v39) * v18;
      v23 = HIDWORD(v22) == 0;
      if (v22 >= 0x100000000)
        LODWORD(v22) = 0;
    }
    v24 = v39 >> 30 == 0;
    v25 = __CFADD__((_DWORD)v22, 4 * v39);
    v26 = (v22 + 4 * v39);
    v27 = v25;
    if (v25)
      v28 = 0;
    else
      v28 = v26;
    v29 = v24 && v23;
    if (v24 && v23)
      v30 = v28;
    else
      v30 = 0;
    v31 = v21 * (v9 >> 32);
    v32 = HIDWORD(v31) == 0;
    if (v31 >= 0x100000000)
      LODWORD(v31) = 0;
    if (v20)
    {
      LODWORD(v31) = 0;
      v32 = 0;
    }
    if (v9 >> 30)
      v32 = 0;
    v25 = __CFADD__((_DWORD)v31, 4 * v9);
    v33 = (v31 + 4 * v9);
    v34 = v25;
    if ((int)v13 >= 1
      && !((v16 || v38 >> 30 != 0 || v20) | !v29 | v27)
      && v32
      && (v34 & 1) == 0)
    {
      v35 = (char *)(*((_QWORD *)this + 5) + v33);
      v36 = (char *)(*((_QWORD *)a2 + 5) + v30);
      do
      {
        result = (uint64_t)memcpy(v36, v35, v17);
        v36 += v18;
        v35 += v21;
        LODWORD(v13) = v13 - 1;
      }
      while ((_DWORD)v13);
    }
  }
  return result;
}

void WebCore::getConvertedPixelBuffer(_QWORD *a1, uint64_t a2, unsigned __int8 a3, const void **a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  CFTypeRef cf;
  uint64_t v25;
  uint64_t v26;
  _DWORD v27[2];
  _QWORD v28[2];

  v10 = *(_QWORD *)(a2 + 32);
  v28[0] = 0;
  v28[1] = v10;
  v27[0] = fminf((float)(int)v10, 4096.0);
  v27[1] = fminf((float)SHIDWORD(v10), 4096.0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a5 + 16))(&v26, a5, v27, a2 + 24, 0);
  if (!v26)
  {
    *a1 = 0;
    return;
  }
  v25 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t *, _QWORD))(*(_QWORD *)v26 + 96))(v26, a2, v28, &v25, 0);
  v11 = v26;
  v12 = *a4;
  cf = v12;
  if (v12)
    CFRetain(v12);
  WebCore::getConvertedPixelBuffer(a1, v11, a3, (int *)v28, &cf, a5);
  v14 = cf;
  cf = 0;
  if (v14)
    CFRelease(v14);
  v15 = v26;
  v26 = 0;
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v16);
LABEL_12:
    v18 = *(_QWORD *)(v16 + 8);
    v19 = v18 - 1;
    *(_QWORD *)(v16 + 8) = v18 - 1;
    if (v18 == 1)
    {
      v23 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 24) = 0;
      v21 = v23 != 0;
    }
    else
    {
      v20 = 0;
      v21 = 1;
    }
    v22 = __ldxr((unsigned __int8 *)v16);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
        if (v19)
          return;
LABEL_20:
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        if (!v21)
          WTF::fastFree((WTF *)v16, v13);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (v19)
      return;
    goto LABEL_20;
  }
}

uint64_t WebCore::DefaultFilterOperation::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a2 + 12);
  if (v2 != *(unsigned __int8 *)(a1 + 12))
    return 0;
  if (v2 == 13)
    return *(unsigned __int8 *)(a1 + 13) == *(unsigned __int8 *)(a2 + 13);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::DefaultFilterOperation::representedType(WebCore::DefaultFilterOperation *this)
{
  return *((unsigned __int8 *)this + 13);
}

uint64_t WebCore::ReferenceFilterOperation::ReferenceFilterOperation(uint64_t result, _DWORD **a2, uint64_t *a3)
{
  _DWORD *v3;
  uint64_t v4;

  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)result = off_1E34160E8;
  v3 = *a2;
  if (*a2)
    *v3 += 2;
  *(_QWORD *)(result + 16) = v3;
  v4 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

void WebCore::ReferenceFilterOperation::~ReferenceFilterOperation(WebCore::CachedSVGDocumentReference **this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *this = (WebCore::CachedSVGDocumentReference *)off_1E34160E8;
  std::unique_ptr<WebCore::CachedSVGDocumentReference>::~unique_ptr[abi:sn180100](this + 4, a2);
  WebCore::ContentType::~ContentType(this + 3, v3);
  v5 = this[2];
  this[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::ReferenceFilterOperation::~ReferenceFilterOperation(this, a2);
  WTF::fastFree(v2, v3);
}

WebCore::CachedSVGDocumentReference **std::unique_ptr<WebCore::CachedSVGDocumentReference>::~unique_ptr[abi:sn180100](WebCore::CachedSVGDocumentReference **a1, void *a2)
{
  WebCore::CachedSVGDocumentReference *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::CachedSVGDocumentReference::~CachedSVGDocumentReference(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

uint64_t WebCore::ReferenceFilterOperation::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;

  if (*(unsigned __int8 *)(a2 + 12) != *(unsigned __int8 *)(a1 + 12))
    return 0;
  if (!*(_BYTE *)(a2 + 12))
    return WTF::equal(*(WTF **)(a1 + 16), *(const WTF::StringImpl **)(a2 + 16), a3);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ReferenceFilterOperation::isIdentity(WebCore::ReferenceFilterOperation *this)
{
  return 0;
}

uint64_t WebCore::ReferenceFilterOperation::outsets(WebCore::ReferenceFilterOperation *this)
{
  return 0;
}

void WebCore::ReferenceFilterOperation::loadExternalDocumentIfNeeded(WebCore::ReferenceFilterOperation *this, WebCore::CachedResourceLoader *a2, const WebCore::ResourceLoaderOptions *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  void *v12;
  _DWORD *v13;
  WebCore::CachedSVGDocumentReference *v14;
  WTF *v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if (!*((_QWORD *)this + 4))
  {
    v6 = (_QWORD *)((char *)this + 16);
    v7 = *((_QWORD *)a2 + 9);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
    }
    else
    {
      v8 = 0;
    }
    if (*v6 && (WTF::StringImpl::startsWith() & 1) != 0)
    {
      v10 = 0;
    }
    else
    {
      WebCore::Document::completeURL((WebCore::Document *)v8, v6, v8 + 848, 0, (WTF::URL *)&v18);
      v10 = WTF::equalIgnoringFragmentIdentifier() ^ 1;
      v17 = v18;
      v18 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v9);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    if (v8)
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    if (v10)
    {
      v11 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v11 = off_1E33F8B08;
      *(_QWORD *)(v11 + 8) = 0;
      v13 = (_DWORD *)*v6;
      if (*v6)
        *v13 += 2;
      *(_QWORD *)(v11 + 16) = v13;
      *(_QWORD *)(v11 + 24) = 0;
      *(_BYTE *)(v11 + 32) = 0;
      v14 = (WebCore::CachedSVGDocumentReference *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v11;
      if (v14)
      {
        WebCore::CachedSVGDocumentReference::~CachedSVGDocumentReference(v14, v12);
        WTF::fastFree(v15, v16);
        v11 = *((_QWORD *)this + 4);
      }
      WebCore::CachedSVGDocumentReference::load((WebCore::CachedSVGDocumentReference *)v11, a2, a3);
    }
  }
}

uint64_t WebCore::BasicColorMatrixFilterOperation::blend@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  unsigned int v6;
  double v7;
  double v8;
  int v9;
  double v12;
  unsigned int *v13;
  unsigned int v14;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  v6 = *(unsigned __int8 *)(result + 12);
  if (a2)
  {
    if (v6 != *(unsigned __int8 *)(a2 + 12))
    {
      v13 = (unsigned int *)(result + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      goto LABEL_47;
    }
    if (!a4)
    {
      if (v6 - 5 <= 0xFFFFFFFB)
      {
        __break(0xC471u);
        JUMPOUT(0x19625B624);
      }
      v7 = *(double *)(a2 + 16);
      goto LABEL_22;
    }
  }
  else if ((a4 & 1) == 0)
  {
    v7 = 0.0;
    if (v6 == 3)
      v7 = 1.0;
LABEL_22:
    v8 = *(double *)(result + 16);
    v9 = *(unsigned __int8 *)(a3 + 9);
    if (v9 == 2 && v6 <= 9 && ((1 << v6) & 0x388) != 0)
    {
      v12 = v7 + v8;
      goto LABEL_34;
    }
LABEL_30:
    if (*(_BYTE *)(a3 + 10) == 1)
    {
      v21 = *(double *)(a3 + 16);
      if (v21 != 0.0)
      {
        v22 = v8 * v21;
        v7 = v7 + v22;
        v8 = v8 + v22;
      }
    }
    v17 = v7 + v7;
    if (!v9)
      v17 = v7;
    v18 = v17 + (v8 - v7) * *(double *)a3;
    goto LABEL_35;
  }
  v7 = *(double *)(result + 16);
  v8 = 0.0;
  if (v6 == 3)
    v8 = 1.0;
  v9 = *(unsigned __int8 *)(a3 + 9);
  if (v9 != 2 || v6 > 9 || ((1 << v6) & 0x388) == 0)
    goto LABEL_30;
  v12 = v8 + v7;
LABEL_34:
  v18 = v12 + -1.0;
LABEL_35:
  if (v6 <= 9)
  {
    if (((1 << v6) & 0xA6) != 0)
    {
      v19 = 1.0;
      if (v18 <= 1.0)
        v19 = v18;
      if (v18 >= 0.0)
        v18 = v19;
      else
        v18 = 0.0;
    }
    else
    {
      v20 = 0.0;
      if (v18 >= 0.0)
        v20 = v18;
      if (((1 << v6) & 0x308) != 0)
        v18 = v20;
    }
  }
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = v6;
  *(_QWORD *)result = off_1E34161C8;
  *(double *)(result + 16) = v18;
LABEL_47:
  *a5 = result;
  return result;
}

double WebCore::BasicColorMatrixFilterOperation::passthroughAmount(WebCore::BasicColorMatrixFilterOperation *this)
{
  double result;

  result = 0.0;
  if (*((_BYTE *)this + 12) == 3)
    return 1.0;
  return result;
}

BOOL WebCore::BasicColorMatrixFilterOperation::isIdentity(WebCore::BasicColorMatrixFilterOperation *this)
{
  double v1;

  v1 = 0.0;
  if (*((_BYTE *)this + 12) == 3)
    v1 = 1.0;
  return *((double *)this + 2) == v1;
}

uint64_t WebCore::BasicColorMatrixFilterOperation::transformColor(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t result;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  __float2 v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 1:
      v3 = *(double *)(a1 + 16);
      v4 = 1.0;
      v5 = 1.0 - v3;
      if (v5 <= 1.0)
        v4 = v5;
      if (v5 >= 0.0)
        v6 = v4;
      else
        v6 = 0.0;
      v7 = (float)(v6 * 0.7874) + 0.2126;
      v8 = (float)(v6 * -0.7152) + 0.7152;
      v9 = (float)(v6 * -0.0722) + 0.0722;
      v10 = (float)(v6 * -0.2126) + 0.2126;
      v11 = (float)(v6 * 0.2848) + 0.7152;
      v12 = (float)(v6 * 0.9278) + 0.0722;
      v13 = a2[1];
      v14 = a2[2];
      v15 = a2[3];
      v16 = (float)(v10 * *a2) + 0.0;
      v17 = v16 + (float)(v8 * v13);
      v18 = (float)(v16 + (float)(v11 * v13)) + (float)(v9 * v14);
      v19 = (float)((float)((float)(v7 * *a2) + 0.0) + (float)(v8 * v13)) + (float)(v9 * v14);
      v20 = v17 + (float)(v12 * v14);
      goto LABEL_17;
    case 2:
      v22 = *(double *)(a1 + 16);
      v23 = 1.0;
      v24 = 1.0 - v22;
      if (v24 <= 1.0)
        v23 = v24;
      if (v24 >= 0.0)
        v25 = v23;
      else
        v25 = 0.0;
      v26 = (float)(v25 * 0.607) + 0.393;
      v27 = (float)(v25 * -0.769) + 0.769;
      v28 = (float)(v25 * -0.189) + 0.189;
      v29 = (float)(v25 * -0.349) + 0.349;
      v30 = (float)(v25 * 0.314) + 0.686;
      v31 = (float)(v25 * -0.168) + 0.168;
      v32 = (float)(v25 * -0.272) + 0.272;
      v33 = (float)(v25 * -0.534) + 0.534;
      v34 = (float)(v25 * 0.869) + 0.131;
      v35 = a2[1];
      v36 = a2[2];
      v15 = a2[3];
      v18 = (float)((float)((float)(v29 * *a2) + 0.0) + (float)(v30 * v35)) + (float)(v31 * v36);
      v19 = (float)((float)((float)(v26 * *a2) + 0.0) + (float)(v27 * v35)) + (float)(v28 * v36);
      v20 = (float)((float)((float)(v32 * *a2) + 0.0) + (float)(v33 * v35)) + (float)(v34 * v36);
      goto LABEL_17;
    case 3:
      v37 = *(double *)(a1 + 16);
      v38 = (float)(v37 * 0.787) + 0.213;
      v39 = (float)(v37 * -0.715) + 0.715;
      v40 = (float)(v37 * -0.072) + 0.072;
      v41 = (float)(v37 * -0.213) + 0.213;
      v42 = (float)(v37 * 0.285) + 0.715;
      v43 = (float)(v37 * 0.928) + 0.072;
      v44 = a2[1];
      v45 = a2[2];
      v15 = a2[3];
      v46 = (float)(v41 * *a2) + 0.0;
      v47 = v46 + (float)(v39 * v44);
      v18 = (float)(v46 + (float)(v42 * v44)) + (float)(v40 * v45);
      v19 = (float)((float)((float)(v38 * *a2) + 0.0) + (float)(v39 * v44)) + (float)(v40 * v45);
      v20 = v47 + (float)(v43 * v45);
      goto LABEL_17;
    case 4:
      v48 = *(double *)(a1 + 16);
      v49 = __sincosf_stret(v48 * 0.017453);
      v50 = 0.715 - (float)(v49.__cosval * 0.715);
      v51 = v50 - (float)(v49.__sinval * 0.715);
      v52 = 0.072 - (float)(v49.__cosval * 0.072);
      v53 = 0.213 - (float)(v49.__cosval * 0.213);
      v54 = v53 + (float)(v49.__sinval * 0.143);
      v55 = v50 + (float)(v49.__sinval * 0.715);
      v56 = a2[2];
      v57 = a2[1];
      v15 = a2[3];
      v58 = (float)((float)((float)(v53 - (float)(v49.__sinval * 0.787)) * *a2) + 0.0) + (float)(v55 * v57);
      v18 = (float)((float)((float)(v54 * *a2) + 0.0)
                  + (float)((float)((float)((float)(v49.__cosval * 0.285) + 0.715) + (float)(v49.__sinval * 0.14)) * v57))
          + (float)((float)(v52 + (float)(v49.__sinval * -0.283)) * v56);
      v19 = (float)((float)((float)((float)((float)((float)(v49.__cosval * 0.787) + 0.213)
                                          - (float)(v49.__sinval * 0.213))
                                  * *a2)
                          + 0.0)
                  + (float)(v51 * v57))
          + (float)((float)(v52 + (float)(v49.__sinval * 0.928)) * v56);
      v20 = v58 + (float)((float)((float)((float)(v49.__cosval * 0.928) + 0.072) + (float)(v49.__sinval * 0.072)) * v56);
LABEL_17:
      v59 = 1.0;
      if (v19 <= 1.0)
        v60 = v19;
      else
        v60 = 1.0;
      if (v19 < 0.0)
        v60 = 0.0;
      if (v18 <= 1.0)
        v61 = v18;
      else
        v61 = 1.0;
      if (v18 >= 0.0)
        v62 = v61;
      else
        v62 = 0.0;
      if (v20 <= 1.0)
        v63 = v20;
      else
        v63 = 1.0;
      if (v20 >= 0.0)
        v64 = v63;
      else
        v64 = 0.0;
      if (v15 <= 1.0)
        v59 = v15;
      *a2 = v60;
      a2[1] = v62;
      if (v15 >= 0.0)
        v65 = v59;
      else
        v65 = 0.0;
      a2[2] = v64;
      a2[3] = v65;
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t WebCore::BasicComponentTransferFilterOperation::blend@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  unint64_t v6;
  double *v8;
  double v9;
  double v10;
  double v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  double v17;
  double v18;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  LODWORD(v6) = *(unsigned __int8 *)(result + 12);
  if (a2)
  {
    if ((_DWORD)v6 != *(unsigned __int8 *)(a2 + 12))
    {
      v14 = (unsigned int *)(result + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      goto LABEL_59;
    }
    if (!a4)
    {
      if ((v6 - 7) >= 3 && (_DWORD)v6 != 5)
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      v8 = (double *)(a2 + 16);
      goto LABEL_31;
    }
LABEL_11:
    v9 = 0.0;
    if ((v6 - 5) <= 4)
      v9 = dbl_1969F8C68[(char)(v6 - 5)];
    v10 = *(double *)(result + 16);
    if (*(_BYTE *)(a3 + 9) != 2 || v6 > 9 || ((1 << v6) & 0x388) == 0)
    {
      if (*(_BYTE *)(a3 + 10) == 1)
      {
        v26 = *(double *)(a3 + 16);
        if (v26 != 0.0)
        {
          v27 = v9 * v26;
          v10 = v10 + v27;
          v9 = v9 + v27;
        }
      }
      v13 = v10 + v10;
      if (!*(_BYTE *)(a3 + 9))
        v13 = v10;
      v22 = v13 + (v9 - v10) * *(double *)a3;
    }
    else
    {
      v22 = v10 + v9 + -1.0;
    }
    if (v6 > 9)
      goto LABEL_58;
    v23 = 1 << v6;
    goto LABEL_48;
  }
  if ((a4 & 1) != 0)
    goto LABEL_11;
  v16 = v6 - 5;
  v17 = 0.0;
  if ((v6 - 5) <= 4 && ((0x1Du >> v16) & 1) != 0)
  {
    v6 = 0x908070705uLL >> (8 * v16);
    v8 = (double *)((char *)&unk_1969F8C40 + 8 * v16);
LABEL_31:
    v17 = *v8;
  }
  v18 = *(double *)(result + 16);
  if (*(_BYTE *)(a3 + 9) != 2 || v6 > 9u || ((1 << v6) & 0x388) == 0)
  {
    if (*(_BYTE *)(a3 + 10) == 1)
    {
      v28 = *(double *)(a3 + 16);
      if (v28 != 0.0)
      {
        v29 = v18 * v28;
        v17 = v17 + v29;
        v18 = v18 + v29;
      }
    }
    v21 = v17 + v17;
    if (!*(_BYTE *)(a3 + 9))
      v21 = v17;
    v22 = v21 + (v18 - v17) * *(double *)a3;
  }
  else
  {
    v22 = v17 + v18 + -1.0;
  }
  if (v6 > 9u)
    goto LABEL_58;
  v23 = 1 << v6;
LABEL_48:
  if ((v23 & 0xA6) != 0)
  {
    v24 = 1.0;
    if (v22 <= 1.0)
      v24 = v22;
    if (v22 >= 0.0)
      v22 = v24;
    else
      v22 = 0.0;
  }
  else
  {
    v25 = 0.0;
    if (v22 >= 0.0)
      v25 = v22;
    if ((v23 & 0x308) != 0)
      v22 = v25;
  }
LABEL_58:
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = v6;
  *(_QWORD *)result = off_1E3416238;
  *(double *)(result + 16) = v22;
LABEL_59:
  *a5 = result;
  return result;
}

double WebCore::BasicComponentTransferFilterOperation::passthroughAmount(WebCore::BasicComponentTransferFilterOperation *this)
{
  unsigned int v1;
  double result;

  v1 = *((unsigned __int8 *)this + 12) - 5;
  result = 0.0;
  if (v1 <= 4)
    return dbl_1969F8C68[(char)v1];
  return result;
}

BOOL WebCore::BasicComponentTransferFilterOperation::isIdentity(WebCore::BasicComponentTransferFilterOperation *this)
{
  double v1;

  v1 = 1.0;
  if (*((_BYTE *)this + 12) == 5)
    v1 = 0.0;
  return *((double *)this + 2) == v1;
}

uint64_t WebCore::BasicComponentTransferFilterOperation::transformColor(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  float v5;
  int v6;
  uint64_t v7;
  double v8;
  double v9;
  float64x2_t v10;
  float v16;
  float v17;
  float v18;
  double v19;
  int v20;
  float v21;
  float v22;
  float32x2_t v23;
  float v25;
  double v26;
  float v27;
  int v28;
  uint64_t v29;
  float v30;
  float v31;
  float32x2_t v32;
  float v34;

  result = 0;
  switch(*(_BYTE *)(a1 + 12))
  {
    case 5:
      v4 = *(double *)(a1 + 16);
      v6 = *(_DWORD *)(a2 + 12);
      v5 = 1.0 - v4;
      *(double *)&v7 = v5;
      v8 = v4 - *(double *)&v7;
      v9 = 1.0 - (*(double *)&v7 + *(float *)(a2 + 8) * v8);
      v10 = vmlaq_n_f64((float64x2_t)vdupq_lane_s64(v7, 0), vcvtq_f64_f32((float32x2_t)vand_s8(*(int8x8_t *)a2, vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)a2), (int8x8_t)vcgez_f32(*(float32x2_t *)a2)))), v8);
      __asm { FMOV            V0.2D, #1.0 }
      *(float32x2_t *)a2 = vcvt_f32_f64(vsubq_f64(_Q0, v10));
      *(float *)_Q0.f64 = v9;
      *(_DWORD *)(a2 + 8) = LODWORD(_Q0.f64[0]);
      *(_DWORD *)(a2 + 12) = v6;
      goto LABEL_23;
    case 7:
      v16 = *(double *)(a1 + 16) * *(float *)(a2 + 12);
      v17 = 1.0;
      if (v16 <= 1.0)
        v17 = *(double *)(a1 + 16) * *(float *)(a2 + 12);
      if (v16 >= 0.0)
        v18 = v17;
      else
        v18 = 0.0;
      if (v18 < 0.0)
        v18 = 0.0;
      *(float *)(a2 + 12) = v18;
      goto LABEL_23;
    case 8:
      v19 = *(double *)(a1 + 16);
      v20 = *(_DWORD *)(a2 + 12);
      v21 = v19 * *(float *)(a2 + 8);
      v22 = 1.0;
      if (v21 <= 1.0)
        v22 = v19 * *(float *)(a2 + 8);
      v23 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32((float32x2_t)vand_s8(*(int8x8_t *)a2, vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)a2), (int8x8_t)vcgez_f32(*(float32x2_t *)a2)))), v19));
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)a2 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v23, _D1), (int8x8_t)_D1, (int8x8_t)v23), (int8x8_t)vcltz_f32(v23));
      if (_NF)
        v25 = 0.0;
      else
        v25 = v22;
      *(float *)(a2 + 8) = v25;
      *(_DWORD *)(a2 + 12) = v20;
      goto LABEL_23;
    case 9:
      v26 = *(double *)(a1 + 16);
      v27 = v26 * -0.5 + 0.5;
      v28 = *(_DWORD *)(a2 + 12);
      *(double *)&v29 = v27;
      v30 = *(double *)&v29 + v26 * *(float *)(a2 + 8);
      v31 = 1.0;
      if (v30 <= 1.0)
        v31 = *(double *)&v29 + v26 * *(float *)(a2 + 8);
      v32 = vcvt_f32_f64(vmlaq_n_f64((float64x2_t)vdupq_lane_s64(v29, 0), vcvtq_f64_f32((float32x2_t)vand_s8(*(int8x8_t *)a2, vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)a2), (int8x8_t)vcgez_f32(*(float32x2_t *)a2)))), v26));
      __asm { FMOV            V2.2S, #1.0 }
      *(int8x8_t *)a2 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v32, _D2), (int8x8_t)_D2, (int8x8_t)v32), (int8x8_t)vcltz_f32(v32));
      if (_NF)
        v34 = 0.0;
      else
        v34 = v31;
      *(float *)(a2 + 8) = v34;
      *(_DWORD *)(a2 + 12) = v28;
LABEL_23:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

BOOL WebCore::BasicComponentTransferFilterOperation::affectsOpacity(WebCore::BasicComponentTransferFilterOperation *this)
{
  return *((_BYTE *)this + 12) == 7;
}

BOOL WebCore::InvertLightnessFilterOperation::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 12) == *(unsigned __int8 *)(a1 + 12);
}

uint64_t WebCore::InvertLightnessFilterOperation::blend@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;

  if (a2 && *(unsigned __int8 *)(result + 12) != *(unsigned __int8 *)(a2 + 12))
  {
    v4 = (unsigned int *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = 6;
    *(_QWORD *)result = off_1E34162A8;
  }
  *a3 = result;
  return result;
}

uint64_t WebCore::InvertLightnessFilterOperation::transformColor(uint64_t a1, int8x16_t *a2)
{
  float32x2_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  float32x4_t v14;
  int8x16_t v17;

  v17 = vandq_s8(*a2, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a2), (int8x16_t)vcgezq_f32(*(float32x4_t *)a2)));
  v3 = vmla_n_f32(0, (float32x2_t)0x3CF5C28FBF451EB8, WebCore::hueRotate((float *)v17.i32));
  v6 = (float)(v3.f32[1] + (float)(v4 * 0.059)) + (float)(v5 * -0.89);
  v8 = vmla_n_f32(vmla_n_f32(vmla_n_f32(v3, (float32x2_t)0xBF3DB22D3D71A9FCLL, v4), (float32x2_t)vdup_n_s32(0xBDB645A2), v5), 0, v7);
  __asm { FMOV            V1.2S, #1.0 }
  *(float32x2_t *)v14.f32 = vadd_f32(v8, _D1);
  v14.f32[2] = (float)(v6 + (float)(v7 * 0.0)) + 1.0;
  v14.f32[3] = v7;
  __asm { FMOV            V2.4S, #1.0 }
  *a2 = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v14, (float32x4_t)_Q2), _Q2, (int8x16_t)v14), (int8x16_t)vcltzq_f32(v14));
  return 1;
}

float WebCore::hueRotate(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  if (v2 >= *a1)
    v4 = *a1;
  else
    v4 = a1[1];
  if (v2 >= *a1)
    v5 = a1[1];
  else
    v5 = *a1;
  if (v3 >= v4)
  {
    if (v3 >= v5)
      v5 = a1[2];
  }
  else
  {
    v4 = a1[2];
  }
  v6 = v5 - v4;
  v7 = v4 + v5;
  v8 = v7 * 0.5;
  if (v6 != 0.0)
  {
    if (v8 > 0.5)
      v7 = 2.0 - v7;
    v9 = v6 / v7;
    if ((float)(v6 / v7) != 0.0)
    {
      v10 = (float)((float)((float)(v1 - v2) / v6) * 60.0) + 240.0;
      if (v5 == v2)
        v10 = (float)((float)((float)(v3 - v1) / v6) * 60.0) + 120.0;
      v11 = (float)((float)((float)(v2 - v3) / v6) * 60.0) + 360.0;
      if (v5 == v1)
        v12 = v11;
      else
        v12 = v10;
      if (v12 >= 360.0)
        v12 = v12 + -360.0;
      v13 = fmodf((float)(v12 / 360.0) + 0.5, 1.0);
      v14 = v8 * (float)(v9 + 1.0);
      if (v8 > 0.5)
        v14 = (float)(v8 + v9) - (float)(v8 * v9);
      v15 = (float)(v13 * 6.0) + 2.0;
      if (v15 >= 0.0)
      {
        if (v15 >= 6.0)
          v15 = v15 + -6.0;
      }
      else
      {
        v15 = v15 + 6.0;
      }
      v16 = -(float)(v14 - (float)(v8 * 2.0));
      if (v15 >= 1.0)
      {
        v8 = v14;
        if (v15 >= 3.0)
        {
          v8 = v16;
          if (v15 < 4.0)
            return v16 + (float)((float)(v14 - v16) * (float)(4.0 - v15));
        }
      }
      else
      {
        return (float)((float)(v14 - (float)-(float)(v14 - (float)(v8 * 2.0))) * v15) - (float)(v14 - (float)(v8 * 2.0));
      }
    }
  }
  return v8;
}

uint64_t WebCore::InvertLightnessFilterOperation::inverseTransformColor(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, float *a8)
{
  float v9;
  float v10;
  float v11;
  float32x2_t v12;
  float32x4_t v18;
  __int32 v19;
  unsigned int v20;
  unsigned int v21;
  float v24;
  float32x2_t v25;
  float v26;

  v9 = a8[1];
  v10 = a8[2];
  v11 = a8[3];
  *(float *)&a6 = (float)(*a8 * -0.049) + 0.0;
  v24 = (float)((float)((float)((float)((float)(*a8 * -1.3) + 0.0) + (float)(v9 * -0.097)) + (float)(v10 * 0.147))
              + (float)(v11 * 0.0))
      + 1.25;
  v12 = vmla_n_f32(vmla_n_f32(vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0), (float32x2_t)0xBDC6A7F0BFAC6A7FLL, v9), (float32x2_t)0xBF8D4FDF3E158106, v10), 0, v11);
  __asm { FMOV            V1.2S, #1.25 }
  v25 = vadd_f32(v12, _D1);
  v26 = v11;
  v18.f32[0] = WebCore::hueRotate(&v24);
  v18.i32[1] = v19;
  v18.i64[1] = __PAIR64__(v21, v20);
  __asm { FMOV            V2.4S, #1.0 }
  *(int8x16_t *)a8 = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v18, (float32x4_t)_Q2), _Q2, (int8x16_t)v18), (int8x16_t)vcltzq_f32(v18));
  return 1;
}

uint64_t WebCore::BlurFilterOperation::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  float *v4;
  float v5;
  float v6;

  v2 = a2[12];
  if (v2 != a1[12])
    return 0;
  if (v2 != 10)
  {
    __break(0xC471u);
    JUMPOUT(0x19625C524);
  }
  v3 = a1[20];
  if (v3 != a2[20] || (a1[21] != 0) != (a2[21] != 0))
    return 0;
  if (v3 == 13)
    return 1;
  v4 = (float *)(a1 + 16);
  if (v3 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 16), (const WebCore::Length *)(a2 + 16));
  if (a1[22])
    v5 = *v4;
  else
    v5 = (float)*(int *)v4;
  v6 = *((float *)a2 + 4);
  if (!a2[22])
    v6 = (float)SLODWORD(v6);
  return v5 == v6;
}

int *WebCore::BlurFilterOperation::blend@<X0>(int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int **a5@<X8>, __n128 a6@<Q0>)
{
  int *v7;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  char v13;
  unsigned int v14;
  char v15;
  int v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  float v22;
  char v23;
  char v24;
  int v25;
  unsigned int v26;
  unsigned __int8 v27;
  __int16 v28;
  int v29;
  unsigned __int8 v30;
  char v31;
  char v32;
  float v33;
  unsigned __int8 v34;
  __int16 v35;

  v7 = result;
  if (a2)
  {
    v9 = *((unsigned __int8 *)result + 12);
    if (v9 != *(unsigned __int8 *)(a2 + 12))
    {
      v18 = (unsigned int *)(result + 2);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      *a5 = result;
      return result;
    }
    v10 = (unsigned __int8 *)(result + 4);
    if (a4)
    {
      v11 = *((_BYTE *)result + 20);
      goto LABEL_6;
    }
    if (v9 != 10)
    {
      __break(0xC471u);
      JUMPOUT(0x19625C7D4);
    }
    *(float *)&v26 = 0.0;
    HIBYTE(v28) = 0;
    v27 = *(_BYTE *)(a2 + 20);
    LOBYTE(v28) = *(_BYTE *)(a2 + 21);
    if (v27 - 2 >= 9)
    {
      if (v27 == 11)
      {
        v26 = *(unsigned int *)(a2 + 16);
        WebCore::Length::ref((int *)&v26);
      }
    }
    else
    {
      HIBYTE(v28) = *(_BYTE *)(a2 + 22);
      if (HIBYTE(v28))
        a6.n128_u32[0] = *(_DWORD *)(a2 + 16);
      v26 = *(unsigned int *)(a2 + 16);
    }
  }
  else
  {
    v10 = (unsigned __int8 *)(result + 4);
    v11 = *((_BYTE *)result + 20);
    if ((a4 & 1) != 0)
    {
LABEL_6:
      v33 = 0.0;
      v34 = v11;
      v35 = 0;
      WebCore::blend(v10, (unsigned __int8 *)&v33, a3, (uint64_t)&v29, a6);
      result = (int *)WTF::fastMalloc((WTF *)0x18);
      v12 = v30;
      v13 = v31;
      v14 = v30 - 2;
      if (v14 >= 9)
      {
        if (v30 == 11)
        {
          v25 = v29;
          v29 = 0;
          v30 = 0;
          result[2] = 1;
          *((_BYTE *)result + 12) = 10;
          *(_QWORD *)result = off_1E3416318;
          *((_BYTE *)result + 22) = 0;
          *((_BYTE *)result + 20) = 11;
          *((_BYTE *)result + 21) = v13;
          result[4] = v25;
          goto LABEL_10;
        }
        v15 = 0;
        v16 = 0;
      }
      else
      {
        v15 = v32;
        v16 = v29;
      }
      v30 = 0;
      result[2] = 1;
      *((_BYTE *)result + 12) = 10;
      *(_QWORD *)result = off_1E3416318;
      result[4] = 0;
      *((_BYTE *)result + 22) = 0;
      *((_BYTE *)result + 20) = v12;
      *((_BYTE *)result + 21) = v13;
      if (v14 <= 8)
      {
        *((_BYTE *)result + 22) = v15;
        result[4] = v16;
      }
LABEL_10:
      *a5 = result;
      if (v34 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v17 = (void *)LODWORD(v33);
        return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v17);
      }
      return result;
    }
    *(float *)&v26 = 0.0;
    v27 = v11;
    v28 = 0;
  }
  WebCore::blend((unsigned __int8 *)&v26, v10, a3, (uint64_t)&v33, a6);
  v20 = v34;
  if (v34 == 11 || v34 == 13)
    goto LABEL_47;
  if (!HIBYTE(v35))
  {
    if ((LODWORD(v33) & 0x80000000) != 0)
      goto LABEL_31;
LABEL_47:
    v23 = v35;
    if (v34 - 2 < 9)
    {
      v24 = HIBYTE(v35);
      v22 = v33;
      goto LABEL_49;
    }
    if (v34 == 11)
    {
      v22 = v33;
      result = (int *)WTF::fastMalloc((WTF *)0x18);
      goto LABEL_64;
    }
    v24 = 0;
LABEL_39:
    v22 = 0.0;
LABEL_49:
    result = (int *)WTF::fastMalloc((WTF *)0x18);
    if ((v20 - 2) < 9)
      goto LABEL_50;
    if (v20 != 11)
    {
      v24 = 0;
      v22 = 0.0;
      goto LABEL_50;
    }
LABEL_64:
    result[2] = 1;
    *((_BYTE *)result + 12) = 10;
    *(_QWORD *)result = off_1E3416318;
    *((_BYTE *)result + 22) = 0;
    *((_BYTE *)result + 20) = 11;
    *((_BYTE *)result + 21) = v23;
    goto LABEL_52;
  }
  if (v33 >= 0.0)
    goto LABEL_47;
LABEL_31:
  v20 = v27;
  if (v27 && v27 != 11)
  {
    if (!HIBYTE(v28))
    {
      if (*(float *)&v26 != 0.0)
        goto LABEL_36;
      goto LABEL_35;
    }
    if (*(float *)&v26 == 0.0)
LABEL_35:
      v20 = *((unsigned __int8 *)v7 + 20);
  }
LABEL_36:
  if (v20 != 11)
  {
    v24 = 0;
    v23 = 0;
    goto LABEL_39;
  }
  result = (int *)WTF::fastMalloc((WTF *)0x18);
  v22 = 0.0;
  v23 = 0;
  v24 = 0;
  v20 = 4;
LABEL_50:
  result[2] = 1;
  *((_BYTE *)result + 12) = 10;
  *(_QWORD *)result = off_1E3416318;
  result[4] = 0;
  *((_BYTE *)result + 22) = 0;
  *((_BYTE *)result + 20) = v20;
  *((_BYTE *)result + 21) = v23;
  if ((v20 - 2) > 8)
    goto LABEL_53;
  *((_BYTE *)result + 22) = v24;
LABEL_52:
  *((float *)result + 4) = v22;
LABEL_53:
  *a5 = result;
  if (v27 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v17 = (void *)v26;
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v17);
  }
  return result;
}

BOOL WebCore::BlurFilterOperation::isIdentity(WebCore::BlurFilterOperation *this)
{
  WebCore::Length *v2;
  int v3;
  float v4;
  float v5;

  v2 = (WebCore::BlurFilterOperation *)((char *)this + 16);
  v3 = *((unsigned __int8 *)this + 20);
  if (v3 == 4)
  {
    if (*((_BYTE *)this + 22))
      v4 = *(float *)v2;
    else
      v4 = (float)*(int *)v2;
  }
  else if (v3 == 3)
  {
    v5 = *((float *)this + 4);
    if (!*((_BYTE *)this + 22))
      v5 = (float)SLODWORD(v5);
    v4 = (float)(v5 * 0.0) / 100.0;
  }
  else
  {
    v4 = 0.0;
    if (v3 == 11)
      WebCore::Length::nonNanCalculatedValue(v2, 0.0);
  }
  return v4 <= 0.0;
}

uint64_t WebCore::BlurFilterOperation::outsets(WebCore::BlurFilterOperation *this)
{
  WebCore::Length *v2;
  int v3;
  float v4;
  float v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (WebCore::BlurFilterOperation *)((char *)this + 16);
  v3 = *((unsigned __int8 *)this + 20);
  switch(v3)
  {
    case 4:
      if (*((_BYTE *)this + 22))
        v4 = *(float *)v2;
      else
        v4 = (float)*(int *)v2;
      break;
    case 3:
      v5 = *((float *)this + 4);
      if (!*((_BYTE *)this + 22))
        v5 = (float)SLODWORD(v5);
      v4 = (float)(v5 * 0.0) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue(v2, 0.0);
      break;
    default:
      goto LABEL_18;
  }
  if (v4 == 0.0)
  {
LABEL_18:
    v8 = 0;
    v7 = 0;
    return v7 | v8;
  }
  v6 = vcvtms_u32_f32((float)(v4 * 1.88) + 0.5);
  if (v6 <= 2)
    v6 = 2;
  if (v6 >= 0x1F4)
    v6 = 500;
  v7 = (3 * v6) >> 1;
  v8 = v7 << 32;
  return v7 | v8;
}

BOOL WebCore::DropShadowFilterOperation::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(unsigned __int8 *)(a2 + 12);
  if (v2 != *(unsigned __int8 *)(a1 + 12))
    return 0;
  if (v2 != 11)
  {
    __break(0xC471u);
    JUMPOUT(0x19625CB0CLL);
  }
  v3 = *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  if (!v3 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
    return 0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if ((v4 & 0x8000000000000) != 0)
  {
    if ((v5 & 0x8000000000000) != 0
      && *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10))
    {
      return HIBYTE(v4) == HIBYTE(v5) && BYTE6(v4) == BYTE6(v5);
    }
    return 0;
  }
  return (v5 & 0x8000000000000) == 0 && v4 == v5;
}

uint64_t WebCore::DropShadowFilterOperation::blend@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>, double a6@<D5>, double a7@<D6>, double a8@<D7>)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  int v17;
  double v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  double v22;
  double v23;
  int v24;
  int v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  int v40;
  double v41;
  int v42;
  double v43;
  double v44;
  unsigned int v45;
  void *v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  double v50;
  double v51;
  uint64_t v52;
  double v53;
  int v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v59;
  int v60;
  double v61;
  int v62;
  double v63;
  double v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;

  if (a2)
  {
    v9 = *(unsigned __int8 *)(result + 12);
    if (v9 != *(unsigned __int8 *)(a2 + 12))
    {
      v20 = (unsigned int *)(result + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
      *a5 = result;
      return result;
    }
    if (!a4)
    {
      if (v9 != 11)
      {
        __break(0xC471u);
        JUMPOUT(0x19625CF90);
      }
      v11 = *(_DWORD *)(a2 + 16);
      v10 = *(_DWORD *)(a2 + 20);
      v12 = *(_DWORD *)(a2 + 24);
      v13 = *(_QWORD *)(a2 + 32);
      v80 = v13;
      if ((v13 & 0x8000000000000) != 0)
      {
        v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
      goto LABEL_20;
    }
  }
  else if ((a4 & 1) == 0)
  {
    v12 = 0;
    v11 = 0;
    v10 = 0;
    v80 = 0x1104000000000000;
LABEL_20:
    v24 = *(_DWORD *)(result + 16);
    v25 = *(unsigned __int8 *)(a3 + 10);
    if (v25 == 1)
    {
      v26 = *(double *)(a3 + 16);
      if (v26 != 0.0)
      {
        v27 = (int)(v26 * (double)v24);
        v11 += v27;
        v24 += v27;
      }
    }
    v28 = (double)v11;
    if (*(_BYTE *)(a3 + 9))
    {
      v28 = v28 + v28;
      v29 = (double)(v24 - v11);
    }
    else
    {
      v29 = (double)v24 - v28;
    }
    v50 = *(double *)a3;
    v51 = v28 + v29 * *(double *)a3;
    v52 = *(unsigned int *)(result + 20);
    if (v25 == 1)
    {
      v53 = *(double *)(a3 + 16);
      if (v53 != 0.0)
      {
        v54 = (int)(v53 * (double)(int)v52);
        v10 += v54;
        v52 = (v52 + v54);
      }
    }
    v55 = (double)v10;
    v56 = (v52 - v10);
    v57 = v55 + v55 + (double)(int)v56 * v50;
    v58 = v55 + ((double)(int)v52 - v55) * v50;
    if (!*(_BYTE *)(a3 + 9))
      v57 = v58;
    LODWORD(v56) = vcvtmd_s64_f64(v51 + 0.5);
    LODWORD(v52) = vcvtmd_s64_f64(v57 + 0.5);
    v59 = v56 | (v52 << 32);
    v60 = *(_DWORD *)(result + 24);
    if (v25 == 1)
    {
      v61 = *(double *)(a3 + 16);
      if (v61 != 0.0)
      {
        v62 = (int)(v61 * (double)v60);
        v12 += v62;
        v60 += v62;
      }
    }
    v63 = (double)v12 + (double)v12 + (double)(v60 - v12) * v50;
    v64 = (double)v12 + ((double)v60 - (double)v12) * v50;
    if (*(_BYTE *)(a3 + 9))
      v64 = v63;
    v65 = vcvtmd_s64_f64(v64 + 0.5);
    v66 = v65 & ~(v65 >> 31);
    WebCore::blend((unint64_t *)&v80, result + 32, a3, &v79, 0.5, a6, a7, a8);
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = 11;
    *(_QWORD *)result = off_1E3416388;
    *(_QWORD *)(result + 16) = v59;
    *(_DWORD *)(result + 24) = v66;
    v67 = v79;
    *(_QWORD *)(result + 32) = v79;
    if ((v67 & 0x8000000000000) != 0)
    {
      v73 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFLL);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 + 1, v73));
      v75 = v79;
      *a5 = result;
      if ((v75 & 0x8000000000000) != 0)
      {
        result = v75 & 0xFFFFFFFFFFFFLL;
        do
        {
          v76 = __ldaxr((unsigned int *)result);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, (unsigned int *)result));
        if (!v77)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v46);
        }
      }
    }
    else
    {
      *a5 = result;
    }
    if ((v80 & 0x8000000000000) == 0)
      return result;
    result = v80 & 0xFFFFFFFFFFFFLL;
    do
    {
      v78 = __ldaxr((unsigned int *)result);
      v49 = --v78 == 0;
    }
    while (__stlxr(v78, (unsigned int *)result));
LABEL_76:
    if (v49)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v46);
    }
    return result;
  }
  v16 = *(_DWORD *)(result + 16);
  v17 = *(unsigned __int8 *)(a3 + 10);
  if (v17 != 1 || (v18 = *(double *)(a3 + 16), v18 == 0.0))
  {
    v19 = 0;
  }
  else
  {
    v19 = (int)(v18 * 0.0);
    v16 += v19;
  }
  v22 = (double)v16;
  if (*(_BYTE *)(a3 + 9))
  {
    v22 = v22 + v22;
    v23 = (double)(v19 - v16);
  }
  else
  {
    v23 = (double)v19 - v22;
  }
  v30 = *(double *)a3;
  v31 = v22 + v23 * *(double *)a3;
  v32 = *(_DWORD *)(result + 20);
  if (v17 != 1 || (v33 = *(double *)(a3 + 16), v33 == 0.0))
  {
    v34 = 0;
  }
  else
  {
    v34 = (int)(v33 * 0.0);
    v32 += v34;
  }
  v35 = (double)v32;
  v36 = (v34 - v32);
  v37 = v35 + v35 + (double)(int)v36 * v30;
  v38 = v35 + ((double)(int)v34 - v35) * v30;
  if (!*(_BYTE *)(a3 + 9))
    v37 = v38;
  LODWORD(v36) = vcvtmd_s64_f64(v31 + 0.5);
  LODWORD(v34) = vcvtmd_s64_f64(v37 + 0.5);
  v39 = v36 | (v34 << 32);
  v40 = *(_DWORD *)(result + 24);
  if (v17 != 1 || (v41 = *(double *)(a3 + 16), v41 == 0.0))
  {
    v42 = 0;
  }
  else
  {
    v42 = (int)(v41 * 0.0);
    v40 += v42;
  }
  v43 = (double)v40 + (double)v40 + (double)(v42 - v40) * v30;
  v44 = (double)v40 + ((double)v42 - (double)v40) * v30;
  if (*(_BYTE *)(a3 + 9))
    v44 = v43;
  v45 = vcvtmd_s64_f64(v44 + 0.5);
  v79 = 0x1104000000000000;
  WebCore::blend((unint64_t *)(result + 32), (uint64_t)&v79, a3, &v80, 0.5, a6, a7, a8);
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 11;
  *(_QWORD *)result = off_1E3416388;
  *(_QWORD *)(result + 16) = v39;
  *(_DWORD *)(result + 24) = v45;
  v47 = v80;
  *(_QWORD *)(result + 32) = v80;
  if ((v47 & 0x8000000000000) != 0)
  {
    v68 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 + 1, v68));
    v70 = v80;
    *a5 = result;
    if ((v70 & 0x8000000000000) != 0)
    {
      result = v70 & 0xFFFFFFFFFFFFLL;
      do
      {
        v71 = __ldaxr((unsigned int *)result);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, (unsigned int *)result));
      if (!v72)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v46);
      }
    }
  }
  else
  {
    *a5 = result;
  }
  if ((v79 & 0x8000000000000) != 0)
  {
    result = v79 & 0xFFFFFFFFFFFFLL;
    do
    {
      v48 = __ldaxr((unsigned int *)result);
      v49 = --v48 == 0;
    }
    while (__stlxr(v48, (unsigned int *)result));
    goto LABEL_76;
  }
  return result;
}

BOOL WebCore::DropShadowFilterOperation::isIdentity(WebCore::DropShadowFilterOperation *this)
{
  int v1;

  v1 = *((_DWORD *)this + 6);
  if (v1 < 0)
    return 1;
  if (v1 || *((_DWORD *)this + 4))
    return 0;
  return *((_DWORD *)this + 5) == 0;
}

double WebCore::DropShadowFilterOperation::outsets(WebCore::DropShadowFilterOperation *this)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  float v5;
  float32x2_t v6;
  float32x2_t v7;
  int32x2_t v8;
  int8x16_t v9;
  double result;

  v1 = *((_DWORD *)this + 4);
  v2 = *((_DWORD *)this + 5);
  v3 = *((_DWORD *)this + 6);
  if (v3)
  {
    v4 = vcvtms_u32_f32((float)((float)v3 * 1.88) + 0.5);
    if (v4 <= 2)
      v4 = 2;
    if (v4 >= 0x1F4)
      v4 = 500;
    v5 = (float)((3 * v4) >> 1);
  }
  else
  {
    v5 = 0.0;
  }
  v6.f32[0] = v5 - (float)v2;
  v7.f32[0] = v5 + (float)v1;
  v6.f32[1] = v5 + (float)v2;
  v8 = vmax_s32(vcvt_s32_f32(v6), 0);
  v7.f32[1] = v5 - (float)v1;
  v9.i64[0] = v8.u32[0];
  v9.i64[1] = v8.u32[1];
  *(_QWORD *)&result = vorrq_s8((int8x16_t)vshll_n_s32(vmax_s32(vcvt_s32_f32(v7), 0), 0x20uLL), v9).u64[0];
  return result;
}

uint64_t WebCore::FilterOperations::FilterOperations(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v2;
  return result;
}

{
  uint64_t v2;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v2;
  return result;
}

uint64_t WebCore::FilterOperations::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 12))
    return 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)a1;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2 - 8;
    v6 = *(_QWORD **)a1;
    v7 = *(_QWORD **)a2;
    while (1)
    {
      v8 = v5;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v6 + 24))(*v6, *v7);
      if (!(_DWORD)result)
        break;
      ++v6;
      ++v7;
      v5 = v8 - 8;
      if (!v8)
        return v6 == &v4[v2] && v7 == &v3[v2];
    }
  }
  else
  {
    v7 = *(_QWORD **)a2;
    v6 = *(_QWORD **)a1;
    return v6 == &v4[v2] && v7 == &v3[v2];
  }
  return result;
}

unint64_t WebCore::FilterOperations::outsets(uint64_t **this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WebCore::Length *v9;
  int v10;
  float v11;
  unint64_t v12;
  int v13;
  int v14;
  float v15;
  unint64_t v16;

  v1 = *((unsigned int *)this + 3);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = *this;
    v6 = 8 * v1;
    do
    {
      v7 = *v5;
      v8 = *(unsigned __int8 *)(*v5 + 12);
      if (v8 == 11)
      {
        v12 = WebCore::FEGaussianBlur::calculateOutsetSize((float)*(int *)(v7 + 24), (float)*(int *)(v7 + 24));
        v14 = *(_DWORD *)(v7 + 16);
        v13 = *(_DWORD *)(v7 + 20);
        v2 += (HIDWORD(v12) - v13) & ~((HIDWORD(v12) - v13) >> 31);
        v3 = ((v14 + (_DWORD)v12) & ~((v14 + (int)v12) >> 31)) + v3;
        v4 = (((v13 + HIDWORD(v12)) & ~((v13 + HIDWORD(v12)) >> 31)) + v4) | ((unint64_t)((((_DWORD)v12 - v14) & ~(((int)v12 - v14) >> 31)) + HIDWORD(v4)) << 32);
      }
      else if (v8 == 10)
      {
        v9 = (WebCore::Length *)(v7 + 16);
        v10 = *(unsigned __int8 *)(v7 + 20);
        if (v10 == 4)
        {
          if (*(_BYTE *)(v7 + 22))
            v11 = *(float *)v9;
          else
            v11 = (float)*(int *)v9;
        }
        else if (v10 == 3)
        {
          v15 = *(float *)(v7 + 16);
          if (!*(_BYTE *)(v7 + 22))
            v15 = (float)*(int *)(v7 + 16);
          v11 = (float)(v15 * 0.0) / 100.0;
        }
        else
        {
          v11 = 0.0;
          if (v10 == 11)
            WebCore::Length::nonNanCalculatedValue(v9, 0.0);
        }
        v16 = WebCore::FEGaussianBlur::calculateOutsetSize(v11, v11);
        v2 += HIDWORD(v16);
        v3 = (v3 + v16);
        v4 = (v4 + (v16 << 32)) & 0xFFFFFFFF00000000 | (HIDWORD(v16) + v4);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  return v2 | (unint64_t)(v3 << 32);
}

float WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>(unint64_t *a1)
{
  unint64_t v1;
  char v3;
  __int128 v4;
  _QWORD v5[2];

  v1 = *a1;
  if ((*a1 & 0x8000000000000) == 0)
    return (float)bswap32(v1) / 255.0;
  v4 = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
  v5[0] = &v3;
  v5[1] = &v4;
  return _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v1), (uint64_t)v5);
}

uint64_t WebCore::convertColor<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>(float *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v1 = llroundf(*a1 * 255.0);
  v2 = 255;
  if (v1 >= 255)
    v1 = 255;
  v3 = v1 & ~(v1 >> 63);
  v4 = llroundf(a1[1] * 255.0);
  if (v4 >= 255)
    v4 = 255;
  v5 = llroundf(a1[2] * 255.0);
  v6 = v4 & ~(v4 >> 63);
  if (v5 >= 255)
    v7 = 255;
  else
    v7 = v5;
  v8 = v7 & ~(v7 >> 63);
  v9 = llroundf(a1[3] * 255.0);
  if (v9 < 255)
    v2 = v9;
  return ((v2 & ~(v2 >> 63)) << 24) | (v8 << 16) | (v6 << 8) | v3;
}

uint64_t WebCore::FilterOperations::inverseTransformColor(WebCore::FilterOperations *this, WebCore::Color *a2)
{
  uint64_t v2;
  unint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  __int128 v29;
  __int128 v30;

  v2 = *((unsigned int *)this + 3);
  if (!(_DWORD)v2)
    return 0;
  v4 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x5000000000000) != 0x4000000000000)
    return 0;
  if ((v4 & 0x8000000000000) == 0)
  {
    v5 = bswap32(v4);
    *(float *)&v30 = (float)v5 / 255.0;
    *(float32x2_t *)((char *)&v30 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v5), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v30 + 3) = (float)HIBYTE(v5) / 255.0;
    v6 = *(_QWORD **)this;
    goto LABEL_5;
  }
  v29 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
  *(_QWORD *)&v30 = &v28;
  *((_QWORD *)&v30 + 1) = &v29;
  v9 = _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v4), (uint64_t)&v30);
  v2 = *((unsigned int *)this + 3);
  *(_QWORD *)&v30 = __PAIR64__(LODWORD(v10), LODWORD(v9));
  *((_QWORD *)&v30 + 1) = __PAIR64__(LODWORD(v12), LODWORD(v11));
  if ((_DWORD)v2)
  {
    v6 = *(_QWORD **)this;
LABEL_5:
    v7 = &v6[v2];
    while (((*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v6 + 48))(*v6, &v30) & 1) != 0)
    {
      if (++v6 == v7)
      {
        v10 = *((float *)&v30 + 1);
        LODWORD(v9) = v30;
        v12 = *((float *)&v30 + 3);
        v11 = *((float *)&v30 + 2);
        goto LABEL_9;
      }
    }
    return 0;
  }
LABEL_9:
  v13 = llroundf(v9 * 255.0);
  v14 = 255;
  if (v13 >= 255)
    v13 = 255;
  v15 = v13 & ~(v13 >> 63);
  v16 = llroundf(v10 * 255.0);
  if (v16 >= 255)
    v16 = 255;
  v17 = v16 & ~(v16 >> 63);
  v18 = llroundf(v11 * 255.0);
  if (v18 >= 255)
    v18 = 255;
  v19 = v18 & ~(v18 >> 63);
  v20 = llroundf(v12 * 255.0);
  if (v20 < 255)
    v14 = v20;
  v21 = bswap32((v19 << 16) | ((v14 & ~(v14 >> 63)) << 24) | (v17 << 8) | v15) | 0x1104000000000000;
  v22 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x8000000000000) != 0 || v22 != v21)
  {
    if ((v22 & 0x8000000000000) != 0)
    {
      v25 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, v8);
      }
    }
    *(_QWORD *)a2 = v21;
  }
  return 1;
}

uint64_t WebCore::FilterOperations::hasFilterThatAffectsOpacity(uint64_t **this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((unsigned int *)this + 3);
  if (!(_DWORD)v1)
    return 0;
  v2 = *this;
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t WebCore::FilterOperations::canInterpolate(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v3 = *(uint64_t **)a1;
  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = *(uint64_t **)a1;
    while (*(_BYTE *)(*v6 + 12))
    {
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v7 = *(uint64_t **)a2;
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      v10 = *(uint64_t **)a2;
      while (*(_BYTE *)(*v10 + 12))
      {
        ++v10;
        v9 -= 8;
        if (!v9)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if (a3)
        return 1;
      if (v8 < v4)
        v4 = *(unsigned int *)(a2 + 12);
      if (!v4)
        return 1;
      while (1)
      {
        v12 = *v3;
        v13 = *v7;
        if ((*v3 != 0) != (*v7 != 0))
          break;
        v14 = !v12 || v13 == 0;
        if (!v14 && *(unsigned __int8 *)(v12 + 12) != *(unsigned __int8 *)(v13 + 12))
          break;
        ++v7;
        ++v3;
        if (!--v4)
          return 1;
      }
    }
  }
  return 0;
}

unsigned int *WebCore::FilterOperations::blend@<X0>(unsigned int *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  double *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  _QWORD *v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  void *v33;
  unsigned int *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  void *v85;
  int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  char *v101;
  uint64_t v102;
  unsigned int *v103;
  double *v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int *v108;
  char *v109;
  uint64_t v110;

  v4 = a2;
  v5 = result;
  v6 = a4;
  if (*(_BYTE *)(a3 + 9) == 1)
  {
    v7 = result[3];
    v8 = a2[3] + v7;
    if (v8)
    {
      if (v8 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19625E1D8);
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v8));
      v9 = result;
      v7 = v5[3];
      if (!(_DWORD)v7)
        goto LABEL_33;
    }
    else
    {
      v9 = 0;
      if (!(_DWORD)v7)
      {
LABEL_33:
        v28 = v4[3];
        if ((_DWORD)v28)
        {
          v29 = *(_QWORD **)v4;
          if (v7 + v28 > v8)
          {
            v30 = v8 + ((unint64_t)v8 >> 2);
            if (v30 >= 0x10)
              v31 = v30 + 1;
            else
              v31 = 16;
            if (v31 <= v7 + v28)
              v8 = v7 + v28;
            else
              v8 = v31;
            if (v8 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x19625E1F8);
            }
            v32 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v8));
            result = (unsigned int *)memcpy(v32, v9, 8 * v7);
            if (v9)
            {
              if (v32 == v9)
              {
                v32 = 0;
                LODWORD(v8) = 0;
              }
              result = (unsigned int *)WTF::fastFree((WTF *)v9, v33);
            }
            v9 = v32;
          }
          v34 = &v9[2 * v7];
          v35 = &v29[v28];
          do
          {
            v36 = *v29;
            v37 = (unsigned int *)(*v29 + 8);
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 + 1, v37));
            *(_QWORD *)v34 = v36;
            v34 += 2;
            ++v29;
          }
          while (v29 != v35);
          LODWORD(v7) = v7 + v28;
        }
        *(_QWORD *)v6 = v9;
        *(_DWORD *)(v6 + 8) = v8;
        *(_DWORD *)(v6 + 12) = v7;
        return result;
      }
    }
    v19 = *(_QWORD **)v5;
    if (v7 > v8)
    {
      v20 = ((unint64_t)v8 >> 2) + v8;
      if (v20 >= 0x10)
        v21 = v20 + 1;
      else
        v21 = 16;
      if (v21 <= v7)
        v8 = v7;
      else
        v8 = v21;
      if (v8 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19625E1F0);
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v8));
      if (v9)
      {
        if (result == v9)
          v103 = 0;
        else
          v103 = result;
        if (result == v9)
          LODWORD(v8) = 0;
        result = (unsigned int *)WTF::fastFree((WTF *)v9, v22);
        v9 = v103;
      }
      else
      {
        v9 = result;
      }
    }
    v23 = &v19[v7];
    v24 = v9;
    do
    {
      v25 = *v19;
      v26 = (unsigned int *)(*v19 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      *(_QWORD *)v24 = v25;
      v24 += 2;
      ++v19;
    }
    while (v19 != v23);
    goto LABEL_33;
  }
  v10 = (double *)a3;
  if (!*(_BYTE *)(a3 + 8))
  {
    v39 = result[3];
    v40 = a2[3];
    if (v39 <= v40)
      v41 = a2[3];
    else
      v41 = result[3];
    v110 = 0;
    if (!v41)
    {
      v101 = 0;
      v102 = 0;
LABEL_148:
      *(_QWORD *)v6 = v101;
      *(_QWORD *)(v6 + 8) = v102;
      return result;
    }
    if (v41 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19625E200);
    }
    v42 = v41;
    v43 = 0;
    LODWORD(v110) = v41;
    v109 = (char *)WTF::fastMalloc((WTF *)(8 * v41));
    v106 = v42;
    v107 = v40;
    v105 = v10;
    while (1)
    {
      if (v43 >= v39)
      {
        v44 = 0;
      }
      else
      {
        if (v43 >= v5[3])
        {
          __break(0xC471u);
          goto LABEL_168;
        }
        v44 = *(unsigned int **)(*(_QWORD *)v5 + 8 * v43);
        if (v44)
        {
          v45 = v44 + 2;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 + 1, v45));
        }
      }
      if (v43 >= v40)
        goto LABEL_70;
      if (v43 >= v4[3])
      {
        __break(0xC471u);
        JUMPOUT(0x19625E1D0);
      }
      v47 = *(unsigned int **)(*(_QWORD *)v4 + 8 * v43);
      if (v47)
      {
        v48 = v47 + 2;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 + 1, v48));
        (*(void (**)(unsigned int **__return_ptr, unsigned int *, unsigned int *, double *, _QWORD))(*(_QWORD *)v47 + 32))(&v108, v47, v44, v10, 0);
        v50 = v108;
        v51 = 1;
        if (v108)
        {
LABEL_72:
          v108 = v50;
          LODWORD(v52) = HIDWORD(v110);
          if (HIDWORD(v110) == (_DWORD)v110)
          {
            v53 = WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v109, HIDWORD(v110) + 1, (unint64_t)&v108);
            v52 = HIDWORD(v110);
            v54 = v109;
            v55 = *(_QWORD *)v53;
            *(_QWORD *)v53 = 0;
            *(_QWORD *)&v54[8 * v52] = v55;
          }
          else
          {
            v108 = 0;
            *(_QWORD *)&v109[8 * HIDWORD(v110)] = v50;
          }
          HIDWORD(v110) = v52 + 1;
          result = v108;
          v108 = 0;
          if (result)
          {
            v56 = result + 2;
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
            {
              atomic_store(1u, result + 2);
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
            }
          }
          goto LABEL_129;
        }
      }
      else
      {
LABEL_70:
        if (v44)
        {
          (*(void (**)(unsigned int **__return_ptr, unsigned int *, _QWORD, double *, uint64_t))(*(_QWORD *)v44 + 32))(&v108, v44, 0, v10, 1);
          v51 = 0;
          v47 = 0;
          v50 = v108;
          if (v108)
            goto LABEL_72;
        }
        else
        {
          v47 = 0;
          v51 = 0;
        }
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      v59 = result;
      result[2] = 1;
      v60 = result + 2;
      *((_BYTE *)result + 12) = 12;
      *(_QWORD *)result = off_1E3416428;
      if (*v10 <= 0.5)
      {
        if (v44)
        {
          v108 = v44;
          LODWORD(v65) = HIDWORD(v110);
          if (HIDWORD(v110) == (_DWORD)v110)
          {
            v66 = WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v109, HIDWORD(v110) + 1, (unint64_t)&v108);
            v65 = HIDWORD(v110);
            v67 = v109;
            v68 = *(_QWORD *)v66;
            *(_QWORD *)v66 = 0;
            *(_QWORD *)&v67[8 * v65] = v68;
          }
          else
          {
            v108 = 0;
            *(_QWORD *)&v109[8 * HIDWORD(v110)] = v44;
          }
          HIDWORD(v110) = v65 + 1;
          result = v108;
          v108 = 0;
          if (result)
          {
            v87 = result + 2;
            do
            {
              v88 = __ldaxr(v87);
              v89 = v88 - 1;
            }
            while (__stlxr(v89, v87));
            if (!v89)
            {
              atomic_store(1u, result + 2);
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
            }
          }
          v44 = 0;
          goto LABEL_125;
        }
        v79 = HIDWORD(v110);
        if (HIDWORD(v110) != (_DWORD)v110)
        {
          v44 = 0;
          *(_QWORD *)&v109[8 * HIDWORD(v110)] = result;
          HIDWORD(v110) = v79 + 1;
          goto LABEL_128;
        }
        v80 = HIDWORD(v110) + ((unint64_t)HIDWORD(v110) >> 2);
        if (v80 >= 0x10)
          v81 = v80 + 1;
        else
          v81 = 16;
        if (v81 <= (unint64_t)HIDWORD(v110) + 1)
          v82 = HIDWORD(v110) + 1;
        else
          v82 = v81;
        if (v82 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19625E1E8);
        }
        v83 = v109;
        v84 = (char *)WTF::fastMalloc((WTF *)(8 * v82));
        LODWORD(v110) = v82;
        v109 = v84;
        result = (unsigned int *)memcpy(v84, v83, 8 * v79);
        v42 = v106;
        if (v83)
        {
          if (v109 == v83)
          {
            v109 = 0;
            LODWORD(v110) = 0;
          }
          result = (unsigned int *)WTF::fastFree((WTF *)v83, v85);
        }
        v44 = 0;
      }
      else
      {
        if (v51)
        {
          v108 = v47;
          LODWORD(v61) = HIDWORD(v110);
          if (HIDWORD(v110) == (_DWORD)v110)
          {
            v62 = WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v109, HIDWORD(v110) + 1, (unint64_t)&v108);
            v61 = HIDWORD(v110);
            v63 = v109;
            v64 = *(_QWORD *)v62;
            *(_QWORD *)v62 = 0;
            *(_QWORD *)&v63[8 * v61] = v64;
          }
          else
          {
            v108 = 0;
            *(_QWORD *)&v109[8 * HIDWORD(v110)] = v47;
          }
          HIDWORD(v110) = v61 + 1;
          result = v108;
          v108 = 0;
          if (result)
          {
            v90 = result + 2;
            do
            {
              v91 = __ldaxr(v90);
              v92 = v91 - 1;
            }
            while (__stlxr(v92, v90));
            if (!v92)
            {
              atomic_store(1u, result + 2);
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
            }
          }
          v47 = 0;
          do
          {
LABEL_125:
            v93 = __ldaxr(v60);
            v94 = v93 - 1;
          }
          while (__stlxr(v94, v60));
          if (!v94)
          {
            atomic_store(1u, v59 + 2);
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v59 + 8))(v59);
          }
          goto LABEL_128;
        }
        v69 = HIDWORD(v110);
        if (HIDWORD(v110) != (_DWORD)v110)
        {
          *(_QWORD *)&v109[8 * HIDWORD(v110)] = result;
          HIDWORD(v110) = v69 + 1;
LABEL_128:
          v42 = v106;
          v40 = v107;
          goto LABEL_129;
        }
        v70 = v5;
        v71 = v4;
        v72 = v39;
        v73 = HIDWORD(v110) + ((unint64_t)HIDWORD(v110) >> 2);
        if (v73 >= 0x10)
          v74 = v73 + 1;
        else
          v74 = 16;
        if (v74 <= (unint64_t)HIDWORD(v110) + 1)
          v75 = HIDWORD(v110) + 1;
        else
          v75 = v74;
        if (v75 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19625E1E0);
        }
        v76 = v109;
        v77 = (char *)WTF::fastMalloc((WTF *)(8 * v75));
        LODWORD(v110) = v75;
        v109 = v77;
        memcpy(v77, v76, 8 * v69);
        result = (unsigned int *)v76;
        v39 = v72;
        v4 = v71;
        v5 = v70;
        v10 = v105;
        v42 = v106;
        if (result)
        {
          if (v109 == (char *)result)
          {
            v109 = 0;
            LODWORD(v110) = 0;
          }
          result = (unsigned int *)WTF::fastFree((WTF *)result, v78);
        }
      }
      v86 = HIDWORD(v110) + 1;
      *(_QWORD *)&v109[8 * HIDWORD(v110)] = v59;
      HIDWORD(v110) = v86;
      v40 = v107;
      if (!v47)
        goto LABEL_133;
LABEL_129:
      v95 = v47 + 2;
      do
      {
        v96 = __ldaxr(v95);
        v97 = v96 - 1;
      }
      while (__stlxr(v97, v95));
      if (!v97)
      {
        atomic_store(1u, v47 + 2);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
        if (v44)
        {
LABEL_134:
          v98 = v44 + 2;
          do
          {
            v99 = __ldaxr(v98);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, v98));
          if (!v100)
          {
            atomic_store(1u, v44 + 2);
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
          }
        }
      }
      else
      {
LABEL_133:
        if (v44)
          goto LABEL_134;
      }
      if (++v43 == v42)
      {
        v101 = v109;
        v102 = v110;
        v6 = a4;
        goto LABEL_148;
      }
    }
  }
  if (*(double *)a3 == 0.0)
    v11 = result;
  else
    v11 = a2;
  v12 = v11[3];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 12) = v12;
  if ((_DWORD)v12)
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
LABEL_168:
      JUMPOUT(0x19625E1C8);
    }
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(v6 + 8) = v12;
    *(_QWORD *)v6 = result;
    v13 = v11[3];
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD **)v11;
      v15 = *(_QWORD *)v11 + 8 * v13;
      do
      {
        v16 = *v14;
        v17 = (unsigned int *)(*v14 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        *(_QWORD *)result = v16;
        result += 2;
        ++v14;
      }
      while (v14 != (_QWORD *)v15);
    }
  }
  return result;
}

uint64_t WebCore::DefaultFilterOperation::clone@<X0>(WebCore::DefaultFilterOperation *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = WTF::fastMalloc((WTF *)0x10);
  v5 = *((_BYTE *)this + 13);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 13;
  *(_QWORD *)result = off_1E3416158;
  *(_BYTE *)(result + 13) = v5;
  *a2 = result;
  return result;
}

void WebCore::FilterOperation::blend(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::FilterOperation::transformColor()
{
  return 0;
}

uint64_t WebCore::FilterOperation::inverseTransformColor()
{
  return 0;
}

uint64_t WebCore::FilterOperation::isIdentity(WebCore::FilterOperation *this)
{
  return 0;
}

uint64_t WebCore::FilterOperation::outsets(WebCore::FilterOperation *this)
{
  return 0;
}

uint64_t WebCore::FilterOperation::affectsOpacity(WebCore::FilterOperation *this)
{
  return 0;
}

uint64_t WebCore::FilterOperation::movesPixels(WebCore::FilterOperation *this)
{
  return 0;
}

uint64_t WebCore::FilterOperation::shouldBeRestrictedBySecurityOrigin(WebCore::FilterOperation *this)
{
  return 0;
}

double WebCore::BasicColorMatrixFilterOperation::clone@<D0>(WebCore::BasicColorMatrixFilterOperation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;
  char v6;

  v4 = WTF::fastMalloc((WTF *)0x18);
  result = *((double *)this + 2);
  v6 = *((_BYTE *)this + 12);
  *(_DWORD *)(v4 + 8) = 1;
  *(_BYTE *)(v4 + 12) = v6;
  *(_QWORD *)v4 = off_1E34161C8;
  *(double *)(v4 + 16) = result;
  *a2 = v4;
  return result;
}

uint64_t WebCore::BasicColorMatrixFilterOperation::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a2 + 12);
  if (v2 != *(unsigned __int8 *)(a1 + 12))
    return 0;
  if ((v2 - 1) < 4)
    return *(double *)(a1 + 16) == *(double *)(a2 + 16);
  result = 96;
  __break(0xC471u);
  return result;
}

double WebCore::BasicComponentTransferFilterOperation::clone@<D0>(WebCore::BasicComponentTransferFilterOperation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;
  char v6;

  v4 = WTF::fastMalloc((WTF *)0x18);
  result = *((double *)this + 2);
  v6 = *((_BYTE *)this + 12);
  *(_DWORD *)(v4 + 8) = 1;
  *(_BYTE *)(v4 + 12) = v6;
  *(_QWORD *)v4 = off_1E3416238;
  *(double *)(v4 + 16) = result;
  *a2 = v4;
  return result;
}

uint64_t WebCore::BasicComponentTransferFilterOperation::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a2 + 12);
  if (v2 != *(unsigned __int8 *)(a1 + 12))
    return 0;
  if ((v2 - 7) < 3 || v2 == 5)
    return *(double *)(a1 + 16) == *(double *)(a2 + 16);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::InvertLightnessFilterOperation::clone@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 6;
  *(_QWORD *)result = off_1E34162A8;
  *a1 = result;
  return result;
}

void WebCore::BlurFilterOperation::~BlurFilterOperation(WebCore::BlurFilterOperation *this)
{
  *(_QWORD *)this = off_1E3416318;
  if (*((_BYTE *)this + 20) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 4));
  }
}

void WebCore::BlurFilterOperation::~BlurFilterOperation(WebCore::BlurFilterOperation *this, void *a2)
{
  *(_QWORD *)this = off_1E3416318;
  if (*((_BYTE *)this + 20) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 4));
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::BlurFilterOperation::clone@<X0>(WebCore::BlurFilterOperation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  char v7;
  unsigned int v8;
  char v9;
  int v10;
  int *v11;
  int v12;
  unsigned __int8 v13;
  char v14;
  char v15;

  result = WTF::fastMalloc((WTF *)0x18);
  v5 = result;
  v15 = 0;
  v13 = *((_BYTE *)this + 20);
  v6 = v13;
  v7 = *((_BYTE *)this + 21);
  v14 = v7;
  v8 = v13 - 2;
  if (v8 >= 9)
  {
    if (v13 == 11)
    {
      v12 = *((_DWORD *)this + 4);
      v10 = v12;
      result = (uint64_t)WebCore::Length::ref(&v12);
      *(_DWORD *)(v5 + 8) = 1;
      *(_BYTE *)(v5 + 12) = 10;
      *(_QWORD *)v5 = off_1E3416318;
      v11 = (int *)(v5 + 16);
      *(_BYTE *)(v5 + 22) = 0;
      *(_BYTE *)(v5 + 20) = 11;
      *(_BYTE *)(v5 + 21) = v7;
      goto LABEL_9;
    }
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = *((_BYTE *)this + 22);
    v10 = *((_DWORD *)this + 4);
    if (v9)
      v9 = 1;
  }
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 10;
  *(_QWORD *)result = off_1E3416318;
  *(_DWORD *)(result + 16) = 0;
  v11 = (int *)(result + 16);
  *(_BYTE *)(result + 22) = 0;
  *(_BYTE *)(result + 20) = v6;
  *(_BYTE *)(result + 21) = v7;
  if (v8 >= 9)
  {
    if (v6 != 11)
      goto LABEL_10;
  }
  else
  {
    *(_BYTE *)(result + 22) = v9;
  }
LABEL_9:
  *v11 = v10;
LABEL_10:
  *a2 = v5;
  return result;
}

uint64_t WebCore::BlurFilterOperation::affectsOpacity(WebCore::BlurFilterOperation *this)
{
  return 1;
}

uint64_t WebCore::BlurFilterOperation::movesPixels(WebCore::BlurFilterOperation *this)
{
  return 1;
}

void WebCore::DropShadowFilterOperation::~DropShadowFilterOperation(WebCore::DropShadowFilterOperation *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E3416388;
  v2 = *((_QWORD *)this + 4);
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  WTF *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  BOOL v6;

  v2 = this;
  *(_QWORD *)this = off_1E3416388;
  v3 = *((_QWORD *)this + 4);
  if ((v3 & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(v4);
      v6 = --v5 == 0;
    }
    while (__stlxr(v5, v4));
    v2 = this;
    if (v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
      v2 = this;
    }
  }
  WTF::fastFree(v2, a2);
}

uint64_t WebCore::DropShadowFilterOperation::clone@<X0>(WebCore::DropShadowFilterOperation *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  result = WTF::fastMalloc((WTF *)0x28);
  v5 = *((_QWORD *)this + 2);
  v6 = *((_DWORD *)this + 6);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 11;
  *(_QWORD *)result = off_1E3416388;
  *(_QWORD *)(result + 16) = v5;
  *(_DWORD *)(result + 24) = v6;
  v7 = *((_QWORD *)this + 4);
  *(_QWORD *)(result + 32) = v7;
  if ((v7 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *a2 = result;
  return result;
}

uint64_t WebCore::DropShadowFilterOperation::affectsOpacity(WebCore::DropShadowFilterOperation *this)
{
  return 1;
}

uint64_t WebCore::DropShadowFilterOperation::movesPixels(WebCore::DropShadowFilterOperation *this)
{
  return 1;
}

void WebCore::FETile::~FETile(WebCore::FETile *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v4, v5);
}

void WebCore::FETurbulence::~FETurbulence(WebCore::FETurbulence *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::FETurbulence::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 48) != 18 || *(_BYTE *)(a1 + 48) != 18)
    return 0;
  result = CGColorSpaceEqualToColorSpace();
  if (!(_DWORD)result)
    return result;
  return *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64)
      && *(float *)(a1 + 68) == *(float *)(a2 + 68)
      && *(float *)(a1 + 72) == *(float *)(a2 + 72)
      && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76)
      && *(float *)(a1 + 80) == *(float *)(a2 + 80)
      && *(unsigned __int8 *)(a1 + 84) == *(unsigned __int8 *)(a2 + 84);
}

uint64_t WebCore::FETurbulence::numberOfEffectInputs(WebCore::FETurbulence *this)
{
  return 0;
}

void WebCore::ReferenceFilterOperation::clone(WebCore::ReferenceFilterOperation *this)
{
  __break(0xC471u);
}

uint64_t WebCore::ReferenceFilterOperation::affectsOpacity(WebCore::ReferenceFilterOperation *this)
{
  return 1;
}

uint64_t WebCore::ReferenceFilterOperation::movesPixels(WebCore::ReferenceFilterOperation *this)
{
  return 1;
}

uint64_t WebCore::ReferenceFilterOperation::shouldBeRestrictedBySecurityOrigin(WebCore::ReferenceFilterOperation *this)
{
  return 1;
}

void WebCore::FilterFunction::apply(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::FilterFunction::createFilterStyles(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

float WebCore::Filter::resolvedSize(WebCore::Filter *this, const WebCore::FloatSize *a2)
{
  return *(float *)a2;
}

float WebCore::Filter::resolvedPoint3D(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

_QWORD *WTF::Vector<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::inputPrimitiveSubregions(WTF::Vector<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  *result = 0;
  result[1] = 0;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v2));
      *((_DWORD *)v4 + 2) = v2;
      *v4 = result;
      v5 = *(_DWORD *)(a2 + 12);
      if (v5)
      {
        v6 = *(uint64_t **)a2;
        v7 = *(unsigned int *)(a2 + 12);
        do
        {
          v8 = *v6++;
          *(_OWORD *)result = *(_OWORD *)(v8 + 4);
          result += 2;
          --v7;
        }
        while (v7);
        *((_DWORD *)v4 + 3) = v5;
      }
    }
  }
  return result;
}

uint64_t WebCore::PassthroughFilterOperation::clone@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 12;
  *(_QWORD *)result = off_1E3416428;
  *a1 = result;
  return result;
}

BOOL WebCore::PassthroughFilterOperation::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 12) == *(unsigned __int8 *)(a1 + 12);
}

WebCore::FilterImage *WTF::RefCounted<WebCore::FilterImage>::deref(WebCore::FilterImage *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::FilterImage::~FilterImage(result, a2);
    return (WebCore::FilterImage *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t std::swap[abi:sn180100]<WebCore::FilterStyle>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unsigned int v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[80];
  unsigned int v22;
  unsigned __int8 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v3 = result;
  v26 = *MEMORY[0x1E0C80C00];
  v21[0] = 0;
  v23 = 0;
  v4 = *(unsigned __int8 *)(result + 88);
  if (*(_BYTE *)(result + 88))
  {
    v22 = -1;
    v5 = *(unsigned int *)(result + 80);
    if ((_DWORD)v5 == -1)
    {
      v4 = 1;
    }
    else
    {
      result = ((uint64_t (*)(uint64_t *, _BYTE *, uint64_t))off_1E3416488[v5])(&v20, v21, result);
      v22 = v5;
      v4 = *(unsigned __int8 *)(v3 + 88);
    }
    v23 = 1;
  }
  v6 = (_OWORD *)(v3 + 96);
  v7 = *(_OWORD *)(v3 + 112);
  v24 = *(_OWORD *)(v3 + 96);
  v25 = v7;
  if (v4 == *(unsigned __int8 *)(a2 + 88))
  {
    if (!v4)
      goto LABEL_20;
    v8 = *(unsigned int *)(v3 + 80);
    v9 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v8 == -1)
    {
      if ((_DWORD)v9 == -1)
        goto LABEL_20;
    }
    else if ((_DWORD)v9 == -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v8])(&v20, v3);
      *(_DWORD *)(v3 + 80) = -1;
      goto LABEL_20;
    }
    v20 = v3;
    result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E34164A0 + v9))(&v20, v3, a2);
  }
  else if (v4)
  {
    v10 = *(unsigned int *)(v3 + 80);
    if ((_DWORD)v10 != -1)
      result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v10])(&v20, v3);
    *(_DWORD *)(v3 + 80) = -1;
    *(_BYTE *)(v3 + 88) = 0;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_DWORD *)(v3 + 80) = -1;
    v11 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v11 != -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E3416488[v11])(&v20, v3, a2);
      *(_DWORD *)(v3 + 80) = v11;
    }
    *(_BYTE *)(v3 + 88) = 1;
  }
LABEL_20:
  v12 = (_OWORD *)(a2 + 96);
  v13 = *(_OWORD *)(a2 + 112);
  *v6 = *(_OWORD *)(a2 + 96);
  v6[1] = v13;
  if (*(unsigned __int8 *)(a2 + 88) != v23)
  {
    if (*(_BYTE *)(a2 + 88))
    {
      v15 = *(unsigned int *)(a2 + 80);
      if ((_DWORD)v15 != -1)
        result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v15])(&v20, a2);
      *(_DWORD *)(a2 + 80) = -1;
      *(_BYTE *)(a2 + 88) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_DWORD *)(a2 + 80) = -1;
      v17 = v22;
      if (v22 != -1)
      {
        result = ((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))off_1E3416488[v22])(&v20, a2, v21);
        *(_DWORD *)(a2 + 80) = v17;
      }
      *(_BYTE *)(a2 + 88) = 1;
    }
    goto LABEL_35;
  }
  if (!*(_BYTE *)(a2 + 88))
  {
    v16 = v25;
    *v12 = v24;
    *(_OWORD *)(a2 + 112) = v16;
    return result;
  }
  v14 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v14 == -1)
  {
    if (v22 == -1)
      goto LABEL_35;
  }
  else if (v22 == -1)
  {
    result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v14])(&v20, a2);
    *(_DWORD *)(a2 + 80) = -1;
    goto LABEL_35;
  }
  v20 = a2;
  result = ((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))*(&off_1E34164A0 + v22))(&v20, a2, v21);
LABEL_35:
  v18 = v23;
  v19 = v25;
  *v12 = v24;
  *(_OWORD *)(a2 + 112) = v19;
  if (v18)
  {
    if (v22 != -1)
      return ((uint64_t (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v22])(&v20, v21);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *a3;
      a2[2] = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v6;
      v7 = *((_QWORD *)a2 + 2);
      v8 = a3[2];
      if ((v7 & 0x8000000000000) != 0)
      {
        if ((v8 & 0x8000000000000) == 0)
          goto LABEL_8;
        v18 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
        v17 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
        v15 = a2;
        result = WebCore::operator==<float,4ul>((float *)&v18, (float *)&v17);
        a2 = v15;
        v7 = v15[2];
        if (!(_DWORD)result)
          goto LABEL_8;
        v16 = a3[2];
        if (HIBYTE(v7) != HIBYTE(v16) || BYTE6(v7) != BYTE6(v16))
          goto LABEL_8;
      }
      else if (v7 != v8 || (v8 & 0x8000000000000) != 0)
      {
LABEL_8:
        if ((v7 & 0x8000000000000) != 0)
        {
          v12 = a2;
          result = v7 & 0xFFFFFFFFFFFFLL;
          do
          {
            v13 = __ldaxr((unsigned int *)result);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, (unsigned int *)result));
          if (!v14)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, a2);
            a2 = v12;
          }
        }
        *((_QWORD *)a2 + 2) = a3[2];
        a3[2] = 0;
      }
      *((_QWORD *)a2 + 3) = a3[3];
      return result;
    }
    result = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v5])(&v18, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  v10 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v4 = v10;
  *(_QWORD *)(v4 + 16) = 0;
  v11 = a3[2];
  if (v11)
  {
    *(_QWORD *)(v4 + 16) = v11;
    a3[2] = 0;
  }
  *(_QWORD *)(v4 + 24) = a3[3];
  *(_DWORD *)(v4 + 80) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 80) = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *(_OWORD *)a2 = *(_OWORD *)a3;
      result = *(__n128 *)(a3 + 16);
      v7 = *(_OWORD *)(a3 + 32);
      v8 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v8;
      *(__n128 *)(a2 + 16) = result;
      *(_OWORD *)(a2 + 32) = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  *(_OWORD *)v4 = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  v9 = *(_OWORD *)(a3 + 32);
  v10 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 64) = v10;
  *(__n128 *)(v4 + 16) = result;
  *(_OWORD *)(v4 + 32) = v9;
  *(_DWORD *)(v4 + 80) = 2;
  return result;
}

uint64_t WTF::Vector<WebCore::FilterStyle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    v5 = *(WTF **)result;
    if (v4 > a2)
    {
      v6 = (char *)v5 + 128 * a2;
      v7 = (v4 << 7) - (a2 << 7);
      do
      {
        if (v6[88])
        {
          v8 = *((unsigned int *)v6 + 20);
          if ((_DWORD)v8 != -1)
            result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v8])(&v17, v6);
          *((_DWORD *)v6 + 20) = -1;
        }
        v6 += 128;
        v7 -= 128;
      }
      while (v7);
      *(_DWORD *)(v3 + 12) = a2;
      v5 = *(WTF **)v3;
      LODWORD(v4) = a2;
    }
    if (a2)
    {
      if (a2 >> 25)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(a2 << 7));
      *(_DWORD *)(v3 + 8) = a2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4)
      {
        v9 = result;
        if ((WTF *)result != v5)
        {
          v10 = 0;
          v11 = (unint64_t)v4 << 7;
          do
          {
            v12 = v9 + v10;
            v13 = (char *)v5 + v10;
            *(_BYTE *)v12 = 0;
            *(_BYTE *)(v12 + 88) = 0;
            if (*((_BYTE *)v5 + v10 + 88))
            {
              *(_DWORD *)(v12 + 80) = -1;
              v14 = *((unsigned int *)v13 + 20);
              if ((_DWORD)v14 != -1)
              {
                result = ((uint64_t (*)(char *, uint64_t, char *))off_1E3416488[v14])(&v18, v9 + v10, (char *)v5 + v10);
                *(_DWORD *)(v12 + 80) = v14;
              }
              *(_BYTE *)(v12 + 88) = 1;
            }
            v15 = *((_OWORD *)v13 + 7);
            *(_OWORD *)(v12 + 96) = *((_OWORD *)v13 + 6);
            *(_OWORD *)(v12 + 112) = v15;
            if (v13[88])
            {
              v16 = *(unsigned int *)((char *)v5 + v10 + 80);
              if ((_DWORD)v16 != -1)
                result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v16])(&v19, (char *)v5 + v10);
              *(_DWORD *)((char *)v5 + v10 + 80) = -1;
            }
            v10 += 128;
          }
          while (v11 != v10);
        }
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

_QWORD *WebCore::FilterResults::FilterResults(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v3;

  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E340D360;
  }
  a1[2] = v3;
  return a1;
}

{
  _QWORD *v3;

  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E340D360;
  }
  a1[2] = v3;
  return a1;
}

unint64_t WebCore::FilterResults::memoryCost(WebCore::FilterResults *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char v8;
  unint64_t result;

  v2 = (char *)WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::begin(this);
  v3 = v2;
  v5 = v4;
  if (this)
    v6 = (char *)this + 16 * *((unsigned int *)this - 1);
  else
    v6 = 0;
  if (v6 == v2)
    return 0;
  v7 = 0;
  v8 = 0;
  do
  {
    result = WebCore::FilterImage::memoryCost(*((_QWORD *)v3 + 1));
    if (__CFADD__(v7, result))
      v8 = 1;
    if (!__CFADD__(v7, result))
      v7 += result;
    while (1)
    {
      v3 += 16;
      if (v3 == v5)
        break;
      if ((unint64_t)(*(_QWORD *)v3 + 1) > 1)
        goto LABEL_14;
    }
    v3 = v5;
LABEL_14:
    ;
  }
  while (v3 != v6);
  if (!v8)
    return v7;
  __break(0xC471u);
  return result;
}

BOOL WebCore::FilterResults::canCacheResult(WebCore::FilterResults *this, const WebCore::FilterImage *a2)
{
  unint64_t v3;
  unint64_t v4;
  _BOOL4 v5;

  v3 = WebCore::FilterResults::memoryCost(this);
  v4 = WebCore::FilterImage::memoryCost((unint64_t)a2);
  v5 = !__CFADD__(v3, v4);
  return v3 + v4 < 0x6400001 && v5;
}

uint64_t WebCore::FilterResults::setEffectResult(WebCore::FilterResults **a1, uint64_t a2, uint64_t a3, const WebCore::FilterImage **a4)
{
  uint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  void *v16;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t *v19;
  _QWORD v20[3];

  result = WebCore::FilterResults::canCacheResult(*a1, *a4);
  if ((_DWORD)result)
  {
    WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(v17, a2);
    WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>((uint64_t)v20, (uint64_t *)a1, v17, a4);
    result = (uint64_t)WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(v17, v9);
    v10 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v10)
    {
      v11 = *(uint64_t **)a3;
      v12 = (uint64_t *)(a1 + 1);
      v13 = 8 * v10;
      do
      {
        v19 = 0;
        WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>((uint64_t)v20, v12, v11, (uint64_t *)&v19);
        v14 = (uint64_t *)(v20[0] + 8);
        WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(&v18, a2);
        WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::add((uint64_t)v17, v14, &v18);
        WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(&v18, v15);
        result = (uint64_t)v19;
        if (v19)
          result = WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::deallocateTable(v19, v16);
        ++v11;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t *v11;
  _DWORD *v12;
  int i;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v11 = 0;
  v12 = (_DWORD *)*a3;
  for (i = 1; ; ++i)
  {
    v14 = result & v9;
    v15 = (uint64_t *)(v8 + 16 * (result & v9));
    v16 = *v15;
    if (!*v15)
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v12 = (_DWORD *)*a3;
        v15 = v11;
      }
      result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::translate<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>> const&,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>((uint64_t)v15, v12, a4);
      v17 = *a2;
      if (*a2)
        v18 = *(_DWORD *)(v17 - 12) + 1;
      else
        v18 = 1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *a2;
      if (*a2)
        v20 = *(_DWORD *)(v19 - 12);
      else
        v20 = 0;
      v21 = (*(_DWORD *)(v19 - 16) + v20);
      v22 = *(unsigned int *)(v19 - 4);
      if (v22 > 0x400)
      {
        if (v22 > 2 * v21)
          goto LABEL_16;
      }
      else if (3 * v22 > 4 * v21)
      {
LABEL_16:
        v23 = v19 + 16 * v22;
        v24 = 1;
        goto LABEL_17;
      }
      result = WTF::HashTable<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::expand(a2, v15);
      v15 = (uint64_t *)result;
      v19 = *a2;
      if (*a2)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
      goto LABEL_16;
    }
    if (v16 != -1)
      break;
    v11 = (uint64_t *)(v8 + 16 * v14);
LABEL_7:
    result = i + v14;
  }
  if ((_DWORD *)v16 != v12)
    goto LABEL_7;
  v25 = *a2;
  if (*a2)
    v26 = *(unsigned int *)(v25 - 4);
  else
    v26 = 0;
  v24 = 0;
  v23 = v25 + 16 * v26;
LABEL_17:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

uint64_t WebCore::FilterResults::clearEffectResult(uint64_t this, WebCore::FilterEffect *a2)
{
  uint64_t v2;
  uint64_t *v4;
  int v5;
  void *v6;
  int i;
  uint64_t v8;
  WebCore::FilterEffect *v9;
  uint64_t *v11;
  WebCore::FilterImage *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  int j;
  uint64_t v38;
  WebCore::FilterImage *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  _DWORD *v52;
  void *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  int v82;
  unsigned int v83;
  int k;
  uint64_t v85;
  WebCore::FilterImage *v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  WTF *v94;
  void *v95;
  WTF *v96;
  void *v97;
  WTF *v98;
  void *v99;
  uint64_t v100;
  int v101;
  uint64_t *v102;
  _DWORD *v103;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = (uint64_t *)this;
    v5 = *(_DWORD *)(v2 - 8);
    this = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)a2);
    for (i = 0; ; this = (i + v8))
    {
      v8 = this & v5;
      v9 = *(WebCore::FilterEffect **)(v2 + 16 * v8);
      if (!v9)
        return this;
      if (v9 != (WebCore::FilterEffect *)-1 && v9 == a2)
        break;
      ++i;
    }
    if ((_DWORD)v8 != *(_DWORD *)(v2 - 4))
    {
      v11 = (uint64_t *)(v2 + 16 * v8);
      v13 = v11 + 1;
      v12 = (WebCore::FilterImage *)v11[1];
      ++*(_DWORD *)v12;
      v14 = *v4;
      if (*v4)
      {
        v14 += 16 * *(unsigned int *)(v14 - 4);
        if ((uint64_t *)v14 == v11)
          goto LABEL_40;
      }
      if ((uint64_t *)v14 == v11)
        goto LABEL_40;
      v15 = *v11;
      *v11 = 0;
      if (!v15)
      {
LABEL_30:
        *v11 = -1;
        this = *v13;
        *v13 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 1)
          {
            WebCore::FilterImage::~FilterImage((WebCore::FilterImage *)this, v6);
            this = WTF::fastFree(v98, v99);
          }
          else
          {
            --*(_DWORD *)this;
          }
        }
        ++*(_DWORD *)(*v4 - 16);
        v23 = *v4;
        if (*v4)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v4;
        if (*v4)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
            this = (uint64_t)WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::rehash(v4, v27 >> 1, 0);
        }
LABEL_40:
        v30 = v4 + 1;
        v29 = v4[1];
        if (!v29)
        {
LABEL_146:
          if (*(_DWORD *)v12 == 1)
          {
            WebCore::FilterImage::~FilterImage(v12, v6);
            return WTF::fastFree(v94, v95);
          }
          else
          {
            --*(_DWORD *)v12;
          }
          return this;
        }
        v31 = *(_DWORD *)(v29 - 8);
        v32 = ((unint64_t)v12 + ~((_QWORD)v12 << 32)) ^ (((unint64_t)v12 + ~((_QWORD)v12 << 32)) >> 22);
        v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
        v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
        v35 = (v34 >> 31) ^ v34;
        v36 = v31 & v35;
        for (j = 1; ; ++j)
        {
          v38 = v36;
          v39 = *(WebCore::FilterImage **)(v29 + 16 * v36);
          if (v39 != (WebCore::FilterImage *)-1)
          {
            if (!v39)
              goto LABEL_127;
            if (v39 == v12)
              break;
          }
          v36 = (v38 + j) & v31;
        }
        v40 = v29 + 16 * v38;
        v43 = *(_QWORD *)(v40 + 8);
        v42 = (uint64_t **)(v40 + 8);
        v41 = v43;
        if (!v43 || (v44 = *(unsigned int *)(v41 - 12), !(_DWORD)v44))
        {
LABEL_127:
          v82 = *(_DWORD *)(v29 - 8);
          v83 = v82 & v35;
          for (k = 1; ; ++k)
          {
            v85 = v83;
            v86 = *(WebCore::FilterImage **)(v29 + 16 * v83);
            if (v86 != (WebCore::FilterImage *)-1)
            {
              if (!v86)
                goto LABEL_146;
              if (v86 == v12)
                break;
            }
            v83 = (v85 + k) & v82;
          }
          if ((_DWORD)v85 != *(_DWORD *)(v29 - 4))
          {
            v87 = (_QWORD *)(v29 + 16 * v85);
            *v87 = 0;
            if (*(_DWORD *)v12 == 1)
            {
              WebCore::FilterImage::~FilterImage(v12, v6);
              WTF::fastFree(v96, v97);
            }
            else
            {
              --*(_DWORD *)v12;
            }
            *v87 = -1;
            this = *(_QWORD *)(v29 + 16 * v85 + 8);
            if (this)
              this = WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::deallocateTable((uint64_t *)this, v6);
            ++*(_DWORD *)(*v30 - 16);
            v88 = *v30;
            if (*v30)
              v89 = *(_DWORD *)(v88 - 12) - 1;
            else
              v89 = -1;
            *(_DWORD *)(v88 - 12) = v89;
            v90 = *v30;
            if (*v30)
            {
              v91 = 6 * *(_DWORD *)(v90 - 12);
              v92 = *(_DWORD *)(v90 - 4);
              if (v91 < v92 && v92 >= 9)
                this = WTF::HashTable<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::rehash(v30, v92 >> 1, 0);
            }
          }
          goto LABEL_146;
        }
        v45 = (v44 - 1) | ((v44 - 1) >> 1) | ((((_DWORD)v44 - 1) | ((v44 - 1) >> 1)) >> 2);
        v46 = v45 | (v45 >> 4) | ((v45 | (v45 >> 4)) >> 8);
        v47 = (v46 | HIWORD(v46)) + 1;
        v102 = v4 + 1;
        v101 = v35;
        if (v47 > 0x400)
        {
          if (v47 > 2 * v44)
            goto LABEL_56;
        }
        else if (3 * v47 > 4 * v44)
        {
LABEL_51:
          v48 = (double)v44;
          v49 = (double)v47;
          v50 = 0.604166667;
          goto LABEL_57;
        }
        LODWORD(v47) = 2 * v47;
        if (v47 <= 0x400)
          goto LABEL_51;
LABEL_56:
        v48 = (double)v44;
        v49 = (double)v47;
        v50 = 0.416666667;
LABEL_57:
        if (v49 * v50 <= v48)
          LODWORD(v47) = 2 * v47;
        if (v47 <= 8)
          v51 = 8;
        else
          v51 = v47;
        v52 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v51 + 16));
        v52[2] = v51 - 1;
        v52[3] = v51;
        *v52 = 0;
        v52[1] = v44;
        v54 = *v42;
        if (*v42)
        {
          v55 = *((unsigned int *)v54 - 1);
          v56 = &v54[v55];
          if (*((_DWORD *)v54 - 3))
          {
            v57 = *v42;
            if ((_DWORD)v55)
            {
              v58 = 8 * v55;
              v57 = *v42;
              while ((unint64_t)(*v57 + 1) <= 1)
              {
                ++v57;
                v58 -= 8;
                if (!v58)
                {
                  v57 = v56;
                  break;
                }
              }
            }
LABEL_72:
            v59 = (uint64_t *)(v52 + 4);
            if (v54)
              v60 = &v54[*((unsigned int *)v54 - 1)];
            else
              v60 = 0;
            if (v60 != v57)
            {
              v103 = v52;
              while (1)
              {
                v61 = v52[2];
                v62 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*v57);
                v63 = 0;
                do
                {
                  v64 = v62 & v61;
                  v62 = ++v63 + v64;
                }
                while (v59[v64]);
                v65 = *v57;
                v66 = *(_QWORD *)(*v57 + 8);
                if (__ldaxr((unsigned __int8 *)v66))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v66))
                {
                  goto LABEL_83;
                }
                MEMORY[0x19AEA534C](v66);
LABEL_83:
                ++*(_QWORD *)(v66 + 8);
                v68 = __ldxr((unsigned __int8 *)v66);
                if (v68 != 1)
                {
                  __clrex();
LABEL_87:
                  WTF::Lock::unlockSlow((WTF::Lock *)v66);
                  goto LABEL_88;
                }
                if (__stlxr(0, (unsigned __int8 *)v66))
                  goto LABEL_87;
LABEL_88:
                v69 = v59[v64];
                v59[v64] = v65;
                if (!v69)
                  goto LABEL_105;
                v70 = *(_QWORD *)(v69 + 8);
                if (__ldaxr((unsigned __int8 *)v70))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v70))
                {
                  goto LABEL_93;
                }
                MEMORY[0x19AEA534C](v70);
LABEL_93:
                v72 = *(_QWORD *)(v70 + 8);
                v73 = v72 - 1;
                *(_QWORD *)(v70 + 8) = v72 - 1;
                if (v72 == 1)
                {
                  v78 = *(_QWORD *)(v70 + 16);
                  v74 = *(_QWORD *)(v70 + 24);
                  *(_QWORD *)(v70 + 24) = 0;
                  v75 = v78 != 0;
                }
                else
                {
                  v74 = 0;
                  v75 = 1;
                }
                v76 = __ldxr((unsigned __int8 *)v70);
                if (v76 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v70))
                  {
                    if (!v73)
                      goto LABEL_101;
                    goto LABEL_105;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v70);
                if (!v73)
                {
LABEL_101:
                  if (v74)
                    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
                  if (!v75)
                    WTF::fastFree((WTF *)v70, v53);
                }
LABEL_105:
                v77 = v57 + 1;
                v57 = v56;
                v52 = v103;
                if (v77 != v56)
                {
                  v57 = v77;
                  while ((unint64_t)(*v57 + 1) <= 1)
                  {
                    if (++v57 == v56)
                    {
                      v57 = v56;
                      break;
                    }
                  }
                }
                if (v57 == v60)
                {
                  if (v103[1])
                  {
                    v79 = v103[3];
                    v80 = &v59[v79];
                    v81 = v59;
                    if (!(_DWORD)v79)
                      goto LABEL_115;
                    goto LABEL_123;
                  }
                  goto LABEL_126;
                }
              }
            }
            v80 = &v59[v51];
LABEL_123:
            v81 = v59;
            while ((unint64_t)(*v81 + 1) <= 1)
            {
              if (++v81 == v80)
                goto LABEL_126;
            }
LABEL_115:
            if (v81 != v80)
            {
              v53 = (void *)*v81;
LABEL_117:
              WebCore::FilterResults::clearEffectResult((WebCore::FilterResults *)v4, (WebCore::FilterEffect *)v53);
              while (++v81 != v80)
              {
                v53 = (void *)*v81;
                if ((unint64_t)(*v81 + 1) > 1)
                {
                  if (v81 != v80)
                    goto LABEL_117;
                  break;
                }
              }
            }
LABEL_126:
            this = WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::deallocateTable(v59, v53);
            v30 = v4 + 1;
            v29 = *v102;
            v35 = v101;
            if (!*v102)
              goto LABEL_146;
            goto LABEL_127;
          }
          v57 = &v54[v55];
        }
        else
        {
          v57 = 0;
          v55 = 0;
        }
        v56 = &v54[v55];
        goto LABEL_72;
      }
      v16 = *(_QWORD *)(v15 + 8);
      if (__ldaxr((unsigned __int8 *)v16))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v16))
      {
        goto LABEL_18;
      }
      MEMORY[0x19AEA534C](v16);
LABEL_18:
      v18 = *(_QWORD *)(v16 + 8);
      v19 = v18 - 1;
      *(_QWORD *)(v16 + 8) = v18 - 1;
      if (v18 == 1)
      {
        v100 = *(_QWORD *)(v16 + 16);
        v20 = *(_QWORD *)(v16 + 24);
        *(_QWORD *)(v16 + 24) = 0;
        v21 = v100 != 0;
      }
      else
      {
        v20 = 0;
        v21 = 1;
      }
      v22 = __ldxr((unsigned __int8 *)v16);
      if (v22 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v16))
        {
LABEL_25:
          if (!v19)
          {
            if (v20)
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
            if (!v21)
              WTF::fastFree((WTF *)v16, v6);
          }
          goto LABEL_30;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
      goto LABEL_25;
    }
  }
  return this;
}

WebCore::FilterImage **WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>::~Ref(WebCore::FilterImage **a1, void *a2)
{
  WebCore::FilterImage *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FilterImage::~FilterImage(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebCore::PointLightSource::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  unsigned int v5;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 1;
  *(_QWORD *)result = off_1E3416598;
  v5 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)a1;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *a2 = result;
  return result;
}

float WebCore::PointLightSource::initPaintingData(float *a1, float *a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;

  v6 = (*(float (**)(float *, float *))(*(_QWORD *)a2 + 88))(a2, a1 + 4);
  v7 = a2[13];
  v9 = (float)(v7 * v6) - (float)*(int *)(a3 + 36);
  v10 = (float)(v8 * a2[14]) - (float)*(int *)(a3 + 40);
  a1[7] = v9;
  a1[8] = v10;
  result = (float)((float)(v7 * (float)(v6 + v11)) - (float)*(int *)(a3 + 36)) - v9;
  a1[9] = result;
  return result;
}

float WebCore::PointLightSource::computePixelLightingData@<S0>(float *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, float a6@<S0>)
{
  float v6;
  float v7;
  float v8;
  float result;

  v6 = a1[7] - (float)a3;
  v7 = a1[8] - (float)a4;
  v8 = a1[9] - a6;
  *(float *)a5 = v6;
  *(float *)(a5 + 4) = v7;
  *(float *)(a5 + 8) = v8;
  *(_QWORD *)(a5 + 12) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(a5 + 20) = *(_DWORD *)(a2 + 20);
  result = sqrtf((float)((float)(v7 * v7) + (float)(v6 * v6)) + (float)(v8 * v8));
  *(float *)(a5 + 24) = result;
  return result;
}

BOOL WebCore::PointLightSource::setX(WebCore::PointLightSource *this, float a2)
{
  float v2;

  v2 = *((float *)this + 4);
  if (v2 != a2)
    *((float *)this + 4) = a2;
  return v2 != a2;
}

BOOL WebCore::PointLightSource::setY(WebCore::PointLightSource *this, float a2)
{
  float v2;

  v2 = *((float *)this + 5);
  if (v2 != a2)
    *((float *)this + 5) = a2;
  return v2 != a2;
}

BOOL WebCore::PointLightSource::setZ(WebCore::PointLightSource *this, float a2)
{
  float v2;

  v2 = *((float *)this + 6);
  if (v2 != a2)
    *((float *)this + 6) = a2;
  return v2 != a2;
}

WTF::TextStream *WebCore::PointLightSource::externalRepresentation(WebCore::PointLightSource *this, WTF::TextStream *a2)
{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a2;
}

void WebCore::SourceAlpha::create(const void **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  const void *v6;
  uint64_t v7;

  v5 = WTF::fastMalloc((WTF *)0x40);
  v6 = *this;
  if (v6)
  {
    CFRetain(v6);
    CFRetain(v6);
  }
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v7 = 0;
  *(_OWORD *)(v7 + 8) = xmmword_19689B170;
  *(_QWORD *)(v7 + 24) = v5;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_BYTE *)(v5 + 48) = 19;
  *(_QWORD *)v5 = off_1E34164C8;
  *(_QWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 56) = v6;
  if (v6)
  {
    CFRetain(v6);
    CFRelease(v6);
    *(_QWORD *)v5 = off_1E3416628;
    CFRelease(v6);
  }
  else
  {
    *(_QWORD *)v5 = off_1E3416628;
  }
  *a2 = v5;
}

_QWORD *WebCore::SourceAlpha::createSoftwareApplier@<X0>(WebCore::SourceAlpha *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416AB0;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::SourceAlpha::externalRepresentation(int a1, WTF::TextStream *this)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  return this;
}

void WebCore::SourceGraphic::create(const void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x40);
  v5 = *a1;
  if (v5)
  {
    CFRetain(v5);
    CFRetain(v5);
  }
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_19689B170;
  *(_QWORD *)(v6 + 24) = v4;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_BYTE *)(v4 + 48) = 20;
  *(_QWORD *)v4 = off_1E34164C8;
  *(_QWORD *)(v4 + 8) = v6;
  *(_QWORD *)(v4 + 56) = v5;
  if (v5)
  {
    CFRetain(v5);
    CFRelease(v5);
    *(_QWORD *)v4 = off_1E34166E0;
    CFRelease(v5);
  }
  else
  {
    *(_QWORD *)v4 = off_1E34166E0;
  }
  *a2 = v4;
}

uint64_t WebCore::SourceGraphic::supportedFilterRenderingModes(WebCore::SourceGraphic *this)
{
  return 7;
}

_QWORD *WebCore::SourceGraphic::createAcceleratedApplier@<X0>(WebCore::SourceGraphic *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3350B78;
  result[1] = this;
  *a2 = result;
  return result;
}

_QWORD *WebCore::SourceGraphic::createSoftwareApplier@<X0>(WebCore::SourceGraphic *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3416CA0;
  result[1] = this;
  *a2 = result;
  return result;
}

WTF::TextStream *WebCore::SourceGraphic::externalRepresentation(int a1, WTF::TextStream *this)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  return this;
}

uint64_t WebCore::SpotLightSource::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  uint64_t result;
  uint64_t v11;
  float v12;

  result = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 2;
  *(_QWORD *)result = off_1E3416798;
  v11 = *a1;
  *(_DWORD *)(result + 24) = *((_DWORD *)a1 + 2);
  *(_QWORD *)(result + 16) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(result + 28) = *(_QWORD *)a2;
  *(_DWORD *)(result + 36) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  v12 = 1.0;
  if (a4 > 1.0)
    v12 = a4;
  if (a4 >= 128.0)
    v12 = 128.0;
  *(float *)(result + 52) = v12;
  *(float *)(result + 56) = a5;
  *a3 = result;
  return result;
}

void WebCore::SpotLightSource::initPaintingData(float *a1, float *a2, uint64_t a3, float *a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  float v26;
  float v27;
  float v28;

  v8 = (*(float (**)(float *, float *))(*(_QWORD *)a2 + 88))(a2, a1 + 4);
  v10 = v9;
  v12 = v11;
  v13 = (*(float (**)(float *, float *))(*(_QWORD *)a2 + 88))(a2, a1 + 7);
  v14 = a2[13];
  v15 = (float)(v8 * v14) - (float)*(int *)(a3 + 36);
  v16 = (float)(v10 * a2[14]) - (float)*(int *)(a3 + 40);
  a1[10] = v15;
  a1[11] = v16;
  a1[12] = (float)((float)((float)(v8 + v12) * v14) - (float)*(int *)(a3 + 36)) - v15;
  v17 = v13 - v8;
  v19 = v18 - v10;
  v21 = v20 - v12;
  a4[7] = v17;
  a4[8] = v19;
  a4[9] = v20 - v12;
  v22 = sqrtf((float)((float)(v19 * v19) + (float)(v17 * v17)) + (float)(v21 * v21));
  if (v22 != 0.0)
  {
    a4[7] = v17 / v22;
    a4[8] = v19 / v22;
    a4[9] = v21 / v22;
  }
  v23 = a1[14];
  if (v23 == 0.0)
  {
    v27 = 0.0;
    v28 = -0.016;
  }
  else
  {
    if (v23 < 0.0)
      v23 = -v23;
    v24 = (float)(180.0 - v23) * 0.017453;
    v25 = v23 <= 90.0;
    v26 = 1.5708;
    if (v25)
      v26 = v24;
    v27 = cosf(v26);
    v28 = v27 + -0.016;
  }
  a4[10] = v27;
  a4[11] = v28;
}

void WebCore::SpotLightSource::computePixelLightingData(float *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, float a6@<S0>)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v14;
  float v15;
  float v16;
  float v17;

  v7 = a1[10] - (float)a3;
  v8 = a1[11] - (float)a4;
  v9 = a1[12] - a6;
  v10 = *(float *)(a2 + 40);
  v11 = sqrtf((float)((float)(v8 * v8) + (float)(v7 * v7)) + (float)(v9 * v9));
  v12 = (float)((float)((float)(v8 * *(float *)(a2 + 32)) + (float)(v7 * *(float *)(a2 + 28)))
              + (float)(v9 * *(float *)(a2 + 36)))
      / v11;
  if (v12 <= v10)
  {
    v14 = a1[13];
    v15 = powf(-v12, v14);
    if (v14 == 1.0)
      v15 = -v12;
    v16 = *(float *)(a2 + 44);
    if (v12 > v16)
      v15 = v15 * (float)((float)(v10 - v12) / (float)(v10 - v16));
    if (v15 > 1.0)
      v15 = 1.0;
    *(float *)a5 = v7;
    *(float *)(a5 + 4) = v8;
    *(float *)(a5 + 8) = v9;
    v17 = v15 * *(float *)(a2 + 20);
    *(float32x2_t *)(a5 + 12) = vmul_n_f32(*(float32x2_t *)(a2 + 12), v15);
    *(float *)(a5 + 20) = v17;
  }
  else
  {
    *(float *)a5 = v7;
    *(float *)(a5 + 4) = v8;
    *(float *)(a5 + 8) = v9;
    *(_QWORD *)(a5 + 12) = 0;
    *(_DWORD *)(a5 + 20) = 0;
  }
  *(float *)(a5 + 24) = v11;
}

BOOL WebCore::SpotLightSource::setX(WebCore::SpotLightSource *this, float a2)
{
  float v2;

  v2 = *((float *)this + 4);
  if (v2 != a2)
    *((float *)this + 4) = a2;
  return v2 != a2;
}

BOOL WebCore::SpotLightSource::setY(WebCore::SpotLightSource *this, float a2)
{
  float v2;

  v2 = *((float *)this + 5);
  if (v2 != a2)
    *((float *)this + 5) = a2;
  return v2 != a2;
}

BOOL WebCore::SpotLightSource::setZ(WebCore::SpotLightSource *this, float a2)
{
  float v2;

  v2 = *((float *)this + 6);
  if (v2 != a2)
    *((float *)this + 6) = a2;
  return v2 != a2;
}

BOOL WebCore::SpotLightSource::setPointsAtX(WebCore::SpotLightSource *this, float a2)
{
  float v2;

  v2 = *((float *)this + 7);
  if (v2 != a2)
    *((float *)this + 7) = a2;
  return v2 != a2;
}

BOOL WebCore::SpotLightSource::setPointsAtY(WebCore::SpotLightSource *this, float a2)
{
  float v2;

  v2 = *((float *)this + 8);
  if (v2 != a2)
    *((float *)this + 8) = a2;
  return v2 != a2;
}

BOOL WebCore::SpotLightSource::setPointsAtZ(WebCore::SpotLightSource *this, float a2)
{
  float v2;

  v2 = *((float *)this + 9);
  if (v2 != a2)
    *((float *)this + 9) = a2;
  return v2 != a2;
}

BOOL WebCore::SpotLightSource::setSpecularExponent(WebCore::SpotLightSource *this, float a2)
{
  float v2;
  float v3;
  float v4;

  v2 = 1.0;
  if (a2 > 1.0)
    v2 = a2;
  if (a2 >= 128.0)
    v3 = 128.0;
  else
    v3 = v2;
  v4 = *((float *)this + 13);
  if (v4 != v3)
    *((float *)this + 13) = v3;
  return v4 != v3;
}

BOOL WebCore::SpotLightSource::setLimitingConeAngle(WebCore::SpotLightSource *this, float a2)
{
  float v2;

  v2 = *((float *)this + 14);
  if (v2 != a2)
    *((float *)this + 14) = a2;
  return v2 != a2;
}

WTF::TextStream *WebCore::SpotLightSource::externalRepresentation(WebCore::SpotLightSource *this, WTF::TextStream *a2)
{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a2;
}

uint64_t WebCore::FEBlendSoftwareApplier::apply(uint64_t a1, int a2, _DWORD *a3, WebCore::FilterImage *this)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  if (a3[3] < 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x196260D08);
  }
  v6 = **(_QWORD **)a3;
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  if (*((_QWORD *)this + 11))
    v8 = WebCore::FilterImage::imageBufferFromCIImage(this);
  else
    v8 = WebCore::FilterImage::imageBufferFromPixelBuffer(this);
  v9 = (_QWORD *)v8;
  if (!v8)
    return 0;
  v10 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_9:
  ++*(_QWORD *)(v10 + 8);
  v12 = __ldxr((unsigned __int8 *)v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  if (*(_QWORD *)(v6 + 88))
    v13 = WebCore::FilterImage::imageBufferFromCIImage((WebCore::FilterImage *)v6);
  else
    v13 = WebCore::FilterImage::imageBufferFromPixelBuffer((WebCore::FilterImage *)v6);
  v14 = v13;
  if (!v13)
  {
    if (*(_QWORD *)(v7 + 88))
      v59 = WebCore::FilterImage::imageBufferFromCIImage((WebCore::FilterImage *)v7);
    else
      v59 = WebCore::FilterImage::imageBufferFromPixelBuffer((WebCore::FilterImage *)v7);
    v20 = v59;
    if (!v59)
      goto LABEL_91;
LABEL_29:
    v21 = *(_QWORD *)(v20 + 8);
    if (__ldaxr((unsigned __int8 *)v21))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v21))
    {
      goto LABEL_33;
    }
    MEMORY[0x19AEA534C](v21);
LABEL_33:
    ++*(_QWORD *)(v21 + 8);
    v23 = __ldxr((unsigned __int8 *)v21);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v21))
      {
        if (!v14)
          goto LABEL_37;
        goto LABEL_36;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
    if (!v14)
    {
LABEL_37:
      v36 = *(_QWORD *)(v20 + 8);
      if (__ldaxr((unsigned __int8 *)v36))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v36))
      {
        goto LABEL_44;
      }
      MEMORY[0x19AEA534C](v36);
LABEL_44:
      v38 = *(_QWORD *)(v36 + 8);
      v39 = v38 - 1;
      *(_QWORD *)(v36 + 8) = v38 - 1;
      if (v38 == 1)
      {
        v61 = *(_QWORD *)(v36 + 16);
        v40 = *(_QWORD *)(v36 + 24);
        *(_QWORD *)(v36 + 24) = 0;
        v41 = v61 != 0;
      }
      else
      {
        v40 = 0;
        v41 = 1;
      }
      v42 = __ldxr((unsigned __int8 *)v36);
      if (v42 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v36))
        {
          if (v39)
            goto LABEL_55;
LABEL_52:
          if (v40)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          if (!v41)
          {
            WTF::fastFree((WTF *)v36, v19);
            if (v14)
              goto LABEL_56;
            goto LABEL_91;
          }
LABEL_55:
          if (v14)
          {
LABEL_56:
            v43 = 1;
            goto LABEL_57;
          }
LABEL_91:
          v43 = 0;
          goto LABEL_73;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v36);
      if (v39)
        goto LABEL_55;
      goto LABEL_52;
    }
LABEL_36:
    v24 = (*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    v25 = *(_QWORD *)((char *)this + 36);
    v26 = *(_QWORD *)(v6 + 36);
    v27 = v26 - v25;
    v28 = v26 - (v25 & 0xFFFFFFFF00000000);
    v29 = *(_QWORD *)(v7 + 36);
    v30 = *(_DWORD *)(v7 + 44);
    v31 = *(_DWORD *)(v7 + 48);
    v32 = *(_DWORD *)(v6 + 44);
    v33 = *(_DWORD *)(v6 + 48);
    *(float *)&v63 = (float)(v29 - v25);
    *((float *)&v63 + 1) = (float)(int)((v29 - (v25 & 0xFFFFFFFF00000000)) >> 32);
    *(float *)&v64 = (float)v30;
    *((float *)&v64 + 1) = (float)v31;
    v34 = *(_QWORD *)(v20 + 16);
    v65 = 0;
    v66 = v34;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v24 + 384))(v24, v20, &v63, &v65, 4641);
    *(float *)&v65 = (float)v27;
    *((float *)&v65 + 1) = (float)SHIDWORD(v28);
    *(float *)&v66 = (float)v32;
    *((float *)&v66 + 1) = (float)v33;
    v35 = *(_QWORD *)(v14 + 16);
    v63 = 0;
    v64 = v35;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v24 + 384))(v24, v14, &v65, &v63, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 64) & 0x1F | 0x1220);
    goto LABEL_37;
  }
  v15 = *(_QWORD *)(v13 + 8);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v15);
LABEL_21:
  ++*(_QWORD *)(v15 + 8);
  v17 = __ldxr((unsigned __int8 *)v15);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
LABEL_25:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  if (*(_QWORD *)(v7 + 88))
    v18 = WebCore::FilterImage::imageBufferFromCIImage((WebCore::FilterImage *)v7);
  else
    v18 = WebCore::FilterImage::imageBufferFromPixelBuffer((WebCore::FilterImage *)v7);
  v20 = v18;
  if (v18)
    goto LABEL_29;
  v43 = 0;
LABEL_57:
  v44 = *(_QWORD *)(v14 + 8);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_61;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_61:
  v46 = *(_QWORD *)(v44 + 8);
  v47 = v46 - 1;
  *(_QWORD *)(v44 + 8) = v46 - 1;
  if (v46 == 1)
  {
    v62 = *(_QWORD *)(v44 + 16);
    v48 = *(_QWORD *)(v44 + 24);
    *(_QWORD *)(v44 + 24) = 0;
    v49 = v62 != 0;
  }
  else
  {
    v48 = 0;
    v49 = 1;
  }
  v50 = __ldxr((unsigned __int8 *)v44);
  if (v50 != 1)
  {
    __clrex();
LABEL_68:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
    if (v47)
      goto LABEL_73;
    goto LABEL_69;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
    goto LABEL_68;
  if (v47)
    goto LABEL_73;
LABEL_69:
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  if (!v49)
    WTF::fastFree((WTF *)v44, v19);
LABEL_73:
  v51 = v9[1];
  if (__ldaxr((unsigned __int8 *)v51))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v51))
  {
    goto LABEL_77;
  }
  MEMORY[0x19AEA534C](v51);
LABEL_77:
  v53 = *(_QWORD *)(v51 + 8);
  v54 = v53 - 1;
  *(_QWORD *)(v51 + 8) = v53 - 1;
  if (v53 == 1)
  {
    v60 = *(_QWORD *)(v51 + 16);
    v55 = *(_QWORD *)(v51 + 24);
    *(_QWORD *)(v51 + 24) = 0;
    v56 = v60 != 0;
  }
  else
  {
    v55 = 0;
    v56 = 1;
  }
  v57 = __ldxr((unsigned __int8 *)v51);
  if (v57 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v51))
    {
      if (v54)
        return v43;
      goto LABEL_85;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v51);
  if (v54)
    return v43;
LABEL_85:
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  if (!v56)
    WTF::fastFree((WTF *)v51, v19);
  return v43;
}

WebCore::FEColorMatrixSoftwareApplier *WebCore::FEColorMatrixSoftwareApplier::FEColorMatrixSoftwareApplier(WebCore::FEColorMatrixSoftwareApplier *this, const WebCore::FEColorMatrix *a2)
{
  int v3;

  *(_QWORD *)this = off_1E3416828;
  *((_QWORD *)this + 1) = a2;
  v3 = *((unsigned __int8 *)a2 + 64);
  if (v3 == 2)
  {
    if (*((_DWORD *)a2 + 21))
    {
      WebCore::FEColorMatrix::calculateSaturateComponents((uint64_t)this + 16, (float *)a2, **((float **)a2 + 9));
      return this;
    }
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x196260D90);
  }
  if (v3 == 3)
  {
    if (*((_DWORD *)a2 + 21))
    {
      WebCore::FEColorMatrix::calculateHueRotateComponents((WebCore::FEColorMatrixSoftwareApplier *)((char *)this + 16), (float *)a2, **((float **)a2 + 9));
      return this;
    }
    goto LABEL_8;
  }
  return this;
}

uint64_t WebCore::FEColorMatrixSoftwareApplier::applyPlatformAccelerated(uint64_t this, uint64_t a2, void *a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int16_t v11;
  int16_t v12;
  int16_t v13;
  int16_t v14;
  float v15;
  int16_t v16;
  int16_t v17;
  int16_t v18;
  vImage_Buffer v19;
  vImage_Buffer src;
  int16_t matrix[20];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  src.width = (int)a2;
  src.rowBytes = 4 * (int)a2;
  src.data = a3;
  src.height = a2 >> 32;
  v19.width = (int)a2;
  v19.rowBytes = src.rowBytes;
  v19.data = a3;
  v19.height = a2 >> 32;
  v3 = *(_QWORD *)(this + 8);
  v4 = *(unsigned __int8 *)(v3 + 64);
  if ((v4 - 2) < 2)
  {
    v12 = llroundf(*(float *)(this + 28) * 256.0);
    v13 = llroundf(*(float *)(this + 40) * 256.0);
    v14 = llroundf(*(float *)(this + 20) * 256.0);
    v15 = *(float *)(this + 36);
    v16 = llroundf(*(float *)(this + 32) * 256.0);
    v17 = llroundf(*(float *)(this + 44) * 256.0);
    v18 = llroundf(*(float *)(this + 24) * 256.0);
    matrix[0] = llroundf(*(float *)(this + 16) * 256.0);
    matrix[1] = v12;
    matrix[2] = v13;
    matrix[4] = v14;
    matrix[5] = v16;
    matrix[6] = v17;
    matrix[3] = 0;
    matrix[7] = 0;
    matrix[8] = v18;
    matrix[9] = llroundf(v15 * 256.0);
    matrix[10] = llroundf(*(float *)(this + 48) * 256.0);
    *(_QWORD *)&matrix[11] = 0;
    v11 = 256;
  }
  else
  {
    if (v4 == 4)
    {
      memset(matrix, 0, 32);
      strcpy((char *)&matrix[3], "6");
      matrix[7] = 183;
      matrix[11] = 18;
      return vImageMatrixMultiply_ARGB8888(&src, &v19, matrix, 256, 0, 0, 0);
    }
    if (v4 != 1)
      return this;
    v5 = *(_DWORD *)(v3 + 84);
    if (!v5)
      goto LABEL_23;
    v6 = *(_QWORD *)(v3 + 72);
    matrix[0] = llroundf(*(float *)v6 * 256.0);
    if (v5 <= 5)
    {
      __break(0xC471u);
      JUMPOUT(0x19626104CLL);
    }
    matrix[1] = llroundf(*(float *)(v6 + 20) * 256.0);
    if (v5 <= 0xA)
    {
      __break(0xC471u);
      JUMPOUT(0x196261054);
    }
    matrix[2] = llroundf(*(float *)(v6 + 40) * 256.0);
    if (v5 <= 0xF)
    {
      __break(0xC471u);
      JUMPOUT(0x19626105CLL);
    }
    v7.i32[0] = *(_DWORD *)(v6 + 60);
    v7.i32[1] = *(_DWORD *)(v6 + 4);
    v7.i32[2] = *(_DWORD *)(v6 + 24);
    v7.i32[3] = *(_DWORD *)(v6 + 44);
    *(int16x4_t *)&matrix[3] = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32(v7, (float32x4_t)vdupq_n_s32(0x43800000u)))));
    if (v5 == 16)
    {
      __break(0xC471u);
      JUMPOUT(0x196261064);
    }
    v8.i32[0] = *(_DWORD *)(v6 + 64);
    v8.i32[1] = *(_DWORD *)(v6 + 8);
    v8.i32[2] = *(_DWORD *)(v6 + 28);
    v8.i32[3] = *(_DWORD *)(v6 + 48);
    v9 = (float32x4_t)vdupq_n_s32(0x43800000u);
    *(int16x4_t *)&matrix[7] = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32(v8, v9))));
    if (v5 <= 0x11)
    {
      __break(0xC471u);
      JUMPOUT(0x19626106CLL);
    }
    v10.i32[0] = *(_DWORD *)(v6 + 68);
    v10.i32[1] = *(_DWORD *)(v6 + 12);
    v10.i32[2] = *(_DWORD *)(v6 + 32);
    v10.i32[3] = *(_DWORD *)(v6 + 52);
    *(int16x4_t *)&matrix[11] = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32(v10, v9))));
    if (v5 == 18)
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x196261044);
    }
    v11 = llroundf(*(float *)(v6 + 72) * 256.0);
  }
  matrix[15] = v11;
  return vImageMatrixMultiply_ARGB8888(&src, &v19, matrix, 256, 0, 0, 0);
}

uint64_t WebCore::FEColorMatrixSoftwareApplier::applyPlatformUnaccelerated(uint64_t this, WebCore::PixelBuffer *a2, double a3, float a4, float a5, double a6)
{
  unint64_t v6;
  int v7;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;

  v6 = *((_QWORD *)a2 + 6);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(this + 8) + 64);
  if (v7 == 1)
  {
    if (v6)
    {
      v9 = 0;
      v10 = 4;
      do
      {
        v11 = *((_QWORD *)a2 + 6);
        if (v11 <= v9)
          goto LABEL_137;
        v12 = v10 - 3;
        if (v11 <= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1962615B0);
        }
        v13 = v10 - 2;
        if (v11 <= v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1962615D0);
        }
        v14 = v10 - 1;
        if (v11 <= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1962615F0);
        }
        v15 = *(_QWORD *)(this + 8);
        v16 = *(_DWORD *)(v15 + 84);
        if (!v16)
        {
          __break(0xC471u);
          JUMPOUT(0x196261880);
        }
        if (v16 == 1)
        {
          __break(0xC471u);
          JUMPOUT(0x196261888);
        }
        if (v16 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x196261890);
        }
        if (v16 == 3)
        {
          __break(0xC471u);
          JUMPOUT(0x196261898);
        }
        if (v16 <= 4)
        {
          __break(0xC471u);
          JUMPOUT(0x1962618A0);
        }
        if (v16 == 5)
        {
          __break(0xC471u);
          JUMPOUT(0x1962618A8);
        }
        if (v16 <= 6)
        {
          __break(0xC471u);
          JUMPOUT(0x1962618B0);
        }
        if (v16 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x1962618B8);
        }
        if (v16 <= 8)
        {
          __break(0xC471u);
          JUMPOUT(0x1962618C0);
        }
        if (v16 == 9)
        {
          __break(0xC471u);
          JUMPOUT(0x1962618C8);
        }
        if (v16 <= 0xA)
        {
          __break(0xC471u);
          JUMPOUT(0x1962618D0);
        }
        if (v16 == 11)
        {
          __break(0xC471u);
          JUMPOUT(0x1962618D8);
        }
        if (v16 <= 0xC)
        {
          __break(0xC471u);
          JUMPOUT(0x1962618E0);
        }
        if (v16 == 13)
        {
          __break(0xC471u);
          JUMPOUT(0x1962618E8);
        }
        if (v16 <= 0xE)
        {
          __break(0xC471u);
          JUMPOUT(0x1962618F0);
        }
        if (v16 == 15)
        {
          __break(0xC471u);
          JUMPOUT(0x1962618F8);
        }
        if (v16 <= 0x10)
        {
          __break(0xC471u);
          JUMPOUT(0x196261900);
        }
        if (v16 == 17)
        {
          __break(0xC471u);
          JUMPOUT(0x196261908);
        }
        if (v16 <= 0x12)
        {
          __break(0xC471u);
          JUMPOUT(0x196261910);
        }
        if (v16 == 19)
        {
LABEL_137:
          __break(0xC471u);
          JUMPOUT(0x196261590);
        }
        v17 = *((_QWORD *)a2 + 5);
        LOBYTE(a3) = *(_BYTE *)(v17 + v9);
        *(float *)&a3 = (float)LODWORD(a3);
        LOBYTE(a4) = *(_BYTE *)(v17 + v12);
        LOBYTE(a6) = *(_BYTE *)(v17 + v13);
        v18 = (float)LODWORD(a4);
        v19 = (float)LODWORD(a6);
        LOBYTE(a6) = *(_BYTE *)(v17 + v14);
        *(float *)&a6 = (float)LODWORD(a6);
        v20 = *(float **)(v15 + 72);
        v21 = (float)((float)((float)((float)(v20[1] * v18) + (float)(*v20 * *(float *)&a3)) + (float)(v20[2] * v19))
                    + (float)(v20[3] * *(float *)&a6))
            + (float)(v20[4] * 255.0);
        if (v21 < 0.0)
        {
          LOBYTE(v22) = 0;
        }
        else
        {
          v22 = (uint64_t)rint(v21);
          if (v21 > 255.0)
            LOBYTE(v22) = -1;
        }
        v24 = v20[7];
        v23 = v20[8];
        v25 = v20[5];
        v26 = v20[6];
        v28 = v20[9];
        v27 = v20[10];
        v30 = v20[11];
        v29 = v20[12];
        v32 = v20[13];
        v31 = v20[14];
        v34 = v20[17];
        v33 = v20[18];
        v35 = v20[15];
        v36 = v20[16];
        v37 = v20[19];
        *(_BYTE *)(v17 + v9) = v22;
        if (*((_QWORD *)a2 + 6) <= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x196261610);
        }
        v38 = (float)((float)((float)((float)(v26 * v18) + (float)(v25 * *(float *)&a3)) + (float)(v24 * v19))
                    + (float)(v23 * *(float *)&a6))
            + (float)(v28 * 255.0);
        if (v38 < 0.0)
        {
          LOBYTE(v39) = 0;
        }
        else if (v38 > 255.0)
        {
          LOBYTE(v39) = -1;
        }
        else
        {
          v39 = (uint64_t)rint(v38);
        }
        *(_BYTE *)(*((_QWORD *)a2 + 5) + v12) = v39;
        if (*((_QWORD *)a2 + 6) <= v13)
        {
          __break(0xC471u);
          JUMPOUT(0x196261630);
        }
        v40 = (float)((float)((float)((float)(v30 * v18) + (float)(v27 * *(float *)&a3)) + (float)(v29 * v19))
                    + (float)(v32 * *(float *)&a6))
            + (float)(v31 * 255.0);
        if (v40 < 0.0)
        {
          LOBYTE(v41) = 0;
        }
        else
        {
          v41 = (uint64_t)rint(v40);
          if (v40 > 255.0)
            LOBYTE(v41) = -1;
        }
        *(_BYTE *)(*((_QWORD *)a2 + 5) + v13) = v41;
        if (*((_QWORD *)a2 + 6) <= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x196261650);
        }
        v42 = (float)((float)((float)(v36 * v18) + (float)(v35 * *(float *)&a3)) + (float)(v34 * v19))
            + (float)(v33 * *(float *)&a6);
        a4 = 255.0;
        *(float *)&a3 = v42 + (float)(v37 * 255.0);
        if (*(float *)&a3 < 0.0)
        {
          LOBYTE(v43) = 0;
        }
        else
        {
          a4 = 255.0;
          if (*(float *)&a3 > 255.0)
          {
            LOBYTE(v43) = -1;
          }
          else
          {
            a3 = rint(*(float *)&a3);
            v43 = (uint64_t)a3;
          }
        }
        *(_BYTE *)(*((_QWORD *)a2 + 5) + v14) = v43;
        v9 = v10;
        v44 = v6 > v10;
        v10 += 4;
      }
      while (v44);
    }
  }
  else if ((v7 - 2) < 2)
  {
    if (v6)
    {
      v45 = 0;
      v46 = 4;
      do
      {
        v47 = *((_QWORD *)a2 + 6);
        if (v47 <= v45)
        {
          __break(0xC471u);
          JUMPOUT(0x196261670);
        }
        v48 = v46 - 3;
        if (v47 <= v48)
        {
          __break(0xC471u);
          JUMPOUT(0x196261690);
        }
        v49 = v46 - 2;
        if (v47 <= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1962616B0);
        }
        v50 = v46 - 1;
        if (v47 <= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x1962616D0);
        }
        v51 = *((_QWORD *)a2 + 5);
        LOBYTE(a3) = *(_BYTE *)(v51 + v45);
        LOBYTE(a4) = *(_BYTE *)(v51 + v48);
        *(float *)&a3 = (float)LODWORD(a3);
        v52 = (float)LODWORD(a4);
        LOBYTE(a5) = *(_BYTE *)(v51 + v49);
        a5 = (float)LODWORD(a5);
        v53 = (float)((float)(*(float *)(this + 20) * v52) + (float)(*(float *)&a3 * *(float *)(this + 16)))
            + (float)(a5 * *(float *)(this + 24));
        if (v53 < 0.0)
        {
          LOBYTE(v54) = 0;
        }
        else if (v53 > 255.0)
        {
          LOBYTE(v54) = -1;
        }
        else
        {
          v54 = (uint64_t)rint(v53);
        }
        v55 = *(unsigned __int8 *)(v51 + v50);
        v56 = *(float *)(this + 28);
        v57 = *(float *)(this + 32);
        v59 = *(float *)(this + 36);
        v58 = *(float *)(this + 40);
        v61 = *(float *)(this + 44);
        v60 = *(float *)(this + 48);
        *(_BYTE *)(v51 + v45) = v54;
        if (*((_QWORD *)a2 + 6) <= v48)
        {
          __break(0xC471u);
          JUMPOUT(0x1962616F0);
        }
        v62 = (float)((float)(v57 * v52) + (float)(*(float *)&a3 * v56)) + (float)(a5 * v59);
        if (v62 < 0.0)
        {
          LOBYTE(v63) = 0;
        }
        else
        {
          v63 = (uint64_t)rint(v62);
          if (v62 > 255.0)
            LOBYTE(v63) = -1;
        }
        *(_BYTE *)(*((_QWORD *)a2 + 5) + v48) = v63;
        if (*((_QWORD *)a2 + 6) <= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x196261710);
        }
        a4 = v61 * v52;
        v64 = (float)(a4 + (float)(*(float *)&a3 * v58)) + (float)(a5 * v60);
        if (v64 < 0.0)
        {
          LOBYTE(v65) = 0;
        }
        else
        {
          a4 = 255.0;
          if (v64 > 255.0)
            LOBYTE(v65) = -1;
          else
            v65 = (uint64_t)rint(v64);
        }
        *(_BYTE *)(*((_QWORD *)a2 + 5) + v49) = v65;
        if (*((_QWORD *)a2 + 6) <= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x196261730);
        }
        a3 = rint((double)v55);
        *(_BYTE *)(*((_QWORD *)a2 + 5) + v50) = (uint64_t)a3;
        v45 = v46;
        v44 = v6 > v46;
        v46 += 4;
      }
      while (v44);
    }
  }
  else if (v7 == 4 && v6 != 0)
  {
    v66 = 0;
    v67 = (uint64_t)rint(0.0);
    v68 = 4;
    do
    {
      v69 = *((_QWORD *)a2 + 6);
      if (v69 <= v66)
      {
        __break(0xC471u);
        JUMPOUT(0x196261750);
      }
      v70 = v68 - 3;
      if (v69 <= v70)
      {
        __break(0xC471u);
        JUMPOUT(0x196261770);
      }
      v71 = v68 - 2;
      if (v69 <= v71)
      {
        __break(0xC471u);
        JUMPOUT(0x196261790);
      }
      v72 = v68 - 1;
      if (v69 <= v72)
      {
        __break(0xC471u);
        JUMPOUT(0x1962617B0);
      }
      this = *((_QWORD *)a2 + 5);
      v73 = *(unsigned __int8 *)(this + v66);
      v74 = *(unsigned __int8 *)(this + v70);
      LOBYTE(a6) = *(_BYTE *)(this + v71);
      *(_BYTE *)(this + v66) = v67;
      if (*((_QWORD *)a2 + 6) <= v70)
      {
        __break(0xC471u);
        JUMPOUT(0x1962617D0);
      }
      *(_BYTE *)(*((_QWORD *)a2 + 5) + v70) = v67;
      if (*((_QWORD *)a2 + 6) <= v71)
      {
        __break(0xC471u);
        JUMPOUT(0x1962617F0);
      }
      *(_BYTE *)(*((_QWORD *)a2 + 5) + v71) = v67;
      if (*((_QWORD *)a2 + 6) <= v72)
      {
        __break(0xC471u);
        JUMPOUT(0x196261810);
      }
      a6 = (double)v74 * 0.7154 + (double)v73 * 0.2125 + (double)*(unint64_t *)&a6 * 0.0721;
      *(float *)&a6 = a6;
      if (*(float *)&a6 < 0.0)
      {
        LOBYTE(v75) = 0;
      }
      else if (*(float *)&a6 > 255.0)
      {
        LOBYTE(v75) = -1;
      }
      else
      {
        a6 = rint(*(float *)&a6);
        v75 = (uint64_t)a6;
      }
      *(_BYTE *)(*((_QWORD *)a2 + 5) + v72) = v75;
      v66 = v68;
      v44 = v6 > v68;
      v68 += 4;
    }
    while (v44);
  }
  return this;
}

uint64_t WebCore::FEColorMatrixSoftwareApplier::applyPlatform(WebCore::FEColorMatrixSoftwareApplier *this, WebCore::PixelBuffer *a2, double a3, float a4, float a5, double a6)
{
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;

  v6 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v6 + 64) != 1)
    return WebCore::FEColorMatrixSoftwareApplier::applyPlatformAccelerated((uint64_t)this, *((_QWORD *)a2 + 4), *((void **)a2 + 5));
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 4)
    goto LABEL_15;
  v8 = *(_DWORD **)(v6 + 72);
  LODWORD(a3) = v8[4];
  if (*(float *)&a3 != 0.0)
    return WebCore::FEColorMatrixSoftwareApplier::applyPlatformUnaccelerated((uint64_t)this, a2, a3, a4, a5, a6);
  if (v7 <= 9)
  {
    __break(0xC471u);
    JUMPOUT(0x1962619A0);
  }
  LODWORD(a3) = v8[9];
  if (*(float *)&a3 != 0.0)
    return WebCore::FEColorMatrixSoftwareApplier::applyPlatformUnaccelerated((uint64_t)this, a2, a3, a4, a5, a6);
  if (v7 <= 0xE)
  {
    __break(0xC471u);
    JUMPOUT(0x1962619A8);
  }
  LODWORD(a3) = v8[14];
  if (*(float *)&a3 != 0.0)
    return WebCore::FEColorMatrixSoftwareApplier::applyPlatformUnaccelerated((uint64_t)this, a2, a3, a4, a5, a6);
  if (v7 <= 0x13)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x196261998);
  }
  LODWORD(a3) = v8[19];
  if (*(float *)&a3 != 0.0)
    return WebCore::FEColorMatrixSoftwareApplier::applyPlatformUnaccelerated((uint64_t)this, a2, a3, a4, a5, a6);
  return WebCore::FEColorMatrixSoftwareApplier::applyPlatformAccelerated((uint64_t)this, *((_QWORD *)a2 + 4), *((void **)a2 + 5));
}

WebCore::FEColorMatrixSoftwareApplier *WebCore::FEColorMatrixSoftwareApplier::apply(WebCore::FEColorMatrixSoftwareApplier *result, int a2, uint64_t **a3, WebCore::FilterImage *this)
{
  WebCore::FEColorMatrixSoftwareApplier *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  const void *v19;
  double v20;
  float v21;
  float v22;
  double v23;
  WebCore::PixelBuffer *v24;
  _BOOL8 v25;
  WebCore::PixelBuffer *v26;
  CFTypeRef v27;
  void (**v28)(WebCore::ImageBufferAllocator *__hidden);
  WebCore::PixelBuffer *v29;
  uint64_t v30;
  int v31[2];
  uint64_t v32;
  CFTypeRef cf;

  if (*((_DWORD *)a3 + 3))
  {
    v5 = result;
    v6 = **a3;
    v7 = WebCore::FilterImage::imageBuffer(this);
    if (!v7)
      return 0;
    v8 = v7;
    v9 = (unsigned __int8 **)(v7 + 8);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v7 + 8));
    v10 = WebCore::FilterImage::imageBuffer((WebCore::FilterImage *)v6);
    v11 = v10;
    if (v10)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v10 + 8));
      v12 = *(_QWORD *)((char *)this + 36);
      v13 = *(_QWORD *)(v6 + 36);
      v14 = v13 - v12;
      v15 = v13 - (v12 & 0xFFFFFFFF00000000);
      v16 = *(_DWORD *)(v6 + 44);
      v17 = *(_DWORD *)(v6 + 48);
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      *(float *)&v30 = (float)v14;
      *((float *)&v30 + 1) = (float)SHIDWORD(v15);
      *(float *)v31 = (float)v16;
      *(float *)&v31[1] = (float)v17;
      v32 = 0;
      cf = *(CFTypeRef *)(v11 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v18 + 384))(v18, v11, &v30, &v32, 4641);
    }
    LOWORD(v32) = 1;
    v19 = (const void *)*((_QWORD *)this + 7);
    cf = v19;
    if (v19)
      CFRetain(v19);
    WebCore::IntSize::IntSize(v31, (const WebCore::FloatSize *)(v8 + 16));
    v30 = 0;
    v28 = off_1E340D360;
    (*(void (**)(WebCore::PixelBuffer **__return_ptr, uint64_t, uint64_t *, uint64_t *, void (***)(WebCore::ImageBufferAllocator *__hidden)))(*(_QWORD *)v8 + 88))(&v29, v8, &v32, &v30, &v28);
    v24 = v29;
    v25 = v29 != 0;
    if (v29)
    {
      WebCore::FEColorMatrixSoftwareApplier::applyPlatform(v5, v29, v20, v21, v22, v23);
      v28 = 0;
      (*(void (**)(uint64_t, WebCore::PixelBuffer *, uint64_t *, void (***)(WebCore::ImageBufferAllocator *__hidden), _QWORD))(*(_QWORD *)v8 + 96))(v8, v29, &v30, &v28, 0);
      v26 = v29;
      v29 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 2) == 1)
          (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v26 + 8))(v26);
        else
          --*((_DWORD *)v26 + 2);
      }
    }
    v27 = cf;
    cf = 0;
    if (v27)
      CFRelease(v27);
    if (v11)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v11 + 8), v24);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v9, v24);
    return (WebCore::FEColorMatrixSoftwareApplier *)v25;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

BOOL WebCore::FEComponentTransferSoftwareApplier::apply(uint64_t a1, uint64_t a2, uint64_t **a3, _QWORD *a4)
{
  uint64_t v6;
  WebCore::PixelBuffer *v7;
  int32x2_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  WTF *v34;
  uint64_t v35;
  _BYTE *v36;
  int32x2_t v38[2];
  __int128 v39;
  uint64_t v40;
  WTF *v41;
  int v42;
  int v43;
  __int128 v44;
  WTF *v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  WTF *v61[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  WTF *v77[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[16];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)a3 + 3))
  {
    __break(0xC471u);
    goto LABEL_33;
  }
  v6 = **a3;
  v7 = WebCore::FilterImage::pixelBuffer(a4, 1);
  if (!v7)
    return v7 != 0;
  v8 = *(int32x2_t *)((char *)a4 + 44);
  v38[0] = (int32x2_t)((*(_QWORD *)((char *)a4 + 36) - (*(_QWORD *)(v6 + 36) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (*(_QWORD *)((char *)a4 + 36) - *(_QWORD *)(v6 + 36)));
  v38[1] = v8;
  WebCore::FilterImage::copyPixelBuffer((WebCore::FilterImage *)v6, v7, v38);
  v9 = *((_QWORD *)v7 + 5);
  v10 = *((_QWORD *)v7 + 6);
  memset(v92, 0, sizeof(v92));
  v11 = *(_QWORD *)(a1 + 8);
  v76 = *(_OWORD *)(v11 + 64);
  v12 = *(WTF **)(v11 + 80);
  v13 = *(unsigned int *)(v11 + 100);
  LODWORD(v78) = 0;
  v77[0] = v12;
  v77[1] = 0;
  DWORD1(v78) = v13;
  if ((_DWORD)v13)
  {
    if (v13 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x196261F38);
    }
    v14 = (WTF *)WTF::fastMalloc((WTF *)(4 * v13));
    LODWORD(v78) = v13;
    v77[1] = v14;
    memcpy(v14, *(const void **)(v11 + 88), 4 * *(unsigned int *)(v11 + 100));
  }
  WebCore::FEComponentTransfer::computeLookupTable((unsigned __int8 *)&v76, (uint64_t)v92);
  v16 = v77[1];
  if (v77[1])
  {
    v77[1] = 0;
    LODWORD(v78) = 0;
    WTF::fastFree(v16, v15);
  }
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  *(_OWORD *)v77 = 0u;
  v17 = *(_QWORD *)(a1 + 8);
  v60 = *(_OWORD *)(v17 + 104);
  v18 = *(WTF **)(v17 + 120);
  v19 = *(unsigned int *)(v17 + 140);
  v61[1] = 0;
  LODWORD(v62) = 0;
  v61[0] = v18;
  DWORD1(v62) = v19;
  if ((_DWORD)v19)
  {
    if (v19 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x196261F40);
    }
    v20 = (WTF *)WTF::fastMalloc((WTF *)(4 * v19));
    LODWORD(v62) = v19;
    v61[1] = v20;
    memcpy(v20, *(const void **)(v17 + 128), 4 * *(unsigned int *)(v17 + 140));
  }
  WebCore::FEComponentTransfer::computeLookupTable((unsigned __int8 *)&v60, (uint64_t)&v76);
  v22 = v61[1];
  if (v61[1])
  {
    v61[1] = 0;
    LODWORD(v62) = 0;
    WTF::fastFree(v22, v21);
  }
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  *(_OWORD *)v61 = 0u;
  v23 = *(_QWORD *)(a1 + 8);
  v44 = *(_OWORD *)(v23 + 144);
  v24 = *(WTF **)(v23 + 160);
  v25 = *(unsigned int *)(v23 + 180);
  v45[1] = 0;
  LODWORD(v46) = 0;
  v45[0] = v24;
  DWORD1(v46) = v25;
  if ((_DWORD)v25)
  {
    if (v25 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x196261F48);
    }
    v26 = (WTF *)WTF::fastMalloc((WTF *)(4 * v25));
    LODWORD(v46) = v25;
    v45[1] = v26;
    memcpy(v26, *(const void **)(v23 + 168), 4 * *(unsigned int *)(v23 + 180));
  }
  WebCore::FEComponentTransfer::computeLookupTable((unsigned __int8 *)&v44, (uint64_t)&v60);
  v28 = v45[1];
  if (v45[1])
  {
    v45[1] = 0;
    LODWORD(v46) = 0;
    WTF::fastFree(v28, v27);
  }
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  *(_OWORD *)v45 = 0u;
  v29 = *(_QWORD *)(a1 + 8);
  v39 = *(_OWORD *)(v29 + 184);
  v30 = *(_QWORD *)(v29 + 200);
  v31 = *(unsigned int *)(v29 + 220);
  v41 = 0;
  v42 = 0;
  v40 = v30;
  v43 = v31;
  if ((_DWORD)v31)
  {
    if (!(v31 >> 30))
    {
      v32 = (WTF *)WTF::fastMalloc((WTF *)(4 * v31));
      v42 = v31;
      v41 = v32;
      memcpy(v32, *(const void **)(v29 + 208), 4 * *(unsigned int *)(v29 + 220));
      goto LABEL_21;
    }
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x196261F30);
  }
LABEL_21:
  WebCore::FEComponentTransfer::computeLookupTable((unsigned __int8 *)&v39, (uint64_t)&v44);
  v34 = v41;
  if (v41)
  {
    v41 = 0;
    v42 = 0;
    WTF::fastFree(v34, v33);
    if (!v10)
      return v7 != 0;
  }
  else if (!v10)
  {
    return v7 != 0;
  }
  v35 = 0;
  do
  {
    v36 = (_BYTE *)(v9 + v35);
    *v36 = *((_BYTE *)v92 + *(unsigned __int8 *)(v9 + v35));
    v36[1] = *((_BYTE *)&v77[-2] + *(unsigned __int8 *)(v9 + v35 + 1));
    v36[2] = *((_BYTE *)&v61[-2] + *(unsigned __int8 *)(v9 + v35 + 2));
    v36[3] = *((_BYTE *)&v45[-2] + *(unsigned __int8 *)(v9 + v35 + 3));
    v35 += 4;
  }
  while (v10 > v35);
  return v7 != 0;
}

BOOL WebCore::PointLightSource::operator==(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) == 1
      && *(_BYTE *)(a1 + 12) == 1
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24);
}

uint64_t WebCore::LightSource::setAzimuth(WebCore::LightSource *this, float a2)
{
  return 0;
}

uint64_t WebCore::LightSource::setElevation(WebCore::LightSource *this, float a2)
{
  return 0;
}

void WebCore::SourceAlpha::~SourceAlpha(WebCore::SourceAlpha *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v4, v5);
}

void WebCore::SourceGraphic::~SourceGraphic(WebCore::SourceGraphic *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34164C8;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::SourceGraphic::numberOfEffectInputs(WebCore::SourceGraphic *this)
{
  return 0;
}

BOOL WebCore::SpotLightSource::operator==(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) == 2
      && *(_BYTE *)(a1 + 12) == 2
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(float *)(a1 + 28) == *(float *)(a2 + 28)
      && *(float *)(a1 + 32) == *(float *)(a2 + 32)
      && *(float *)(a1 + 36) == *(float *)(a2 + 36)
      && *(float *)(a1 + 52) == *(float *)(a2 + 52)
      && *(float *)(a1 + 56) == *(float *)(a2 + 56);
}

WebCore::FilterImage **WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, WebCore::FilterImage **a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  void *v11;
  WebCore::FilterImage **v12;
  int i;
  uint64_t v14;
  WebCore::FilterImage **v15;
  WebCore::FilterImage *v16;
  WebCore::FilterImage **result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::FilterImage *v27;
  WebCore::FilterImage *v28;
  WebCore::FilterImage *v29;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v10 & v9;
    v15 = (WebCore::FilterImage **)(v8 + 16 * v14);
    v16 = *v15;
    if (!*v15)
    {
      if (v12)
      {
        *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v15 = v12;
      }
      result = WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::translate<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>(v15, (WebCore::FilterImage **)a3, a4);
      v18 = *a2;
      if (*a2)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *a2;
      if (*a2)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_16;
      }
      else if (3 * v23 > 4 * v22)
      {
LABEL_16:
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v20 + 16 * v23;
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
      result = (WebCore::FilterImage **)WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::expand(a2, (uint64_t *)v15);
      v15 = result;
      v20 = *a2;
      if (*a2)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_16;
    }
    if (v16 != (WebCore::FilterImage *)-1)
      break;
    v12 = (WebCore::FilterImage **)(v8 + 16 * v14);
LABEL_7:
    v10 = i + v14;
  }
  if (v16 != (WebCore::FilterImage *)*a3)
    goto LABEL_7;
  v24 = *a2;
  if (*a2)
    v25 = *(unsigned int *)(v24 - 4);
  else
    v25 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v24 + 16 * v25;
  *(_BYTE *)(a1 + 16) = 0;
  v26 = v8 + 16 * v14;
  v27 = *a4;
  *a4 = 0;
  v28 = *(WebCore::FilterImage **)(v26 + 8);
  *(_QWORD *)(v26 + 8) = v27;
  v29 = v28;
  return WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>::~Ref(&v29, v11);
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::rehash(a1, v5, a2);
}

WebCore::FilterImage **WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::translate<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>(WebCore::FilterImage **a1, WebCore::FilterImage **a2, WebCore::FilterImage **a3)
{
  WebCore::FilterImage *v5;
  WebCore::FilterImage *v6;
  WebCore::FilterImage *v7;
  WebCore::FilterImage *v8;
  void *v9;
  WebCore::FilterImage *v11;

  v5 = *a2;
  *a2 = 0;
  v6 = *a1;
  *a1 = v5;
  v11 = v6;
  WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref((uint64_t *)&v11, a2);
  v7 = *a3;
  *a3 = 0;
  v8 = a1[1];
  a1[1] = v7;
  v11 = v8;
  return WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>::~Ref(&v11, v9);
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t *result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (uint64_t *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::reinsert(*a1, v14);
          WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>::~KeyValuePair(v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>::~KeyValuePair(v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  int v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  WebCore::FilterImage *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2);
  v7 = 0;
  do
  {
    v8 = v5 & v4;
    v5 = ++v7 + v8;
  }
  while (*(_QWORD *)(a1 + 16 * v8));
  v9 = (uint64_t *)(a1 + 16 * v8);
  v10 = (WebCore::FilterImage *)v9[1];
  v9[1] = 0;
  if (!v10)
    goto LABEL_6;
  if (*(_DWORD *)v10 != 1)
  {
    --*(_DWORD *)v10;
LABEL_6:
    *v9 = 0;
    goto LABEL_7;
  }
  WebCore::FilterImage::~FilterImage(v10, v6);
  WTF::fastFree(v14, v15);
  v17 = *v9;
  *v9 = 0;
  if (!v17)
    goto LABEL_7;
  v18 = *(_QWORD *)(v17 + 8);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v18);
LABEL_15:
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v20 - 1;
  *(_QWORD *)(v18 + 8) = v20 - 1;
  if (v20 == 1)
  {
    v25 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v23 = v25 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr((unsigned __int8 *)v18);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
LABEL_21:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
  if (!v21)
  {
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (!v23)
      WTF::fastFree((WTF *)v18, v16);
  }
LABEL_7:
  v11 = *a2;
  *a2 = 0;
  *v9 = v11;
  v12 = a2[1];
  a2[1] = 0;
  v9[1] = v12;
  return v9;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::translate<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>> const&,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  WebCore::FilterImage *v5;
  void *v6;
  uint64_t v7;
  uint64_t *result;
  WebCore::FilterImage *v9;

  ++*a2;
  v5 = *(WebCore::FilterImage **)a1;
  *(_QWORD *)a1 = a2;
  v9 = v5;
  WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>::~Ref(&v9, a2);
  v7 = *a3;
  *a3 = 0;
  result = *(uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (result)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::deallocateTable(result, v6);
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (uint64_t *)v6;
    do
    {
      if (*v16 != -1)
      {
        if (*v16)
        {
          v17 = WTF::HashTable<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::reinsert(*a1, v16);
          WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>::~KeyValuePair((uint64_t)v16, v18);
          if (v16 == a3)
            v13 = v17;
        }
        else
        {
          WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>::~KeyValuePair((uint64_t)v16, v10);
        }
      }
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_15;
  }
  result = 0;
  if (v6)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  void *v14;
  WebCore::FilterImage *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v19;
  void *v20;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(a1 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  v11 = a1 + 16 * v9;
  v13 = (_QWORD *)(v11 + 8);
  v12 = *(uint64_t **)(v11 + 8);
  if (v12)
  {
    WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::deallocateTable(v12, a2);
    v15 = *(WebCore::FilterImage **)v11;
    *(_QWORD *)v11 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WebCore::FilterImage::~FilterImage(v15, v14);
        WTF::fastFree(v19, v20);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  else
  {
    *(_QWORD *)v11 = 0;
  }
  v16 = *a2;
  *a2 = 0;
  *(_QWORD *)v11 = v16;
  *v13 = 0;
  v17 = a2[1];
  a2[1] = 0;
  *v13 = v17;
  return v11;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  int i;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v10 = 0;
  v11 = *a3;
  for (i = 1; ; ++i)
  {
    v13 = result & v7;
    v14 = (uint64_t *)(v6 + 8 * (result & v7));
    v15 = *v14;
    if (!*v14)
    {
      if (v10)
      {
        *v10 = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v14 = v10;
      }
      *a3 = 0;
      v16 = *v14;
      *v14 = v11;
      v27 = v16;
      result = (uint64_t)WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(&v27, v9);
      v17 = *a2;
      if (*a2)
        v18 = *(_DWORD *)(v17 - 12) + 1;
      else
        v18 = 1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *a2;
      if (*a2)
        v20 = *(_DWORD *)(v19 - 12);
      else
        v20 = 0;
      v21 = (*(_DWORD *)(v19 - 16) + v20);
      v22 = *(unsigned int *)(v19 - 4);
      if (v22 > 0x400)
      {
        if (v22 > 2 * v21)
          goto LABEL_14;
      }
      else if (3 * v22 > 4 * v21)
      {
LABEL_14:
        v23 = v19 + 8 * v22;
        v24 = 1;
        goto LABEL_15;
      }
      result = (uint64_t)WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::expand(a2, v14);
      v14 = (uint64_t *)result;
      v19 = *a2;
      if (*a2)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
      goto LABEL_14;
    }
    if (v15 == -1)
    {
      v10 = (uint64_t *)(v6 + 8 * v13);
      goto LABEL_25;
    }
    if (v15 == v11)
      break;
LABEL_25:
    result = i + v13;
  }
  v25 = *a2;
  if (*a2)
    v26 = *(unsigned int *)(v25 - 4);
  else
    v26 = 0;
  v24 = 0;
  v23 = v25 + 8 * v26;
LABEL_15:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t *result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (uint64_t *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::reinsert(*a1, v14);
          WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(v14, v10);
        }
      }
      ++v14;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(a1 + 8 * v7));
  result = (uint64_t *)(a1 + 8 * v7);
  *result = 0;
  v9 = *a2;
  *a2 = 0;
  *result = v9;
  return result;
}

uint64_t WebCore::FECompositeSoftwareApplier::apply(uint64_t a1, int a2, uint64_t a3, WebCore::FilterImage *this)
{
  int v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  float v54;
  float v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  int v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  int v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;

  v4 = *(_DWORD *)(a3 + 12);
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x196263534);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19626353CLL);
  }
  v8 = **(_QWORD ***)a3;
  v7 = *(_QWORD **)(*(_QWORD *)a3 + 8);
  if (*((_QWORD *)this + 11))
    v9 = WebCore::FilterImage::imageBufferFromCIImage(this);
  else
    v9 = WebCore::FilterImage::imageBufferFromPixelBuffer(this);
  v10 = (_QWORD *)v9;
  if (!v9)
    return 0;
  v11 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_10:
  ++*(_QWORD *)(v11 + 8);
  v13 = __ldxr((unsigned __int8 *)v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
  if (v8[11])
    v14 = WebCore::FilterImage::imageBufferFromCIImage((WebCore::FilterImage *)v8);
  else
    v14 = WebCore::FilterImage::imageBufferFromPixelBuffer((WebCore::FilterImage *)v8);
  v15 = v14;
  if (!v14)
  {
    if (v7[11])
      v96 = WebCore::FilterImage::imageBufferFromCIImage((WebCore::FilterImage *)v7);
    else
      v96 = WebCore::FilterImage::imageBufferFromPixelBuffer((WebCore::FilterImage *)v7);
    v21 = v96;
    if (!v96)
    {
      v27 = 0;
      goto LABEL_106;
    }
    goto LABEL_30;
  }
  v16 = *(_QWORD *)(v14 + 8);
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v16);
LABEL_22:
  ++*(_QWORD *)(v16 + 8);
  v18 = __ldxr((unsigned __int8 *)v16);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v16))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
  if (v7[11])
    v19 = WebCore::FilterImage::imageBufferFromCIImage((WebCore::FilterImage *)v7);
  else
    v19 = WebCore::FilterImage::imageBufferFromPixelBuffer((WebCore::FilterImage *)v7);
  v21 = v19;
  if (!v19)
  {
    v27 = 0;
    goto LABEL_90;
  }
LABEL_30:
  v22 = *(_QWORD *)(v21 + 8);
  if (__ldaxr((unsigned __int8 *)v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v22))
  {
    goto LABEL_34;
  }
  MEMORY[0x19AEA534C](v22);
LABEL_34:
  ++*(_QWORD *)(v22 + 8);
  v24 = __ldxr((unsigned __int8 *)v22);
  if (v24 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v22))
    {
      if (v15)
        goto LABEL_37;
LABEL_41:
      v27 = 0;
      goto LABEL_74;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v22);
  if (!v15)
    goto LABEL_41;
LABEL_37:
  v25 = (*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
  v26 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 64);
  v27 = 0;
  v28 = *(_QWORD *)((char *)this + 36);
  v29 = *(_QWORD *)((char *)v8 + 36);
  v30 = *(_QWORD *)((char *)v8 + 44);
  v31 = *(_QWORD *)((char *)v7 + 36);
  v32 = *(_QWORD *)((char *)v7 + 44);
  v33 = v31 - v28;
  v34 = v31 - (v28 & 0xFFFFFFFF00000000);
  switch(v26)
  {
    case 0:
    case 6:
      break;
    case 1:
      *(float *)&v100 = (float)v33;
      *((float *)&v100 + 1) = (float)SHIDWORD(v34);
      *(float *)&v101 = (float)(int)v32;
      *((float *)&v101 + 1) = (float)SHIDWORD(v32);
      v35 = *(_QWORD *)(v21 + 16);
      v102 = 0;
      v103 = v35;
      v36 = v25;
      v37 = v29 - v28;
      v38 = v29 - (v28 & 0xFFFFFFFF00000000);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, unint64_t *, uint64_t))(*(_QWORD *)v25 + 384))(v25, v21, &v100, &v102, 4641);
      *(float *)&v100 = (float)v37;
      *((float *)&v100 + 1) = (float)SHIDWORD(v38);
      *(float *)&v101 = (float)(int)v30;
      *((float *)&v101 + 1) = (float)SHIDWORD(v30);
      v39 = *(_QWORD *)(v15 + 16);
      v102 = 0;
      v103 = v39;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, unint64_t *, uint64_t))(*(_QWORD *)v36 + 384))(v36, v15, &v100, &v102, 4641);
      goto LABEL_73;
    case 2:
      if ((int)v29 <= (int)v31)
        v43 = v31;
      else
        v43 = v29;
      if (SHIDWORD(v29) <= SHIDWORD(v31))
        v44 = HIDWORD(v31);
      else
        v44 = HIDWORD(v29);
      v45 = v32 + v31;
      if ((int)v32 + (int)v31 >= (int)v30 + (int)v29)
        v45 = v30 + v29;
      v46 = HIDWORD(v32) + HIDWORD(v31);
      if (HIDWORD(v32) + HIDWORD(v31) >= HIDWORD(v30) + HIDWORD(v29))
        v46 = HIDWORD(v30) + HIDWORD(v29);
      if (v43 >= v45 || v44 >= v46)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
      }
      v20 = (void *)*((unsigned int *)this + 11);
      v47 = *((_DWORD *)this + 12);
      if (v43 <= (int)v28)
        v48 = *(_QWORD *)((char *)this + 36);
      else
        v48 = v43;
      if (v44 <= SHIDWORD(v28))
        v49 = HIDWORD(*(_QWORD *)((char *)this + 36));
      else
        v49 = v44;
      if ((int)v20 + (int)v28 < v45)
        v45 = (_DWORD)v20 + v28;
      v50 = v47 + HIDWORD(v28);
      if (v47 + HIDWORD(v28) >= v46)
        v50 = v46;
      if (v48 >= v45 || v49 >= v50)
      {
        v48 = 0;
        v49 = 0;
        v45 = 0;
        v50 = 0;
      }
      v51 = v45 - v48;
      v27 = 1;
      if (v51 < 1)
        break;
      v52 = v50 - v49;
      if (v52 < 1)
        break;
      v53 = v49 - HIDWORD(v29);
      v54 = (float)(v48 - v28);
      v55 = (float)(v49 - HIDWORD(v28));
      *(float *)&v102 = v54;
      *((float *)&v102 + 1) = v55;
      *(float *)&v56 = (float)v51;
      *(float *)&v57 = (float)v52;
      *(float *)&v103 = (float)v51;
      *((float *)&v103 + 1) = (float)v52;
      *(float *)&v100 = (float)(v48 - v31);
      *((float *)&v100 + 1) = (float)(v49 - HIDWORD(v31));
      *(float *)&v101 = (float)v51;
      *((float *)&v101 + 1) = (float)v52;
      v58 = v25;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v25 + 384))(v25, v21, &v102, &v100, 4641);
      v102 = __PAIR64__(LODWORD(v55), LODWORD(v54));
      v103 = __PAIR64__(v57, v56);
      *(float *)&v100 = (float)(v48 - v29);
      *((float *)&v100 + 1) = (float)v53;
      v101 = __PAIR64__(v57, v56);
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v58 + 384))(v58, v15, &v102, &v100, 4897);
LABEL_73:
      v27 = 1;
      break;
    case 3:
      *(float *)&v100 = (float)(v29 - v28);
      *((float *)&v100 + 1) = (float)(int)((v29 - (v28 & 0xFFFFFFFF00000000)) >> 32);
      *(float *)&v101 = (float)(int)v30;
      *((float *)&v101 + 1) = (float)SHIDWORD(v30);
      v40 = *(_QWORD *)(v15 + 16);
      v102 = 0;
      v103 = v40;
      v41 = v25;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, unint64_t *, uint64_t))(*(_QWORD *)v25 + 384))(v25, v15, &v100, &v102, 4641);
      *(float *)&v102 = (float)v33;
      *((float *)&v102 + 1) = (float)SHIDWORD(v34);
      *(float *)&v103 = (float)(int)v32;
      *((float *)&v103 + 1) = (float)SHIDWORD(v32);
      v42 = *(_QWORD *)(v21 + 16);
      v100 = 0;
      v101 = v42;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v41 + 384))(v41, v21, &v102, &v100, 6177);
      goto LABEL_73;
    case 4:
      *(float *)&v100 = (float)v33;
      *((float *)&v100 + 1) = (float)SHIDWORD(v34);
      *(float *)&v101 = (float)(int)v32;
      *((float *)&v101 + 1) = (float)SHIDWORD(v32);
      v64 = *(_QWORD *)(v21 + 16);
      v102 = 0;
      v103 = v64;
      v65 = v25;
      v66 = v29 - v28;
      v67 = v29 - (v28 & 0xFFFFFFFF00000000);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, unint64_t *, uint64_t))(*(_QWORD *)v25 + 384))(v25, v21, &v100, &v102, 4641);
      *(float *)&v102 = (float)v66;
      *((float *)&v102 + 1) = (float)SHIDWORD(v67);
      *(float *)&v103 = (float)(int)v30;
      *((float *)&v103 + 1) = (float)SHIDWORD(v30);
      v68 = *(_QWORD *)(v15 + 16);
      v100 = 0;
      v101 = v68;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v65 + 384))(v65, v15, &v102, &v100, 5409);
      goto LABEL_73;
    case 5:
      *(float *)&v100 = (float)v33;
      *((float *)&v100 + 1) = (float)SHIDWORD(v34);
      *(float *)&v101 = (float)(int)v32;
      *((float *)&v101 + 1) = (float)SHIDWORD(v32);
      v69 = *(_QWORD *)(v21 + 16);
      v102 = 0;
      v103 = v69;
      v70 = v25;
      v71 = v29 - v28;
      v72 = v29 - (v28 & 0xFFFFFFFF00000000);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, unint64_t *, uint64_t))(*(_QWORD *)v25 + 384))(v25, v21, &v100, &v102, 4641);
      *(float *)&v102 = (float)v71;
      *((float *)&v102 + 1) = (float)SHIDWORD(v72);
      *(float *)&v103 = (float)(int)v30;
      *((float *)&v103 + 1) = (float)SHIDWORD(v30);
      v73 = *(_QWORD *)(v15 + 16);
      v100 = 0;
      v101 = v73;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v70 + 384))(v70, v15, &v102, &v100, 6689);
      goto LABEL_73;
    case 7:
      *(float *)&v100 = (float)v33;
      *((float *)&v100 + 1) = (float)SHIDWORD(v34);
      *(float *)&v101 = (float)(int)v32;
      *((float *)&v101 + 1) = (float)SHIDWORD(v32);
      v59 = *(_QWORD *)(v21 + 16);
      v102 = 0;
      v103 = v59;
      v60 = v25;
      v61 = v29 - v28;
      v62 = v29 - (v28 & 0xFFFFFFFF00000000);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, unint64_t *, uint64_t))(*(_QWORD *)v25 + 384))(v25, v21, &v100, &v102, 4641);
      *(float *)&v102 = (float)v61;
      *((float *)&v102 + 1) = (float)SHIDWORD(v62);
      *(float *)&v103 = (float)(int)v30;
      *((float *)&v103 + 1) = (float)SHIDWORD(v30);
      v63 = *(_QWORD *)(v15 + 16);
      v100 = 0;
      v101 = v63;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v60 + 384))(v60, v15, &v102, &v100, 7201);
      goto LABEL_73;
    default:
      goto LABEL_73;
  }
LABEL_74:
  v74 = *(_QWORD *)(v21 + 8);
  if (__ldaxr((unsigned __int8 *)v74))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v74))
  {
    goto LABEL_78;
  }
  MEMORY[0x19AEA534C](v74);
LABEL_78:
  v76 = *(_QWORD *)(v74 + 8);
  v77 = v76 - 1;
  *(_QWORD *)(v74 + 8) = v76 - 1;
  if (v76 == 1)
  {
    v98 = *(_QWORD *)(v74 + 16);
    v78 = *(_QWORD *)(v74 + 24);
    *(_QWORD *)(v74 + 24) = 0;
    v79 = v98 != 0;
  }
  else
  {
    v78 = 0;
    v79 = 1;
  }
  v80 = __ldxr((unsigned __int8 *)v74);
  if (v80 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v74))
    {
      if (v77)
        goto LABEL_89;
      goto LABEL_86;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v74);
  if (v77)
    goto LABEL_89;
LABEL_86:
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  if (v79)
  {
LABEL_89:
    if (!v15)
      goto LABEL_106;
    goto LABEL_90;
  }
  WTF::fastFree((WTF *)v74, v20);
  if (!v15)
    goto LABEL_106;
LABEL_90:
  v81 = *(_QWORD *)(v15 + 8);
  if (__ldaxr((unsigned __int8 *)v81))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v81))
  {
    goto LABEL_94;
  }
  MEMORY[0x19AEA534C](v81);
LABEL_94:
  v83 = *(_QWORD *)(v81 + 8);
  v84 = v83 - 1;
  *(_QWORD *)(v81 + 8) = v83 - 1;
  if (v83 == 1)
  {
    v99 = *(_QWORD *)(v81 + 16);
    v85 = *(_QWORD *)(v81 + 24);
    *(_QWORD *)(v81 + 24) = 0;
    v86 = v99 != 0;
  }
  else
  {
    v85 = 0;
    v86 = 1;
  }
  v87 = __ldxr((unsigned __int8 *)v81);
  if (v87 != 1)
  {
    __clrex();
LABEL_101:
    WTF::Lock::unlockSlow((WTF::Lock *)v81);
    if (v84)
      goto LABEL_106;
    goto LABEL_102;
  }
  if (__stlxr(0, (unsigned __int8 *)v81))
    goto LABEL_101;
  if (v84)
    goto LABEL_106;
LABEL_102:
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  if (!v86)
    WTF::fastFree((WTF *)v81, v20);
LABEL_106:
  v88 = v10[1];
  if (__ldaxr((unsigned __int8 *)v88))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v88))
  {
    goto LABEL_110;
  }
  MEMORY[0x19AEA534C](v88);
LABEL_110:
  v90 = *(_QWORD *)(v88 + 8);
  v91 = v90 - 1;
  *(_QWORD *)(v88 + 8) = v90 - 1;
  if (v90 == 1)
  {
    v97 = *(_QWORD *)(v88 + 16);
    v92 = *(_QWORD *)(v88 + 24);
    *(_QWORD *)(v88 + 24) = 0;
    v93 = v97 != 0;
  }
  else
  {
    v92 = 0;
    v93 = 1;
  }
  v94 = __ldxr((unsigned __int8 *)v88);
  if (v94 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v88))
    {
      if (v91)
        return v27;
      goto LABEL_118;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v88);
  if (v91)
    return v27;
LABEL_118:
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  if (!v93)
    WTF::fastFree((WTF *)v88, v20);
  return v27;
}

BOOL WebCore::FECompositeSoftwareArithmeticApplier::apply(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  WebCore::PixelBuffer *v8;
  WebCore::PixelBuffer *v9;
  int32x2_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  WebCore::PixelBuffer *v14;
  _BOOL8 v15;
  CFTypeRef v16;
  const void *v17;
  unsigned __int8 *v18;
  int v19;
  _BYTE *v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;
  unsigned int v30;
  float v31;
  unsigned int v32;
  float v33;
  unsigned int v34;
  float v35;
  unsigned int v36;
  float v37;
  uint64_t v38;
  unsigned int v39;
  float v40;
  unsigned int v41;
  unsigned int v42;
  float v43;
  unsigned int v44;
  float v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  float v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  float v58;
  uint64_t v59;
  int32x2_t v61[2];
  int32x2_t v62;
  WebCore::PixelBuffer *v63;
  unint64_t v64;
  CFTypeRef cf;

  if (*(_DWORD *)(a3 + 12) < 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x196263A7CLL);
  }
  v6 = **(_QWORD ***)a3;
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v8 = WebCore::FilterImage::pixelBuffer(a4, 0);
  if (!v8)
    return 0;
  v9 = v8;
  v10 = *(int32x2_t *)((char *)a4 + 44);
  v61[0] = (int32x2_t)((*(_QWORD *)((char *)a4 + 36) - (*(_QWORD *)((char *)v6 + 36) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (*(_QWORD *)((char *)a4 + 36) - *(_QWORD *)((char *)v6 + 36)));
  v61[1] = v10;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(const void **)(v11 + 56);
  if (v12)
  {
    CFRetain(*(CFTypeRef *)(v11 + 56));
    LOWORD(v64) = 0;
    cf = v12;
    CFRetain(v12);
  }
  else
  {
    LOWORD(v64) = 0;
    cf = 0;
  }
  v13 = v6[12];
  v62 = v10;
  (*(void (**)(WebCore::PixelBuffer **__return_ptr, uint64_t, unint64_t *, int32x2_t *))(*(_QWORD *)v13 + 24))(&v63, v13, &v64, &v62);
  if (v63)
  {
    WebCore::FilterImage::copyPixelBuffer((WebCore::FilterImage *)v6, v63, v61);
    v14 = v63;
  }
  else
  {
    v14 = 0;
  }
  v16 = cf;
  cf = 0;
  if (v16)
    CFRelease(v16);
  if (v12)
    CFRelease(v12);
  v15 = v14 != 0;
  if (v14)
  {
    v17 = *(const void **)((char *)a4 + 44);
    v64 = (*(_QWORD *)((char *)a4 + 36) - (*(_QWORD *)(v7 + 36) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (*(_QWORD *)((char *)a4 + 36) - *(_QWORD *)(v7 + 36));
    cf = v17;
    WebCore::FilterImage::copyPixelBuffer((WebCore::FilterImage *)v7, v9, (int32x2_t *)&v64);
    v18 = (unsigned __int8 *)*((_QWORD *)v14 + 5);
    v19 = *((_DWORD *)v14 + 12);
    v20 = (_BYTE *)*((_QWORD *)v9 + 5);
    v21 = *(float **)(a1 + 8);
    v23 = v21[17];
    v22 = v21[18];
    v24 = v21[19];
    v25 = v21[20];
    v26 = 0.0;
    v27 = v25 + (float)((float)(fminf(v23, 0.0) + fminf(v22, 0.0)) + fminf(v24, 0.0));
    if (v27 > 1.0
      || ((v26 = v25 + (float)((float)(fmaxf(v23, 0.0) + fmaxf(v22, 0.0)) + fmaxf(v24, 0.0)), v27 >= 0.0)
        ? (v28 = v26 > 1.0)
        : (v28 = 1),
          v28 || v25 < 0.0 || (v27 = 1.0, v25 > 1.0) || v26 < 0.0))
    {
      if (v25 == 0.0)
      {
        if (v23 == 0.0)
        {
          if (v19 >= 1)
          {
            v56 = v19 + 1;
            do
            {
              v57 = *v18++;
              LOBYTE(v25) = *v20;
              v25 = v24 * (float)LODWORD(v25);
              v58 = v25 + (float)(v22 * (float)v57);
              LOBYTE(v63) = (int)v58;
              *(_WORD *)((char *)&v63 + 1) = 255;
              v59 = (int)v58 >> 31;
              if ((int)v58 > 0xFF)
                ++v59;
              *v20++ = *((_BYTE *)&v63 + v59);
              --v56;
            }
            while (v56 > 1);
          }
        }
        else if (v19 >= 1)
        {
          v42 = v19 + 1;
          v43 = v23 / 255.0;
          do
          {
            v44 = *v18++;
            LOBYTE(v26) = *v20;
            v26 = (float)LODWORD(v26);
            v45 = (float)((float)(v24 * v26) + (float)(v22 * (float)v44)) + (float)((float)(v43 * (float)v44) * v26);
            LOBYTE(v63) = (int)v45;
            *(_WORD *)((char *)&v63 + 1) = 255;
            v46 = (int)v45 >> 31;
            if ((int)v45 > 0xFF)
              ++v46;
            *v20++ = *((_BYTE *)&v63 + v46);
            --v42;
          }
          while (v42 > 1);
        }
      }
      else if (v23 == 0.0)
      {
        if (v19 >= 1)
        {
          v49 = v25 * 255.0;
          v50 = v19 + 1;
          do
          {
            v51 = *v18++;
            LOBYTE(v26) = *v20;
            v26 = v24 * (float)LODWORD(v26);
            v52 = v49 + (float)(v26 + (float)(v22 * (float)v51));
            LOBYTE(v63) = (int)v52;
            *(_WORD *)((char *)&v63 + 1) = 255;
            v53 = (int)v52 >> 31;
            if ((int)v52 > 0xFF)
              ++v53;
            *v20++ = *((_BYTE *)&v63 + v53);
            --v50;
          }
          while (v50 > 1);
        }
      }
      else if (v19 >= 1)
      {
        v33 = v25 * 255.0;
        v34 = v19 + 1;
        v35 = v23 / 255.0;
        do
        {
          v36 = *v18++;
          LOBYTE(v27) = *v20;
          v27 = (float)LODWORD(v27);
          v37 = v33
              + (float)((float)((float)(v24 * v27) + (float)(v22 * (float)v36))
                      + (float)((float)(v35 * (float)v36) * v27));
          LOBYTE(v63) = (int)v37;
          *(_WORD *)((char *)&v63 + 1) = 255;
          v38 = (int)v37 >> 31;
          if ((int)v37 > 0xFF)
            ++v38;
          *v20++ = *((_BYTE *)&v63 + v38);
          --v34;
        }
        while (v34 > 1);
      }
    }
    else if (v25 == 0.0)
    {
      if (v23 == 0.0)
      {
        if (v19 >= 1)
        {
          v54 = v19 + 1;
          do
          {
            v55 = *v18++;
            LOBYTE(v25) = *v20;
            v25 = v24 * (float)LODWORD(v25);
            *v20++ = (int)(float)(v25 + (float)(v22 * (float)v55));
            --v54;
          }
          while (v54 > 1);
        }
      }
      else if (v19 >= 1)
      {
        v39 = v19 + 1;
        v40 = v23 / 255.0;
        do
        {
          v41 = *v18++;
          LOBYTE(v26) = *v20;
          v26 = (float)LODWORD(v26);
          *v20++ = (int)(float)((float)((float)(v24 * v26) + (float)(v22 * (float)v41))
                              + (float)((float)(v40 * (float)v41) * v26));
          --v39;
        }
        while (v39 > 1);
      }
    }
    else if (v23 == 0.0)
    {
      if (v19 >= 1)
      {
        v47 = v19 + 1;
        do
        {
          v48 = *v18++;
          LOBYTE(v26) = *v20;
          v26 = v24 * (float)LODWORD(v26);
          *v20++ = (int)(float)((float)(v25 * 255.0) + (float)(v26 + (float)(v22 * (float)v48)));
          --v47;
        }
        while (v47 > 1);
      }
    }
    else if (v19 >= 1)
    {
      v29 = v25 * 255.0;
      v30 = v19 + 1;
      v31 = v23 / 255.0;
      do
      {
        v32 = *v18++;
        LOBYTE(v27) = *v20;
        v27 = (float)LODWORD(v27);
        *v20++ = (int)(float)(v29
                            + (float)((float)((float)(v24 * v27) + (float)(v22 * (float)v32))
                                    + (float)((float)(v31 * (float)v32) * v27)));
        --v30;
      }
      while (v30 > 1);
    }
    if (*((_DWORD *)v14 + 2) == 1)
      (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v14 + 8))(v14);
    else
      --*((_DWORD *)v14 + 2);
  }
  return v15;
}

uint64_t *WebCore::FEConvolveMatrixSoftwareApplier::setInteriorPixels(uint64_t *result, int a2, int a3, int a4, int a5, double a6, double a7, double a8, double a9, float a10)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int i;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float v26;
  int v27;
  int v28;
  float v29;
  float v30;
  unint64_t v31;
  float v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  BOOL v37;
  float v38;
  unint64_t v39;
  float v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  float v46;
  unsigned int v47;
  float v48;
  float v49;
  float v50;
  unsigned int v51;
  uint64_t v52;
  float v53;
  unsigned int v54;
  float v55;
  unsigned int v56;
  unint64_t v57;
  BOOL v58;

  if (a5 >= a4 && (a2 & 0x80000000) == 0)
  {
    v10 = 4 * a2;
    v11 = *((_DWORD *)result + 6);
    v12 = 4 * v11;
    v13 = a2 + 1;
    v14 = (4 * (v11 + a2 + 1) - 4) * (a3 - a5);
    v15 = v14 + 4 * (*((_DWORD *)result + 10) + *((_DWORD *)result + 11) * *((_DWORD *)result + 4));
    for (i = a5 + 1; i > a4; --i)
    {
      v17 = v15;
      v18 = v13;
      do
      {
        v19 = v14;
        v20 = v17;
        v21 = *result;
        v22 = *((_BYTE *)result + 49);
        v23 = (*((_DWORD *)result + 17) - 1);
        if ((int)v23 < 0)
        {
          v38 = 0.0;
          v30 = 0.0;
          v29 = 0.0;
          v26 = 0.0;
        }
        else
        {
          v24 = result[7];
          v25 = *(_QWORD *)(v21 + 48);
          v26 = 0.0;
          v27 = *((_DWORD *)result + 6);
          v28 = v19;
          v29 = 0.0;
          v30 = 0.0;
          if (!*((_BYTE *)result + 49))
          {
            v38 = 0.0;
            while (v25 > v28)
            {
              v39 = v28 + 1;
              if (v25 <= v39)
              {
LABEL_61:
                __break(0xC471u);
                JUMPOUT(0x196263E14);
              }
              if (v25 <= v28 + 2)
              {
LABEL_62:
                __break(0xC471u);
                JUMPOUT(0x196263E34);
              }
              if (v25 <= v28 + 3)
              {
                __break(0xC471u);
                JUMPOUT(0x196263E54);
              }
              v40 = *(float *)(v24 + 4 * v23);
              v41 = *(_QWORD *)(v21 + 40);
              LOBYTE(a10) = *(_BYTE *)(v41 + v28);
              *(float *)&v42 = (float)LODWORD(a10);
              v26 = v26 + (float)(v40 * *(float *)&v42);
              LOBYTE(v42) = *(_BYTE *)(v41 + v39);
              *(float *)&v43 = (float)v42;
              v29 = v29 + (float)(v40 * *(float *)&v43);
              LOBYTE(v43) = *(_BYTE *)(v41 + v28 + 2);
              *(float *)&v44 = (float)v43;
              v30 = v30 + (float)(v40 * *(float *)&v44);
              LOBYTE(v44) = *(_BYTE *)(v41 + v28 + 3);
              a10 = (float)v44;
              v38 = v38 + (float)(v40 * a10);
              if (--v27)
                v45 = 0;
              else
                v45 = v10;
              v28 += v45 + 4;
              if (!v27)
                v27 = *((_DWORD *)result + 6);
              v37 = v23-- <= 0;
              if (v37)
                goto LABEL_31;
            }
LABEL_68:
            __break(0xC471u);
            JUMPOUT(0x196263DF4);
          }
          do
          {
            if (v25 <= v28)
              goto LABEL_68;
            v31 = v28 + 1;
            if (v25 <= v31)
              goto LABEL_61;
            if (v25 <= v28 + 2)
              goto LABEL_62;
            v32 = *(float *)(v24 + 4 * v23);
            v33 = *(_QWORD *)(v21 + 40);
            LOBYTE(a10) = *(_BYTE *)(v33 + v28);
            *(float *)&v34 = (float)LODWORD(a10);
            v26 = v26 + (float)(v32 * *(float *)&v34);
            LOBYTE(v34) = *(_BYTE *)(v33 + v31);
            *(float *)&v35 = (float)v34;
            v29 = v29 + (float)(v32 * *(float *)&v35);
            LOBYTE(v35) = *(_BYTE *)(v33 + v28 + 2);
            a10 = (float)v35;
            v30 = v30 + (float)(v32 * a10);
            if (--v27)
              v36 = 0;
            else
              v36 = v10;
            v28 += v36 + 4;
            if (!v27)
              v27 = *((_DWORD *)result + 6);
            v37 = v23-- <= 0;
          }
          while (!v37);
          v38 = 0.0;
        }
LABEL_31:
        v46 = *((float *)result + 8);
        a10 = *((float *)result + 9);
        if (*((_BYTE *)result + 49))
        {
LABEL_32:
          v47 = 255;
          goto LABEL_37;
        }
        v48 = (float)(v38 / v46) + a10;
        if (v48 <= 0.0)
        {
          v47 = 0;
        }
        else
        {
          if (v48 >= 255.0)
            goto LABEL_32;
          v47 = (int)v48;
        }
LABEL_37:
        v49 = (float)v47;
        v50 = (float)(v26 / v46) + a10;
        if (v50 <= 0.0)
        {
          v51 = 0;
        }
        else
        {
          v51 = v47;
          if (v50 < v49)
            v51 = (int)v50;
        }
        v52 = result[1];
        if (*(_QWORD *)(v52 + 48) <= v20)
        {
          __break(0xC471u);
          JUMPOUT(0x196263E74);
        }
        *(_BYTE *)(*(_QWORD *)(v52 + 40) + v20) = (uint64_t)rint((double)v51);
        v53 = (float)(v29 / v46) + a10;
        if (v53 <= 0.0)
        {
          v54 = 0;
        }
        else
        {
          v54 = v47;
          if (v53 < v49)
            v54 = (int)v53;
        }
        if (*(_QWORD *)(v52 + 48) <= v20 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x196263E94);
        }
        *(_BYTE *)(*(_QWORD *)(v52 + 40) + v20 + 1) = (uint64_t)rint((double)v54);
        v55 = (float)(v30 / v46) + a10;
        if (v55 <= 0.0)
        {
          v56 = 0;
        }
        else
        {
          v56 = v47;
          if (v55 < v49)
            v56 = (int)v55;
        }
        if (*(_QWORD *)(v52 + 48) <= v20 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x196263EB4);
        }
        v57 = v20 + 3;
        *(_BYTE *)(*(_QWORD *)(v52 + 40) + v20 + 2) = (uint64_t)rint((double)v56);
        if (v22)
        {
          if (*(_QWORD *)(v21 + 48) <= v57)
            goto LABEL_68;
          v47 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 40) + v57);
        }
        if (*(_QWORD *)(v52 + 48) <= v57)
        {
          __break(0xC471u);
          JUMPOUT(0x196263ED4);
        }
        *(_BYTE *)(*(_QWORD *)(v52 + 40) + v57) = (uint64_t)rint((double)v47);
        v17 = v20 + 4;
        v14 = v19 + 4;
        v58 = __OFSUB__(v18--, 1);
      }
      while (!((v18 < 0) ^ v58 | (v18 == 0)));
      v15 = v12 + v20;
      v14 = v19 + v12;
    }
  }
  return result;
}

uint64_t *WebCore::FEConvolveMatrixSoftwareApplier::setOuterPixels(uint64_t *result, int a2, int a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, float a11)
{
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  float v26;
  int v27;
  int v28;
  int v29;
  float v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  float v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  float v45;
  unsigned int v46;
  float v47;
  float v48;
  float v49;
  unsigned int v50;
  uint64_t v51;
  float v52;
  unsigned int v53;
  float v54;
  unsigned int v55;
  unint64_t v56;
  BOOL v57;
  int v58;

  v11 = a5 - a3;
  if (a5 - a3 >= 1)
  {
    v12 = a4 - a2;
    if (a4 - a2 >= 1)
    {
      v13 = *((_DWORD *)result + 4);
      v14 = a2 - *((_DWORD *)result + 10);
      v58 = 4 * (v13 - v12);
      LODWORD(v15) = 4 * (a2 + v13 * a3);
      v16 = a3 - *((_DWORD *)result + 11);
      do
      {
        v15 = (int)v15;
        v17 = v12;
        v18 = v14;
        do
        {
          v19 = *((unsigned int *)result + 17);
          v20 = *result;
          v21 = *((unsigned __int8 *)result + 49);
          v22 = (v19 - 1);
          if ((int)v19 - 1 >= 0)
          {
            v23 = *((_DWORD *)result + 5);
            v24 = *((_DWORD *)result + 4);
            v25 = *((unsigned __int8 *)result + 48);
            v26 = 0.0;
            v27 = *((_DWORD *)result + 6);
            v28 = v16;
            v29 = v18;
            v30 = 0.0;
            v31 = 0.0;
            v32 = 0.0;
            while (v29 < 0 || v28 < 0 || v24 <= v29 || v23 <= v28)
            {
              if (v25 == 1)
              {
                if (v24 <= v29)
                  v36 = v24 + 0x3FFFFFFF;
                else
                  v36 = v29;
                if (v29 < 0)
                  v36 = 0;
                if (v23 <= v28)
                  v37 = v23 + 0x3FFFFFFF;
                else
                  v37 = v28;
                if (v28 < 0)
                  v37 = 0;
                v33 = v36 + v37 * v24;
                goto LABEL_32;
              }
              if (v25 == 2)
              {
                v34 = v29;
                if (v29 < 0)
                {
                  v34 = v29;
                  do
                    v34 += v24;
                  while (v34 < 0);
                }
                v35 = v28;
                if (v28 < 0)
                {
                  v35 = v28;
                  do
                    v35 += v23;
                  while (v35 < 0);
                }
                v33 = v34 % v24 + v35 % v23 * v24;
                goto LABEL_32;
              }
LABEL_40:
              if (v27 == 1)
                v29 = v18;
              else
                ++v29;
              if (v27 == 1)
              {
                ++v28;
                v27 = *((_DWORD *)result + 6);
              }
              else
              {
                --v27;
              }
              if ((uint64_t)v22-- <= 0)
                goto LABEL_50;
            }
            v33 = v29 + v24 * v28;
LABEL_32:
            v38 = (4 * v33);
            if ((v38 & 0x80000000) == 0)
            {
              if (v22 >= v19 || (v39 = *(_QWORD *)(v20 + 48), v39 <= v38))
              {
                __break(0xC471u);
                JUMPOUT(0x1962642ACLL);
              }
              if (v39 <= (v38 | 1uLL))
              {
                __break(0xC471u);
                JUMPOUT(0x1962642CCLL);
              }
              if (v39 <= (v38 | 2uLL))
              {
                __break(0xC471u);
                JUMPOUT(0x1962642ECLL);
              }
              v40 = *(float *)(result[7] + 4 * v22);
              v41 = *(_QWORD *)(v20 + 40);
              LOBYTE(a11) = *(_BYTE *)(v41 + v38);
              *(float *)&v42 = (float)LODWORD(a11);
              v26 = v26 + (float)(v40 * *(float *)&v42);
              LOBYTE(v42) = *(_BYTE *)(v41 + (v38 | 1));
              *(float *)&v43 = (float)v42;
              v30 = v30 + (float)(v40 * *(float *)&v43);
              LOBYTE(v43) = *(_BYTE *)(v41 + (v38 | 2));
              a11 = (float)v43;
              v31 = v31 + (float)(v40 * a11);
              if (!*((_BYTE *)result + 49))
              {
                if (v39 <= (v38 | 3uLL))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19626430CLL);
                }
                LOBYTE(a11) = *(_BYTE *)(v41 + (v38 | 3));
                a11 = (float)LODWORD(a11);
                v32 = v32 + (float)(v40 * a11);
              }
            }
            goto LABEL_40;
          }
          v32 = 0.0;
          v31 = 0.0;
          v30 = 0.0;
          v26 = 0.0;
LABEL_50:
          v45 = *((float *)result + 8);
          a11 = *((float *)result + 9);
          if (*((_BYTE *)result + 49))
          {
LABEL_51:
            v46 = 255;
            goto LABEL_56;
          }
          v47 = (float)(v32 / v45) + a11;
          if (v47 <= 0.0)
          {
            v46 = 0;
          }
          else
          {
            if (v47 >= 255.0)
              goto LABEL_51;
            v46 = (int)v47;
          }
LABEL_56:
          v48 = (float)v46;
          v49 = (float)(v26 / v45) + a11;
          if (v49 <= 0.0)
          {
            v50 = 0;
          }
          else
          {
            v50 = v46;
            if (v49 < v48)
              v50 = (int)v49;
          }
          v51 = result[1];
          if (*(_QWORD *)(v51 + 48) <= v15)
          {
            __break(0xC471u);
            JUMPOUT(0x19626432CLL);
          }
          *(_BYTE *)(*(_QWORD *)(v51 + 40) + v15) = (uint64_t)rint((double)v50);
          v52 = (float)(v30 / v45) + a11;
          if (v52 <= 0.0)
          {
            v53 = 0;
          }
          else
          {
            v53 = v46;
            if (v52 < v48)
              v53 = (int)v52;
          }
          if (*(_QWORD *)(v51 + 48) <= v15 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19626434CLL);
          }
          *(_BYTE *)(*(_QWORD *)(v51 + 40) + v15 + 1) = (uint64_t)rint((double)v53);
          v54 = (float)(v31 / v45) + a11;
          if (v54 <= 0.0)
          {
            v55 = 0;
          }
          else
          {
            v55 = v46;
            if (v54 < v48)
              v55 = (int)v54;
          }
          if (*(_QWORD *)(v51 + 48) <= v15 + 2)
          {
            __break(0xC471u);
            JUMPOUT(0x19626436CLL);
          }
          v56 = v15 + 3;
          *(_BYTE *)(*(_QWORD *)(v51 + 40) + v15 + 2) = (uint64_t)rint((double)v55);
          if (v21)
          {
            if (*(_QWORD *)(v20 + 48) <= v56)
            {
              __break(0xC471u);
              JUMPOUT(0x1962643ACLL);
            }
            v46 = *(unsigned __int8 *)(*(_QWORD *)(v20 + 40) + v56);
          }
          if (*(_QWORD *)(v51 + 48) <= v56)
          {
            __break(0xC471u);
            JUMPOUT(0x19626438CLL);
          }
          *(_BYTE *)(*(_QWORD *)(v51 + 40) + v56) = (uint64_t)rint((double)v46);
          v15 += 4;
          ++v18;
          v57 = __OFSUB__(v17--, 1);
        }
        while (!((v17 < 0) ^ v57 | (v17 == 0)));
        LODWORD(v15) = v58 + v15;
        ++v16;
        v57 = __OFSUB__(v11--, 1);
      }
      while (!((v11 < 0) ^ v57 | (v11 == 0)));
    }
  }
  return result;
}

BOOL WebCore::FEConvolveMatrixSoftwareApplier::apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  int v7;
  WebCore::PixelBuffer *v8;
  WebCore::PixelBuffer *v9;
  int32x2_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  WebCore::PixelBuffer *v20;
  _BOOL8 v21;
  CFTypeRef v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  float *v31;
  float v32;
  float v33;
  unsigned int v35;
  int v36;
  WebCore::PixelBuffer *v37;
  void *v38;
  WebCore::PixelBuffer *v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  WTF *v46;
  WebCore::PixelBuffer *v48;
  CFTypeRef cf;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  char v56;
  char v57;
  WTF *v58;
  int v59;
  int v60;
  int32x2_t v61[2];
  int32x2_t v62;
  WebCore::PixelBuffer *v63;
  int v64;
  int v65;

  if (!*(_DWORD *)(a3 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x196264784);
  }
  v6 = **(_QWORD ***)a3;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 100);
  v8 = WebCore::FilterImage::pixelBuffer((_QWORD *)a4, v7);
  if (!v8)
    return 0;
  v9 = v8;
  v10 = *(int32x2_t *)(a4 + 44);
  v61[0] = (int32x2_t)((*(_QWORD *)(a4 + 36) - (*(_QWORD *)((char *)v6 + 36) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (*(_QWORD *)(a4 + 36) - *(_QWORD *)((char *)v6 + 36)));
  v61[1] = v10;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(const void **)(v11 + 56);
  if (v12)
  {
    CFRetain(*(CFTypeRef *)(v11 + 56));
    LOWORD(v48) = v7;
    cf = v12;
    CFRetain(v12);
  }
  else
  {
    LOWORD(v48) = v7;
    cf = 0;
  }
  v13 = v6[12];
  v62 = v10;
  (*(void (**)(WebCore::PixelBuffer **__return_ptr, uint64_t, WebCore::PixelBuffer **, int32x2_t *))(*(_QWORD *)v13 + 24))(&v63, v13, &v48, &v62);
  if (v63)
  {
    WebCore::FilterImage::copyPixelBuffer((WebCore::FilterImage *)v6, v63, v61);
    v20 = v63;
  }
  else
  {
    v20 = 0;
  }
  v22 = cf;
  cf = 0;
  if (v22)
    CFRelease(v22);
  if (v12)
    CFRelease(v12);
  v21 = v20 != 0;
  if (v20)
  {
    v23 = *(_QWORD *)(a1 + 8);
    LODWORD(v14) = *(_DWORD *)(v23 + 72);
    LODWORD(v16) = 1132396544;
    *(float *)&v15 = *(float *)(v23 + 76) * 255.0;
    v25 = *(_DWORD *)(a4 + 44);
    v24 = *(_DWORD *)(a4 + 48);
    v48 = v20;
    cf = v9;
    v50 = v25;
    v51 = v24;
    v26 = *(_QWORD *)(v23 + 64);
    v52 = v26;
    v53 = LODWORD(v14);
    v54 = LODWORD(v15);
    v27 = *(_QWORD *)(v23 + 80);
    v55 = v27;
    v56 = *(_BYTE *)(v23 + 88);
    v57 = *(_BYTE *)(v23 + 100);
    v28 = *(unsigned int *)(v23 + 116);
    v58 = 0;
    v59 = 0;
    v60 = v28;
    if ((_DWORD)v28)
    {
      if (v28 >> 30)
        goto LABEL_54;
      v29 = (WTF *)WTF::fastMalloc((WTF *)(4 * v28));
      v59 = v28;
      v58 = v29;
      v30 = *(unsigned int *)(v23 + 116);
      if ((_DWORD)v30)
      {
        v31 = *(float **)(v23 + 104);
        LODWORD(v14) = 0;
        while (v28)
        {
          v32 = *v31++;
          v33 = v32;
          LODWORD(v16) = -2139095040;
          if (v32 <= -1.1755e-38 || v33 >= 0.0)
            *(float *)&v16 = v33;
          v35 = LODWORD(v33) - 1;
          LODWORD(v15) = 0x800000;
          if (v35 >= 0x7FFFFF)
            *(float *)&v15 = *(float *)&v16;
          *(_DWORD *)v29 = LODWORD(v15);
          v29 = (WTF *)((char *)v29 + 4);
          --v28;
          if (!--v30)
            goto LABEL_27;
        }
LABEL_54:
        __break(0xC471u);
        JUMPOUT(0x19626477CLL);
      }
    }
LABEL_27:
    v36 = v25 - v26;
    if (v25 - (_DWORD)v26 < 0 || (LODWORD(v26) = v24 - HIDWORD(v26), v24 - HIDWORD(v26) < 0))
    {
      v41 = 0;
      v42 = 0;
      v43 = v25;
    }
    else
    {
      v62.i32[0] = v36;
      v65 = v24 - HIDWORD(v26);
      if ((v24 * v25 + 9999) >= 0x4E1F && (v64 = (int)v26 / (v24 * v25 / 10000)) != 0)
      {
        v37 = (WebCore::PixelBuffer *)WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v37 = off_1E34169B8;
        *((_QWORD *)v37 + 1) = &v64;
        *((_QWORD *)v37 + 2) = &v65;
        *((_QWORD *)v37 + 3) = &v48;
        *((_QWORD *)v37 + 4) = &v62;
        v63 = v37;
        WTF::ConcurrentWorkQueue::apply();
        v39 = v63;
        v63 = 0;
        if (v39)
          (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v39 + 8))(v39);
        LODWORD(v27) = v55;
        LODWORD(v40) = HIDWORD(v55);
      }
      else
      {
        v40 = HIDWORD(v27);
        WebCore::FEConvolveMatrixSoftwareApplier::setInteriorPixels((uint64_t *)&v48, v36, v26, 0, v26, v14, v15, v16, v17, *(float *)&v18);
      }
      v24 = v26 + v40 + 1;
      if ((int)v40 >= 1)
        WebCore::FEConvolveMatrixSoftwareApplier::setOuterPixels((uint64_t *)&v48, 0, 0, v50, v40, v14, v15, v16, v17, v18, v19);
      v44 = v36 + v27;
      if (v24 < v51)
        WebCore::FEConvolveMatrixSoftwareApplier::setOuterPixels((uint64_t *)&v48, 0, v24, v50, v51, v14, v15, v16, v17, v18, v19);
      v45 = v44 + 1;
      if ((int)v55 >= 1)
        WebCore::FEConvolveMatrixSoftwareApplier::setOuterPixels((uint64_t *)&v48, 0, SHIDWORD(v55), v55, v24, v14, v15, v16, v17, v18, v19);
      v43 = v50;
      if (v45 >= v50)
        goto LABEL_45;
      v42 = HIDWORD(v55);
      v41 = v45;
    }
    WebCore::FEConvolveMatrixSoftwareApplier::setOuterPixels((uint64_t *)&v48, v41, v42, v43, v24, v14, v15, v16, v17, v18, v19);
LABEL_45:
    v46 = v58;
    if (v58)
    {
      v58 = 0;
      v59 = 0;
      WTF::fastFree(v46, v38);
    }
    if (*((_DWORD *)v20 + 2) == 1)
      (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v20 + 8))(v20);
    else
      --*((_DWORD *)v20 + 2);
  }
  return v21;
}

uint64_t WebCore::FEDisplacementMapSoftwareApplier::apply(uint64_t a1, float *a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  WebCore::PixelBuffer *v11;
  const void *v12;
  uint64_t v13;
  WebCore::PixelBuffer *v14;
  CFTypeRef v15;
  WebCore::PixelBuffer *v16;
  const void *v17;
  uint64_t v18;
  WebCore::PixelBuffer *v19;
  CFTypeRef v20;
  unint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  double v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  WebCore::PixelBuffer *v45[2];
  int32x2_t v46[2];
  WebCore::PixelBuffer *v47;
  WebCore::PixelBuffer *v48;
  _DWORD v49[2];
  CFTypeRef cf;

  v4 = *(_DWORD *)(a3 + 12);
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x196264B28);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
LABEL_50:
    JUMPOUT(0x196264B00);
  }
  v8 = **(_QWORD ***)a3;
  v9 = *(_QWORD **)(*(_QWORD *)a3 + 8);
  v10 = (uint64_t)WebCore::FilterImage::pixelBuffer(a4, 0);
  if (v10)
  {
    v11 = *(WebCore::PixelBuffer **)((char *)a4 + 44);
    v46[0] = (int32x2_t)((*(_QWORD *)((char *)a4 + 36) - (*(_QWORD *)((char *)v8 + 36) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (*(_QWORD *)((char *)a4 + 36) - *(_QWORD *)((char *)v8 + 36)));
    v46[1] = (int32x2_t)v11;
    LOWORD(v49[0]) = 0;
    v12 = (const void *)v8[7];
    cf = v12;
    if (v12)
      CFRetain(v12);
    v13 = v8[12];
    v48 = v11;
    (*(void (**)(WebCore::PixelBuffer **__return_ptr, uint64_t, _DWORD *, WebCore::PixelBuffer **))(*(_QWORD *)v13 + 24))(v45, v13, v49, &v48);
    if (v45[0])
    {
      WebCore::FilterImage::copyPixelBuffer((WebCore::FilterImage *)v8, v45[0], v46);
      v14 = v45[0];
    }
    else
    {
      v14 = 0;
    }
    v15 = cf;
    cf = 0;
    if (v15)
      CFRelease(v15);
    v16 = *(WebCore::PixelBuffer **)((char *)a4 + 44);
    v45[0] = (WebCore::PixelBuffer *)((*(_QWORD *)((char *)a4 + 36)
                                     - (*(_QWORD *)((char *)v9 + 36) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (*(_QWORD *)((char *)a4 + 36) - *(_QWORD *)((char *)v9 + 36)));
    v45[1] = v16;
    LOWORD(v49[0]) = 1;
    v17 = (const void *)v9[7];
    cf = v17;
    if (v17)
      CFRetain(v17);
    v18 = v9[12];
    v47 = v16;
    (*(void (**)(WebCore::PixelBuffer **__return_ptr, uint64_t, _DWORD *, WebCore::PixelBuffer **))(*(_QWORD *)v18 + 24))(&v48, v18, v49, &v47);
    if (v48)
    {
      WebCore::FilterImage::copyPixelBuffer((WebCore::FilterImage *)v9, v48, (int32x2_t *)v45);
      v19 = v48;
    }
    else
    {
      v19 = 0;
    }
    v20 = cf;
    cf = 0;
    if (v20)
      CFRelease(v20);
    if (v14)
    {
      if (!v19)
      {
        v10 = 0;
LABEL_40:
        if (*((_DWORD *)v14 + 2) == 1)
          (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v14 + 8))(v14);
        else
          --*((_DWORD *)v14 + 2);
        return v10;
      }
      v21 = *(_QWORD *)((char *)a4 + 44);
      v49[0] = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 68);
      v49[1] = v49[0];
      (*(void (**)(float *, _DWORD *))(*(_QWORD *)a2 + 80))(a2, v49);
      if (SHIDWORD(v21) >= 1 && (int)v21 >= 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = v22 * a2[13];
        v27 = v23 * a2[14];
        v28 = v26 / 255.0;
        v29 = v27 / 255.0;
        v30 = 0.5;
        v31 = v30 - v26 * v30;
        v32 = v30 - v27 * v30;
        v33 = *(_QWORD *)(a1 + 8);
        v34 = *(unsigned __int8 *)(v33 + 64) - 1;
        v35 = *(unsigned __int8 *)(v33 + 65) - 1;
        v36 = 4 * v21;
        v37 = *((_QWORD *)v19 + 6);
        do
        {
          v38 = 0;
          v39 = 0;
          do
          {
            if (v37 <= v34 + v39)
            {
              __break(0xC471u);
              goto LABEL_50;
            }
            if (v37 <= v35 + v39)
            {
              __break(0xC471u);
              JUMPOUT(0x196264B20);
            }
            v40 = *((_QWORD *)v19 + 5);
            LOBYTE(v30) = *(_BYTE *)(v40 + v34 + v39);
            *(float *)&v30 = v31 + (float)(v28 * (float)LODWORD(v30));
            v41 = v38 + (int)*(float *)&v30;
            if (v41 < 0)
            {
              v42 = 0;
            }
            else
            {
              v42 = 0;
              if (v41 < (int)v21)
              {
                LOBYTE(v30) = *(_BYTE *)(v40 + v35 + v39);
                *(float *)&v30 = v32 + (float)(v29 * (float)LODWORD(v30));
                v43 = (int)*(float *)&v30 + v25;
                if ((v43 & 0x80000000) == 0 && v43 < SHIDWORD(v21))
                  v42 = *(_DWORD *)(*((_QWORD *)v14 + 5) + (v43 * v36 + 4 * v41));
              }
            }
            *(_DWORD *)(*(_QWORD *)(v10 + 40) + v24 + v39) = v42;
            v39 += 4;
            ++v38;
          }
          while (4 * v21 != v39);
          ++v25;
          v24 += v36;
          v35 += v36;
          v34 += v36;
        }
        while (v25 != HIDWORD(v21));
      }
LABEL_36:
      if (*((_DWORD *)v19 + 2) == 1)
      {
        (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v19 + 8))(v19);
        if (v14)
          goto LABEL_38;
      }
      else
      {
        --*((_DWORD *)v19 + 2);
        if (v14)
        {
LABEL_38:
          v10 = 1;
          goto LABEL_40;
        }
      }
    }
    else if (v19)
    {
      goto LABEL_36;
    }
    return 0;
  }
  return v10;
}

BOOL WebCore::FEDropShadowSoftwareApplier::apply(_BOOL8 result, float *a2, uint64_t **a3, WebCore::FilterImage *this)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  unsigned int v13;
  float32x2_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  float *v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  float32x2_t v35;
  int v36;
  _BOOL8 v37;
  unsigned int *v38;
  unsigned int v39;
  const void *v40;
  float v41;
  float v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _DWORD *v50;
  CFTypeRef v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  float32x2_t v73;
  uint64_t v74;
  _QWORD v75[2];
  __int16 v76;
  CFTypeRef cf;
  uint64_t v78;
  uint64_t v79;
  float32x2_t v80;
  unint64_t v81;
  char v82;
  float v83[2];
  uint64_t v84;
  float v85;
  float v86;
  uint64_t v87;
  void (**v88)(WebCore::ImageBufferAllocator *__hidden);
  unint64_t v89;

  if (*((_DWORD *)a3 + 3))
  {
    v6 = result;
    v7 = **a3;
    if (*((_QWORD *)this + 11))
      v8 = WebCore::FilterImage::imageBufferFromCIImage(this);
    else
      v8 = WebCore::FilterImage::imageBufferFromPixelBuffer(this);
    v9 = v8;
    if (!v8)
      return 0;
    v10 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_9:
    ++*(_QWORD *)(v10 + 8);
    v12 = __ldxr((unsigned __int8 *)v10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
LABEL_14:
        v78 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 64);
        v72 = COERCE_UNSIGNED_INT64((*(double (**)(float *, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v78));
        v71 = v13;
        v14 = *(float32x2_t *)(a2 + 13);
        v78 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 72);
        v15 = (*(float (**)(float *, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v78) * a2[13];
        v16 = *(_QWORD *)((char *)this + 36);
        v17 = *(_QWORD *)(v7 + 36);
        v19 = v18 * a2[14];
        v85 = (float)(v17 - v16);
        v86 = (float)(int)((v17 - (v16 & 0xFFFFFFFF00000000)) >> 32);
        v20 = (float)*(int *)(v7 + 48);
        *(float *)&v87 = (float)*(int *)(v7 + 44);
        *((float *)&v87 + 1) = v20;
        v84 = v87;
        v83[0] = v15 + v85;
        v83[1] = v19 + v86;
        if (*(_QWORD *)(v7 + 88))
          v21 = WebCore::FilterImage::imageBufferFromCIImage((WebCore::FilterImage *)v7);
        else
          v21 = WebCore::FilterImage::imageBufferFromPixelBuffer((WebCore::FilterImage *)v7);
        v23 = v21;
        if (!v21)
        {
          v37 = 0;
          goto LABEL_86;
        }
        v24 = *(_QWORD *)(v21 + 8);
        if (__ldaxr((unsigned __int8 *)v24))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v24))
        {
          goto LABEL_21;
        }
        MEMORY[0x19AEA534C](v24);
LABEL_21:
        v73 = (float32x2_t)__PAIR64__(v71, v72);
        ++*(_QWORD *)(v24 + 8);
        v26 = __ldxr((unsigned __int8 *)v24);
        if (v26 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v24))
          {
LABEL_26:
            v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
            v28 = (float *)v27;
            v29 = *(float *)(*(_QWORD *)(v6 + 8) + 88);
            if (*(float *)(v27 + 336) != v29)
            {
              *(float *)(v27 + 336) = v29;
              *(_DWORD *)(v27 + 184) |= 0x100u;
            }
            v30 = vmul_f32(v73, v14);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 88))(v27, v27 + 8);
            v78 = 0;
            v79 = *(_QWORD *)(v23 + 16);
            (*(void (**)(float *, uint64_t, float *, uint64_t *, uint64_t))(*(_QWORD *)v28 + 384))(v28, v23, v83, &v78, 4641);
            if (v28[84] != 1.0)
            {
              v28[84] = 1.0;
              *((_DWORD *)v28 + 46) |= 0x100u;
            }
            v31 = vadd_f32(v30, v30);
            (*(void (**)(float *, _DWORD *))(*(_QWORD *)v28 + 88))(v28, (_DWORD *)v28 + 2);
            v33 = *(_QWORD *)(v6 + 8);
            LODWORD(v78) = 0;
            v34 = *(_QWORD *)(v33 + 80);
            v79 = v34;
            if ((v34 & 0x8000000000000) != 0)
            {
              v38 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 + 1, v38));
              v34 = v79;
            }
            v81 = LODWORD(v15) | ((unint64_t)LODWORD(v19) << 32);
            v82 = 0;
            v35 = vminnm_f32(v31, (float32x2_t)0x4300000043000000);
            v80 = v35;
            if ((v34 & 0x8000000000000) != 0)
            {
              if (*(float *)((v34 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
                goto LABEL_33;
            }
            else if ((_BYTE)v34)
            {
LABEL_33:
              v36 = 2;
              if (v35.f32[0] <= 0.0 && v35.f32[1] <= 0.0)
                v36 = ((LODWORD(v15) | ((unint64_t)LODWORD(v19) << 32)) & 0x7FFFFFFF7FFFFFFFLL) != 0;
LABEL_45:
              LODWORD(v78) = v36;
              v76 = 0;
              v40 = (const void *)*((_QWORD *)this + 7);
              cf = v40;
              if (v40)
                CFRetain(v40);
              v41 = *(float *)(v9 + 16);
              v42 = *(float *)(v9 + 20);
              v32.n128_u64[0] = 0x4F0000004F000000;
              if (v41 > -2147500000.0)
                v43 = (int)v41;
              else
                v43 = 0x80000000;
              if (v41 < 2147500000.0)
                v44 = v43;
              else
                v44 = 0x7FFFFFFFLL;
              if (v42 > -2147500000.0)
                v45 = (int)v42;
              else
                v45 = 0x80000000;
              if (v42 < 2147500000.0)
                v46 = v45;
              else
                v46 = 0x7FFFFFFFLL;
              v75[0] = 0;
              v75[1] = v44 | (v46 << 32);
              v88 = off_1E340D360;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, __int16 *, _QWORD *, void (***)(WebCore::ImageBufferAllocator *__hidden), __n128))(*(_QWORD *)v9 + 88))(&v74, v9, &v76, v75, &v88, v32);
              v37 = v74 != 0;
              if (v74)
              {
                WebCore::ShadowBlur::blurLayerImage((uint64_t)&v78, *(_QWORD *)(v74 + 40), *(_QWORD *)(v74 + 48), (int *)(v74 + 32), 4 * *(_DWORD *)(v74 + 32));
                v88 = 0;
                (*(void (**)(uint64_t, uint64_t, _QWORD *, void (***)(WebCore::ImageBufferAllocator *__hidden), _QWORD))(*(_QWORD *)v9 + 96))(v9, v74, v75, &v88, 0);
                if (*((_BYTE *)v28 + 194) != 3 || *((_BYTE *)v28 + 195) != 1)
                {
                  *((_WORD *)v28 + 97) = 259;
                  *((_DWORD *)v28 + 46) |= 0x20u;
                }
                (*(void (**)(float *, _DWORD *))(*(_QWORD *)v28 + 88))(v28, (_DWORD *)v28 + 2);
                *(float *)&v47 = (float)*((int *)this + 11);
                *(float *)&v48 = (float)*((int *)this + 12);
                v88 = 0;
                v89 = __PAIR64__(v48, v47);
                (*(void (**)(float *, void (***)(WebCore::ImageBufferAllocator *__hidden), uint64_t))(*(_QWORD *)v28 + 224))(v28, &v88, *(_QWORD *)(v6 + 8) + 80);
                if (*((_BYTE *)v28 + 194) != 6 || *((_BYTE *)v28 + 195) != 1)
                {
                  *((_WORD *)v28 + 97) = 262;
                  *((_DWORD *)v28 + 46) |= 0x20u;
                }
                (*(void (**)(float *, _DWORD *))(*(_QWORD *)v28 + 88))(v28, (_DWORD *)v28 + 2);
                v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
                v88 = 0;
                v89 = *(_QWORD *)(v23 + 16);
                (*(void (**)(uint64_t, uint64_t, float *, void (***)(WebCore::ImageBufferAllocator *__hidden), uint64_t))(*(_QWORD *)v49 + 384))(v49, v23, &v85, &v88, 4641);
                v50 = (_DWORD *)v74;
                v74 = 0;
                if (v50)
                {
                  if (v50[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
                  else
                    --v50[2];
                }
              }
              v51 = cf;
              cf = 0;
              if (v51)
                CFRelease(v51);
              if ((v79 & 0x8000000000000) != 0)
              {
                v68 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v69 = __ldaxr(v68);
                  v70 = v69 - 1;
                }
                while (__stlxr(v70, v68));
                if (!v70)
                {
                  atomic_store(1u, v68);
                  WTF::fastFree((WTF *)v68, v22);
                }
              }
              v52 = *(_QWORD *)(v23 + 8);
              if (__ldaxr((unsigned __int8 *)v52))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v52))
              {
                goto LABEL_74;
              }
              MEMORY[0x19AEA534C](v52);
LABEL_74:
              v54 = *(_QWORD *)(v52 + 8);
              v55 = v54 - 1;
              *(_QWORD *)(v52 + 8) = v54 - 1;
              if (v54 == 1)
              {
                v67 = *(_QWORD *)(v52 + 16);
                v56 = *(_QWORD *)(v52 + 24);
                *(_QWORD *)(v52 + 24) = 0;
                v57 = v67 != 0;
              }
              else
              {
                v56 = 0;
                v57 = 1;
              }
              v58 = __ldxr((unsigned __int8 *)v52);
              if (v58 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v52))
                {
                  if (v55)
                    goto LABEL_86;
LABEL_82:
                  if (v56)
                    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
                  if (!v57)
                    WTF::fastFree((WTF *)v52, v22);
LABEL_86:
                  v59 = *(_QWORD *)(v9 + 8);
                  if (__ldaxr((unsigned __int8 *)v59))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v59))
                  {
                    goto LABEL_90;
                  }
                  MEMORY[0x19AEA534C](v59);
LABEL_90:
                  v61 = *(_QWORD *)(v59 + 8);
                  v62 = v61 - 1;
                  *(_QWORD *)(v59 + 8) = v61 - 1;
                  if (v61 == 1)
                  {
                    v66 = *(_QWORD *)(v59 + 16);
                    v63 = *(_QWORD *)(v59 + 24);
                    *(_QWORD *)(v59 + 24) = 0;
                    v64 = v66 != 0;
                  }
                  else
                  {
                    v63 = 0;
                    v64 = 1;
                  }
                  v65 = __ldxr((unsigned __int8 *)v59);
                  if (v65 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v59))
                    {
                      if (!v62)
                        goto LABEL_98;
                      return v37;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v59);
                  if (!v62)
                  {
LABEL_98:
                    if (v63)
                      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
                    if (!v64)
                      WTF::fastFree((WTF *)v59, v22);
                  }
                  return v37;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v52);
              if (v55)
                goto LABEL_86;
              goto LABEL_82;
            }
            v36 = 0;
            goto LABEL_45;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v24);
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

BOOL WebCore::FEFloodSoftwareApplier::apply(uint64_t a1, int a2, int a3, WebCore::FilterImage *this)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;

  if (*((_QWORD *)this + 11))
    v6 = WebCore::FilterImage::imageBufferFromCIImage(this);
  else
    v6 = WebCore::FilterImage::imageBufferFromPixelBuffer(this);
  v7 = (_QWORD *)v6;
  if (!v6)
    return v7 != 0;
  v8 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_8:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v11 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(v11 + 64);
  v12 = v11 + 64;
  v13 = v14;
  if ((v14 & 0x8000000000000) != 0)
    v15 = *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10);
  else
    v15 = (float)v13 / 255.0;
  WebCore::Color::colorWithAlpha(v12, *(float *)(v12 + 8) * v15, &v35);
  v16 = (*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
  v17 = (float)*((int *)this + 11);
  v18 = (float)*((int *)this + 12);
  v32 = 0;
  v33 = v17;
  v34 = v18;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v16 + 224))(v16, &v32, &v35);
  if ((v35 & 0x8000000000000) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v19);
    }
  }
  v20 = v7[1];
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v20);
LABEL_20:
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v22 - 1;
  *(_QWORD *)(v20 + 8) = v22 - 1;
  if (v22 == 1)
  {
    v28 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 24) = 0;
    v25 = v28 != 0;
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  v26 = __ldxr((unsigned __int8 *)v20);
  if (v26 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v20))
    {
      if (v23)
        return v7 != 0;
      goto LABEL_28;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v20);
  if (v23)
    return v7 != 0;
LABEL_28:
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (!v25)
    WTF::fastFree((WTF *)v20, v19);
  return v7 != 0;
}

uint64_t WebCore::FEGaussianBlurSoftwareApplier::apply(uint64_t result, WebCore::Filter *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::PixelBuffer *v8;
  void **v9;
  int32x2_t v10;
  uint64_t v11;
  float v12;
  float v13;
  WebCore::PixelBuffer *v14;
  double v15;
  uint8x8_t v16;
  _BOOL8 v17;
  WebCore::PixelBuffer *v18;
  int v19[2];
  uint64_t v20;
  int32x2_t v21[2];

  if (*((_DWORD *)a3 + 3))
  {
    v6 = result;
    v7 = **a3;
    v8 = WebCore::FilterImage::pixelBuffer((_QWORD *)a4, 0);
    if (!v8)
      return 0;
    v9 = (void **)v8;
    v10 = *(int32x2_t *)(a4 + 44);
    v21[0] = (int32x2_t)((*(_QWORD *)(a4 + 36) - (*(_QWORD *)(v7 + 36) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (*(_QWORD *)(a4 + 36) - *(_QWORD *)(v7 + 36)));
    v21[1] = v10;
    WebCore::FilterImage::copyPixelBuffer((WebCore::FilterImage *)v7, v8, v21);
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(float *)(v11 + 64);
    v13 = *(float *)(v11 + 68);
    if (v12 == 0.0 && v13 == 0.0)
      return 1;
    v14 = (WebCore::PixelBuffer *)WebCore::FEGaussianBlur::calculateKernelSize(a2, v12, v13);
    v20 = *(_QWORD *)(a4 + 44);
    (*((void (**)(int *__return_ptr, void **, uint64_t *))*v9 + 3))(v19, v9, &v20);
    v17 = *(_QWORD *)v19 != 0;
    if (*(_QWORD *)v19)
    {
      WebCore::FEGaussianBlurSoftwareApplier::boxBlurGeneric(v9, *(WebCore::PixelBuffer **)v19, v14, HIDWORD(v14), (unsigned int *)&v20, *(_BYTE *)(a4 + 52), *(_BYTE *)(*(_QWORD *)(v6 + 8) + 72), v15, v16);
      v18 = *(WebCore::PixelBuffer **)v19;
      *(_QWORD *)v19 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 2) == 1)
          (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v18 + 8))(v18);
        else
          --*((_DWORD *)v18 + 2);
      }
    }
    return v17;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::FEImageSoftwareApplier::apply(uint64_t a1, uint64_t a2, int a3, WebCore::FilterImage *this)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WebCore::GraphicsContext *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  int v23;
  float v24;
  unint64_t v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  if (*((_QWORD *)this + 11))
    v7 = WebCore::FilterImage::imageBufferFromCIImage(this);
  else
    v7 = WebCore::FilterImage::imageBufferFromPixelBuffer(this);
  v8 = (_QWORD *)v7;
  if (!v7)
    return 0;
  v9 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_8:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_13:
  v12 = *(_QWORD *)(a1 + 8);
  v46 = *(_OWORD *)((char *)this + 4);
  v13 = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
  v15 = (WebCore::GraphicsContext *)v13;
  v16 = *(_DWORD *)(v12 + 72);
  v17 = *(_QWORD *)(v12 + 64);
  if (!v16 && v17)
  {
    v18 = *(_QWORD *)(a1 + 8);
    v47 = *(_OWORD *)(v18 + 104);
    v48 = v46;
    WebCore::SVGPreserveAspectRatioValue::transformRect((WebCore::SVGPreserveAspectRatioValue *)(v18 + 120), (WebCore::FloatRect *)&v48, (WebCore::FloatRect *)&v47, *(float *)&v47);
    v20 = *(float *)(a2 + 52);
    v19 = *(float *)(a2 + 56);
    v21 = v20 * *(float *)&v48;
    v22 = v19 * *((float *)&v48 + 1);
    if ((float)(v20 * *(float *)&v48) >= 2147500000.0)
    {
      v23 = 0x7FFFFFFF;
    }
    else if (v21 <= -2147500000.0)
    {
      v23 = 0x80000000;
    }
    else
    {
      v23 = (int)v21;
    }
    v24 = v20 * *((float *)&v48 + 2);
    if (v22 >= 2147500000.0)
    {
      v25 = 0x7FFFFFFF00000000;
    }
    else if (v22 <= -2147500000.0)
    {
      v25 = 0x8000000000000000;
    }
    else
    {
      v25 = (unint64_t)(int)v22 << 32;
    }
    v26 = v19 * *((float *)&v48 + 3);
    v27 = 2147500000.0;
    if (v24 < 2147500000.0)
    {
      v27 = -2147500000.0;
      if (v24 > -2147500000.0)
        v27 = (float)(int)v24;
    }
    v28 = 2147500000.0;
    if (v26 < 2147500000.0)
    {
      v28 = -2147500000.0;
      if (v26 > -2147500000.0)
        v28 = (float)(int)v26;
    }
    v29 = *(_QWORD *)((char *)this + 36);
    *(float *)&v48 = (float)(v23 - v29);
    *((float *)&v48 + 1) = (float)(int)((v25 - (v29 & 0xFFFFFFFF00000000)) >> 32);
    *((_QWORD *)&v48 + 1) = __PAIR64__(LODWORD(v28), LODWORD(v27));
    WebCore::GraphicsContext::drawNativeImage(v15, v17, (uint64_t)&v48, (float32x2_t *)&v47, 4641);
    goto LABEL_37;
  }
  v30 = 0;
  if (v16 == 1 && v17)
  {
    v31 = *(_QWORD *)(a1 + 8);
    v32 = (float)(*(float *)&v46 + *(float *)(v31 + 104)) * *(float *)(a2 + 52);
    v33 = (float)(*((float *)&v46 + 1) + *(float *)(v31 + 108)) * *(float *)(a2 + 56);
    if (v32 >= 2147500000.0)
    {
      v34 = 0x7FFFFFFF;
    }
    else if (v32 <= -2147500000.0)
    {
      v34 = 0x80000000;
    }
    else
    {
      v34 = (int)v32;
    }
    if (v33 >= 2147500000.0)
    {
      v35 = 0x7FFFFFFF00000000;
    }
    else if (v33 <= -2147500000.0)
    {
      v35 = 0x8000000000000000;
    }
    else
    {
      v35 = (unint64_t)(int)v33 << 32;
    }
    v36 = *(_QWORD *)((char *)this + 36);
    *(float *)&v48 = (float)(v34 - v36);
    *((float *)&v48 + 1) = (float)(int)((v35 - (v36 & 0xFFFFFFFF00000000)) >> 32);
    WebCore::GraphicsContext::drawImageBuffer(v13, v17, (uint64_t *)&v48);
LABEL_37:
    v30 = 1;
  }
  v37 = v8[1];
  if (__ldaxr((unsigned __int8 *)v37))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v37))
  {
    goto LABEL_42;
  }
  MEMORY[0x19AEA534C](v37);
LABEL_42:
  v39 = *(_QWORD *)(v37 + 8);
  v40 = v39 - 1;
  *(_QWORD *)(v37 + 8) = v39 - 1;
  if (v39 == 1)
  {
    v45 = *(_QWORD *)(v37 + 16);
    v41 = *(_QWORD *)(v37 + 24);
    *(_QWORD *)(v37 + 24) = 0;
    v42 = v45 != 0;
  }
  else
  {
    v41 = 0;
    v42 = 1;
  }
  v43 = __ldxr((unsigned __int8 *)v37);
  if (v43 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v37))
    {
      if (v40)
        return v30;
      goto LABEL_50;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v37);
  if (v40)
    return v30;
LABEL_50:
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  if (!v42)
    WTF::fastFree((WTF *)v37, v14);
  return v30;
}

void **WebCore::FEGaussianBlurSoftwareApplier::boxBlurGeneric(void **a1, WebCore::PixelBuffer *a2, WebCore::PixelBuffer *a3, unsigned int a4, unsigned int *a5, char a6, char a7, double a8, uint8x8_t a9)
{
  unsigned int v12;

  v12 = *a5;
  if ((_DWORD)a3 == a4 && (a7 & 0xFD) == 1)
    return WebCore::FEGaussianBlurSoftwareApplier::boxBlurAccelerated(a1, a2, a3, 4 * v12, v12, a5[1]);
  else
    return (void **)WebCore::FEGaussianBlurSoftwareApplier::boxBlurUnaccelerated(a1, a2, a3, a4, 4 * v12, (int *)a5, a6, a7, a8, a9);
}

void **WebCore::FEGaussianBlurSoftwareApplier::boxBlurAccelerated(void **this, WebCore::PixelBuffer *a2, WebCore::PixelBuffer *a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  void *v7;
  BOOL v8;
  void **v11;
  uint32_t v12;
  void *v13;
  void *v14;
  vImage_Buffer dest;
  vImage_Buffer src;

  if (this[5])
  {
    v7 = (void *)*((_QWORD *)a2 + 5);
    if (v7)
      v8 = (int)a4 < 1;
    else
      v8 = 1;
    if (!v8 && (int)a5 >= 1 && (int)a6 >= 1)
    {
      v11 = this;
      src.data = this[5];
      src.height = a6;
      src.width = a5;
      src.rowBytes = a4;
      dest.data = v7;
      dest.height = a6;
      v12 = a3 | 1;
      dest.width = a5;
      dest.rowBytes = a4;
      this = (void **)vImageBoxConvolve_ARGB8888(&src, &dest, 0, 0, 0, v12, v12, 0, 0x88u);
      if (this)
      {
        v13 = (void *)WTF::fastMalloc((WTF *)this);
        vImageBoxConvolve_ARGB8888(&src, &dest, v13, 0, 0, v12, v12, 0, 8u);
        vImageBoxConvolve_ARGB8888(&dest, &src, v13, 0, 0, v12, v12, 0, 8u);
        vImageBoxConvolve_ARGB8888(&src, &dest, v13, 0, 0, v12, v12, 0, 8u);
        WTF::fastFree((WTF *)v13, v14);
        return (void **)memcpy(v11[5], *((const void **)a2 + 5), (size_t)v11[6]);
      }
    }
  }
  return this;
}

_QWORD *WebCore::FEGaussianBlurSoftwareApplier::boxBlurUnaccelerated(_QWORD *result, _QWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, int *a6, char a7, char a8, double a9, uint8x8_t a10)
{
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int v27;

  v14 = a2;
  v15 = result;
  if (a3)
  {
    v16 = (a3 & 1) + (a3 >> 1) - 1;
    v17 = a3 - v16;
    result = (_QWORD *)WebCore::FEGaussianBlurSoftwareApplier::boxBlur(result[5], a2[5], a3, v16, a3 - v16, 4u, a5, *a6, a9, a10, a6[1], a7, a8);
    v18 = v14;
    v14 = v15;
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v18 = result;
  }
  v26 = v15;
  v27 = a5;
  if (a4)
  {
    v19 = (a4 & 1) + (a4 >> 1) - 1;
    v20 = a4 - v19;
    result = (_QWORD *)WebCore::FEGaussianBlurSoftwareApplier::boxBlur(v18[5], v14[5], a4, v19, a4 - v19, a5, 4u, a6[1], a9, a10, *a6, a7, a8);
    v21 = v14;
    v14 = v18;
    if (a3)
      goto LABEL_6;
  }
  else
  {
    v20 = 0;
    v19 = 0;
    v21 = v18;
    if (a3)
    {
LABEL_6:
      v17 = (a3 & 1) + v17 - 1;
      v16 += !(a3 & 1);
      result = (_QWORD *)WebCore::FEGaussianBlurSoftwareApplier::boxBlur(v21[5], v14[5], a3, v16, v17, 4u, v27, *a6, a9, a10, a6[1], a7, a8);
      v22 = v14;
      if (a4)
        goto LABEL_7;
      goto LABEL_12;
    }
  }
  v22 = v21;
  v21 = v14;
  if (a4)
  {
LABEL_7:
    v20 = (a4 & 1) + v20 - 1;
    v19 += !(a4 & 1);
    result = (_QWORD *)WebCore::FEGaussianBlurSoftwareApplier::boxBlur(v22[5], v21[5], a4, v19, v20, v27, 4u, a6[1], a9, a10, *a6, a7, a8);
    v23 = v21;
    if (a3)
      goto LABEL_8;
LABEL_13:
    v25 = v23;
    v23 = v22;
    v24 = v27;
    if (a4)
      goto LABEL_9;
    goto LABEL_14;
  }
LABEL_12:
  v23 = v22;
  v22 = v21;
  if (!a3)
    goto LABEL_13;
LABEL_8:
  v24 = v27;
  result = (_QWORD *)WebCore::FEGaussianBlurSoftwareApplier::boxBlur(v23[5], v22[5], a3 | 1, v16, v17 + ((a3 & 1) == 0), 4u, v27, *a6, a9, a10, a6[1], a7, a8);
  v25 = v22;
  if (a4)
  {
LABEL_9:
    result = (_QWORD *)WebCore::FEGaussianBlurSoftwareApplier::boxBlur(v25[5], v23[5], a4 | 1, v19, v20 + ((a4 & 1) == 0), v24, 4u, a6[1], a9, a10, *a6, a7, a8);
    goto LABEL_15;
  }
LABEL_14:
  v23 = v25;
LABEL_15:
  if (v23 != v26)
    return memcpy((void *)v26[5], (const void *)v23[5], v26[6]);
  return result;
}

uint64_t WebCore::FEGaussianBlurSoftwareApplier::boxBlur(uint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, double a9, uint8x8_t a10, int a11, char a12, char a13)
{
  uint64_t v13;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned __int8 *v51;
  int v52;
  uint64_t i;
  _BYTE *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;

  if (a8 >= a5)
    v13 = a5;
  else
    v13 = a8;
  if (a12)
  {
    if (a11 >= 1 && a8 >= 1)
    {
      v15 = a6 * a5;
      v16 = a4;
      if ((int)v13 <= 0)
      {
        v64 = 0;
        v65 = -(a6 * a4);
        v66 = 3;
        do
        {
          v67 = 0;
          v68 = 0;
          v69 = v66;
          do
          {
            *(_BYTE *)(a2 + v69) = v68 / a3;
            if (v67 >= v16)
              v68 -= *(unsigned __int8 *)(result + v65 + v69);
            if (a5 + (int)v67 < a8)
              v68 += *(unsigned __int8 *)(result + v15 + v69);
            ++v67;
            v69 += a6;
          }
          while (a8 != v67);
          ++v64;
          v66 += a7;
        }
        while (v64 != a11);
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v19 = -(a6 * a4);
        v20 = 3;
        do
        {
          v22 = 0;
          v23 = v17;
          v24 = v13;
          do
          {
            v22 += *(unsigned __int8 *)(result + 3 + v23);
            v23 += a6;
            --v24;
          }
          while (v24);
          v25 = 0;
          v26 = v20;
          do
          {
            *(_BYTE *)(a2 + v26) = v22 / a3;
            if (v25 >= v16)
              v22 -= *(unsigned __int8 *)(result + v19 + v26);
            if (a5 + (int)v25 < a8)
              v22 += *(unsigned __int8 *)(result + v15 + v26);
            ++v25;
            v26 += a6;
          }
          while (a8 != v25);
          ++v18;
          v17 += a7;
          v20 += a7;
        }
        while (v18 != a11);
      }
    }
  }
  else if (a11 >= 1)
  {
    v27 = a6 * a5;
    if (a13 == 3)
    {
      if (a8 >= 1)
      {
        v28 = 0;
        v29 = 0;
        v30 = a6;
        v31 = a4;
        v32 = a7;
        v33 = -(a6 * a4);
        do
        {
          v35 = 0uLL;
          if ((int)v13 >= 1)
          {
            v36 = v28;
            v37 = v13;
            do
            {
              a10.i32[0] = *(_DWORD *)(result + v36);
              a10 = (uint8x8_t)vmovl_u8(a10).u64[0];
              v35 = vaddw_u16(v35, (uint16x4_t)a10);
              v36 += v30;
              --v37;
            }
            while (v37);
          }
          v38 = 0;
          v39 = v28;
          do
          {
            v40 = (_BYTE *)(a2 + v39);
            *v40 = v35.i32[0] / a3;
            v40[1] = v35.i32[1] / a3;
            v40[2] = v35.i32[2] / a3;
            v40[3] = v35.i32[3] / a3;
            if (v38 >= v31)
            {
              a10.i32[0] = *(_DWORD *)(result + v33 + v39);
              a10 = (uint8x8_t)vmovl_u8(a10).u64[0];
              v35 = vsubw_u16(v35, (uint16x4_t)a10);
            }
            if (a5 + (int)v38 < a8)
            {
              a10.i32[0] = *(_DWORD *)(result + v27 + v39);
              a10 = (uint8x8_t)vmovl_u8(a10).u64[0];
              v35 = vaddw_u16(v35, (uint16x4_t)a10);
            }
            ++v38;
            v39 += v30;
          }
          while (a8 != v38);
          ++v29;
          v28 += v32;
        }
        while (v29 != a11);
      }
    }
    else if (a8 >= 1)
    {
      v41 = 0;
      v42 = 0;
      v43 = a4;
      v44 = -a4;
      v45 = -(a6 * a4);
      v71 = v44;
      do
      {
        v70 = (int)((a8 - 1) * a6);
        if (v44 >= a5)
        {
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
        }
        else
        {
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v50 = v45;
          do
          {
            v51 = (unsigned __int8 *)(result + v50);
            if (v44 >= a8)
              v51 = (unsigned __int8 *)(result + v42 * (int)a7 + v70);
            if (v44 < 0)
              v51 = (unsigned __int8 *)(result + v42 * (int)a7);
            v46 += *v51;
            v47 += v51[1];
            v48 += v51[2];
            v49 += v51[3];
            ++v44;
            v50 += a6;
          }
          while (a5 != v44);
        }
        v52 = 0;
        for (i = 0; i != a8; ++i)
        {
          v54 = (_BYTE *)(a2 + (v41 + v52));
          *v54 = v46 / a3;
          v54[1] = v47 / a3;
          v54[2] = v48 / a3;
          v54[3] = v49 / a3;
          v55 = (v45 + v52);
          v56 = (unsigned __int8 *)(result + v55);
          if (i < v43)
          {
            v55 = v42 * (int)a7;
            v56 = (unsigned __int8 *)(result + v55);
          }
          v57 = v46 - *v56;
          v58 = (unsigned __int8 *)(result + v55);
          v59 = v47 - v58[1];
          v60 = v48 - v58[2];
          v61 = v49 - v58[3];
          if (a5 + (int)i >= a8)
            v62 = v42 * (int)a7 + v70;
          else
            v62 = (v27 + v52);
          v63 = (unsigned __int8 *)(result + v62);
          v46 = v57 + *v63;
          v47 = v59 + v63[1];
          v48 = v60 + v63[2];
          v49 = v61 + v63[3];
          v52 += a6;
        }
        ++v42;
        v45 += a7;
        v41 += a7;
        v27 += a7;
        v44 = v71;
      }
      while (v42 != a11);
    }
  }
  return result;
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::FEConvolveMatrixSoftwareApplier::setInteriorPixels(WebCore::FEConvolveMatrixSoftwareApplier::PaintingData &,int,int)::$_0,void,unsigned long>::call(uint64_t a1, int a2, double a3, double a4, double a5, double a6, float a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v7 = **(_DWORD **)(a1 + 8);
  v8 = v7 * a2;
  v9 = v7 * a2 + v7;
  v10 = **(_DWORD **)(a1 + 16);
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = **(_DWORD **)(a1 + 16);
  return WebCore::FEConvolveMatrixSoftwareApplier::setInteriorPixels(*(uint64_t **)(a1 + 24), **(_DWORD **)(a1 + 32), v10, v8, v11, a3, a4, a5, a6, a7);
}

void WebCore::FELightingSoftwareApplier::setPixelInternal(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, float a7, float a8, float a9)
{
  int v9;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  int v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;

  v9 = a6;
  v14 = HIDWORD(a6);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, float))(**(_QWORD **)(a2 + 48) + 40))(&v33, *(_QWORD *)(a2 + 48), a3, a4, a5, *(float *)(a2 + 32) * a9);
  if (!(v9 | v14))
  {
    v20 = v38;
    if (*(_BYTE *)(a2 + 16) == 7)
    {
      v19 = *(float *)(a2 + 36) * v34;
      goto LABEL_8;
    }
    v26 = v38 + v34;
    v27 = sqrtf((float)((float)(*((float *)&v33 + 1) * *((float *)&v33 + 1)) + (float)(*(float *)&v33 * *(float *)&v33))+ (float)(v26 * v26));
    v23 = *(float *)(a2 + 40);
    v22 = *(float *)(a2 + 44);
    if (v22 == 1.0)
    {
      v25 = (float)(v26 * v23) / v27;
      goto LABEL_14;
    }
    v28 = v26 / v27;
LABEL_13:
    v25 = v23 * powf(v28, v22);
    goto LABEL_14;
  }
  v15 = *(float *)(a2 + 32);
  v16 = (float)((float)v9 * a7) * v15;
  v17 = (float)((float)(int)v14 * a8) * v15;
  v18 = sqrtf((float)((float)(v17 * v17) + (float)(v16 * v16)) + 1.0);
  if (*(_BYTE *)(a2 + 16) != 7)
  {
    v21 = sqrtf((float)((float)(*((float *)&v33 + 1) * *((float *)&v33 + 1)) + (float)(*(float *)&v33 * *(float *)&v33))+ (float)((float)(v34 + v38) * (float)(v34 + v38)));
    v23 = *(float *)(a2 + 40);
    v22 = *(float *)(a2 + 44);
    v24 = (float)((float)(v17 * *((float *)&v33 + 1)) + (float)(v16 * *(float *)&v33)) + (float)(v34 + v38);
    if (v22 == 1.0)
    {
      v19 = v24 * v23;
      v20 = v18 * v21;
      goto LABEL_8;
    }
    v28 = v24 / (float)(v18 * v21);
    goto LABEL_13;
  }
  v19 = *(float *)(a2 + 36)
      * (float)(v34 + (float)((float)(v17 * *((float *)&v33 + 1)) + (float)(v16 * *(float *)&v33)));
  v20 = v18 * v38;
LABEL_8:
  v25 = v19 / v20;
LABEL_14:
  if ((unint64_t)a1 < 0xFFFFFFFFFFFFFFFDLL)
  {
    v29 = *(_QWORD *)(a2 + 64);
    if ((unint64_t)(a1 + 3) <= *(_QWORD *)(v29 + 48))
    {
      if (v25 > 1.0)
        v25 = 1.0;
      if (v25 < 0.0)
        v25 = 0.0;
      v30 = (int)(float)((float)(v25 * v37) * 255.0);
      v31 = (int)(float)((float)(v25 * v36) * 255.0);
      v32 = (_BYTE *)(*(_QWORD *)(v29 + 40) + a1);
      *v32 = (int)(float)((float)(v35 * v25) * 255.0);
      v32[1] = v31;
      v32[2] = v30;
    }
  }
}

BOOL WebCore::FELightingSoftwareApplier::apply(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  WebCore::PixelBuffer *v8;
  int32x2_t v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  unint64_t v22;
  float v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  WebCore::FilterImage *v31;
  void *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  WebCore::PixelBuffer *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned __int8 *v123;
  unsigned int v124;
  WTF *v126;
  void *v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  uint64_t v136;
  WebCore::PixelBuffer *v137;
  int v138;
  int v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  WebCore::FilterImage *v143;
  char v144;
  unint64_t v145;
  float v146;
  uint64_t v147;
  int v148;
  _DWORD *v149;
  uint64_t v150;
  WebCore::PixelBuffer *v151;
  int v152;
  int v153;
  int v154;
  int32x2_t v155[2];
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;

  if (!*((_DWORD *)a3 + 3))
  {
    __break(0xC471u);
    goto LABEL_168;
  }
  v7 = **a3;
  v8 = WebCore::FilterImage::pixelBuffer((_QWORD *)a4, 0);
  if (v8)
  {
    v9 = *(int32x2_t *)(a4 + 44);
    v155[0] = (int32x2_t)((*(_QWORD *)(a4 + 36) - (*(_QWORD *)(v7 + 36) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (*(_QWORD *)(a4 + 36) - *(_QWORD *)(v7 + 36)));
    v155[1] = v9;
    WebCore::FilterImage::copyPixelBuffer((WebCore::FilterImage *)v7, v8, v155);
    v11 = *(_DWORD *)(a4 + 44);
    v10 = *(_DWORD *)(a4 + 48);
    if (v11 >= 3 && v10 >= 3)
    {
      v145 = 0;
      v142 = a2;
      v143 = (WebCore::FilterImage *)a4;
      v13 = *(_QWORD *)(a1 + 8);
      v144 = *(_BYTE *)(v13 + 48);
      v14 = *(_QWORD *)(v13 + 64);
      if (v14)
      {
        v145 = *(_QWORD *)(v13 + 64);
        if ((v14 & 0x8000000000000) != 0)
        {
          v129 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 + 1, v129));
          v13 = *(_QWORD *)(a1 + 8);
        }
      }
      v146 = *(float *)(v13 + 72) / 255.0;
      v147 = *(_QWORD *)(v13 + 76);
      v148 = *(_DWORD *)(v13 + 84);
      v15 = *(_DWORD **)(v13 + 96);
      v16 = v15[2];
      v15[2] = v16 + 1;
      v149 = v15;
      if (v16)
      {
        v15[2] = v16;
      }
      else
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        v13 = *(_QWORD *)(a1 + 8);
      }
      v17 = (_QWORD *)(v13 + 56);
      v150 = v13 + 56;
      v151 = v8;
      v152 = 4 * v11;
      v153 = v11;
      v154 = v10;
      v156 = 0;
      v157 = 0;
      v161 = 0;
      v162 = 0;
      if ((v145 & 0x8000000000000) != 0)
      {
        v22 = HIBYTE(v145);
        v19 = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved((v145 & 0xFFFFFFFFFFFFLL) + 4);
      }
      else
      {
        v18 = bswap32(v145);
        v19 = (float)v18 / 255.0;
        v20 = (float)BYTE1(v18) / 255.0;
        v21 = (float)BYTE2(v18) / 255.0;
        LODWORD(v22) = 17;
        v23 = (float)HIBYTE(v18) / 255.0;
      }
      WebCore::platformConvertColorComponents(v22, v17, v19, v20, v21, v23);
      v158 = v24;
      v159 = v25;
      v160 = v26;
      v27 = v142;
      v28 = *(_QWORD *)(v142 + 8);
      if (__ldaxr((unsigned __int8 *)v28))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v28))
      {
        goto LABEL_17;
      }
      MEMORY[0x19AEA534C](v28);
LABEL_17:
      ++*(_QWORD *)(v28 + 8);
      v30 = __ldxr((unsigned __int8 *)v28);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v28))
        {
LABEL_22:
          v31 = v143;
          ++*(_DWORD *)v143;
          (*(void (**)(_DWORD *, uint64_t, WebCore::FilterImage *, uint64_t *))(*(_QWORD *)v15 + 32))(v15, v27, v31, &v156);
          if (*(_DWORD *)v31 == 1)
          {
            WebCore::FilterImage::~FilterImage(v31, v32);
            WTF::fastFree(v126, v127);
          }
          else
          {
            --*(_DWORD *)v31;
          }
          v33 = *(_QWORD *)(v27 + 8);
          if (__ldaxr((unsigned __int8 *)v33))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v33))
          {
            goto LABEL_28;
          }
          MEMORY[0x19AEA534C](v33);
LABEL_28:
          v35 = *(_QWORD *)(v33 + 8);
          v36 = v35 - 1;
          *(_QWORD *)(v33 + 8) = v35 - 1;
          if (v35 == 1)
          {
            v128 = *(_QWORD *)(v33 + 16);
            v37 = *(_QWORD *)(v33 + 24);
            *(_QWORD *)(v33 + 24) = 0;
            v38 = v128 != 0;
          }
          else
          {
            v37 = 0;
            v38 = 1;
          }
          v39 = __ldxr((unsigned __int8 *)v33);
          if (v39 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v33))
            {
              if (!v36)
                goto LABEL_36;
              goto LABEL_40;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v33);
          if (!v36)
          {
LABEL_36:
            if (v37)
              (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
            if (!v38)
              WTF::fastFree((WTF *)v33, v32);
          }
LABEL_40:
          v40 = v151;
          v41 = *((_QWORD *)v151 + 6);
          if (v41 <= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x196267268);
          }
          if (v41 <= 7)
          {
            __break(0xC471u);
            JUMPOUT(0x196267288);
          }
          v42 = v152;
          v43 = v152;
          v44 = v152 + 3;
          if (v41 <= v44)
          {
            __break(0xC471u);
            JUMPOUT(0x1962672A8);
          }
          if (v41 <= v152 + 7)
          {
            __break(0xC471u);
            JUMPOUT(0x1962672C8);
          }
          v45 = *((_QWORD *)v151 + 5);
          v46 = *(unsigned __int8 *)(v45 + 3);
          WebCore::FELightingSoftwareApplier::setPixelInternal(0, (uint64_t)&v142, (uint64_t)&v156, 0, 0, (2 * *(unsigned __int8 *)(v45 + 7)- 2 * v46- *(unsigned __int8 *)(v45 + v44)+ *(unsigned __int8 *)(v45 + v152 + 7)) | ((unint64_t)(*(unsigned __int8 *)(v45 + v152 + 7)- (*(unsigned __int8 *)(v45 + 7)+ 2 * v46)+ 2 * *(unsigned __int8 *)(v45 + v44)) << 32), -0.66667, -0.66667, (float)v46);
          v47 = *((_QWORD *)v40 + 6);
          if (v47 <= v43 - 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1962672E8);
          }
          if (v47 <= v43 - 1)
          {
            __break(0xC471u);
            JUMPOUT(0x196267308);
          }
          v48 = (int)v43 - 4 + (int)v43;
          v49 = v48 - 1;
          if (v47 <= v48 - 1)
          {
            __break(0xC471u);
            JUMPOUT(0x196267328);
          }
          v50 = v48 + 3;
          if (v47 <= v50)
          {
            __break(0xC471u);
            JUMPOUT(0x196267348);
          }
          v51 = v153;
          v52 = *((_QWORD *)v40 + 5);
          v53 = *(unsigned __int8 *)(v52 + v43 - 1);
          v141 = v153 - 1;
          WebCore::FELightingSoftwareApplier::setPixelInternal(v43 - 4, (uint64_t)&v142, (uint64_t)&v156, (v153 - 1), 0, (*(unsigned __int8 *)(v52 + v50)- *(unsigned __int8 *)(v52 + v49)+ 2 * (v53 - *(unsigned __int8 *)(v52 + v43 - 5))) | ((unint64_t)(*(unsigned __int8 *)(v52 + v49)- *(unsigned __int8 *)(v52 + v43 - 5)+ 2* (*(unsigned __int8 *)(v52 + v50)- v53)) << 32), -0.66667, -0.66667, (float)v53);
          v54 = v154;
          v140 = v154 - 1;
          v55 = (v154 - 1) * (int)v43;
          v56 = *((_QWORD *)v40 + 6);
          if (v56 <= v55 + 3)
          {
            __break(0xC471u);
            JUMPOUT(0x196267368);
          }
          if (v56 <= v55 + 7)
          {
            __break(0xC471u);
            JUMPOUT(0x196267388);
          }
          v57 = v55 - v43;
          v58 = v55 - v43 + 3;
          if (v56 <= v58)
          {
            __break(0xC471u);
            JUMPOUT(0x1962673A8);
          }
          v59 = v57 + 7;
          if (v56 <= v59)
          {
            __break(0xC471u);
            JUMPOUT(0x1962673C8);
          }
          v60 = *((_QWORD *)v40 + 5);
          v61 = *(unsigned __int8 *)(v60 + v55 + 3);
          WebCore::FELightingSoftwareApplier::setPixelInternal((v154 - 1) * v43, (uint64_t)&v142, (uint64_t)&v156, 0, v140, (*(unsigned __int8 *)(v60 + v59)- *(unsigned __int8 *)(v60 + v58)+ 2 * (*(unsigned __int8 *)(v60 + v55 + 7) - v61)) | ((unint64_t)(*(unsigned __int8 *)(v60 + v55 + 7)- *(unsigned __int8 *)(v60 + v59)+ 2* (v61- *(unsigned __int8 *)(v60 + v58))) << 32), -0.66667, -0.66667, (float)v61);
          v62 = (int)v43 * v54;
          v63 = v62 - 5;
          v64 = *((_QWORD *)v40 + 6);
          if (v64 <= v62 - 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1962673E8);
          }
          v65 = v62 - 1;
          if (v64 <= v62 - 1)
          {
            __break(0xC471u);
            JUMPOUT(0x196267408);
          }
          v66 = v62 - 4;
          v67 = v62 - 4 - v43;
          v68 = v67 - 1;
          if (v64 <= v67 - 1)
          {
            __break(0xC471u);
            JUMPOUT(0x196267428);
          }
          v69 = (int)v67 + 3;
          if (v64 <= v69)
          {
            __break(0xC471u);
            JUMPOUT(0x196267448);
          }
          v138 = v54;
          v136 = a1;
          v137 = v8;
          v70 = *((_QWORD *)v40 + 5);
          v71 = *(unsigned __int8 *)(v70 + v65);
          WebCore::FELightingSoftwareApplier::setPixelInternal(v66, (uint64_t)&v142, (uint64_t)&v156, v141, v140, (*(unsigned __int8 *)(v70 + v69)- *(unsigned __int8 *)(v70 + v68)+ 2 * (v71 - *(unsigned __int8 *)(v70 + v63))) | ((unint64_t)(*(unsigned __int8 *)(v70 + v63)- *(unsigned __int8 *)(v70 + v68)+ 2* (v71 - *(unsigned __int8 *)(v70 + v69))) << 32), -0.66667, -0.66667, (float)v71);
          if (v51 >= 3)
          {
            v73 = 0;
            v74 = 1;
            while (1)
            {
              v75 = *((_QWORD *)v40 + 6);
              if (v75 <= v73 + 3)
                break;
              if (v75 <= v73 + 7)
              {
                __break(0xC471u);
                JUMPOUT(0x196266ED4);
              }
              v76 = (v73 + 11);
              if (v75 <= v76)
              {
                __break(0xC471u);
                JUMPOUT(0x196266EF4);
              }
              v77 = v43 + v73 + 3;
              if (v75 <= v77)
              {
                __break(0xC471u);
                JUMPOUT(0x196266F14);
              }
              v78 = v43 + v73 + 7;
              if (v75 <= v78)
              {
                __break(0xC471u);
                JUMPOUT(0x196266F34);
              }
              v79 = v43 + v73 + 11;
              if (v75 <= v79)
              {
                __break(0xC471u);
                JUMPOUT(0x196266F54);
              }
              v80 = *((_QWORD *)v40 + 5);
              WebCore::FELightingSoftwareApplier::setPixelInternal(v73 + 4, (uint64_t)&v142, (uint64_t)&v156, v74, 0, (*(unsigned __int8 *)(v80 + v79)- *(unsigned __int8 *)(v80 + v77)+ 2 * (*(unsigned __int8 *)(v80 + v76) - *(unsigned __int8 *)(v80 + v73 + 3))) | ((unint64_t)(*(unsigned __int8 *)(v80 + v77) - (*(unsigned __int8 *)(v80 + v76) + *(unsigned __int8 *)(v80 + v73 + 3)) + *(unsigned __int8 *)(v80 + v79) + 2 * (*(unsigned __int8 *)(v80 + v78) - *(unsigned __int8 *)(v80 + v73 + 7))) << 32), -0.33333, -0.5, (float)*(unsigned __int8 *)(v80 + v73 + 7));
              v74 = (v74 + 1);
              v73 += 4;
              if ((int)v74 >= v141)
              {
                v81 = 0;
                v82 = 1;
                do
                {
                  v83 = v55 + v81;
                  v84 = *((_QWORD *)v40 + 6);
                  if (v84 <= v55 + v81 + 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196267034);
                  }
                  if (v84 <= v83 + 7)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196267054);
                  }
                  if (v84 <= v55 + v81 + 11)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196267074);
                  }
                  v85 = v57 + v81 + 3;
                  if (v84 <= v85)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196267094);
                  }
                  v86 = v57 + v81 + 7;
                  if (v84 <= v86)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1962670B4);
                  }
                  v87 = v57 + v81 + 11;
                  if (v84 <= v87)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1962670D4);
                  }
                  v88 = *((_QWORD *)v40 + 5);
                  v89 = *(unsigned __int8 *)(v55 + v81 + v88 + 7);
                  v90 = *(unsigned __int8 *)(v88 + v55 + v81 + 11);
                  WebCore::FELightingSoftwareApplier::setPixelInternal(v55 + 4 + v81, (uint64_t)&v142, (uint64_t)&v156, v82, v140, (*(unsigned __int8 *)(v88 + v87)- *(unsigned __int8 *)(v88 + v85)+ 2 * (v90 - *(unsigned __int8 *)(v83 + v88 + 3))) | ((unint64_t)(v90 + *(unsigned __int8 *)(v83 + v88 + 3) - (*(unsigned __int8 *)(v88 + v85) + *(unsigned __int8 *)(v88 + v87)) + 2 * (v89 - *(unsigned __int8 *)(v88 + v86))) << 32), -0.33333, -0.5, (float)v89);
                  v82 = (v82 + 1);
                  v81 += 4;
                }
                while ((int)v82 < v141);
                goto LABEL_73;
              }
            }
            __break(0xC471u);
LABEL_168:
            JUMPOUT(0x196266EB4);
          }
LABEL_73:
          v91 = v54;
          if (v54 >= 3)
          {
            v92 = 0;
            v93 = 2 * v43;
            v94 = (int)v43 + 3;
            v95 = 1;
            do
            {
              v96 = *((_QWORD *)v40 + 6);
              if (v96 <= v94)
              {
                __break(0xC471u);
                JUMPOUT(0x196266F74);
              }
              v97 = v43 + v92 + 7;
              if (v96 <= v97)
              {
                __break(0xC471u);
                JUMPOUT(0x196266F94);
              }
              if (v96 <= v92 + 3)
              {
                __break(0xC471u);
                JUMPOUT(0x196266FB4);
              }
              if (v96 <= v92 + 7)
              {
                __break(0xC471u);
                JUMPOUT(0x196266FD4);
              }
              v98 = v93 + v92 + 3;
              if (v96 <= v98)
              {
                __break(0xC471u);
                JUMPOUT(0x196266FF4);
              }
              v99 = v93 + v92 + 7;
              if (v96 <= v99)
              {
                __break(0xC471u);
                JUMPOUT(0x196267014);
              }
              v100 = *((_QWORD *)v40 + 5);
              WebCore::FELightingSoftwareApplier::setPixelInternal(v43 + v92, (uint64_t)&v142, (uint64_t)&v156, 0, v95, (*(unsigned __int8 *)(v100 + v92 + 7)+ 2 * (*(unsigned __int8 *)(v100 + v97) - *(unsigned __int8 *)(v100 + v94))- (*(unsigned __int8 *)(v100 + v92 + 3)+ *(unsigned __int8 *)(v100 + v98))+ *(unsigned __int8 *)(v100 + v99)) | ((unint64_t)(*(unsigned __int8 *)(v100 + v99)- *(unsigned __int8 *)(v100 + v92 + 7)+ 2* (*(unsigned __int8 *)(v100 + v98)- *(unsigned __int8 *)(v100 + v92 + 3))) << 32), -0.5, -0.33333, (float)*(unsigned __int8 *)(v100 + v94));
              v95 = (v95 + 1);
              v92 += v43;
              v94 += v43;
            }
            while ((int)v95 < (int)v140);
            v134 = v51;
            v135 = v42;
            v101 = 0;
            v139 = v93 - 4;
            v102 = 3 * v43 - 1;
            v103 = 3 * v43 - 5;
            v104 = v43 - 1;
            v105 = v43 - 5;
            v106 = v93 - 1;
            v107 = v93 - 6 + 1;
            v108 = 1;
            do
            {
              v109 = *((_QWORD *)v40 + 6);
              if (v109 <= v107)
              {
                __break(0xC471u);
                JUMPOUT(0x1962670F4);
              }
              if (v109 <= v106 + v101)
              {
                __break(0xC471u);
                JUMPOUT(0x196267114);
              }
              if (v109 <= v105 + v101)
              {
                __break(0xC471u);
                JUMPOUT(0x196267134);
              }
              if (v109 <= v104 + v101)
              {
                __break(0xC471u);
                JUMPOUT(0x196267154);
              }
              if (v109 <= v103 + v101)
              {
                __break(0xC471u);
                JUMPOUT(0x196267174);
              }
              if (v109 <= v102 + v101)
              {
                __break(0xC471u);
                JUMPOUT(0x196267194);
              }
              v114 = *((_QWORD *)v40 + 5);
              v110 = v106 + v101;
              v111 = v105 + v101;
              v112 = v104 + v101;
              v113 = v103 + v101;
              WebCore::FELightingSoftwareApplier::setPixelInternal(v139 + v101, (uint64_t)&v142, (uint64_t)&v156, v141, v108, (*(unsigned __int8 *)(v114 + v112)+ 2 * (*(unsigned __int8 *)(v114 + v110) - *(unsigned __int8 *)(v114 + v107))- (*(unsigned __int8 *)(v114 + v111)+ *(unsigned __int8 *)(v114 + v113))+ *(unsigned __int8 *)(v114 + v102 + v101)) | ((unint64_t)(*(unsigned __int8 *)(v114 + v113)- *(unsigned __int8 *)(v114 + v111)+ 2* (*(unsigned __int8 *)(v114 + v102 + v101)- *(unsigned __int8 *)(v114 + v112))) << 32), -0.5, -0.33333, (float)*(unsigned __int8 *)(v114 + v110));
              v108 = (v108 + 1);
              v101 += v43;
              v107 += v43;
            }
            while ((int)v108 < (int)v140);
            v42 = v135;
            v91 = v138;
            if (v134 >= 3)
            {
              (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v136 + 24))(v136, &v142, &v156);
              v91 = v154;
              v42 = v152;
            }
          }
          v115 = v91 * v42;
          v8 = v137;
          if (v144 == 7)
          {
            if (v115 >= 4)
            {
              v116 = (uint64_t)rint(255.0);
              v117 = 3;
              do
              {
                if (*((_QWORD *)v151 + 6) <= v117)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196267234);
                }
                *(_BYTE *)(*((_QWORD *)v151 + 5) + v117) = v116;
                v117 += 4;
              }
              while (v115 > (int)v117);
            }
          }
          else if (v115 >= 1)
          {
            v118 = 0;
            do
            {
              v119 = *((_QWORD *)v151 + 6);
              if (v119 <= v118)
              {
                __break(0xC471u);
                JUMPOUT(0x1962671B4);
              }
              if (v119 <= v118 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1962671D4);
              }
              if (v119 <= v118 + 2)
              {
                __break(0xC471u);
                JUMPOUT(0x1962671F4);
              }
              v120 = v118 + 3;
              if (v119 <= v118 + 3)
              {
                __break(0xC471u);
                JUMPOUT(0x196267214);
              }
              v121 = *((_QWORD *)v151 + 5);
              v122 = *(unsigned __int8 *)(v121 + v118);
              v123 = (unsigned __int8 *)(v121 + v118);
              v124 = v123[1];
              if (v122 > v124)
                v124 = v122;
              if (v124 <= v123[2])
                v124 = v123[2];
              v123[3] = (uint64_t)rint((double)v124);
              v118 = v120 + 1;
            }
            while (v115 > (int)v120 + 1);
          }
          if ((v145 & 0x8000000000000) != 0)
          {
            v131 = (unsigned int *)(v145 & 0xFFFFFFFFFFFFLL);
            do
            {
              v132 = __ldaxr(v131);
              v133 = v132 - 1;
            }
            while (__stlxr(v133, v131));
            v8 = v137;
            if (!v133)
            {
              atomic_store(1u, v131);
              WTF::fastFree((WTF *)v131, v72);
            }
          }
          return v8 != 0;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v28);
      goto LABEL_22;
    }
  }
  return v8 != 0;
}

void WebCore::FELightingSoftwareParallelApplier::applyPlatformPaint(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 v32;
  int v33;
  uint64_t v34;
  unsigned int v37;

  if (a3 < a4)
  {
    while (1)
    {
      v5 = *(int *)(a1 + 72);
      v6 = (int)v5 * (uint64_t)a3;
      v7 = (int)v6 - v5;
      v8 = *(_QWORD *)(a1 + 64);
      v9 = (int)v7 + 3;
      v10 = *(_QWORD *)(v8 + 48);
      if (v10 <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x196267730);
      }
      v11 = v7 + 7;
      if (v10 <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x196267750);
      }
      v12 = (int)v6 + 3;
      if (v10 <= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x196267770);
      }
      v13 = v6 + 7;
      if (v10 <= v6 + 7)
      {
        __break(0xC471u);
        JUMPOUT(0x196267790);
      }
      v14 = v5 + (int)v6;
      v15 = v14 + 3;
      if (v10 <= v14 + 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1962677B0);
      }
      v16 = (int)v14 + 7;
      if (v10 <= v16)
        goto LABEL_24;
      v37 = a3;
      if (*(int *)(a1 + 76) >= 3)
        break;
LABEL_14:
      a3 = v37 + 1;
      if (v37 + 1 == a4)
        return;
    }
    v17 = *(_QWORD *)(v8 + 40);
    v18 = *(unsigned __int8 *)(v17 + v9);
    v19 = *(unsigned __int8 *)(v17 + v11);
    v20 = *(_BYTE *)(v17 + v12);
    LOBYTE(v21) = *(_BYTE *)(v17 + v13);
    v22 = *(unsigned __int8 *)(v17 + v15);
    v23 = *(unsigned __int8 *)(v17 + v16);
    v24 = (int)v5 * (uint64_t)a3;
    v25 = v24 + 11;
    v26 = v24 + 4;
    v27 = 1;
    while (1)
    {
      v28 = *(_QWORD *)(a1 + 64);
      v29 = *(_QWORD *)(v28 + 48);
      if (v29 <= v25)
        break;
      v30 = *(int *)(a1 + 72);
      if (v29 <= v25 - v30)
      {
        __break(0xC471u);
        JUMPOUT(0x1962676F0);
      }
      if (v29 <= v25 + v30)
      {
        __break(0xC471u);
        JUMPOUT(0x196267710);
      }
      v31 = v19;
      v32 = v21;
      v33 = v23;
      v34 = *(_QWORD *)(v28 + 40);
      v21 = *(unsigned __int8 *)(v34 + v25);
      v19 = *(unsigned __int8 *)(v34 - v30 + v25);
      v23 = *(unsigned __int8 *)(v34 + v30 + v25);
      WebCore::FELightingSoftwareApplier::setPixelInternal(v26, a1, a2, v27, v37, (v19 - (v18 + v22) + 2 * (v21 - v20) + v23) | ((unint64_t)(v22 + 2 * (v33 - v31) - v18 - v19 + v23) << 32), -0.25, -0.25, (float)v32);
      v27 = (v27 + 1);
      v25 += 4;
      v26 += 4;
      v22 = v33;
      v20 = v32;
      v18 = v31;
      if ((int)v27 >= *(_DWORD *)(a1 + 76) - 1)
        goto LABEL_14;
    }
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x1962676D0);
  }
}

void WebCore::FELightingSoftwareParallelApplier::applyPlatformWorker(uint64_t a1)
{
  WebCore::FELightingSoftwareParallelApplier::applyPlatformPaint(a1, a1 + 88, *(_DWORD *)(a1 + 136), *(_DWORD *)(a1 + 140));
}

void WebCore::FELightingSoftwareParallelApplier::applyPlatformParallel(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  int v11;
  WTF *v12;
  void *v13;
  unsigned int v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  BOOL v33;
  unsigned int *v34;
  unsigned int v35;
  int64_t v36;
  unsigned int *v37;
  unsigned int v38;
  BOOL v39;
  int64_t v40;
  char *v41;
  _BOOL4 v42;
  unint64_t v43;
  NSObject *global_queue;
  void *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  _QWORD v63[2];
  int v64;
  WTF *v65;
  unsigned int v66;
  unsigned int v67;
  __int128 block;
  uint64_t (*v69)(uint64_t, uint64_t);
  void *v70;
  _QWORD *v71;
  WTF *v72;
  __int128 v73;

  v5 = *(_DWORD *)(a2 + 80);
  v6 = v5 - 2;
  v7 = (v5 - 2) >> 3;
  v8 = (*(_DWORD *)(a2 + 76) - 2) * (v5 - 2) / 0x2710u;
  if (v7 >= v8)
    v9 = v8;
  else
    v9 = v7;
  if (v9 < 2)
  {
    WebCore::FELightingSoftwareParallelApplier::applyPlatformPaint(a2, (uint64_t)a3, 1, v5 - 1);
    return;
  }
  v63[0] = WebCore::FELightingSoftwareParallelApplier::applyPlatformWorker;
  v63[1] = 144;
  v64 = v9;
  v10 = 16;
  if (v9 > 0x10)
    v10 = v9;
  v11 = 144 * v10;
  v12 = (WTF *)WTF::fastMalloc((WTF *)(144 * v10));
  v66 = (v11 & 0xFFFFFFF0) / 0x90;
  v65 = v12;
  bzero(v12, 144 * v9 - (144 * (int)v9 - 144) % 0x90u);
  v14 = v6 / v9;
  v15 = v6 % v9;
  v67 = v9;
  v16 = a2 + 32;
  v17 = v9;
  v18 = 1;
  do
  {
    v19 = v17 - 1;
    if (v9 <= (int)v17 - 1)
    {
      __break(0xC471u);
      return;
    }
    v20 = v17 - 1;
    v21 = (char *)v12 + 144 * v19;
    v22 = *(_OWORD *)a2;
    v21[16] = *(_BYTE *)(a2 + 16);
    *(_OWORD *)v21 = v22;
    v23 = *((_QWORD *)v21 + 3);
    v24 = *(_QWORD *)(a2 + 24);
    if ((v23 & 0x8000000000000) != 0)
    {
      if ((v24 & 0x8000000000000) != 0)
      {
        v60 = v17 - 1;
        v62 = v17 - 1;
        v56 = v18;
        v58 = v17;
        v54 = v16;
        v40 = v15;
        block = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
        v73 = *(_OWORD *)((v24 & 0xFFFFFFFFFFFFLL) + 4);
        v41 = (char *)v12 + 144 * v19;
        v42 = WebCore::operator==<float,4ul>((float *)&block, (float *)&v73);
        v21 = v41;
        v23 = *((_QWORD *)v41 + 3);
        if (v42 && (v43 = *(_QWORD *)(a2 + 24), HIBYTE(v23) == HIBYTE(v43)))
        {
          v25 = BYTE6(v23) == BYTE6(v43);
          v15 = v40;
          v16 = v54;
          v17 = v58;
          v19 = v60;
          v18 = v56;
          v20 = v62;
          if (v25)
            goto LABEL_16;
        }
        else
        {
          v15 = v40;
          v16 = v54;
          v17 = v58;
          v19 = v60;
          v18 = v56;
          v20 = v62;
        }
      }
    }
    else
    {
      v25 = v23 == v24 && (v24 & 0x8000000000000) == 0;
      if (v25)
        goto LABEL_16;
    }
    if ((v23 & 0x8000000000000) != 0)
    {
      v52 = v21;
      v53 = v16;
      v59 = v19;
      v61 = v20;
      v55 = v18;
      v57 = v17;
      v36 = v15;
      v37 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
      do
      {
        v38 = __ldaxr(v37);
        v39 = --v38 == 0;
      }
      while (__stlxr(v38, v37));
      v15 = v36;
      if (v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v13);
        v21 = v52;
        v16 = v53;
        v19 = v59;
        v20 = v61;
        v18 = v55;
        v17 = v57;
        v15 = v36;
      }
    }
    v26 = *(_QWORD *)(a2 + 24);
    *((_QWORD *)v21 + 3) = v26;
    if ((v26 & 0x8000000000000) != 0)
    {
      v34 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 + 1, v34));
    }
LABEL_16:
    v27 = *(_OWORD *)v16;
    v28 = *(_OWORD *)(v16 + 16);
    v29 = *(_OWORD *)(v16 + 32);
    *((_DWORD *)v21 + 20) = *(_DWORD *)(v16 + 48);
    *((_OWORD *)v21 + 3) = v28;
    *((_OWORD *)v21 + 4) = v29;
    *((_OWORD *)v21 + 2) = v27;
    v30 = (char *)v12 + 144 * v20;
    v31 = *a3;
    v32 = a3[1];
    *(_OWORD *)(v30 + 120) = a3[2];
    *(_OWORD *)(v30 + 104) = v32;
    *(_OWORD *)(v30 + 88) = v31;
    *((_DWORD *)v30 + 34) = v18;
    v18 += v14;
    if ((uint64_t)v17 <= v15)
      ++v18;
    *((_DWORD *)v30 + 35) = v18;
    v33 = v17 > 1;
    v17 = v19;
  }
  while (v33);
  if ((byte_1ECE83FE8 & 1) != 0)
  {
    global_queue = _MergedGlobals_234;
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    _MergedGlobals_234 = (uint64_t)global_queue;
    byte_1ECE83FE8 = 1;
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v69 = ___ZN3WTF19ParallelEnvironment7executeEPh_block_invoke;
  v70 = &__block_descriptor_tmp_11;
  v71 = v63;
  v72 = v12;
  dispatch_apply(v9, global_queue, &block);
  v46 = v65;
  if (v67)
  {
    v47 = (WTF *)((char *)v65 + 144 * v67);
    do
    {
      v48 = *((_QWORD *)v46 + 3);
      if ((v48 & 0x8000000000000) != 0)
      {
        v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFLL);
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          atomic_store(1u, v49);
          WTF::fastFree((WTF *)v49, v45);
        }
      }
      v46 = (WTF *)((char *)v46 + 144);
    }
    while (v46 != v47);
    v46 = v65;
  }
  if (v46)
  {
    v65 = 0;
    v66 = 0;
    WTF::fastFree(v46, v45);
  }
}

BOOL WebCore::FEMergeSoftwareApplier::apply(int a1, int a2, uint64_t a3, WebCore::FilterImage *this)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::FilterImage **v15;
  uint64_t i;
  WebCore::FilterImage *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v43;
  float v44[4];
  _QWORD v45[2];

  if (*((_QWORD *)this + 11))
    v6 = WebCore::FilterImage::imageBufferFromCIImage(this);
  else
    v6 = WebCore::FilterImage::imageBufferFromPixelBuffer(this);
  v7 = (_QWORD *)v6;
  if (!v6)
    return v7 != 0;
  v8 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_8:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v11 = (*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
  v13 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v13)
  {
    v14 = v11;
    v15 = *(WebCore::FilterImage ***)a3;
    for (i = 8 * v13; i; i -= 8)
    {
      v17 = *v15;
      if (*((_QWORD *)*v15 + 11))
        v18 = WebCore::FilterImage::imageBufferFromCIImage(v17);
      else
        v18 = WebCore::FilterImage::imageBufferFromPixelBuffer(v17);
      v19 = v18;
      if (!v18)
        goto LABEL_43;
      v20 = *(_QWORD *)(v18 + 8);
      if (__ldaxr((unsigned __int8 *)v20))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v20))
      {
        goto LABEL_22;
      }
      MEMORY[0x19AEA534C](v20);
LABEL_22:
      ++*(_QWORD *)(v20 + 8);
      v22 = __ldxr((unsigned __int8 *)v20);
      if (v22 != 1)
      {
        __clrex();
LABEL_26:
        WTF::Lock::unlockSlow((WTF::Lock *)v20);
        goto LABEL_27;
      }
      if (__stlxr(0, (unsigned __int8 *)v20))
        goto LABEL_26;
LABEL_27:
      v23 = *(_QWORD *)((char *)this + 36);
      v24 = *(_QWORD *)((char *)*v15 + 36);
      v25 = *((_DWORD *)*v15 + 11);
      v26 = *((_DWORD *)*v15 + 12);
      v44[0] = (float)(v24 - v23);
      v44[1] = (float)(int)((v24 - (v23 & 0xFFFFFFFF00000000)) >> 32);
      v44[2] = (float)v25;
      v44[3] = (float)v26;
      v45[0] = 0;
      v45[1] = *(_QWORD *)(v19 + 16);
      (*(void (**)(uint64_t, uint64_t, float *, _QWORD *, uint64_t))(*(_QWORD *)v14 + 384))(v14, v19, v44, v45, 4641);
      v27 = *(_QWORD *)(v19 + 8);
      if (__ldaxr((unsigned __int8 *)v27))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v27))
      {
        goto LABEL_31;
      }
      MEMORY[0x19AEA534C](v27);
LABEL_31:
      v29 = *(_QWORD *)(v27 + 8);
      v30 = v29 - 1;
      *(_QWORD *)(v27 + 8) = v29 - 1;
      if (v29 == 1)
      {
        v34 = *(_QWORD *)(v27 + 16);
        v31 = *(_QWORD *)(v27 + 24);
        *(_QWORD *)(v27 + 24) = 0;
        v32 = v34 != 0;
      }
      else
      {
        v31 = 0;
        v32 = 1;
      }
      v33 = __ldxr((unsigned __int8 *)v27);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
        {
          if (!v30)
            goto LABEL_39;
          goto LABEL_43;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
      if (!v30)
      {
LABEL_39:
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        if (!v32)
          WTF::fastFree((WTF *)v27, v12);
      }
LABEL_43:
      ++v15;
    }
  }
  v35 = v7[1];
  if (__ldaxr((unsigned __int8 *)v35))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v35))
  {
    goto LABEL_51;
  }
  MEMORY[0x19AEA534C](v35);
LABEL_51:
  v37 = *(_QWORD *)(v35 + 8);
  v38 = v37 - 1;
  *(_QWORD *)(v35 + 8) = v37 - 1;
  if (v37 == 1)
  {
    v43 = *(_QWORD *)(v35 + 16);
    v39 = *(_QWORD *)(v35 + 24);
    *(_QWORD *)(v35 + 24) = 0;
    v40 = v43 != 0;
  }
  else
  {
    v39 = 0;
    v40 = 1;
  }
  v41 = __ldxr((unsigned __int8 *)v35);
  if (v41 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v35))
    {
      if (v38)
        return v7 != 0;
      goto LABEL_59;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v35);
  if (v38)
    return v7 != 0;
LABEL_59:
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (!v40)
    WTF::fastFree((WTF *)v35, v12);
  return v7 != 0;
}

_BYTE *WebCore::FEMorphologySoftwareApplier::applyPlatformGeneric(uint64_t a1, void *a2, int a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BYTE *result;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int8x8_t v27;
  unsigned int v28;
  uint32x2_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int8x8_t v34;
  unsigned int v35;
  uint32x2_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int8x8_t v47;
  unsigned int v48;
  uint32x2_t v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int8x8_t v55;
  unsigned int v56;
  uint32x2_t v57;
  char *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int8x8_t v66;
  int v67;
  unsigned int v68;
  uint32x2_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int8x8_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint32x2_t v78;
  int v79;
  int v80;
  int v81;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  void *__dst;
  uint64_t v93;
  _BYTE v94[72];

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(int *)(a1 + 4);
  v81 = *(_DWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 32);
  v80 = *(_DWORD *)(a1 + 36);
  __dst = v94;
  v93 = 16;
  v9 = (2 * v7) | 1;
  result = v94;
  if (v9 >= 0x11)
  {
    if (v9 >> 30)
    {
      __break(0xC471u);
      goto LABEL_86;
    }
    result = (_BYTE *)WTF::fastMalloc((WTF *)(4 * (int)v9));
    LODWORD(v93) = (2 * v7) | 1;
    __dst = result;
  }
  if ((int)v3 >= a3)
    goto LABEL_80;
  v11 = v3;
  v12 = v81 + 1 + v3;
  v13 = v3 - v81;
  v14 = 4 * v8;
  v79 = v81 + 1;
  do
  {
    v83 = v13;
    v84 = v12;
    if (v80 >= v12)
      v15 = v12;
    else
      v15 = v80;
    v16 = v13 & ~(v13 >> 31);
    v90 = ~v16 + v15;
    v86 = (v11 - v81) & ~(((int)v11 - v81) >> 31);
    v88 = v16 + 1;
    v85 = v11;
    if (v79 + (int)v11 >= v80)
      v17 = v80;
    else
      v17 = v79 + v11;
    HIDWORD(v93) = 0;
    if ((int)v7 >= 1)
    {
      v18 = 0;
      v19 = 0;
      v20 = v14 * v88;
      do
      {
        v21 = *(_QWORD *)(v5 + 40);
        v22 = bswap32(*(_DWORD *)(v21 + 4 * (v86 * (int)v8 + (int)v19)));
        if (v86 + 1 < v17)
        {
          if (*(_BYTE *)a1 == 1)
          {
            v23 = v20;
            v24 = v90;
            do
            {
              v25 = bswap32(*(_DWORD *)(v21 + v23));
              v26 = v22;
              v27 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22), (uint32x2_t)0xFFFFFFF8FFFFFFF0);
              if (v25 < v22)
                v26 = v25;
              if (HIBYTE(v25) >= HIBYTE(v22))
                v28 = HIBYTE(v22);
              else
                v28 = HIBYTE(v25);
              v29 = vshl_u32(vmin_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v25), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL), (uint32x2_t)vand_s8(v27, (int8x8_t)0xFF000000FFLL)), (uint32x2_t)0x800000010);
              v22 = v29.i32[0] | (v28 << 24) | v26 | v29.i32[1];
              v23 += v14;
              --v24;
            }
            while (v24);
          }
          else
          {
            v30 = v20;
            v31 = v90;
            do
            {
              v32 = bswap32(*(_DWORD *)(v21 + v30));
              v33 = v22;
              v34 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22), (uint32x2_t)0xFFFFFFF8FFFFFFF0);
              v35 = HIBYTE(v22);
              if (v33 <= v32)
                v33 = v32;
              if (v35 <= HIBYTE(v32))
                v35 = HIBYTE(v32);
              v36 = vshl_u32(vmax_u32((uint32x2_t)vand_s8(v34, (int8x8_t)0xFF000000FFLL), (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v32), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL)), (uint32x2_t)0x800000010);
              v22 = v36.i32[0] | (v35 << 24) | v33 | v36.i32[1];
              v30 += v14;
              --v31;
            }
            while (v31);
          }
        }
        v91 = v22;
        if (v18 == (_DWORD)v93)
        {
          v37 = WTF::Vector<WebCore::ColorComponents<unsigned char,4ul>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, (void *)(v18 + 1), (unint64_t)&v91);
          *((_DWORD *)__dst + HIDWORD(v93)) = *(_DWORD *)v37;
        }
        else
        {
          *((_DWORD *)__dst + v18) = v22;
        }
        v18 = ++HIDWORD(v93);
        ++v19;
        v20 += 4;
      }
      while (v19 != v7);
    }
    if ((int)v8 >= 1)
    {
      v38 = 0;
      v39 = 4 * v7 + v14 * v88;
      v40 = v86 * v8;
      v87 = v86 + 1;
      v89 = v40;
      while (1)
      {
        if (v38 >= (int)v8 - (int)v7)
        {
          v50 = HIDWORD(v93);
        }
        else
        {
          v41 = *(_QWORD *)(v5 + 40);
          v42 = bswap32(*(_DWORD *)(v41 + 4 * ((int)v7 + (int)v38 + v89)));
          if (v87 < v17)
          {
            if (*(_BYTE *)a1 == 1)
            {
              v43 = v39;
              v44 = v90;
              do
              {
                v45 = bswap32(*(_DWORD *)(v41 + v43));
                v46 = v42;
                v47 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v42), (uint32x2_t)0xFFFFFFF8FFFFFFF0);
                if (v45 < v42)
                  v46 = v45;
                if (HIBYTE(v45) >= HIBYTE(v42))
                  v48 = HIBYTE(v42);
                else
                  v48 = HIBYTE(v45);
                v49 = vshl_u32(vmin_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v45), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL), (uint32x2_t)vand_s8(v47, (int8x8_t)0xFF000000FFLL)), (uint32x2_t)0x800000010);
                v42 = v49.i32[0] | (v48 << 24) | v46 | v49.i32[1];
                v43 += v14;
                --v44;
              }
              while (v44);
            }
            else
            {
              v51 = v39;
              v52 = v90;
              do
              {
                v53 = bswap32(*(_DWORD *)(v41 + v51));
                v54 = v42;
                v55 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v42), (uint32x2_t)0xFFFFFFF8FFFFFFF0);
                v56 = HIBYTE(v42);
                if (v54 <= v53)
                  v54 = v53;
                if (v56 <= HIBYTE(v53))
                  v56 = HIBYTE(v53);
                v57 = vshl_u32(vmax_u32((uint32x2_t)vand_s8(v55, (int8x8_t)0xFF000000FFLL), (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v53), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL)), (uint32x2_t)0x800000010);
                v42 = v57.i32[0] | (v56 << 24) | v54 | v57.i32[1];
                v51 += v14;
                --v52;
              }
              while (v52);
            }
          }
          v91 = v42;
          if (HIDWORD(v93) == (_DWORD)v93)
          {
            v58 = WTF::Vector<WebCore::ColorComponents<unsigned char,4ul>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, (void *)(HIDWORD(v93) + 1), (unint64_t)&v91);
            *((_DWORD *)__dst + HIDWORD(v93)) = *(_DWORD *)v58;
          }
          else
          {
            *((_DWORD *)__dst + HIDWORD(v93)) = v42;
          }
          v50 = ++HIDWORD(v93);
        }
        if (v38 > v7)
        {
          if (v50 != 1)
          {
            memmove(__dst, (char *)__dst + 4, 4 * v50 - 4);
            v50 = HIDWORD(v93);
          }
          HIDWORD(v93) = --v50;
        }
        if (!v50)
          break;
        v59 = v50;
        v60 = *(_DWORD *)__dst;
        if ((_DWORD)v59 != 1)
        {
          v61 = v59 - 1;
          v62 = (unsigned int *)((char *)__dst + 4);
          if (*(_BYTE *)a1 == 1)
          {
            do
            {
              v64 = *v62++;
              v63 = v64;
              v65 = v60;
              v66 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v60), (uint32x2_t)0xFFFFFFF8FFFFFFF0);
              v67 = v64;
              v68 = HIBYTE(v64);
              if (v64 < v60)
                v65 = v67;
              v69 = vshl_u32(vmin_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v63), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL), (uint32x2_t)vand_s8(v66, (int8x8_t)0xFF000000FFLL)), (uint32x2_t)0x800000010);
              if (v68 >= HIBYTE(v60))
                v70 = HIBYTE(v60);
              else
                v70 = v68;
              v60 = v69.i32[0] | (v70 << 24) | v65 | v69.i32[1];
              --v61;
            }
            while (v61);
          }
          else
          {
            do
            {
              v72 = *v62++;
              v71 = v72;
              v73 = v60;
              v74 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v60), (uint32x2_t)0xFFFFFFF8FFFFFFF0);
              v75 = HIBYTE(v60);
              v76 = v72;
              v77 = HIBYTE(v72);
              if (v73 <= v72)
                v73 = v76;
              v78 = vshl_u32(vmax_u32((uint32x2_t)vand_s8(v74, (int8x8_t)0xFF000000FFLL), (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v71), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL)), (uint32x2_t)0x800000010);
              if (v75 <= HIBYTE(v71))
                v75 = v77;
              v60 = v78.i32[0] | (v75 << 24) | v73 | v78.i32[1];
              --v61;
            }
            while (v61);
          }
        }
        *(_DWORD *)(*(_QWORD *)(v6 + 40) + 4 * ((int)v38++ + (int)v85 * (int)v8)) = bswap32(v60);
        v39 += 4;
        if (v38 == v8)
          goto LABEL_78;
      }
      __break(0xC471u);
LABEL_86:
      JUMPOUT(0x1962684F0);
    }
LABEL_78:
    v11 = v85 + 1;
    v12 = v84 + 1;
    v13 = v83 + 1;
  }
  while ((_DWORD)v85 + 1 != a3);
  result = __dst;
LABEL_80:
  if (v94 != result)
  {
    if (result)
    {
      __dst = 0;
      LODWORD(v93) = 0;
      return (_BYTE *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

_BYTE *WebCore::FEMorphologySoftwareApplier::applyPlatformWorker(uint64_t a1)
{
  return WebCore::FEMorphologySoftwareApplier::applyPlatformGeneric(*(_QWORD *)a1, (void *)*(unsigned int *)(a1 + 8), *(_DWORD *)(a1 + 12));
}

uint64_t WebCore::FEMorphologySoftwareApplier::apply(uint64_t a1, float *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t result;
  WebCore::PixelBuffer *v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  int v17;
  float v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  WebCore::PixelBuffer *v26;
  CFTypeRef v27;
  unint64_t v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  NSObject *global_queue;
  void *v38;
  WTF *v39;
  unint64_t v40;
  int v41;
  WebCore::PixelBuffer *v42;
  WebCore::PixelBuffer *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WebCore::PixelBuffer *v47[2];
  unsigned int v48;
  WTF *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t block;
  CFTypeRef cf;
  uint64_t (*v54)(uint64_t, uint64_t);
  void *v55;
  WebCore::PixelBuffer **v56;
  WTF *v57;

  if (!*(_DWORD *)(a3 + 12))
  {
    __break(0xC471u);
    goto LABEL_64;
  }
  v7 = **(_QWORD ***)a3;
  result = (uint64_t)WebCore::FilterImage::pixelBuffer(a4, 0);
  if (!result)
    return result;
  v9 = (WebCore::PixelBuffer *)result;
  v10 = *(_QWORD *)((char *)a4 + 36);
  v11 = *(_QWORD *)((char *)a4 + 44);
  v45 = (v10 - (*(_QWORD *)((char *)v7 + 36) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v10
                                                                                              - *(_QWORD *)((char *)v7 + 36));
  v46 = v11;
  block = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 68);
  v12 = (*(float (**)(float *, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &block);
  v14 = v13 * a2[14];
  v15 = floorf(v12 * a2[13]);
  if (v15 > -2147500000.0)
    v16 = (int)v15;
  else
    v16 = 0x80000000;
  if (v15 < 2147500000.0)
    v17 = v16;
  else
    v17 = 0x7FFFFFFF;
  v18 = floorf(v14);
  if (v18 >= 2147500000.0)
  {
    v19 = 0x7FFFFFFF;
    if (v17 < 0)
      goto LABEL_14;
  }
  else
  {
    if (v18 <= -2147500000.0)
      goto LABEL_14;
    v19 = (int)v18;
    if (v17 < 0)
      goto LABEL_14;
  }
  if ((v19 & 0x80000000) == 0 && v17 | v19)
  {
    v20 = HIDWORD(v11);
    v21 = v17 >= (int)v11 - 1 ? v11 - 1 : v17;
    v22 = v19 >= (int)v20 - 1 ? v20 - 1 : v19;
    if ((v21 & 0x80000000) == 0 && (v22 & 0x80000000) == 0 && v21 | v22)
    {
      v23 = *(_QWORD *)(a1 + 8);
      v24 = *(const void **)(v23 + 56);
      if (v24)
      {
        CFRetain(*(CFTypeRef *)(v23 + 56));
        LOWORD(block) = 0;
        cf = v24;
        CFRetain(v24);
      }
      else
      {
        LOWORD(block) = 0;
        cf = 0;
      }
      v25 = v7[12];
      v40 = v46;
      (*(void (**)(WebCore::PixelBuffer **__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v25 + 24))(v47, v25, &block, &v40);
      if (v47[0])
      {
        WebCore::FilterImage::copyPixelBuffer((WebCore::FilterImage *)v7, v47[0], (int32x2_t *)&v45);
        v26 = v47[0];
      }
      else
      {
        v26 = 0;
      }
      v27 = cf;
      cf = 0;
      if (v27)
        CFRelease(v27);
      if (v24)
        CFRelease(v24);
      if (!v26)
        return 0;
      LOBYTE(v40) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 64);
      v42 = v26;
      v43 = v9;
      v28 = SHIDWORD(v46);
      v44 = v46;
      HIDWORD(v40) = v21;
      v41 = v22;
      v29 = sqrt((double)(v22 * v21)) * 0.65;
      if (SHIDWORD(v46) / 8 >= (float)((float)(v29 * (float)(HIDWORD(v46) * (int)v46)) / 25600.0))
        v30 = (float)((float)(v29 * (float)(HIDWORD(v46) * (int)v46)) / 25600.0);
      else
        v30 = SHIDWORD(v46) / 8;
      if (v30 < 2)
      {
        WebCore::FEMorphologySoftwareApplier::applyPlatformGeneric((uint64_t)&v40, 0, SHIDWORD(v46));
LABEL_55:
        if (*((_DWORD *)v26 + 2) == 1)
          (*(void (**)(WebCore::PixelBuffer *))(*(_QWORD *)v26 + 8))(v26);
        else
          --*((_DWORD *)v26 + 2);
        return 1;
      }
      v47[0] = (WebCore::PixelBuffer *)WebCore::FEMorphologySoftwareApplier::applyPlatformWorker;
      v47[1] = (WebCore::PixelBuffer *)16;
      v48 = v30;
      if (v30 <= 0x10)
        v31 = 16;
      else
        v31 = v30;
      if (!(v31 >> 28))
      {
        v32 = (WTF *)WTF::fastMalloc((WTF *)(16 * v31));
        v33 = v32;
        v49 = v32;
        v50 = v31;
        v51 = v30;
        v34 = v30 - 1;
        if ((int)(v30 - 1) >= 0)
        {
          v35 = 0;
          v36 = (_DWORD *)((char *)v32 + 16 * v34 + 12);
          do
          {
            *(v36 - 1) = v35;
            v35 += v28 / v30;
            if ((int)v34 < (int)(v28 % v30))
              ++v35;
            *v36 = v35;
            *(_QWORD *)(v36 - 3) = &v40;
            --v34;
            v36 -= 4;
          }
          while (v34 != -1);
        }
        if ((byte_1ECE83FE8 & 1) != 0)
        {
          global_queue = _MergedGlobals_234;
        }
        else
        {
          global_queue = dispatch_get_global_queue(0, 0);
          _MergedGlobals_234 = (uint64_t)global_queue;
          byte_1ECE83FE8 = 1;
        }
        block = MEMORY[0x1E0C809B0];
        cf = (CFTypeRef)0x40000000;
        v54 = ___ZN3WTF19ParallelEnvironment7executeEPh_block_invoke;
        v55 = &__block_descriptor_tmp_11;
        v56 = v47;
        v57 = v33;
        dispatch_apply((int)v30, global_queue, &block);
        v39 = v49;
        if (v49)
        {
          v49 = 0;
          v50 = 0;
          WTF::fastFree(v39, v38);
        }
        goto LABEL_55;
      }
      __break(0xC471u);
LABEL_64:
      JUMPOUT(0x1962688C8);
    }
  }
LABEL_14:
  WebCore::FilterImage::copyPixelBuffer((WebCore::FilterImage *)v7, v9, (int32x2_t *)&v45);
  return 1;
}

uint64_t WebCore::FEOffsetSoftwareApplier::apply(uint64_t result, float *a2, uint64_t **a3, WebCore::FilterImage *this)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  float v26[4];
  _QWORD v27[2];

  if (*((_DWORD *)a3 + 3))
  {
    v6 = result;
    v7 = **a3;
    v8 = WebCore::FilterImage::imageBuffer(this);
    if (v8)
    {
      v9 = (unsigned __int8 **)v8;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v8 + 8));
      v10 = WebCore::FilterImage::imageBuffer((WebCore::FilterImage *)v7);
      if (v10)
      {
        v12 = v10;
        v13 = (unsigned __int8 **)(v10 + 8);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v10 + 8));
        v14 = *(_QWORD *)((char *)this + 36);
        v15 = *(_QWORD *)(v7 + 36);
        v16 = (float)(v15 - v14);
        v17 = (float)(int)((v15 - (v14 & 0xFFFFFFFF00000000)) >> 32);
        v18 = (float)*(int *)(v7 + 48);
        v26[2] = (float)*(int *)(v7 + 44);
        v26[3] = v18;
        v27[0] = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 64);
        v19 = (*(float (**)(float *, _QWORD *))(*(_QWORD *)a2 + 80))(a2, v27);
        v21 = (float)(v20 * a2[14]) + v17;
        v26[0] = (float)(v19 * a2[13]) + v16;
        v26[1] = v21;
        v22 = (*((uint64_t (**)(unsigned __int8 **))*v9 + 2))(v9);
        v27[0] = 0;
        v27[1] = *(_QWORD *)(v12 + 16);
        (*(void (**)(uint64_t, uint64_t, float *, _QWORD *, uint64_t))(*(_QWORD *)v22 + 384))(v22, v12, v26, v27, 4641);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v13, v23);
        v24 = 1;
LABEL_5:
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v9 + 1, v11);
        return v24;
      }
    }
    else
    {
      v25 = WebCore::FilterImage::imageBuffer((WebCore::FilterImage *)v7);
      if (!v25)
        return 0;
      v9 = (unsigned __int8 **)v25;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v25 + 8));
    }
    v24 = 0;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

void WebCore::FETileSoftwareApplier::apply(int a1, uint64_t a2, uint64_t **a3, WebCore::FilterImage *this)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  _BOOL4 v41;
  _BOOL4 v42;
  float v43;
  float v44;
  unint64_t v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  int v53;
  double v54;
  double v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t **v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  _BYTE v92[8];
  int v93;
  unsigned __int8 v94;
  float v95[2];
  uint64_t v96;

  if (!*((_DWORD *)a3 + 3))
  {
    __break(0xC471u);
    return;
  }
  v6 = **a3;
  if (*((_QWORD *)this + 11))
    v7 = WebCore::FilterImage::imageBufferFromCIImage(this);
  else
    v7 = WebCore::FilterImage::imageBufferFromPixelBuffer(this);
  v8 = (_QWORD *)v7;
  if (!v7)
  {
    if (*(_QWORD *)(v6 + 88))
      v84 = WebCore::FilterImage::imageBufferFromCIImage((WebCore::FilterImage *)v6);
    else
      v84 = WebCore::FilterImage::imageBufferFromPixelBuffer((WebCore::FilterImage *)v6);
    v14 = v84;
    if (!v84)
      return;
    goto LABEL_17;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_9:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  if (*(_QWORD *)(v6 + 88))
    v12 = WebCore::FilterImage::imageBufferFromCIImage((WebCore::FilterImage *)v6);
  else
    v12 = WebCore::FilterImage::imageBufferFromPixelBuffer((WebCore::FilterImage *)v6);
  v14 = v12;
  if (!v12)
    goto LABEL_115;
LABEL_17:
  v15 = *(_QWORD *)(v14 + 8);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v15);
LABEL_21:
  ++*(_QWORD *)(v15 + 8);
  v17 = __ldxr((unsigned __int8 *)v15);
  if (v17 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v15))
    {
      if (!v8)
        goto LABEL_99;
      goto LABEL_24;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
  if (!v8)
    goto LABEL_99;
LABEL_24:
  v18 = *(float *)(v6 + 4);
  v19 = *(float *)(v6 + 8);
  v20 = *(float *)(a2 + 60);
  v21 = *(float *)(a2 + 64);
  if (v18 >= v20)
    v22 = *(float *)(v6 + 4);
  else
    v22 = *(float *)(a2 + 60);
  if (v19 >= v21)
    v23 = *(float *)(v6 + 8);
  else
    v23 = *(float *)(a2 + 64);
  v24 = v18 + *(float *)(v6 + 12);
  v25 = v19 + *(float *)(v6 + 16);
  v26 = *(float *)(a2 + 72);
  v27 = v20 + *(float *)(a2 + 68);
  if (v27 >= v24)
    v28 = v24;
  else
    v28 = v20 + *(float *)(a2 + 68);
  v29 = v21 + v26;
  if ((float)(v21 + v26) < v25)
    v25 = v21 + v26;
  if (v22 >= v28 || v23 >= v25)
  {
    v22 = 0.0;
    v23 = 0.0;
    v28 = 0.0;
    v25 = 0.0;
  }
  v31 = *(_QWORD *)(v6 + 36);
  v32 = *(_QWORD *)((char *)this + 44);
  v33 = *(float *)(a2 + 52);
  v34 = *(float *)(a2 + 56);
  v35 = (float)(v28 - v22) * v33;
  v36 = (float)(v25 - v23) * v34;
  v37 = *((float *)this + 1);
  v38 = *((float *)this + 2);
  v39 = *((float *)this + 4);
  if (v37 >= v20)
    v20 = *((float *)this + 1);
  if (v38 >= v21)
    v21 = *((float *)this + 2);
  v40 = v37 + *((float *)this + 3);
  if (v27 >= v40)
    v27 = v40;
  if (v29 >= (float)(v38 + v39))
    v29 = v38 + v39;
  v41 = v20 < v27;
  v42 = v21 < v29;
  if (v41 && v42)
    v43 = v20;
  else
    v43 = 0.0;
  if (v41 && v42)
    v44 = v21;
  else
    v44 = 0.0;
  v95[0] = v35;
  v95[1] = v36;
  v45 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v45 != -1)
  {
    v90 = &v96;
    v88 = &v90;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v88, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  if ((*(_BYTE *)(a2 + 49) & 2) == 0 || !WebCore::s_canUseAcceleratedBuffers)
    goto LABEL_60;
  v90 = 0;
  v91 = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferIOSurfaceBackend,WebCore::ImageBuffer>(v95, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t)&v90, &v96, 1.0);
  if (!v96)
  {
    v96 = 0;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v91 + 4));
LABEL_60:
    v90 = 0;
    v91 = 0;
    WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(v95, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, &v96, 1.0);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v91 + 4));
  if (v96)
  {
    v46 = v22 * v33;
    v47 = v23 * v34;
    v48 = (*(uint64_t (**)(void))(*(_QWORD *)v96 + 16))();
    (*(void (**)(uint64_t, float, float))(*(_QWORD *)v48 + 648))(v48, -v46, -v47);
    *(float *)&v90 = (float)(int)v31;
    *((float *)&v90 + 1) = (float)SHIDWORD(v31);
    WebCore::GraphicsContext::drawImageBuffer(v48, v14, (uint64_t *)&v90);
    v49 = v96;
    v50 = (float)(v46 - (float)(v33 * v43));
    v96 = 0;
    v51 = (float)(v47 - (float)(v34 * v44));
    v88 = (uint64_t **)v49;
    v89 = 1;
    LOBYTE(v90) = 0;
    LODWORD(v91) = -1;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_((uint64_t)v95, &v90, (uint64_t *)&v88);
    LODWORD(v91) = 1;
    v92[0] = 0;
    v94 = 0;
    v52 = WTF::fastMalloc((WTF *)0x68);
    *(_BYTE *)(v52 + 8) = 0;
    *(_DWORD *)v52 = 1;
    *(_DWORD *)(v52 + 16) = -1;
    v53 = v91;
    if ((_DWORD)v91 != -1)
    {
      ((void (*)(float *, uint64_t, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v91])(v95, v52 + 8, &v90);
      *(_DWORD *)(v52 + 16) = v53;
    }
    v54 = v50 + 0.0;
    v55 = v51 + 0.0;
    *(_BYTE *)(v52 + 24) = 0;
    *(_BYTE *)(v52 + 40) = 0;
    v56 = v94;
    if (v94)
    {
      *(_DWORD *)(v52 + 32) = -1;
      v57 = v93;
      if (v93 == -1)
      {
        v56 = 1;
      }
      else
      {
        ((void (*)(float *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v93])(v95);
        *(_DWORD *)(v52 + 32) = v57;
        v56 = v94;
      }
      *(_BYTE *)(v52 + 40) = 1;
    }
    *(_WORD *)(v52 + 48) = 257;
    *(_QWORD *)(v52 + 56) = 0x3FF0000000000000;
    *(_QWORD *)(v52 + 64) = 0;
    *(_QWORD *)(v52 + 72) = 0;
    *(_QWORD *)(v52 + 80) = 0x3FF0000000000000;
    *(double *)(v52 + 88) = v54;
    *(double *)(v52 + 96) = v55;
    if (v56)
    {
      if (v93 != -1)
        ((void (*)(float *, _BYTE *))off_1E3416AC8[v93])(v95, v92);
      v93 = -1;
    }
    if ((_DWORD)v91 != -1)
      ((void (*)(float *, uint64_t **))off_1E3416AC8[v91])(v95, &v90);
    LODWORD(v91) = -1;
    if (v89 != -1)
      ((void (*)(float *, uint64_t ***))off_1E3416AC8[v89])(v95, &v88);
    v58 = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    v59 = v58;
    v60 = v58 + 8;
    v61 = *(unsigned int *)(v58 + 88);
    if ((_DWORD)v61 != -1)
      ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v61])(&v90, v58 + 24);
    *(_QWORD *)(v59 + 24) = v52;
    *(_DWORD *)(v59 + 88) = 2;
    *(_DWORD *)(v59 + 184) |= 1u;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 88))(v59, v60);
    v90 = 0;
    *(float *)&v91 = (float)(int)v32;
    *((float *)&v91 + 1) = (float)SHIDWORD(v32);
    (*(void (**)(uint64_t, uint64_t **, uint64_t))(*(_QWORD *)v59 + 216))(v59, &v90, 1);
    v62 = v96;
    v96 = 0;
    if (v62)
    {
      v63 = *(_QWORD *)(v62 + 8);
      if (__ldaxr((unsigned __int8 *)v63))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v63))
      {
        goto LABEL_87;
      }
      MEMORY[0x19AEA534C](v63);
LABEL_87:
      v65 = *(_QWORD *)(v63 + 8);
      v66 = v65 - 1;
      *(_QWORD *)(v63 + 8) = v65 - 1;
      if (v65 == 1)
      {
        v87 = *(_QWORD *)(v63 + 16);
        v67 = *(_QWORD *)(v63 + 24);
        *(_QWORD *)(v63 + 24) = 0;
        v68 = v87 != 0;
      }
      else
      {
        v67 = 0;
        v68 = 1;
      }
      v69 = __ldxr((unsigned __int8 *)v63);
      if (v69 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v63))
        {
          if (v66)
            goto LABEL_99;
LABEL_95:
          if (v67)
            (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
          if (!v68)
            WTF::fastFree((WTF *)v63, v13);
          goto LABEL_99;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v63);
      if (v66)
        goto LABEL_99;
      goto LABEL_95;
    }
  }
LABEL_99:
  v70 = *(_QWORD *)(v14 + 8);
  if (__ldaxr((unsigned __int8 *)v70))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v70))
  {
    goto LABEL_103;
  }
  MEMORY[0x19AEA534C](v70);
LABEL_103:
  v72 = *(_QWORD *)(v70 + 8);
  v73 = v72 - 1;
  *(_QWORD *)(v70 + 8) = v72 - 1;
  if (v72 == 1)
  {
    v85 = *(_QWORD *)(v70 + 16);
    v74 = *(_QWORD *)(v70 + 24);
    *(_QWORD *)(v70 + 24) = 0;
    v75 = v85 != 0;
  }
  else
  {
    v74 = 0;
    v75 = 1;
  }
  v76 = __ldxr((unsigned __int8 *)v70);
  if (v76 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v70))
    {
      if (v73)
        goto LABEL_114;
      goto LABEL_111;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v70);
  if (v73)
    goto LABEL_114;
LABEL_111:
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  if (v75)
  {
LABEL_114:
    if (!v8)
      return;
    goto LABEL_115;
  }
  WTF::fastFree((WTF *)v70, v13);
  if (!v8)
    return;
LABEL_115:
  v77 = v8[1];
  if (__ldaxr((unsigned __int8 *)v77))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v77))
  {
    goto LABEL_119;
  }
  MEMORY[0x19AEA534C](v77);
LABEL_119:
  v79 = *(_QWORD *)(v77 + 8);
  v80 = v79 - 1;
  *(_QWORD *)(v77 + 8) = v79 - 1;
  if (v79 == 1)
  {
    v86 = *(_QWORD *)(v77 + 16);
    v81 = *(_QWORD *)(v77 + 24);
    *(_QWORD *)(v77 + 24) = 0;
    v82 = v86 != 0;
  }
  else
  {
    v81 = 0;
    v82 = 1;
  }
  v83 = __ldxr((unsigned __int8 *)v77);
  if (v83 != 1)
  {
    __clrex();
LABEL_126:
    WTF::Lock::unlockSlow((WTF::Lock *)v77);
    if (v80)
      return;
    goto LABEL_127;
  }
  if (__stlxr(0, (unsigned __int8 *)v77))
    goto LABEL_126;
  if (v80)
    return;
LABEL_127:
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  if (!v82)
    WTF::fastFree((WTF *)v77, v13);
}

float WebCore::FETurbulenceSoftwareApplier::noise2D(uint64_t a1, int *a2, float a3, float a4)
{
  float v4;
  int v5;
  int v6;
  float v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float v16;
  float v17;
  int v18;
  int v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;

  v4 = a3 + 4096.0;
  v5 = (int)v4;
  v6 = (int)v4 + 1;
  v7 = a4 + 4096.0;
  v8 = (int)v7;
  v9 = (int)v7 + 1;
  if (*(_BYTE *)(a1 + 24))
  {
    v10 = *a2;
    v11 = a2[1];
    if (v11 <= v5)
      v12 = *a2;
    else
      LOBYTE(v12) = 0;
    LOBYTE(v12) = v5 - v12;
    if (v6 < v11)
      LOBYTE(v10) = 0;
    LOBYTE(v6) = v6 - v10;
    v13 = a2[2];
    v14 = a2[3];
    if (v14 <= v8)
      v15 = a2[2];
    else
      LOBYTE(v15) = 0;
    LOBYTE(v15) = v8 - v15;
    if (v9 < v14)
      LOBYTE(v13) = 0;
    LOBYTE(v9) = v9 - v13;
  }
  else
  {
    v12 = (int)v4;
    v15 = (int)v7;
  }
  v16 = v7 - (float)v8;
  v17 = v4 - (float)v5;
  v18 = *(_DWORD *)(a1 + 36 + 4 * v12);
  v19 = *(_DWORD *)(a1 + 36 + 4 * v6);
  v20 = (float)(v17 * v17) * (float)((float)(v17 * -2.0) + 3.0);
  v21 = *(int *)(a1 + 36 + 4 * (v18 + v15));
  v22 = (float)(v16 * *(float *)(a1 + 2092 + 8 * v21 + 4)) + (float)(v17 * *(float *)(a1 + 2092 + 8 * v21));
  v23 = *(int *)(a1 + 36 + 4 * (v19 + v15));
  v24 = v22
      + (float)(v20
              * (float)((float)((float)(v16 * *(float *)(a1 + 2092 + 8 * v23 + 4))
                              + (float)((float)(v17 + -1.0) * *(float *)(a1 + 2092 + 8 * v23)))
                      - v22));
  v25 = *(int *)(a1 + 36 + 4 * (v18 + v9));
  v26 = (float)((float)(v16 + -1.0) * *(float *)(a1 + 2092 + 8 * v25 + 4))
      + (float)(v17 * *(float *)(a1 + 2092 + 8 * v25));
  v27 = *(int *)(a1 + 36 + 4 * (v19 + v9));
  return v24
       + (float)((float)((float)(v16 * v16) * (float)((float)(v16 * -2.0) + 3.0))
               * (float)((float)(v26
                               + (float)(v20
                                       * (float)((float)((float)((float)(v16 + -1.0)
                                                               * *(float *)(a1 + 2092 + 8 * v27 + 4))
                                                       + (float)((float)(v17 + -1.0) * *(float *)(a1 + 2092 + 8 * v27)))
                                               - v26)))
                       - v24));
}

uint64_t WebCore::FETurbulenceSoftwareApplier::calculateTurbulenceValueForPoint(unsigned __int8 *a1, unint64_t a2, unint64_t a3, float a4, float a5, double a6, double a7, __n128 a8)
{
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  float v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  float v18;
  float v19;
  float v20;
  float v21;
  __int32 v22;
  float32x2_t v23;
  float v24;
  __int32 v25;
  float32x2_t v26;
  float v27;
  float v28;
  float v29;
  __int32 v30;
  float32x2_t v31;
  float v32;
  float v33;
  __int32 v34;
  float32x2_t v35;
  float v36;
  double v37;
  float v38;
  int v39;
  int8x8_t v40;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  unint64_t v46;
  unint64_t v47;

  v46 = a2;
  v47 = a3;
  v8 = *((_DWORD *)a1 + 3);
  v9 = *a1;
  if (v8 < 1)
  {
    v17 = 0.0;
    v19 = 0.0;
    v18 = 0.0;
  }
  else
  {
    v10 = a3;
    v11 = a2;
    v13 = *((float *)a1 + 1) * a4;
    v14 = *((float *)a1 + 2) * a5;
    v15 = HIDWORD(a2);
    v16 = HIDWORD(a3);
    v17 = 0.0;
    v18 = 0.0;
    a8.n128_u32[0] = 1.0;
    v19 = 0.0;
    if (v9 == 1)
    {
      if (a1[24])
      {
        do
        {
          v42 = a8;
          v20 = WebCore::FETurbulenceSoftwareApplier::noise2D((uint64_t)a1, (int *)&v46, v13, v14);
          a8 = v42;
          v23.i32[1] = v22;
          v18 = v18 + (float)(v20 / v42.n128_f32[0]);
          v17 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v17, vdiv_f32(v23, (float32x2_t)vdup_lane_s32((int32x2_t)v42.n128_u64[0], 0))));
          v19 = v19 + (float)(v21 / v42.n128_f32[0]);
          v13 = v13 + v13;
          v14 = v14 + v14;
          a8.n128_f32[0] = a8.n128_f32[0] + a8.n128_f32[0];
          v11 *= 2;
          LODWORD(v15) = 2 * v15 - 4096;
          v46 = __PAIR64__(v15, v11);
          v10 *= 2;
          LODWORD(v16) = 2 * v16 - 4096;
          v47 = __PAIR64__(v16, v10);
          --v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v43 = a8;
          v24 = WebCore::FETurbulenceSoftwareApplier::noise2D((uint64_t)a1, (int *)&v46, v13, v14);
          a8 = v43;
          v26.i32[1] = v25;
          v18 = v18 + (float)(v24 / v43.n128_f32[0]);
          v17 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v17, vdiv_f32(v26, (float32x2_t)vdup_lane_s32((int32x2_t)v43.n128_u64[0], 0))));
          v19 = v19 + (float)(v27 / v43.n128_f32[0]);
          v13 = v13 + v13;
          v14 = v14 + v14;
          a8.n128_f32[0] = a8.n128_f32[0] + a8.n128_f32[0];
          --v8;
        }
        while (v8);
      }
    }
    else if (a1[24])
    {
      do
      {
        v44 = a8;
        v28 = WebCore::FETurbulenceSoftwareApplier::noise2D((uint64_t)a1, (int *)&v46, v13, v14);
        a8 = v44;
        v31.i32[1] = v30;
        v18 = v18 + (float)(fabsf(v28) / v44.n128_f32[0]);
        v17 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v17, vdiv_f32(vabs_f32(v31), (float32x2_t)vdup_lane_s32((int32x2_t)v44.n128_u64[0], 0))));
        v19 = v19 + (float)(fabsf(v29) / v44.n128_f32[0]);
        v13 = v13 + v13;
        v14 = v14 + v14;
        a8.n128_f32[0] = a8.n128_f32[0] + a8.n128_f32[0];
        v11 *= 2;
        LODWORD(v15) = 2 * v15 - 4096;
        v46 = __PAIR64__(v15, v11);
        v10 *= 2;
        LODWORD(v16) = 2 * v16 - 4096;
        v47 = __PAIR64__(v16, v10);
        --v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v45 = a8;
        v32 = WebCore::FETurbulenceSoftwareApplier::noise2D((uint64_t)a1, (int *)&v46, v13, v14);
        a8 = v45;
        v35.i32[1] = v34;
        v18 = v18 + (float)(fabsf(v32) / v45.n128_f32[0]);
        v17 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v17, vdiv_f32(vabs_f32(v35), (float32x2_t)vdup_lane_s32((int32x2_t)v45.n128_u64[0], 0))));
        v19 = v19 + (float)(fabsf(v33) / v45.n128_f32[0]);
        v13 = v13 + v13;
        v14 = v14 + v14;
        a8.n128_f32[0] = a8.n128_f32[0] + a8.n128_f32[0];
        --v8;
      }
      while (v8);
    }
  }
  v36 = (float)(v18 * 0.5) + 0.5;
  v37 = COERCE_DOUBLE(vadd_f32(vmul_f32(*(float32x2_t *)&v17, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000));
  v38 = (float)(v19 * 0.5) + 0.5;
  if (v9 != 1)
  {
    v38 = v19;
    v36 = v18;
    v37 = v17;
  }
  v39 = (int)(float)(v38 * 255.0);
  v40 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vcvt_s32_f32(vmul_f32(*(float32x2_t *)&v37, (float32x2_t)vdup_n_s32(0x437F0000u))), (uint32x2_t)0x800000010), (int8x8_t)0xFF0000FF0000);
  return v40.i32[0] | (v39 << 24) | (int)(float)(v36 * 255.0) | v40.i32[1];
}

uint64_t WebCore::FETurbulenceSoftwareApplier::applyPlatformWorker(uint64_t result, double a2, double a3, double a4, double a5, __n128 a6)
{
  int v6;
  int v7;
  int *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  unint64_t v16;
  float v17;
  int v18;
  float v19;

  v6 = *(_DWORD *)(result + 56);
  v7 = *(_DWORD *)(result + 60);
  if (v6 < v7)
  {
    v8 = (int *)result;
    v9 = *(_DWORD *)(result + 8);
    if (v9 >= 1)
    {
      v11 = *(_QWORD *)(result + 24);
      v10 = *(unsigned __int8 **)(result + 32);
      v12 = *(_QWORD *)(result + 40);
      v13 = *(_QWORD *)(result + 48);
      LODWORD(a4) = *(_DWORD *)(result + 20);
      v14 = 1.0 / *(float *)(result + 16);
      v15 = (float)(*(_DWORD *)(result + 4) + v6);
      LODWORD(v16) = 4 * v6 * v9;
      v17 = 1.0 / *(float *)&a4;
      do
      {
        v15 = v15 + 1.0;
        if (v9 >= 1)
        {
          v18 = 0;
          v19 = (float)*v8;
          v16 = (int)v16;
          do
          {
            v19 = v19 + 1.0;
            result = WebCore::FETurbulenceSoftwareApplier::calculateTurbulenceValueForPoint(v10, v12, v13, v14 * v19, v17 * v15, a4, a5, a6);
            if (v16 < 0xFFFFFFFFFFFFFFFCLL && v16 + 4 <= *(_QWORD *)(v11 + 48))
            {
              *(_DWORD *)(*(_QWORD *)(v11 + 40) + v16) = result;
              v9 = v8[2];
            }
            v16 += 4;
            ++v18;
          }
          while (v18 < v9);
        }
        ++v6;
      }
      while (v6 != v7);
    }
  }
  return result;
}

WebCore::PixelBuffer *WebCore::FETurbulenceSoftwareApplier::apply(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::PixelBuffer *result;
  WebCore::PixelBuffer *v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  float v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  char v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  unsigned __int8 *v46;
  float v47;
  uint64_t j;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  unsigned __int8 *v56;
  float v57;
  uint64_t k;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  unsigned __int8 *v66;
  float v67;
  uint64_t m;
  uint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  unsigned __int8 *v76;
  float v77;
  double v78;
  double v79;
  __n128 v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  float v90;
  float v91;
  size_t v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  int v96;
  char *v97;
  NSObject *global_queue;
  void *v99;
  WTF *v100;
  unint64_t v101;
  int v102;
  float v103;
  float v104;
  int v105;
  int v106;
  float v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  WebCore::PixelBuffer *v114;
  unsigned __int8 v115[4];
  float v116;
  float v117;
  int v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  _DWORD v122[4627];
  _QWORD v123[2];
  int v124;
  WTF *v125;
  int v126;
  int v127;
  _QWORD block[7];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v7 = v2;
  result = WebCore::FilterImage::pixelBuffer(v3, 1);
  v9 = result;
  if (!result)
    return (WebCore::PixelBuffer *)(v9 != 0);
  v10 = *(_QWORD *)((char *)v4 + 44);
  if ((v10 & 0x80000000) == 0)
    v11 = *(_QWORD *)((char *)v4 + 44);
  else
    v11 = -(int)v10;
  if ((v10 & 0x8000000000000000) == 0)
    v12 = HIDWORD(*(_QWORD *)((char *)v4 + 44));
  else
    v12 = -HIDWORD(v10);
  v13 = v12 * (unint64_t)v11;
  if ((v13 & 0xFFFFFFFF00000000) == 0)
  {
    if ((int)v10 >= 1 && SHIDWORD(v10) > 0)
    {
      v15 = roundf(*((float *)v4 + 3));
      if (v15 >= 2147500000.0)
      {
        v16 = 0x7FFFFFFFLL;
      }
      else if (v15 <= -2147500000.0)
      {
        v16 = 0x80000000;
      }
      else
      {
        v16 = (int)v15;
      }
      v17 = roundf(*((float *)v4 + 4));
      v112 = HIDWORD(v10);
      if (v17 >= 2147500000.0)
      {
        v18 = 0x7FFFFFFF00000000;
      }
      else if (v17 <= -2147500000.0)
      {
        v18 = 0x8000000000000000;
      }
      else
      {
        v18 = (unint64_t)(int)v17 << 32;
      }
      v19 = v18 | v16;
      v20 = *(_QWORD *)(v7 + 8);
      v21 = *(float *)(v20 + 68);
      v22 = *(float *)(v20 + 72);
      v23 = *(_BYTE *)(v20 + 84);
      v113 = *(_QWORD *)((char *)v4 + 44);
      v110 = v13;
      v111 = v6;
      if (v23)
      {
        v24 = HIDWORD(v18);
        v25 = (float)(int)v16;
        if (v21 != 0.0)
        {
          v26 = floorf(v21 * v25) / v25;
          v27 = ceilf(v21 * v25) / v25;
          if ((float)(v21 / v26) >= (float)(v27 / v21))
            v21 = v27;
          else
            v21 = v26;
        }
        v28 = (float)(int)v24;
        if (v22 != 0.0)
        {
          v29 = floorf(v22 * v28) / v28;
          v30 = ceilf(v22 * v28) / v28;
          if ((float)(v22 / v29) >= (float)(v30 / v22))
            v22 = v30;
          else
            v22 = v29;
        }
        LODWORD(v16) = llroundf(v21 * v25);
        LODWORD(v10) = llroundf(v22 * v28);
        v31 = v10 | ((unint64_t)(v10 + 4096) << 32);
        v32 = v16 | ((unint64_t)(v16 + 4096) << 32);
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
      v33 = *(_QWORD *)((char *)v4 + 36);
      v34 = *(_BYTE *)(v20 + 64);
      v35 = *(_DWORD *)(v20 + 76);
      v36 = (uint64_t)*(float *)(v20 + 80);
      bzero(v115, 0x4870uLL);
      v115[0] = v34;
      v116 = v21;
      v117 = v22;
      v118 = v35;
      v120 = v23;
      v121 = v19;
      v114 = v9;
      v109 = v33;
      if (v36 <= 0)
      {
        v37 = -v36 % 0x7FFFFFFEuLL + 1;
      }
      else
      {
        v37 = 2147483646;
        if ((unint64_t)v36 <= 0x7FFFFFFE)
        {
LABEL_37:
          for (i = 0; i != 256; ++i)
          {
            v122[i] = i;
            do
            {
              v39 = 16807 * (v36 % 127773) - 2836 * (v36 / 127773);
              if (v39 < 1)
                v39 += 0x7FFFFFFFLL;
              v40 = v39 & 0x1FF;
              if (v39 <= 0)
                v40 = -(-v39 & 0x1FF);
              v41 = (float)(v40 - 256) * 0.0039062;
              v42 = 16807 * (v39 % 127773) - 2836 * (v39 / 127773);
              if (v42 >= 1)
                v36 = v42;
              else
                v36 = v42 + 0x7FFFFFFF;
              v43 = v36 & 0x1FF;
              if (v36 <= 0)
                v43 = -(-v36 & 0x1FF);
              v44 = v43 - 256;
              v45 = (float)v44 * 0.0039062;
            }
            while (v41 == 0.0 && v45 == 0.0);
            v46 = &v115[8 * i];
            v47 = hypotf((float)(v40 - 256) * 0.0039062, (float)v44 * 0.0039062);
            *((float *)v46 + 523) = v41 / v47;
            *((float *)v46 + 524) = v45 / v47;
          }
          for (j = 0; j != 256; ++j)
          {
            v122[j] = j;
            do
            {
              v49 = 16807 * (v36 % 127773) - 2836 * (v36 / 127773);
              if (v49 < 1)
                v49 += 0x7FFFFFFFLL;
              v50 = v49 & 0x1FF;
              if (v49 <= 0)
                v50 = -(-v49 & 0x1FF);
              v51 = (float)(v50 - 256) * 0.0039062;
              v52 = 16807 * (v49 % 127773) - 2836 * (v49 / 127773);
              if (v52 >= 1)
                v36 = v52;
              else
                v36 = v52 + 0x7FFFFFFF;
              v53 = v36 & 0x1FF;
              if (v36 <= 0)
                v53 = -(-v36 & 0x1FF);
              v54 = v53 - 256;
              v55 = (float)v54 * 0.0039062;
            }
            while (v51 == 0.0 && v55 == 0.0);
            v56 = &v115[8 * j];
            v57 = hypotf((float)(v50 - 256) * 0.0039062, (float)v54 * 0.0039062);
            *((float *)v56 + 1551) = v51 / v57;
            *((float *)v56 + 1552) = v55 / v57;
          }
          for (k = 0; k != 256; ++k)
          {
            v122[k] = k;
            do
            {
              v59 = 16807 * (v36 % 127773) - 2836 * (v36 / 127773);
              if (v59 < 1)
                v59 += 0x7FFFFFFFLL;
              v60 = v59 & 0x1FF;
              if (v59 <= 0)
                v60 = -(-v59 & 0x1FF);
              v61 = (float)(v60 - 256) * 0.0039062;
              v62 = 16807 * (v59 % 127773) - 2836 * (v59 / 127773);
              if (v62 >= 1)
                v36 = v62;
              else
                v36 = v62 + 0x7FFFFFFF;
              v63 = v36 & 0x1FF;
              if (v36 <= 0)
                v63 = -(-v36 & 0x1FF);
              v64 = v63 - 256;
              v65 = (float)v64 * 0.0039062;
            }
            while (v61 == 0.0 && v65 == 0.0);
            v66 = &v115[8 * k];
            v67 = hypotf((float)(v60 - 256) * 0.0039062, (float)v64 * 0.0039062);
            *((float *)v66 + 2579) = v61 / v67;
            *((float *)v66 + 2580) = v65 / v67;
          }
          for (m = 0; m != 256; ++m)
          {
            v122[m] = m;
            do
            {
              v69 = 16807 * (v36 % 127773) - 2836 * (v36 / 127773);
              if (v69 < 1)
                v69 += 0x7FFFFFFFLL;
              v70 = v69 & 0x1FF;
              if (v69 <= 0)
                v70 = -(-v69 & 0x1FF);
              v71 = (float)(v70 - 256) * 0.0039062;
              v72 = 16807 * (v69 % 127773) - 2836 * (v69 / 127773);
              if (v72 >= 1)
                v36 = v72;
              else
                v36 = v72 + 0x7FFFFFFF;
              v73 = v36 & 0x1FF;
              if (v36 <= 0)
                v73 = -(-v36 & 0x1FF);
              v74 = v73 - 256;
              v75 = (float)v74 * 0.0039062;
            }
            while (v71 == 0.0 && v75 == 0.0);
            v76 = &v115[8 * m];
            v77 = hypotf((float)(v70 - 256) * 0.0039062, (float)v74 * 0.0039062);
            *((float *)v76 + 3607) = v71 / v77;
            *((float *)v76 + 3608) = v75 / v77;
          }
          v81 = 264;
          do
          {
            v82 = *(_DWORD *)&v115[4 * v81];
            v83 = 16807 * (v36 % 127773) - 2836 * (v36 / 127773);
            if (v83 >= 1)
              v36 = 16807 * (v36 % 127773) - 2836 * (v36 / 127773);
            else
              v36 = v83 + 0x7FFFFFFF;
            v84 = v36;
            if (v36 <= 0)
              v84 = -(uint64_t)-(char)v36;
            v85 = &v115[4 * v84];
            *(_DWORD *)&v115[4 * v81] = *((_DWORD *)v85 + 9);
            *((_DWORD *)v85 + 9) = v82;
            v86 = v81 - 9;
            --v81;
          }
          while (v86 > 1);
          v87 = 0;
          v119 = v36;
          v88 = 1035;
          do
          {
            v122[v87 + 256] = v122[v87];
            v89 = &v115[v88 * 4];
            *(_QWORD *)v89 = *(_QWORD *)&v122[2 * v87 + 514];
            *((_QWORD *)v89 + 514) = *(_QWORD *)&v122[v88 + 507];
            *((_QWORD *)v89 + 1028) = *(_QWORD *)&v122[v88 + 1535];
            *((_QWORD *)v89 + 1542) = *(_QWORD *)&v122[v88 + 2563];
            ++v87;
            v88 += 2;
          }
          while (v87 != 258);
          v91 = *(float *)(v111 + 52);
          v90 = *(float *)(v111 + 56);
          if ((int)v112 / 8 >= v110 / 0x2710)
            v92 = v110 / 0x2710;
          else
            v92 = ((int)v112 / 8);
          if (v92 < 2)
          {
            LODWORD(v101) = 0;
            v102 = 0;
            v103 = (float)SHIDWORD(v33);
            v104 = 1.0 / v91;
            v9 = v114;
            if ((int)v113 <= 1)
              v105 = 1;
            else
              v105 = v113;
            do
            {
              v103 = v103 + 1.0;
              v101 = (int)v101;
              v106 = v105;
              v107 = (float)v109;
              do
              {
                v107 = v107 + 1.0;
                v108 = WebCore::FETurbulenceSoftwareApplier::calculateTurbulenceValueForPoint(v115, v32, v31, v104 * v107, (float)(1.0 / v90) * v103, v78, v79, v80);
                if (v101 < 0xFFFFFFFFFFFFFFFCLL && v101 + 4 <= *((_QWORD *)v114 + 6))
                  *(_DWORD *)(*((_QWORD *)v114 + 5) + v101) = v108;
                v101 += 4;
                --v106;
              }
              while (v106);
              ++v102;
            }
            while (v102 != (_DWORD)v112);
          }
          else
          {
            v123[0] = WebCore::FETurbulenceSoftwareApplier::applyPlatformWorker;
            v123[1] = 64;
            v124 = v92;
            if (v92 <= 0x10)
              v93 = 16;
            else
              v93 = v92;
            v94 = (char *)WTF::fastMalloc((WTF *)(v93 << 6));
            v126 = v93;
            v125 = (WTF *)v94;
            bzero(v94, (unint64_t)v92 << 6);
            v95 = 0;
            v96 = 0;
            v127 = v92;
            v9 = v114;
            v97 = v94 + 32;
            do
            {
              *((_QWORD *)v97 - 4) = v33;
              *((_QWORD *)v97 - 3) = v113;
              *((float *)v97 - 4) = v91;
              *((float *)v97 - 3) = v90;
              *((_QWORD *)v97 - 1) = v114;
              *(_QWORD *)v97 = v115;
              *((_QWORD *)v97 + 1) = v32;
              *((_QWORD *)v97 + 2) = v31;
              *((_DWORD *)v97 + 6) = v96;
              v96 += (v113 >> 32) / v92;
              if (v95 < (v113 >> 32) % v92)
                ++v96;
              ++v95;
              *((_DWORD *)v97 + 7) = v96;
              v97 += 64;
            }
            while (v92 != v95);
            if ((byte_1ECE83FE8 & 1) != 0)
            {
              global_queue = _MergedGlobals_234;
            }
            else
            {
              global_queue = dispatch_get_global_queue(0, 0);
              _MergedGlobals_234 = (uint64_t)global_queue;
              byte_1ECE83FE8 = 1;
            }
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 0x40000000;
            block[2] = ___ZN3WTF19ParallelEnvironment7executeEPh_block_invoke;
            block[3] = &__block_descriptor_tmp_11;
            block[4] = v123;
            block[5] = v94;
            dispatch_apply(v92, global_queue, block);
            v100 = v125;
            if (v125)
            {
              v125 = 0;
              v126 = 0;
              WTF::fastFree(v100, v99);
            }
          }
          return (WebCore::PixelBuffer *)(v9 != 0);
        }
      }
      v119 = v37;
      v36 = v37;
      goto LABEL_37;
    }
    bzero(*((void **)result + 5), *((_QWORD *)result + 6));
    return (WebCore::PixelBuffer *)(v9 != 0);
  }
  __break(0xC471u);
  return result;
}

void WebCore::SourceAlphaSoftwareApplier::apply(int a1, int a2, uint64_t a3, WebCore::FilterImage *this)
{
  WebCore::FilterImage *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  float v13;
  float v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;

  if (*(_DWORD *)(a3 + 12))
  {
    v5 = **(WebCore::FilterImage ***)a3;
    v6 = WebCore::FilterImage::imageBuffer(this);
    if (v6)
    {
      v7 = v6;
      v8 = (unsigned __int8 **)(v6 + 8);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v6 + 8));
      v9 = WebCore::FilterImage::imageBuffer(v5);
      if (v9)
      {
        v11 = v9;
        v12 = (unsigned __int8 **)(v9 + 8);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v9 + 8));
        v13 = (float)*((int *)this + 11);
        v14 = (float)*((int *)this + 12);
        v22 = 0;
        v23 = v13;
        v24 = v14;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        v21 = 0x11040000000000FFLL;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 224))(v15, &v22, &v21);
        if ((v21 & 0x8000000000000) != 0)
        {
          v18 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            atomic_store(1u, v18);
            WTF::fastFree((WTF *)v18, v16);
          }
        }
        v21 = 0;
        WebCore::GraphicsContext::drawImageBuffer(v15, v11, &v21);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v12, v17);
      }
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v8, v10);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t ___ZN3WTF19ParallelEnvironment7executeEPh_block_invoke(uint64_t a1, uint64_t a2)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 40) + *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                               * a2);
}

char *WTF::Vector<WebCore::ColorComponents<unsigned char,4ul>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  WTF *v21;
  uint64_t v22;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 4 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v21 = *(WTF **)a1;
        return (char *)v21 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
      if (v10 < 0x11)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_34;
      }
      if (!(v10 >> 30))
      {
        v11 = WTF::fastMalloc((WTF *)(4 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_34:
        v22 = 0;
        do
        {
          *(_DWORD *)(v11 + v22) = *(_DWORD *)((char *)v5 + v22);
          v22 += 4;
        }
        while (4 * v6 != v22);
        v21 = *(WTF **)a1;
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (v21 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
          v21 = *(WTF **)a1;
        }
        return (char *)v21 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x19626A420);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x11)
    {
      v17 = (_DWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 30)
        goto LABEL_43;
      v17 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = 4 * v16;
    v19 = v5;
    do
    {
      v20 = *(_DWORD *)v19;
      v19 = (WTF *)((char *)v19 + 4);
      *v17++ = v20;
      v18 -= 4;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return (char *)v3;
}

void WebCore::SourceGraphicSoftwareApplier::apply(int a1, int a2, uint64_t a3, WebCore::FilterImage *this)
{
  WebCore::FilterImage *v4;
  uint64_t v5;
  unsigned __int8 **v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int32x2_t v13;
  float32x2_t v14;

  if (*(_DWORD *)(a3 + 12))
  {
    v4 = **(WebCore::FilterImage ***)a3;
    v5 = WebCore::FilterImage::imageBuffer(this);
    if (v5)
    {
      v6 = (unsigned __int8 **)v5;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 8));
      v7 = WebCore::FilterImage::imageBuffer(v4);
      v9 = v7;
      if (v7)
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v7 + 8));
        v10 = (*((uint64_t (**)(unsigned __int8 **))*v6 + 2))(v6);
        v13 = 0;
        WebCore::FloatPoint::FloatPoint(&v14, &v13);
        WebCore::GraphicsContext::drawImageBuffer(v10, v9, (uint64_t *)&v14);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v9 + 8), v11);
      }
      goto LABEL_5;
    }
    v12 = WebCore::FilterImage::imageBuffer(v4);
    if (v12)
    {
      v6 = (unsigned __int8 **)v12;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v12 + 8));
LABEL_5:
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v6 + 1, v8);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebCore::ISOBox::ISOBox(uint64_t this)
{
  *(_QWORD *)this = off_1E3416B60;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1E3416B60;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

void WebCore::ISOBox::~ISOBox(WebCore::ISOBox *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

WebCore::ISOBox *WebCore::ISOBox::ISOBox(WebCore::ISOBox *this, const WebCore::ISOBox *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v6;

  *(_QWORD *)this = off_1E3416B60;
  v3 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v3;
  v4 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v4;
  if ((_DWORD)v4)
  {
    v6 = (void *)WTF::fastMalloc(v4);
    *((_DWORD *)this + 8) = (_DWORD)v4;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  return this;
}

{
  uint64_t v3;
  WTF *v4;
  void *v6;

  *(_QWORD *)this = off_1E3416B60;
  v3 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v3;
  v4 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v4;
  if ((_DWORD)v4)
  {
    v6 = (void *)WTF::fastMalloc(v4);
    *((_DWORD *)this + 8) = (_DWORD)v4;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  return this;
}

unint64_t WebCore::ISOBox::peekBox@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6
    || (v7 = *(_QWORD *)(v6 + 16)) == 0
    || (v8 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0
    && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
    && !((v7 & 0x3FFFFFFFFLL) + v8))
  {
LABEL_36:
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  v9 = *(_BYTE *)(a1 + 6);
  if ((v9 & 3) != 0)
  {
    if (*(_BYTE *)(v6 + 64) && (v21 = *(_QWORD *)(v6 + 32)) != 0)
    {
      v16 = atomic_load((unint64_t *)(v21 + 32));
      v9 = *(_BYTE *)(a1 + 6);
    }
    else
    {
      v16 = *(_QWORD *)(v6 + 48);
    }
    v17 = *(_QWORD *)(a1 + 8);
    if ((v9 & 4) == 0)
    {
      v18 = *(_QWORD *)(a1 + 16) + v17 <= v16 && v16 >= v17;
      if (v18)
        LODWORD(v10) = 0;
      else
        v10 = *(_QWORD *)(a1 + 16);
      goto LABEL_8;
    }
    v18 = v16 >= v17;
    v19 = v16 - v17;
    if (!v18)
    {
      if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
        LOBYTE(v20) = 0;
      else
        v20 = qword_1969F8CD0[(char)(*(_BYTE *)(a1 + 4) - 4)];
      v10 = (-1 << v20) & v19;
      goto LABEL_8;
    }
    goto LABEL_36;
  }
  v10 = *(_QWORD *)(a1 + 16);
LABEL_8:
  v22 = 0;
  result = JSC::DataView::get<unsigned int>(a1, a2, 0, &v22);
  v12 = v22;
  if (!v22)
    goto LABEL_16;
  if (a2 >= 0xFFFFFFFC)
  {
    __break(0xC471u);
    JUMPOUT(0x19626A888);
  }
  v13 = result;
  v23 = 0;
  result = JSC::DataView::get<unsigned int>(a1, a2 + 4, 0, &v23);
  v12 = v23;
  if (!v23)
    goto LABEL_16;
  if (a2 >= 0xFFFFFFF8)
  {
    __break(0xC471u);
    JUMPOUT(0x19626A8A8);
  }
  v14 = result;
  if (v13 == 1)
  {
    v24 = 0;
    result = JSC::DataView::get<unsigned long long>(a1, a2 + 8, &v24);
    v12 = v24;
    if (v24)
    {
      if (a2 > 0xFFFFFFEF)
      {
        __break(0xC471u);
        JUMPOUT(0x19626A7F8);
      }
      goto LABEL_18;
    }
LABEL_16:
    *(_BYTE *)a3 = 0;
    goto LABEL_21;
  }
  result = v13;
LABEL_18:
  v15 = v10 - a2;
  if (result - 1 < v15)
    v15 = result;
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v15;
  v12 = 1;
LABEL_21:
  *(_BYTE *)(a3 + 16) = v12;
  return result;
}

uint64_t WebCore::ISOBox::read(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 16))(a1, a2, &v3);
}

uint64_t WebCore::ISOBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  _QWORD *v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;

  v6 = *(_QWORD *)(a2 + 32);
  v7 = MEMORY[0x1E0CC10F8];
  if (!v6
    || (v8 = *(_QWORD *)(v6 + 16)) == 0
    || (v9 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0
    && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
    && !((v8 & 0x3FFFFFFFFLL) + v9))
  {
LABEL_47:
    LODWORD(v11) = 0;
    goto LABEL_8;
  }
  v10 = *(_BYTE *)(a2 + 6);
  if ((v10 & 3) != 0)
  {
    if (*(_BYTE *)(v6 + 64) && (v44 = *(_QWORD *)(v6 + 32)) != 0)
    {
      v28 = atomic_load((unint64_t *)(v44 + 32));
      v10 = *(_BYTE *)(a2 + 6);
    }
    else
    {
      v28 = *(_QWORD *)(v6 + 48);
    }
    v29 = *(_QWORD *)(a2 + 8);
    if ((v10 & 4) == 0)
    {
      v30 = *(_QWORD *)(a2 + 16) + v29 <= v28 && v28 >= v29;
      if (v30)
        LODWORD(v11) = 0;
      else
        v11 = *(_QWORD *)(a2 + 16);
      goto LABEL_8;
    }
    v30 = v28 >= v29;
    v31 = v28 - v29;
    if (!v30)
    {
      if ((*(_BYTE *)(a2 + 4) - 4) > 7u)
        LOBYTE(v32) = 0;
      else
        v32 = qword_1969F8CD0[(char)(*(_BYTE *)(a2 + 4) - 4)];
      v11 = (-1 << v32) & v31;
      goto LABEL_8;
    }
    goto LABEL_47;
  }
  v11 = *(_QWORD *)(a2 + 16);
LABEL_8:
  v12 = *a3;
  v46 = 0;
  v13 = JSC::DataView::get<unsigned int>(a2, v12, 0, &v46);
  if (!v46)
  {
    result = 0;
    *a3 = v12;
    return result;
  }
  if (v12 >= 0xFFFFFFFC)
  {
    __break(0xC471u);
    JUMPOUT(0x19626AB6CLL);
  }
  v14 = v12 + 4;
  *a3 = v12 + 4;
  *(_QWORD *)(a1 + 8) = v13;
  v47 = 0;
  v15 = JSC::DataView::get<unsigned int>(a2, v12 + 4, 0, &v47);
  if (!v47)
    goto LABEL_29;
  if (v12 >= 0xFFFFFFF8)
  {
    __break(0xC471u);
    JUMPOUT(0x19626AB8CLL);
  }
  *a3 = v12 + 8;
  *(_DWORD *)(a1 + 16) = v15;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != 1)
    goto LABEL_16;
  v48 = 0;
  v14 = *a3;
  v16 = JSC::DataView::get<unsigned long long>(a2, *a3, &v48);
  if (!v48)
  {
LABEL_29:
    result = 0;
    *a3 = v14;
    return result;
  }
  if (v14 >= 0xFFFFFFF8)
  {
    __break(0xC471u);
    JUMPOUT(0x19626ABF8);
  }
  *a3 = v14 + 8;
  *(_QWORD *)(a1 + 8) = v16;
LABEL_16:
  v17 = (v11 - v12);
  if (v16 - 1 >= v17)
    *(_QWORD *)(a1 + 8) = v17;
  if (*(_DWORD *)(a1 + 16) == 1970628964)
  {
    v18 = *a3;
    v19 = *(_QWORD *)(a2 + 32);
    if (!v19)
      goto LABEL_27;
    v20 = *(_QWORD *)(v19 + 16);
    if (!v20)
      goto LABEL_27;
    v21 = *(_QWORD *)(v7 + 56);
    if (v21 && (*(_BYTE *)(v7 + 34) || !*MEMORY[0x1E0CC10F0]) && !((v20 & 0x3FFFFFFFFLL) + v21))
      goto LABEL_27;
    v22 = *(_BYTE *)(a2 + 6);
    if ((v22 & 3) != 0)
    {
      if (*(_BYTE *)(v19 + 64) && (v45 = *(_QWORD *)(v19 + 32)) != 0)
      {
        v33 = atomic_load((unint64_t *)(v45 + 32));
        v22 = *(_BYTE *)(a2 + 6);
      }
      else
      {
        v33 = *(_QWORD *)(v19 + 48);
      }
      v34 = *(_QWORD *)(a2 + 8);
      if ((v22 & 4) != 0)
      {
        v30 = v33 >= v34;
        v36 = v33 - v34;
        if (v30)
          goto LABEL_27;
        if ((*(_BYTE *)(a2 + 4) - 4) > 7u)
          LOBYTE(v37) = 0;
        else
          v37 = qword_1969F8CD0[(char)(*(_BYTE *)(a2 + 4) - 4)];
        v23 = (-1 << v37) & v36;
      }
      else
      {
        v23 = *(_QWORD *)(a2 + 16);
        if (v23 + v34 <= v33 && v33 >= v34)
          v23 = 0;
      }
    }
    else
    {
      v23 = *(_QWORD *)(a2 + 16);
    }
    v24 = v18 + 16;
    if (v18 + 16 > v23)
    {
LABEL_27:
      result = 0;
      *a3 = v18;
      return result;
    }
    v26 = *(_QWORD *)(v7 + 56);
    if (v26 && (*(_BYTE *)(v7 + 34) || !*MEMORY[0x1E0CC10F0]))
      v27 = (*(_QWORD *)(a2 + 24) & 0x3FFFFFFFFLL) + v26;
    else
      v27 = *(_QWORD *)(a2 + 24);
    if (v18 >= 0xFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x19626AD30);
    }
    v38 = (unint64_t *)(v27 + v18);
    v39 = bswap64(*v38);
    v40 = bswap64(v38[1]);
    *a3 = v24;
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v42 = v40;
    v42[1] = v39;
    v43 = *(WTF **)(a1 + 24);
    if (v43)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v43, v41);
    }
    *(_QWORD *)(a1 + 24) = v42;
    *(_QWORD *)(a1 + 32) = 0x1000000010;
  }
  return 1;
}

uint64_t WebCore::ISOFullBox::ISOFullBox(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E3416B88;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 40) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E3416B88;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 40) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

WebCore::ISOFullBox *WebCore::ISOFullBox::ISOFullBox(WebCore::ISOFullBox *this, const WebCore::ISOFullBox *a2)
{
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E3416B60;
  v4 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v4;
  v5 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *((_DWORD *)this + 8) = (_DWORD)v5;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  *(_QWORD *)this = off_1E3416B88;
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  return this;
}

{
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E3416B60;
  v4 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v4;
  v5 = (WTF *)*((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *((_DWORD *)this + 8) = (_DWORD)v5;
    *((_QWORD *)this + 3) = v6;
    memcpy(v6, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  *(_QWORD *)this = off_1E3416B88;
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  return this;
}

uint64_t WebCore::ISOFullBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  char v9;

  result = WebCore::ISOBox::parse(a1, a2, a3);
  if ((_DWORD)result)
  {
    v9 = 0;
    v7 = *a3;
    v8 = JSC::DataView::get<unsigned int>(a2, *a3, 0, &v9);
    if (v9)
    {
      if (v7 >= 0xFFFFFFFC)
      {
        result = 72;
        __break(0xC471u);
      }
      else
      {
        *a3 = v7 + 4;
        *(_BYTE *)(a1 + 40) = HIBYTE(v8);
        *(_DWORD *)(a1 + 44) = v8 & 0xFFFFFF;
        return 1;
      }
    }
    else
    {
      result = 0;
      *a3 = v7;
    }
  }
  return result;
}

uint64_t WebCore::ISOOriginalFormatBox::ISOOriginalFormatBox(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E3416BB0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E3416BB0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

void WebCore::ISOOriginalFormatBox::~ISOOriginalFormatBox(WebCore::ISOOriginalFormatBox *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ISOOriginalFormatBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  char v9;

  result = WebCore::ISOBox::parse(a1, a2, a3);
  if ((_DWORD)result)
  {
    v9 = 0;
    v7 = *a3;
    v8 = JSC::DataView::get<unsigned int>(a2, *a3, 0, &v9);
    result = v9 != 0;
    if (v9)
    {
      if (v7 >= 0xFFFFFFFC)
      {
        result = 72;
        __break(0xC471u);
      }
      else
      {
        *a3 = v7 + 4;
        *(_DWORD *)(a1 + 40) = v8;
      }
    }
    else
    {
      *a3 = v7;
    }
  }
  return result;
}

uint64_t WebCore::ISOProtectionSchemeInfoBox::ISOProtectionSchemeInfoBox(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E3416BD8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 40) = off_1E3416BB0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  return this;
}

{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E3416BD8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 40) = off_1E3416BB0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  return this;
}

void WebCore::ISOProtectionSchemeInfoBox::~ISOProtectionSchemeInfoBox(WebCore::ISOProtectionSchemeInfoBox *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;

  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)v3 = off_1E3416B60;
    v5 = *(WTF **)(v3 + 24);
    if (v5)
    {
      *(_QWORD *)(v3 + 24) = 0;
      *(_DWORD *)(v3 + 32) = 0;
      WTF::fastFree(v5, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
  {
    *(_QWORD *)v6 = off_1E3416B60;
    v7 = *(WTF **)(v6 + 24);
    if (v7)
    {
      *(_QWORD *)(v6 + 24) = 0;
      *(_DWORD *)(v6 + 32) = 0;
      WTF::fastFree(v7, a2);
    }
    WTF::fastFree((WTF *)v6, a2);
  }
  *((_QWORD *)this + 5) = off_1E3416B60;
  v8 = (WTF *)*((_QWORD *)this + 8);
  if (v8)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v8, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v9 = (WTF *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v9, a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::ISOProtectionSchemeInfoBox::~ISOProtectionSchemeInfoBox(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::ISOProtectionSchemeInfoBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  void *v11;
  void (**v12)(WebCore::ISOSchemeTypeBox *__hidden);
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void (**v18)(WebCore::ISOSchemeInformationBox *__hidden);
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  _DWORD v23[4];
  char v24;
  _DWORD v25[4];
  char v26;
  unsigned int v27;

  v27 = *a3;
  result = WebCore::ISOBox::parse(a1, a2, &v27);
  if ((_DWORD)result)
  {
    v7 = v27;
    v25[0] = v27;
    if (((*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, a2, v25) & 1) == 0)
      return 0;
    v8 = v7 + *(_DWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 8) == v8 - *a3)
    {
LABEL_4:
      *a3 = v8;
      return 1;
    }
    WebCore::ISOBox::peekBox(a2, v8, (uint64_t)v25);
    if (!v26)
      return 0;
    v9 = v25[0];
    if (v25[0] == 1935894637)
    {
      v10 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 0;
      v12 = off_1E3416C50;
      *(_QWORD *)v10 = off_1E3416C50;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 44) = 0;
      v13 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v10;
      if (v13)
      {
        *(_QWORD *)v13 = off_1E3416B60;
        v14 = *(WTF **)(v13 + 24);
        if (v14)
        {
          *(_QWORD *)(v13 + 24) = 0;
          *(_DWORD *)(v13 + 32) = 0;
          WTF::fastFree(v14, v11);
        }
        WTF::fastFree((WTF *)v13, v11);
        v15 = *(_QWORD *)(a1 + 88);
        v12 = *(void (***)(WebCore::ISOSchemeTypeBox *__hidden))v15;
      }
      else
      {
        v15 = v10;
      }
      v23[0] = v8;
      if ((((uint64_t (*)(uint64_t, uint64_t, _DWORD *))v12[2])(v15, a2, v23) & 1) == 0)
        return 0;
      v8 += *(_DWORD *)(v15 + 8);
      if (*(_QWORD *)(a1 + 8) == v8 - *a3)
        goto LABEL_4;
      WebCore::ISOBox::peekBox(a2, v8, (uint64_t)v23);
      if (!v24)
        return 0;
      v9 = v23[0];
    }
    if (v9 != 1935894633)
      goto LABEL_4;
    v16 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    v18 = off_1E3416C28;
    *(_QWORD *)v16 = off_1E3416C28;
    *(_QWORD *)(v16 + 8) = 0;
    v19 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v16;
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 40);
      *(_QWORD *)(v19 + 40) = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      *(_QWORD *)v19 = off_1E3416B60;
      v21 = *(WTF **)(v19 + 24);
      if (v21)
      {
        *(_QWORD *)(v19 + 24) = 0;
        *(_DWORD *)(v19 + 32) = 0;
        WTF::fastFree(v21, v17);
      }
      WTF::fastFree((WTF *)v19, v17);
      v22 = *(_QWORD *)(a1 + 96);
      v18 = *(void (***)(WebCore::ISOSchemeInformationBox *__hidden))v22;
    }
    else
    {
      v22 = v16;
    }
    v23[0] = v8;
    if ((((uint64_t (*)(uint64_t, uint64_t, _DWORD *))v18[2])(v22, a2, v23) & 1) != 0)
    {
      v8 += *(_DWORD *)(v22 + 8);
      if (*(_QWORD *)(a1 + 8) == v8 - *a3)
        goto LABEL_4;
    }
    return 0;
  }
  return result;
}

double WebCore::ISOProtectionSystemSpecificHeaderBox::ISOProtectionSystemSpecificHeaderBox(WebCore::ISOProtectionSystemSpecificHeaderBox *this)
{
  double result;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *(_QWORD *)this = off_1E3416C00;
  *((_QWORD *)this + 1) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return result;
}

{
  double result;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *(_QWORD *)this = off_1E3416C00;
  *((_QWORD *)this + 1) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return result;
}

void WebCore::ISOProtectionSystemSpecificHeaderBox::~ISOProtectionSystemSpecificHeaderBox(WebCore::ISOProtectionSystemSpecificHeaderBox *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;

  *(_QWORD *)this = off_1E3416C00;
  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 19);
  v5 = (WTF *)*((_QWORD *)this + 8);
  if ((_DWORD)v4)
  {
    v6 = 16 * v4;
    do
    {
      v7 = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        WTF::fastFree(v7, a2);
      }
      v5 = (WTF *)((char *)v5 + 16);
      v6 -= 16;
    }
    while (v6);
    v5 = (WTF *)*((_QWORD *)this + 8);
  }
  if (v5)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v5, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v8, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v9 = (WTF *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v9, a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::ISOProtectionSystemSpecificHeaderBox::~ISOProtectionSystemSpecificHeaderBox(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::ISOProtectionSystemSpecificHeaderBox::peekSystemID@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  BOOL v6;
  void *v7;
  void *v8;
  size_t v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  _QWORD v14[2];
  int v15;
  WTF *v16;
  uint64_t v17;
  char v18;
  int v19;
  void *__src[2];
  WTF *v21[2];
  WTF *v22[2];
  _DWORD v23[4];
  char v24;
  unsigned int v25;

  v25 = a2;
  result = WebCore::ISOBox::peekBox(a1, a2, (uint64_t)v23);
  if (v24)
    v6 = v23[0] == 1886614376;
  else
    v6 = 0;
  if (v6)
  {
    v15 = 0;
    v19 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v14[0] = off_1E3416C00;
    v14[1] = 0;
    *(_OWORD *)__src = 0u;
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)v22 = 0u;
    WebCore::ISOProtectionSystemSpecificHeaderBox::parse((uint64_t)v14, a1, &v25);
    v8 = 0;
    v9 = HIDWORD(__src[1]);
    if (HIDWORD(__src[1]))
    {
      v8 = (void *)WTF::fastMalloc((WTF *)HIDWORD(__src[1]));
      memcpy(v8, __src[0], v9);
    }
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 12) = v9;
    *(_BYTE *)(a3 + 16) = 1;
    if (v22[0])
      WTF::fastFree(v22[0], v7);
    v10 = v21[0];
    if (HIDWORD(v21[1]))
    {
      v11 = 16 * HIDWORD(v21[1]);
      v12 = v21[0];
      do
      {
        v13 = *(WTF **)v12;
        if (*(_QWORD *)v12)
        {
          *(_QWORD *)v12 = 0;
          *((_DWORD *)v12 + 2) = 0;
          WTF::fastFree(v13, v7);
        }
        v12 = (WTF *)((char *)v12 + 16);
        v11 -= 16;
      }
      while (v11);
    }
    if (v10)
      WTF::fastFree(v10, v7);
    if (__src[0])
      WTF::fastFree((WTF *)__src[0], v7);
    result = (uint64_t)v16;
    if (v16)
      return WTF::fastFree(v16, v7);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

BOOL WebCore::ISOProtectionSystemSpecificHeaderBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  WTF *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  WTF *v54;
  unint64_t v55;
  char *v56;
  size_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  void *v63;
  void *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  void *v71;
  WTF *v72;
  WTF *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  size_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v93;
  void *v94;
  WTF *v95;
  WTF *v96;
  uint64_t v97;
  void *v98;
  WTF *v99;
  WTF *v100;
  uint64_t v101;
  void *v102;
  WTF *v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;

  if (!WebCore::ISOBox::parse(a1, a2, a3))
    return 0;
  LOBYTE(v111) = 0;
  v6 = *a3;
  v7 = JSC::DataView::get<unsigned int>(a2, *a3, 0, &v111);
  if (!(_BYTE)v111)
  {
    v12 = 0;
    *a3 = v6;
    return v12;
  }
  if (v6 >= 0xFFFFFFFC)
    goto LABEL_194;
  *a3 = v6 + 4;
  *(_BYTE *)(a1 + 40) = HIBYTE(v7);
  *(_DWORD *)(a1 + 44) = v7 & 0xFFFFFF;
  v8 = *(_QWORD *)(a2 + 32);
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  v10 = MEMORY[0x1E0CC10F8];
  v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v11)
  {
    if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v9 & 0x3FFFFFFFFLL) + v11))
      return 0;
  }
  *(_DWORD *)v8 += 2;
  JSC::ArrayBuffer::slice((JSC::ArrayBuffer *)v8, (double)*a3, (double)(*a3 + 16));
  *a3 += 16;
  v13 = *(unsigned int *)(a1 + 60);
  if (v13 <= 0xF)
  {
    v14 = *(unsigned int *)(a1 + 56);
    if (v14 <= 0xF)
    {
      v15 = v14 + (v14 >> 2);
      v16 = 15;
      if (v15 > 0xF)
        v16 = v15;
      if (v15 >= 0x10)
        v17 = v16 + 1;
      else
        v17 = 16;
      v18 = *(void **)(a1 + 48);
      v19 = (void *)WTF::fastMalloc((WTF *)v17);
      *(_DWORD *)(a1 + 56) = v17;
      *(_QWORD *)(a1 + 48) = v19;
      memcpy(v19, v18, v13);
      if (v18)
      {
        if (*(void **)(a1 + 48) == v18)
        {
          *(_QWORD *)(a1 + 48) = 0;
          *(_DWORD *)(a1 + 56) = 0;
        }
        WTF::fastFree((WTF *)v18, v20);
      }
    }
  }
  *(_DWORD *)(a1 + 60) = 16;
  if (*(_BYTE *)(v110 + 64) && (v105 = *(_QWORD *)(v110 + 32)) != 0)
    v21 = *(_QWORD *)(v105 + 32);
  else
    v21 = *(_QWORD *)(v110 + 48);
  if (v21 < 0x10)
    goto LABEL_27;
  v22 = *(_QWORD *)(v110 + 16);
  v23 = *(_QWORD *)(v10 + 56);
  if (v23 && (*(_BYTE *)(v10 + 34) || !*MEMORY[0x1E0CC10F0]))
    v22 = (v22 & 0x3FFFFFFFFLL) + v23;
  *(_OWORD *)*(_QWORD *)(a1 + 48) = *(_OWORD *)v22;
  if (*(_BYTE *)(a1 + 40))
  {
    LOBYTE(v111) = 0;
    v24 = *a3;
    v25 = JSC::DataView::get<unsigned int>(a2, v24, 0, &v111);
    if (!(_BYTE)v111)
    {
LABEL_142:
      v12 = 0;
      *a3 = v24;
      goto LABEL_144;
    }
    if (v24 >= 0xFFFFFFFC)
    {
      __break(0xC471u);
      JUMPOUT(0x19626BEFCLL);
    }
    v27 = v25;
    *a3 = v24 + 4;
    if (*(_BYTE *)(v8 + 64) && (v106 = *(_QWORD *)(v8 + 32)) != 0)
      v28 = *(_QWORD *)(v106 + 32);
    else
      v28 = *(_QWORD *)(v8 + 48);
    if (v28 - (v24 + 4) < (unint64_t)(16 * v25))
      goto LABEL_27;
    v109 = (WTF *)(16 * v25);
    if (*(_DWORD *)(a1 + 72) < v25)
    {
      if (v25 >> 28
        || (v29 = *(WTF **)(a1 + 64), v30 = *(unsigned int *)(a1 + 76), WTF::tryFastMalloc(v109), (v31 = v111) == 0))
      {
LABEL_27:
        v12 = 0;
        goto LABEL_144;
      }
      *(_DWORD *)(a1 + 72) = v27;
      *(_QWORD *)(a1 + 64) = v31;
      if ((_DWORD)v30)
      {
        v32 = 16 * v30;
        v33 = (_DWORD *)((char *)v29 + 8);
        do
        {
          *(_QWORD *)v31 = 0;
          *(_QWORD *)(v31 + 8) = 0;
          v34 = *((_QWORD *)v33 - 1);
          *((_QWORD *)v33 - 1) = 0;
          *(_QWORD *)v31 = v34;
          LODWORD(v34) = *v33;
          *v33 = 0;
          *(_DWORD *)(v31 + 8) = v34;
          LODWORD(v34) = v33[1];
          v33[1] = 0;
          *(_DWORD *)(v31 + 12) = v34;
          v35 = (WTF *)*((_QWORD *)v33 - 1);
          if (v35)
          {
            *((_QWORD *)v33 - 1) = 0;
            *v33 = 0;
            WTF::fastFree(v35, v26);
          }
          v33 += 4;
          v31 += 16;
          v32 -= 16;
        }
        while (v32);
      }
      v10 = MEMORY[0x1E0CC10F8];
      if (v29)
      {
        if (*(WTF **)(a1 + 64) == v29)
        {
          *(_QWORD *)(a1 + 64) = 0;
          *(_DWORD *)(a1 + 72) = 0;
        }
        WTF::fastFree(v29, v26);
      }
    }
    v36 = *(unsigned int *)(a1 + 76);
    if (v36 < v27)
    {
      v37 = *(unsigned int *)(a1 + 72);
      if (v37 < v27)
      {
        v38 = v37 + (v37 >> 2);
        if (v38 >= 0x10)
          v39 = v38 + 1;
        else
          v39 = 16;
        if (v39 <= v27)
          v40 = v27;
        else
          v40 = v39;
        if (v40 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x19626C0C0);
        }
        v41 = *(WTF **)(a1 + 64);
        v42 = WTF::fastMalloc((WTF *)(16 * v40));
        *(_DWORD *)(a1 + 72) = v40;
        *(_QWORD *)(a1 + 64) = v42;
        if ((_DWORD)v36)
        {
          v44 = v42;
          v45 = 16 * v36;
          v46 = (_DWORD *)((char *)v41 + 8);
          do
          {
            *(_QWORD *)v44 = 0;
            *(_QWORD *)(v44 + 8) = 0;
            v47 = *((_QWORD *)v46 - 1);
            *((_QWORD *)v46 - 1) = 0;
            *(_QWORD *)v44 = v47;
            LODWORD(v47) = *v46;
            *v46 = 0;
            *(_DWORD *)(v44 + 8) = v47;
            LODWORD(v47) = v46[1];
            v46[1] = 0;
            *(_DWORD *)(v44 + 12) = v47;
            v48 = (WTF *)*((_QWORD *)v46 - 1);
            if (v48)
            {
              *((_QWORD *)v46 - 1) = 0;
              *v46 = 0;
              WTF::fastFree(v48, v43);
            }
            v46 += 4;
            v44 += 16;
            v45 -= 16;
          }
          while (v45);
        }
        v10 = MEMORY[0x1E0CC10F8];
        if (v41)
        {
          if (*(WTF **)(a1 + 64) == v41)
          {
            *(_QWORD *)(a1 + 64) = 0;
            *(_DWORD *)(a1 + 72) = 0;
          }
          WTF::fastFree(v41, v43);
        }
      }
      v49 = *(_QWORD *)(a1 + 64);
      if (v49)
      {
        v50 = *(unsigned int *)(a1 + 76);
        if ((_DWORD)v50 != v27)
          bzero((void *)(v49 + 16 * v50), (16 * v27 - 16 * v50) & 0xFFFFFFFFFFFFFFF0);
      }
      *(_DWORD *)(a1 + 76) = v27;
LABEL_77:
      v54 = 0;
      v55 = 0;
      do
      {
        if (v55 >= *(unsigned int *)(a1 + 76))
        {
          __break(0xC471u);
          JUMPOUT(0x19626C0A8);
        }
        v56 = (char *)v54 + *(_QWORD *)(a1 + 64);
        v57 = *((unsigned int *)v56 + 3);
        if (v57 <= 0xF)
        {
          v58 = *((unsigned int *)v56 + 2);
          if (v58 <= 0xF)
          {
            v59 = v58 + (v58 >> 2);
            v60 = 15;
            if (v59 > 0xF)
              v60 = v59;
            if (v59 >= 0x10)
              v61 = v60 + 1;
            else
              v61 = 16;
            v62 = *(_OWORD **)v56;
            v63 = (void *)WTF::fastMalloc((WTF *)v61);
            *((_DWORD *)v56 + 2) = v61;
            v10 = MEMORY[0x1E0CC10F8];
            *(_QWORD *)v56 = v63;
            memcpy(v63, v62, v57);
            if (v62)
            {
              if (*(_OWORD **)v56 == v62)
              {
                *(_QWORD *)v56 = 0;
                *((_DWORD *)v56 + 2) = 0;
              }
              WTF::fastFree((WTF *)v62, v64);
            }
          }
        }
        *((_DWORD *)v56 + 3) = 16;
        JSC::ArrayBuffer::slice((JSC::ArrayBuffer *)v8, (double)*a3, (double)(*a3 + 16));
        *a3 += 16;
        v65 = (_QWORD *)v111;
        if (*(_BYTE *)(v111 + 64) && (v74 = *(_QWORD *)(v111 + 32)) != 0)
          v66 = *(_QWORD *)(v74 + 32);
        else
          v66 = *(_QWORD *)(v111 + 48);
        if (v66 >= 0x10)
        {
          v67 = *(_QWORD *)(v111 + 16);
          v68 = *(_QWORD *)(v10 + 56);
          if (v68 && (*(_BYTE *)(v10 + 34) || !*MEMORY[0x1E0CC10F0]))
            v67 = (v67 & 0x3FFFFFFFFLL) + v68;
          *(_OWORD *)*(_QWORD *)v56 = *(_OWORD *)v67;
        }
        v111 = 0;
        v69 = *(_DWORD *)v65 == 2;
        *(_DWORD *)v65 -= 2;
        if (v69)
        {
          v70 = v65[10];
          if (v70)
          {
            *(_QWORD *)(v70 + 8) = 3;
            v65[10] = 0;
          }
          if ((v65[9] & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v65 + 9));
          JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v65 + 2));
          v72 = (WTF *)v65[1];
          if ((v72 & 1) == 0 && v72)
          {
            v73 = *(WTF **)v72;
            if (*(_QWORD *)v72)
            {
              *(_QWORD *)v72 = 0;
              *((_DWORD *)v72 + 2) = 0;
              WTF::fastFree(v73, v71);
            }
            WTF::fastFree(v72, v71);
          }
          WTF::fastFree((WTF *)v65, v71);
          v10 = MEMORY[0x1E0CC10F8];
        }
        ++v55;
        v54 = (WTF *)((char *)v54 + 16);
      }
      while (v109 != v54);
      goto LABEL_114;
    }
    if ((_DWORD)v36 != v27)
    {
      v51 = *(_QWORD *)(a1 + 64) + 16 * v27;
      v52 = 16 * v36 - 16 * v27;
      do
      {
        v53 = *(WTF **)v51;
        if (*(_QWORD *)v51)
        {
          *(_QWORD *)v51 = 0;
          *(_DWORD *)(v51 + 8) = 0;
          WTF::fastFree(v53, v26);
        }
        v51 += 16;
        v52 -= 16;
      }
      while (v52);
    }
    *(_DWORD *)(a1 + 76) = v27;
    if (v27)
      goto LABEL_77;
  }
LABEL_114:
  LOBYTE(v111) = 0;
  v24 = *a3;
  v75 = JSC::DataView::get<unsigned int>(a2, v24, 0, &v111);
  if (!(_BYTE)v111)
    goto LABEL_142;
  if (v24 >= 0xFFFFFFFC)
  {
    __break(0xC471u);
    JUMPOUT(0x19626BF1CLL);
  }
  v76 = v75;
  v77 = v24 + 4;
  *a3 = v24 + 4;
  if (*(_BYTE *)(v8 + 64) && (v107 = *(_QWORD *)(v8 + 32)) != 0)
    v78 = *(_QWORD *)(v107 + 32);
  else
    v78 = *(_QWORD *)(v8 + 48);
  if (v78 - v77 < (unint64_t)v75)
    goto LABEL_27;
  v79 = v75;
  JSC::ArrayBuffer::slice((JSC::ArrayBuffer *)v8, (double)v77, (double)(v77 + v75));
  *a3 += v76;
  v80 = *(unsigned int *)(a1 + 92);
  if (v80 < v76)
  {
    v81 = *(unsigned int *)(a1 + 88);
    if (v81 < v76)
    {
      v82 = v81 + (v81 >> 2);
      if (v82 >= 0x10)
        v83 = v82 + 1;
      else
        v83 = 16;
      if (v83 <= v76)
        v84 = v76;
      else
        v84 = v83;
      if (!HIDWORD(v84))
      {
        v85 = *(void **)(a1 + 80);
        v86 = (void *)WTF::fastMalloc((WTF *)v84);
        *(_DWORD *)(a1 + 88) = v84;
        *(_QWORD *)(a1 + 80) = v86;
        memcpy(v86, v85, v80);
        if (v85)
        {
          if (*(void **)(a1 + 80) == v85)
          {
            *(_QWORD *)(a1 + 80) = 0;
            *(_DWORD *)(a1 + 88) = 0;
          }
          WTF::fastFree((WTF *)v85, v87);
        }
        goto LABEL_132;
      }
LABEL_194:
      __break(0xC471u);
      JUMPOUT(0x19626B7F0);
    }
  }
LABEL_132:
  *(_DWORD *)(a1 + 92) = v76;
  v88 = (_QWORD *)v111;
  if (*(_BYTE *)(v111 + 64) && (v108 = *(_QWORD *)(v111 + 32)) != 0)
    v89 = *(_QWORD *)(v108 + 32);
  else
    v89 = *(_QWORD *)(v111 + 48);
  v12 = v89 >= v76;
  if (v89 >= v79)
  {
    v90 = *(_QWORD *)(v111 + 16);
    if (v90)
    {
      v91 = *(_QWORD *)(v10 + 56);
      if (v91)
      {
        if (*(_BYTE *)(v10 + 34) || !*MEMORY[0x1E0CC10F0])
          v90 = (v90 & 0x3FFFFFFFFLL) + v91;
      }
    }
    memcpy(*(void **)(a1 + 80), (const void *)v90, v79);
    v88 = (_QWORD *)v111;
    v111 = 0;
    if (!v88)
      goto LABEL_144;
  }
  else
  {
    v111 = 0;
  }
  v69 = *(_DWORD *)v88 == 2;
  *(_DWORD *)v88 -= 2;
  if (v69)
  {
    v101 = v88[10];
    if (v101)
    {
      *(_QWORD *)(v101 + 8) = 3;
      v88[10] = 0;
    }
    if ((v88[9] & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v88 + 9));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v88 + 2));
    v103 = (WTF *)v88[1];
    if ((v103 & 1) == 0 && v103)
    {
      v104 = *(WTF **)v103;
      if (*(_QWORD *)v103)
      {
        *(_QWORD *)v103 = 0;
        *((_DWORD *)v103 + 2) = 0;
        WTF::fastFree(v104, v102);
      }
      WTF::fastFree(v103, v102);
    }
    WTF::fastFree((WTF *)v88, v102);
  }
LABEL_144:
  if (v110)
  {
    v69 = *(_DWORD *)v110 == 2;
    *(_DWORD *)v110 -= 2;
    if (v69)
    {
      v97 = *(_QWORD *)(v110 + 80);
      if (v97)
      {
        *(_QWORD *)(v97 + 8) = 3;
        *(_QWORD *)(v110 + 80) = 0;
      }
      if ((*(_BYTE *)(v110 + 72) & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v110 + 72));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v110 + 16));
      v99 = *(WTF **)(v110 + 8);
      if ((v99 & 1) == 0 && v99)
      {
        v100 = *(WTF **)v99;
        if (*(_QWORD *)v99)
        {
          *(_QWORD *)v99 = 0;
          *((_DWORD *)v99 + 2) = 0;
          WTF::fastFree(v100, v98);
        }
        WTF::fastFree(v99, v98);
      }
      WTF::fastFree((WTF *)v110, v98);
    }
  }
  v69 = *(_DWORD *)v8 == 2;
  *(_DWORD *)v8 -= 2;
  if (v69)
  {
    v93 = *(_QWORD *)(v8 + 80);
    if (v93)
    {
      *(_QWORD *)(v93 + 8) = 3;
      *(_QWORD *)(v8 + 80) = 0;
    }
    if ((*(_BYTE *)(v8 + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v8 + 72));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v8 + 16));
    v95 = *(WTF **)(v8 + 8);
    if ((v95 & 1) == 0 && v95)
    {
      v96 = *(WTF **)v95;
      if (*(_QWORD *)v95)
      {
        *(_QWORD *)v95 = 0;
        *((_DWORD *)v95 + 2) = 0;
        WTF::fastFree(v96, v94);
      }
      WTF::fastFree(v95, v94);
    }
    WTF::fastFree((WTF *)v8, v94);
  }
  return v12;
}

uint64_t WebCore::ISOSchemeInformationBox::ISOSchemeInformationBox(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)this = off_1E3416C28;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)this = off_1E3416C28;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

void WebCore::ISOSchemeInformationBox::~ISOSchemeInformationBox(WebCore::ISOSchemeInformationBox *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  uint64_t v3;
  WTF *v4;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  uint64_t v3;
  WTF *v4;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ISOSchemeInformationBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void (**v9)(WebCore::ISOTrackEncryptionBox *__hidden);
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  unsigned int v14[2];

  v14[0] = *a3;
  result = WebCore::ISOBox::parse(a1, a2, v14);
  if ((_DWORD)result)
  {
    v7 = v14[0];
    WebCore::ISOBox::peekBox(a2, v14[0], (uint64_t)&v11);
    if (!v13)
      return 0;
    if (v11 == 1952804451)
    {
      if (v12 + v7 > *(_QWORD *)(a1 + 8) + (unint64_t)*a3)
        return 0;
      v8 = WTF::fastMalloc((WTF *)0x58);
      *(_DWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 44) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_BYTE *)(v8 + 40) = 0;
      v9 = off_1E3416C78;
      *(_QWORD *)v8 = off_1E3416C78;
      *(_QWORD *)(v8 + 8) = 0;
      *(_WORD *)(v8 + 52) = 0;
      *(_OWORD *)(v8 + 56) = 0u;
      *(_OWORD *)(v8 + 72) = 0u;
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v8;
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v9 = **(void (****)(WebCore::ISOTrackEncryptionBox *__hidden))(a1 + 40);
      }
      v14[1] = v7;
      return ((uint64_t (*)(void))v9[2])();
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t WebCore::ISOSchemeTypeBox::ISOSchemeTypeBox(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 40) = 0;
  *(_QWORD *)this = off_1E3416C50;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 40) = 0;
  *(_QWORD *)this = off_1E3416C50;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void WebCore::ISOSchemeTypeBox::~ISOSchemeTypeBox(WebCore::ISOSchemeTypeBox *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ISOSchemeTypeBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  char v12;
  char v13;

  result = WebCore::ISOBox::parse(a1, a2, a3);
  if ((_DWORD)result)
  {
    v11 = 0;
    v7 = *a3;
    v8 = JSC::DataView::get<unsigned int>(a2, *a3, 0, &v11);
    if (!v11)
      goto LABEL_9;
    if (v7 >= 0xFFFFFFFC)
      goto LABEL_14;
    *a3 = v7 + 4;
    *(_BYTE *)(a1 + 40) = HIBYTE(v8);
    *(_DWORD *)(a1 + 44) = v8 & 0xFFFFFF;
    v12 = 0;
    v7 = *a3;
    v9 = JSC::DataView::get<unsigned int>(a2, *a3, 0, &v12);
    if (v12)
    {
      if (v7 >= 0xFFFFFFFC)
      {
        __break(0xC471u);
        JUMPOUT(0x19626C568);
      }
      *a3 = v7 + 4;
      *(_DWORD *)(a1 + 48) = v9;
      v13 = 0;
      v7 = *a3;
      v10 = JSC::DataView::get<unsigned int>(a2, *a3, 0, &v13);
      result = v13 != 0;
      if (v13)
      {
        if (v7 < 0xFFFFFFFC)
        {
          *a3 = v7 + 4;
          *(_DWORD *)(a1 + 52) = v10;
          return result;
        }
LABEL_14:
        __break(0xC471u);
        JUMPOUT(0x19626C548);
      }
    }
    else
    {
LABEL_9:
      result = 0;
    }
    *a3 = v7;
  }
  return result;
}

double WebCore::ISOTrackEncryptionBox::ISOTrackEncryptionBox(WebCore::ISOTrackEncryptionBox *this)
{
  double result;

  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *(_QWORD *)this = off_1E3416C78;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 26) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

{
  double result;

  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *(_QWORD *)this = off_1E3416C78;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 26) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

void WebCore::ISOTrackEncryptionBox::~ISOTrackEncryptionBox(WebCore::ISOTrackEncryptionBox *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v5 = (WTF *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }
}

{
  WTF *v3;
  WTF *v4;
  WTF *v5;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v5 = (WTF *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }
}

{
  WTF *v3;
  WTF *v4;
  WTF *v5;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)this = off_1E3416B60;
  v5 = (WTF *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ISOTrackEncryptionBox::parseWithoutTypeAndSize(uint64_t a1, uint64_t a2)
{
  int v4;
  int v6;
  char v7;

  v7 = 0;
  v4 = JSC::DataView::get<unsigned int>(a2, 0, 0, &v7);
  if (!v7)
    return 0;
  v6 = 4;
  *(_BYTE *)(a1 + 40) = HIBYTE(v4);
  *(_DWORD *)(a1 + 44) = v4 & 0xFFFFFF;
  return WebCore::ISOTrackEncryptionBox::parsePayload(a1, a2, &v6);
}

uint64_t WebCore::ISOTrackEncryptionBox::parsePayload(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  char v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  JSC::ArrayBufferContents *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unsigned int v31;
  int v32;
  void *v33;
  int v34;
  void *v35;
  size_t v36;
  int v37;
  unsigned int v38;
  char v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  _BYTE *v46;
  WTF *v47;
  uint64_t v48;
  void *v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  void *v53;
  WTF *v54;
  WTF *v55;
  uint64_t v56;
  _QWORD *v57;
  JSC::ArrayBufferContents *v58;
  _BYTE *v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;

  v6 = *a3;
  v7 = *a3 + 1;
  *a3 = v7;
  if (*(_BYTE *)(a1 + 40))
  {
    v61 = 0;
    v8 = JSC::DataView::get<signed char>(a2, v6 + 1, 0, &v61);
    if (!v61)
    {
LABEL_20:
      v17 = 0;
      *a3 = v7;
      return v17;
    }
    if (v7 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19626C94CLL);
    }
    *a3 = v6 + 2;
    if (!*(_BYTE *)(a1 + 49))
      *(_BYTE *)(a1 + 49) = 1;
    *(_BYTE *)(a1 + 48) = v8 >> 4;
    if (!*(_BYTE *)(a1 + 51))
      *(_BYTE *)(a1 + 51) = 1;
    *(_BYTE *)(a1 + 50) = v8 & 0xF;
    v9 = *a3;
  }
  else
  {
    v9 = v6 + 2;
    *a3 = v6 + 2;
  }
  v62 = 0;
  v10 = JSC::DataView::get<signed char>(a2, v9, 0, &v62);
  if (!v62)
  {
    v17 = 0;
    *a3 = v9;
    return v17;
  }
  if (v9 == -1)
  {
LABEL_106:
    __break(0xC471u);
    JUMPOUT(0x19626C92CLL);
  }
  *a3 = v9 + 1;
  *(_BYTE *)(a1 + 52) = v10;
  v63 = 0;
  v7 = *a3;
  v11 = JSC::DataView::get<signed char>(a2, *a3, 0, &v63);
  if (!v63)
    goto LABEL_20;
  if (v7 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x19626C96CLL);
  }
  *a3 = v7 + 1;
  *(_BYTE *)(a1 + 53) = v11;
  v12 = *(_QWORD **)(a2 + 32);
  if (!v12)
    return 0;
  v14 = (JSC::ArrayBufferContents *)(v12 + 2);
  v13 = v12[2];
  if (!v13)
    return 0;
  v15 = MEMORY[0x1E0CC10F8];
  v16 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v16)
  {
    if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v13 & 0x3FFFFFFFFLL) + v16))
      return 0;
  }
  *(_DWORD *)v12 += 2;
  JSC::ArrayBuffer::slice((JSC::ArrayBuffer *)v12, (double)*a3, (double)(*a3 + 16));
  *a3 += 16;
  v18 = *(unsigned int *)(a1 + 68);
  if (v18 <= 0xF)
  {
    v19 = *(unsigned int *)(a1 + 64);
    if (v19 <= 0xF)
    {
      v20 = v19 + (v19 >> 2);
      v21 = 15;
      if (v20 > 0xF)
        v21 = v20;
      if (v20 >= 0x10)
        v22 = v21 + 1;
      else
        v22 = 16;
      v23 = *(void **)(a1 + 56);
      v24 = (void *)WTF::fastMalloc((WTF *)v22);
      *(_DWORD *)(a1 + 64) = v22;
      *(_QWORD *)(a1 + 56) = v24;
      memcpy(v24, v23, v18);
      if (v23)
      {
        if (*(void **)(a1 + 56) == v23)
        {
          *(_QWORD *)(a1 + 56) = 0;
          *(_DWORD *)(a1 + 64) = 0;
        }
        WTF::fastFree((WTF *)v23, v25);
      }
    }
  }
  *(_DWORD *)(a1 + 68) = 16;
  if (*(_BYTE *)(v60 + 64) && (v56 = *(_QWORD *)(v60 + 32)) != 0)
    v26 = *(_QWORD *)(v56 + 32);
  else
    v26 = *(_QWORD *)(v60 + 48);
  if (v26 < 0x10)
  {
LABEL_40:
    v17 = 0;
    goto LABEL_47;
  }
  v27 = *(_QWORD *)(v60 + 16);
  v28 = *(_QWORD *)(v15 + 56);
  if (v28 && (*(_BYTE *)(v15 + 34) || !*MEMORY[0x1E0CC10F0]))
    v27 = (v27 & 0x3FFFFFFFFLL) + v28;
  *(_OWORD *)*(_QWORD *)(a1 + 56) = *(_OWORD *)v27;
  if (*(_BYTE *)(a1 + 52) == 1 && !*(_BYTE *)(a1 + 53))
  {
    v64 = 0;
    v31 = *a3;
    v32 = JSC::DataView::get<signed char>(a2, *a3, 0, &v64);
    if (v64)
    {
      if (v31 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x19626CD30);
      }
      v34 = v32;
      *a3 = v31 + 1;
      if ((v32 & 0x80000000) == 0)
      {
        v57 = v12;
        v58 = (JSC::ArrayBufferContents *)(v12 + 2);
        if (v32)
        {
          v35 = (void *)WTF::fastMalloc((WTF *)v32);
          v36 = 0;
          v37 = v34;
          while (1)
          {
            v65 = 0;
            v38 = *a3;
            v39 = JSC::DataView::get<signed char>(a2, *a3, 0, &v65);
            if (!v65)
              break;
            if (v38 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x19626CC64);
            }
            v40 = v39;
            *a3 = v38 + 1;
            if (v36 == v37)
            {
              v41 = v36 + (v36 >> 2);
              if (v41 >= 0x10)
                v42 = v41 + 1;
              else
                v42 = 16;
              if (v42 <= v36 + 1)
                v43 = v36 + 1;
              else
                v43 = v42;
              if (HIDWORD(v43))
                goto LABEL_106;
              v44 = v35;
              v35 = (void *)WTF::fastMalloc((WTF *)v43);
              memcpy(v35, v44, v36);
              if (v35 == v44)
                v46 = 0;
              else
                v46 = v35;
              v59 = v46;
              if (v35 == v44)
                LODWORD(v43) = 0;
              WTF::fastFree((WTF *)v44, v45);
              v59[v36++] = v40;
              v37 = v43;
            }
            else
            {
              *((_BYTE *)v35 + v36++) = v39;
            }
            if (!(_BYTE)--v34)
              goto LABEL_74;
          }
          *a3 = v38;
          WTF::fastFree((WTF *)v35, v33);
          v17 = 0;
          v12 = v57;
          v14 = v58;
        }
        else
        {
          v35 = 0;
          v37 = 0;
          LODWORD(v36) = 0;
LABEL_74:
          v47 = *(WTF **)(a1 + 72);
          v12 = v57;
          if (v47)
          {
            *(_QWORD *)(a1 + 72) = 0;
            *(_DWORD *)(a1 + 80) = 0;
            WTF::fastFree(v47, v33);
          }
          *(_QWORD *)(a1 + 72) = v35;
          v17 = 1;
          *(_DWORD *)(a1 + 80) = v37;
          *(_DWORD *)(a1 + 84) = v36;
          v14 = v58;
        }
        goto LABEL_47;
      }
      goto LABEL_40;
    }
    v17 = 0;
    *a3 = v31;
  }
  else
  {
    v17 = 1;
  }
LABEL_47:
  if (v60)
  {
    v29 = *(_DWORD *)v60 == 2;
    *(_DWORD *)v60 -= 2;
    if (v29)
    {
      v52 = *(_QWORD *)(v60 + 80);
      if (v52)
      {
        *(_QWORD *)(v52 + 8) = 3;
        *(_QWORD *)(v60 + 80) = 0;
      }
      if ((*(_BYTE *)(v60 + 72) & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v60 + 72));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v60 + 16));
      v54 = *(WTF **)(v60 + 8);
      if ((v54 & 1) == 0 && v54)
      {
        v55 = *(WTF **)v54;
        if (*(_QWORD *)v54)
        {
          *(_QWORD *)v54 = 0;
          *((_DWORD *)v54 + 2) = 0;
          WTF::fastFree(v55, v53);
        }
        WTF::fastFree(v54, v53);
      }
      WTF::fastFree((WTF *)v60, v53);
    }
  }
  v29 = *(_DWORD *)v12 == 2;
  *(_DWORD *)v12 -= 2;
  if (v29)
  {
    v48 = v12[10];
    if (v48)
    {
      *(_QWORD *)(v48 + 8) = 3;
      v12[10] = 0;
    }
    if ((v12[9] & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v12 + 9));
    JSC::ArrayBufferContents::~ArrayBufferContents(v14);
    v50 = (WTF *)v12[1];
    if ((v50 & 1) == 0 && v50)
    {
      v51 = *(WTF **)v50;
      if (*(_QWORD *)v50)
      {
        *(_QWORD *)v50 = 0;
        *((_DWORD *)v50 + 2) = 0;
        WTF::fastFree(v51, v49);
      }
      WTF::fastFree(v50, v49);
    }
    WTF::fastFree((WTF *)v12, v49);
  }
  return v17;
}

uint64_t WebCore::ISOTrackEncryptionBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  char v9;

  result = WebCore::ISOBox::parse(a1, a2, a3);
  if ((_DWORD)result)
  {
    v9 = 0;
    v7 = *a3;
    v8 = JSC::DataView::get<unsigned int>(a2, *a3, 0, &v9);
    if (v9)
    {
      if (v7 >= 0xFFFFFFFC)
      {
        result = 72;
        __break(0xC471u);
      }
      else
      {
        *a3 = v7 + 4;
        *(_BYTE *)(a1 + 40) = HIBYTE(v8);
        *(_DWORD *)(a1 + 44) = v8 & 0xFFFFFF;
        return WebCore::ISOTrackEncryptionBox::parsePayload(a1, a2, (int *)a3);
      }
    }
    else
    {
      result = 0;
      *a3 = v7;
    }
  }
  return result;
}

void WebCore::ISOFullBox::~ISOFullBox(WebCore::ISOFullBox *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E3416B60;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

unint64_t JSC::DataView::get<unsigned long long>(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = MEMORY[0x1E0CC10F8];
  if (!a3)
  {
    if (v4)
    {
      v11 = *(_QWORD *)(v4 + 16);
      if (v11)
      {
        if ((v12 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
          || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
          || (v11 & 0x3FFFFFFFFLL) + v12)
        {
          v13 = *(_BYTE *)(a1 + 6);
          if ((v13 & 3) != 0)
          {
            if (*(_BYTE *)(v4 + 64) && (v28 = *(_QWORD *)(v4 + 32)) != 0)
            {
              v20 = atomic_load((unint64_t *)(v28 + 32));
              v13 = *(_BYTE *)(a1 + 6);
            }
            else
            {
              v20 = *(_QWORD *)(v4 + 48);
            }
            v21 = *(_QWORD *)(a1 + 8);
            if ((v13 & 4) != 0)
            {
              v19 = v20 >= v21;
              v25 = v20 - v21;
              if (v19)
                goto LABEL_48;
              if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
                LOBYTE(v26) = 0;
              else
                v26 = qword_1969F8CD0[(char)(*(_BYTE *)(a1 + 4) - 4)];
              v14 = (-1 << v26) & v25;
            }
            else if (*(_QWORD *)(a1 + 16) + v21 <= v20 && v20 >= v21)
            {
              v14 = 0;
            }
            else
            {
              v14 = *(_QWORD *)(a1 + 16);
            }
          }
          else
          {
            v14 = *(_QWORD *)(a1 + 16);
          }
          if (v3 <= v14)
            goto LABEL_21;
        }
      }
    }
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x19626D074);
  }
  if (!v4)
    goto LABEL_10;
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
    goto LABEL_10;
  v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v7 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v6 & 0x3FFFFFFFFLL) + v7))
    goto LABEL_10;
  v8 = *(_BYTE *)(a1 + 6);
  if ((v8 & 3) != 0)
  {
    if (*(_BYTE *)(v4 + 64) && (v27 = *(_QWORD *)(v4 + 32)) != 0)
    {
      v17 = atomic_load((unint64_t *)(v27 + 32));
      v8 = *(_BYTE *)(a1 + 6);
    }
    else
    {
      v17 = *(_QWORD *)(v4 + 48);
    }
    v18 = *(_QWORD *)(a1 + 8);
    if ((v8 & 4) != 0)
    {
      v19 = v17 >= v18;
      v23 = v17 - v18;
      if (v19)
        goto LABEL_10;
      if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
        LOBYTE(v24) = 0;
      else
        v24 = qword_1969F8CD0[(char)(*(_BYTE *)(a1 + 4) - 4)];
      v9 = (-1 << v24) & v23;
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 16) + v18 <= v17 && v17 >= v18;
      if (v19)
        v9 = 0;
      else
        v9 = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
  }
  if (v3 > v9)
  {
LABEL_10:
    *a3 = 0;
    return 0;
  }
  *a3 = 1;
LABEL_21:
  v15 = *(_QWORD *)(v5 + 56);
  if (v15 && (*(_BYTE *)(v5 + 34) || !*MEMORY[0x1E0CC10F0]))
    v16 = (*(_QWORD *)(a1 + 24) & 0x3FFFFFFFFLL) + v15;
  else
    v16 = *(_QWORD *)(a1 + 24);
  return bswap64(*(_QWORD *)(v16 + a2));
}

uint64_t JSC::DataView::get<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v4 = a2 + 1;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = MEMORY[0x1E0CC10F8];
  if (!a4)
  {
    if (!v5)
      goto LABEL_18;
    v11 = *(_QWORD *)(v5 + 16);
    if (v11)
    {
      if ((v12 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v11 & 0x3FFFFFFFFLL) + v12)
      {
        v13 = *(_BYTE *)(a1 + 6);
        if ((v13 & 3) == 0)
        {
          v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_18;
        }
        if (*(_BYTE *)(v5 + 64) && (v28 = *(_QWORD *)(v5 + 32)) != 0)
        {
          v19 = atomic_load((unint64_t *)(v28 + 32));
          v13 = *(_BYTE *)(a1 + 6);
        }
        else
        {
          v19 = *(_QWORD *)(v5 + 48);
        }
        v20 = *(_QWORD *)(a1 + 8);
        if ((v13 & 4) == 0)
        {
          if (*(_QWORD *)(a1 + 16) + v20 <= v19 && v19 >= v20)
            v5 = 0;
          else
            v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_18;
        }
        v18 = v19 >= v20;
        v24 = v19 - v20;
        if (!v18)
        {
          if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
            LOBYTE(v25) = 0;
          else
            v25 = qword_1969F8CD0[(char)(*(_BYTE *)(a1 + 4) - 4)];
          v5 = (-1 << v25) & v24;
LABEL_18:
          if (v4 > v5)
          {
            __break(0xC471u);
            JUMPOUT(0x19626D1D4);
          }
          goto LABEL_21;
        }
      }
    }
    v5 = 0;
    goto LABEL_18;
  }
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if ((v8 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v7 & 0x3FFFFFFFFLL) + v8)
      {
        v9 = *(_BYTE *)(a1 + 6);
        if ((v9 & 3) == 0)
        {
          v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_9;
        }
        if (*(_BYTE *)(v5 + 64) && (v27 = *(_QWORD *)(v5 + 32)) != 0)
        {
          v16 = atomic_load((unint64_t *)(v27 + 32));
          v9 = *(_BYTE *)(a1 + 6);
        }
        else
        {
          v16 = *(_QWORD *)(v5 + 48);
        }
        v17 = *(_QWORD *)(a1 + 8);
        if ((v9 & 4) == 0)
        {
          v18 = *(_QWORD *)(a1 + 16) + v17 <= v16 && v16 >= v17;
          if (v18)
            v5 = 0;
          else
            v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_9;
        }
        v18 = v16 >= v17;
        v22 = v16 - v17;
        if (!v18)
        {
          if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
            LOBYTE(v23) = 0;
          else
            v23 = qword_1969F8CD0[(char)(*(_BYTE *)(a1 + 4) - 4)];
          v5 = (-1 << v23) & v22;
          goto LABEL_9;
        }
      }
    }
    v5 = 0;
  }
LABEL_9:
  if (v4 > v5)
  {
    v10 = 0;
    *a4 = 0;
    return v10;
  }
  *a4 = 1;
LABEL_21:
  v14 = *(_QWORD *)(v6 + 56);
  if (v14 && (*(_BYTE *)(v6 + 34) || !*MEMORY[0x1E0CC10F0]))
    v15 = (*(_QWORD *)(a1 + 24) & 0x3FFFFFFFFLL) + v14;
  else
    v15 = *(_QWORD *)(a1 + 24);
  return *(char *)(v15 + a2);
}

__n128 WebCore::ISOWebVTTCue::ISOWebVTTCue(uint64_t a1, _OWORD *a2, __n128 *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_1E3416CC8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = *a2;
  result = *a3;
  *(__n128 *)(a1 + 56) = *a3;
  v9 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 80) = v10;
  v11 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 104) = v13;
  return result;
}

{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_1E3416CC8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = *a2;
  result = *a3;
  *(__n128 *)(a1 + 56) = *a3;
  v9 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 80) = v10;
  v11 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 104) = v13;
  return result;
}

double WebCore::ISOWebVTTCue::ISOWebVTTCue(WebCore::ISOWebVTTCue *this)
{
  double result;

  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_1E3416CC8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 10000000;
  *((_BYTE *)this + 52) = 1;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 10000000;
  *((_BYTE *)this + 68) = 1;
  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  return result;
}

{
  double result;

  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_1E3416CC8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 10000000;
  *((_BYTE *)this + 52) = 1;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 10000000;
  *((_BYTE *)this + 68) = 1;
  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  return result;
}

__n128 WebCore::ISOWebVTTCue::ISOWebVTTCue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1E3416B60;
  v2 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 32) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 36) = v3;
  *(_QWORD *)a1 = off_1E3416CC8;
  result = *(__n128 *)(a2 + 40);
  *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
  *(__n128 *)(a1 + 40) = result;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 104) = v9;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1E3416B60;
  v2 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 32) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 36) = v3;
  *(_QWORD *)a1 = off_1E3416CC8;
  result = *(__n128 *)(a2 + 40);
  *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
  *(__n128 *)(a1 + 40) = result;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 104) = v9;
  return result;
}

void WebCore::ISOWebVTTCue::~ISOWebVTTCue(WebCore::ISOWebVTTCue *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_QWORD *)this = off_1E3416B60;
  v8 = (WTF *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v8, a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::ISOWebVTTCue::~ISOWebVTTCue(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::ISOWebVTTCue::parse(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  void (**v19)(WebCore::ISOBox *__hidden);
  uint64_t v20;
  int v21;
  WTF *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  v6 = WebCore::ISOBox::parse((uint64_t)a1, a2, a3);
  if ((_DWORD)v6)
  {
    v21 = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    v19 = off_1E3416CF0;
    v20 = 0;
    LODWORD(v25) = *a3;
    if (WebCore::ISOStringBox::parse((uint64_t)&v19, a2, (unsigned int *)&v25))
    {
      while (1)
      {
        v8 = v21;
        *a3 += v20;
        if (v8 > 1885436267)
          break;
        if (v8 == 1668573549)
        {
          v15 = v24;
          if (v24)
            *(_DWORD *)v24 += 2;
          v10 = (WTF::StringImpl *)a1[11];
          a1[11] = v15;
          if (!v10)
            goto LABEL_32;
LABEL_30:
          if (*(_DWORD *)v10 == 2)
            goto LABEL_35;
          *(_DWORD *)v10 -= 2;
          goto LABEL_32;
        }
        if (v8 != 1768187246)
          goto LABEL_32;
        v11 = v24;
        if (v24)
        {
          if ((*((_BYTE *)v24 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v24 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(v24, v7);
            v11 = v25;
          }
        }
        v12 = (WTF::StringImpl *)a1[10];
        a1[10] = v11;
        if (!v12)
          goto LABEL_32;
        if (*(_DWORD *)v12 == 2)
        {
          v10 = v12;
LABEL_35:
          WTF::StringImpl::destroy(v10, v7);
          goto LABEL_32;
        }
        *(_DWORD *)v12 -= 2;
LABEL_32:
        LODWORD(v25) = *a3;
        if ((((uint64_t (*)(void (***)(WebCore::ISOBox *__hidden), uint64_t, WTF::StringImpl **))v19[2])(&v19, a2, &v25) & 1) == 0)goto LABEL_37;
      }
      switch(v8)
      {
        case 1885436268:
          v13 = v24;
          if (v24)
            *(_DWORD *)v24 += 2;
          v10 = (WTF::StringImpl *)a1[13];
          a1[13] = v13;
          if (!v10)
            goto LABEL_32;
          break;
        case 1937011815:
          v14 = v24;
          if (v24)
            *(_DWORD *)v24 += 2;
          v10 = (WTF::StringImpl *)a1[12];
          a1[12] = v14;
          if (!v10)
            goto LABEL_32;
          break;
        case 1987275108:
          v9 = v24;
          if (v24)
            *(_DWORD *)v24 += 2;
          v10 = (WTF::StringImpl *)a1[9];
          a1[9] = v9;
          if (!v10)
            goto LABEL_32;
          break;
        default:
          goto LABEL_32;
      }
      goto LABEL_30;
    }
LABEL_37:
    v16 = v24;
    v24 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v7);
      else
        *(_DWORD *)v16 -= 2;
    }
    v19 = off_1E3416B60;
    v17 = v22;
    if (v22)
    {
      v22 = 0;
      LODWORD(v23) = 0;
      WTF::fastFree(v17, v7);
    }
  }
  return v6;
}

void WebCore::ISOStringBox::~ISOStringBox(WebCore::ISOStringBox *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF::StringImpl *v3;
  WTF *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E3416B60;
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::fastFree(this, a2);
}

WTF::JSONImpl::Value *WebCore::ISOWebVTTCue::toJSONString(WebCore::ISOWebVTTCue *this)
{
  WTF::JSONImpl::Value *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::JSONImpl::Value *v11;
  const WTF::String *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::JSONImpl::Value *v22;
  const WTF::String *v23;
  const WTF::String *v24;
  WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::JSONImpl::Value *v33;
  const WTF::String *v34;
  const WTF::String *v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::JSONImpl::Value *v44;
  const WTF::String *v45;
  const WTF::String *v46;
  WTF::StringImpl *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::JSONImpl::Value *v55;
  WTF::JSONImpl::Value *v56;
  double v57;
  WTF::StringImpl *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  WTF::JSONImpl::Value *v65;
  WTF::JSONImpl::Value *v66;
  double v67;
  WTF::StringImpl *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  _DWORD *v73;
  WTF::StringImpl *v74;
  WTF::JSONImpl::Value *result;
  _DWORD **v76;
  uint64_t v77;
  _DWORD *v78;
  _DWORD **v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD **v82;
  uint64_t v83;
  _DWORD *v84;
  _DWORD **v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD **v88;
  uint64_t v89;
  _DWORD *v90;
  _DWORD **v91;
  uint64_t v92;
  _DWORD *v93;
  _DWORD **v94;
  uint64_t v95;
  _DWORD *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::JSONImpl::Value *v99;
  _DWORD *v100;
  _QWORD v101[2];
  char v102;

  WTF::JSONImpl::Object::create(this);
  v2 = v99;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WebCore::ISOWebVTTCue *)((char *)this + 104), v3);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v99 + 2, &v98, (const WTF::StringImpl *)&v100, (uint64_t)v101);
  if (v102)
  {
    v5 = (uint64_t *)((char *)v2 + 24);
    v6 = *((unsigned int *)v2 + 9);
    if ((_DWORD)v6 == *((_DWORD *)v2 + 8))
    {
      v76 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)&v98);
      v6 = *((unsigned int *)v2 + 9);
      v77 = *((_QWORD *)v2 + 3);
      v78 = *v76;
      if (*v76)
        *v78 += 2;
      *(_QWORD *)(v77 + 8 * v6) = v78;
    }
    else
    {
      v7 = *v5;
      v8 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *(_QWORD *)(v7 + 8 * v6) = v8;
    }
    *((_DWORD *)v2 + 9) = v6 + 1;
  }
  v9 = v100;
  v100 = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v9;
  }
  v10 = v98;
  v98 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v4);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v99;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v98 = (WTF::StringImpl *)v101[0];
  WTF::encodeWithURLEscapeSequences((WebCore::ISOWebVTTCue *)((char *)this + 72), v12);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v97, v13);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v11 + 2, &v98, (const WTF::StringImpl *)&v100, (uint64_t)v101);
  if (v102)
  {
    v15 = (uint64_t *)((char *)v11 + 24);
    v16 = *((unsigned int *)v11 + 9);
    if ((_DWORD)v16 == *((_DWORD *)v11 + 8))
    {
      v79 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v98);
      v16 = *((unsigned int *)v11 + 9);
      v80 = *((_QWORD *)v11 + 3);
      v81 = *v79;
      if (*v79)
        *v81 += 2;
      *(_QWORD *)(v80 + 8 * v16) = v81;
    }
    else
    {
      v17 = *v15;
      v18 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *(_QWORD *)(v17 + 8 * v16) = v18;
    }
    *((_DWORD *)v11 + 9) = v16 + 1;
  }
  v19 = v100;
  v100 = 0;
  if (v19)
  {
    if (*v19 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v19;
  }
  v20 = v97;
  v97 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v98;
  v98 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v14);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v99;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v98 = (WTF::StringImpl *)v101[0];
  WTF::encodeWithURLEscapeSequences((WebCore::ISOWebVTTCue *)((char *)this + 80), v23);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v97, v24);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v22 + 2, &v98, (const WTF::StringImpl *)&v100, (uint64_t)v101);
  if (v102)
  {
    v26 = (uint64_t *)((char *)v22 + 24);
    v27 = *((unsigned int *)v22 + 9);
    if ((_DWORD)v27 == *((_DWORD *)v22 + 8))
    {
      v82 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v98);
      v27 = *((unsigned int *)v22 + 9);
      v83 = *((_QWORD *)v22 + 3);
      v84 = *v82;
      if (*v82)
        *v84 += 2;
      *(_QWORD *)(v83 + 8 * v27) = v84;
    }
    else
    {
      v28 = *v26;
      v29 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *(_QWORD *)(v28 + 8 * v27) = v29;
    }
    *((_DWORD *)v22 + 9) = v27 + 1;
  }
  v30 = v100;
  v100 = 0;
  if (v30)
  {
    if (*v30 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v30;
  }
  v31 = v97;
  v97 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v25);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v98;
  v98 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v25);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v99;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v98 = (WTF::StringImpl *)v101[0];
  WTF::encodeWithURLEscapeSequences((WebCore::ISOWebVTTCue *)((char *)this + 88), v34);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v97, v35);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v33 + 2, &v98, (const WTF::StringImpl *)&v100, (uint64_t)v101);
  if (v102)
  {
    v37 = (uint64_t *)((char *)v33 + 24);
    v38 = *((unsigned int *)v33 + 9);
    if ((_DWORD)v38 == *((_DWORD *)v33 + 8))
    {
      v85 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v98);
      v38 = *((unsigned int *)v33 + 9);
      v86 = *((_QWORD *)v33 + 3);
      v87 = *v85;
      if (*v85)
        *v87 += 2;
      *(_QWORD *)(v86 + 8 * v38) = v87;
    }
    else
    {
      v39 = *v37;
      v40 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *(_QWORD *)(v39 + 8 * v38) = v40;
    }
    *((_DWORD *)v33 + 9) = v38 + 1;
  }
  v41 = v100;
  v100 = 0;
  if (v41)
  {
    if (*v41 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v41;
  }
  v42 = v97;
  v97 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v36);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = v98;
  v98 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v36);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = v99;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v98 = (WTF::StringImpl *)v101[0];
  WTF::encodeWithURLEscapeSequences((WebCore::ISOWebVTTCue *)((char *)this + 96), v45);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v97, v46);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v44 + 2, &v98, (const WTF::StringImpl *)&v100, (uint64_t)v101);
  if (v102)
  {
    v48 = (uint64_t *)((char *)v44 + 24);
    v49 = *((unsigned int *)v44 + 9);
    if ((_DWORD)v49 == *((_DWORD *)v44 + 8))
    {
      v88 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v98);
      v49 = *((unsigned int *)v44 + 9);
      v89 = *((_QWORD *)v44 + 3);
      v90 = *v88;
      if (*v88)
        *v90 += 2;
      *(_QWORD *)(v89 + 8 * v49) = v90;
    }
    else
    {
      v50 = *v48;
      v51 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *(_QWORD *)(v50 + 8 * v49) = v51;
    }
    *((_DWORD *)v44 + 9) = v49 + 1;
  }
  v52 = v100;
  v100 = 0;
  if (v52)
  {
    if (*v52 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v52;
  }
  v53 = v97;
  v97 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v47);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = v98;
  v98 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v47);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = v99;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v98 = (WTF::StringImpl *)v101[0];
  v56 = (WTF::JSONImpl::Value *)WTF::MediaTime::toDouble((WebCore::ISOWebVTTCue *)((char *)this + 40));
  WTF::JSONImpl::Value::create(v56, v57);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v55 + 2, &v98, (const WTF::StringImpl *)&v100, (uint64_t)v101);
  if (v102)
  {
    v59 = (uint64_t *)((char *)v55 + 24);
    v60 = *((unsigned int *)v55 + 9);
    if ((_DWORD)v60 == *((_DWORD *)v55 + 8))
    {
      v91 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)&v98);
      v60 = *((unsigned int *)v55 + 9);
      v92 = *((_QWORD *)v55 + 3);
      v93 = *v91;
      if (*v91)
        *v93 += 2;
      *(_QWORD *)(v92 + 8 * v60) = v93;
    }
    else
    {
      v61 = *v59;
      v62 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *(_QWORD *)(v61 + 8 * v60) = v62;
    }
    *((_DWORD *)v55 + 9) = v60 + 1;
  }
  v63 = v100;
  v100 = 0;
  if (v63)
  {
    if (*v63 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v63;
  }
  v64 = v98;
  v98 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v58);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = v99;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v66 = (WTF::JSONImpl::Value *)WTF::MediaTime::toDouble((WebCore::ISOWebVTTCue *)((char *)this + 56));
  WTF::JSONImpl::Value::create(v66, v67);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v65 + 2, &v98, (const WTF::StringImpl *)&v100, (uint64_t)v101);
  if (v102)
  {
    v69 = (uint64_t *)((char *)v65 + 24);
    v70 = *((unsigned int *)v65 + 9);
    if ((_DWORD)v70 == *((_DWORD *)v65 + 8))
    {
      v94 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v98);
      v70 = *((unsigned int *)v65 + 9);
      v95 = *((_QWORD *)v65 + 3);
      v96 = *v94;
      if (*v94)
        *v96 += 2;
      *(_QWORD *)(v95 + 8 * v70) = v96;
    }
    else
    {
      v71 = *v69;
      v72 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *(_QWORD *)(v71 + 8 * v70) = v72;
    }
    *((_DWORD *)v65 + 9) = v70 + 1;
  }
  v73 = v100;
  v100 = 0;
  if (v73)
  {
    if (*v73 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v73;
  }
  v74 = v98;
  v98 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v68);
    else
      *(_DWORD *)v74 -= 2;
  }
  WTF::JSONImpl::Value::toJSONString(v99);
  result = v99;
  v99 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

void WebCore::Font::getCFStringAttributes(WTF::String *this@<X3>, void **CFString@<X0>, char a3@<W1>, int a4@<W2>, CFDictionaryRef *a5@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t v10;
  CFIndex v11;
  char v12;
  char **v13;
  char *v14;
  void *values;
  __int128 v16;
  __int128 v17;
  void *keys;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v19 = 0u;
  v17 = 0u;
  v16 = 0u;
  keys = (void *)*MEMORY[0x1E0CA8188];
  values = CFString[11];
  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    CFString = (void **)WTF::String::createCFString(this);
    v8 = v14;
    *(_QWORD *)&v19 = *MEMORY[0x1E0CA8590];
    *(_QWORD *)&v16 = v14;
    v9 = 2;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  *(&keys + v9) = (void *)*MEMORY[0x1E0CA85A0];
  v10 = atomic_load(&WebCore::paragraphStyleWithCompositionLanguageNone(void)::onceFlag);
  if (v10 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WebCore::paragraphStyleWithCompositionLanguageNone(void)::onceFlag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::paragraphStyleWithCompositionLanguageNone(void)::$_0 &&>>);
  }
  *(&values + v9) = (void *)WebCore::paragraphStyleWithCompositionLanguageNone(void)::paragraphStyle;
  v11 = v9 + 1;
  if ((a3 & 1) == 0)
  {
    *(&keys + v11) = (void *)*MEMORY[0x1E0CA8588];
    *(&values + v11) = (void *)WebCore::zeroValue((WebCore *)CFString);
    v11 = v9 + 2;
  }
  if (a4)
  {
    *(&keys + v11) = (void *)*MEMORY[0x1E0CA86C8];
    *(&values + v11++) = (void *)*MEMORY[0x1E0C9AE50];
  }
  *a5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, v11, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v8)
    CFRelease(v8);
}

uint64_t WebCore::zeroValue(WebCore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_1ECE83FF8);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECE83FF8, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::zeroValue(void)::$_0 &&>>);
  }
  return _MergedGlobals_235;
}

uint64_t WebCore::SwitchingGPUClient::singletonIfExists(WebCore::SwitchingGPUClient *this)
{
  return WebCore::SwitchingGPUClient::m_singleton;
}

uint64_t WebCore::SwitchingGPUClient::setSingleton(uint64_t this, WebCore::SwitchingGPUClient *a2)
{
  WebCore::SwitchingGPUClient::m_singleton = this;
  return this;
}

WebCore::OpenTypeMathData *WebCore::OpenTypeMathData::OpenTypeMathData(WebCore::OpenTypeMathData *this, CTFontRef *a2)
{
  void *v3;
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  WTF *v77;
  WTF *v79;
  WTF *v80;
  char v82;
  WTF *v83;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  WebCore::FontPlatformData::openTypeTable(a2, 0x4D415448u, (uint64_t *)&v83);
  v4 = v83;
  v83 = 0;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v51 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v51)
      {
        v52 = *(_QWORD *)(v5 + 8);
        v53 = v52 + 16 * v51;
        do
        {
          v54 = *(unsigned int **)(v52 + 8);
          *(_QWORD *)(v52 + 8) = 0;
          if (v54)
          {
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              v57 = v53;
              atomic_store(1u, v54);
              v58 = v54[6];
              if ((_DWORD)v58 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_11[v58])(&v82, v54 + 2);
              v54[6] = -1;
              WTF::fastFree((WTF *)v54, v3);
              v53 = v57;
            }
          }
          v52 += 16;
        }
        while (v52 != v53);
      }
      v66 = *(WTF **)(v5 + 8);
      if ((WTF *)(v5 + 24) != v66 && v66 != 0)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        WTF::fastFree(v66, v3);
      }
      WTF::fastFree((WTF *)v5, v3);
    }
    v8 = v83;
    v83 = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)v8);
        v59 = *((unsigned int *)v8 + 5);
        if ((_DWORD)v59)
        {
          v60 = *((_QWORD *)v8 + 1);
          v61 = v60 + 16 * v59;
          do
          {
            v5 = *(_QWORD *)(v60 + 8);
            *(_QWORD *)(v60 + 8) = 0;
            if (v5)
            {
              do
              {
                v62 = __ldaxr((unsigned int *)v5);
                v63 = v62 - 1;
              }
              while (__stlxr(v63, (unsigned int *)v5));
              if (!v63)
              {
                v64 = v61;
                atomic_store(1u, (unsigned int *)v5);
                v65 = *(unsigned int *)(v5 + 24);
                if ((_DWORD)v65 != -1)
                  ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_11[v65])(&v82, v5 + 8);
                *(_DWORD *)(v5 + 24) = -1;
                WTF::fastFree((WTF *)v5, v3);
                v61 = v64;
              }
            }
            v60 += 16;
          }
          while (v60 != v61);
        }
        v68 = (WTF *)*((_QWORD *)v8 + 1);
        if ((WTF *)((char *)v8 + 24) != v68 && v68 != 0)
        {
          *((_QWORD *)v8 + 1) = 0;
          *((_DWORD *)v8 + 4) = 0;
          WTF::fastFree(v68, v3);
        }
        WTF::fastFree(v8, v3);
      }
    }
    v4 = (WTF *)*((_QWORD *)this + 1);
  }
  if (!v4)
  {
    *((_QWORD *)this + 1) = 0;
    return this;
  }
  if (*((_QWORD *)v4 + 6) >= 0xAuLL && *((_DWORD *)v4 + 5))
  {
    v11 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 8);
    v12 = *(unsigned int *)(v11 + 24);
    if ((_DWORD)v12 == -1)
      goto LABEL_122;
    v83 = (WTF *)&v82;
    v13 = ((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v83, v11 + 8);
    v4 = (WTF *)*((_QWORD *)this + 1);
    if (v13)
    {
      v14 = v13;
      v15 = *(unsigned __int16 *)(v13 + 4);
      if (*(_WORD *)(v13 + 4))
      {
        if (*((_DWORD *)v4 + 5))
        {
          v16 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 8);
          v17 = *(unsigned int *)(v16 + 24);
          if ((_DWORD)v17 == -1)
            goto LABEL_122;
          v83 = (WTF *)&v82;
          v18 = ((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v17])(&v83, v16 + 8);
          v5 = *((_QWORD *)this + 1);
        }
        else
        {
          v18 = 0;
          v5 = *((_QWORD *)this + 1);
        }
        v19 = v14 + __rev16(v15) + 214;
        v20 = v19 >= v18;
        v21 = v19 - v18;
        if (v20 && v21 <= *((_QWORD *)v4 + 6))
        {
          v35 = *(unsigned __int16 *)(v14 + 8);
          if (!*(_WORD *)(v14 + 8))
            goto LABEL_52;
          if (!*(_DWORD *)(v5 + 20))
          {
            v38 = 0;
            goto LABEL_46;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
          v37 = *(unsigned int *)(v36 + 24);
          if ((_DWORD)v37 != -1)
          {
            v83 = (WTF *)&v82;
            v38 = ((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v37])(&v83, v36 + 8);
LABEL_46:
            v39 = v14 + __rev16(v35) + 12;
            v20 = v39 >= v38;
            v40 = v39 - v38;
            if (v20 && v40 <= *(_QWORD *)(v5 + 48))
              return this;
            v5 = *((_QWORD *)this + 1);
LABEL_52:
            *((_QWORD *)this + 1) = 0;
            if (!v5)
              return this;
            do
            {
              v42 = __ldaxr((unsigned int *)v5);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, (unsigned int *)v5));
            if (v43)
              return this;
            atomic_store(1u, (unsigned int *)v5);
            v44 = *(unsigned int *)(v5 + 20);
            if ((_DWORD)v44)
            {
              v45 = *(_QWORD *)(v5 + 8);
              v46 = v45 + 16 * v44;
              do
              {
                v47 = *(unsigned int **)(v45 + 8);
                *(_QWORD *)(v45 + 8) = 0;
                if (v47)
                {
                  do
                  {
                    v48 = __ldaxr(v47);
                    v49 = v48 - 1;
                  }
                  while (__stlxr(v49, v47));
                  if (!v49)
                  {
                    atomic_store(1u, v47);
                    v50 = v47[6];
                    if ((_DWORD)v50 != -1)
                      ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_11[v50])(&v83, v47 + 2);
                    v47[6] = -1;
                    WTF::fastFree((WTF *)v47, v3);
                  }
                }
                v45 += 16;
              }
              while (v45 != v46);
            }
            v80 = *(WTF **)(v5 + 8);
            if ((WTF *)(v5 + 24) == v80 || v80 == 0)
              goto LABEL_121;
            goto LABEL_123;
          }
LABEL_122:
          v80 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_123:
          *(_QWORD *)(v5 + 8) = 0;
          *(_DWORD *)(v5 + 16) = 0;
          WTF::fastFree(v80, v3);
LABEL_121:
          v79 = (WTF *)v5;
LABEL_113:
          WTF::fastFree(v79, v3);
          return this;
        }
        v4 = (WTF *)v5;
      }
      *((_QWORD *)this + 1) = 0;
      if (v4)
      {
        do
        {
          v23 = __ldaxr((unsigned int *)v4);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, (unsigned int *)v4));
        if (!v24)
        {
          atomic_store(1u, (unsigned int *)v4);
          v25 = *((unsigned int *)v4 + 5);
          if ((_DWORD)v25)
          {
            v26 = *((_QWORD *)v4 + 1);
            v27 = v26 + 16 * v25;
            do
            {
              v28 = *(unsigned int **)(v26 + 8);
              *(_QWORD *)(v26 + 8) = 0;
              if (v28)
              {
                do
                {
                  v29 = __ldaxr(v28);
                  v30 = v29 - 1;
                }
                while (__stlxr(v30, v28));
                if (!v30)
                {
                  atomic_store(1u, v28);
                  v31 = v28[6];
                  if ((_DWORD)v31 != -1)
                    ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_11[v31])(&v83, v28 + 2);
                  v28[6] = -1;
                  WTF::fastFree((WTF *)v28, v3);
                }
              }
              v26 += 16;
            }
            while (v26 != v27);
          }
LABEL_107:
          v77 = (WTF *)*((_QWORD *)v4 + 1);
          if ((WTF *)((char *)v4 + 24) != v77 && v77 != 0)
          {
            *((_QWORD *)v4 + 1) = 0;
            *((_DWORD *)v4 + 4) = 0;
            WTF::fastFree(v77, v3);
          }
          v79 = v4;
          goto LABEL_113;
        }
      }
      return this;
    }
    *((_QWORD *)this + 1) = 0;
    if (!v4)
      return this;
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  do
  {
    v32 = __ldaxr((unsigned int *)v4);
    v33 = v32 - 1;
  }
  while (__stlxr(v33, (unsigned int *)v4));
  if (!v33)
  {
    atomic_store(1u, (unsigned int *)v4);
    v70 = *((unsigned int *)v4 + 5);
    if ((_DWORD)v70)
    {
      v71 = *((_QWORD *)v4 + 1);
      v72 = v71 + 16 * v70;
      do
      {
        v73 = *(unsigned int **)(v71 + 8);
        *(_QWORD *)(v71 + 8) = 0;
        if (v73)
        {
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (!v75)
          {
            atomic_store(1u, v73);
            v76 = v73[6];
            if ((_DWORD)v76 != -1)
              ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_11[v76])(&v83, v73 + 2);
            v73[6] = -1;
            WTF::fastFree((WTF *)v73, v3);
          }
        }
        v71 += 16;
      }
      while (v71 != v72);
    }
    goto LABEL_107;
  }
  return this;
}

void WebCore::OpenTypeMathData::~OpenTypeMathData(WebCore::OpenTypeMathData *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(v3 + 8);
        v8 = v7 + 16 * v6;
        do
        {
          v9 = *(unsigned int **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v15 = v8;
              v16 = v7;
              v17 = (WTF *)v9;
              v18 = v3;
              atomic_store(1u, v9);
              v12 = v9[6];
              if ((_DWORD)v12 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_11[v12])(&v20, v9 + 2);
              *((_DWORD *)v17 + 6) = -1;
              WTF::fastFree(v17, a2);
              v3 = v18;
              v8 = v15;
              v7 = v16;
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
      }
      v13 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v19 = v3;
        WTF::fastFree(v13, a2);
        v3 = v19;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

uint64_t WebCore::OpenTypeMathData::getMathConstant(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::OpenTypeMathData *v9;
  const WebCore::Font *v10;
  unsigned __int16 v11;
  char v12;
  char *v13;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  if (v2 && *(_QWORD *)(v2 + 48) >= 0xAuLL && *(_DWORD *)(v2 + 20))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
    v5 = *(unsigned int *)(v4 + 24);
    if ((_DWORD)v5 == -1)
    {
LABEL_13:
      v9 = (WebCore::OpenTypeMathData *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::OpenTypeMathData::getItalicCorrection(v9, v10, v11);
    }
    v13 = &v12;
    result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v13, v4 + 8);
    v3 = result;
  }
  else
  {
    v3 = 0;
  }
  if (*(_WORD *)(v3 + 4))
  {
    v6 = *(_QWORD *)(v1 + 8);
    if (!*(_DWORD *)(v6 + 20))
      return 0;
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
    v8 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v8 != -1)
    {
      v13 = &v12;
      return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v13, v7 + 8);
    }
    goto LABEL_13;
  }
  return result;
}

unint64_t WebCore::OpenTypeMathData::getItalicCorrection(unint64_t this, const WebCore::Font *a2, unsigned int a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v35;
  char v36;
  char *v37;

  v4 = this;
  v5 = *(_QWORD *)(this + 8);
  if (v5 && *(_QWORD *)(v5 + 48) >= 0xAuLL && *(_DWORD *)(v5 + 20))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
    v8 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v8 == -1)
      goto LABEL_44;
    v37 = &v36;
    this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v37, v7 + 8);
    v6 = this;
  }
  else
  {
    v6 = 0;
  }
  v9 = *(unsigned __int16 *)(v6 + 6);
  if (!*(_WORD *)(v6 + 6))
    return this;
  v10 = *(_QWORD *)(v4 + 8);
  if (*(_DWORD *)(v10 + 20))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
    v12 = *(unsigned int *)(v11 + 24);
    if ((_DWORD)v12 == -1)
      goto LABEL_44;
    v37 = &v36;
    this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v37, v11 + 8);
  }
  else
  {
    this = 0;
  }
  v13 = (_WORD *)(v6 + __rev16(v9));
  if ((unint64_t)(v13 + 4) >= this && (unint64_t)v13 - this + 8 <= *(_QWORD *)(v10 + 48))
  {
    v15 = (unsigned __int16)*v13;
    if (*v13)
    {
      v16 = *(_QWORD *)(v4 + 8);
      if (*(_DWORD *)(v16 + 20))
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8);
        v18 = *(unsigned int *)(v17 + 24);
        if ((_DWORD)v18 == -1)
          goto LABEL_44;
        v37 = &v36;
        this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v37, v17 + 8);
      }
      else
      {
        this = 0;
      }
      v19 = (_WORD *)((char *)v13 + __rev16(v15));
      if ((unint64_t)(v19 + 4) >= this && (unint64_t)v19 - this + 8 <= *(_QWORD *)(v16 + 48))
      {
        v21 = *(_QWORD *)(v4 + 8);
        v22 = v19[1];
        if (*(_DWORD *)(v21 + 20))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8);
          v24 = *(unsigned int *)(v23 + 24);
          if ((_DWORD)v24 == -1)
            goto LABEL_44;
          v37 = &v36;
          this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v24])(&v37, v23 + 8);
        }
        else
        {
          this = 0;
        }
        v25 = (unint64_t)&v19[2 * (bswap32(v22) >> 16) + 2];
        v26 = *(_QWORD *)(v21 + 48);
        v27 = v25 >= this;
        v28 = v25 - this;
        if (v27 && v28 <= v26)
        {
          v30 = *v19;
          if (*v19)
          {
            if (!*(_DWORD *)(v21 + 20))
            {
              this = 0;
              goto LABEL_34;
            }
            v31 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8);
            v32 = *(unsigned int *)(v31 + 24);
            if ((_DWORD)v32 != -1)
            {
              v37 = &v36;
              this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v32])(&v37, v31 + 8);
              v26 = *(_QWORD *)(v21 + 48);
LABEL_34:
              v33 = (unsigned __int16 *)((char *)v19 + __rev16(v30));
              if ((unint64_t)(v33 + 1) >= this && (unint64_t)v33 - this + 2 <= v26)
              {
                LODWORD(v37) = 0;
                return WebCore::OpenType::TableWithCoverage::getCoverageIndex(v21, v33, a3, (unsigned int *)&v37);
              }
              return this;
            }
LABEL_44:
            v35 = std::__throw_bad_variant_access[abi:sn180100]();
            return WebCore::OpenTypeMathData::getMathVariants(v35);
          }
        }
      }
    }
  }
  return this;
}

char *WebCore::OpenTypeMathData::getMathVariants(uint64_t a1, void *a2, int a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v8;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WebCore::OpenType::MathVariants *v21;
  WebCore::OpenType::MathVariants *v23;
  char *result;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::OpenType::MathVariants *v32;
  const WebCore::SharedBuffer *v33;
  unsigned int v34;
  int v35;
  char v36;
  char *v37;

  v8 = a2;
  if (*(_DWORD *)(a4 + 8))
  {
    if (*(_DWORD *)(a4 + 12))
      *(_DWORD *)(a4 + 12) = 0;
    v10 = *(WTF **)a4;
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      WTF::fastFree(v10, a2);
    }
  }
  if (a5[2])
  {
    if (a5[3])
      a5[3] = 0;
    v11 = *(WTF **)a5;
    if (*(_QWORD *)a5)
    {
      *(_QWORD *)a5 = 0;
      a5[2] = 0;
      WTF::fastFree(v11, a2);
    }
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 && *(_QWORD *)(v12 + 48) >= 0xAuLL && *(_DWORD *)(v12 + 20))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8);
    v15 = *(unsigned int *)(v14 + 24);
    if ((_DWORD)v15 == -1)
      goto LABEL_41;
    v37 = &v36;
    v13 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v37, v14 + 8);
    v12 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v13 = 0;
  }
  v16 = *(unsigned __int16 *)(v13 + 8);
  if (*(_WORD *)(v13 + 8))
  {
    if (*(_DWORD *)(v12 + 20))
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8);
      v18 = *(unsigned int *)(v17 + 24);
      if ((_DWORD)v18 == -1)
        goto LABEL_41;
      v37 = &v36;
      v19 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v37, v17 + 8);
      v20 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v19 = 0;
      v20 = v12;
    }
    v21 = (WebCore::OpenType::MathVariants *)(v13 + __rev16(v16));
    if ((unint64_t)v21 - v19 + 12 <= *(_QWORD *)(v12 + 48) && (unint64_t)v21 + 12 >= v19)
      v23 = v21;
    else
      v23 = 0;
    v12 = v20;
  }
  else
  {
    v23 = 0;
  }
  result = WebCore::OpenType::MathVariants::mathGlyphConstruction(v23, (const WebCore::SharedBuffer *)v12, v8, a3);
  if (!result)
    return result;
  v25 = result;
  WebCore::OpenType::MathGlyphConstruction::getSizeVariants((uint64_t)result, *(_QWORD *)(a1 + 8), a4);
  v26 = *(_QWORD *)(a1 + 8);
  v27 = *(unsigned __int16 *)v25;
  if (!*(_DWORD *)(v26 + 20))
  {
    result = 0;
    goto LABEL_33;
  }
  v28 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8);
  v29 = *(unsigned int *)(v28 + 24);
  if ((_DWORD)v29 == -1)
  {
LABEL_41:
    v32 = (WebCore::OpenType::MathVariants *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::OpenType::MathVariants::mathGlyphConstruction(v32, v33, v34, v35);
  }
  v37 = &v36;
  result = (char *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v29])(&v37, v28 + 8);
LABEL_33:
  v30 = (uint64_t)&v25[bswap32(v27) >> 16];
  if (v30 + 16 >= (unint64_t)result && (unint64_t)(v30 + 16 - (_QWORD)result) <= *(_QWORD *)(v26 + 48))
    return (char *)WebCore::OpenType::GlyphAssembly::getAssemblyParts(v30, v26, a5);
  return result;
}

char *WebCore::OpenType::MathVariants::mathGlyphConstruction(WebCore::OpenType::MathVariants *this, const WebCore::SharedBuffer *a2, unsigned int a3, int a4)
{
  char *v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int16 *v24;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  BOOL v34;
  uint64_t v36;
  unsigned int v37;
  char v38;
  unsigned int *v39;

  v8 = (char *)this + 6;
  v9 = *((unsigned __int16 *)this + 3);
  v10 = (char *)this + 8;
  v11 = *((unsigned __int16 *)this + 4);
  if (*((_DWORD *)a2 + 5))
  {
    v12 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
    v13 = *(unsigned int *)(v12 + 24);
    if ((_DWORD)v13 == -1)
      goto LABEL_38;
    v39 = &v37;
    v14 = ((uint64_t (*)(unsigned int **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v39, v12 + 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = (char *)this + 2 * (bswap32(v11) >> 16) + 2 * (unint64_t)(bswap32(v9) >> 16) + 10;
  v16 = *((_QWORD *)a2 + 6);
  v34 = (unint64_t)v15 >= v14;
  v17 = &v15[-v14];
  if (!v34 || (unint64_t)v17 > v16)
    return 0;
  v19 = 4;
  if (a4)
    v19 = 2;
  v20 = *(unsigned __int16 *)((char *)this + v19);
  if (!*(_WORD *)((char *)this + v19))
    return 0;
  if (*((_DWORD *)a2 + 5))
  {
    v21 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
    v22 = *(unsigned int *)(v21 + 24);
    if ((_DWORD)v22 == -1)
      goto LABEL_38;
    v39 = &v37;
    v23 = ((uint64_t (*)(unsigned int **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v22])(&v39, v21 + 8);
    v16 = *((_QWORD *)a2 + 6);
  }
  else
  {
    v23 = 0;
  }
  v24 = (unsigned __int16 *)((char *)this + __rev16(v20));
  if ((unint64_t)(v24 + 1) < v23 || (unint64_t)v24 - v23 + 2 > v16)
    return 0;
  v37 = 0;
  if (!WebCore::OpenType::TableWithCoverage::getCoverageIndex((uint64_t)a2, v24, a3, &v37))
    return 0;
  v26 = (unsigned __int16 *)(a4 ? v8 : v10);
  v27 = bswap32(*v26);
  v28 = v37;
  if (v37 >= HIWORD(v27))
    return 0;
  if ((a4 & 1) == 0)
    v28 = v37 + (bswap32(*(unsigned __int16 *)v8) >> 16);
  v29 = *((unsigned __int16 *)this + v28 + 5);
  if (!*((_DWORD *)a2 + 5))
  {
    v32 = 0;
    goto LABEL_28;
  }
  v30 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  v31 = *(unsigned int *)(v30 + 24);
  if ((_DWORD)v31 == -1)
  {
LABEL_38:
    v36 = std::__throw_bad_variant_access[abi:sn180100]();
    return (char *)WebCore::OpenType::MathGlyphConstruction::getSizeVariants(v36);
  }
  v39 = (unsigned int *)&v38;
  v32 = ((uint64_t (*)(unsigned int **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v31])(&v39, v30 + 8);
LABEL_28:
  v33 = (char *)this + (bswap32(v29) >> 16);
  v34 = (unint64_t)&v33[-v32 + 8] <= *((_QWORD *)a2 + 6) && (unint64_t)(v33 + 8) >= v32;
  if (v34)
    return v33;
  else
    return 0;
}

void WebCore::OpenType::MathGlyphConstruction::getSizeVariants(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  _WORD *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned int v26;
  WebCore::ISOStringBox *v27;
  char v28;
  char *v29;

  v6 = *(unsigned __int16 *)(a1 + 2);
  if (*(_DWORD *)(a2 + 20))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    v8 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v8 == -1)
    {
      v27 = (WebCore::ISOStringBox *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::ISOStringBox::~ISOStringBox(v27);
      return;
    }
    v29 = &v28;
    v9 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v29, v7 + 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = __rev16(v6);
  v11 = a1 + 4 * v10 + 4;
  v12 = v11 >= v9;
  v13 = v11 - v9;
  if (v12 && v13 <= *(_QWORD *)(a2 + 48))
  {
    v15 = *(unsigned int *)(a3 + 12);
    if (v15 < v10)
    {
      v16 = *(unsigned int *)(a3 + 8);
      if (v16 < v10)
      {
        v17 = *(_WORD **)a3;
        v18 = v16 + (v16 >> 2);
        v19 = v18 >= 0x10 ? v18 + 1 : 16;
        v20 = v19 <= v10 ? v10 : v19;
        v21 = (void *)WTF::fastMalloc((WTF *)(2 * v20));
        *(_DWORD *)(a3 + 8) = v20;
        *(_QWORD *)a3 = v21;
        memcpy(v21, v17, 2 * v15);
        if (v17)
        {
          if (*(_WORD **)a3 == v17)
          {
            *(_QWORD *)a3 = 0;
            *(_DWORD *)(a3 + 8) = 0;
          }
          WTF::fastFree((WTF *)v17, v22);
        }
      }
    }
    *(_DWORD *)(a3 + 12) = v10;
    if (v6)
    {
      v23 = *(_WORD **)a3;
      if (v10 <= 1)
        v24 = 1;
      else
        v24 = v10;
      v25 = (unsigned __int16 *)(a1 + 4);
      do
      {
        v26 = *v25;
        v25 += 2;
        *v23++ = bswap32(v26) >> 16;
        --v24;
      }
      while (v24);
    }
  }
}

uint64_t WebCore::ISOStringBox::parse(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v18;
  WTF *v19;
  unint64_t v20;
  unsigned int v21;
  char v22;
  WTF::StringImpl *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  _BYTE *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  char v41;

  v40 = *a3;
  if (!WebCore::ISOBox::parse(a1, a2, &v40))
    return 0;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = v40 - *a3;
  v9 = (WTF *)(v7 - v8);
  if (v7 == v8)
  {
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v10 += 2;
    v11 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v6);
      else
        *(_DWORD *)v11 -= 2;
    }
    return 1;
  }
  v13 = *(_QWORD *)(a2 + 32);
  if (!v13)
    goto LABEL_16;
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    goto LABEL_61;
  v15 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v15 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v14 & 0x3FFFFFFFFLL) + v15))
    goto LABEL_61;
  v16 = *(_BYTE *)(a2 + 6);
  if ((v16 & 3) == 0)
  {
    v13 = *(_QWORD *)(a2 + 16);
    goto LABEL_16;
  }
  if (*(_BYTE *)(v13 + 64) && (v36 = *(_QWORD *)(v13 + 32)) != 0)
  {
    v31 = atomic_load((unint64_t *)(v36 + 32));
    v16 = *(_BYTE *)(a2 + 6);
  }
  else
  {
    v31 = *(_QWORD *)(v13 + 48);
  }
  v32 = *(_QWORD *)(a2 + 8);
  if ((v16 & 4) == 0)
  {
    v33 = *(_QWORD *)(a2 + 16) + v32 <= v31 && v31 >= v32;
    if (v33)
      v13 = 0;
    else
      v13 = *(_QWORD *)(a2 + 16);
    goto LABEL_16;
  }
  v33 = v31 >= v32;
  v34 = v31 - v32;
  if (v33)
  {
LABEL_61:
    v13 = 0;
    goto LABEL_16;
  }
  if ((*(_BYTE *)(a2 + 4) - 4) > 7u)
    LOBYTE(v35) = 0;
  else
    v35 = qword_1969F8D10[(char)(*(_BYTE *)(a2 + 4) - 4)];
  v13 = (-1 << v35) & v34;
LABEL_16:
  if ((unint64_t)v9 > v13 - (unint64_t)v40)
    return 0;
  v37 = a1;
  v38 = a3;
  if ((unint64_t)v9 >> 32)
  {
LABEL_69:
    __break(0xC471u);
    JUMPOUT(0x19626F79CLL);
  }
  v18 = (void *)WTF::fastMalloc(v9);
  v19 = 0;
  v20 = v9;
  do
  {
    v41 = 0;
    v21 = v40;
    v22 = JSC::DataView::get<signed char>(a2, v40, 0, &v41);
    v12 = v41 != 0;
    if (!v41)
    {
      v40 = v21;
      goto LABEL_45;
    }
    if (v21 == -1)
      goto LABEL_69;
    v24 = v22;
    v40 = v21 + 1;
    if (v19 == v20)
    {
      v25 = v20 + (v20 >> 2);
      if (v25 >= 0x10)
        v26 = v25 + 1;
      else
        v26 = 16;
      if (v26 <= (unint64_t)v19 + 1)
        v20 = v19 + 1;
      else
        v20 = v26;
      if (HIDWORD(v20))
      {
        __break(0xC471u);
        JUMPOUT(0x19626F830);
      }
      v27 = (void *)WTF::fastMalloc((WTF *)v20);
      memcpy(v27, v18, v19);
      if (v27 == v18)
        v20 = 0;
      else
        v20 = v20;
      if (v27 == v18)
        v29 = 0;
      else
        v29 = v27;
      WTF::fastFree((WTF *)v18, v28);
      v18 = v27;
    }
    else
    {
      v29 = v18;
    }
    v29[v19] = v24;
    v19 = (WTF *)((char *)v19 + 1);
  }
  while (v9 != v19);
  WTF::String::fromUTF8();
  v30 = *(WTF::StringImpl **)(v37 + 40);
  *(_QWORD *)(v37 + 40) = v39;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v23);
    else
      *(_DWORD *)v30 -= 2;
  }
  *v38 = v40;
LABEL_45:
  WTF::fastFree((WTF *)v18, v23);
  return v12;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::paragraphStyleWithCompositionLanguageNone(void)::$_0 &&>>()
{
  CTParagraphStyleRef v0;

  v0 = CTParagraphStyleCreate(0, 0);
  WebCore::paragraphStyleWithCompositionLanguageNone(void)::paragraphStyle = (uint64_t)v0;
  if (v0)
    CFRetain(v0);
  return CTParagraphStyleSetCompositionLanguage();
}

CFNumberRef std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::zeroValue(void)::$_0 &&>>()
{
  CFNumberRef result;
  int valuePtr;

  valuePtr = 0;
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
  _MergedGlobals_235 = (uint64_t)result;
  return result;
}

uint64_t WebCore::OpenType::TableWithCoverage::getCoverageIndex(uint64_t a1, unsigned __int16 *a2, unsigned int a3, unsigned int *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  BOOL v13;
  char *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  char *v47;

  v8 = bswap32(*a2) >> 16;
  if (v8 == 2)
  {
    if (*(_DWORD *)(a1 + 20))
    {
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      v29 = *(unsigned int *)(v28 + 24);
      if ((_DWORD)v29 == -1)
        goto LABEL_54;
      v47 = &v46;
      v30 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v29])(&v47, v28 + 8);
    }
    else
    {
      v30 = 0;
    }
    result = 0;
    v31 = (char *)a2 - v30 + 10;
    if ((unint64_t)(a2 + 5) < v30)
      return result;
    v32 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v31 > v32)
      return result;
    v33 = a2[1];
    if (*(_DWORD *)(a1 + 20))
    {
      v34 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      v35 = *(unsigned int *)(v34 + 24);
      if ((_DWORD)v35 == -1)
        goto LABEL_54;
      v47 = &v46;
      v36 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v35])(&v47, v34 + 8);
      v32 = *(_QWORD *)(a1 + 48);
    }
    else
    {
      v36 = 0;
    }
    v37 = __rev16(v33);
    v38 = (unint64_t)&a2[3 * v37 + 2];
    v13 = v38 >= v36;
    v39 = v38 - v36;
    if (v13 && v39 <= v32 && v33 != 0)
    {
      v42 = 0;
      while (1)
      {
        v43 = (v42 + v37) >> 1;
        if (a3 <= bswap32(a2[3 * v43 + 3]) >> 16)
        {
          v44 = bswap32(a2[3 * v43 + 2]) >> 16;
          v37 = (v42 + v37) >> 1;
          if (v44 <= a3)
          {
            v26 = a3 - v44 + (bswap32(a2[3 * v43 + 4]) >> 16);
            goto LABEL_49;
          }
        }
        else
        {
          v42 = v43 + 1;
        }
        if (v42 >= v37)
          return 0;
      }
    }
    return 0;
  }
  if (v8 != 1)
    return 0;
  if (*(_DWORD *)(a1 + 20))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v10 = *(unsigned int *)(v9 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_54;
    v47 = &v46;
    v11 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v10])(&v47, v9 + 8);
  }
  else
  {
    v11 = 0;
  }
  result = 0;
  v13 = (unint64_t)(a2 + 3) >= v11;
  v14 = (char *)a2 - v11 + 6;
  if (!v13)
    return result;
  v15 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)v14 > v15)
    return result;
  v16 = a2[1];
  if (*(_DWORD *)(a1 + 20))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v18 = *(unsigned int *)(v17 + 24);
    if ((_DWORD)v18 != -1)
    {
      v47 = &v46;
      v19 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v47, v17 + 8);
      v15 = *(_QWORD *)(a1 + 48);
      goto LABEL_12;
    }
LABEL_54:
    v45 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::OpenType::GlyphAssembly::getAssemblyParts(v45);
  }
  v19 = 0;
LABEL_12:
  v20 = __rev16(v16);
  v21 = (unint64_t)&a2[v20 + 2];
  v13 = v21 >= v19;
  v22 = v21 - v19;
  if (!v13 || v22 > v15 || v16 == 0)
    return 0;
  v25 = 0;
  while (1)
  {
    v26 = (v25 + v20) >> 1;
    v27 = bswap32(a2[v26 + 2]) >> 16;
    if (v27 == a3)
      break;
    if (v27 >= a3)
      v20 = (v25 + v20) >> 1;
    else
      v25 = v26 + 1;
    if (v25 >= v20)
      return 0;
  }
LABEL_49:
  *a4 = v26;
  return 1;
}

_QWORD *WebCore::OpenType::GlyphAssembly::getAssemblyParts(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  char *v29;

  v6 = *(unsigned __int16 *)(a1 + 4);
  if (*(_DWORD *)(a2 + 20))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    v8 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v8 == -1)
    {
      v27 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::AffineTransform::makeIdentity(v27);
    }
    v29 = &v28;
    result = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v29, v7 + 8);
  }
  else
  {
    result = 0;
  }
  v10 = __rev16(v6);
  v11 = a1 + 10 * v10 + 6;
  v12 = *(_QWORD *)(a2 + 48);
  v14 = v11 >= (unint64_t)result;
  v13 = v11 - (_QWORD)result;
  if (v14)
  {
    v14 = v13 >= v12;
    v15 = v13 == v12;
  }
  else
  {
    v14 = 1;
    v15 = 0;
  }
  if (v15 || !v14)
  {
    v16 = a3[3];
    if (v16 < v10)
    {
      v17 = a3[2];
      if (v17 < v10)
      {
        v18 = *(void **)a3;
        v19 = v17 + (v17 >> 2);
        v20 = v19 >= 0x10 ? v19 + 1 : 16;
        v21 = v20 <= v10 ? v10 : v20;
        v22 = (void *)WTF::fastMalloc((WTF *)(4 * v21));
        a3[2] = v21;
        *(_QWORD *)a3 = v22;
        result = memcpy(v22, v18, 4 * v16);
        if (v18)
        {
          if (*(void **)a3 == v18)
          {
            *(_QWORD *)a3 = 0;
            a3[2] = 0;
          }
          result = (_QWORD *)WTF::fastFree((WTF *)v18, v23);
        }
      }
    }
    a3[3] = v10;
    if (v6)
    {
      if (v10 <= 1)
        v24 = 1;
      else
        v24 = v10;
      v25 = (_BYTE *)(*(_QWORD *)a3 + 2);
      v26 = a1 + 14;
      do
      {
        *((_WORD *)v25 - 1) = bswap32(*(unsigned __int16 *)(v26 - 8)) >> 16;
        *v25 = *(_BYTE *)(v26 + 1) & 1;
        v25 += 4;
        v26 += 10;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

_QWORD *WebCore::AffineTransform::makeIdentity(_QWORD *this)
{
  *this = 0x3FF0000000000000;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0x3FF0000000000000;
  this[4] = 0;
  this[5] = 0;
  return this;
}

BOOL WebCore::AffineTransform::isIdentity(WebCore::AffineTransform *this)
{
  return *(double *)this == 1.0
      && *((double *)this + 1) == 0.0
      && *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 1.0
      && *((double *)this + 4) == 0.0
      && *((double *)this + 5) == 0.0;
}

long double WebCore::AffineTransform::xScale(WebCore::AffineTransform *this)
{
  return hypot(*(long double *)this, *((long double *)this + 1));
}

long double WebCore::AffineTransform::yScale(WebCore::AffineTransform *this)
{
  return hypot(*((long double *)this + 2), *((long double *)this + 3));
}

BOOL WebCore::AffineTransform::isInvertible(WebCore::AffineTransform *this)
{
  double v1;

  v1 = fabs(*(double *)this * *((double *)this + 3) - *((double *)this + 1) * *((double *)this + 2));
  return (unint64_t)(*(_QWORD *)&v1 - 1) < 0xFFFFFFFFFFFFFLL
      || (unint64_t)(*(_QWORD *)&v1 - 0x10000000000000) >> 53 < 0x3FF;
}

float64x2_t *WebCore::AffineTransform::inverse@<X0>(float64x2_t *this@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  BOOL v9;
  double v10;
  double v11;
  char v12;

  v2 = this->f64[0];
  v3 = this->f64[1];
  v4 = this[1].f64[0];
  v5 = this[1].f64[1];
  v6 = this->f64[0] * v5 - v3 * v4;
  v7 = fabs(v6);
  if ((unint64_t)(*(_QWORD *)&v7 - 0x10000000000000) >> 53 >= 0x3FF
    && (unint64_t)(*(_QWORD *)&v7 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    if (v2 == 1.0 && v3 == 0.0 && (v4 == 0.0 ? (v9 = v5 == 1.0) : (v9 = 0), v9))
    {
      *(_QWORD *)a2 = 0x3FF0000000000000;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0x3FF0000000000000;
      *(float64x2_t *)(a2 + 32) = vnegq_f64(this[2]);
    }
    else
    {
      v11 = this[2].f64[0];
      v10 = this[2].f64[1];
      *(double *)a2 = v5 / v6;
      *(double *)(a2 + 8) = -v3 / v6;
      *(double *)(a2 + 16) = -v4 / v6;
      *(double *)(a2 + 24) = v2 / v6;
      *(double *)(a2 + 32) = (v4 * v10 - v5 * v11) / v6;
      *(double *)(a2 + 40) = (v3 * v11 - v2 * v10) / v6;
    }
    v12 = 1;
  }
  *(_BYTE *)(a2 + 48) = v12;
  return this;
}

double WebCore::AffineTransform::multiply(WebCore::AffineTransform *this, const WebCore::AffineTransform *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double result;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v2 = *((double *)a2 + 1);
  v3 = *((double *)this + 2);
  v4 = *((double *)this + 3);
  v5 = *((double *)this + 1);
  v6 = v2 * v3 + *(double *)a2 * *(double *)this;
  result = v2 * v4 + *(double *)a2 * v5;
  v8 = *((double *)a2 + 2);
  v9 = *((double *)a2 + 3);
  v10 = v3 * v9 + v8 * *(double *)this;
  v11 = v4 * v9 + v8 * v5;
  v12 = *((double *)a2 + 4);
  v13 = *((double *)a2 + 5);
  v14 = *((double *)this + 4) + v3 * v13 + v12 * *(double *)this;
  v15 = v4 * v13 + v12 * v5 + *((double *)this + 5);
  *(double *)this = v6;
  *((double *)this + 1) = result;
  *((double *)this + 2) = v10;
  *((double *)this + 3) = v11;
  *((double *)this + 4) = v14;
  *((double *)this + 5) = v15;
  return result;
}

WebCore::AffineTransform *WebCore::AffineTransform::rotate(float64x2_t *this, double a2)
{
  __double2 v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;

  v3 = __sincos_stret(a2 * 0.0174532925);
  v4 = this[1];
  v5 = vaddq_f64(vmlaq_f64(vmulq_f64(v4, (float64x2_t)0), (float64x2_t)0, *this), this[2]);
  v6 = vmlsq_lane_f64(vmulq_n_f64(v4, v3.__cosval), *this, v3.__sinval, 0);
  *this = vmlaq_n_f64(vmulq_n_f64(v4, v3.__sinval), *this, v3.__cosval);
  this[1] = v6;
  this[2] = v5;
  return (WebCore::AffineTransform *)this;
}

WebCore::AffineTransform *WebCore::AffineTransform::rotateRadians(float64x2_t *this, double a2)
{
  __double2 v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;

  v3 = __sincos_stret(a2);
  v4 = this[1];
  v5 = vaddq_f64(vmlaq_f64(vmulq_f64(v4, (float64x2_t)0), (float64x2_t)0, *this), this[2]);
  v6 = vmlsq_lane_f64(vmulq_n_f64(v4, v3.__cosval), *this, v3.__sinval, 0);
  *this = vmlaq_n_f64(vmulq_n_f64(v4, v3.__sinval), *this, v3.__cosval);
  this[1] = v6;
  this[2] = v5;
  return (WebCore::AffineTransform *)this;
}

float64x2_t WebCore::AffineTransform::scale(float64x2_t *this, double a2)
{
  float64x2_t v2;
  float64x2_t result;

  v2 = vmulq_n_f64(*this, a2);
  result = vmulq_n_f64(this[1], a2);
  *this = v2;
  this[1] = result;
  return result;
}

float64x2_t WebCore::AffineTransform::scale(float64x2_t *this, double a2, double a3)
{
  float64x2_t result;
  float64x2_t v4;

  result = vmulq_n_f64(*this, a2);
  v4 = vmulq_n_f64(this[1], a3);
  *this = result;
  this[1] = v4;
  return result;
}

float64x2_t WebCore::AffineTransform::scaleNonUniform(float64x2_t *this, double a2, double a3)
{
  float64x2_t result;
  float64x2_t v4;

  result = vmulq_n_f64(*this, a2);
  v4 = vmulq_n_f64(this[1], a3);
  *this = result;
  this[1] = v4;
  return result;
}

float64x2_t WebCore::AffineTransform::scale(float64x2_t *this, const WebCore::FloatSize *a2)
{
  float64x2_t result;
  float64x2_t v3;

  result = vmulq_n_f64(*this, *(float *)a2);
  v3 = vmulq_n_f64(this[1], *((float *)a2 + 1));
  *this = result;
  this[1] = v3;
  return result;
}

double WebCore::AffineTransform::translate(WebCore::AffineTransform *this, double a2, double a3)
{
  double v3;
  double v4;
  double result;
  double v6;

  v3 = *((double *)this + 1);
  v4 = *((double *)this + 2);
  if (*(double *)this == 1.0 && v3 == 0.0 && v4 == 0.0 && *((double *)this + 3) == 1.0)
  {
    *((double *)this + 4) = *((double *)this + 4) + a2;
  }
  else
  {
    v6 = *((double *)this + 3);
    *((double *)this + 4) = *((double *)this + 4) + v4 * a3 + a2 * *(double *)this;
    a3 = v6 * a3 + a2 * v3;
  }
  result = a3 + *((double *)this + 5);
  *((double *)this + 5) = result;
  return result;
}

double WebCore::AffineTransform::translate(WebCore::AffineTransform *this, const WebCore::FloatPoint *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  BOOL v7;
  double result;

  v2 = *(float *)a2;
  v3 = *((float *)a2 + 1);
  v4 = *((double *)this + 1);
  v6 = *((double *)this + 2);
  v5 = *((double *)this + 3);
  if (*(double *)this == 1.0 && v4 == 0.0 && (v6 == 0.0 ? (v7 = v5 == 1.0) : (v7 = 0), v7))
  {
    *((double *)this + 4) = *((double *)this + 4) + v2;
  }
  else
  {
    *((double *)this + 4) = v6 * v3 + v2 * *(double *)this + *((double *)this + 4);
    v3 = v5 * v3 + v2 * v4;
  }
  result = v3 + *((double *)this + 5);
  *((double *)this + 5) = result;
  return result;
}

double WebCore::AffineTransform::translate(WebCore::AffineTransform *this, const WebCore::FloatSize *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  BOOL v7;
  double result;

  v2 = *(float *)a2;
  v3 = *((float *)a2 + 1);
  v4 = *((double *)this + 1);
  v6 = *((double *)this + 2);
  v5 = *((double *)this + 3);
  if (*(double *)this == 1.0 && v4 == 0.0 && (v6 == 0.0 ? (v7 = v5 == 1.0) : (v7 = 0), v7))
  {
    *((double *)this + 4) = *((double *)this + 4) + v2;
  }
  else
  {
    *((double *)this + 4) = v6 * v3 + v2 * *(double *)this + *((double *)this + 4);
    v3 = v5 * v3 + v2 * v4;
  }
  result = v3 + *((double *)this + 5);
  *((double *)this + 5) = result;
  return result;
}

float64x2_t WebCore::AffineTransform::flipX(float64x2_t *this)
{
  float64x2_t result;

  result = vnegq_f64(*this);
  *this = result;
  return result;
}

float64x2_t WebCore::AffineTransform::flipY(float64x2_t *this)
{
  float64x2_t result;

  result = vnegq_f64(this[1]);
  this[1] = result;
  return result;
}

double WebCore::AffineTransform::shear(WebCore::AffineTransform *this, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double result;

  v3 = *(double *)this;
  v4 = *((double *)this + 1);
  v5 = *((double *)this + 2);
  v6 = *((double *)this + 3);
  *(double *)this = *(double *)this + a3 * v5;
  *((double *)this + 1) = v4 + a3 * v6;
  v7 = v5 + a2 * v3;
  result = v6 + a2 * v4;
  *((double *)this + 2) = v7;
  *((double *)this + 3) = result;
  return result;
}

WebCore::AffineTransform *WebCore::AffineTransform::skew(WebCore::AffineTransform *this, double a2, double a3)
{
  double v5;
  long double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v5 = tan(a2 * 0.0174532925);
  v6 = tan(a3 * 0.0174532925);
  v7 = *(double *)this;
  v8 = *((double *)this + 1);
  v9 = *((double *)this + 2);
  v10 = *((double *)this + 3);
  *(long double *)this = *(double *)this + v6 * v9;
  *((long double *)this + 1) = v8 + v6 * v10;
  *((double *)this + 2) = v9 + v5 * v7;
  *((double *)this + 3) = v10 + v5 * v8;
  return this;
}

WebCore::AffineTransform *WebCore::AffineTransform::skewX(WebCore::AffineTransform *this, double a2)
{
  long double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v3 = tan(a2 * 0.0174532925);
  v4 = *(double *)this;
  v5 = *((double *)this + 1);
  v6 = *((double *)this + 2);
  v7 = *((double *)this + 3);
  *(double *)this = *(double *)this + v6 * 0.0;
  *((double *)this + 1) = v5 + v7 * 0.0;
  *((long double *)this + 2) = v6 + v3 * v4;
  *((long double *)this + 3) = v7 + v3 * v5;
  return this;
}

WebCore::AffineTransform *WebCore::AffineTransform::skewY(WebCore::AffineTransform *this, double a2)
{
  long double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v3 = tan(a2 * 0.0174532925);
  v4 = *(double *)this;
  v5 = *((double *)this + 1);
  v6 = *((double *)this + 2);
  v7 = *((double *)this + 3);
  *(long double *)this = *(double *)this + v3 * v6;
  *((long double *)this + 1) = v5 + v3 * v7;
  *((double *)this + 2) = v6 + v4 * 0.0;
  *((double *)this + 3) = v7 + v5 * 0.0;
  return this;
}

float64x2_t WebCore::makeMapBetweenRects@<Q0>(float32x2_t *this@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  float32x2_t v4;
  float32x2_t v5;
  float64x2_t result;

  v4 = a2[1];
  v5 = this[1];
  *(float64x2_t *)(a3 + 32) = vaddq_f64(vcvtq_f64_f32(vsub_f32(*a2, *this)), (float64x2_t)0);
  result = vcvtq_f64_f32(vdiv_f32(v4, v5));
  *(float64_t *)a3 = result.f64[0];
  *(float64x2_t *)(a3 + 8) = vmulq_f64(result, (float64x2_t)0);
  *(float64_t *)(a3 + 24) = result.f64[1];
  return result;
}

unint64_t WebCore::AffineTransform::mapPoint(WebCore::AffineTransform *this, const WebCore::IntPoint *a2)
{
  return llround(*((double *)this + 4)+ *((double *)this + 2) * (double)*((int *)a2 + 1)+ *(double *)this * (double)*(int *)a2) | ((unint64_t)llround(*((double *)this + 5) + *((double *)this + 3) * (double)*((int *)a2 + 1) + *((double *)this + 1) * (double)*(int *)a2) << 32);
}

float32x2_t WebCore::AffineTransform::mapPoint(float64x2_t *this, const WebCore::FloatPoint *a2)
{
  return vcvt_f32_f64(vaddq_f64(this[2], vmlaq_n_f64(vmulq_n_f64(this[1], *((float *)a2 + 1)), *this, *(float *)a2)));
}

unint64_t WebCore::AffineTransform::mapSize(WebCore::AffineTransform *this, const WebCore::IntSize *a2)
{
  double v4;
  double v5;

  v4 = (double)*(int *)a2;
  v5 = hypot(*(long double *)this, *((long double *)this + 1)) * v4;
  return llround(v5) | ((unint64_t)llround(hypot(*((long double *)this + 2), *((long double *)this + 3))* (double)*((int *)a2 + 1)) << 32);
}

float WebCore::AffineTransform::mapSize(WebCore::AffineTransform *this, const WebCore::FloatSize *a2)
{
  double v3;
  long double v4;

  v3 = *(float *)a2;
  v4 = hypot(*(long double *)this, *((long double *)this + 1)) * v3;
  hypot(*((long double *)this + 2), *((long double *)this + 3));
  return v4;
}

uint64_t WebCore::AffineTransform::mapRect(WebCore::AffineTransform *this, const WebCore::IntRect *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v14[4];

  v2 = (float)*((int *)a2 + 1);
  v14[0] = (float)*(int *)a2;
  v14[1] = v2;
  v3 = (float)*((int *)a2 + 3);
  v14[2] = (float)*((int *)a2 + 2);
  v14[3] = v3;
  v5 = floorf(WebCore::AffineTransform::mapRect(this, (const WebCore::FloatRect *)v14));
  v6 = 2147500000.0;
  if (v5 < 2147500000.0)
  {
    v6 = -2147500000.0;
    if (v5 > -2147500000.0)
      v6 = (float)(int)v5;
  }
  v7 = floorf(v4);
  v8 = 2147500000.0;
  if (v7 < 2147500000.0)
  {
    v8 = -2147500000.0;
    if (v7 > -2147500000.0)
      v8 = (float)(int)v7;
  }
  v9 = 0x7FFFFFFFLL;
  v10 = 0x80000000;
  if (v6 > -2147500000.0)
    v10 = (int)v6;
  if (v6 < 2147500000.0)
    v9 = v10;
  v11 = 0x7FFFFFFF00000000;
  v12 = 0x8000000000000000;
  if (v8 > -2147500000.0)
    v12 = (unint64_t)(int)v8 << 32;
  if (v8 < 2147500000.0)
    v11 = v12;
  return v11 | v9;
}

float32_t WebCore::AffineTransform::mapQuad@<S0>(float64x2_t *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t v3;
  double v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float32_t v26;

  v4 = this->f64[0];
  v3.i64[0] = *(_QWORD *)&this->f64[1];
  if (this->f64[0] == 1.0 && *(double *)v3.i64 == 0.0 && this[1].f64[0] == 0.0 && this[1].f64[1] == 1.0)
  {
    v5 = a2[1];
    *a3 = *a2;
    a3[1] = v5;
    v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(this[2]), this[2]);
    v3 = vaddq_f32(*a3, v6);
    v7 = vaddq_f32(a3[1], v6);
    *a3 = v3;
    a3[1] = v7;
  }
  else
  {
    v8 = a2->f32[0];
    v9 = a2->f32[1];
    v10 = this[1].f64[0];
    v11 = this[1].f64[1];
    v12 = this[2].f64[0];
    v13 = this[2].f64[1];
    v14 = v12 + v10 * v9 + v4 * v8;
    v15 = v13 + v11 * v9 + *(double *)v3.i64 * v8;
    *(float *)&v9 = v14;
    *(float *)&v15 = v15;
    a3->i32[0] = LODWORD(v9);
    a3->i32[1] = LODWORD(v15);
    v16 = a2->f32[2];
    v17 = a2->f32[3];
    v18 = v12 + v10 * v17 + v4 * v16;
    v19 = v13 + v11 * v17 + *(double *)v3.i64 * v16;
    *(float *)&v17 = v18;
    *(float *)&v19 = v19;
    a3->i32[2] = LODWORD(v17);
    a3->i32[3] = LODWORD(v19);
    v20 = a2[1].f32[0];
    v21 = a2[1].f32[1];
    v22 = v12 + v10 * v21 + v4 * v20;
    v23 = v13 + v11 * v21 + *(double *)v3.i64 * v20;
    *(float *)&v21 = v22;
    *(float *)&v23 = v23;
    a3[1].i32[0] = LODWORD(v21);
    a3[1].i32[1] = LODWORD(v23);
    v24 = a2[1].f32[2];
    v25 = a2[1].f32[3];
    v26 = v12 + v10 * v25 + v4 * v24;
    v3.f32[0] = v13 + v11 * v25 + *(double *)v3.i64 * v24;
    a3[1].f32[2] = v26;
    a3[1].i32[3] = v3.i32[0];
  }
  return v3.f32[0];
}

uint64_t WebCore::AffineTransform::mapRegion@<X0>(WebCore::AffineTransform *this@<X0>, const WebCore::Region *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v6;
  int *v7;
  int *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  float v31;
  float v32;
  float v33;
  int v34;
  int v35;
  float v36;
  int v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  WTF *v45;
  WTF *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;

  if (*(double *)this == 1.0
    && *((double *)this + 1) == 0.0
    && *((double *)this + 2) == 0.0
    && *((double *)this + 3) == 1.0)
  {
    result = WebCore::Region::Region(a3, a2);
    v31 = *((double *)this + 4);
    v33 = roundf(v31);
    v34 = 0x7FFFFFFF;
    if (v33 > -2147500000.0)
      v35 = (int)v33;
    else
      v35 = 0x80000000;
    if (v33 >= 2147500000.0)
      v35 = 0x7FFFFFFF;
    v32 = *((double *)this + 5);
    v36 = roundf(v32);
    if (v36 < 2147500000.0)
    {
      if (v36 <= -2147500000.0)
        v34 = 0x80000000;
      else
        v34 = (int)v36;
    }
    v37 = *(_DWORD *)(a3 + 4) + v34;
    *(_DWORD *)a3 += v35;
    *(_DWORD *)(a3 + 4) = v37;
    v38 = *(uint64_t **)(a3 + 16);
    if (v38)
    {
      if (*((_DWORD *)v38 + 3))
      {
        v39 = 0;
        v40 = *v38;
        do
          *(_DWORD *)(v40 + 4 * v39++) += v35;
        while (v39 < *((unsigned int *)v38 + 3));
      }
      v41 = *((unsigned int *)v38 + 39);
      if ((_DWORD)v41)
      {
        v42 = (_DWORD *)v38[18];
        do
        {
          *v42 += v34;
          v42 += 4;
          --v41;
        }
        while (v41);
      }
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = WebCore::Region::rects((uint64_t)a2, (uint64_t)&v46);
    v7 = (int *)v46;
    if (v48)
    {
      v8 = (int *)((char *)v46 + 16 * v48);
      do
      {
        *(float *)&v43 = (float)*v7;
        *((float *)&v43 + 1) = (float)v7[1];
        *(float *)&v44 = (float)v7[2];
        *((float *)&v44 + 1) = (float)v7[3];
        v9 = WebCore::AffineTransform::mapRect(this, (const WebCore::FloatRect *)&v43);
        v13 = floorf(v9);
        v14 = 2147500000.0;
        if (v13 < 2147500000.0)
        {
          v14 = -2147500000.0;
          if (v13 > -2147500000.0)
            v14 = (float)(int)v13;
        }
        v15 = floorf(v10);
        v16 = 2147500000.0;
        if (v15 < 2147500000.0)
        {
          v16 = -2147500000.0;
          if (v15 > -2147500000.0)
            v16 = (float)(int)v15;
        }
        v17 = ceilf(v9 + v11);
        v18 = 2147500000.0;
        if (v17 < 2147500000.0)
        {
          v18 = -2147500000.0;
          if (v17 > -2147500000.0)
            v18 = (float)(int)v17;
        }
        v19 = ceilf(v10 + v12);
        v20 = 2147500000.0;
        if (v19 < 2147500000.0)
        {
          v20 = -2147500000.0;
          if (v19 > -2147500000.0)
            v20 = (float)(int)v19;
        }
        v21 = (int)v14;
        if (v14 <= -2147500000.0)
          v21 = 0x80000000;
        if (v14 >= 2147500000.0)
          v21 = 0x7FFFFFFFLL;
        v22 = (unint64_t)(int)v16 << 32;
        if (v16 <= -2147500000.0)
          v22 = 0x8000000000000000;
        if (v16 >= 2147500000.0)
          v22 = 0x7FFFFFFF00000000;
        v23 = v18 - v14;
        v24 = v20 - v16;
        v25 = (int)v23;
        if (v23 <= -2147500000.0)
          v25 = 0x80000000;
        if (v23 >= 2147500000.0)
          v25 = 0x7FFFFFFFLL;
        if (v24 >= 2147500000.0)
        {
          v26 = 0x7FFFFFFF00000000;
        }
        else if (v24 <= -2147500000.0)
        {
          v26 = 0x8000000000000000;
        }
        else
        {
          v26 = (unint64_t)(int)v24 << 32;
        }
        v43 = v22 | v21;
        v44 = v26 | v25;
        v45 = 0;
        result = (uint64_t)WebCore::Region::unite((WTF *)a3, (const WebCore::Region *)&v43);
        v27 = v45;
        v45 = 0;
        if (v27)
        {
          v28 = (WTF *)*((_QWORD *)v27 + 18);
          if ((WTF *)((char *)v27 + 160) != v28 && v28)
          {
            *((_QWORD *)v27 + 18) = 0;
            *((_DWORD *)v27 + 38) = 0;
            WTF::fastFree(v28, v6);
          }
          v29 = *(WTF **)v27;
          if ((WTF *)((char *)v27 + 16) != *(WTF **)v27 && v29)
          {
            *(_QWORD *)v27 = 0;
            *((_DWORD *)v27 + 2) = 0;
            WTF::fastFree(v29, v6);
          }
          result = WTF::fastFree(v27, v6);
        }
        v7 += 4;
      }
      while (v7 != v8);
      v7 = (int *)v46;
    }
    if (&v49 != (uint64_t *)v7 && v7 != 0)
    {
      v46 = 0;
      v47 = 0;
      return WTF::fastFree((WTF *)v7, v6);
    }
  }
  return result;
}

double WebCore::AffineTransform::blend(double *a1, uint64_t a2, int a3, double a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  __double2 v29;
  double result;
  double v31;
  double v32;
  long double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double __x;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;

  WebCore::AffineTransform::decompose(a2, (uint64_t)&v40);
  WebCore::AffineTransform::decompose((uint64_t)a1, (uint64_t)&v31);
  v7 = v32;
  v9 = v40;
  v8 = v41;
  if ((v40 >= 0.0 || v32 >= 0.0) && (v41 >= 0.0 || v31 >= 0.0))
  {
    v10 = __x;
  }
  else
  {
    v9 = -v40;
    v8 = -v41;
    v10 = __x + dbl_1969F8D50[__x < 0.0];
  }
  v11 = fmod(v10, 6.28318531);
  v12 = fmod(v33, 6.28318531);
  if (vabdd_f64(v11, v12) > 3.14159265)
  {
    if (v11 <= v12)
      v12 = v12 + -6.28318531;
    else
      v11 = v11 + -6.28318531;
  }
  v13 = v9 + a4 * (v31 - v9);
  v14 = v11 + a4 * (v12 - v11);
  v15 = v43 + a4 * (v34 - v43);
  v16 = v44 + a4 * (v35 - v44);
  v17 = v45 + a4 * (v36 - v45);
  v18 = v46 + a4 * (v37 - v46);
  v19 = v47 + a4 * (v38 - v47);
  v20 = v48 + a4 * (v39 - v48);
  if (a3)
    v21 = v8 + a4 * (v7 - v8) + v8 + a4 * (v7 - v8);
  else
    v21 = v8 + a4 * (v7 - v8);
  if (a3)
    v22 = v13 + v13;
  else
    v22 = v13;
  if (a3)
  {
    v14 = v14 + v14;
    v23 = v20 + v20;
  }
  else
  {
    v23 = v20;
  }
  if (a3)
    v24 = v19 + v19;
  else
    v24 = v19;
  if (a3)
    v25 = v18 + v18;
  else
    v25 = v18;
  if (a3)
    v26 = v17 + v17;
  else
    v26 = v17;
  if (a3)
    v27 = v16 + v16;
  else
    v27 = v16;
  if (a3)
    v28 = v15 + v15;
  else
    v28 = v15;
  v29 = __sincos_stret(v14);
  a1[4] = v24 + v26 * 0.0 + v28 * 0.0;
  a1[5] = v23 + v25 * 0.0 + v27 * 0.0;
  *a1 = v22 * (v29.__sinval * v26 + v29.__cosval * v28);
  a1[1] = v22 * (v29.__sinval * v25 + v29.__cosval * v27);
  a1[2] = v21 * (v29.__cosval * v26 - v29.__sinval * v28);
  result = v21 * (v29.__cosval * v25 - v29.__sinval * v27);
  a1[3] = result;
  return result;
}

uint64_t WebCore::AffineTransform::decompose(uint64_t a1, uint64_t a2)
{
  double v3;
  long double v4;
  long double v5;
  long double v6;
  double v7;
  double v8;
  double v9;
  long double v10;
  long double v11;
  long double v12;
  long double v13;
  double v14;
  __double2 v15;
  double v17;

  v3 = *(double *)a1;
  v4 = *(double *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v6 = *(double *)(a1 + 24);
  v7 = *(double *)(a1 + 32);
  v17 = *(double *)(a1 + 40);
  v8 = hypot(*(long double *)a1, v4);
  v9 = hypot(v5, v6);
  if (v3 * v6 - v5 * v4 < 0.0)
  {
    if (v3 < v6)
      v8 = -v8;
    else
      v9 = -v9;
  }
  v10 = v3 * (1.0 / v8);
  v11 = v4 * (1.0 / v8);
  v12 = v5 * (1.0 / v9);
  v13 = v6 * (1.0 / v9);
  v14 = atan2(v11, v10);
  v15 = __sincos_stret(v14);
  *(double *)a2 = v8;
  *(double *)(a2 + 8) = v9;
  *(double *)(a2 + 16) = v14;
  *(long double *)(a2 + 24) = v15.__cosval * v10 - v15.__sinval * v12;
  *(long double *)(a2 + 32) = v15.__cosval * v11 - v15.__sinval * v13;
  *(long double *)(a2 + 40) = v12 * v15.__cosval + v15.__sinval * v10;
  *(long double *)(a2 + 48) = v13 * v15.__cosval + v15.__sinval * v11;
  *(long double *)(a2 + 56) = v7 + v12 * 0.0 + v10 * 0.0;
  *(long double *)(a2 + 64) = v17 + v13 * 0.0 + v11 * 0.0;
  return 1;
}

__n128 WebCore::AffineTransform::toTransformationMatrix@<Q0>(WebCore::AffineTransform *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *((_OWORD *)this + 1);
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 64) = constinit_13;
  *(_OWORD *)(a2 + 80) = unk_1969F8D70;
  result = *((__n128 *)this + 2);
  *(__n128 *)(a2 + 96) = result;
  *(_OWORD *)(a2 + 112) = xmmword_1968A14C0;
  return result;
}

uint64_t WebCore::operator<<(uint64_t a1, float64x2_t *a2)
{
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*a2, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(a2[1], (float64x2_t)xmmword_1968A14C0))))) & 1) != 0|| a2[2].f64[0] != 0.0|| a2[2].f64[1] != 0.0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::operator<<();
  return a1;
}

uint64_t WebCore::IdentityTransformOperation::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 21;
  *(_QWORD *)result = off_1E3417138;
  *a1 = result;
  return result;
}

__n128 WebCore::Matrix3DTransformOperation::create@<Q0>(WebCore::Matrix3DTransformOperation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v5 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v5 + 8) = 1;
  *(_BYTE *)(v5 + 12) = 19;
  *(_QWORD *)v5 = off_1E3416D38;
  v6 = *((_OWORD *)this + 4);
  v7 = *((_OWORD *)this + 5);
  v8 = *((_OWORD *)this + 7);
  *(_OWORD *)(v5 + 112) = *((_OWORD *)this + 6);
  *(_OWORD *)(v5 + 128) = v8;
  *(_OWORD *)(v5 + 80) = v6;
  *(_OWORD *)(v5 + 96) = v7;
  result = *(__n128 *)this;
  v10 = *((_OWORD *)this + 1);
  v11 = *((_OWORD *)this + 3);
  *(_OWORD *)(v5 + 48) = *((_OWORD *)this + 2);
  *(_OWORD *)(v5 + 64) = v11;
  *(__n128 *)(v5 + 16) = result;
  *(_OWORD *)(v5 + 32) = v10;
  *a2 = v5;
  return result;
}

uint64_t WebCore::Matrix3DTransformOperation::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 12);
  if (v2 != *(unsigned __int8 *)(a2 + 12))
    return 0;
  if (v2 == 19)
    return WebCore::TransformationMatrix::operator==((double *)(a1 + 16), (double *)(a2 + 16));
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Matrix3DTransformOperation::blend@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  unsigned __int8 *v9;
  const double *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  float64x2x4_t v46;
  float64x2x4_t v47;
  float64x2x4_t v48;
  float64x2x4_t v49;

  if (a2)
  {
    v9 = a2;
    if (a2[12] != *(unsigned __int8 *)(a1 + 12))
    {
      v27 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a2 + 72))(a2);
      result = WebCore::TransformOperation::sharedPrimitiveType(a1, v27);
      v9 = a2;
      if ((unsigned __int16)result <= 0xFFu)
      {
        ++*(_DWORD *)(a1 + 8);
        *a5 = a1;
        return result;
      }
    }
    v45 = 0;
    v41 = xmmword_1969F8DC0;
    v42 = unk_1969F8DD0;
    v43 = xmmword_1969F8DE0;
    v44 = unk_1969F8DF0;
    v37 = xmmword_1969F8D80;
    v38 = *(_OWORD *)algn_1969F8D90;
    v39 = xmmword_1969F8DA0;
    v40 = unk_1969F8DB0;
    v33 = (float64x2_t)xmmword_1969F8DC0;
    v34 = (float64x2_t)unk_1969F8DD0;
    v35 = (float64x2_t)xmmword_1969F8DE0;
    v36 = (float64x2_t)unk_1969F8DF0;
    v29 = (float64x2_t)xmmword_1969F8D80;
    v30 = *(float64x2_t *)algn_1969F8D90;
    v31 = (float64x2_t)xmmword_1969F8DA0;
    v32 = (float64x2_t)unk_1969F8DB0;
    (*(void (**)(unsigned __int8 *, __int128 *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v37, &v45);
  }
  else
  {
    v45 = 0;
    v41 = xmmword_1969F8DC0;
    v42 = unk_1969F8DD0;
    v43 = xmmword_1969F8DE0;
    v44 = unk_1969F8DF0;
    v37 = xmmword_1969F8D80;
    v38 = *(_OWORD *)algn_1969F8D90;
    v39 = xmmword_1969F8DA0;
    v40 = unk_1969F8DB0;
    v33 = (float64x2_t)xmmword_1969F8DC0;
    v34 = (float64x2_t)unk_1969F8DD0;
    v35 = (float64x2_t)xmmword_1969F8DE0;
    v36 = (float64x2_t)unk_1969F8DF0;
    v29 = (float64x2_t)xmmword_1969F8D80;
    v30 = *(float64x2_t *)algn_1969F8D90;
    v31 = (float64x2_t)xmmword_1969F8DA0;
    v32 = (float64x2_t)unk_1969F8DB0;
  }
  v10 = (const double *)(a1 + 16);
  v11 = v29;
  v12 = v30;
  v13 = v31;
  v14 = v32;
  v15 = v33;
  v16 = v34;
  v48 = vld4q_dup_f64(v10);
  v10 += 4;
  v46 = vld4q_dup_f64(v10);
  v10 += 4;
  v29 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v48.val[0], v29), v48.val[1], v31), v48.val[2], v33), v48.val[3], v35);
  v30 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v48.val[0], v30), v48.val[1], v32), v48.val[2], v34), v48.val[3], v36);
  v49 = vld4q_dup_f64(v10);
  v10 += 4;
  v31 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v46.val[0], v11), v46.val[1], v31), v46.val[2], v33), v46.val[3], v35);
  v32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v46.val[0], v12), v46.val[1], v32), v46.val[2], v34), v46.val[3], v36);
  v47 = vld4q_dup_f64(v10);
  v33 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v49.val[0], v11), v49.val[1], v13), v49.val[2], v33), v49.val[3], v35);
  v34 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v49.val[0], v12), v49.val[1], v14), v49.val[2], v34), v49.val[3], v36);
  v35 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v47.val[0], v11), v47.val[1], v13), v47.val[2], v15), v47.val[3], v35);
  v36 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v47.val[0], v12), v47.val[1], v14), v47.val[2], v16), v47.val[3], v36);
  if (a4)
  {
    v17 = &v37;
    v18 = &v37;
    v19 = (__int128 *)&v29;
  }
  else
  {
    v17 = (__int128 *)&v29;
    v18 = (__int128 *)&v29;
    v19 = &v37;
  }
  WebCore::TransformationMatrix::blend((uint64_t)v18, (uint64_t)v19, *(unsigned __int8 *)(a3 + 9), *(double *)a3);
  result = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 19;
  *(_QWORD *)result = off_1E3416D38;
  v22 = v17[6];
  v21 = v17[7];
  v23 = v17[5];
  *(_OWORD *)(result + 80) = v17[4];
  *(_OWORD *)(result + 96) = v23;
  v25 = v17[2];
  v24 = v17[3];
  v26 = v17[1];
  *(_OWORD *)(result + 16) = *v17;
  *(_OWORD *)(result + 32) = v26;
  *(_OWORD *)(result + 112) = v22;
  *(_OWORD *)(result + 128) = v21;
  *(_OWORD *)(result + 48) = v25;
  *(_OWORD *)(result + 64) = v24;
  *a5 = result;
  return result;
}

uint64_t WebCore::Matrix3DTransformOperation::apply(WebCore::Matrix3DTransformOperation *this, float64x2_t *a2, const WebCore::FloatSize *a3)
{
  const double *v3;
  float64x2_t *v4;
  float64x2_t *v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2x4_t v15;
  float64x2x4_t v16;
  float64x2x4_t v17;
  float64x2x4_t v18;

  v3 = (const double *)((char *)this + 16);
  v4 = a2;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v5 = a2 + 4;
  v10 = *v5;
  v11 = v5[1];
  v12 = v5[2];
  v13 = v5[3];
  v17 = vld4q_dup_f64(v3);
  v3 += 4;
  v15 = vld4q_dup_f64(v3);
  v3 += 4;
  *v4 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v17.val[0], v6), v17.val[1], v8), v17.val[2], *v5), v17.val[3], v12);
  v4[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v17.val[0], v7), v17.val[1], v9), v17.val[2], v11), v17.val[3], v13);
  v4 += 2;
  v18 = vld4q_dup_f64(v3);
  v3 += 4;
  *v4 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v15.val[0], v6), v15.val[1], v8), v15.val[2], v10), v15.val[3], v12);
  v4[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v15.val[0], v7), v15.val[1], v9), v15.val[2], v11), v15.val[3], v13);
  v4 += 2;
  v16 = vld4q_dup_f64(v3);
  *v4 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v18.val[0], v6), v18.val[1], v8), v18.val[2], v10), v18.val[3], v12);
  v4[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v18.val[0], v7), v18.val[1], v9), v18.val[2], v11), v18.val[3], v13);
  v4 += 2;
  *v4 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v16.val[0], v6), v16.val[1], v8), v16.val[2], v10), v16.val[3], v12);
  v4[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v16.val[0], v7), v16.val[1], v9), v16.val[2], v11), v16.val[3], v13);
  return 0;
}

BOOL WebCore::Matrix3DTransformOperation::isRepresentableIn2D(WebCore::Matrix3DTransformOperation *this)
{
  return *((double *)this + 4) == 0.0
      && *((double *)this + 5) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 0.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 12) == 1.0
      && *((double *)this + 13) == 0.0
      && *((double *)this + 16) == 0.0
      && *((double *)this + 17) == 1.0;
}

uint64_t WebCore::Matrix3DTransformOperation::dump(WebCore::Matrix3DTransformOperation *this, WTF::TextStream *a2)
{
  WTF::TextStream *v2;

  if ((unint64_t)*((char *)this + 12) <= 0x16)
    WTF::TextStream::operator<<();
  v2 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v2);
  return WTF::TextStream::operator<<();
}

double WebCore::MatrixTransformOperation::create@<D0>(WebCore::MatrixTransformOperation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  double result;

  v5 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v5 + 8) = 1;
  *(_BYTE *)(v5 + 12) = 12;
  *(_QWORD *)v5 = off_1E3416DB0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)this;
  *(_QWORD *)(v5 + 24) = *((_QWORD *)this + 1);
  *(_QWORD *)(v5 + 32) = *((_QWORD *)this + 4);
  *(_QWORD *)(v5 + 40) = *((_QWORD *)this + 5);
  *(_QWORD *)(v5 + 48) = *((_QWORD *)this + 12);
  result = *((double *)this + 13);
  *(double *)(v5 + 56) = result;
  *a2 = v5;
  return result;
}

uint64_t WebCore::MatrixTransformOperation::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 12);
  if (v2 != *(unsigned __int8 *)(a2 + 12))
    return 0;
  if (v2 == 12)
  {
    if (*(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32)
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48))
    {
      return *(double *)(a1 + 56) == *(double *)(a2 + 56);
    }
    return 0;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MatrixTransformOperation::blend@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  __int128 v6;
  __int128 v7;
  double v8;
  int v9;
  char *v10;
  uint64_t v11;
  int v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if (!a2)
    goto LABEL_3;
  if (*(unsigned __int8 *)(a2 + 12) == *(unsigned __int8 *)(result + 12))
    goto LABEL_3;
  v17 = result;
  v16 = a4;
  v15 = a3;
  v11 = a2;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  v13 = WebCore::TransformOperation::sharedPrimitiveType(v17, v12);
  a2 = v11;
  a3 = v15;
  a4 = v16;
  v14 = v13;
  result = v17;
  if (v14 > 0xFFu)
  {
LABEL_3:
    v31 = xmmword_1969F8DC0;
    v32 = unk_1969F8DD0;
    v33 = xmmword_1969F8DE0;
    v34 = unk_1969F8DF0;
    v27 = xmmword_1969F8D80;
    v28 = *(_OWORD *)algn_1969F8D90;
    v29 = xmmword_1969F8DA0;
    v30 = unk_1969F8DB0;
    v6 = *(_OWORD *)(result + 32);
    v18 = *(_OWORD *)(result + 16);
    v19 = 0;
    v20 = 0;
    v21 = v6;
    v22 = 0;
    v23 = 0;
    v24 = constinit_13;
    v25 = unk_1969F8D70;
    v26[0] = *(_OWORD *)(result + 48);
    v26[1] = xmmword_1968A14C0;
    if (a2)
    {
      if (*(_BYTE *)(a2 + 12) != 12)
      {
        __break(0xC471u);
        JUMPOUT(0x196271664);
      }
      v7 = *(_OWORD *)(a2 + 32);
      v27 = *(_OWORD *)(a2 + 16);
      v28 = 0uLL;
      v29 = v7;
      v30 = 0u;
      v31 = 0u;
      v32 = xmmword_1968A14B0;
      v33 = *(_OWORD *)(a2 + 48);
      v34 = xmmword_1968A14C0;
    }
    v8 = *(double *)a3;
    v9 = *(unsigned __int8 *)(a3 + 9);
    if (a4)
    {
      WebCore::TransformationMatrix::blend((uint64_t)&v27, (uint64_t)&v18, v9, v8);
      result = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 12;
      *(_QWORD *)result = off_1E3416DB0;
      *(_OWORD *)(result + 16) = v27;
      *(_OWORD *)(result + 32) = v29;
      *(_QWORD *)(result + 48) = v33;
      v10 = (char *)&v33 + 8;
    }
    else
    {
      v10 = (char *)v26 + 8;
      WebCore::TransformationMatrix::blend((uint64_t)&v18, (uint64_t)&v27, v9, v8);
      result = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 12;
      *(_QWORD *)result = off_1E3416DB0;
      *(_OWORD *)(result + 16) = v18;
      *(_OWORD *)(result + 32) = v21;
      *(_QWORD *)(result + 48) = *(_QWORD *)&v26[0];
    }
    *(_QWORD *)(result + 56) = *(_QWORD *)v10;
  }
  else
  {
    ++*(_DWORD *)(v17 + 8);
  }
  *a5 = result;
  return result;
}

uint64_t WebCore::MatrixTransformOperation::dump(WebCore::MatrixTransformOperation *this, WTF::TextStream *a2)
{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::operator<<();
}

int *WebCore::PerspectiveTransformOperation::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int *result;
  unsigned int v6;
  int v7;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v4 + 8) = 1;
  *(_BYTE *)(v4 + 12) = 20;
  *(_QWORD *)v4 = off_1E3416E28;
  *(_BYTE *)(v4 + 16) = 0;
  result = (int *)(v4 + 16);
  *(_BYTE *)(v4 + 24) = 0;
  if (*(_BYTE *)(a1 + 8))
  {
    *(_DWORD *)(v4 + 16) = 0;
    *(_WORD *)(v4 + 21) = 0;
    v6 = *(unsigned __int8 *)(a1 + 4);
    *(_BYTE *)(v4 + 20) = v6;
    *(_BYTE *)(v4 + 21) = *(_BYTE *)(a1 + 5);
    if (v6 <= 0xD)
    {
      v7 = 1 << v6;
      if ((v7 & 0x7FC) != 0)
      {
        *(_BYTE *)(v4 + 22) = *(_BYTE *)(a1 + 6);
        *result = *(_DWORD *)a1;
      }
      else if ((v7 & 0x3003) != 0)
      {
        *result = 0;
      }
      else
      {
        *result = *(_DWORD *)a1;
        result = WebCore::Length::ref(result);
      }
    }
    *(_BYTE *)(v4 + 24) = 1;
  }
  *a2 = v4;
  return result;
}

uint64_t WebCore::PerspectiveTransformOperation::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  _BOOL8 v3;
  int v4;
  float v5;
  float v6;

  v2 = a1[12];
  if (v2 != a2[12])
    return 0;
  if (v2 != 20)
  {
    __break(0xC471u);
    JUMPOUT(0x196271964);
  }
  v3 = (a1[24] != 0) == (a2[24] != 0);
  if (!a1[24] || !a2[24])
    return v3;
  v4 = a1[20];
  if (v4 != a2[20] || (a1[21] != 0) != (a2[21] != 0))
    return 0;
  if (v4 == 13)
    return 1;
  if (v4 != 11)
  {
    v5 = *((float *)a1 + 4);
    if (!a1[22])
      v5 = (float)*((int *)a1 + 4);
    v6 = *((float *)a2 + 4);
    if (!a2[22])
      v6 = (float)SLODWORD(v6);
    return v5 == v6;
  }
  return WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 16), (const WebCore::Length *)(a2 + 16));
}

uint64_t WebCore::PerspectiveTransformOperation::blend@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  double v6;
  double v7;
  float *v8;
  float v9;
  float v10;
  double v11;
  WebCore::Length *v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  char v18;
  double v19;
  double v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;

  if (!a2)
    goto LABEL_3;
  if (a2[12] == *(unsigned __int8 *)(result + 12))
    goto LABEL_3;
  v30 = a3;
  v32 = result;
  v23 = a2;
  v24 = a4;
  v25 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a2 + 72))(a2);
  v26 = WebCore::TransformOperation::sharedPrimitiveType(v32, v25);
  a4 = v24;
  a2 = v23;
  v27 = v26;
  a3 = v30;
  result = v32;
  if (v27 > 0xFFu)
  {
LABEL_3:
    v6 = 0.0;
    v7 = 0.0;
    if (*(_BYTE *)(result + 24))
    {
      v8 = (float *)(result + 16);
      v9 = 1.0;
      switch(*(_BYTE *)(result + 20))
      {
        case 0:
        case 1:
        case 9:
          break;
        case 3:
          v10 = *(float *)(result + 16);
          if (!*(_BYTE *)(result + 22))
            v10 = (float)*(int *)(result + 16);
          v9 = v10 / 100.0;
          break;
        case 4:
          if (*(_BYTE *)(result + 22))
            v9 = *v8;
          else
            v9 = (float)*(int *)v8;
          break;
        case 0xB:
          v21 = a3;
          v31 = a2;
          v22 = a4;
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(result + 16), 1.0);
          v6 = 0.0;
          a4 = v22;
          a2 = v31;
          a3 = v21;
          break;
        default:
          v9 = 0.0;
          break;
      }
      v7 = 1.0 / fmaxf(v9, 1.0);
    }
    if (a4)
      v11 = v7;
    else
      v11 = 0.0;
    if (!a4)
      v6 = v7;
    if (a2 && (a4 & 1) == 0)
    {
      if (a2[12] != 20)
      {
        __break(0xC471u);
        JUMPOUT(0x196271BD4);
      }
      if (a2[24])
      {
        v12 = (WebCore::Length *)(a2 + 16);
        v13 = 1.0;
        switch(a2[20])
        {
          case 0u:
          case 1u:
          case 9u:
            break;
          case 3u:
            v14 = *((float *)a2 + 4);
            if (!a2[22])
              v14 = (float)*((int *)a2 + 4);
            v13 = v14 / 100.0;
            break;
          case 4u:
            if (a2[22])
              v13 = *(float *)v12;
            else
              v13 = (float)*(int *)v12;
            break;
          case 0xBu:
            v28 = a3;
            v29 = v7;
            WebCore::Length::nonNanCalculatedValue(v12, 1.0);
            v7 = v29;
            a3 = v28;
            break;
          default:
            v13 = 0.0;
            break;
        }
        v6 = v7;
        v11 = 1.0 / fmaxf(v13, 1.0);
      }
      else
      {
        v11 = 0.0;
        v6 = v7;
      }
    }
    if (*(_BYTE *)(a3 + 10) == 1)
    {
      v19 = *(double *)(a3 + 16);
      if (v19 != 0.0)
      {
        v20 = v6 * v19;
        v11 = v11 + v20;
        v6 = v6 + v20;
      }
    }
    v15 = v11 + v11;
    if (!*(_BYTE *)(a3 + 9))
      v15 = v11;
    v16 = v15 + (v6 - v11) * *(double *)a3;
    v17 = 0.0;
    if (v16 <= 0.0 || ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    {
      v18 = 1;
    }
    else
    {
      v18 = 0;
      v17 = 1.0 / v16;
    }
    result = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = 20;
    *(_QWORD *)result = off_1E3416E28;
    *(_BYTE *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    if ((v18 & 1) == 0)
    {
      *(_WORD *)(result + 20) = 4;
      *(_BYTE *)(result + 22) = 1;
      *(float *)(result + 16) = v17;
      *(_BYTE *)(result + 24) = 1;
    }
  }
  else
  {
    ++*(_DWORD *)(v32 + 8);
  }
  *a5 = result;
  return result;
}

uint64_t WebCore::PerspectiveTransformOperation::dump(WebCore::PerspectiveTransformOperation *this, WTF::TextStream *a2)
{
  void *v5;
  int v6;
  unsigned __int8 v7;
  char v8;
  char v9;

  if ((unint64_t)*((char *)this + 12) <= 0x16)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*((_BYTE *)this + 24))
  {
    v6 = 0;
    v9 = 0;
    v7 = *((_BYTE *)this + 20);
    v8 = *((_BYTE *)this + 21);
    if (v7 - 2 < 9)
    {
      v9 = *((_BYTE *)this + 22);
      v6 = *((_DWORD *)this + 4);
LABEL_8:
      WebCore::operator<<((uint64_t)a2, (WebCore::Length *)&v6);
      return WTF::TextStream::operator<<();
    }
    if (v7 != 11)
      goto LABEL_8;
    v5 = (void *)*((unsigned int *)this + 4);
    v6 = (int)v5;
    WebCore::Length::ref(&v6);
    WebCore::operator<<((uint64_t)a2, (WebCore::Length *)&v6);
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v5);
  }
  else
  {
    WTF::TextStream::operator<<();
  }
  return WTF::TextStream::operator<<();
}

void WebCore::Quaternion::interpolate(double *a1, double *a2, int a3, double a4)
{
  double v5;
  double v6;

  if (a3 != 2)
  {
    v5 = a1[1] * a2[1] + *a1 * *a2 + a1[2] * a2[2] + a1[3] * a2[3];
    if (v5 < 0.0)
      v5 = -v5;
    if (v5 > 1.0)
      v5 = 1.0;
    if (sqrt(1.0 - v5 * v5) >= 0.00001)
    {
      v6 = acos(v5);
      sin((1.0 - a4) * v6);
      sin(v6 * a4);
    }
  }
}

uint64_t WebCore::RotateTransformOperation::create@<X0>(unsigned int a1@<W0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = a1;
  *(_QWORD *)result = off_1E3416EA0;
  *(double *)(result + 16) = a3;
  *(double *)(result + 24) = a4;
  *(double *)(result + 32) = a5;
  *(double *)(result + 40) = a6;
  if (a1 <= 0x12 && ((1 << a1) & 0x601C0) != 0)
  {
    *a2 = result;
  }
  else
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::RotateTransformOperation::dump(WebCore::RotateTransformOperation *this, WTF::TextStream *a2)
{
  if ((unint64_t)*((char *)this + 12) <= 0x16)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::operator<<();
}

uint64_t WebCore::ScaleTransformOperation::create@<X0>(unsigned int a1@<W0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = a1;
  *(_QWORD *)result = off_1E3416F18;
  *(double *)(result + 16) = a3;
  *(double *)(result + 24) = a4;
  *(double *)(result + 32) = a5;
  if (a1 <= 0xE && ((1 << a1) & 0x6007) != 0)
  {
    *a2 = result;
  }
  else
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::ScaleTransformOperation::ScaleTransformOperation(uint64_t result, unsigned int a2, double a3, double a4, double a5)
{
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = a2;
  *(_QWORD *)result = off_1E3416F18;
  *(double *)(result + 16) = a3;
  *(double *)(result + 24) = a4;
  *(double *)(result + 32) = a5;
  if (a2 > 0xE || ((1 << a2) & 0x6007) == 0)
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::ScaleTransformOperation::operator==(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  BOOL v5;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 12);
  if (v2 != *(unsigned __int8 *)(a2 + 12))
    return 0;
  v3 = v2 >= 0xE;
  v5 = v2 == 14;
  v4 = (1 << v2) & 0x6007;
  v5 = !v5 && v3 || v4 == 0;
  if (!v5)
  {
    if (*(double *)(a1 + 16) == *(double *)(a2 + 16) && *(double *)(a1 + 24) == *(double *)(a2 + 24))
      return *(double *)(a1 + 32) == *(double *)(a2 + 32);
    return 0;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ScaleTransformOperation::blend@<X0>(WebCore::TransformOperation *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t result;
  unsigned __int8 v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  unsigned int v21;
  uint64_t *v22;
  double v23;
  double v24;

  if (a4)
  {
    v24 = WebCore::blendScaleComponent(a3, *((double *)this + 2), 1.0);
    v19 = WebCore::blendScaleComponent(a3, *((double *)this + 3), 1.0);
    v20 = WebCore::blendScaleComponent(a3, *((double *)this + 4), 1.0);
    v21 = *((unsigned __int8 *)this + 12);
    v22 = a5;
    v23 = v24;
    return WebCore::ScaleTransformOperation::create(v21, v22, v23, v19, v20);
  }
  result = WebCore::TransformOperation::sharedPrimitiveType(this, (const WebCore::TransformOperation *)a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    ++*((_DWORD *)this + 2);
    *a5 = (uint64_t)this;
  }
  else
  {
    v10 = result;
    if (!a2)
    {
      v16 = 1.0;
      v15 = 1.0;
      v17 = 1.0;
      goto LABEL_9;
    }
    v11 = *(unsigned __int8 *)(a2 + 12);
    v12 = v11 > 0xE;
    v13 = (1 << v11) & 0x6007;
    if (!v12 && v13 != 0)
    {
      v15 = *(double *)(a2 + 16);
      v16 = *(double *)(a2 + 24);
      v17 = *(double *)(a2 + 32);
LABEL_9:
      v18 = WebCore::blendScaleComponent(a3, v15, *((double *)this + 2));
      v19 = WebCore::blendScaleComponent(a3, v16, *((double *)this + 3));
      v20 = WebCore::blendScaleComponent(a3, v17, *((double *)this + 4));
      v21 = v10;
      v22 = a5;
      v23 = v18;
      return WebCore::ScaleTransformOperation::create(v21, v22, v23, v19, v20);
    }
    result = 105;
    __break(0xC471u);
  }
  return result;
}

double WebCore::blendScaleComponent(uint64_t a1, double a2, double a3)
{
  int v3;
  double v5;
  double v6;

  v3 = *(unsigned __int8 *)(a1 + 9);
  if (*(_BYTE *)(a1 + 9))
  {
    if (v3 == 1)
    {
      return a2 * a3;
    }
    else
    {
      if (v3 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x196272478);
      }
      return a2 + a3 + -1.0;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 10) == 1)
    {
      v5 = *(double *)(a1 + 16);
      if (v5 != 0.0)
      {
        v6 = v5 * a3;
        a2 = v6 + a2;
        a3 = v6 + a3;
      }
    }
    return a2 + (a3 - a2) * *(double *)a1;
  }
}

uint64_t WebCore::ScaleTransformOperation::dump(WebCore::ScaleTransformOperation *this, WTF::TextStream *a2)
{
  if ((unint64_t)*((char *)this + 12) <= 0x16)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::operator<<();
}

__n128 WebCore::Matrix3DTransformOperation::clone@<Q0>(WebCore::Matrix3DTransformOperation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v4 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v4 + 8) = 1;
  *(_BYTE *)(v4 + 12) = 19;
  *(_QWORD *)v4 = off_1E3416D38;
  v5 = *((_OWORD *)this + 5);
  v6 = *((_OWORD *)this + 6);
  v7 = *((_OWORD *)this + 8);
  *(_OWORD *)(v4 + 112) = *((_OWORD *)this + 7);
  *(_OWORD *)(v4 + 128) = v7;
  *(_OWORD *)(v4 + 80) = v5;
  *(_OWORD *)(v4 + 96) = v6;
  result = *((__n128 *)this + 1);
  v9 = *((_OWORD *)this + 2);
  v10 = *((_OWORD *)this + 4);
  *(_OWORD *)(v4 + 48) = *((_OWORD *)this + 3);
  *(_OWORD *)(v4 + 64) = v10;
  *(__n128 *)(v4 + 16) = result;
  *(_OWORD *)(v4 + 32) = v9;
  *a2 = v4;
  return result;
}

uint64_t WebCore::TransformOperation::selfOrCopyWithResolvedCalculatedValues@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  ++*(_DWORD *)(this + 8);
  *a2 = this;
  return this;
}

BOOL WebCore::Matrix3DTransformOperation::isIdentity(WebCore::Matrix3DTransformOperation *this)
{
  return *((double *)this + 2) == 1.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 4) == 0.0
      && *((double *)this + 5) == 0.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 1.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 0.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 12) == 1.0
      && *((double *)this + 13) == 0.0
      && *((double *)this + 14) == 0.0
      && *((double *)this + 15) == 0.0
      && *((double *)this + 16) == 0.0
      && *((double *)this + 17) == 1.0;
}

uint64_t WebCore::TransformOperation::applyUnrounded(WebCore::TransformOperation *this, WebCore::TransformationMatrix *a2, const WebCore::FloatSize *a3)
{
  return (*(uint64_t (**)(WebCore::TransformOperation *, WebCore::TransformationMatrix *, const WebCore::FloatSize *))(*(_QWORD *)this + 48))(this, a2, a3);
}

uint64_t WebCore::TransformOperation::primitiveType(WebCore::TransformOperation *this)
{
  return *((unsigned __int8 *)this + 12);
}

BOOL WebCore::Matrix3DTransformOperation::isAffectedByTransformOrigin(WebCore::Matrix3DTransformOperation *this)
{
  return *((double *)this + 2) != 1.0
      || *((double *)this + 3) != 0.0
      || *((double *)this + 4) != 0.0
      || *((double *)this + 5) != 0.0
      || *((double *)this + 6) != 0.0
      || *((double *)this + 7) != 1.0
      || *((double *)this + 8) != 0.0
      || *((double *)this + 9) != 0.0
      || *((double *)this + 10) != 0.0
      || *((double *)this + 11) != 0.0
      || *((double *)this + 12) != 1.0
      || *((double *)this + 13) != 0.0
      || *((double *)this + 14) != 0.0
      || *((double *)this + 15) != 0.0
      || *((double *)this + 16) != 0.0
      || *((double *)this + 17) != 1.0;
}

__n128 WebCore::MatrixTransformOperation::clone@<Q0>(__n128 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __n128 v7;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v4 + 8) = 1;
  *(_BYTE *)(v4 + 12) = 12;
  *(_QWORD *)v4 = off_1E3416DB0;
  result = this[1];
  v6 = this[2];
  v7 = this[3];
  *(__n128 *)(v4 + 16) = result;
  *(__n128 *)(v4 + 32) = v6;
  *(__n128 *)(v4 + 48) = v7;
  *a2 = v4;
  return result;
}

BOOL WebCore::MatrixTransformOperation::isIdentity(WebCore::MatrixTransformOperation *this)
{
  return *((double *)this + 2) == 1.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 4) == 0.0
      && *((double *)this + 5) == 1.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0;
}

uint64_t WebCore::MatrixTransformOperation::apply(WebCore::MatrixTransformOperation *this, float64x2_t *a2, const WebCore::FloatSize *a3)
{
  __int128 v3;
  const double *v4;
  float64x2_t *v5;
  float64x2_t *v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float64x2x4_t v26;
  float64x2x4_t v27;
  float64x2x4_t v28;
  float64x2x4_t v29;

  v3 = *((_OWORD *)this + 2);
  v17 = 0;
  v18 = 0;
  v19 = v3;
  v20 = 0;
  v21 = 0;
  v22 = constinit_13;
  v23 = unk_1969F8D70;
  v24 = *((_OWORD *)this + 3);
  v25 = xmmword_1968A14C0;
  v4 = (const double *)&v16;
  v5 = a2;
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v6 = a2 + 4;
  v11 = *v6;
  v12 = v6[1];
  v13 = v6[2];
  v14 = v6[3];
  v28 = vld4q_dup_f64(v4);
  v4 += 4;
  v26 = vld4q_dup_f64(v4);
  v4 += 4;
  *v5 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v28.val[0], v7), v28.val[1], v9), v28.val[2], *v6), v28.val[3], v13);
  v5[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v28.val[0], v8), v28.val[1], v10), v28.val[2], v12), v28.val[3], v14);
  v5 += 2;
  v29 = vld4q_dup_f64(v4);
  v4 += 4;
  *v5 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v26.val[0], v7), v26.val[1], v9), v26.val[2], v11), v26.val[3], v13);
  v5[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v26.val[0], v8), v26.val[1], v10), v26.val[2], v12), v26.val[3], v14);
  v5 += 2;
  v27 = vld4q_dup_f64(v4);
  *v5 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v29.val[0], v7), v29.val[1], v9), v29.val[2], v11), v29.val[3], v13);
  v5[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v29.val[0], v8), v29.val[1], v10), v29.val[2], v12), v29.val[3], v14);
  v5 += 2;
  *v5 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v27.val[0], v7), v27.val[1], v9), v27.val[2], v11), v27.val[3], v13);
  v5[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v27.val[0], v8), v27.val[1], v10), v27.val[2], v12), v27.val[3], v14);
  return 0;
}

BOOL WebCore::MatrixTransformOperation::isAffectedByTransformOrigin(WebCore::MatrixTransformOperation *this)
{
  return *((double *)this + 2) != 1.0
      || *((double *)this + 3) != 0.0
      || *((double *)this + 4) != 0.0
      || *((double *)this + 5) != 1.0
      || *((double *)this + 6) != 0.0
      || *((double *)this + 7) != 0.0;
}

uint64_t WebCore::TransformOperation::isRepresentableIn2D(WebCore::TransformOperation *this)
{
  return 1;
}

void WebCore::PerspectiveTransformOperation::~PerspectiveTransformOperation(WebCore::PerspectiveTransformOperation *this)
{
  if (*((_BYTE *)this + 24) && *((_BYTE *)this + 20) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 4));
  }
}

void WebCore::PerspectiveTransformOperation::~PerspectiveTransformOperation(WebCore::PerspectiveTransformOperation *this, void *a2)
{
  if (*((_BYTE *)this + 24) && *((_BYTE *)this + 20) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 4));
  }
  WTF::fastFree(this, a2);
}

int *WebCore::PerspectiveTransformOperation::clone@<X0>(WebCore::PerspectiveTransformOperation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int *result;
  unsigned int v6;
  int v7;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v4 + 8) = 1;
  *(_BYTE *)(v4 + 12) = 20;
  *(_QWORD *)v4 = off_1E3416E28;
  *(_BYTE *)(v4 + 16) = 0;
  result = (int *)(v4 + 16);
  *(_BYTE *)(v4 + 24) = 0;
  if (*((_BYTE *)this + 24))
  {
    *(_DWORD *)(v4 + 16) = 0;
    *(_WORD *)(v4 + 21) = 0;
    v6 = *((unsigned __int8 *)this + 20);
    *(_BYTE *)(v4 + 20) = v6;
    *(_BYTE *)(v4 + 21) = *((_BYTE *)this + 21);
    if (v6 <= 0xD)
    {
      v7 = 1 << v6;
      if ((v7 & 0x7FC) != 0)
      {
        *(_BYTE *)(v4 + 22) = *((_BYTE *)this + 22);
        *result = *((_DWORD *)this + 4);
      }
      else if ((v7 & 0x3003) != 0)
      {
        *result = 0;
      }
      else
      {
        *result = *((_DWORD *)this + 4);
        result = WebCore::Length::ref(result);
      }
    }
    *(_BYTE *)(v4 + 24) = 1;
  }
  *a2 = v4;
  return result;
}

BOOL WebCore::PerspectiveTransformOperation::isIdentity(WebCore::PerspectiveTransformOperation *this)
{
  return *((_BYTE *)this + 24) == 0;
}

uint64_t WebCore::PerspectiveTransformOperation::apply(WebCore::PerspectiveTransformOperation *this, float64x2_t *a2, const WebCore::FloatSize *a3)
{
  float *v3;
  float v4;
  float v5;
  float v6;
  const double *v7;
  float64x2_t *v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  WebCore::TransformationMatrix *v19;
  _OWORD v20[5];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  float64x2x4_t v24;
  float64x2x4_t v25;
  float64x2x4_t v26;
  float64x2x4_t v27;

  if (*((_BYTE *)this + 24))
  {
    v3 = (float *)((char *)this + 16);
    v4 = 1.0;
    switch(*((_BYTE *)this + 20))
    {
      case 0:
      case 1:
      case 9:
        break;
      case 3:
        v5 = *((float *)this + 4);
        if (!*((_BYTE *)this + 22))
          v5 = (float)*((int *)this + 4);
        v4 = v5 / 100.0;
        break;
      case 4:
        if (*((_BYTE *)this + 22))
          v4 = *v3;
        else
          v4 = (float)*(int *)v3;
        break;
      case 0xB:
        v19 = (WebCore::TransformationMatrix *)a2;
        WebCore::Length::nonNanCalculatedValue((WebCore::PerspectiveTransformOperation *)((char *)this + 16), 1.0);
        a2 = (float64x2_t *)v19;
        break;
      default:
        v4 = 0.0;
        break;
    }
    v6 = fmaxf(v4, 1.0);
    v21 = *(_OWORD *)&qword_1969F8F60;
    v22 = xmmword_1969F8F70;
    v23 = unk_1969F8F80;
    v20[0] = constinit_5;
    v20[1] = unk_1969F8F20;
    v20[2] = xmmword_1969F8F30;
    memset(&v20[3], 0, 32);
    if (v6 != 0.0)
      *((double *)&v21 + 1) = -1.0 / v6;
    v7 = (const double *)v20;
    v8 = a2;
    v10 = *a2;
    v11 = a2[1];
    v12 = a2[2];
    v13 = a2[3];
    v9 = a2 + 4;
    v14 = *v9;
    v15 = v9[1];
    v16 = v9[2];
    v17 = v9[3];
    v26 = vld4q_dup_f64(v7);
    v7 += 4;
    v24 = vld4q_dup_f64(v7);
    v7 += 4;
    *v8 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v26.val[0], v10), v26.val[1], v12), v26.val[2], *v9), v26.val[3], v16);
    v8[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v26.val[0], v11), v26.val[1], v13), v26.val[2], v15), v26.val[3], v17);
    v8 += 2;
    v27 = vld4q_dup_f64(v7);
    v7 += 4;
    *v8 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v10), v24.val[1], v12), v24.val[2], v14), v24.val[3], v16);
    v8[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v11), v24.val[1], v13), v24.val[2], v15), v24.val[3], v17);
    v8 += 2;
    v25 = vld4q_dup_f64(v7);
    *v8 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v27.val[0], v10), v27.val[1], v12), v27.val[2], v14), v27.val[3], v16);
    v8[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v27.val[0], v11), v27.val[1], v13), v27.val[2], v15), v27.val[3], v17);
    v8 += 2;
    *v8 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v10), v25.val[1], v12), v25.val[2], v14), v25.val[3], v16);
    v8[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v11), v25.val[1], v13), v25.val[2], v15), v25.val[3], v17);
  }
  return 0;
}

uint64_t WebCore::PerspectiveTransformOperation::isAffectedByTransformOrigin(WebCore::PerspectiveTransformOperation *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t WebCore::PerspectiveTransformOperation::isRepresentableIn2D(WebCore::PerspectiveTransformOperation *this)
{
  return 0;
}

uint64_t WebCore::RotateTransformOperation::clone@<X0>(WebCore::RotateTransformOperation *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unsigned int v5;
  __int128 v6;
  BOOL v7;
  int v8;

  result = WTF::fastMalloc((WTF *)0x30);
  v5 = *((unsigned __int8 *)this + 12);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = v5;
  *(_QWORD *)result = off_1E3416EA0;
  v6 = *((_OWORD *)this + 2);
  *(_OWORD *)(result + 16) = *((_OWORD *)this + 1);
  *(_OWORD *)(result + 32) = v6;
  v7 = v5 > 0x12;
  v8 = (1 << v5) & 0x601C0;
  if (v7 || v8 == 0)
  {
    result = 44;
    __break(0xC471u);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

BOOL WebCore::RotateTransformOperation::isIdentity(WebCore::RotateTransformOperation *this)
{
  return *((double *)this + 5) == 0.0;
}

uint64_t WebCore::RotateTransformOperation::applyUnrounded(WebCore::RotateTransformOperation *this, float64x2_t *a2, const WebCore::FloatSize *a3)
{
  long double v4;
  __double2 v5;
  const double *v6;
  float64x2_t *v7;
  float64x2_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  _QWORD v18[8];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float64x2x4_t v25;
  float64x2x4_t v26;
  float64x2x4_t v27;
  float64x2x4_t v28;

  if (*((_BYTE *)this + 12) == 8)
  {
    v4 = *((double *)this + 5);
    if (fmod(v4, 360.0) != 0.0)
    {
      v5 = __sincos_stret(v4 * 0.0174532925);
      v18[0] = *(_QWORD *)&v5.__cosval;
      v18[1] = *(_QWORD *)&v5.__sinval;
      v18[2] = 0;
      v18[3] = 0;
      *(double *)&v18[4] = -v5.__sinval;
      v18[5] = *(_QWORD *)&v5.__cosval;
      v18[6] = 0;
      v18[7] = 0;
      v19 = constinit_39;
      v20 = unk_1969F8FA0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0x3FF0000000000000;
      v6 = (const double *)v18;
      v7 = a2;
      v9 = *a2;
      v10 = a2[1];
      v11 = a2[2];
      v12 = a2[3];
      v8 = a2 + 4;
      v13 = *v8;
      v14 = v8[1];
      v15 = v8[2];
      v16 = v8[3];
      v27 = vld4q_dup_f64(v6);
      v6 += 4;
      v25 = vld4q_dup_f64(v6);
      v6 += 4;
      *v7 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v27.val[0], v9), v27.val[1], v11), v27.val[2], *v8), v27.val[3], v15);
      v7[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v27.val[0], v10), v27.val[1], v12), v27.val[2], v14), v27.val[3], v16);
      v7 += 2;
      v28 = vld4q_dup_f64(v6);
      v6 += 4;
      *v7 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v9), v25.val[1], v11), v25.val[2], v13), v25.val[3], v15);
      v7[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v10), v25.val[1], v12), v25.val[2], v14), v25.val[3], v16);
      v7 += 2;
      v26 = vld4q_dup_f64(v6);
      *v7 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v28.val[0], v9), v28.val[1], v11), v28.val[2], v13), v28.val[3], v15);
      v7[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v28.val[0], v10), v28.val[1], v12), v28.val[2], v14), v28.val[3], v16);
      v7 += 2;
      *v7 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v26.val[0], v9), v26.val[1], v11), v26.val[2], v13), v26.val[3], v15);
      v7[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v26.val[0], v10), v26.val[1], v12), v26.val[2], v14), v26.val[3], v16);
    }
  }
  else
  {
    WebCore::TransformationMatrix::rotate3d(a2, 0, *((double *)this + 2), *((double *)this + 3), *((double *)this + 4), *((double *)this + 5));
  }
  return 0;
}

BOOL WebCore::RotateTransformOperation::isRepresentableIn2D(WebCore::RotateTransformOperation *this)
{
  return *((double *)this + 2) == 0.0 && *((double *)this + 3) == 0.0 || *((double *)this + 5) == 0.0;
}

uint64_t WebCore::ScaleTransformOperation::clone@<X0>(WebCore::ScaleTransformOperation *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;

  result = WTF::fastMalloc((WTF *)0x28);
  v5 = *((_QWORD *)this + 4);
  v6 = *((unsigned __int8 *)this + 12);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = v6;
  *(_QWORD *)result = off_1E3416F18;
  *(_OWORD *)(result + 16) = *((_OWORD *)this + 1);
  *(_QWORD *)(result + 32) = v5;
  v7 = v6 > 0xE;
  v8 = (1 << v6) & 0x6007;
  if (v7 || v8 == 0)
  {
    result = 41;
    __break(0xC471u);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

BOOL WebCore::ScaleTransformOperation::isIdentity(WebCore::ScaleTransformOperation *this)
{
  return *((double *)this + 2) == 1.0 && *((double *)this + 3) == 1.0 && *((double *)this + 4) == 1.0;
}

uint64_t WebCore::ScaleTransformOperation::apply(WebCore::ScaleTransformOperation *this, float64x2_t *a2, const WebCore::FloatSize *a3)
{
  double v3;
  double v4;
  float64x2_t v5;
  float64x2_t v6;
  double v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;

  v3 = *((double *)this + 2);
  v4 = *((double *)this + 3);
  v5 = vmulq_n_f64(*a2, v3);
  v6 = vmulq_n_f64(a2[1], v3);
  v7 = *((double *)this + 4);
  *a2 = v5;
  a2[1] = v6;
  v8 = vmulq_n_f64(a2[2], v4);
  v9 = vmulq_n_f64(a2[3], v4);
  a2[2] = v8;
  a2[3] = v9;
  v10 = vmulq_n_f64(a2[5], v7);
  a2[4] = vmulq_n_f64(a2[4], v7);
  a2[5] = v10;
  return 0;
}

uint64_t WebCore::ScaleTransformOperation::primitiveType(WebCore::ScaleTransformOperation *this)
{
  if (*((unsigned __int8 *)this + 12) - 13 >= 2)
    return 2;
  else
    return 14;
}

BOOL WebCore::ScaleTransformOperation::isAffectedByTransformOrigin(WebCore::ScaleTransformOperation *this)
{
  return *((double *)this + 2) != 1.0 || *((double *)this + 3) != 1.0 || *((double *)this + 4) != 1.0;
}

BOOL WebCore::ScaleTransformOperation::isRepresentableIn2D(WebCore::ScaleTransformOperation *this)
{
  return *((double *)this + 4) == 1.0;
}

uint64_t WebCore::SkewTransformOperation::create@<X0>(int a1@<W0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = a1;
  *(_QWORD *)result = off_1E3417048;
  *(double *)(result + 16) = a3;
  *(double *)(result + 24) = a4;
  if ((a1 - 9) >= 3)
  {
    result = 40;
    __break(0xC471u);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t WebCore::SkewTransformOperation::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 12);
  if (v2 != *(unsigned __int8 *)(a2 + 12))
    return 0;
  if ((v2 - 9) < 3)
  {
    if (*(double *)(a1 + 16) == *(double *)(a2 + 16))
      return *(double *)(a1 + 24) == *(double *)(a2 + 24);
    return 0;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::SkewTransformOperation::blend@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  double v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  int v15;
  int v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  uint64_t result;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  int v34;
  unsigned __int8 *v36;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;

  if (a4)
  {
    v5 = a1[2];
    v6 = *(unsigned __int8 *)(a3 + 10);
    v7 = 0.0;
    if (v6 == 1)
    {
      v25 = *(double *)(a3 + 16);
      if (v25 == 0.0)
      {
        v8 = 0.0;
      }
      else
      {
        v26 = v25 * 0.0;
        v5 = v5 + v26;
        v8 = v26 + 0.0;
      }
    }
    else
    {
      v8 = 0.0;
    }
    v9 = v5 + v5;
    if (!*(_BYTE *)(a3 + 9))
      v9 = v5;
    v10 = v9 + (v8 - v5) * *(double *)a3;
    v11 = a1[3];
    if (v6 == 1)
    {
      v27 = *(double *)(a3 + 16);
      if (v27 != 0.0)
      {
        v28 = v27 * 0.0;
        v11 = v11 + v28;
        v7 = v28 + 0.0;
      }
    }
    v12 = v11 + v11;
    if (!*(_BYTE *)(a3 + 9))
      v12 = v11;
    v13 = v12 + (v7 - v11) * *(double *)a3;
    v14 = *((unsigned __int8 *)a1 + 12);
    return WebCore::SkewTransformOperation::create(v14, a5, v10, v13);
  }
  if (!a2)
  {
    v16 = *((unsigned __int8 *)a1 + 12);
    v17 = 0.0;
    v18 = 0.0;
LABEL_14:
    v19 = a1[2];
    v20 = *(unsigned __int8 *)(a3 + 10);
    if (v20 == 1)
    {
      v29 = *(double *)(a3 + 16);
      if (v29 != 0.0)
      {
        v30 = v19 * v29;
        v17 = v17 + v30;
        v19 = v19 + v30;
      }
    }
    v21 = v17 + v17;
    if (!*(_BYTE *)(a3 + 9))
      v21 = v17;
    v10 = v21 + (v19 - v17) * *(double *)a3;
    v22 = a1[3];
    if (v20 == 1)
    {
      v31 = *(double *)(a3 + 16);
      if (v31 != 0.0)
      {
        v32 = v22 * v31;
        v18 = v18 + v32;
        v22 = v22 + v32;
      }
    }
    v23 = v18 + v18;
    if (!*(_BYTE *)(a3 + 9))
      v23 = v18;
    v13 = v23 + (v22 - v18) * *(double *)a3;
    v14 = v16;
    return WebCore::SkewTransformOperation::create(v14, a5, v10, v13);
  }
  v15 = *(unsigned __int8 *)(a2 + 12);
  v16 = v15;
  if (v15 == *((unsigned __int8 *)a1 + 12))
  {
LABEL_12:
    if ((v15 - 12) <= 0xFCu)
    {
      __break(0xC471u);
      JUMPOUT(0x1962732E8);
    }
    v17 = *(double *)(a2 + 16);
    v18 = *(double *)(a2 + 24);
    goto LABEL_14;
  }
  v39 = a2;
  v40 = a3;
  v41 = a5;
  v33 = a1;
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  result = (*(uint64_t (**)(double *))(*(_QWORD *)v33 + 72))(v33);
  v16 = v34;
  if ((_DWORD)result == v34)
  {
LABEL_35:
    a2 = v39;
    a3 = v40;
    LOBYTE(v15) = *(_BYTE *)(v39 + 12);
    a1 = v33;
    a5 = v41;
    goto LABEL_12;
  }
  if (result > 0x12)
    goto LABEL_63;
  if (((1 << result) & 0x40100) != 0)
  {
    if (v34 == 18 || v34 == 8)
    {
      v36 = (unsigned __int8 *)&WebCore::TransformOperation::sharedPrimitiveType(WebCore::TransformOperationType)const::sharedPrimitives;
      goto LABEL_58;
    }
    if ((_DWORD)result != 14)
    {
      if ((_DWORD)result == 16)
        goto LABEL_52;
      goto LABEL_63;
    }
LABEL_45:
    if (v34 == 14 || v34 == 2)
    {
      v36 = (unsigned __int8 *)&unk_1969F8E86;
      goto LABEL_58;
    }
    if ((_DWORD)result == 5)
      goto LABEL_52;
    goto LABEL_63;
  }
  if (((1 << result) & 0x4004) != 0)
    goto LABEL_45;
  if (((1 << result) & 0x10020) != 0)
  {
LABEL_52:
    if (v34 != 16 && v34 != 5)
      goto LABEL_63;
    v36 = (unsigned __int8 *)&unk_1969F8E88;
LABEL_58:
    v16 = v36[1];
    goto LABEL_35;
  }
LABEL_63:
  ++*((_DWORD *)v33 + 2);
  *v41 = (uint64_t)v33;
  return result;
}

uint64_t WebCore::TransformOperation::sharedPrimitiveType(WebCore::TransformOperation *this, const WebCore::TransformOperation *a2)
{
  WebCore::TransformOperation *v2;
  int v3;
  int v5;

  v2 = this;
  if (a2)
  {
    LODWORD(this) = *((unsigned __int8 *)a2 + 12);
    if ((_DWORD)this != *((unsigned __int8 *)v2 + 12))
    {
      v5 = (*(uint64_t (**)(const WebCore::TransformOperation *))(*(_QWORD *)a2 + 72))(a2);
      LOWORD(this) = WebCore::TransformOperation::sharedPrimitiveType((uint64_t)v2, v5);
      v3 = BYTE1(this);
      return this | (v3 << 8);
    }
  }
  else
  {
    LOBYTE(this) = *((_BYTE *)this + 12);
  }
  v3 = 1;
  return this | (v3 << 8);
}

uint64_t WebCore::SkewTransformOperation::dump(WebCore::SkewTransformOperation *this, WTF::TextStream *a2)
{
  if ((unint64_t)*((char *)this + 12) <= 0x16)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::operator<<();
}

uint64_t WebCore::IdentityTransformOperation::dump(uint64_t this, WTF::TextStream *a2)
{
  if ((unint64_t)*(char *)(this + 12) <= 0x16)
    return WTF::TextStream::operator<<();
  return this;
}

uint64_t WebCore::TransformOperation::sharedPrimitiveType(uint64_t a1, int a2)
{
  unsigned int v3;
  int v4;
  int v5;
  unsigned __int8 *v7;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  if (v3 != a2)
  {
    v4 = 0;
    if (v3 > 0x12)
    {
      v5 = 0;
      return v5 | (v4 << 8);
    }
    if (((1 << v3) & 0x40100) != 0)
    {
      v7 = (unsigned __int8 *)&WebCore::TransformOperation::sharedPrimitiveType(WebCore::TransformOperationType)const::sharedPrimitives;
      if (a2 == 18 || a2 == 8)
        goto LABEL_19;
      if (v3 != 14)
      {
        if (v3 != 16)
        {
LABEL_10:
          v4 = 0;
          v5 = 0;
          return v5 | (v4 << 8);
        }
        goto LABEL_17;
      }
    }
    else if (((1 << v3) & 0x4004) == 0)
    {
      v5 = 0;
      if (((1 << v3) & 0x10020) == 0)
        return v5 | (v4 << 8);
      goto LABEL_17;
    }
    v7 = (unsigned __int8 *)&unk_1969F8E86;
    if (a2 == 14 || a2 == 2)
      goto LABEL_19;
    if (v3 != 5)
      goto LABEL_10;
LABEL_17:
    v7 = (unsigned __int8 *)&unk_1969F8E88;
    if (a2 != 16 && a2 != 5)
      goto LABEL_10;
LABEL_19:
    v5 = v7[1];
    v4 = 1;
    return v5 | (v4 << 8);
  }
  v4 = 1;
  v5 = a2;
  return v5 | (v4 << 8);
}

uint64_t WebCore::TransformOperations::TransformOperations(uint64_t a1, _DWORD **a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a1 = v4;
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v3[2];
  v3[2] = v6 + 1;
  *(_QWORD *)(v4 + 8 * v5) = v3;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = v5 + 1;
  if (v6)
    v3[2] = v6;
  else
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WebCore::TransformOperations::TransformOperations(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v2;
  return result;
}

{
  uint64_t v2;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v2;
  return result;
}

uint64_t WebCore::TransformOperations::apply(uint64_t this, WebCore::TransformationMatrix *a2, const WebCore::FloatSize *a3, unsigned int a4)
{
  uint64_t v6;
  unint64_t v7;

  if (*(_DWORD *)(this + 12) > a4)
  {
    v6 = this;
    v7 = a4;
    do
    {
      this = (*(uint64_t (**)(_QWORD, WebCore::TransformationMatrix *, const WebCore::FloatSize *))(**(_QWORD **)(*(_QWORD *)v6 + 8 * v7) + 48))(*(_QWORD *)(*(_QWORD *)v6 + 8 * v7), a2, a3);
      ++v7;
    }
    while (v7 < *(unsigned int *)(v6 + 12));
  }
  return this;
}

uint64_t WebCore::TransformOperations::affectedByTransformOrigin(uint64_t **this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((unsigned int *)this + 3);
  if (!(_DWORD)v1)
    return 0;
  v2 = *this;
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

BOOL WebCore::TransformOperations::isInvertible(WebCore::TransformOperations *this, int32x2_t *a2)
{
  float64x2_t v2;
  unint64_t v4;
  double v7;
  double v8;
  double v12;
  double v13;
  float32x2_t v32;
  __int128 v33;
  int8x16_t v34;
  __int128 v35;
  float64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  __int128 v39;
  __int128 v40;

  v37 = (int8x16_t)xmmword_1969F8F50;
  v38 = *(int8x16_t *)&qword_1969F8F60;
  v39 = xmmword_1969F8F70;
  v40 = unk_1969F8F80;
  v33 = constinit_5;
  v34 = (int8x16_t)unk_1969F8F20;
  v35 = xmmword_1969F8F30;
  v36 = (float64x2_t)unk_1969F8F40;
  v32 = vmul_f32(vcvt_f32_s32(*a2), (float32x2_t)vdup_n_s32(0x3C800000u));
  v2 = (float64x2_t)xmmword_1968A14C0;
  if (*((_DWORD *)this + 3))
  {
    v4 = 0;
    do
    {
      (*(void (**)(_QWORD, __int128 *, float32x2_t *))(**(_QWORD **)(*(_QWORD *)this + 8 * v4) + 48))(*(_QWORD *)(*(_QWORD *)this + 8 * v4), &v33, &v32);
      ++v4;
    }
    while (v4 < *((unsigned int *)this + 3));
    _Q1 = v36;
    _D6 = *((double *)&v40 + 1);
    v8 = *((double *)&v33 + 1);
    v7 = *(double *)&v33;
    _Q0 = (float64x2_t)vextq_s8(v34, v34, 8uLL);
    _Q4 = (float64x2_t)vextq_s8(v38, v37, 8uLL);
    _Q5 = (float64x2_t)vextq_s8(v37, v38, 8uLL);
    v2 = (float64x2_t)xmmword_1968A14C0;
  }
  else
  {
    _Q0 = 0uLL;
    v7 = 1.0;
    v8 = 0.0;
    _D6 = 1.0;
    _Q1 = 0uLL;
    _Q5 = (float64x2_t)xmmword_1968A14C0;
    _Q4 = 0uLL;
  }
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(_Q0), (int32x4_t)vceqzq_f64(_Q1)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(_Q4), (int32x4_t)vceqq_f64(_Q5, v2)))))) & 1) != 0|| _D6 != 1.0)
  {
    v13 = *((double *)&v35 + 1);
    v12 = *(double *)&v35;
    _D17 = *(double *)&v40;
    goto LABEL_18;
  }
  v13 = *((double *)&v35 + 1);
  v12 = *(double *)&v35;
  if (v8 != 0.0 || *(double *)&v35 != 0.0 || v7 != 1.0 || *((double *)&v35 + 1) != 1.0)
  {
    _D17 = *(double *)&v40;
    if (*(double *)&v40 == 0.0)
    {
      _D2 = v7 * *((double *)&v35 + 1) - v8 * *(double *)&v35;
      return ((*(_QWORD *)&_D2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
    }
LABEL_18:
    _D19 = *((_QWORD *)&v39 + 1);
    __asm { FMLA            D20, D6, V5.D[1] }
    _D21 = vmlad_n_f64(vmuld_lane_f64(-*((double *)&v39 + 1), _Q5, 1), _D17, _Q5.f64[0]);
    __asm
    {
      FMLA            D23, D21, V1.D[1]
      FMLA            D24, D6, V4.D[1]
      FMLA            D20, D17, V4.D[1]
      FMLA            D6, D20, V1.D[1]
      FMLA            D5, D19, V4.D[1]
      FMLA            D3, D5, V1.D[1]
      FMLA            D2, D3, V0.D[1]
    }
    _D3 = vmlad_n_f64(v12 * _D21 - _D20 * v13, _D5, _Q1.f64[0]);
    __asm { FMLS            D2, D3, V0.D[0] }
    return ((*(_QWORD *)&_D2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  }
  return 1;
}

BOOL WebCore::TransformationMatrix::isInvertible(WebCore::TransformationMatrix *this, const double (*a2)[4][4])
{
  double v2;
  double v3;

  if (*((double *)this + 2) != 0.0
    || *((double *)this + 3) != 0.0
    || *((double *)this + 6) != 0.0
    || *((double *)this + 7) != 0.0
    || *((double *)this + 11) != 0.0
    || *((double *)this + 8) != 0.0
    || *((double *)this + 9) != 0.0
    || *((double *)this + 10) != 1.0
    || *((double *)this + 15) != 1.0)
  {
    goto LABEL_19;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0 && *((double *)this + 4) == 0.0 && *(double *)this == 1.0 && *((double *)this + 5) == 1.0)
    return 1;
  if (*((double *)this + 14) == 0.0)
    v3 = *(double *)this * *((double *)this + 5) - v2 * *((double *)this + 4);
  else
LABEL_19:
    v3 = WebCore::determinant4x4(this, a2);
  return ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
}

__n128 WebCore::TransformOperations::createBlendedMatrixOperationFromOperationsSuffix(uint64_t *a1, WebCore::TransformOperations *this, WebCore::TransformOperations *a3, unsigned int a4, uint64_t a5, int32x2_t *a6)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float32x2_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 result;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  float32x2_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __n128 v50;
  _OWORD v51[8];

  v12 = xmmword_1969F8F50;
  v13 = *(_OWORD *)&qword_1969F8F60;
  v51[5] = *(_OWORD *)&qword_1969F8F60;
  v14 = xmmword_1969F8F70;
  v15 = (__n128)unk_1969F8F80;
  v51[6] = xmmword_1969F8F70;
  v51[7] = unk_1969F8F80;
  v16 = constinit_5;
  v17 = unk_1969F8F20;
  v51[0] = constinit_5;
  v51[1] = unk_1969F8F20;
  v18 = xmmword_1969F8F30;
  v19 = unk_1969F8F40;
  v51[2] = xmmword_1969F8F30;
  memset(&v51[3], 0, 32);
  v20 = vmul_f32(vcvt_f32_s32(*a6), (float32x2_t)vdup_n_s32(0x3C800000u));
  *(float32x2_t *)&v43 = v20;
  LODWORD(v21) = *((_DWORD *)a3 + 3);
  v22 = a4;
  if (v21 > a4)
  {
    v23 = a4;
    do
    {
      (*(void (**)(_QWORD, _OWORD *, __int128 *))(**(_QWORD **)(*(_QWORD *)a3 + 8 * v23) + 48))(*(_QWORD *)(*(_QWORD *)a3 + 8 * v23), v51, &v43);
      ++v23;
      v21 = *((unsigned int *)a3 + 3);
    }
    while (v23 < v21);
    v20 = vmul_f32(vcvt_f32_s32(*a6), (float32x2_t)vdup_n_s32(0x3C800000u));
    v13 = *(_OWORD *)&qword_1969F8F60;
    v12 = xmmword_1969F8F50;
    v15 = (__n128)unk_1969F8F80;
    v14 = xmmword_1969F8F70;
    v17 = unk_1969F8F20;
    v16 = constinit_5;
    v19 = unk_1969F8F40;
    v18 = xmmword_1969F8F30;
  }
  v47 = v12;
  v48 = v13;
  v49 = v14;
  v50 = v15;
  v43 = v16;
  v44 = v17;
  v45 = v18;
  v46 = v19;
  v42 = v20;
  LODWORD(v24) = *((_DWORD *)this + 3);
  if (v24 > a4)
  {
    do
    {
      (*(void (**)(_QWORD, __int128 *, float32x2_t *))(**(_QWORD **)(*(_QWORD *)this + 8 * v22) + 48))(*(_QWORD *)(*(_QWORD *)this + 8 * v22), &v43, &v42);
      ++v22;
      v24 = *((unsigned int *)this + 3);
    }
    while (v22 < v24);
    LODWORD(v21) = *((_DWORD *)a3 + 3);
  }
  v25 = *(double *)a5;
  v26 = *(unsigned __int8 *)(a5 + 9);
  if ((_DWORD)v21)
  {
    v27 = *(_QWORD *)a3;
    v28 = 8 * v21;
    v29 = v28;
    v30 = *(_QWORD *)a3;
    while (*(_BYTE *)(*(_QWORD *)v30 + 12) != 12)
    {
      v30 += 8;
      v29 -= 8;
      if (!v29)
      {
        while (*(_BYTE *)(*(_QWORD *)v27 + 12) != 19)
        {
          v27 += 8;
          v28 -= 8;
          if (!v28)
            goto LABEL_14;
        }
        break;
      }
    }
    if (!WebCore::TransformOperations::isInvertible(a3, a6))
      goto LABEL_25;
    LODWORD(v24) = *((_DWORD *)this + 3);
    if (!(_DWORD)v24)
      goto LABEL_20;
  }
  else
  {
LABEL_14:
    if (!(_DWORD)v24)
      goto LABEL_20;
  }
  v31 = *(_QWORD *)this;
  v32 = 8 * v24;
  v33 = v32;
  v34 = *(_QWORD *)this;
  while (*(_BYTE *)(*(_QWORD *)v34 + 12) != 12)
  {
    v34 += 8;
    v33 -= 8;
    if (!v33)
    {
      while (*(_BYTE *)(*(_QWORD *)v31 + 12) != 19)
      {
        v31 += 8;
        v32 -= 8;
        if (!v32)
          goto LABEL_20;
      }
      break;
    }
  }
  if (!WebCore::TransformOperations::isInvertible(this, a6))
  {
LABEL_25:
    v26 = 0;
    if (v25 < 0.5)
      v25 = 0.0;
    else
      v25 = 1.0;
  }
LABEL_20:
  WebCore::TransformationMatrix::blend((uint64_t)&v43, (uint64_t)v51, v26, v25);
  v35 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v35 + 8) = 1;
  *(_BYTE *)(v35 + 12) = 19;
  *(_QWORD *)v35 = off_1E3416D38;
  v37 = v49;
  result = v50;
  v38 = v48;
  *(_OWORD *)(v35 + 80) = v47;
  *(_OWORD *)(v35 + 96) = v38;
  v40 = v45;
  v39 = v46;
  v41 = v44;
  *(_OWORD *)(v35 + 16) = v43;
  *(_OWORD *)(v35 + 32) = v41;
  *(_OWORD *)(v35 + 112) = v37;
  *(__n128 *)(v35 + 128) = result;
  *(_OWORD *)(v35 + 48) = v40;
  *(_OWORD *)(v35 + 64) = v39;
  *a1 = v35;
  return result;
}

void WebCore::TransformationMatrix::blend(uint64_t a1, uint64_t a2, int a3, double a4)
{
  int64x2_t v6;
  int64x2_t v7;
  __int16 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (a4 == 0.0 && a3 == 0)
  {
    v15 = *(_OWORD *)a2;
    v16 = *(_OWORD *)(a2 + 16);
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v17;
    *(_OWORD *)a1 = v15;
    *(_OWORD *)(a1 + 16) = v16;
    v18 = *(_OWORD *)(a2 + 64);
    v19 = *(_OWORD *)(a2 + 80);
    v20 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v20;
    *(_OWORD *)(a1 + 64) = v18;
    *(_OWORD *)(a1 + 80) = v19;
  }
  else if (a4 != 1.0 || a3 != 0)
  {
    v6 = vceqzq_f64(*(float64x2_t *)(a2 + 16));
    v7 = vceqq_f64(*(float64x2_t *)(a2 + 80), (float64x2_t)xmmword_1968A14B0);
    v8 = vminv_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)vceqq_f64(*(float64x2_t *)(a2 + 32), (float64x2_t)xmmword_1968A14C0)), (int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 96)))))) & (*(double *)(a2 + 8) == 0.0);
    if (*(double *)a2 != 1.0)
      LOBYTE(v8) = 0;
    v10 = *(double *)(a2 + 48);
    v9 = *(double *)(a2 + 56);
    v12 = *(double *)(a2 + 64);
    v11 = *(double *)(a2 + 72);
    v14 = *(double *)(a2 + 112);
    v13 = *(double *)(a2 + 120);
    if (v10 != 0.0)
      LOBYTE(v8) = 0;
    if (v12 != 0.0
      || (v8 & 1) == 0
      || v9 != 0.0
      || v11 != 0.0
      || v14 != 0.0
      || v13 != 1.0
      || *(double *)a1 != 1.0
      || *(double *)(a1 + 8) != 0.0
      || *(double *)(a1 + 16) != 0.0
      || *(double *)(a1 + 24) != 0.0
      || *(double *)(a1 + 32) != 0.0
      || *(double *)(a1 + 40) != 1.0
      || *(double *)(a1 + 48) != 0.0
      || *(double *)(a1 + 56) != 0.0
      || *(double *)(a1 + 64) != 0.0
      || *(double *)(a1 + 72) != 0.0
      || *(double *)(a1 + 80) != 1.0
      || *(double *)(a1 + 88) != 0.0
      || *(double *)(a1 + 96) != 0.0
      || *(double *)(a1 + 104) != 0.0
      || *(double *)(a1 + 112) != 0.0
      || *(double *)(a1 + 120) != 1.0)
    {
      *(int32x2_t *)v6.i8 = vmovn_s64(v6);
      *(int16x4_t *)v6.i8 = vmovn_s32((int32x4_t)v6);
      if ((v6.i8[0] & 1) != 0
        && (v6.i8[2] & 1) != 0
        && v10 == 0.0
        && (*(int32x2_t *)v7.i8 = vmovn_s64(v7), *(int16x4_t *)v7.i8 = vmovn_s32((int32x4_t)v7), (v7.i8[0] & 1) != 0)
        && (v7.i8[2] & 1) != 0
        && v9 == 0.0
        && v12 == 0.0
        && v11 == 0.0
        && v14 == 0.0
        && v13 == 1.0
        && *(double *)(a1 + 16) == 0.0
        && *(double *)(a1 + 24) == 0.0
        && *(double *)(a1 + 48) == 0.0
        && *(double *)(a1 + 56) == 0.0
        && *(double *)(a1 + 64) == 0.0
        && *(double *)(a1 + 72) == 0.0
        && *(double *)(a1 + 80) == 1.0
        && *(double *)(a1 + 88) == 0.0
        && *(double *)(a1 + 112) == 0.0
        && *(double *)(a1 + 120) == 1.0)
      {
        WebCore::TransformationMatrix::blend2(a1, a2, a3, a4);
      }
      else
      {
        WebCore::TransformationMatrix::blend4(a1, (double *)a2, a3, a4);
      }
    }
  }
}

uint64_t WebCore::TransformOperationsSharedPrimitivesPrefix::update(uint64_t this, const WebCore::TransformOperations *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  _BYTE *v12;
  char v14;

  v3 = this;
  v4 = *((unsigned int *)a2 + 3);
  if (*(_BYTE *)(this + 8) && *(_QWORD *)this < v4)
    v4 = *(_QWORD *)this;
  if (v4)
  {
    v5 = 0;
    v6 = (_QWORD *)(this + 16);
    while (1)
    {
      if (v5 >= *((unsigned int *)a2 + 3))
      {
LABEL_48:
        __break(0xC471u);
        JUMPOUT(0x1962742F8);
      }
      v7 = *(_DWORD **)(*(_QWORD *)a2 + 8 * v5);
      ++v7[2];
      if (v5 >= *(unsigned int *)(v3 + 28))
      {
        this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 72))(v7);
        v14 = this;
        v10 = *(unsigned int *)(v3 + 28);
        if ((_DWORD)v10 == *(_DWORD *)(v3 + 24))
        {
          this = WTF::Vector<WebCore::TransformOperationType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 16, (WTF *)(v10 + 1), (unint64_t)&v14);
          v10 = *(unsigned int *)(v3 + 28);
          *(_BYTE *)(*(_QWORD *)(v3 + 16) + v10) = *(_BYTE *)this;
        }
        else
        {
          *(_BYTE *)(*v6 + v10) = this;
        }
        *(_DWORD *)(v3 + 28) = v10 + 1;
        v9 = 4;
        goto LABEL_13;
      }
      v8 = *(unsigned __int8 *)(*v6 + v5);
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 72))(v7);
      if ((_DWORD)this == v8)
        goto LABEL_7;
      if (this <= 0x12)
      {
        if (((1 << this) & 0x40100) != 0)
        {
          if (v8 == 18 || v8 == 8)
          {
            v12 = &WebCore::TransformOperation::sharedPrimitiveType(WebCore::TransformOperationType)const::sharedPrimitives;
LABEL_28:
            LOBYTE(v8) = v12[1];
LABEL_7:
            if (v5 >= *(unsigned int *)(v3 + 28))
              goto LABEL_48;
            v9 = 0;
            *(_BYTE *)(*v6 + v5) = v8;
            goto LABEL_13;
          }
          if ((_DWORD)this == 14)
          {
LABEL_30:
            if (v8 == 14 || v8 == 2)
            {
              v12 = &unk_1969F8E86;
              goto LABEL_28;
            }
            if ((_DWORD)this != 5)
              goto LABEL_45;
LABEL_40:
            v12 = &unk_1969F8E88;
            if (v8 == 16 || v8 == 5)
              goto LABEL_28;
            goto LABEL_45;
          }
          if ((_DWORD)this == 16)
            goto LABEL_40;
        }
        else
        {
          if (((1 << this) & 0x4004) != 0)
            goto LABEL_30;
          if (((1 << this) & 0x10020) != 0)
            goto LABEL_40;
        }
      }
LABEL_45:
      *(_QWORD *)v3 = v5;
      v9 = 1;
      *(_BYTE *)(v3 + 8) = 1;
      *(_DWORD *)(v3 + 28) = v5;
LABEL_13:
      if (v7[2] == 1)
        this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
      if ((v9 | 4) == 4 && v4 != ++v5)
        continue;
      return this;
    }
  }
  return this;
}

float64_t WebCore::TransformState::translateTransform(WebCore::TransformState *this, const WebCore::LayoutSize *a2)
{
  float64x2_t *v2;
  double v3;
  float64x2_t v4;
  float64x2_t v5;
  double v6;
  double v7;
  double v8;

  v2 = (float64x2_t *)*((_QWORD *)this + 10);
  v3 = (double)*(int *)a2 * 0.015625;
  v4.f64[0] = (double)*((int *)a2 + 1) * 0.015625;
  if (*((_DWORD *)this + 28))
  {
    v5 = vaddq_f64(v2[6], vmlaq_n_f64(vmulq_n_f64(v2[2], v4.f64[0]), *v2, v3));
    v4 = vaddq_f64(v2[7], vmlaq_n_f64(vmulq_n_f64(v2[3], v4.f64[0]), v2[1], v3));
    v2[6] = v5;
    v2[7] = v4;
  }
  else
  {
    if (v3 != 0.0)
    {
      v6 = v2[2].f64[0];
      v2->f64[0] = v2->f64[0] + v2[1].f64[1] * v3;
      v7 = v2[4].f64[0];
      v2[2].f64[0] = v6 + v2[3].f64[1] * v3;
      v8 = v2[6].f64[0];
      v2[4].f64[0] = v7 + v2[5].f64[1] * v3;
      v2[6].f64[0] = v8 + v2[7].f64[1] * v3;
    }
    if (v4.f64[0] != 0.0)
    {
      v2->f64[1] = v2->f64[1] + v2[1].f64[1] * v4.f64[0];
      v2[2].f64[1] = v2[2].f64[1] + v2[3].f64[1] * v4.f64[0];
      v2[4].f64[1] = v2[4].f64[1] + v2[5].f64[1] * v4.f64[0];
      v4.f64[0] = v2[6].f64[1] + v2[7].f64[1] * v4.f64[0];
      v2[6].f64[1] = v4.f64[0];
    }
  }
  return v4.f64[0];
}

double WebCore::TransformationMatrix::translateRight(WebCore::TransformationMatrix *this, double result, double a3)
{
  double v3;
  double v4;
  double v5;

  if (result != 0.0)
  {
    v3 = *((double *)this + 4);
    *(double *)this = *(double *)this + *((double *)this + 3) * result;
    v4 = *((double *)this + 8);
    *((double *)this + 4) = v3 + *((double *)this + 7) * result;
    v5 = *((double *)this + 12);
    *((double *)this + 8) = v4 + *((double *)this + 11) * result;
    result = v5 + *((double *)this + 15) * result;
    *((double *)this + 12) = result;
  }
  if (a3 != 0.0)
  {
    *((double *)this + 1) = *((double *)this + 1) + *((double *)this + 3) * a3;
    *((double *)this + 5) = *((double *)this + 5) + *((double *)this + 7) * a3;
    *((double *)this + 9) = *((double *)this + 9) + *((double *)this + 11) * a3;
    result = *((double *)this + 13) + *((double *)this + 15) * a3;
    *((double *)this + 13) = result;
  }
  return result;
}

float64x2_t WebCore::TransformationMatrix::translate(float64x2_t *this, double a2, double a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t result;
  float64x2_t v6;

  v3 = vmlaq_n_f64(vmulq_n_f64(this[2], a3), *this, a2);
  v4 = vmlaq_n_f64(vmulq_n_f64(this[3], a3), this[1], a2);
  result = vaddq_f64(this[6], v3);
  v6 = vaddq_f64(this[7], v4);
  this[6] = result;
  this[7] = v6;
  return result;
}

double WebCore::TransformationMatrix::flatten(WebCore::TransformationMatrix *this)
{
  double result;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  result = 1.0;
  *((_OWORD *)this + 5) = xmmword_1968A14B0;
  *((_QWORD *)this + 14) = 0;
  return result;
}

__n128 WebCore::TransformationMatrix::multiply(float64x2_t *this, const WebCore::TransformationMatrix *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  const double *v10;
  float64x2x4_t v12;
  float64x2x4_t v13;
  float64x2x4_t v14;
  float64x2x4_t v15;

  v2 = *this;
  v3 = this[1];
  v4 = this[2];
  v5 = this[3];
  v6 = this[4];
  v7 = this[5];
  v8 = this[6];
  v9 = this[7];
  v14 = vld4q_dup_f64((const double *)a2);
  v10 = (const double *)((char *)a2 + 32);
  v12 = vld4q_dup_f64(v10);
  v10 += 4;
  *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v14.val[0], *this), v14.val[1], v4), v14.val[2], v6), v14.val[3], v8);
  this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v14.val[0], v3), v14.val[1], v5), v14.val[2], v7), v14.val[3], v9);
  v15 = vld4q_dup_f64(v10);
  v10 += 4;
  this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v12.val[0], v2), v12.val[1], v4), v12.val[2], v6), v12.val[3], v8);
  this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v12.val[0], v3), v12.val[1], v5), v12.val[2], v7), v12.val[3], v9);
  v13 = vld4q_dup_f64(v10);
  this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v15.val[0], v2), v15.val[1], v4), v15.val[2], v6), v15.val[3], v8);
  this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v15.val[0], v3), v15.val[1], v5), v15.val[2], v7), v15.val[3], v9);
  this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v13.val[0], v2), v13.val[1], v4), v13.val[2], v6), v13.val[3], v8);
  this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v13.val[0], v3), v13.val[1], v5), v13.val[2], v7), v13.val[3], v9);
  return (__n128)v13.val[0];
}

float32x2_t WebCore::TransformationMatrix::projectPoint(float64x2_t *this, const WebCore::FloatPoint *a2, BOOL *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  float64x2_t v7;
  double v8;
  float64x2_t v10;

  if (a3)
    *a3 = 0;
  v3 = this[5].f64[0];
  if (v3 == 0.0)
  {
    return 0;
  }
  else
  {
    v4 = *(float *)a2;
    v5 = *((float *)a2 + 1);
    v6 = -(this[7].f64[0] + this[3].f64[0] * v5 + this[1].f64[0] * v4) / v3;
    v7 = vaddq_f64(this[6], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(this[2], v5), *this, v4), this[4], v6));
    v8 = this[7].f64[1] + this[3].f64[1] * v5 + v4 * this[1].f64[1] + v6 * this[5].f64[1];
    if (v8 <= 0.0)
    {
      v10.f64[0] = NAN;
      v10.f64[1] = NAN;
      v7 = (float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v10), (int8x16_t)vdupq_n_s64(0x4137D78400000000uLL), (int8x16_t)v7);
      if (a3)
        *a3 = 1;
    }
    else if (v8 != 1.0)
    {
      v7 = vdivq_f64(v7, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0));
    }
    return vcvt_f32_f64(v7);
  }
}

void WebCore::TransformState::mappedQuad(WebCore::TransformState *this@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;

  if (a2)
    *a2 = 0;
  v3 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)a3 = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(a3 + 16) = v3;
  WebCore::TransformState::mapQuad((uint64_t)this, (FloatQuad *)a3, (double (*)[4][4])*((unsigned int *)this + 28), a2);
}

void WebCore::TransformState::mappedSecondaryQuad(WebCore::TransformState *this@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  __int128 v5;
  __int128 v6;
  FloatQuad v7;

  if (a2)
    *a2 = 0;
  v4 = *((_BYTE *)this + 72);
  if (v4)
  {
    v5 = *(_OWORD *)((char *)this + 56);
    *(_OWORD *)&v7.var0.m_x = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)&v7.var2.m_x = v5;
    WebCore::TransformState::mapQuad((uint64_t)this, &v7, (double (*)[4][4])*((unsigned int *)this + 28), a2);
    v6 = *(_OWORD *)&v7.var2.m_x;
    *(_OWORD *)a3 = *(_OWORD *)&v7.var0.m_x;
    *(_OWORD *)(a3 + 16) = v6;
    v4 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 32) = v4;
}

double WebCore::TransformationMatrix::TransformationMatrix(WebCore::TransformationMatrix *this, const WebCore::AffineTransform *a2)
{
  __int128 v2;
  __int128 v3;
  double result;

  v2 = *((_OWORD *)a2 + 1);
  v3 = *((_OWORD *)a2 + 2);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_OWORD *)this + 2) = v2;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_1968A14B0;
  result = 0.0;
  *((_OWORD *)this + 6) = v3;
  *((_OWORD *)this + 7) = xmmword_1968A14C0;
  return result;
}

{
  __int128 v2;
  __int128 v3;
  double result;

  v2 = *((_OWORD *)a2 + 1);
  v3 = *((_OWORD *)a2 + 2);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_OWORD *)this + 2) = v2;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_1968A14B0;
  result = 0.0;
  *((_OWORD *)this + 6) = v3;
  *((_OWORD *)this + 7) = xmmword_1968A14C0;
  return result;
}

double WebCore::TransformationMatrix::scale(float64x2_t *this, double a2)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&WebCore::TransformationMatrix::scaleNonUniform(this, a2, a2);
  return result;
}

float64x2_t WebCore::TransformationMatrix::scaleNonUniform(float64x2_t *this, double a2, double a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t result;
  float64x2_t v6;

  v3 = vmulq_n_f64(*this, a2);
  v4 = vmulq_n_f64(this[1], a2);
  *this = v3;
  this[1] = v4;
  result = vmulq_n_f64(this[2], a3);
  v6 = vmulq_n_f64(this[3], a3);
  this[2] = result;
  this[3] = v6;
  return result;
}

float64x2_t *WebCore::TransformationMatrix::rotateRadians(float64x2_t *a1, int a2, long double a3)
{
  double v6;
  double v7;
  double v9;
  const double *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  _QWORD v21[8];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2x4_t v28;
  float64x2x4_t v29;
  float64x2x4_t v30;
  float64x2x4_t v31;

  v6 = sin(a3);
  v7 = v6;
  if (a2 == 1)
  {
    if (v6 < 2.22044605e-16 && v6 > -2.22044605e-16)
      v7 = 0.0;
    v9 = cos(a3);
    if (v9 < 2.22044605e-16 && v9 > -2.22044605e-16)
      v9 = 0.0;
  }
  else
  {
    v9 = cos(a3);
  }
  *(double *)v21 = v9;
  *(double *)&v21[1] = v7;
  v21[2] = 0;
  v21[3] = 0;
  *(double *)&v21[4] = -v7;
  *(double *)&v21[5] = v9;
  v21[6] = 0;
  v21[7] = 0;
  v22 = constinit_39;
  v23 = unk_1969F8FA0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0x3FF0000000000000;
  v11 = (const double *)v21;
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1[5];
  v18 = a1[6];
  v19 = a1[7];
  v30 = vld4q_dup_f64(v11);
  v11 += 4;
  v28 = vld4q_dup_f64(v11);
  v11 += 4;
  *a1 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v30.val[0], *a1), v30.val[1], v14), v30.val[2], v16), v30.val[3], v18);
  a1[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v30.val[0], v13), v30.val[1], v15), v30.val[2], v17), v30.val[3], v19);
  v31 = vld4q_dup_f64(v11);
  v11 += 4;
  a1[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v28.val[0], v12), v28.val[1], v14), v28.val[2], v16), v28.val[3], v18);
  a1[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v28.val[0], v13), v28.val[1], v15), v28.val[2], v17), v28.val[3], v19);
  v29 = vld4q_dup_f64(v11);
  a1[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v31.val[0], v12), v31.val[1], v14), v31.val[2], v16), v31.val[3], v18);
  a1[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v31.val[0], v13), v31.val[1], v15), v31.val[2], v17), v31.val[3], v19);
  a1[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v29.val[0], v12), v29.val[1], v14), v29.val[2], v16), v29.val[3], v18);
  a1[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v29.val[0], v13), v29.val[1], v15), v29.val[2], v17), v29.val[3], v19);
  return a1;
}

double WebCore::TransformationMatrix::flipX(float64x2_t *this)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&WebCore::TransformationMatrix::scaleNonUniform(this, -1.0, 1.0);
  return result;
}

double WebCore::TransformationMatrix::flipY(float64x2_t *this)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&WebCore::TransformationMatrix::scaleNonUniform(this, 1.0, -1.0);
  return result;
}

unint64_t WebCore::TransformationMatrix::clampedBoundsOfProjectedQuad(float64x2_t *this, const FloatQuad *a2)
{
  float v2;
  float v3;
  float v4;
  float v6;
  float v7;
  float v8;
  float v10;
  float v11;
  float v12;
  double v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;

  WebCore::TransformationMatrix::projectQuad(this, a2, 0, (uint64_t)&v19);
  if (v25 >= v23)
    v2 = v23;
  else
    v2 = v25;
  if (v21 >= v19)
    v3 = v19;
  else
    v3 = v21;
  if (v2 >= v3)
    v2 = v3;
  v4 = fabsf(v2);
  if (v4 == INFINITY || v4 > 2147500000.0)
    v2 = (float)((SLODWORD(v2) >> 31) ^ 0x7FFFFFFF);
  if (v26 >= v24)
    v6 = v24;
  else
    v6 = v26;
  if (v22 >= v20)
    v7 = v20;
  else
    v7 = v22;
  if (v6 >= v7)
    v6 = v7;
  v8 = fabsf(v6);
  if (v8 == INFINITY || v8 > 2147500000.0)
    v6 = (float)((SLODWORD(v6) >> 31) ^ 0x7FFFFFFF);
  v10 = floorf(v2);
  if (v10 < -16777000.0)
    v10 = -16777000.0;
  if (v10 <= 16777000.0)
    v11 = v10;
  else
    v11 = 16777000.0;
  v12 = floorf(v6);
  if (v12 < -16777000.0)
    v12 = -16777000.0;
  if (v12 > 16777000.0)
    v12 = 16777000.0;
  if (v11 >= 33554432.0)
    goto LABEL_48;
  if (v11 <= -33554000.0)
  {
    v14 = 0x80000000;
    goto LABEL_41;
  }
  v13 = v11 * 64.0;
  if (v13 >= 2147483650.0)
  {
LABEL_48:
    v14 = 0x7FFFFFFFLL;
    goto LABEL_41;
  }
  v14 = 0x80000000;
  if (v13 > -2147483650.0)
    v14 = (int)v13;
LABEL_41:
  if (v12 >= 33554432.0)
  {
    v16 = 0x7FFFFFFF00000000;
  }
  else if (v12 <= -33554000.0)
  {
    v16 = 0x8000000000000000;
  }
  else
  {
    v15 = v12 * 64.0;
    v16 = 0x7FFFFFFF00000000;
    v17 = 0x8000000000000000;
    if (v15 > -2147483650.0)
      v17 = (unint64_t)(int)v15 << 32;
    if (v15 < 2147483650.0)
      v16 = v17;
  }
  return v16 | v14;
}

double WebCore::TransformationMatrix::map4ComponentPoint(WebCore::TransformationMatrix *this, double *a2, double *a3, double *a4, double *a5)
{
  double result;
  double v11;
  double v12;

  if (WebCore::TransformationMatrix::isIdentityOrTranslation(this))
  {
    *a2 = *((double *)this + 12) + *a2;
    *a3 = *((double *)this + 13) + *a3;
    result = *((double *)this + 14) + *a4;
    *a4 = result;
  }
  else
  {
    v11 = *a3 * *((double *)this + 5)
        + *a2 * *((double *)this + 1)
        + *a4 * *((double *)this + 9)
        + *a5 * *((double *)this + 13);
    v12 = *a3 * *((double *)this + 6)
        + *a2 * *((double *)this + 2)
        + *a4 * *((double *)this + 10)
        + *a5 * *((double *)this + 14);
    result = *a3 * *((double *)this + 7)
           + *a2 * *((double *)this + 3)
           + *a4 * *((double *)this + 11)
           + *a5 * *((double *)this + 15);
    *a2 = *a3 * *((double *)this + 4)
        + *a2 * *(double *)this
        + *a4 * *((double *)this + 8)
        + *a5 * *((double *)this + 12);
    *a3 = v11;
    *a4 = v12;
    *a5 = result;
  }
  return result;
}

BOOL WebCore::TransformationMatrix::isIdentityOrTranslation(WebCore::TransformationMatrix *this)
{
  return *(double *)this == 1.0
      && *((double *)this + 1) == 0.0
      && *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 4) == 0.0
      && *((double *)this + 5) == 1.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 15) == 1.0;
}

float32x2_t WebCore::TransformationMatrix::internalMapPoint(float64x2_t *this, const WebCore::FloatPoint *a2)
{
  double v2;
  double v3;
  float64x2_t v4;
  double v5;

  v2 = *(float *)a2;
  v3 = *((float *)a2 + 1);
  v4 = vmlaq_n_f64(vmlaq_n_f64(this[6], *this, v2), this[2], v3);
  v5 = this[7].f64[1] + v2 * this[1].f64[1] + v3 * this[3].f64[1];
  if (v5 != 1.0 && v5 != 0.0)
    v4 = vdivq_f64(v4, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v5, 0));
  return vcvt_f32_f64(v4);
}

float WebCore::TransformationMatrix::mapPoint(double *a1, float *a2)
{
  float v5;

  if (!WebCore::TransformationMatrix::isIdentityOrTranslation((WebCore::TransformationMatrix *)a1))
    return WebCore::TransformationMatrix::internalMapPoint((WebCore::TransformationMatrix *)a1, a2);
  v5 = a1[12];
  return *a2 + v5;
}

float WebCore::TransformationMatrix::internalMapPoint(WebCore::TransformationMatrix *a1, float *a2)
{
  double v3;
  double v4;
  double v5;

  v5 = 0.0;
  v3 = 0.0;
  v4 = 0.0;
  WebCore::TransformationMatrix::multVecMatrix(a1, *a2, a2[1], a2[2], &v5, &v4, &v3);
  return v5;
}

uint64_t WebCore::TransformationMatrix::mapRect(float64x2_t *this, const WebCore::IntRect *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v15[4];

  v2 = (float)*((int *)a2 + 1);
  v15[0] = (float)*(int *)a2;
  v15[1] = v2;
  v3 = (float)*((int *)a2 + 3);
  v15[2] = (float)*((int *)a2 + 2);
  v15[3] = v3;
  WebCore::TransformationMatrix::mapRect(this, (const WebCore::FloatRect *)v15);
  v6 = floorf(v5);
  v7 = 2147500000.0;
  if (v6 < 2147500000.0)
  {
    v7 = -2147500000.0;
    if (v6 > -2147500000.0)
      v7 = (float)(int)v6;
  }
  v8 = floorf(v4);
  v9 = 2147500000.0;
  if (v8 < 2147500000.0)
  {
    v9 = -2147500000.0;
    if (v8 > -2147500000.0)
      v9 = (float)(int)v8;
  }
  v10 = 0x7FFFFFFFLL;
  v11 = 0x80000000;
  if (v7 > -2147500000.0)
    v11 = (int)v7;
  if (v7 < 2147500000.0)
    v10 = v11;
  v12 = 0x7FFFFFFF00000000;
  v13 = 0x8000000000000000;
  if (v9 > -2147500000.0)
    v13 = (unint64_t)(int)v9 << 32;
  if (v9 < 2147500000.0)
    v12 = v13;
  return v12 | v10;
}

uint64_t WebCore::TransformationMatrix::mapRect(WebCore::TransformationMatrix *this, const WebCore::LayoutRect *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  double v6;
  double v7;
  float v8;
  float v9;
  double v10;
  double v11;
  float v12;
  double v13;
  float v14;
  double v15;
  float v16;
  double v17;
  float v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  float v24;
  int v25;
  uint64_t v26;
  float v29;
  float v30;
  float v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  float v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float v59;
  float v60;
  float v61;
  double v62;
  double v63;
  double v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v73;
  float v74;

  v2 = (float)*(int *)a2 * 0.015625;
  v3 = (float)*((int *)a2 + 1) * 0.015625;
  v4 = (float)*((int *)a2 + 2) * 0.015625;
  v5 = (float)*((int *)a2 + 3) * 0.015625;
  v6 = *((double *)this + 3);
  if (*((double *)this + 2) != 0.0
    || v6 != 0.0
    || *((double *)this + 6) != 0.0
    || *((double *)this + 7) != 0.0
    || *((double *)this + 11) != 0.0
    || *((double *)this + 8) != 0.0
    || *((double *)this + 9) != 0.0
    || *((double *)this + 10) != 1.0
    || *((double *)this + 15) != 1.0)
  {
    goto LABEL_53;
  }
  v7 = *((double *)this + 1);
  if (v7 == 0.0 && *((double *)this + 4) == 0.0 && *(double *)this == 1.0 && *((double *)this + 5) == 1.0)
  {
    v29 = *((double *)this + 12);
    v30 = *((double *)this + 13);
    v18 = v2 + v29;
    v19 = v3 + v30;
    goto LABEL_24;
  }
  if (*((double *)this + 14) == 0.0)
  {
    v8 = v2 + v4;
    v9 = v3 + v5;
    v10 = *((double *)this + 4);
    v11 = *((double *)this + 5);
    if (*(double *)this <= 0.0)
      v12 = v2 + v4;
    else
      v12 = (float)*(int *)a2 * 0.015625;
    v13 = *(double *)this * v12;
    if (v7 <= 0.0)
      v14 = v8;
    else
      v14 = (float)*(int *)a2 * 0.015625;
    v15 = v7 * v14;
    if (v10 <= 0.0)
      v16 = v9;
    else
      v16 = (float)*((int *)a2 + 1) * 0.015625;
    v17 = v13 + v10 * v16;
    if (v11 > 0.0)
      v9 = (float)*((int *)a2 + 1) * 0.015625;
    v18 = *((double *)this + 12) + v17;
    v19 = *((double *)this + 13) + v15 + v11 * v9;
  }
  else
  {
LABEL_53:
    v31 = v2 + v4;
    v32 = v2;
    v33 = v3;
    v34 = *((double *)this + 12);
    v35 = *((double *)this + 13);
    v36 = *((double *)this + 1);
    v37 = v34 + v2 * *(double *)this;
    v38 = *((double *)this + 4);
    v39 = *((double *)this + 5);
    v40 = v37 + v3 * v38;
    v41 = v35 + v32 * v36;
    v42 = v41 + v3 * v39;
    v43 = *((double *)this + 15);
    v44 = v43 + v32 * v6;
    v45 = *((double *)this + 7);
    v46 = v44 + v3 * v45;
    if (v46 != 1.0 && v46 != 0.0)
    {
      v40 = v40 / v46;
      v42 = v42 / v46;
    }
    v47 = v3 + v5;
    v48 = v31;
    v49 = v34 + v31 * *(double *)this;
    v50 = v49 + v33 * v38;
    v51 = v35 + v48 * v36;
    v52 = v51 + v33 * v39;
    v53 = v43 + v48 * v6;
    v54 = v53 + v33 * v45;
    if (v54 != 1.0 && v54 != 0.0)
    {
      v50 = v50 / v54;
      v52 = v52 / v54;
    }
    v55 = v47;
    v56 = v49 + v47 * v38;
    v57 = v51 + v47 * v39;
    v58 = v53 + v47 * v45;
    if (v58 != 1.0 && v58 != 0.0)
    {
      v56 = v56 / v58;
      v57 = v57 / v58;
    }
    v59 = v40;
    v60 = v50;
    v62 = v37 + v55 * v38;
    v63 = v41 + v55 * v39;
    v64 = v44 + v55 * v45;
    if (v64 != 1.0 && v64 != 0.0)
    {
      v62 = v62 / v64;
      v63 = v63 / v64;
    }
    v65 = v42;
    v66 = v52;
    v67 = v57;
    v68 = v62;
    v69 = v63;
    v61 = v56;
    if (v68 >= v61)
      v18 = v56;
    else
      v18 = v62;
    if (v60 >= v59)
      v70 = v59;
    else
      v70 = v60;
    if (v18 >= v70)
      v18 = v70;
    v71 = fabsf(v18);
    if (v71 == INFINITY || v71 > 2147500000.0)
      v18 = (float)((SLODWORD(v18) >> 31) ^ 0x7FFFFFFF);
    if (v69 >= v67)
      v19 = v67;
    else
      v19 = v69;
    if (v66 >= v65)
      v73 = v65;
    else
      v73 = v66;
    if (v19 >= v73)
      v19 = v73;
    v74 = fabsf(v19);
    if (v74 == INFINITY || v74 > 2147500000.0)
      v19 = (float)((SLODWORD(v19) >> 31) ^ 0x7FFFFFFF);
  }
LABEL_24:
  v20 = floorf(v18 * 64.0);
  if (v20 > -2147500000.0)
    v21 = (int)v20;
  else
    v21 = 0x80000000;
  if (v20 < 2147500000.0)
    LODWORD(v22) = v21;
  else
    LODWORD(v22) = 0x7FFFFFFF;
  if (v20 >= 2147500000.0 || v20 <= -2147500000.0)
    v22 = v22;
  else
    v22 = (int)v20;
  v24 = floorf(v19 * 64.0);
  if (v24 > -2147500000.0)
    v25 = (int)v24;
  else
    v25 = 0x80000000;
  if (v24 < 2147500000.0)
    LODWORD(v26) = v25;
  else
    LODWORD(v26) = 0x7FFFFFFF;
  if (v24 >= 2147500000.0 || v24 <= -2147500000.0)
    v26 = v26;
  else
    v26 = (int)v24;
  return v22 | (v26 << 32);
}

float64x2_t WebCore::TransformationMatrix::scale3d(float64x2_t *this, double a2, double a3, double a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t result;
  float64x2_t v9;

  v4 = vmulq_n_f64(*this, a2);
  v5 = vmulq_n_f64(this[1], a2);
  *this = v4;
  this[1] = v5;
  v6 = vmulq_n_f64(this[2], a3);
  v7 = vmulq_n_f64(this[3], a3);
  this[2] = v6;
  this[3] = v7;
  result = vmulq_n_f64(this[4], a4);
  v9 = vmulq_n_f64(this[5], a4);
  this[4] = result;
  this[5] = v9;
  return result;
}

float64x2_t *WebCore::TransformationMatrix::rotate3d(float64x2_t *a1, int a2, double a3, double a4, double a5, double a6)
{
  double v7;
  double v8;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v17;
  const double *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v29;
  double v30;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  float64x2x4_t v43;
  float64x2x4_t v44;
  float64x2x4_t v45;
  float64x2x4_t v46;

  v7 = a4;
  v8 = a3;
  v10 = a4 * a4;
  v33 = a5;
  v11 = sqrt(a4 * a4 + a3 * a3 + a5 * a5);
  if (v11 == 0.0 || v11 != 1.0)
  {
    if (v11 == 0.0)
      return a1;
    if (v11 != 1.0)
    {
      v8 = v8 / v11;
      v7 = a4 / v11;
      v33 = a5 / v11;
    }
    v29 = a6 * 0.0174532925;
    v30 = sin(a6 * 0.0174532925);
    v15 = v30;
    if (a2 == 1)
    {
      if (v30 < 2.22044605e-16 && v30 > -2.22044605e-16)
        v15 = 0.0;
      v17 = cos(v29);
      if (v17 < 2.22044605e-16 && v17 > -2.22044605e-16)
        v17 = 0.0;
    }
    else
    {
      v17 = cos(v29);
    }
    v39 = 0x3FF0000000000000;
    v36 = xmmword_1969F8F30;
    v37 = unk_1969F8F40;
    v38 = xmmword_1969F8F50;
    v34 = constinit_5;
    v35 = unk_1969F8F20;
    if (v8 == 1.0 && v7 == 0.0 && v33 == 0.0)
    {
      *(_QWORD *)&v36 = 0;
      *(_QWORD *)&v35 = 0;
      v34 = 0x3FF0000000000000uLL;
      *((double *)&v36 + 1) = v17;
      *(double *)&v37 = v15;
      *(_QWORD *)&v38 = 0;
      *((double *)&v38 + 1) = -v15;
      goto LABEL_57;
    }
    if (v7 == 1.0 && v8 == 0.0 && v33 == 0.0)
    {
      v34 = *(unint64_t *)&v17;
      *(double *)&v35 = -v15;
      v36 = xmmword_1968A14C0;
      *(_QWORD *)&v37 = 0;
      v38 = *(unint64_t *)&v15;
LABEL_57:
      v39 = *(_QWORD *)&v17;
      goto LABEL_24;
    }
    if (v7 != 0.0 || v33 != 1.0 || v8 != 0.0)
    {
      *(double *)&v34 = v17 + v8 * v8 * (1.0 - v17);
      *((double *)&v34 + 1) = v33 * v15 + v7 * v8 * (1.0 - v17);
      *(double *)&v35 = -(v7 * v15 - v33 * v8 * (1.0 - v17));
      *(double *)&v36 = -(v33 * v15 - v7 * v8 * (1.0 - v17));
      *((double *)&v36 + 1) = v17 + v7 * v7 * (1.0 - v17);
      *(double *)&v37 = v8 * v15 + v7 * v33 * (1.0 - v17);
      *(double *)&v38 = v7 * v15 + v33 * v8 * (1.0 - v17);
      *((double *)&v38 + 1) = -(v8 * v15 - v7 * v33 * (1.0 - v17));
      v17 = v17 + v33 * v33 * (1.0 - v17);
      goto LABEL_57;
    }
    goto LABEL_23;
  }
  v13 = a6 * 0.0174532925;
  v14 = sin(a6 * 0.0174532925);
  v15 = v14;
  if (a2 == 1)
  {
    if (v14 < 2.22044605e-16 && v14 > -2.22044605e-16)
      v15 = 0.0;
    v17 = cos(v13);
    if (v17 < 2.22044605e-16 && v17 > -2.22044605e-16)
      v17 = 0.0;
  }
  else
  {
    v17 = cos(v13);
  }
  v39 = 0x3FF0000000000000;
  v36 = xmmword_1969F8F30;
  v37 = unk_1969F8F40;
  v38 = xmmword_1969F8F50;
  v34 = constinit_5;
  v35 = unk_1969F8F20;
  if (v8 == 1.0 && v7 == 0.0 && v33 == 0.0)
  {
    *(_QWORD *)&v36 = 0;
    *(_QWORD *)&v35 = 0;
    v34 = 0x3FF0000000000000uLL;
    *((double *)&v36 + 1) = v17;
    *(double *)&v37 = v15;
    *(_QWORD *)&v38 = 0;
    *((double *)&v38 + 1) = -v15;
    goto LABEL_28;
  }
  if (v7 == 1.0 && v8 == 0.0 && v33 == 0.0)
  {
    v34 = *(unint64_t *)&v17;
    *(double *)&v35 = -v15;
    v36 = xmmword_1968A14C0;
    *(_QWORD *)&v37 = 0;
    v38 = *(unint64_t *)&v15;
LABEL_28:
    v39 = *(_QWORD *)&v17;
    goto LABEL_24;
  }
  if (v7 != 0.0 || v33 != 1.0 || v8 != 0.0)
  {
    *(double *)&v34 = v17 + v8 * v8 * (1.0 - v17);
    *((double *)&v34 + 1) = v15 * v33 + v7 * v8 * (1.0 - v17);
    *(double *)&v35 = -(v15 * v7 - v33 * v8 * (1.0 - v17));
    *(double *)&v36 = -(v15 * v33 - v7 * v8 * (1.0 - v17));
    *((double *)&v36 + 1) = v17 + v10 * (1.0 - v17);
    *(double *)&v37 = v15 * v8 + v7 * v33 * (1.0 - v17);
    *(double *)&v38 = v15 * v7 + v33 * v8 * (1.0 - v17);
    *((double *)&v38 + 1) = -(v15 * v8 - v7 * v33 * (1.0 - v17));
    v17 = v17 + v33 * v33 * (1.0 - v17);
    goto LABEL_28;
  }
LABEL_23:
  *(double *)&v34 = v17;
  *((double *)&v34 + 1) = v15;
  *(_QWORD *)&v35 = 0;
  *(double *)&v36 = -v15;
  *((double *)&v36 + 1) = v17;
  *(_QWORD *)&v37 = 0;
  v38 = 0uLL;
  v39 = 0x3FF0000000000000;
LABEL_24:
  *((_QWORD *)&v37 + 1) = 0;
  *((_QWORD *)&v35 + 1) = 0;
  v40 = 0u;
  v41 = 0u;
  v42 = 0x3FF0000000000000;
  v19 = (const double *)&v34;
  v20 = *a1;
  v21 = a1[1];
  v22 = a1[2];
  v23 = a1[3];
  v24 = a1[4];
  v25 = a1[5];
  v26 = a1[6];
  v27 = a1[7];
  v45 = vld4q_dup_f64(v19);
  v19 += 4;
  v43 = vld4q_dup_f64(v19);
  v19 += 4;
  *a1 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v45.val[0], *a1), v45.val[1], v22), v45.val[2], v24), v45.val[3], v26);
  a1[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v45.val[0], v21), v45.val[1], v23), v45.val[2], v25), v45.val[3], v27);
  v46 = vld4q_dup_f64(v19);
  v19 += 4;
  a1[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v43.val[0], v20), v43.val[1], v22), v43.val[2], v24), v43.val[3], v26);
  a1[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v43.val[0], v21), v43.val[1], v23), v43.val[2], v25), v43.val[3], v27);
  v44 = vld4q_dup_f64(v19);
  a1[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v46.val[0], v20), v46.val[1], v22), v46.val[2], v24), v46.val[3], v26);
  a1[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v46.val[0], v21), v46.val[1], v23), v46.val[2], v25), v46.val[3], v27);
  a1[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v44.val[0], v20), v44.val[1], v22), v44.val[2], v24), v44.val[3], v26);
  a1[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v44.val[0], v21), v44.val[1], v23), v44.val[2], v25), v44.val[3], v27);
  return a1;
}

float64x2_t *WebCore::TransformationMatrix::rotate(float64x2_t *a1, int a2, long double a3)
{
  double v6;
  double v7;
  double v8;
  double v10;
  const double *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  _QWORD v22[8];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float64x2x4_t v29;
  float64x2x4_t v30;
  float64x2x4_t v31;
  float64x2x4_t v32;

  if (fmod(a3, 360.0) != 0.0)
  {
    v6 = a3 * 0.0174532925;
    v7 = sin(a3 * 0.0174532925);
    v8 = v7;
    if (a2 == 1)
    {
      if (v7 < 2.22044605e-16 && v7 > -2.22044605e-16)
        v8 = 0.0;
      v10 = cos(v6);
      if (v10 < 2.22044605e-16 && v10 > -2.22044605e-16)
        v10 = 0.0;
    }
    else
    {
      v10 = cos(v6);
    }
    *(double *)v22 = v10;
    *(double *)&v22[1] = v8;
    v22[2] = 0;
    v22[3] = 0;
    *(double *)&v22[4] = -v8;
    *(double *)&v22[5] = v10;
    v22[6] = 0;
    v22[7] = 0;
    v23 = constinit_39;
    v24 = unk_1969F8FA0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0x3FF0000000000000;
    v12 = (const double *)v22;
    v13 = *a1;
    v14 = a1[1];
    v15 = a1[2];
    v16 = a1[3];
    v17 = a1[4];
    v18 = a1[5];
    v19 = a1[6];
    v20 = a1[7];
    v31 = vld4q_dup_f64(v12);
    v12 += 4;
    v29 = vld4q_dup_f64(v12);
    v12 += 4;
    *a1 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v31.val[0], *a1), v31.val[1], v15), v31.val[2], v17), v31.val[3], v19);
    a1[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v31.val[0], v14), v31.val[1], v16), v31.val[2], v18), v31.val[3], v20);
    v32 = vld4q_dup_f64(v12);
    v12 += 4;
    a1[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v29.val[0], v13), v29.val[1], v15), v29.val[2], v17), v29.val[3], v19);
    a1[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v29.val[0], v14), v29.val[1], v16), v29.val[2], v18), v29.val[3], v20);
    v30 = vld4q_dup_f64(v12);
    a1[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v32.val[0], v13), v32.val[1], v15), v32.val[2], v17), v32.val[3], v19);
    a1[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v32.val[0], v14), v32.val[1], v16), v32.val[2], v18), v32.val[3], v20);
    a1[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v30.val[0], v13), v30.val[1], v15), v30.val[2], v17), v30.val[3], v19);
    a1[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v30.val[0], v14), v30.val[1], v16), v30.val[2], v18), v30.val[3], v20);
  }
  return a1;
}

float64x2_t *WebCore::TransformationMatrix::rotate3d(float64x2_t *a1, int a2, double a3, double a4, double a5)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v15;
  double v16;
  double v17;
  double v19;
  const double *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  double v29;
  double v31;
  float64x2_t *v33;
  const double *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  _OWORD v58[5];
  _BYTE v59[48];
  float64x2x4_t v60;
  float64x2x4_t v61;
  float64x2x4_t v62;
  float64x2x4_t v63;
  float64x2x4_t v64;
  float64x2x4_t v65;
  float64x2x4_t v66;
  float64x2x4_t v67;
  float64x2x4_t v68;
  float64x2x4_t v69;
  float64x2x4_t v70;
  float64x2x4_t v71;

  v8 = a4 * 0.0174532925;
  v9 = a5 * 0.0174532925;
  v10 = sin(a5 * 0.0174532925);
  v11 = v10;
  if (a2 == 1)
  {
    if (v10 < 2.22044605e-16 && v10 > -2.22044605e-16)
      v11 = 0.0;
    v13 = cos(v9);
    if (v13 < 2.22044605e-16 && v13 > -2.22044605e-16)
      v13 = 0.0;
  }
  else
  {
    v13 = cos(v9);
  }
  v15 = a3 * 0.0174532925;
  *(double *)v58 = v13;
  *((double *)v58 + 1) = v11;
  *(double *)&v58[2] = -v11;
  *((double *)&v58[2] + 1) = v13;
  memset(&v58[3], 0, 32);
  v58[1] = 0u;
  memset(&v59[8], 0, 32);
  *(_QWORD *)v59 = 0x3FF0000000000000;
  *(_QWORD *)&v59[40] = 0x3FF0000000000000;
  v54 = 0uLL;
  v55 = *(float64x2_t *)v59;
  v56 = *(float64x2_t *)&v59[16];
  v57 = *(float64x2_t *)&v59[32];
  v50 = (float64x2_t)v58[0];
  v51 = 0u;
  v52 = (float64x2_t)v58[2];
  v53 = 0u;
  v16 = sin(v8);
  v17 = v16;
  if (a2 == 1)
  {
    if (v16 < 2.22044605e-16 && v16 > -2.22044605e-16)
      v17 = 0.0;
    v19 = cos(v8);
    if (v19 < 2.22044605e-16 && v19 > -2.22044605e-16)
      v19 = 0.0;
  }
  else
  {
    v19 = cos(v8);
  }
  v58[0] = *(unint64_t *)&v19;
  *(double *)&v58[1] = -v17;
  *(_OWORD *)((char *)&v58[2] + 8) = xmmword_1968A14B0;
  v58[4] = *(unint64_t *)&v17;
  *(double *)v59 = v19;
  *((_QWORD *)&v58[3] + 1) = 0;
  *((_QWORD *)&v58[1] + 1) = 0;
  *(_QWORD *)&v58[2] = 0;
  memset(&v59[8], 0, 32);
  *(_QWORD *)&v59[40] = 0x3FF0000000000000;
  v21 = (const double *)v58;
  v22 = v50;
  v23 = v51;
  v24 = v52;
  v25 = v53;
  v26 = v54;
  v27 = v55;
  v66 = vld4q_dup_f64(v21);
  v21 += 4;
  v60 = vld4q_dup_f64(v21);
  v21 += 4;
  v50 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v66.val[0], v50), v66.val[1], v52), v66.val[2], v54), v66.val[3], v56);
  v51 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v66.val[0], v51), v66.val[1], v53), v66.val[2], v55), v66.val[3], v57);
  v67 = vld4q_dup_f64(v21);
  v21 += 4;
  v52 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v60.val[0], v22), v60.val[1], v52), v60.val[2], v54), v60.val[3], v56);
  v53 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v60.val[0], v23), v60.val[1], v53), v60.val[2], v55), v60.val[3], v57);
  v61 = vld4q_dup_f64(v21);
  v54 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v67.val[0], v22), v67.val[1], v24), v67.val[2], v54), v67.val[3], v56);
  v55 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v67.val[0], v23), v67.val[1], v25), v67.val[2], v55), v67.val[3], v57);
  v56 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v61.val[0], v22), v61.val[1], v24), v61.val[2], v26), v61.val[3], v56);
  v57 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v61.val[0], v23), v61.val[1], v25), v61.val[2], v27), v61.val[3], v57);
  v28 = sin(v15);
  v29 = v28;
  if (a2 == 1)
  {
    if (v28 < 2.22044605e-16 && v28 > -2.22044605e-16)
      v29 = 0.0;
    v31 = cos(v15);
    if (v31 < 2.22044605e-16 && v31 > -2.22044605e-16)
      v31 = 0.0;
  }
  else
  {
    v31 = cos(v15);
  }
  v58[0] = 0x3FF0000000000000uLL;
  memset(&v58[1], 0, 24);
  *((double *)&v58[2] + 1) = v31;
  *(double *)&v58[3] = v29;
  *(_OWORD *)((char *)&v58[3] + 8) = 0u;
  memset(&v59[8], 0, 32);
  v33 = &v50;
  v34 = (const double *)v58;
  *((double *)&v58[4] + 1) = -v29;
  *(double *)v59 = v31;
  *(_QWORD *)&v59[40] = 0x3FF0000000000000;
  v35 = v50;
  v36 = v51;
  v37 = v52;
  v38 = v53;
  v39 = v54;
  v40 = v55;
  v68 = vld4q_dup_f64(v34);
  v34 += 4;
  v62 = vld4q_dup_f64(v34);
  v34 += 4;
  v50 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v68.val[0], v50), v68.val[1], v52), v68.val[2], v54), v68.val[3], v56);
  v51 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v68.val[0], v51), v68.val[1], v53), v68.val[2], v55), v68.val[3], v57);
  v69 = vld4q_dup_f64(v34);
  v34 += 4;
  v52 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v62.val[0], v35), v62.val[1], v52), v62.val[2], v54), v62.val[3], v56);
  v53 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v62.val[0], v36), v62.val[1], v53), v62.val[2], v55), v62.val[3], v57);
  v63 = vld4q_dup_f64(v34);
  v54 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v69.val[0], v35), v69.val[1], v37), v69.val[2], v54), v69.val[3], v56);
  v55 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v69.val[0], v36), v69.val[1], v38), v69.val[2], v55), v69.val[3], v57);
  v56 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v63.val[0], v35), v63.val[1], v37), v63.val[2], v39), v63.val[3], v56);
  v57 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v63.val[0], v36), v63.val[1], v38), v63.val[2], v40), v63.val[3], v57);
  v41 = *a1;
  v42 = a1[1];
  v43 = a1[2];
  v44 = a1[3];
  v45 = a1[4];
  v46 = a1[5];
  v47 = a1[6];
  v48 = a1[7];
  v70 = vld4q_dup_f64(v33->f64);
  v33 += 2;
  v64 = vld4q_dup_f64(v33->f64);
  v33 += 2;
  *a1 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v70.val[0], *a1), v70.val[1], v43), v70.val[2], v45), v70.val[3], v47);
  a1[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v70.val[0], v42), v70.val[1], v44), v70.val[2], v46), v70.val[3], v48);
  v71 = vld4q_dup_f64(v33->f64);
  v33 += 2;
  a1[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v64.val[0], v41), v64.val[1], v43), v64.val[2], v45), v64.val[3], v47);
  a1[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v64.val[0], v42), v64.val[1], v44), v64.val[2], v46), v64.val[3], v48);
  v65 = vld4q_dup_f64(v33->f64);
  a1[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v71.val[0], v41), v71.val[1], v43), v71.val[2], v45), v71.val[3], v47);
  a1[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v71.val[0], v42), v71.val[1], v44), v71.val[2], v46), v71.val[3], v48);
  a1[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v65.val[0], v41), v65.val[1], v43), v65.val[2], v45), v65.val[3], v47);
  a1[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v65.val[0], v42), v65.val[1], v44), v65.val[2], v46), v65.val[3], v48);
  return a1;
}

float64x2_t WebCore::TransformationMatrix::translate3d(float64x2_t *this, double a2, double a3, double a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t result;
  float64x2_t v7;

  v4 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(this[2], a3), *this, a2), this[4], a4);
  v5 = vmlaq_n_f64(vmulq_n_f64(this[3], a3), this[1], a2);
  result = vaddq_f64(this[6], v4);
  v7 = vaddq_f64(this[7], vmlaq_n_f64(v5, this[5], a4));
  this[6] = result;
  this[7] = v7;
  return result;
}

double WebCore::TransformationMatrix::translateRight3d(WebCore::TransformationMatrix *this, double result, double a3, double a4)
{
  double v4;
  double v5;
  double v6;

  if (result != 0.0)
  {
    v4 = *((double *)this + 4);
    *(double *)this = *(double *)this + *((double *)this + 3) * result;
    v5 = *((double *)this + 8);
    *((double *)this + 4) = v4 + *((double *)this + 7) * result;
    v6 = *((double *)this + 12);
    *((double *)this + 8) = v5 + *((double *)this + 11) * result;
    result = v6 + *((double *)this + 15) * result;
    *((double *)this + 12) = result;
  }
  if (a3 != 0.0)
  {
    *((double *)this + 1) = *((double *)this + 1) + *((double *)this + 3) * a3;
    *((double *)this + 5) = *((double *)this + 5) + *((double *)this + 7) * a3;
    *((double *)this + 9) = *((double *)this + 9) + *((double *)this + 11) * a3;
    result = *((double *)this + 13) + *((double *)this + 15) * a3;
    *((double *)this + 13) = result;
  }
  if (a4 != 0.0)
  {
    *((double *)this + 2) = *((double *)this + 2) + *((double *)this + 3) * a4;
    *((double *)this + 6) = *((double *)this + 6) + *((double *)this + 7) * a4;
    *((double *)this + 10) = *((double *)this + 10) + *((double *)this + 11) * a4;
    result = *((double *)this + 14) + *((double *)this + 15) * a4;
    *((double *)this + 14) = result;
  }
  return result;
}

WebCore::TransformationMatrix *WebCore::TransformationMatrix::skew(float64x2_t *this, double a2, double a3)
{
  long double v4;
  const double *v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  _QWORD v15[2];
  __int128 v16;
  long double v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  float64x2x4_t v24;
  float64x2x4_t v25;
  float64x2x4_t v26;
  float64x2x4_t v27;

  v4 = a2 * 0.0174532925;
  v20 = xmmword_1969F8F50;
  v21 = *(_OWORD *)&qword_1969F8F60;
  v22 = xmmword_1969F8F70;
  v23 = unk_1969F8F80;
  v15[0] = constinit_5;
  v16 = unk_1969F8F20;
  v18 = 0x3FF0000000000000;
  v19 = unk_1969F8F40;
  v15[1] = tan(a3 * 0.0174532925);
  v17 = tan(v4);
  v5 = (const double *)v15;
  v6 = *this;
  v7 = this[1];
  v8 = this[2];
  v9 = this[3];
  v10 = this[4];
  v11 = this[5];
  v12 = this[6];
  v13 = this[7];
  v26 = vld4q_dup_f64(v5);
  v5 += 4;
  v24 = vld4q_dup_f64(v5);
  v5 += 4;
  *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v26.val[0], *this), v26.val[1], v8), v26.val[2], v10), v26.val[3], v12);
  this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v26.val[0], v7), v26.val[1], v9), v26.val[2], v11), v26.val[3], v13);
  v27 = vld4q_dup_f64(v5);
  v5 += 4;
  this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v6), v24.val[1], v8), v24.val[2], v10), v24.val[3], v12);
  this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v7), v24.val[1], v9), v24.val[2], v11), v24.val[3], v13);
  v25 = vld4q_dup_f64(v5);
  this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v27.val[0], v6), v27.val[1], v8), v27.val[2], v10), v27.val[3], v12);
  this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v27.val[0], v7), v27.val[1], v9), v27.val[2], v11), v27.val[3], v13);
  this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v6), v25.val[1], v8), v25.val[2], v10), v25.val[3], v12);
  this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v7), v25.val[1], v9), v25.val[2], v11), v25.val[3], v13);
  return (WebCore::TransformationMatrix *)this;
}

__n128 WebCore::TransformationMatrix::applyPerspective(float64x2_t *this, double a2)
{
  const double *v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  _OWORD v12[5];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float64x2x4_t v16;
  float64x2x4_t v17;
  float64x2x4_t v18;
  float64x2x4_t v19;

  v13 = *(_OWORD *)&qword_1969F8F60;
  v14 = xmmword_1969F8F70;
  v15 = unk_1969F8F80;
  v12[0] = constinit_5;
  v12[1] = unk_1969F8F20;
  v12[2] = xmmword_1969F8F30;
  memset(&v12[3], 0, 32);
  if (a2 != 0.0)
    *((double *)&v13 + 1) = -1.0 / a2;
  v2 = (const double *)v12;
  v3 = *this;
  v4 = this[1];
  v5 = this[2];
  v6 = this[3];
  v7 = this[4];
  v8 = this[5];
  v9 = this[6];
  v10 = this[7];
  v18 = vld4q_dup_f64(v2);
  v2 += 4;
  v16 = vld4q_dup_f64(v2);
  v2 += 4;
  *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v18.val[0], *this), v18.val[1], v5), v18.val[2], v7), v18.val[3], v9);
  this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v18.val[0], v4), v18.val[1], v6), v18.val[2], v8), v18.val[3], v10);
  v19 = vld4q_dup_f64(v2);
  v2 += 4;
  this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v16.val[0], v3), v16.val[1], v5), v16.val[2], v7), v16.val[3], v9);
  this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v16.val[0], v4), v16.val[1], v6), v16.val[2], v8), v16.val[3], v10);
  v17 = vld4q_dup_f64(v2);
  this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v19.val[0], v3), v19.val[1], v5), v19.val[2], v7), v19.val[3], v9);
  this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v19.val[0], v4), v19.val[1], v6), v19.val[2], v8), v19.val[3], v10);
  this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v17.val[0], v3), v17.val[1], v5), v17.val[2], v7), v17.val[3], v9);
  this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v17.val[0], v4), v17.val[1], v6), v17.val[2], v8), v17.val[3], v10);
  return (__n128)v17.val[0];
}

float64x2_t WebCore::TransformationMatrix::rectToRect@<Q0>(float32x2_t *this@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  float32x2_t v5;
  float64x2_t result;

  v4 = (float)(a2[1].f32[1] / this[1].f32[1]);
  *(double *)a3 = (float)(a2[1].f32[0] / this[1].f32[0]);
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(double *)(a3 + 40) = v4;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  v5 = vsub_f32(*a2, *this);
  *(_OWORD *)(a3 + 64) = constinit_39;
  *(_OWORD *)(a3 + 80) = unk_1969F8FA0;
  result = vcvtq_f64_f32(v5);
  *(float64x2_t *)(a3 + 96) = result;
  *(_OWORD *)(a3 + 112) = xmmword_1968A14C0;
  return result;
}

float64_t WebCore::TransformationMatrix::zoom(float64x2_t *this, double a2)
{
  float64_t result;

  this[1].f64[1] = this[1].f64[1] / a2;
  this[3].f64[1] = this[3].f64[1] / a2;
  this[5].f64[1] = this[5].f64[1] / a2;
  this[6] = vmulq_n_f64(this[6], a2);
  result = this[7].f64[0] * a2;
  this[7].f64[0] = result;
  return result;
}

float64x2_t WebCore::TransformationMatrix::multiplyAffineTransform(float64x2_t *this, const WebCore::AffineTransform *a2)
{
  double v2;
  _BOOL4 v3;
  double v4;
  double v5;
  float64x2_t result;
  double v7;
  const double *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  _QWORD v18[8];
  __int128 v19;
  __int128 v20;
  float64_t v21;
  double v22;
  __int128 v23;
  float64x2x4_t v24;
  float64x2x4_t v25;
  float64x2x4_t v26;

  v2 = *((double *)a2 + 1);
  v3 = *(double *)a2 == 1.0;
  if (v2 != 0.0)
    v3 = 0;
  v4 = *((double *)a2 + 2);
  v5 = *((double *)a2 + 3);
  if (v4 != 0.0)
    v3 = 0;
  if (v5 != 1.0)
    v3 = 0;
  result.f64[0] = *((float64_t *)a2 + 4);
  v7 = *((double *)a2 + 5);
  if (!v3 || result.f64[0] != 0.0 || v7 != 0.0)
  {
    if (v3)
    {
      v17 = vaddq_f64(this[6], vmlaq_n_f64(vmulq_n_f64(this[2], v7), *this, result.f64[0]));
      result = vaddq_f64(this[7], vmlaq_n_f64(vmulq_n_f64(this[3], v7), this[1], result.f64[0]));
      this[6] = v17;
      this[7] = result;
    }
    else
    {
      v18[0] = *(_QWORD *)a2;
      *(double *)&v18[1] = v2;
      v18[2] = 0;
      v18[3] = 0;
      *(double *)&v18[4] = v4;
      *(double *)&v18[5] = v5;
      v18[6] = 0;
      v18[7] = 0;
      v19 = constinit_13;
      v20 = unk_1969F8D70;
      v21 = result.f64[0];
      v22 = v7;
      v23 = xmmword_1968A14C0;
      v8 = (const double *)v18;
      v9 = *this;
      v10 = this[1];
      v11 = this[2];
      v12 = this[3];
      v13 = this[4];
      v14 = this[5];
      v15 = this[6];
      v16 = this[7];
      v25 = vld4q_dup_f64(v8);
      v8 += 4;
      v24 = vld4q_dup_f64(v8);
      v8 += 4;
      *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], *this), v25.val[1], v11), v25.val[2], v13), v25.val[3], v15);
      this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v10), v25.val[1], v12), v25.val[2], v14), v25.val[3], v16);
      v26 = vld4q_dup_f64(v8);
      v8 += 4;
      this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v9), v24.val[1], v11), v24.val[2], v13), v24.val[3], v15);
      this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v10), v24.val[1], v12), v24.val[2], v14), v24.val[3], v16);
      *(float64x2x4_t *)result.f64 = vld4q_dup_f64(v8);
      this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v26.val[0], v9), v26.val[1], v11), v26.val[2], v13), v26.val[3], v15);
      this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v26.val[0], v10), v26.val[1], v12), v26.val[2], v14), v26.val[3], v16);
      this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(result, v9), v24.val[1], v11), v24.val[2], v13), v24.val[3], v15);
      this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(result, v10), v24.val[1], v12), v24.val[2], v14), v24.val[3], v16);
    }
  }
  return result;
}

double WebCore::TransformationMatrix::multVecMatrix(WebCore::TransformationMatrix *this, double a2, double a3, double *a4, double *a5)
{
  double result;

  *a4 = *((double *)this + 12) + a2 * *(double *)this + a3 * *((double *)this + 4);
  *a5 = *((double *)this + 13) + a2 * *((double *)this + 1) + a3 * *((double *)this + 5);
  result = *((double *)this + 15) + a2 * *((double *)this + 3) + a3 * *((double *)this + 7);
  if (result != 1.0 && result != 0.0)
  {
    *a4 = *a4 / result;
    result = *a5 / result;
    *a5 = result;
  }
  return result;
}

double WebCore::TransformationMatrix::multVecMatrix(WebCore::TransformationMatrix *this, double a2, double a3, double a4, double *a5, double *a6, double *a7)
{
  double result;

  *a5 = *((double *)this + 12) + a2 * *(double *)this + a3 * *((double *)this + 4) + a4 * *((double *)this + 8);
  *a6 = *((double *)this + 13) + a2 * *((double *)this + 1) + a3 * *((double *)this + 5) + a4 * *((double *)this + 9);
  *a7 = *((double *)this + 14) + a2 * *((double *)this + 2) + a3 * *((double *)this + 6) + a4 * *((double *)this + 10);
  result = *((double *)this + 15)
         + a2 * *((double *)this + 3)
         + a3 * *((double *)this + 7)
         + a4 * *((double *)this + 11);
  if (result != 1.0 && result != 0.0)
  {
    *a5 = *a5 / result;
    *a6 = *a6 / result;
    result = *a7 / result;
    *a7 = result;
  }
  return result;
}

double WebCore::determinant4x4(WebCore *this, const double (*a2)[4][4])
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v2 = *((double *)this + 4);
  v3 = *((double *)this + 5);
  v4 = *((double *)this + 6);
  v5 = *((double *)this + 7);
  v6 = *((double *)this + 8);
  v7 = *((double *)this + 9);
  v8 = *((double *)this + 10);
  v9 = *((double *)this + 11);
  v10 = *((double *)this + 12);
  v11 = *((double *)this + 13);
  v12 = *((double *)this + 14);
  v13 = *((double *)this + 15);
  v14 = v8 * v13 - v12 * v9;
  return *(double *)this * (v3 * v14 - (v7 * v13 - v11 * v9) * v4 + v5 * (v7 * v12 - v11 * v8))
       - *((double *)this + 1) * (v2 * v14 - (v6 * v13 - v10 * v9) * v4 + v5 * (v6 * v12 - v10 * v8))
       + *((double *)this + 2) * (v2 * (v7 * v13 - v11 * v9) - (v6 * v13 - v10 * v9) * v3 + v5 * (v6 * v11 - v10 * v7))
       - *((double *)this + 3) * (v2 * (v7 * v12 - v11 * v8) - (v6 * v12 - v10 * v8) * v3 + v4 * (v6 * v11 - v10 * v7));
}

BOOL WebCore::inverse(WebCore *this, const double (*a2)[4][4], double (*a3)[4][4])
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  unint64_t v67;
  _BOOL8 result;

  v3 = *(double *)this;
  v4 = *((double *)this + 1);
  v5 = *((double *)this + 2);
  v6 = *((double *)this + 3);
  v7 = *((double *)this + 4);
  v8 = *((double *)this + 5);
  v9 = *((double *)this + 6);
  v10 = *((double *)this + 7);
  v11 = *((double *)this + 8);
  v12 = *((double *)this + 9);
  v13 = *((double *)this + 10);
  v14 = *((double *)this + 11);
  v15 = *((double *)this + 12);
  v16 = *((double *)this + 13);
  v18 = *((double *)this + 14);
  v17 = *((double *)this + 15);
  v19 = v13 * v17 - v18 * v14;
  v20 = v12 * v17 - v16 * v14;
  v21 = v12 * v18 - v16 * v13;
  v22 = v8 * v19 - v20 * v9 + v10 * v21;
  v23 = v11 * v17 - v15 * v14;
  v24 = v11 * v18 - v15 * v13;
  v25 = -(v7 * v19 - v23 * v9 + v10 * v24);
  v26 = v11 * v16 - v15 * v12;
  v27 = v7 * v20 - v23 * v8 + v10 * v26;
  v28 = -(v7 * v21 - v24 * v8 + v9 * v26);
  v29 = -(v4 * v19 - v20 * v5 + v6 * v21);
  (*a2)[0][0] = v22;
  (*a2)[0][1] = v29;
  v30 = v3 * v19 - v23 * v5 + v6 * v24;
  (*a2)[1][0] = v25;
  (*a2)[1][1] = v30;
  v31 = -(v3 * v20 - v23 * v4 + v6 * v26);
  (*a2)[2][0] = v27;
  (*a2)[2][1] = v31;
  v32 = v3 * v21 - v24 * v4 + v5 * v26;
  (*a2)[3][0] = v28;
  (*a2)[3][1] = v32;
  v33 = v9 * v17 - v18 * v10;
  v34 = v8 * v17 - v16 * v10;
  v35 = v8 * v18 - v16 * v9;
  v36 = v4 * v33 - v34 * v5 + v6 * v35;
  v37 = v7 * v17 - v15 * v10;
  v38 = v7 * v18 - v15 * v9;
  v39 = -(v3 * v33 - v37 * v5 + v6 * v38);
  v40 = v7 * v16 - v15 * v8;
  v41 = v3 * v34 - v37 * v4 + v6 * v40;
  v42 = -(v3 * v35 - v38 * v4 + v5 * v40);
  v43 = v9 * v14 - v13 * v10;
  v44 = v8 * v14 - v12 * v10;
  v45 = v8 * v13 - v12 * v9;
  v46 = -(v4 * v43 - v44 * v5 + v6 * v45);
  (*a2)[0][2] = v36;
  (*a2)[0][3] = v46;
  v47 = v7 * v14 - v11 * v10;
  v48 = v7 * v13 - v11 * v9;
  v49 = v3 * v43 - v47 * v5 + v6 * v48;
  (*a2)[1][2] = v39;
  (*a2)[1][3] = v49;
  v50 = v7 * v12 - v11 * v8;
  v51 = -(v3 * v44 - v47 * v4 + v6 * v50);
  (*a2)[2][2] = v41;
  (*a2)[2][3] = v51;
  v52 = v3 * v45 - v48 * v4 + v5 * v50;
  (*a2)[3][2] = v42;
  (*a2)[3][3] = v52;
  v53 = *((double *)this + 4);
  v54 = *((double *)this + 5);
  v55 = *((double *)this + 6);
  v56 = *((double *)this + 7);
  v57 = *((double *)this + 8);
  v58 = *((double *)this + 9);
  v59 = *((double *)this + 10);
  v60 = *((double *)this + 11);
  v62 = *((double *)this + 12);
  v61 = *((double *)this + 13);
  v63 = *((double *)this + 14);
  v64 = *((double *)this + 15);
  v65 = v59 * v64 - v63 * v60;
  v66 = *(double *)this * (v54 * v65 - (v58 * v64 - v61 * v60) * v55 + v56 * (v58 * v63 - v61 * v59))
      - *((double *)this + 1) * (v53 * v65 - (v57 * v64 - v62 * v60) * v55 + v56 * (v57 * v63 - v62 * v59))
      + *((double *)this + 2)
      * (v53 * (v58 * v64 - v61 * v60) - (v57 * v64 - v62 * v60) * v54 + v56 * (v57 * v61 - v62 * v58))
      - *((double *)this + 3)
      * (v53 * (v58 * v63 - v61 * v59) - (v57 * v63 - v62 * v59) * v54 + v55 * (v57 * v61 - v62 * v58));
  v67 = ((*(_QWORD *)&v66 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53;
  result = v67 < 0x3FF;
  if (v67 <= 0x3FE)
  {
    (*a2)[0][0] = v22 / v66;
    (*a2)[0][1] = v29 / v66;
    (*a2)[0][2] = v36 / v66;
    (*a2)[0][3] = v46 / v66;
    (*a2)[1][0] = v25 / v66;
    (*a2)[1][1] = v30 / v66;
    (*a2)[1][2] = v39 / v66;
    (*a2)[1][3] = v49 / v66;
    (*a2)[2][0] = v27 / v66;
    (*a2)[2][1] = v31 / v66;
    (*a2)[2][2] = v41 / v66;
    (*a2)[2][3] = v51 / v66;
    (*a2)[3][0] = v28 / v66;
    (*a2)[3][1] = v32 / v66;
    (*a2)[3][2] = v42 / v66;
    (*a2)[3][3] = v52 / v66;
  }
  return result;
}

double WebCore::TransformationMatrix::makeAffine(WebCore::TransformationMatrix *this)
{
  double result;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_1968A14B0;
  result = 0.0;
  *((_OWORD *)this + 7) = xmmword_1968A14C0;
  return result;
}

__n128 WebCore::TransformationMatrix::toAffineTransform@<Q0>(WebCore::TransformationMatrix *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *((_OWORD *)this + 2);
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_OWORD *)(a2 + 16) = v2;
  result = *((__n128 *)this + 6);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

double WebCore::TransformationMatrix::blend2(uint64_t a1, uint64_t a2, int a3, double a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double sinval;
  double cosval;
  __double2 v32;
  const double *v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  double v45;
  float64x2_t v46;
  double result;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  _QWORD v70[8];
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float64x2x4_t v77;
  float64x2x4_t v78;
  float64x2x4_t v79;
  float64x2x4_t v80;

  WebCore::TransformationMatrix::decompose2(a2, (uint64_t)&v61);
  WebCore::TransformationMatrix::decompose2(a1, (uint64_t)&v52);
  v8 = v61;
  v7 = v62;
  if ((v61 >= 0.0 || v53 >= 0.0) && (v62 >= 0.0 || v52 >= 0.0))
  {
    v9 = v65;
  }
  else
  {
    v8 = -v61;
    v7 = -v62;
    v9 = v65 + dbl_1969F8E00[v65 < 0.0];
  }
  if (v9 == 0.0)
    v10 = 360.0;
  else
    v10 = v9;
  v11 = v56;
  if (v56 == 0.0)
    v11 = 360.0;
  if (vabdd_f64(v10, v11) > 180.0)
  {
    if (v10 <= v11)
      v11 = v11 + -360.0;
    else
      v10 = v10 + -360.0;
  }
  v12 = v57;
  if (a3 == 2)
    v13 = 1;
  else
    v13 = a3;
  if (a3 == 2)
  {
    v12 = v57 + -1.0;
    goto LABEL_24;
  }
  if (a3 == 1)
  {
LABEL_24:
    v14 = v12 + v66;
    goto LABEL_25;
  }
  if (a3)
    goto LABEL_26;
  v14 = v66 + (v57 - v66) * a4;
LABEL_25:
  v66 = v14;
LABEL_26:
  if (v13 == 1)
  {
    v15 = v58 + v67;
  }
  else
  {
    if (v13)
      goto LABEL_31;
    v15 = v67 + (v58 - v67) * a4;
  }
  v67 = v15;
LABEL_31:
  if (v13 == 1)
  {
    v16 = v59 + v68;
  }
  else
  {
    if (v13)
      goto LABEL_36;
    v16 = v68 + (v59 - v68) * a4;
  }
  v68 = v16;
LABEL_36:
  v17 = v60;
  if (a3 == 2)
  {
    v17 = v60 + -1.0;
    goto LABEL_41;
  }
  if (a3 == 1)
  {
LABEL_41:
    v18 = v17 + v69;
    goto LABEL_42;
  }
  if (a3)
    goto LABEL_43;
  v18 = v69 + (v60 - v69) * a4;
LABEL_42:
  v69 = v18;
LABEL_43:
  if (v13 == 1)
  {
    v19 = v54 + v63;
  }
  else
  {
    if (v13)
      goto LABEL_48;
    v19 = v63 + (v54 - v63) * a4;
  }
  v63 = v19;
LABEL_48:
  if (v13 == 1)
  {
    v20 = v55 + v64;
  }
  else
  {
    if (v13)
      goto LABEL_53;
    v20 = v64 + (v55 - v64) * a4;
  }
  v64 = v20;
LABEL_53:
  if (a3 == 2)
  {
    v50 = v8 + v52 + -1.0;
    v7 = v53 + -1.0 + v7;
  }
  else if (a3 == 1)
  {
    v50 = v8 + v52;
    v7 = v53 + v7;
  }
  else
  {
    if (!a3)
    {
      v7 = v7 + (v53 - v7) * a4;
      v8 = v8 + (v52 - v8) * a4;
    }
    v50 = v8;
  }
  v51 = v7;
  if (v13 == 1)
  {
    v10 = v10 + v11;
  }
  else if (!v13)
  {
    v10 = v10 + (v11 - v10) * a4;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 88) = 0;
  v22 = v66;
  v21 = v67;
  *(double *)a1 = v66;
  *(double *)(a1 + 8) = v21;
  v24 = v68;
  v23 = v69;
  *(double *)(a1 + 32) = v68;
  *(double *)(a1 + 40) = v23;
  v25 = v63;
  v26 = v64;
  v27 = 0.0;
  v48 = v23;
  v49 = v21;
  v28 = v23 * v64 + v63 * v21 + 0.0;
  *(double *)(a1 + 96) = v24 * v64 + v63 * v22 + 0.0;
  *(double *)(a1 + 104) = v28;
  v29 = v26 * 0.0 + v25 * 0.0 + 0.0;
  *(double *)(a1 + 112) = v29;
  *(double *)(a1 + 120) = v29 + 1.0;
  if (fmod(v10, 360.0) == 0.0)
  {
    v44 = (float64x2_t)*(unint64_t *)&v49;
    v46 = (float64x2_t)*(unint64_t *)&v48;
    v45 = 0.0;
  }
  else
  {
    v32 = __sincos_stret(v10 * 0.0174532925);
    cosval = v32.__cosval;
    sinval = v32.__sinval;
    if (v32.__sinval < 2.22044605e-16 && v32.__sinval > -2.22044605e-16)
      sinval = 0.0;
    if (v32.__cosval < 2.22044605e-16 && v32.__cosval > -2.22044605e-16)
      cosval = 0.0;
    *(double *)v70 = cosval;
    *(double *)&v70[1] = sinval;
    v70[2] = 0;
    v70[3] = 0;
    *(double *)&v70[4] = -sinval;
    *(double *)&v70[5] = cosval;
    v70[6] = 0;
    v70[7] = 0;
    v71 = constinit_39;
    v72 = unk_1969F8FA0;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0x3FF0000000000000;
    v35 = (const double *)v70;
    v36 = *(float64x2_t *)a1;
    v37 = *(float64x2_t *)(a1 + 16);
    v38 = *(float64x2_t *)(a1 + 32);
    v39 = *(float64x2_t *)(a1 + 48);
    v40 = *(float64x2_t *)(a1 + 64);
    v41 = *(float64x2_t *)(a1 + 80);
    v42 = *(float64x2_t *)(a1 + 96);
    v43 = *(float64x2_t *)(a1 + 112);
    v79 = vld4q_dup_f64(v35);
    v35 += 4;
    v77 = vld4q_dup_f64(v35);
    v35 += 4;
    *(float64x2_t *)a1 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v79.val[0], *(float64x2_t *)a1), v79.val[1], v38), v79.val[2], v40), v79.val[3], v42);
    *(float64x2_t *)(a1 + 16) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v79.val[0], v37), v79.val[1], v39), v79.val[2], v41), v79.val[3], v43);
    v80 = vld4q_dup_f64(v35);
    v35 += 4;
    *(float64x2_t *)(a1 + 32) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v77.val[0], v36), v77.val[1], v38), v77.val[2], v40), v77.val[3], v42);
    *(float64x2_t *)(a1 + 48) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v77.val[0], v37), v77.val[1], v39), v77.val[2], v41), v77.val[3], v43);
    v78 = vld4q_dup_f64(v35);
    *(float64x2_t *)(a1 + 64) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v80.val[0], v36), v80.val[1], v38), v80.val[2], v40), v80.val[3], v42);
    *(float64x2_t *)(a1 + 80) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v80.val[0], v37), v80.val[1], v39), v80.val[2], v41), v80.val[3], v43);
    *(float64x2_t *)(a1 + 96) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v78.val[0], v36), v78.val[1], v38), v78.val[2], v40), v78.val[3], v42);
    *(float64x2_t *)(a1 + 112) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v78.val[0], v37), v78.val[1], v39), v78.val[2], v41), v78.val[3], v43);
    v22 = *(double *)a1;
    v44 = *(float64x2_t *)(a1 + 8);
    v45 = *(double *)(a1 + 24);
    v24 = *(double *)(a1 + 32);
    v46 = *(float64x2_t *)(a1 + 40);
    v27 = *(double *)(a1 + 56);
  }
  *(double *)a1 = v22 * v50;
  *(float64x2_t *)(a1 + 8) = vmulq_n_f64(v44, v50);
  *(double *)(a1 + 24) = v45 * v50;
  *(double *)(a1 + 32) = v24 * v51;
  *(float64x2_t *)(a1 + 40) = vmulq_n_f64(v46, v51);
  result = v27 * v51;
  *(double *)(a1 + 56) = v27 * v51;
  return result;
}

uint64_t WebCore::TransformationMatrix::decompose2(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v3 = *(double *)a1;
  v4 = *(double *)(a1 + 8);
  if (*(double *)a1 == 1.0
    && v4 == 0.0
    && *(double *)(a1 + 16) == 0.0
    && *(double *)(a1 + 24) == 0.0
    && *(double *)(a1 + 32) == 0.0
    && *(double *)(a1 + 40) == 1.0
    && *(double *)(a1 + 48) == 0.0
    && *(double *)(a1 + 56) == 0.0
    && *(double *)(a1 + 64) == 0.0
    && *(double *)(a1 + 72) == 0.0
    && *(double *)(a1 + 80) == 1.0
    && *(double *)(a1 + 88) == 0.0
    && *(double *)(a1 + 96) == 0.0
    && *(double *)(a1 + 104) == 0.0
    && *(double *)(a1 + 112) == 0.0
    && *(double *)(a1 + 120) == 1.0)
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)a2 = _Q1;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  }
  else
  {
    v6 = *(double *)(a1 + 32);
    v5 = *(double *)(a1 + 40);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
    v7 = hypot(v3, v4);
    *(double *)a2 = v7;
    v8 = hypot(v6, v5);
    *(double *)(a2 + 8) = v8;
    if (v3 * v5 - v4 * v6 < 0.0)
    {
      if (v3 >= v5)
      {
        v8 = -v8;
        *(double *)(a2 + 8) = v8;
      }
      else
      {
        v7 = -v7;
        *(double *)a2 = v7;
      }
    }
    if (v7 != 0.0)
    {
      v3 = v3 * (1.0 / v7);
      v4 = v4 * (1.0 / v7);
    }
    if (v8 != 0.0)
    {
      v9 = 1.0 / v8;
      v6 = v6 * v9;
      v5 = v5 * v9;
    }
    v10 = atan2(v4, v3);
    if (v10 != 0.0)
    {
      v11 = -(v4 * v6);
      v12 = -(v4 * v5);
      v6 = v3 * v6 + v4 * v3;
      v5 = v3 * v5 + v4 * v4;
      v4 = v12 + v3 * v4;
      v3 = v11 + v3 * v3;
    }
    *(double *)(a2 + 48) = v4;
    *(double *)(a2 + 56) = v6;
    *(double *)(a2 + 64) = v5;
    *(double *)(a2 + 32) = v10 * 57.2957795;
    *(double *)(a2 + 40) = v3;
  }
  return 1;
}

void WebCore::TransformationMatrix::blend4(uint64_t a1, double *a2, int a3, double a4)
{
  double v8;
  int v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float64x2_t v14;
  float64x2_t v15;
  __int128 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  const double *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  const double *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  const double *v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  const double *v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  double v89;
  float64x2_t v90;
  double v91;
  float64x2_t v92;
  float64x2_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  double v130[11];
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  float64x2x4_t v134;
  float64x2x4_t v135;
  float64x2x4_t v136;
  float64x2x4_t v137;
  float64x2x4_t v138;
  float64x2x4_t v139;
  float64x2x4_t v140;
  float64x2x4_t v141;
  float64x2x4_t v142;
  float64x2x4_t v143;
  float64x2x4_t v144;
  float64x2x4_t v145;
  float64x2x4_t v146;
  float64x2x4_t v147;
  float64x2x4_t v148;
  float64x2x4_t v149;

  if (WebCore::TransformationMatrix::decompose4(a2, (uint64_t)&v108)
    && WebCore::TransformationMatrix::decompose4((double *)a1, (uint64_t)&v94))
  {
    v8 = v94;
    if (a3 == 2)
      v9 = 1;
    else
      v9 = a3;
    if (a3 == 2)
    {
      v8 = v94 + -1.0;
    }
    else if (a3 != 1)
    {
      if (a3)
        goto LABEL_15;
      v10 = v108 + (v94 - v108) * a4;
LABEL_14:
      v108 = v10;
LABEL_15:
      v17 = v95;
      if (a3 == 2)
      {
        v17 = v95 + -1.0;
      }
      else if (a3 != 1)
      {
        if (a3)
          goto LABEL_22;
        v18 = v109 + (v95 - v109) * a4;
LABEL_21:
        v109 = v18;
LABEL_22:
        v19 = v96;
        if (a3 == 2)
        {
          v19 = v96 + -1.0;
        }
        else if (a3 != 1)
        {
          if (a3)
            goto LABEL_29;
          v20 = v110 + (v96 - v110) * a4;
LABEL_28:
          v110 = v20;
LABEL_29:
          if (v9 == 1)
          {
            v21 = v97 + v111;
          }
          else
          {
            if (v9)
              goto LABEL_34;
            v21 = v111 + (v97 - v111) * a4;
          }
          v111 = v21;
LABEL_34:
          if (v9 == 1)
          {
            v22 = v98 + v112;
          }
          else
          {
            if (v9)
              goto LABEL_39;
            v22 = v112 + (v98 - v112) * a4;
          }
          v112 = v22;
LABEL_39:
          if (v9 == 1)
          {
            v23 = v99 + v113;
          }
          else
          {
            if (v9)
              goto LABEL_44;
            v23 = v113 + (v99 - v113) * a4;
          }
          v113 = v23;
LABEL_44:
          if (v9 == 1)
          {
            v24 = v101 + v115;
          }
          else
          {
            if (v9)
              goto LABEL_49;
            v24 = v115 + (v101 - v115) * a4;
          }
          v115 = v24;
LABEL_49:
          if (v9 == 1)
          {
            v25 = v102 + v116;
          }
          else
          {
            if (v9)
              goto LABEL_54;
            v25 = v116 + (v102 - v116) * a4;
          }
          v116 = v25;
LABEL_54:
          if (v9 == 1)
          {
            v26 = v103 + v117;
          }
          else
          {
            if (v9)
              goto LABEL_59;
            v26 = v117 + (v103 - v117) * a4;
          }
          v117 = v26;
LABEL_59:
          if (v9 == 1)
          {
            v27 = v104 + v118;
          }
          else
          {
            if (v9)
              goto LABEL_64;
            v27 = v118 + (v104 - v118) * a4;
          }
          v118 = v27;
LABEL_64:
          if (v9 == 1)
          {
            v28 = v105 + v119;
          }
          else
          {
            if (v9)
              goto LABEL_69;
            v28 = v119 + (v105 - v119) * a4;
          }
          v119 = v28;
LABEL_69:
          if (v9 == 1)
          {
            v29 = v106 + v120;
          }
          else
          {
            if (v9)
              goto LABEL_74;
            v29 = v120 + (v106 - v120) * a4;
          }
          v120 = v29;
LABEL_74:
          v30 = v107;
          if (a3)
          {
            if (a3 != 1)
            {
              if (a3 != 2)
              {
                v31 = v121;
                goto LABEL_82;
              }
              v30 = v107 + -1.0;
            }
            v31 = v30 + v121;
          }
          else
          {
            v31 = v121 + (v107 - v121) * a4;
          }
          v121 = v31;
LABEL_82:
          WebCore::Quaternion::interpolate(&v114, &v100, a3, a4);
          *(_QWORD *)a1 = 0x3FF0000000000000;
          *(_OWORD *)(a1 + 24) = 0u;
          *(_OWORD *)(a1 + 8) = 0u;
          *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
          *(_OWORD *)(a1 + 48) = 0u;
          *(_OWORD *)(a1 + 64) = 0u;
          *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
          v33 = v117;
          v32 = v118;
          *(double *)(a1 + 24) = v118;
          v34 = v119;
          v35 = v120;
          *(double *)(a1 + 56) = v119;
          v36 = v115;
          v37 = v116;
          v38 = v116 * 0.0;
          v39 = v115 + v116 * 0.0 + v33 * 0.0 + 0.0;
          *(double *)(a1 + 88) = v35;
          *(double *)(a1 + 96) = v39;
          *(double *)(a1 + 104) = v37 + v36 * 0.0 + v33 * 0.0 + 0.0;
          *(double *)(a1 + 112) = v33 + v38 + v36 * 0.0 + 0.0;
          *(double *)(a1 + 120) = v31 + v34 * v37 + v36 * v32 + v33 * v35;
          v41 = v40 * v40;
          v43 = v42 * v42;
          v45 = v44 * v44;
          v46 = v40 * v44;
          v47 = v40 * v42;
          v48 = v42 * v44;
          v50 = v40 * v49;
          v51 = v42 * v49;
          v52 = v44 * v49;
          v130[0] = (v43 + v45) * -2.0 + 1.0;
          v130[1] = v47 + v52 + v47 + v52;
          v130[2] = v46 - v51 + v46 - v51;
          v130[3] = 0.0;
          v130[4] = v47 - v52 + v47 - v52;
          v130[5] = (v41 + v45) * -2.0 + 1.0;
          v130[6] = v48 + v50 + v48 + v50;
          v130[7] = 0.0;
          v130[8] = v46 + v51 + v46 + v51;
          v130[9] = v48 - v50 + v48 - v50;
          v130[10] = (v41 + v43) * -2.0 + 1.0;
          v131 = 0u;
          v132 = 0u;
          v133 = 0x3FF0000000000000;
          v53 = v130;
          v54 = *(float64x2_t *)a1;
          v55 = *(float64x2_t *)(a1 + 16);
          v56 = *(float64x2_t *)(a1 + 32);
          v57 = *(float64x2_t *)(a1 + 48);
          v58 = *(float64x2_t *)(a1 + 64);
          v59 = *(float64x2_t *)(a1 + 80);
          v60 = *(float64x2_t *)(a1 + 96);
          v61 = *(float64x2_t *)(a1 + 112);
          v142 = vld4q_dup_f64(v53);
          v53 += 4;
          v134 = vld4q_dup_f64(v53);
          v53 += 4;
          *(float64x2_t *)a1 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v142.val[0], *(float64x2_t *)a1), v142.val[1], v56), v142.val[2], v58), v142.val[3], v60);
          *(float64x2_t *)(a1 + 16) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v142.val[0], v55), v142.val[1], v57), v142.val[2], v59), v142.val[3], v61);
          v143 = vld4q_dup_f64(v53);
          v53 += 4;
          *(float64x2_t *)(a1 + 32) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v134.val[0], v54), v134.val[1], v56), v134.val[2], v58), v134.val[3], v60);
          *(float64x2_t *)(a1 + 48) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v134.val[0], v55), v134.val[1], v57), v134.val[2], v59), v134.val[3], v61);
          v135 = vld4q_dup_f64(v53);
          *(float64x2_t *)(a1 + 64) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v143.val[0], v54), v143.val[1], v56), v143.val[2], v58), v143.val[3], v60);
          *(float64x2_t *)(a1 + 80) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v143.val[0], v55), v143.val[1], v57), v143.val[2], v59), v143.val[3], v61);
          *(float64x2_t *)(a1 + 96) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v135.val[0], v54), v135.val[1], v56), v135.val[2], v58), v135.val[3], v60);
          *(float64x2_t *)(a1 + 112) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v135.val[0], v55), v135.val[1], v57), v135.val[2], v59), v135.val[3], v61);
          if (v113 != 0.0)
          {
            *(_QWORD *)&v126 = 0;
            v127 = *(_OWORD *)&qword_1969F8F60;
            v128 = xmmword_1969F8F70;
            v129 = unk_1969F8F80;
            v122 = constinit_5;
            v123 = unk_1969F8F20;
            v124 = xmmword_1969F8F30;
            v125 = unk_1969F8F40;
            v62 = (const double *)&v122;
            *((double *)&v126 + 1) = v113;
            v63 = *(float64x2_t *)a1;
            v64 = *(float64x2_t *)(a1 + 16);
            v65 = *(float64x2_t *)(a1 + 32);
            v66 = *(float64x2_t *)(a1 + 48);
            v67 = *(float64x2_t *)(a1 + 64);
            v68 = *(float64x2_t *)(a1 + 80);
            v69 = *(float64x2_t *)(a1 + 96);
            v70 = *(float64x2_t *)(a1 + 112);
            v144 = vld4q_dup_f64(v62);
            v62 += 4;
            v136 = vld4q_dup_f64(v62);
            v62 += 4;
            *(float64x2_t *)a1 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v144.val[0], *(float64x2_t *)a1), v144.val[1], v65), v144.val[2], v67), v144.val[3], v69);
            *(float64x2_t *)(a1 + 16) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v144.val[0], v64), v144.val[1], v66), v144.val[2], v68), v144.val[3], v70);
            v145 = vld4q_dup_f64(v62);
            v62 += 4;
            *(float64x2_t *)(a1 + 32) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v136.val[0], v63), v136.val[1], v65), v136.val[2], v67), v136.val[3], v69);
            *(float64x2_t *)(a1 + 48) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v136.val[0], v64), v136.val[1], v66), v136.val[2], v68), v136.val[3], v70);
            v137 = vld4q_dup_f64(v62);
            *(float64x2_t *)(a1 + 64) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v145.val[0], v63), v145.val[1], v65), v145.val[2], v67), v145.val[3], v69);
            *(float64x2_t *)(a1 + 80) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v145.val[0], v64), v145.val[1], v66), v145.val[2], v68), v145.val[3], v70);
            *(float64x2_t *)(a1 + 96) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v137.val[0], v63), v137.val[1], v65), v137.val[2], v67), v137.val[3], v69);
            *(float64x2_t *)(a1 + 112) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v137.val[0], v64), v137.val[1], v66), v137.val[2], v68), v137.val[3], v70);
          }
          if (v112 != 0.0)
          {
            v127 = *(_OWORD *)&qword_1969F8F60;
            v128 = xmmword_1969F8F70;
            v129 = unk_1969F8F80;
            v122 = constinit_5;
            v123 = unk_1969F8F20;
            v124 = xmmword_1969F8F30;
            v125 = unk_1969F8F40;
            v71 = (const double *)&v122;
            v126 = *(unint64_t *)&v112;
            v72 = *(float64x2_t *)a1;
            v73 = *(float64x2_t *)(a1 + 16);
            v74 = *(float64x2_t *)(a1 + 32);
            v75 = *(float64x2_t *)(a1 + 48);
            v76 = *(float64x2_t *)(a1 + 64);
            v77 = *(float64x2_t *)(a1 + 80);
            v78 = *(float64x2_t *)(a1 + 96);
            v79 = *(float64x2_t *)(a1 + 112);
            v146 = vld4q_dup_f64(v71);
            v71 += 4;
            v138 = vld4q_dup_f64(v71);
            v71 += 4;
            *(float64x2_t *)a1 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v146.val[0], *(float64x2_t *)a1), v146.val[1], v74), v146.val[2], v76), v146.val[3], v78);
            *(float64x2_t *)(a1 + 16) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v146.val[0], v73), v146.val[1], v75), v146.val[2], v77), v146.val[3], v79);
            v147 = vld4q_dup_f64(v71);
            v71 += 4;
            *(float64x2_t *)(a1 + 32) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v138.val[0], v72), v138.val[1], v74), v138.val[2], v76), v138.val[3], v78);
            *(float64x2_t *)(a1 + 48) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v138.val[0], v73), v138.val[1], v75), v138.val[2], v77), v138.val[3], v79);
            v139 = vld4q_dup_f64(v71);
            *(float64x2_t *)(a1 + 64) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v147.val[0], v72), v147.val[1], v74), v147.val[2], v76), v147.val[3], v78);
            *(float64x2_t *)(a1 + 80) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v147.val[0], v73), v147.val[1], v75), v147.val[2], v77), v147.val[3], v79);
            *(float64x2_t *)(a1 + 96) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v139.val[0], v72), v139.val[1], v74), v139.val[2], v76), v139.val[3], v78);
            *(float64x2_t *)(a1 + 112) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v139.val[0], v73), v139.val[1], v75), v139.val[2], v77), v139.val[3], v79);
          }
          if (v111 != 0.0)
          {
            v126 = xmmword_1969F8F50;
            v127 = *(_OWORD *)&qword_1969F8F60;
            v128 = xmmword_1969F8F70;
            v129 = unk_1969F8F80;
            v122 = constinit_5;
            v123 = unk_1969F8F20;
            *((_QWORD *)&v124 + 1) = 0x3FF0000000000000;
            v125 = unk_1969F8F40;
            v80 = (const double *)&v122;
            *(double *)&v124 = v111;
            v81 = *(float64x2_t *)a1;
            v82 = *(float64x2_t *)(a1 + 16);
            v83 = *(float64x2_t *)(a1 + 32);
            v84 = *(float64x2_t *)(a1 + 48);
            v85 = *(float64x2_t *)(a1 + 64);
            v86 = *(float64x2_t *)(a1 + 80);
            v87 = *(float64x2_t *)(a1 + 96);
            v88 = *(float64x2_t *)(a1 + 112);
            v148 = vld4q_dup_f64(v80);
            v80 += 4;
            v140 = vld4q_dup_f64(v80);
            v80 += 4;
            *(float64x2_t *)a1 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v148.val[0], *(float64x2_t *)a1), v148.val[1], v83), v148.val[2], v85), v148.val[3], v87);
            *(float64x2_t *)(a1 + 16) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v148.val[0], v82), v148.val[1], v84), v148.val[2], v86), v148.val[3], v88);
            v149 = vld4q_dup_f64(v80);
            v80 += 4;
            *(float64x2_t *)(a1 + 32) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v140.val[0], v81), v140.val[1], v83), v140.val[2], v85), v140.val[3], v87);
            *(float64x2_t *)(a1 + 48) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v140.val[0], v82), v140.val[1], v84), v140.val[2], v86), v140.val[3], v88);
            v141 = vld4q_dup_f64(v80);
            *(float64x2_t *)(a1 + 64) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v149.val[0], v81), v149.val[1], v83), v149.val[2], v85), v149.val[3], v87);
            *(float64x2_t *)(a1 + 80) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v149.val[0], v82), v149.val[1], v84), v149.val[2], v86), v149.val[3], v88);
            *(float64x2_t *)(a1 + 96) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v141.val[0], v81), v141.val[1], v83), v141.val[2], v85), v141.val[3], v87);
            *(float64x2_t *)(a1 + 112) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v141.val[0], v82), v141.val[1], v84), v141.val[2], v86), v141.val[3], v88);
          }
          v89 = v109;
          v90 = vmulq_n_f64(*(float64x2_t *)(a1 + 16), v108);
          v91 = v110;
          *(float64x2_t *)a1 = vmulq_n_f64(*(float64x2_t *)a1, v108);
          *(float64x2_t *)(a1 + 16) = v90;
          v92 = vmulq_n_f64(*(float64x2_t *)(a1 + 32), v89);
          v93 = vmulq_n_f64(*(float64x2_t *)(a1 + 48), v89);
          *(float64x2_t *)(a1 + 32) = v92;
          *(float64x2_t *)(a1 + 48) = v93;
          v14 = vmulq_n_f64(*(float64x2_t *)(a1 + 64), v91);
          v15 = vmulq_n_f64(*(float64x2_t *)(a1 + 80), v91);
          goto LABEL_89;
        }
        v20 = v19 + v110;
        goto LABEL_28;
      }
      v18 = v17 + v109;
      goto LABEL_21;
    }
    v10 = v8 + v108;
    goto LABEL_14;
  }
  if (a4 >= 0.5)
    return;
  v11 = *(_OWORD *)a2;
  v12 = *((_OWORD *)a2 + 1);
  v13 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)a1 = v11;
  *(_OWORD *)(a1 + 16) = v12;
  v14 = *(float64x2_t *)(a2 + 8);
  v15 = *(float64x2_t *)(a2 + 10);
  v16 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v16;
LABEL_89:
  *(float64x2_t *)(a1 + 64) = v14;
  *(float64x2_t *)(a1 + 80) = v15;
}

BOOL WebCore::TransformationMatrix::decompose4(double *a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double (*v17)[4][4];
  _BOOL8 result;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77[4][4];
  double v78[17];

  v78[16] = *(double *)MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (*a1 == 1.0
    && a1[1] == 0.0
    && a1[2] == 0.0
    && a1[3] == 0.0
    && a1[4] == 0.0
    && a1[5] == 1.0
    && a1[6] == 0.0
    && a1[7] == 0.0
    && a1[8] == 0.0
    && a1[9] == 0.0
    && a1[10] == 1.0
    && a1[11] == 0.0
    && a1[12] == 0.0
    && a1[13] == 0.0
    && a1[14] == 0.0
    && a1[15] == 1.0)
  {
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0x3FF0000000000000;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)a2 = _Q0;
    result = 1;
    *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
    return result;
  }
  v4 = a1[15];
  if (v4 == 0.0)
    return 0;
  v5 = a1[14];
  v76 = a1[11];
  v75 = a1[7];
  v6 = a1[3];
  v7 = a1[1];
  v8 = a1[4] / v4;
  v9 = a1[5] / v4;
  v10 = a1[6] / v4;
  v11 = a1[8] / v4;
  v12 = a1[9] / v4;
  v13 = a1[10] / v4;
  v14 = a1[12] / v4;
  v15 = a1[13] / v4;
  v71 = v3 / v4;
  v72 = a1[2] / v4;
  v78[0] = v3 / v4;
  v78[1] = v7 / v4;
  v73 = v7 / v4;
  v74 = v6;
  v78[2] = v72;
  v69 = v8;
  v70 = v9;
  v78[4] = v8;
  v78[5] = v9;
  v78[6] = v10;
  v78[8] = v11;
  v78[9] = v12;
  v78[10] = v13;
  v78[12] = v14;
  v78[13] = v15;
  v16 = v5 / v4;
  v78[14] = v5 / v4;
  v78[3] = 0.0;
  v78[7] = 0.0;
  v78[11] = 0.0;
  v78[15] = 1.0;
  if (WebCore::determinant4x4((WebCore *)v78, (const double (*)[4][4])a2) == 0.0)
    return 0;
  v68 = v15;
  v66 = v10;
  v67 = v12;
  v24 = v74 / v4;
  v25 = v75 / v4;
  v26 = v76 / v4;
  if (v74 / v4 == 0.0 && v25 == 0.0 && v26 == 0.0)
  {
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0x3FF0000000000000;
    v28 = v68;
    v27 = v14;
    v29 = v16;
  }
  else
  {
    memset(v77, 0, sizeof(v77));
    result = WebCore::inverse((WebCore *)v78, (const double (*)[4][4])v77, v17);
    v28 = v68;
    v27 = v14;
    v29 = v16;
    if (!result)
      return result;
    v30 = v25 * v77[1][1] + v24 * v77[1][0] + v26 * v77[1][2] + v4 / v4 * v77[1][3];
    v31 = v25 * v77[2][1] + v24 * v77[2][0] + v26 * v77[2][2] + v4 / v4 * v77[2][3];
    v32 = v25 * v77[3][1] + v24 * v77[3][0] + v26 * v77[3][2] + v4 / v4 * v77[3][3];
    *(double *)(a2 + 104) = v25 * v77[0][1] + v24 * v77[0][0] + v26 * v77[0][2] + v4 / v4 * v77[0][3];
    *(double *)(a2 + 112) = v30;
    *(double *)(a2 + 120) = v31;
    *(double *)(a2 + 128) = v32;
  }
  *(double *)(a2 + 80) = v27;
  *(double *)(a2 + 88) = v28;
  *(double *)(a2 + 96) = v29;
  v34 = v72;
  v33 = v73;
  v35 = v71;
  v36 = sqrt(v33 * v33 + v35 * v35 + v34 * v34);
  *(double *)a2 = v36;
  if (v36 != 0.0)
  {
    v35 = v71 * (1.0 / v36);
    v33 = v73 * (1.0 / v36);
    v34 = v72 * (1.0 / v36);
  }
  v37 = v70 * v33 + v35 * v69 + v34 * v66;
  v38 = v69 - v35 * v37;
  v39 = v70 - v33 * v37;
  v40 = v66 - v34 * v37;
  v41 = sqrt(v39 * v39 + v38 * v38 + v40 * v40);
  *(double *)(a2 + 8) = v41;
  if (v41 != 0.0)
  {
    v38 = v38 * (1.0 / v41);
    v39 = v39 * (1.0 / v41);
    v40 = v40 * (1.0 / v41);
  }
  v42 = v37 / v41;
  v43 = v67 * v33 + v35 * v11 + v34 * v13;
  v44 = v11 - v35 * v43;
  v45 = v67 - v33 * v43;
  v46 = v13 - v34 * v43;
  v47 = v45 * v39 + v38 * v44 + v40 * v46;
  v48 = v44 - v38 * v47;
  v49 = v45 - v39 * v47;
  v50 = v46 - v40 * v47;
  v51 = sqrt(v49 * v49 + v48 * v48 + v50 * v50);
  *(double *)(a2 + 16) = v51;
  *(double *)(a2 + 24) = v42;
  if (v51 != 0.0)
  {
    v48 = v48 * (1.0 / v51);
    v49 = v49 * (1.0 / v51);
    v50 = v50 * (1.0 / v51);
  }
  *(double *)(a2 + 32) = v43 / v51;
  *(double *)(a2 + 40) = v47 / v51;
  if (v33 * (v40 * v48 - v38 * v50) + v35 * (v39 * v50 - v40 * v49) + v34 * (v38 * v49 - v39 * v48) < 0.0)
  {
    v40 = -v40;
    v38 = -v38;
    v39 = -v39;
    *(double *)a2 = -v36;
    *(double *)(a2 + 8) = -v41;
    *(double *)(a2 + 16) = -v51;
    v35 = -v35;
    v33 = -v33;
    v34 = -v34;
    v48 = -v48;
    v49 = -v49;
    v50 = -v50;
  }
  v52 = v50 + v39 + v35 + 1.0;
  if (v52 <= 0.001)
  {
    if (v35 <= v39 || v35 <= v50)
    {
      v61 = 1.0 - v35;
      if (v39 <= v50)
      {
        v65 = sqrt(v50 + v61 - v39);
        v63 = 0.5 / v65;
        v56 = (v48 + v34) * (0.5 / v65);
        v57 = (v49 + v40) * (0.5 / v65);
        v58 = v65 * 0.5;
        v64 = v33 - v38;
      }
      else
      {
        v62 = sqrt(v39 + v61 - v50);
        v63 = 0.5 / v62;
        v56 = (v38 + v33) * (0.5 / v62);
        v57 = v62 * 0.5;
        v58 = (v49 + v40) * v63;
        v64 = v48 - v34;
      }
      v55 = v64 * v63;
    }
    else
    {
      v59 = sqrt(v35 + 1.0 - v39 - v50);
      v60 = 0.5 / v59;
      v56 = v59 * 0.5;
      v57 = (v38 - v33) * v60;
      v58 = (v48 + v34) * v60;
      v55 = (v40 - v49) * v60;
    }
  }
  else
  {
    v53 = sqrt(v52);
    v54 = 0.5 / v53;
    v55 = v53 * 0.5;
    v56 = (v40 - v49) * (0.5 / v53);
    v57 = (v48 - v34) * v54;
    v58 = (v33 - v38) * v54;
  }
  *(double *)(a2 + 48) = v56;
  *(double *)(a2 + 56) = v57;
  result = 1;
  *(double *)(a2 + 64) = v58;
  *(double *)(a2 + 72) = v55;
  return result;
}

int *WebCore::TranslateTransformOperation::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  int *v11;
  unsigned int v12;
  int *v13;
  unsigned int v14;
  int v15;
  int *result;
  unsigned int v17;
  int v18;

  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_BYTE *)(v10 + 12) = a4;
  *(_QWORD *)v10 = off_1E34170C0;
  *(_DWORD *)(v10 + 16) = 0;
  v11 = (int *)(v10 + 16);
  *(_WORD *)(v10 + 21) = 0;
  v12 = *(unsigned __int8 *)(a1 + 4);
  *(_BYTE *)(v10 + 20) = v12;
  *(_BYTE *)(v10 + 21) = *(_BYTE *)(a1 + 5);
  if (v12 <= 0xD)
  {
    if (((1 << v12) & 0x7FC) != 0)
    {
      *(_BYTE *)(v10 + 22) = *(_BYTE *)(a1 + 6);
      *v11 = *(_DWORD *)a1;
    }
    else if (((1 << v12) & 0x3003) != 0)
    {
      *v11 = 0;
    }
    else
    {
      *v11 = *(_DWORD *)a1;
      WebCore::Length::ref(v11);
    }
  }
  *(_DWORD *)(v10 + 24) = 0;
  v13 = (int *)(v10 + 24);
  *(_WORD *)(v10 + 29) = 0;
  v14 = *(unsigned __int8 *)(a2 + 4);
  *(_BYTE *)(v10 + 28) = v14;
  *(_BYTE *)(v10 + 29) = *(_BYTE *)(a2 + 5);
  if (v14 <= 0xD)
  {
    v15 = 1 << v14;
    if ((v15 & 0x7FC) != 0)
    {
      *(_BYTE *)(v10 + 30) = *(_BYTE *)(a2 + 6);
      *v13 = *(_DWORD *)a2;
    }
    else if ((v15 & 0x3003) != 0)
    {
      *v13 = 0;
    }
    else
    {
      *v13 = *(_DWORD *)a2;
      WebCore::Length::ref(v13);
    }
  }
  *(_DWORD *)(v10 + 32) = 0;
  result = (int *)(v10 + 32);
  *(_WORD *)(v10 + 37) = 0;
  v17 = *(unsigned __int8 *)(a3 + 4);
  *(_BYTE *)(v10 + 36) = v17;
  *(_BYTE *)(v10 + 37) = *(_BYTE *)(a3 + 5);
  if (v17 <= 0xD)
  {
    v18 = 1 << v17;
    if ((v18 & 0x7FC) != 0)
    {
      *(_BYTE *)(v10 + 38) = *(_BYTE *)(a3 + 6);
      *result = *(_DWORD *)a3;
    }
    else if ((v18 & 0x3003) != 0)
    {
      *result = 0;
    }
    else
    {
      *result = *(_DWORD *)a3;
      result = WebCore::Length::ref(result);
    }
  }
  if (a4 <= 0x10 && ((1 << a4) & 0x18038) != 0)
  {
    *a5 = v10;
  }
  else
  {
    result = (int *)42;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::TranslateTransformOperation::TranslateTransformOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  int *v9;
  unsigned int v10;
  int *v11;
  unsigned int v12;
  int v13;
  int *v14;
  unsigned int v15;
  int v16;
  uint64_t result;

  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 12) = a5;
  *(_QWORD *)a1 = off_1E34170C0;
  *(_DWORD *)(a1 + 16) = 0;
  v9 = (int *)(a1 + 16);
  *(_WORD *)(a1 + 21) = 0;
  v10 = *(unsigned __int8 *)(a2 + 4);
  *(_BYTE *)(a1 + 20) = v10;
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 5);
  if (v10 <= 0xD)
  {
    if (((1 << v10) & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 6);
      *v9 = *(_DWORD *)a2;
    }
    else if (((1 << v10) & 0x3003) != 0)
    {
      *v9 = 0;
    }
    else
    {
      *v9 = *(_DWORD *)a2;
      WebCore::Length::ref(v9);
    }
  }
  *(_DWORD *)(a1 + 24) = 0;
  v11 = (int *)(a1 + 24);
  *(_WORD *)(a1 + 29) = 0;
  v12 = *(unsigned __int8 *)(a3 + 4);
  *(_BYTE *)(a1 + 28) = v12;
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a3 + 5);
  if (v12 <= 0xD)
  {
    v13 = 1 << v12;
    if ((v13 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 30) = *(_BYTE *)(a3 + 6);
      *v11 = *(_DWORD *)a3;
    }
    else if ((v13 & 0x3003) != 0)
    {
      *v11 = 0;
    }
    else
    {
      *v11 = *(_DWORD *)a3;
      WebCore::Length::ref(v11);
    }
  }
  *(_DWORD *)(a1 + 32) = 0;
  v14 = (int *)(a1 + 32);
  *(_WORD *)(a1 + 37) = 0;
  v15 = *(unsigned __int8 *)(a4 + 4);
  *(_BYTE *)(a1 + 36) = v15;
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a4 + 5);
  if (v15 <= 0xD)
  {
    v16 = 1 << v15;
    if ((v16 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 38) = *(_BYTE *)(a4 + 6);
      *v14 = *(_DWORD *)a4;
    }
    else if ((v16 & 0x3003) != 0)
    {
      *v14 = 0;
    }
    else
    {
      *v14 = *(_DWORD *)a4;
      WebCore::Length::ref(v14);
    }
  }
  if (a5 <= 0x10 && ((1 << a5) & 0x18038) != 0)
    return a1;
  result = 42;
  __break(0xC471u);
  return result;
}

int *WebCore::TranslateTransformOperation::blend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>, __n128 a6@<Q0>)
{
  unsigned int v10;
  unsigned __int8 v11;
  BOOL v12;
  int v13;
  unsigned int *v15;
  int v16;
  char v17;
  unsigned int *v18;
  __n128 v19;
  __n128 v20;
  int *result;
  int v22;
  char v23;
  unint64_t v24;
  __n128 v25;
  __n128 v26;
  int v27;
  unsigned int v28;
  unsigned __int8 v29;
  char v30;
  char v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  unsigned __int8 v35;
  char v36;
  char v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  unsigned __int8 v41;
  char v42;
  char v43;
  unsigned int v44;
  char v45;
  unsigned int v46;
  __int16 v47;
  char v48;
  unsigned int v49;
  __int16 v50;
  char v51;
  unsigned int v52;
  __int16 v53;
  char v54;
  unsigned int v55;
  __int16 v56;
  char v57;

  v55 = 0;
  v56 = 4;
  v57 = 0;
  if (!a4)
  {
    if (a2)
    {
      v10 = *(unsigned __int8 *)(a2 + 12);
      v11 = *(_BYTE *)(a2 + 12);
      if (v10 != *(unsigned __int8 *)(a1 + 12))
      {
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
        result = (int *)WebCore::TransformOperation::sharedPrimitiveType(a1, v27);
        if ((unsigned __int16)result < 0x100u)
        {
          ++*(_DWORD *)(a1 + 8);
          *a5 = a1;
          return result;
        }
        v11 = result;
        v10 = *(unsigned __int8 *)(a2 + 12);
      }
      v12 = v10 > 0x10;
      v13 = (1 << v10) & 0x18038;
      if (v12 || v13 == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196278C44);
      }
      v52 = 0;
      v54 = 0;
      v53 = *(_WORD *)(a2 + 20);
      if (v53 - 2 >= 9)
      {
        if (v53 == 11)
        {
          v52 = *(_DWORD *)(a2 + 16);
          WebCore::Length::ref((int *)&v52);
        }
      }
      else
      {
        v54 = *(_BYTE *)(a2 + 22);
        if (v54)
          a6.n128_u32[0] = *(_DWORD *)(a2 + 16);
        v52 = *(_DWORD *)(a2 + 16);
      }
      v15 = (unsigned int *)(a2 + 24);
      v16 = *(unsigned __int8 *)(a2 + 28);
      v17 = *(_BYTE *)(a2 + 29);
      v49 = 0;
      v51 = 0;
      LOBYTE(v50) = v16;
      HIBYTE(v50) = v17;
      if ((v16 - 2) >= 9)
      {
        if (v16 == 11)
        {
          v49 = *v15;
          WebCore::Length::ref((int *)&v49);
        }
        goto LABEL_50;
      }
    }
    else
    {
      v11 = *(_BYTE *)(a1 + 12);
      v53 = 4;
      v54 = 0;
      v52 = 0;
      v15 = &v55;
      v50 = 4;
    }
    v51 = *((_BYTE *)v15 + 6);
    a6.n128_u32[0] = *v15;
    v49 = *v15;
    if (!a2)
    {
      v47 = 4;
      v18 = &v55;
LABEL_17:
      v48 = *((_BYTE *)v18 + 6);
      if (v48)
        a6.n128_u32[0] = *v18;
      v46 = *v18;
      goto LABEL_20;
    }
LABEL_50:
    v18 = (unsigned int *)(a2 + 32);
    v22 = *(unsigned __int8 *)(a2 + 36);
    v23 = *(_BYTE *)(a2 + 37);
    v46 = 0;
    v48 = 0;
    LOBYTE(v47) = v22;
    HIBYTE(v47) = v23;
    if (v22 == 11)
    {
      v46 = *v18;
      WebCore::Length::ref((int *)&v46);
    }
    else if ((v22 - 2) <= 8)
    {
      goto LABEL_17;
    }
LABEL_20:
    v40 = 0;
    v43 = 0;
    v41 = *(_BYTE *)(a1 + 20);
    v42 = *(_BYTE *)(a1 + 21);
    if (v41 - 2 >= 9)
    {
      if (v41 == 11)
      {
        v40 = *(_DWORD *)(a1 + 16);
        WebCore::Length::ref((int *)&v40);
      }
    }
    else
    {
      v43 = *(_BYTE *)(a1 + 22);
      if (v43)
        a6.n128_u32[0] = *(_DWORD *)(a1 + 16);
      v40 = *(_DWORD *)(a1 + 16);
    }
    WebCore::blend((unsigned __int8 *)&v52, (unsigned __int8 *)&v40, a3, (uint64_t)&v44, a6);
    v34 = 0;
    v37 = 0;
    v35 = *(_BYTE *)(a1 + 28);
    v36 = *(_BYTE *)(a1 + 29);
    if (v35 - 2 >= 9)
    {
      if (v35 == 11)
      {
        v34 = *(_DWORD *)(a1 + 24);
        WebCore::Length::ref((int *)&v34);
      }
    }
    else
    {
      v37 = *(_BYTE *)(a1 + 30);
      if (v37)
        v19.n128_u32[0] = *(_DWORD *)(a1 + 24);
      v34 = *(_DWORD *)(a1 + 24);
    }
    WebCore::blend((unsigned __int8 *)&v49, (unsigned __int8 *)&v34, a3, (uint64_t)&v38, v19);
    v28 = 0;
    v31 = 0;
    v29 = *(_BYTE *)(a1 + 36);
    v30 = *(_BYTE *)(a1 + 37);
    if (v29 - 2 >= 9)
    {
      if (v29 == 11)
      {
        v28 = *(_DWORD *)(a1 + 32);
        WebCore::Length::ref((int *)&v28);
      }
    }
    else
    {
      v31 = *(_BYTE *)(a1 + 38);
      if (v31)
        v20.n128_u32[0] = *(_DWORD *)(a1 + 32);
      v28 = *(_DWORD *)(a1 + 32);
    }
    WebCore::blend((unsigned __int8 *)&v46, (unsigned __int8 *)&v28, a3, (uint64_t)&v32, v20);
    result = WebCore::TranslateTransformOperation::create((uint64_t)&v44, (uint64_t)&v38, (uint64_t)&v32, v11, a5);
    if (v33 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v32);
    }
    if (v29 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v28);
    }
    if (v39 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v38);
    }
    if (v35 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v34);
    }
    if (v45 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v44);
    }
    if (v41 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v40);
    }
    if (v47 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v46);
    }
    if (v50 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v49);
    }
    if (v53 != 11)
      return result;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v24 = v52;
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24);
  }
  WebCore::blend((unsigned __int8 *)(a1 + 16), (unsigned __int8 *)&v55, a3, (uint64_t)&v52, a6);
  WebCore::blend((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)&v55, a3, (uint64_t)&v49, v25);
  WebCore::blend((unsigned __int8 *)(a1 + 32), (unsigned __int8 *)&v55, a3, (uint64_t)&v46, v26);
  result = WebCore::TranslateTransformOperation::create((uint64_t)&v52, (uint64_t)&v49, (uint64_t)&v46, *(unsigned __int8 *)(a1 + 12), a5);
  if (v47 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v46);
  }
  if (v50 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v49);
  }
  if (v53 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v52);
  }
  if (v56 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v24 = v55;
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24);
  }
  return result;
}

int *WebCore::TranslateTransformOperation::dump(WebCore::TranslateTransformOperation *this, WTF::TextStream *a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  int *result;
  unsigned int v13;
  unsigned __int8 v14;
  char v15;
  char v16;
  unsigned int v17;
  unsigned __int8 v18;
  char v19;
  char v20;
  unsigned int v21;
  unsigned __int8 v22;
  char v23;
  char v24;

  if ((unint64_t)*((char *)this + 12) <= 0x16)
    WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  v21 = 0;
  v24 = 0;
  v22 = *((_BYTE *)this + 20);
  v4 = v22;
  v23 = *((_BYTE *)this + 21);
  if (v22 - 2 >= 9)
  {
    v5 = 0;
    if (v22 == 11)
    {
      v5 = (void *)*((unsigned int *)this + 4);
      v21 = *((_DWORD *)this + 4);
      WebCore::Length::ref((int *)&v21);
    }
  }
  else
  {
    v24 = *((_BYTE *)this + 22);
    if (v24)
    {
      v21 = *((_DWORD *)this + 4);
      v5 = (void *)v21;
    }
    else
    {
      v5 = (void *)*((unsigned int *)this + 4);
      v21 = *((_DWORD *)this + 4);
    }
  }
  WebCore::operator<<(v3, (WebCore::Length *)&v21);
  v6 = WTF::TextStream::operator<<();
  v17 = 0;
  v20 = 0;
  v18 = *((_BYTE *)this + 28);
  v7 = v18;
  v19 = *((_BYTE *)this + 29);
  if (v18 - 2 >= 9)
  {
    v8 = 0;
    if (v18 == 11)
    {
      v8 = (void *)*((unsigned int *)this + 6);
      v17 = *((_DWORD *)this + 6);
      WebCore::Length::ref((int *)&v17);
    }
  }
  else
  {
    v20 = *((_BYTE *)this + 30);
    if (v20)
    {
      v17 = *((_DWORD *)this + 6);
      v8 = (void *)v17;
    }
    else
    {
      v8 = (void *)*((unsigned int *)this + 6);
      v17 = *((_DWORD *)this + 6);
    }
  }
  WebCore::operator<<(v6, (WebCore::Length *)&v17);
  v9 = WTF::TextStream::operator<<();
  v13 = 0;
  v16 = 0;
  v14 = *((_BYTE *)this + 36);
  v10 = v14;
  v15 = *((_BYTE *)this + 37);
  if (v14 - 2 >= 9)
  {
    v11 = 0;
    if (v14 == 11)
    {
      v11 = (void *)*((unsigned int *)this + 8);
      v13 = *((_DWORD *)this + 8);
      WebCore::Length::ref((int *)&v13);
    }
  }
  else
  {
    v16 = *((_BYTE *)this + 38);
    if (v16)
    {
      v13 = *((_DWORD *)this + 8);
      v11 = (void *)v13;
    }
    else
    {
      v11 = (void *)*((unsigned int *)this + 8);
      v13 = *((_DWORD *)this + 8);
    }
  }
  WebCore::operator<<(v9, (WebCore::Length *)&v13);
  result = (int *)WTF::TextStream::operator<<();
  if (v10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v11);
  }
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v8);
  }
  if (v4 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v5);
  }
  return result;
}

int *WebCore::TranslateTransformOperation::selfOrCopyWithResolvedCalculatedValues@<X0>(WebCore::TranslateTransformOperation *this@<X0>, const WebCore::FloatSize *a2@<X1>, uint64_t *a3@<X8>)
{
  int *result;
  float v7;
  float v8;
  WebCore::Length *v9;
  float v10;
  float v11;
  float v12;
  __int16 v13;
  char v14;
  float v15;
  __int16 v16;
  char v17;

  result = (int *)((char *)this + 16);
  if (*((_BYTE *)this + 20) == 11)
  {
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)result, *(float *)a2);
  }
  else
  {
    if (*((_BYTE *)this + 28) != 11 && *((_BYTE *)this + 36) != 11)
    {
      ++*((_DWORD *)this + 2);
      *a3 = (uint64_t)this;
      return result;
    }
    v7 = *(float *)a2;
    switch(*((_BYTE *)this + 20))
    {
      case 0:
      case 1:
      case 9:
        break;
      case 3:
        v8 = *((float *)this + 4);
        if (!*((_BYTE *)this + 22))
          v8 = (float)SLODWORD(v8);
        v7 = (float)(v7 * v8) / 100.0;
        break;
      case 4:
        if (*((_BYTE *)this + 22))
          v7 = *(float *)result;
        else
          v7 = (float)*result;
        break;
      default:
        v7 = 0.0;
        break;
    }
  }
  v15 = v7;
  v16 = 4;
  v17 = 1;
  v9 = (WebCore::TranslateTransformOperation *)((char *)this + 24);
  v10 = *((float *)a2 + 1);
  switch(*((_BYTE *)this + 28))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v11 = *((float *)this + 6);
      if (!*((_BYTE *)this + 30))
        v11 = (float)SLODWORD(v11);
      v10 = (float)(v10 * v11) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 30))
        v10 = *(float *)v9;
      else
        v10 = (float)*(int *)v9;
      break;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue(v9, v10);
      break;
    default:
      v10 = 0.0;
      break;
  }
  v12 = v10;
  v13 = 4;
  v14 = 1;
  return WebCore::TranslateTransformOperation::create((uint64_t)&v15, (uint64_t)&v12, (uint64_t)this + 32, *((unsigned __int8 *)this + 12), a3);
}

uint64_t WebCore::SkewTransformOperation::clone@<X0>(WebCore::SkewTransformOperation *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;

  result = WTF::fastMalloc((WTF *)0x20);
  v5 = *((unsigned __int8 *)this + 12);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = v5;
  *(_QWORD *)result = off_1E3417048;
  *(_OWORD *)(result + 16) = *((_OWORD *)this + 1);
  if ((v5 - 9) >= 3)
  {
    result = 40;
    __break(0xC471u);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

BOOL WebCore::SkewTransformOperation::isIdentity(WebCore::SkewTransformOperation *this)
{
  return *((double *)this + 2) == 0.0 && *((double *)this + 3) == 0.0;
}

uint64_t WebCore::SkewTransformOperation::apply(WebCore::SkewTransformOperation *this, float64x2_t *a2, const WebCore::FloatSize *a3)
{
  WebCore::TransformationMatrix::skew(a2, *((double *)this + 2), *((double *)this + 3));
  return 0;
}

BOOL WebCore::SkewTransformOperation::isAffectedByTransformOrigin(WebCore::SkewTransformOperation *this)
{
  return *((double *)this + 2) != 0.0 || *((double *)this + 3) != 0.0;
}

uint64_t WebCore::IdentityTransformOperation::clone@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 21;
  *(_QWORD *)result = off_1E3417138;
  *a1 = result;
  return result;
}

BOOL WebCore::IdentityTransformOperation::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12);
}

uint64_t WebCore::IdentityTransformOperation::isIdentity(WebCore::IdentityTransformOperation *this)
{
  return 1;
}

uint64_t WebCore::IdentityTransformOperation::apply(WebCore::IdentityTransformOperation *this, WebCore::TransformationMatrix *a2, const WebCore::FloatSize *a3)
{
  return 0;
}

uint64_t WebCore::IdentityTransformOperation::blend@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  ++*(_DWORD *)(result + 8);
  *a2 = result;
  return result;
}

void WebCore::TranslateTransformOperation::~TranslateTransformOperation(WebCore::TranslateTransformOperation *this)
{
  if (*((_BYTE *)this + 36) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 8));
  }
  if (*((_BYTE *)this + 28) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 6));
  }
  if (*((_BYTE *)this + 20) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 4));
  }
}

void WebCore::TranslateTransformOperation::~TranslateTransformOperation(WebCore::TranslateTransformOperation *this, void *a2)
{
  if (*((_BYTE *)this + 36) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 8));
  }
  if (*((_BYTE *)this + 28) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 6));
  }
  if (*((_BYTE *)this + 20) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 4));
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::TranslateTransformOperation::clone@<X0>(WebCore::TranslateTransformOperation *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x28);
  result = WebCore::TranslateTransformOperation::TranslateTransformOperation(v4, (uint64_t)this + 16, (uint64_t)this + 24, (uint64_t)this + 32, *((unsigned __int8 *)this + 12));
  *a2 = result;
  return result;
}

BOOL WebCore::TranslateTransformOperation::isIdentity(WebCore::TranslateTransformOperation *this)
{
  _BOOL8 v1;
  float *v2;
  float v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float *v9;
  float v10;
  float v11;
  WebCore::TranslateTransformOperation *v12;
  WebCore::TranslateTransformOperation *v13;

  v1 = 0;
  v2 = (float *)((char *)this + 16);
  switch(*((_BYTE *)this + 20))
  {
    case 0:
    case 1:
    case 9:
      return v1;
    case 3:
      v4 = *((float *)this + 4);
      if (!*((_BYTE *)this + 22))
        v4 = (float)*((int *)this + 4);
      v3 = v4 / 100.0;
      goto LABEL_8;
    case 4:
      if (*((_BYTE *)this + 22))
        v3 = *v2;
      else
        v3 = (float)*(int *)v2;
      goto LABEL_8;
    case 0xB:
      v12 = this;
      WebCore::Length::nonNanCalculatedValue((WebCore::TranslateTransformOperation *)((char *)this + 16), 1.0);
      this = v12;
LABEL_8:
      if (v3 == 0.0)
        goto LABEL_9;
LABEL_17:
      v1 = 0;
      break;
    default:
LABEL_9:
      v1 = 0;
      v5 = (float *)((char *)this + 24);
      switch(*((_BYTE *)this + 28))
      {
        case 0:
        case 1:
        case 9:
          return v1;
        case 3:
          v7 = *((float *)this + 6);
          if (!*((_BYTE *)this + 30))
            v7 = (float)*((int *)this + 6);
          v6 = v7 / 100.0;
          goto LABEL_16;
        case 4:
          if (*((_BYTE *)this + 30))
            v6 = *v5;
          else
            v6 = (float)*(int *)v5;
          goto LABEL_16;
        case 0xB:
          v13 = this;
          WebCore::Length::nonNanCalculatedValue((WebCore::TranslateTransformOperation *)((char *)this + 24), 1.0);
          this = v13;
LABEL_16:
          if (v6 != 0.0)
            goto LABEL_17;
          goto LABEL_19;
        default:
LABEL_19:
          v9 = (float *)((char *)this + 32);
          v10 = 1.0;
          switch(*((_BYTE *)this + 36))
          {
            case 0:
            case 1:
            case 9:
              break;
            case 3:
              v11 = *((float *)this + 8);
              if (!*((_BYTE *)this + 38))
                v11 = (float)*((int *)this + 8);
              v10 = v11 / 100.0;
              break;
            case 4:
              if (*((_BYTE *)this + 38))
                v10 = *v9;
              else
                v10 = (float)*(int *)v9;
              break;
            case 0xB:
              WebCore::Length::nonNanCalculatedValue((WebCore::TranslateTransformOperation *)((char *)this + 32), 1.0);
              break;
            default:
              v10 = 0.0;
              break;
          }
          v1 = v10 == 0.0;
          break;
      }
      break;
  }
  return v1;
}

uint64_t WebCore::TranslateTransformOperation::primitiveType(WebCore::TranslateTransformOperation *this)
{
  BOOL v1;

  if (*((_BYTE *)this + 36))
    v1 = *((_BYTE *)this + 36) == 11;
  else
    v1 = 1;
  if (v1)
    return 16;
  if (*((_BYTE *)this + 38))
  {
    if (*((float *)this + 8) != 0.0)
      return 16;
  }
  else if (*((_DWORD *)this + 8))
  {
    return 16;
  }
  return 5;
}

BOOL WebCore::TranslateTransformOperation::isRepresentableIn2D(WebCore::TranslateTransformOperation *this)
{
  BOOL v1;

  if (*((_BYTE *)this + 36))
    v1 = *((_BYTE *)this + 36) == 11;
  else
    v1 = 1;
  if (v1)
    return 0;
  if (*((_BYTE *)this + 38))
    return *((float *)this + 8) == 0.0;
  else
    return *((_DWORD *)this + 8) == 0;
}

unsigned int *WebCore::DataSegment::span(WebCore::DataSegment *this)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;
  unint64_t v9;
  char v10;
  char *v11;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1
    || (v3 = (char *)this + 8,
        v11 = &v10,
        v4 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v11, (char *)this + 8), v5 = *((unsigned int *)this + 6), (_DWORD)v5 == -1))
  {
    v8 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v8, v9);
  }
  else
  {
    v6 = v4;
    v11 = &v10;
    ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v11, v3);
    return (unsigned int *)v6;
  }
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  unint64_t v4;
  WTF *v5;

  if (result[2] > a2)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > a2)
    {
      result = WTF::VectorDestructor<true,WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>>::destruct((_DWORD *)(*(_QWORD *)result + 8 * a2), (_DWORD **)(*(_QWORD *)result + 8 * v4));
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v5, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v5)
        result = (unsigned int *)memcpy(result, v5, 8 * v4);
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::TransformOperationType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::TransformOperationType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!HIDWORD(v9))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)v9);
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void **WTF::Vector<WebCore::TransformOperationType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void *v7;
  size_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (HIDWORD(v5))
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *result;
      v8 = *((unsigned int *)result + 3);
      v9 = (void *)WTF::fastMalloc((WTF *)v5);
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
      result = (void **)memcpy(v9, v7, v8);
      if (v7)
      {
        if (*v6 == v7)
        {
          *v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v7, v10);
      }
    }
  }
  return result;
}

__n128 WebCore::SelectionGeometry::SelectionGeometry(uint64_t a1, uint64_t a2, char a3, char a4, int a5)
{
  __n128 result;
  __int128 v6;

  result = *(__n128 *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 49) = 0;
  *(_BYTE *)(a1 + 57) = a4;
  *(_BYTE *)(a1 + 58) = 0;
  *(_DWORD *)(a1 + 60) = a5;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

{
  __n128 result;
  __int128 v6;

  result = *(__n128 *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 49) = 0;
  *(_BYTE *)(a1 + 57) = a4;
  *(_BYTE *)(a1 + 58) = 0;
  *(_DWORD *)(a1 + 60) = a5;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

__n128 WebCore::SelectionGeometry::SelectionGeometry(uint64_t a1, uint64_t a2, char a3, char a4, int a5, int a6, int a7, int a8, char a9, char a10, char a11, char a12, char a13, unsigned __int8 a14)
{
  __n128 result;
  __int128 v15;

  result = *(__n128 *)a2;
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a7;
  *(_DWORD *)(a1 + 48) = a8;
  *(_BYTE *)(a1 + 52) = a9;
  *(_BYTE *)(a1 + 53) = a10;
  *(_BYTE *)(a1 + 54) = a11;
  *(_BYTE *)(a1 + 55) = a12;
  *(_BYTE *)(a1 + 56) = a13;
  *(_WORD *)(a1 + 57) = a14;
  *(_DWORD *)(a1 + 60) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

{
  __n128 result;
  __int128 v15;

  result = *(__n128 *)a2;
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a7;
  *(_DWORD *)(a1 + 48) = a8;
  *(_BYTE *)(a1 + 52) = a9;
  *(_BYTE *)(a1 + 53) = a10;
  *(_BYTE *)(a1 + 54) = a11;
  *(_BYTE *)(a1 + 55) = a12;
  *(_BYTE *)(a1 + 56) = a13;
  *(_WORD *)(a1 + 57) = a14;
  *(_DWORD *)(a1 + 60) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

float WebCore::SelectionGeometry::setLogicalLeft(WebCore::SelectionGeometry *this, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v16;
  float v17;
  float v18;
  float v20;
  float v22;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  float result;
  float v45;
  float v46;

  if (*((_BYTE *)this + 80))
  {
    v3 = *((_QWORD *)this + 8);
    v2 = *((_QWORD *)this + 9);
  }
  else
  {
    v5 = *((float *)this + 4);
    v4 = *((float *)this + 5);
    v7 = *((float *)this + 6);
    v6 = *((float *)this + 7);
    if (v7 >= v5)
      v8 = *((float *)this + 4);
    else
      v8 = *((float *)this + 6);
    v10 = *(float *)this;
    v9 = *((float *)this + 1);
    v12 = *((float *)this + 2);
    v11 = *((float *)this + 3);
    if (v12 >= *(float *)this)
      v13 = *(float *)this;
    else
      v13 = *((float *)this + 2);
    if (v8 >= v13)
      v8 = v13;
    v14 = fabsf(v8);
    if (v14 == INFINITY || v14 > 2147500000.0)
      v8 = (float)((SLODWORD(v8) >> 31) ^ 0x7FFFFFFF);
    if (v6 >= v4)
      v16 = *((float *)this + 5);
    else
      v16 = *((float *)this + 7);
    if (v11 >= v9)
      v17 = *((float *)this + 1);
    else
      v17 = *((float *)this + 3);
    if (v16 >= v17)
      v16 = v17;
    v18 = fabsf(v16);
    if (v18 == INFINITY || v18 > 2147500000.0)
      v16 = (float)((SLODWORD(v16) >> 31) ^ 0x7FFFFFFF);
    if (v10 < v12)
      v10 = *((float *)this + 2);
    if (v5 < v7)
      v5 = *((float *)this + 6);
    if (v10 >= v5)
      v5 = v10;
    v20 = fabsf(v5);
    if (v20 == INFINITY || v20 > 2147500000.0)
      v5 = (float)((SLODWORD(v5) >> 31) ^ 0x7FFFFFFF);
    if (v9 < v11)
      v9 = *((float *)this + 3);
    if (v4 < v6)
      v4 = *((float *)this + 7);
    if (v9 >= v4)
      v4 = v9;
    v22 = fabsf(v4);
    if (v22 == INFINITY || v22 > 2147500000.0)
      v4 = (float)((SLODWORD(v4) >> 31) ^ 0x7FFFFFFF);
    v24 = v5 - v8;
    v25 = v4 - v16;
    v26 = floorf(v8);
    v27 = -2147500000.0;
    if (v26 > -2147500000.0)
      v27 = (float)(int)v26;
    if (v26 < 2147500000.0)
      v28 = v27;
    else
      v28 = 2147500000.0;
    v29 = floorf(v16);
    v30 = -2147500000.0;
    if (v29 > -2147500000.0)
      v30 = (float)(int)v29;
    if (v29 < 2147500000.0)
      v31 = v30;
    else
      v31 = 2147500000.0;
    v32 = v16 + v25;
    v33 = ceilf(v8 + v24);
    v34 = 2147500000.0;
    if (v33 < 2147500000.0)
    {
      v34 = -2147500000.0;
      if (v33 > -2147500000.0)
        v34 = (float)(int)v33;
    }
    v35 = ceilf(v32);
    v36 = 2147500000.0;
    if (v35 < 2147500000.0)
    {
      v36 = -2147500000.0;
      if (v35 > -2147500000.0)
        v36 = (float)(int)v35;
    }
    if (v28 >= 2147500000.0)
    {
      v37 = 0x7FFFFFFFLL;
    }
    else if (v28 <= -2147500000.0)
    {
      v37 = 0x80000000;
    }
    else
    {
      v37 = (int)v28;
    }
    if (v31 >= 2147500000.0)
    {
      v38 = 0x7FFFFFFF00000000;
    }
    else if (v31 <= -2147500000.0)
    {
      v38 = 0x8000000000000000;
    }
    else
    {
      v38 = (unint64_t)(int)v31 << 32;
    }
    v39 = v34 - v28;
    v40 = v36 - v31;
    if (v39 >= 2147500000.0)
    {
      v41 = 0x7FFFFFFFLL;
    }
    else if (v39 <= -2147500000.0)
    {
      v41 = 0x80000000;
    }
    else
    {
      v41 = (int)v39;
    }
    if (v40 >= 2147500000.0)
    {
      v42 = 0x7FFFFFFF00000000;
    }
    else if (v40 <= -2147500000.0)
    {
      v42 = 0x8000000000000000;
    }
    else
    {
      v42 = (unint64_t)(int)v40 << 32;
    }
    v3 = v38 | v37;
    v2 = v42 | v41;
    *((_BYTE *)this + 80) = 1;
  }
  v43 = HIDWORD(v3);
  if (*((_BYTE *)this + 57))
    v3 = a2;
  else
    v3 = v3;
  if (*((_BYTE *)this + 57))
    v43 = v43;
  else
    v43 = a2;
  result = (float)(int)v3;
  v45 = (float)(int)v2 + (float)(int)v3;
  v46 = (float)SHIDWORD(v2) + (float)(int)v43;
  *(float *)this = (float)(int)v3;
  *((float *)this + 1) = (float)(int)v43;
  *((float *)this + 2) = v45;
  *((float *)this + 3) = (float)(int)v43;
  *((float *)this + 4) = v45;
  *((float *)this + 5) = v46;
  *((float *)this + 6) = (float)(int)v3;
  *((float *)this + 7) = v46;
  *((_QWORD *)this + 8) = v3 | (v43 << 32);
  *((_QWORD *)this + 9) = v2;
  return result;
}

unint64_t WebCore::SelectionGeometry::rect(WebCore::SelectionGeometry *this)
{
  unint64_t v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  BOOL v18;
  BOOL v19;
  float v20;
  BOOL v21;
  BOOL v22;
  float v23;
  BOOL v24;
  BOOL v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  float v41;
  float v42;
  uint64_t v43;
  unint64_t v44;

  if (*((_BYTE *)this + 80))
    return *((_QWORD *)this + 8);
  v3 = *((float *)this + 4);
  v2 = *((float *)this + 5);
  v5 = *((float *)this + 6);
  v4 = *((float *)this + 7);
  if (v5 >= v3)
    v6 = *((float *)this + 4);
  else
    v6 = *((float *)this + 6);
  v8 = *(float *)this;
  v7 = *((float *)this + 1);
  v10 = *((float *)this + 2);
  v9 = *((float *)this + 3);
  if (v10 >= *(float *)this)
    v11 = *(float *)this;
  else
    v11 = *((float *)this + 2);
  if (v6 >= v11)
    v6 = v11;
  v12 = fabsf(v6);
  if (v12 == INFINITY)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v13 = v12 == 2147500000.0;
    v14 = v12 < 2147500000.0;
  }
  if (!v14 && !v13)
    v6 = (float)((SLODWORD(v6) >> 31) ^ 0x7FFFFFFF);
  if (v4 >= v2)
    v15 = *((float *)this + 5);
  else
    v15 = *((float *)this + 7);
  if (v9 >= v7)
    v16 = *((float *)this + 1);
  else
    v16 = *((float *)this + 3);
  if (v15 >= v16)
    v15 = v16;
  v17 = fabsf(v15);
  if (v17 == INFINITY)
  {
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v18 = v17 == 2147500000.0;
    v19 = v17 < 2147500000.0;
  }
  if (!v19 && !v18)
    v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
  if (v8 < v10)
    v8 = *((float *)this + 2);
  if (v3 < v5)
    v3 = *((float *)this + 6);
  if (v8 >= v3)
    v3 = v8;
  v20 = fabsf(v3);
  if (v20 == INFINITY)
  {
    v21 = 0;
    v22 = 0;
  }
  else
  {
    v21 = v20 == 2147500000.0;
    v22 = v20 < 2147500000.0;
  }
  if (!v22 && !v21)
    v3 = (float)((SLODWORD(v3) >> 31) ^ 0x7FFFFFFF);
  if (v7 < v9)
    v7 = *((float *)this + 3);
  if (v2 < v4)
    v2 = *((float *)this + 7);
  if (v7 >= v2)
    v2 = v7;
  v23 = fabsf(v2);
  if (v23 == INFINITY)
  {
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v24 = v23 == 2147500000.0;
    v25 = v23 < 2147500000.0;
  }
  if (!v25 && !v24)
    v2 = (float)((SLODWORD(v2) >> 31) ^ 0x7FFFFFFF);
  v26 = v3 - v6;
  v27 = v2 - v15;
  v28 = floorf(v6);
  v29 = -2147500000.0;
  if (v28 > -2147500000.0)
    v29 = (float)(int)v28;
  if (v28 < 2147500000.0)
    v30 = v29;
  else
    v30 = 2147500000.0;
  v31 = floorf(v15);
  v32 = -2147500000.0;
  if (v31 > -2147500000.0)
    v32 = (float)(int)v31;
  if (v31 < 2147500000.0)
    v33 = v32;
  else
    v33 = 2147500000.0;
  v34 = v15 + v27;
  v35 = ceilf(v6 + v26);
  v36 = 2147500000.0;
  if (v35 < 2147500000.0)
  {
    v36 = -2147500000.0;
    if (v35 > -2147500000.0)
      v36 = (float)(int)v35;
  }
  v37 = ceilf(v34);
  v38 = 2147500000.0;
  if (v37 < 2147500000.0)
  {
    v38 = -2147500000.0;
    if (v37 > -2147500000.0)
      v38 = (float)(int)v37;
  }
  if (v30 >= 2147500000.0)
  {
    v39 = 0x7FFFFFFFLL;
  }
  else if (v30 <= -2147500000.0)
  {
    v39 = 0x80000000;
  }
  else
  {
    v39 = (int)v30;
  }
  if (v33 >= 2147500000.0)
  {
    v40 = 0x7FFFFFFF00000000;
  }
  else if (v33 <= -2147500000.0)
  {
    v40 = 0x8000000000000000;
  }
  else
  {
    v40 = (unint64_t)(int)v33 << 32;
  }
  v41 = v36 - v30;
  v42 = v38 - v33;
  if (v41 >= 2147500000.0)
  {
    v43 = 0x7FFFFFFFLL;
  }
  else if (v41 <= -2147500000.0)
  {
    v43 = 0x80000000;
  }
  else
  {
    v43 = (int)v41;
  }
  if (v42 >= 2147500000.0)
  {
    v44 = 0x7FFFFFFF00000000;
  }
  else if (v42 <= -2147500000.0)
  {
    v44 = 0x8000000000000000;
  }
  else
  {
    v44 = (unint64_t)(int)v42 << 32;
  }
  v1 = v40 | v39;
  *((_QWORD *)this + 8) = v1;
  *((_QWORD *)this + 9) = v44 | v43;
  *((_BYTE *)this + 80) = 1;
  return v1;
}

uint64_t WebCore::SelectionGeometry::setRect(uint64_t this, const WebCore::IntRect *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  int v6;

  v2 = (float)*(int *)a2;
  v3 = (float)*((int *)a2 + 1);
  v4 = v2 + (float)*((int *)a2 + 2);
  v5 = v3 + (float)*((int *)a2 + 3);
  *(float *)this = v2;
  *(float *)(this + 4) = v3;
  *(float *)(this + 8) = v4;
  *(float *)(this + 12) = v3;
  *(float *)(this + 16) = v4;
  *(float *)(this + 20) = v5;
  *(float *)(this + 24) = v2;
  *(float *)(this + 28) = v5;
  v6 = *(unsigned __int8 *)(this + 80);
  *(_OWORD *)(this + 64) = *(_OWORD *)a2;
  if (!v6)
    *(_BYTE *)(this + 80) = 1;
  return this;
}

float WebCore::SelectionGeometry::setLogicalWidth(WebCore::SelectionGeometry *this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  BOOL v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  BOOL v21;
  float v22;
  BOOL v23;
  BOOL v24;
  float v25;
  BOOL v26;
  BOOL v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float result;
  unint64_t v50;
  float v51;
  float v52;

  if (*((_BYTE *)this + 80))
  {
    v2 = *((_QWORD *)this + 8);
    v3 = *((_QWORD *)this + 9);
  }
  else
  {
    v5 = *((float *)this + 4);
    v4 = *((float *)this + 5);
    v7 = *((float *)this + 6);
    v6 = *((float *)this + 7);
    if (v7 >= v5)
      v8 = *((float *)this + 4);
    else
      v8 = *((float *)this + 6);
    v10 = *(float *)this;
    v9 = *((float *)this + 1);
    v12 = *((float *)this + 2);
    v11 = *((float *)this + 3);
    if (v12 >= *(float *)this)
      v13 = *(float *)this;
    else
      v13 = *((float *)this + 2);
    if (v8 >= v13)
      v8 = v13;
    v14 = fabsf(v8);
    if (v14 == INFINITY)
    {
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v15 = v14 == 2147500000.0;
      v16 = v14 < 2147500000.0;
    }
    if (!v16 && !v15)
      v8 = (float)((SLODWORD(v8) >> 31) ^ 0x7FFFFFFF);
    if (v6 >= v4)
      v17 = *((float *)this + 5);
    else
      v17 = *((float *)this + 7);
    if (v11 >= v9)
      v18 = *((float *)this + 1);
    else
      v18 = *((float *)this + 3);
    if (v17 >= v18)
      v17 = v18;
    v19 = fabsf(v17);
    if (v19 == INFINITY)
    {
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v20 = v19 == 2147500000.0;
      v21 = v19 < 2147500000.0;
    }
    if (!v21 && !v20)
      v17 = (float)((SLODWORD(v17) >> 31) ^ 0x7FFFFFFF);
    if (v10 < v12)
      v10 = *((float *)this + 2);
    if (v5 < v7)
      v5 = *((float *)this + 6);
    if (v10 >= v5)
      v5 = v10;
    v22 = fabsf(v5);
    if (v22 == INFINITY)
    {
      v23 = 0;
      v24 = 0;
    }
    else
    {
      v23 = v22 == 2147500000.0;
      v24 = v22 < 2147500000.0;
    }
    if (!v24 && !v23)
      v5 = (float)((SLODWORD(v5) >> 31) ^ 0x7FFFFFFF);
    if (v9 < v11)
      v9 = *((float *)this + 3);
    if (v4 < v6)
      v4 = *((float *)this + 7);
    if (v9 >= v4)
      v4 = v9;
    v25 = fabsf(v4);
    if (v25 == INFINITY)
    {
      v26 = 0;
      v27 = 0;
    }
    else
    {
      v26 = v25 == 2147500000.0;
      v27 = v25 < 2147500000.0;
    }
    if (!v27 && !v26)
      v4 = (float)((SLODWORD(v4) >> 31) ^ 0x7FFFFFFF);
    v28 = v5 - v8;
    v29 = v4 - v17;
    v30 = floorf(v8);
    v31 = -2147500000.0;
    if (v30 > -2147500000.0)
      v31 = (float)(int)v30;
    if (v30 < 2147500000.0)
      v32 = v31;
    else
      v32 = 2147500000.0;
    v33 = floorf(v17);
    v34 = -2147500000.0;
    if (v33 > -2147500000.0)
      v34 = (float)(int)v33;
    if (v33 < 2147500000.0)
      v35 = v34;
    else
      v35 = 2147500000.0;
    v36 = v17 + v29;
    v37 = ceilf(v8 + v28);
    v38 = 2147500000.0;
    if (v37 < 2147500000.0)
    {
      v38 = -2147500000.0;
      if (v37 > -2147500000.0)
        v38 = (float)(int)v37;
    }
    v39 = ceilf(v36);
    v40 = 2147500000.0;
    if (v39 < 2147500000.0)
    {
      v40 = -2147500000.0;
      if (v39 > -2147500000.0)
        v40 = (float)(int)v39;
    }
    if (v32 >= 2147500000.0)
    {
      v41 = 0x7FFFFFFFLL;
    }
    else if (v32 <= -2147500000.0)
    {
      v41 = 0x80000000;
    }
    else
    {
      v41 = (int)v32;
    }
    if (v35 >= 2147500000.0)
    {
      v42 = 0x7FFFFFFF00000000;
    }
    else if (v35 <= -2147500000.0)
    {
      v42 = 0x8000000000000000;
    }
    else
    {
      v42 = (unint64_t)(int)v35 << 32;
    }
    v43 = v38 - v32;
    v44 = v40 - v35;
    if (v43 >= 2147500000.0)
    {
      v45 = 0x7FFFFFFFLL;
    }
    else if (v43 <= -2147500000.0)
    {
      v45 = 0x80000000;
    }
    else
    {
      v45 = (int)v43;
    }
    if (v44 >= 2147500000.0)
    {
      v46 = 0x7FFFFFFF00000000;
    }
    else if (v44 <= -2147500000.0)
    {
      v46 = 0x8000000000000000;
    }
    else
    {
      v46 = (unint64_t)(int)v44 << 32;
    }
    v2 = v42 | v41;
    v3 = v46 | v45;
    *((_BYTE *)this + 80) = 1;
  }
  v47 = a2;
  v48 = 0xFFFFFFFFLL;
  if (*((_BYTE *)this + 57))
    v48 = 0xFFFFFFFF00000000;
  else
    v47 = a2 << 32;
  result = (float)(int)v2;
  v50 = v3 & v48 | v47;
  v51 = (float)(int)v2 + (float)(int)v50;
  *(float *)this = (float)(int)v2;
  *((float *)this + 1) = (float)SHIDWORD(v2);
  v52 = (float)SHIDWORD(v2) + (float)SHIDWORD(v50);
  *((float *)this + 2) = v51;
  *((float *)this + 3) = (float)SHIDWORD(v2);
  *((float *)this + 4) = v51;
  *((float *)this + 5) = v52;
  *((float *)this + 6) = (float)(int)v2;
  *((float *)this + 7) = v52;
  *((_QWORD *)this + 8) = v2;
  *((_QWORD *)this + 9) = v50;
  return result;
}

float WebCore::SelectionGeometry::setLogicalTop(WebCore::SelectionGeometry *this, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v16;
  float v17;
  float v18;
  float v20;
  float v22;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  float result;
  float v45;
  float v46;

  if (*((_BYTE *)this + 80))
  {
    v3 = *((_QWORD *)this + 8);
    v2 = *((_QWORD *)this + 9);
  }
  else
  {
    v5 = *((float *)this + 4);
    v4 = *((float *)this + 5);
    v7 = *((float *)this + 6);
    v6 = *((float *)this + 7);
    if (v7 >= v5)
      v8 = *((float *)this + 4);
    else
      v8 = *((float *)this + 6);
    v10 = *(float *)this;
    v9 = *((float *)this + 1);
    v12 = *((float *)this + 2);
    v11 = *((float *)this + 3);
    if (v12 >= *(float *)this)
      v13 = *(float *)this;
    else
      v13 = *((float *)this + 2);
    if (v8 >= v13)
      v8 = v13;
    v14 = fabsf(v8);
    if (v14 == INFINITY || v14 > 2147500000.0)
      v8 = (float)((SLODWORD(v8) >> 31) ^ 0x7FFFFFFF);
    if (v6 >= v4)
      v16 = *((float *)this + 5);
    else
      v16 = *((float *)this + 7);
    if (v11 >= v9)
      v17 = *((float *)this + 1);
    else
      v17 = *((float *)this + 3);
    if (v16 >= v17)
      v16 = v17;
    v18 = fabsf(v16);
    if (v18 == INFINITY || v18 > 2147500000.0)
      v16 = (float)((SLODWORD(v16) >> 31) ^ 0x7FFFFFFF);
    if (v10 < v12)
      v10 = *((float *)this + 2);
    if (v5 < v7)
      v5 = *((float *)this + 6);
    if (v10 >= v5)
      v5 = v10;
    v20 = fabsf(v5);
    if (v20 == INFINITY || v20 > 2147500000.0)
      v5 = (float)((SLODWORD(v5) >> 31) ^ 0x7FFFFFFF);
    if (v9 < v11)
      v9 = *((float *)this + 3);
    if (v4 < v6)
      v4 = *((float *)this + 7);
    if (v9 >= v4)
      v4 = v9;
    v22 = fabsf(v4);
    if (v22 == INFINITY || v22 > 2147500000.0)
      v4 = (float)((SLODWORD(v4) >> 31) ^ 0x7FFFFFFF);
    v24 = v5 - v8;
    v25 = v4 - v16;
    v26 = floorf(v8);
    v27 = -2147500000.0;
    if (v26 > -2147500000.0)
      v27 = (float)(int)v26;
    if (v26 < 2147500000.0)
      v28 = v27;
    else
      v28 = 2147500000.0;
    v29 = floorf(v16);
    v30 = -2147500000.0;
    if (v29 > -2147500000.0)
      v30 = (float)(int)v29;
    if (v29 < 2147500000.0)
      v31 = v30;
    else
      v31 = 2147500000.0;
    v32 = v16 + v25;
    v33 = ceilf(v8 + v24);
    v34 = 2147500000.0;
    if (v33 < 2147500000.0)
    {
      v34 = -2147500000.0;
      if (v33 > -2147500000.0)
        v34 = (float)(int)v33;
    }
    v35 = ceilf(v32);
    v36 = 2147500000.0;
    if (v35 < 2147500000.0)
    {
      v36 = -2147500000.0;
      if (v35 > -2147500000.0)
        v36 = (float)(int)v35;
    }
    if (v28 >= 2147500000.0)
    {
      v37 = 0x7FFFFFFFLL;
    }
    else if (v28 <= -2147500000.0)
    {
      v37 = 0x80000000;
    }
    else
    {
      v37 = (int)v28;
    }
    if (v31 >= 2147500000.0)
    {
      v38 = 0x7FFFFFFF00000000;
    }
    else if (v31 <= -2147500000.0)
    {
      v38 = 0x8000000000000000;
    }
    else
    {
      v38 = (unint64_t)(int)v31 << 32;
    }
    v39 = v34 - v28;
    v40 = v36 - v31;
    if (v39 >= 2147500000.0)
    {
      v41 = 0x7FFFFFFFLL;
    }
    else if (v39 <= -2147500000.0)
    {
      v41 = 0x80000000;
    }
    else
    {
      v41 = (int)v39;
    }
    if (v40 >= 2147500000.0)
    {
      v42 = 0x7FFFFFFF00000000;
    }
    else if (v40 <= -2147500000.0)
    {
      v42 = 0x8000000000000000;
    }
    else
    {
      v42 = (unint64_t)(int)v40 << 32;
    }
    v3 = v38 | v37;
    v2 = v42 | v41;
    *((_BYTE *)this + 80) = 1;
  }
  v43 = HIDWORD(v3);
  if (*((_BYTE *)this + 57))
    v3 = v3;
  else
    v3 = a2;
  if (*((_BYTE *)this + 57))
    v43 = a2;
  else
    v43 = v43;
  result = (float)(int)v3;
  v45 = (float)(int)v2 + (float)(int)v3;
  v46 = (float)SHIDWORD(v2) + (float)(int)v43;
  *(float *)this = (float)(int)v3;
  *((float *)this + 1) = (float)(int)v43;
  *((float *)this + 2) = v45;
  *((float *)this + 3) = (float)(int)v43;
  *((float *)this + 4) = v45;
  *((float *)this + 5) = v46;
  *((float *)this + 6) = (float)(int)v3;
  *((float *)this + 7) = v46;
  *((_QWORD *)this + 8) = v3 | (v43 << 32);
  *((_QWORD *)this + 9) = v2;
  return result;
}

float WebCore::SelectionGeometry::setLogicalHeight(WebCore::SelectionGeometry *this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  BOOL v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  BOOL v21;
  float v22;
  BOOL v23;
  BOOL v24;
  float v25;
  BOOL v26;
  BOOL v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float result;
  unint64_t v50;
  float v51;
  float v52;

  if (*((_BYTE *)this + 80))
  {
    v2 = *((_QWORD *)this + 8);
    v3 = *((_QWORD *)this + 9);
  }
  else
  {
    v5 = *((float *)this + 4);
    v4 = *((float *)this + 5);
    v7 = *((float *)this + 6);
    v6 = *((float *)this + 7);
    if (v7 >= v5)
      v8 = *((float *)this + 4);
    else
      v8 = *((float *)this + 6);
    v10 = *(float *)this;
    v9 = *((float *)this + 1);
    v12 = *((float *)this + 2);
    v11 = *((float *)this + 3);
    if (v12 >= *(float *)this)
      v13 = *(float *)this;
    else
      v13 = *((float *)this + 2);
    if (v8 >= v13)
      v8 = v13;
    v14 = fabsf(v8);
    if (v14 == INFINITY)
    {
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v15 = v14 == 2147500000.0;
      v16 = v14 < 2147500000.0;
    }
    if (!v16 && !v15)
      v8 = (float)((SLODWORD(v8) >> 31) ^ 0x7FFFFFFF);
    if (v6 >= v4)
      v17 = *((float *)this + 5);
    else
      v17 = *((float *)this + 7);
    if (v11 >= v9)
      v18 = *((float *)this + 1);
    else
      v18 = *((float *)this + 3);
    if (v17 >= v18)
      v17 = v18;
    v19 = fabsf(v17);
    if (v19 == INFINITY)
    {
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v20 = v19 == 2147500000.0;
      v21 = v19 < 2147500000.0;
    }
    if (!v21 && !v20)
      v17 = (float)((SLODWORD(v17) >> 31) ^ 0x7FFFFFFF);
    if (v10 < v12)
      v10 = *((float *)this + 2);
    if (v5 < v7)
      v5 = *((float *)this + 6);
    if (v10 >= v5)
      v5 = v10;
    v22 = fabsf(v5);
    if (v22 == INFINITY)
    {
      v23 = 0;
      v24 = 0;
    }
    else
    {
      v23 = v22 == 2147500000.0;
      v24 = v22 < 2147500000.0;
    }
    if (!v24 && !v23)
      v5 = (float)((SLODWORD(v5) >> 31) ^ 0x7FFFFFFF);
    if (v9 < v11)
      v9 = *((float *)this + 3);
    if (v4 < v6)
      v4 = *((float *)this + 7);
    if (v9 >= v4)
      v4 = v9;
    v25 = fabsf(v4);
    if (v25 == INFINITY)
    {
      v26 = 0;
      v27 = 0;
    }
    else
    {
      v26 = v25 == 2147500000.0;
      v27 = v25 < 2147500000.0;
    }
    if (!v27 && !v26)
      v4 = (float)((SLODWORD(v4) >> 31) ^ 0x7FFFFFFF);
    v28 = v5 - v8;
    v29 = v4 - v17;
    v30 = floorf(v8);
    v31 = -2147500000.0;
    if (v30 > -2147500000.0)
      v31 = (float)(int)v30;
    if (v30 < 2147500000.0)
      v32 = v31;
    else
      v32 = 2147500000.0;
    v33 = floorf(v17);
    v34 = -2147500000.0;
    if (v33 > -2147500000.0)
      v34 = (float)(int)v33;
    if (v33 < 2147500000.0)
      v35 = v34;
    else
      v35 = 2147500000.0;
    v36 = v17 + v29;
    v37 = ceilf(v8 + v28);
    v38 = 2147500000.0;
    if (v37 < 2147500000.0)
    {
      v38 = -2147500000.0;
      if (v37 > -2147500000.0)
        v38 = (float)(int)v37;
    }
    v39 = ceilf(v36);
    v40 = 2147500000.0;
    if (v39 < 2147500000.0)
    {
      v40 = -2147500000.0;
      if (v39 > -2147500000.0)
        v40 = (float)(int)v39;
    }
    if (v32 >= 2147500000.0)
    {
      v41 = 0x7FFFFFFFLL;
    }
    else if (v32 <= -2147500000.0)
    {
      v41 = 0x80000000;
    }
    else
    {
      v41 = (int)v32;
    }
    if (v35 >= 2147500000.0)
    {
      v42 = 0x7FFFFFFF00000000;
    }
    else if (v35 <= -2147500000.0)
    {
      v42 = 0x8000000000000000;
    }
    else
    {
      v42 = (unint64_t)(int)v35 << 32;
    }
    v43 = v38 - v32;
    v44 = v40 - v35;
    if (v43 >= 2147500000.0)
    {
      v45 = 0x7FFFFFFFLL;
    }
    else if (v43 <= -2147500000.0)
    {
      v45 = 0x80000000;
    }
    else
    {
      v45 = (int)v43;
    }
    if (v44 >= 2147500000.0)
    {
      v46 = 0x7FFFFFFF00000000;
    }
    else if (v44 <= -2147500000.0)
    {
      v46 = 0x8000000000000000;
    }
    else
    {
      v46 = (unint64_t)(int)v44 << 32;
    }
    v2 = v42 | v41;
    v3 = v46 | v45;
    *((_BYTE *)this + 80) = 1;
  }
  v47 = a2;
  v48 = 0xFFFFFFFF00000000;
  if (*((_BYTE *)this + 57))
  {
    v48 = 0xFFFFFFFFLL;
    v47 = a2 << 32;
  }
  result = (float)(int)v2;
  v50 = v3 & v48 | v47;
  v51 = (float)(int)v2 + (float)(int)v50;
  *(float *)this = (float)(int)v2;
  *((float *)this + 1) = (float)SHIDWORD(v2);
  v52 = (float)SHIDWORD(v2) + (float)SHIDWORD(v50);
  *((float *)this + 2) = v51;
  *((float *)this + 3) = (float)SHIDWORD(v2);
  *((float *)this + 4) = v51;
  *((float *)this + 5) = v52;
  *((float *)this + 6) = (float)(int)v2;
  *((float *)this + 7) = v52;
  *((_QWORD *)this + 8) = v2;
  *((_QWORD *)this + 9) = v50;
  return result;
}

uint64_t WebCore::SelectionGeometry::setQuad(uint64_t this, const WebCore::FloatQuad *a2)
{
  __int128 v2;

  v2 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *(_OWORD *)(this + 16) = v2;
  if (*(_BYTE *)(this + 80))
    *(_BYTE *)(this + 80) = 0;
  return this;
}

WTF::TextStream *WebCore::operator<<(WTF::TextStream *a1, _BYTE *a2)
{
  uint64_t v4;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v4 = WTF::TextStream::operator<<();
  WebCore::operator<<(v4);
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  if (a2[52])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[53])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[54])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[55])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[56])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[57])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[58])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[32])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::endGroup(a1);
  return a1;
}

uint64_t WebCore::systemMemoryLevel(WebCore *this)
{
  double v1;
  size_t v3;

  WTF::WallTime::now(this);
  if (v1 - *(double *)&WebCore::systemMemoryLevel(void)::previousCheckTime >= 0.1)
  {
    WebCore::systemMemoryLevel(void)::previousCheckTime = *(_QWORD *)&v1;
    v3 = 4;
    sysctlbyname("kern.memorystatus_level", &WebCore::systemMemoryLevel(void)::memoryFreeLevel, &v3, 0, 0);
  }
  return WebCore::systemMemoryLevel(void)::memoryFreeLevel;
}

uint64_t WebCore::TileControllerMemoryHandler::tileControllerGainedUnparentedTiles(WebCore::TileControllerMemoryHandler *this, WebCore::TileController *a2)
{
  WTF::MemoryPressureHandler *v3;
  int v4;
  uint64_t result;
  int v6;
  void *v8;
  int v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[3];
  WebCore::TileController *v20;

  v20 = a2;
  if (a2)
    ++*((_DWORD *)a2 + 2);
  v3 = (WTF::MemoryPressureHandler *)WTF::ListHashSet<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>>>::appendOrMoveToLast((uint64_t *)this, (uint64_t *)&v20, (uint64_t)v19);
  if (v20)
  {
    v4 = *((_DWORD *)v20 + 2);
    if (!v4)
    {
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x19627B150);
    }
    *((_DWORD *)v20 + 2) = v4 - 1;
  }
  result = WTF::MemoryPressureHandler::singleton(v3);
  v6 = atomic_load((unsigned __int8 *)(result + 4));
  if (v6 != 2 && *(_BYTE *)(result + 7) == 0)
  {
    v10 = (_QWORD *)*((_QWORD *)this + 1);
    if (v10)
    {
      v11 = 0;
      do
      {
        v12 = *(_QWORD *)(*v10 + 48);
        v13 = *(_QWORD *)(v12 + 72);
        v14 = *(_QWORD *)(v12 + 80);
        if (v13 > v14)
          LODWORD(v14) = v14 + *(_DWORD *)(v12 + 96);
        v15 = v14 - v13;
        v16 = *(_QWORD *)(*v10 + 56);
        if (v16)
        {
          v17 = *(_QWORD *)(v16 + 72);
          v18 = *(_QWORD *)(v16 + 80);
          if (v17 > v18)
            LODWORD(v18) = v18 + *(_DWORD *)(v16 + 96);
          v15 += v18 - v17;
        }
        v11 += v15;
        v10 = (_QWORD *)v10[2];
      }
      while (v10);
      if (v11 >= 0x10)
        return WebCore::TileControllerMemoryHandler::trimUnparentedTilesToTarget((uint64_t)this, 16);
    }
  }
  else
  {
    while (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this - 12))
    {
      WebCore::TileController::removeUnparentedTilesNow(**((WTF ***)this + 1));
      result = WTF::ListHashSet<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>>>::takeFirst((uint64_t)this, v8, v19);
      if (v19[0])
      {
        v9 = *(_DWORD *)(v19[0] + 8);
        if (!v9)
          goto LABEL_27;
        *(_DWORD *)(v19[0] + 8) = v9 - 1;
      }
    }
  }
  return result;
}

_QWORD *WTF::ListHashSet<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>>>::appendOrMoveToLast@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(a1, 8u, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = ~(*a2 << 32) + *a2;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v7;
    v15 = (_QWORD *)(v6 + 8 * v14);
    result = (_QWORD *)*v15;
    if (*v15 != -1)
      break;
    v8 = (_QWORD *)(v6 + 8 * v14);
LABEL_10:
    v12 = i + v14;
  }
  if (!result)
  {
    if (v8)
    {
      *v8 = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v8;
    }
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v17 = *a2;
    *a2 = 0;
    result[1] = 0;
    result[2] = 0;
    *result = v17;
    *v15 = result;
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_32;
    }
    else if (3 * v25 <= 4 * v24)
    {
      if (!(_DWORD)v25)
      {
        v26 = 8;
LABEL_33:
        v15 = WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(a1, v26, (_QWORD **)v15);
        result = (_QWORD *)*v15;
        goto LABEL_34;
      }
LABEL_32:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
      goto LABEL_33;
    }
LABEL_34:
    v27 = 1;
    goto LABEL_35;
  }
  if (*result != *a2)
    goto LABEL_10;
  v20 = result[1];
  v21 = result[2];
  if (v20)
  {
    *(_QWORD *)(v20 + 16) = v21;
    v21 = result[2];
  }
  else
  {
    a1[1] = v21;
  }
  v27 = 0;
  if (v21)
    v28 = (_QWORD *)(v21 + 8);
  else
    v28 = a1 + 2;
  *v28 = v20;
LABEL_35:
  v29 = a1[2];
  result[1] = v29;
  result[2] = 0;
  if (v29)
    v30 = (_QWORD *)(v29 + 16);
  else
    v30 = a1 + 1;
  *v30 = result;
  a1[2] = (uint64_t)result;
  v31 = (_QWORD *)*v15;
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v31;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

uint64_t WebCore::TileControllerMemoryHandler::trimUnparentedTilesToTarget(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  int v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = this;
    if (a2 <= 0)
    {
      while (*(_DWORD *)(v2 - 12))
      {
        WebCore::TileController::removeUnparentedTilesNow(**(WTF ***)(v4 + 8));
        this = WTF::ListHashSet<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>>>::takeFirst(v4, v16, &v18);
        if (v18)
        {
          v17 = *(_DWORD *)(v18 + 8);
          if (!v17)
          {
LABEL_27:
            this = 286;
            __break(0xC471u);
            return this;
          }
          *(_DWORD *)(v18 + 8) = v17 - 1;
        }
        v2 = *(_QWORD *)v4;
        if (!*(_QWORD *)v4)
          return this;
      }
    }
    else
    {
      do
      {
        if (!*(_DWORD *)(v2 - 12))
          break;
        WebCore::TileController::removeUnparentedTilesNow(**(WTF ***)(v4 + 8));
        this = WTF::ListHashSet<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>>>::takeFirst(v4, v5, &v18);
        if (v18)
        {
          v6 = *(_DWORD *)(v18 + 8);
          if (!v6)
            goto LABEL_27;
          *(_DWORD *)(v18 + 8) = v6 - 1;
        }
        v7 = *(_QWORD **)(v4 + 8);
        if (v7)
        {
          v8 = 0;
          do
          {
            v9 = *(_QWORD *)(*v7 + 48);
            v10 = *(_QWORD *)(v9 + 72);
            v11 = *(_QWORD *)(v9 + 80);
            if (v10 > v11)
              LODWORD(v11) = v11 + *(_DWORD *)(v9 + 96);
            v12 = v11 - v10;
            v13 = *(_QWORD *)(*v7 + 56);
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 72);
              v15 = *(_QWORD *)(v13 + 80);
              if (v14 > v15)
                LODWORD(v15) = v15 + *(_DWORD *)(v13 + 96);
              v12 += v15 - v14;
            }
            v8 += v12;
            v7 = (_QWORD *)v7[2];
          }
          while (v7);
        }
        else
        {
          v8 = 0;
        }
        if (v8 < a2)
          break;
        v2 = *(_QWORD *)v4;
      }
      while (*(_QWORD *)v4);
    }
  }
  return this;
}

uint64_t *WebCore::tileControllerMemoryHandler(WebCore *this)
{
  {
    WebCore::tileControllerMemoryHandler(void)::staticTileControllerMemoryHandler = 0;
    qword_1EE2F8D30 = 0;
    qword_1EE2F8D38 = 0;
  }
  return &WebCore::tileControllerMemoryHandler(void)::staticTileControllerMemoryHandler;
}

uint64_t WTF::ListHashSet<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>>>::remove(uint64_t *a1, void *a2, WTF *this)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t result;

  if (!this)
    return this != 0;
  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ~(*(_QWORD *)this << 32) + *(_QWORD *)this;
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
    for (i = 1; ; ++i)
    {
      v12 = v10;
      v13 = *(_QWORD **)(v5 + 8 * v10);
      if (v13 != (_QWORD *)-1)
      {
        if (!v13)
          goto LABEL_19;
        if (*v13 == *(_QWORD *)this)
          break;
      }
      v10 = (v12 + i) & v6;
    }
    if (*(_DWORD *)(v5 - 4) != (_DWORD)v12)
    {
      *(_QWORD *)(v5 + 8 * v12) = -1;
      ++*(_DWORD *)(*a1 - 16);
      v14 = *a1;
      v15 = *a1 ? *(_DWORD *)(v14 - 12) - 1 : -1;
      *(_DWORD *)(v14 - 12) = v15;
      v16 = *a1;
      if (*a1)
      {
        v17 = 6 * *(_DWORD *)(v16 - 12);
        v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9)
          WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(a1, v18 >> 1, 0);
      }
    }
  }
LABEL_19:
  v20 = *((_QWORD *)this + 1);
  v21 = *((_QWORD *)this + 2);
  if (v20)
  {
    *(_QWORD *)(v20 + 16) = v21;
    v21 = *((_QWORD *)this + 2);
  }
  else
  {
    a1[1] = v21;
  }
  if (v21)
    v22 = (_QWORD *)(v21 + 8);
  else
    v22 = a1 + 2;
  *v22 = v20;
  v23 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
LABEL_28:
    WTF::fastFree(this, a2);
    return this != 0;
  }
  v24 = *(_DWORD *)(v23 + 8);
  if (v24)
  {
    *(_DWORD *)(v23 + 8) = v24 - 1;
    goto LABEL_28;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WTF::ListHashSet<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>>>::takeFirst@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t result;

  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)a1 - 8);
  v6 = **(_QWORD **)(a1 + 8);
  v7 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v5 & ((v9 >> 31) ^ v9);
  for (i = 1; ; ++i)
  {
    v12 = v10;
    v13 = *(uint64_t **)(v4 + 8 * v10);
    if (v13 == (uint64_t *)-1)
      goto LABEL_5;
    if (!v13)
      break;
    if (*v13 == v6)
      goto LABEL_7;
LABEL_5:
    v10 = (v12 + i) & v5;
  }
  v12 = *(unsigned int *)(v4 - 4);
  v13 = *(uint64_t **)(v4 + 8 * v12);
  v6 = *v13;
LABEL_7:
  v14 = (_QWORD *)(v4 + 8 * v12);
  *v13 = 0;
  *a3 = v6;
  if (!*(_QWORD *)a1 || (_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(*(_QWORD *)a1 - 4)) != v14)
  {
    *v14 = -1;
    ++*(_DWORD *)(*(_QWORD *)a1 - 16);
    v15 = *(_QWORD *)a1;
    v16 = *(_QWORD *)a1 ? *(_DWORD *)(v15 - 12) - 1 : -1;
    *(_DWORD *)(v15 - 12) = v16;
    v17 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v18 = 6 * *(_DWORD *)(v17 - 12);
      v19 = *(_DWORD *)(v17 - 4);
      if (v18 < v19 && v19 >= 9)
        WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash((uint64_t *)a1, v19 >> 1, 0);
    }
  }
  v21 = *(WTF **)(a1 + 8);
  v22 = *((_QWORD *)v21 + 1);
  v23 = *((_QWORD *)v21 + 2);
  if (v22)
  {
    *(_QWORD *)(v22 + 16) = v23;
    v23 = *((_QWORD *)v21 + 2);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v23;
  }
  if (v23)
    v24 = (_QWORD *)(v23 + 8);
  else
    v24 = (_QWORD *)(a1 + 16);
  *v24 = v22;
  v25 = *(_QWORD *)v21;
  if (!*(_QWORD *)v21)
    return WTF::fastFree(v21, a2);
  v26 = *(_DWORD *)(v25 + 8);
  if (v26)
  {
    *(_DWORD *)(v25 + 8) = v26 - 1;
    return WTF::fastFree(v21, a2);
  }
  result = 286;
  __break(0xC471u);
  return result;
}

void WebThreadRun(void (**a1)(_QWORD))
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  void **v9;
  const void *v10;
  void **v11;
  int v12;
  __CFRunLoopSource *v13;
  __CFRunLoop *Current;
  void *aBlock[2];

  if (webThreadStarted != 1
    || (v2 = (_opaque_pthread_t *)webThread, v3 = pthread_self(), pthread_equal(v2, v3))
    || (webThreadStarted & 1) == 0)
  {
    a1[2](a1);
    return;
  }
  if (__ldaxr(runQueueMutex))
  {
    __clrex();
  }
  else if (!__stxr(1u, runQueueMutex))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](runQueueMutex);
LABEL_9:
  v5 = runQueue;
  v6 = _Block_copy(a1);
  aBlock[0] = v6;
  aBlock[1] = 0;
  v7 = *(unsigned int *)(v5 + 12);
  if ((_DWORD)v7 == *(_DWORD *)(v5 + 8))
  {
    v9 = (void **)(*(_QWORD *)v5 + 16 * *(unsigned int *)(v5 + 12));
    *v9 = _Block_copy(*(const void **)v8);
    v9[1] = *(void **)(v8 + 8);
    v10 = aBlock[0];
  }
  else
  {
    v10 = v6;
    v11 = (void **)(*(_QWORD *)v5 + 16 * v7);
    *v11 = _Block_copy(v6);
    v11[1] = 0;
  }
  ++*(_DWORD *)(v5 + 12);
  _Block_release(v10);
  v12 = __ldxr(runQueueMutex);
  if (v12 == 1)
  {
    if (!__stlxr(0, runQueueMutex))
      goto LABEL_17;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)runQueueMutex);
LABEL_17:
  {
    v13 = (__CFRunLoopSource *)runSource(void)::runSource;
  }
  else
  {
    v13 = 0;
    runSource(void)::runSource = 0;
  }
  CFRunLoopSourceSignal(v13);
  if (webThreadStarted == 1)
    Current = (__CFRunLoop *)webThreadRunLoop;
  else
    Current = CFRunLoopGetCurrent();
  CFRunLoopWakeUp(Current);
}

void HandleRunSource(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  uint64_t v16;
  const void *v17;
  WTF *v18;
  int v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  unsigned __int8 *v23;
  unsigned __int8 v25;
  int v26;
  uint64_t v27;
  const void **v28;
  const void *v29;
  _QWORD v30[2];
  char v31;
  _QWORD v32[3];

  if (__ldaxr(runQueueMutex))
  {
    __clrex();
  }
  else if (!__stxr(1u, runQueueMutex))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](runQueueMutex);
LABEL_5:
  v3 = runQueue;
  v4 = *(unsigned int *)(runQueue + 12);
  if (!(_DWORD)v4)
  {
    v5 = 0;
LABEL_12:
    v12 = 0;
    goto LABEL_13;
  }
  if (v4 >> 28)
  {
    __break(0xC471u);
    return;
  }
  v5 = (WTF *)WTF::fastMalloc((WTF *)(16 * v4));
  v6 = *(unsigned int *)(v3 + 12);
  if (!(_DWORD)v6)
    goto LABEL_12;
  v7 = 0;
  v8 = *(_QWORD *)v3;
  v9 = *(_QWORD *)v3 + 16 * v6;
  do
  {
    v10 = (void **)((char *)v5 + v7);
    v11 = v8 + v7;
    *v10 = _Block_copy(*(const void **)(v8 + v7));
    v10[1] = *(void **)(v8 + v7 + 8);
    v7 += 16;
  }
  while (v11 + 16 != v9);
  v12 = *(_DWORD *)(v3 + 12);
LABEL_13:
  v13 = runQueue;
  if (*(_DWORD *)(runQueue + 8))
  {
    v14 = *(unsigned int *)(runQueue + 12);
    if ((_DWORD)v14)
    {
      v15 = *(const void ***)runQueue;
      v16 = 16 * v14;
      do
      {
        v17 = *v15;
        v15 += 2;
        _Block_release(v17);
        v16 -= 16;
      }
      while (v16);
      *(_DWORD *)(v13 + 12) = 0;
    }
    v18 = *(WTF **)v13;
    if (*(_QWORD *)v13)
    {
      *(_QWORD *)v13 = 0;
      *(_DWORD *)(v13 + 8) = 0;
      WTF::fastFree(v18, a2);
    }
  }
  v19 = __ldxr(runQueueMutex);
  if (v19 != 1)
  {
    __clrex();
LABEL_25:
    WTF::Lock::unlockSlow((WTF::Lock *)runQueueMutex);
    if (!v12)
      goto LABEL_42;
    goto LABEL_26;
  }
  if (__stlxr(0, runQueueMutex))
    goto LABEL_25;
  if (!v12)
    goto LABEL_42;
LABEL_26:
  v20 = v12;
  v21 = (WTF *)((char *)v5 + 16 * v12);
  v22 = v5;
  do
  {
    (*(void (**)(void))(*(_QWORD *)v22 + 16))();
    v23 = (unsigned __int8 *)*((_QWORD *)v22 + 1);
    if (!v23)
      goto LABEL_39;
    if (__ldaxr(v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, v23))
    {
      goto LABEL_32;
    }
    MEMORY[0x19AEA534C](v23);
LABEL_32:
    v23[2] = 1;
    v25 = atomic_load(v23 + 1);
    if ((v25 & 1) != 0)
    {
      v31 = 0;
      v30[0] = v23 + 1;
      v30[1] = &v31;
      v32[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
      v32[1] = v32;
      v32[2] = v30;
      WTF::ParkingLot::unparkOneImpl();
    }
    v26 = __ldxr(v23);
    if (v26 != 1)
    {
      __clrex();
LABEL_38:
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
      goto LABEL_39;
    }
    if (__stlxr(0, v23))
      goto LABEL_38;
LABEL_39:
    v22 = (WTF *)((char *)v22 + 16);
  }
  while (v22 != v21);
  v27 = 16 * v20;
  v28 = (const void **)v5;
  do
  {
    v29 = *v28;
    v28 += 2;
    _Block_release(v29);
    v27 -= 16;
  }
  while (v27);
LABEL_42:
  if (v5)
    WTF::fastFree(v5, a2);
}

uint64_t WebCore::LibWebRTCVPXVideoDecoder::create(int a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;

  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E34172F8;
  v11 = WTF::fastMalloc((WTF *)0x70);
  WebCore::LibWebRTCVPXInternalVideoDecoder::LibWebRTCVPXInternalVideoDecoder(v11, a1, a2, a4, a5);
  v10[1] = v12;
  {
    v13 = WebCore::vpxDecoderQueue(void)::queue;
  }
  else
  {
    WTF::WorkQueue::create();
    v13 = v17;
    WebCore::vpxDecoderQueue(void)::queue = v17;
  }
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v15 = &off_1E3417448;
  v15[1] = v14;
  v15[2] = v10;
  v17 = (uint64_t)v15;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 32))(v13, &v17);
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::LibWebRTCVPXVideoDecoder::~LibWebRTCVPXVideoDecoder(WebCore::LibWebRTCVPXVideoDecoder *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34172F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
}

void WebCore::LibWebRTCVPXVideoDecoder::~LibWebRTCVPXVideoDecoder(WebCore::LibWebRTCVPXVideoDecoder *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34172F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::LibWebRTCVPXVideoDecoder::decode(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _BYTE v22[7];
  uint64_t v23;

  v5 = result;
  {
    v6 = WebCore::vpxDecoderQueue(void)::queue;
  }
  else
  {
    result = WTF::WorkQueue::create();
    v6 = v19;
    WebCore::vpxDecoderQueue(void)::queue = v19;
  }
  v7 = a2[1];
  if (v7)
  {
    if (HIDWORD(v7))
    {
      __break(0xC471u);
      return result;
    }
    v8 = *a2;
    v9 = WTF::fastMalloc((WTF *)a2[1]);
    v10 = v9;
    for (i = 0; i != v7; ++i)
      *(_BYTE *)(v9 + i) = *(_BYTE *)(v8 + i);
  }
  else
  {
    v10 = 0;
  }
  v12 = *((_BYTE *)a2 + 16);
  v13 = a2[3];
  v20 = a2[4];
  v21 = *((_BYTE *)a2 + 40);
  v14 = *(_QWORD *)(v5 + 8);
  v15 = (unsigned int *)(v14 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = *a3;
  *a3 = 0;
  v18 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v18 = &off_1E34174A8;
  *(_QWORD *)(v18 + 8) = v10;
  *(_DWORD *)(v18 + 16) = v7;
  *(_DWORD *)(v18 + 20) = v7;
  *(_BYTE *)(v18 + 24) = v12;
  *(_DWORD *)(v18 + 25) = *(_DWORD *)v22;
  *(_DWORD *)(v18 + 28) = *(_DWORD *)&v22[3];
  *(_BYTE *)(v18 + 48) = v21;
  *(_QWORD *)(v18 + 32) = v13;
  *(_QWORD *)(v18 + 40) = v20;
  *(_QWORD *)(v18 + 56) = v14;
  *(_QWORD *)(v18 + 64) = v17;
  v23 = v18;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 32))(v6, &v23);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::LibWebRTCVPXVideoDecoder::flush(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  {
    v2 = WebCore::vpxDecoderQueue(void)::queue;
  }
  else
  {
    v10 = a1;
    v9 = a2;
    WTF::WorkQueue::create();
    a2 = v9;
    a1 = v10;
    v2 = v11;
    WebCore::vpxDecoderQueue(void)::queue = v11;
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *a2;
  *a2 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34174D0;
  v7[1] = v3;
  v7[2] = v6;
  v11 = (uint64_t)v7;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 32))(v2, &v11);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::LibWebRTCVPXVideoDecoder::reset(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)(this + 8) + 64) = 1;
  return this;
}

uint64_t WebCore::LibWebRTCVPXVideoDecoder::close(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)(this + 8) + 64) = 1;
  return this;
}

void WebCore::LibWebRTCVPXInternalVideoDecoder::LibWebRTCVPXInternalVideoDecoder(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E3417338;
  v5 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 24) = v6;
  __asm { BR              X10 }
}

uint64_t sub_19627C1B0(webrtc::VP9Decoder *a1)
{
  uint64_t v1;
  uint64_t v2;
  webrtc::CpuInfo *v3;
  uint64_t v5;
  __int128 v6;

  webrtc::VP9Decoder::Create(a1);
  *(_QWORD *)(v1 + 32) = v5;
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 64) = 0;
  *(_BYTE *)(v1 + 65) = *(_DWORD *)(v2 + 36) == 0;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v1 + 68), (const WTF::MachSendRight *)(v2 + 40));
  *(_QWORD *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  v3 = (webrtc::CpuInfo *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 32) + 40))(*(_QWORD *)(v1 + 32), v1);
  LOBYTE(v5) = 0;
  BYTE4(v5) = 0;
  v6 = xmmword_19688B1A0;
  webrtc::CpuInfo::DetectNumberOfCores(v3);
  webrtc::VideoDecoder::Settings::set_number_of_cores((webrtc::VideoDecoder::Settings *)&v5);
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v1 + 32) + 16))(*(_QWORD *)(v1 + 32), &v5);
  return v1;
}

uint64_t WebCore::LibWebRTCVPXInternalVideoDecoder::Decoded(WebCore::LibWebRTCVPXInternalVideoDecoder *this, webrtc::VideoFrame *a2)
{
  unsigned int *v4;
  unsigned int v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;

  v4 = (unsigned int *)((char *)this + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v11 = WebCore::VideoFrameLibWebRTC::colorSpaceFromFrame(a2, a2);
  v12 = v6;
  webrtc::VideoFrame::video_frame_buffer(a2);
  v14 = *(_OWORD *)((char *)this + 40);
  v15 = *((_BYTE *)this + 56);
  v7 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v7 = &off_1E3417530;
  *(_QWORD *)(v7 + 8) = this;
  *(_QWORD *)(v7 + 16) = v11;
  *(_WORD *)(v7 + 24) = v12;
  *(_QWORD *)(v7 + 32) = v13;
  *(_OWORD *)(v7 + 40) = v14;
  *(_BYTE *)(v7 + 56) = v15;
  v16 = v7;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), &v16);
  v8 = v16;
  v16 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return 0;
}

uint64_t WebCore::LibWebRTCVPXVideoEncoder::create(int a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = off_1E3417370;
  v13 = WTF::fastMalloc((WTF *)0x88);
  WebCore::LibWebRTCVPXInternalVideoEncoder::LibWebRTCVPXInternalVideoEncoder(v13, a1, a5, a6);
  v12[1] = v14;
  v15 = WebCore::LibWebRTCVPXInternalVideoEncoder::initialize(v14, a1, a2);
  {
    v16 = WebCore::vpxEncoderQueue(void)::queue;
  }
  else
  {
    WTF::WorkQueue::create();
    v16 = v21;
    WebCore::vpxEncoderQueue(void)::queue = v21;
  }
  v17 = *a3;
  *a3 = 0;
  v18 = *a4;
  *a4 = 0;
  v19 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v19 = &off_1E34175E8;
  *(_QWORD *)(v19 + 8) = v17;
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = v12;
  *(_DWORD *)(v19 + 32) = v15;
  v21 = v19;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 32))(v16, &v21);
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::LibWebRTCVPXVideoEncoder::~LibWebRTCVPXVideoEncoder(WebCore::LibWebRTCVPXVideoEncoder *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3417370;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
}

void WebCore::LibWebRTCVPXVideoEncoder::~LibWebRTCVPXVideoEncoder(WebCore::LibWebRTCVPXVideoEncoder *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3417370;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::LibWebRTCVPXInternalVideoEncoder::initialize(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  webrtc::CpuInfo *v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[4];
  int v19;
  uint64_t v20;
  char v21;
  char v22;
  int v23;
  __int16 v24;
  __int16 v25;
  int v26;
  int v27;
  __int16 v28;

  v6 = *(_OWORD *)a3;
  v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 106) = *(_OWORD *)(a3 + 26);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  v8 = (webrtc::CpuInfo *)webrtc::VideoCodec::VideoCodec((webrtc::VideoCodec *)&v23);
  v9 = *(_QWORD *)(a3 + 8);
  v24 = *(_QWORD *)a3;
  v25 = v9;
  v26 = 100;
  v10 = *(unsigned __int8 *)(a3 + 41);
  if (*(_BYTE *)(a3 + 41))
  {
    if (v10 == 1)
    {
      v11 = 257;
    }
    else
    {
      if (v10 != 2)
        goto LABEL_9;
      v11 = 258;
    }
    *(_BYTE *)(a1 + 130) = 1;
  }
  else
  {
    v11 = 256;
  }
  v28 = v11;
LABEL_9:
  if ((a2 - 1) < 2)
  {
    v23 = 2;
    v8 = (webrtc::CpuInfo *)webrtc::VideoCodec::VP9((webrtc::VideoCodec *)&v23);
    *((_BYTE *)v8 + 10) = 1;
  }
  else if (a2 == 3)
  {
    v23 = 3;
    v27 = 56;
  }
  else
  {
    if (a2)
      goto LABEL_21;
    v23 = 1;
    if (v10 == 2)
    {
      v8 = (webrtc::CpuInfo *)webrtc::VideoCodec::VP8((webrtc::VideoCodec *)&v23);
      v12 = 3;
    }
    else if (v10 == 1)
    {
      v8 = (webrtc::CpuInfo *)webrtc::VideoCodec::VP8((webrtc::VideoCodec *)&v23);
      v12 = 2;
    }
    else
    {
      if (v10)
        goto LABEL_21;
      v8 = (webrtc::CpuInfo *)webrtc::VideoCodec::VP8((webrtc::VideoCodec *)&v23);
      v12 = 1;
    }
    *(_BYTE *)v8 = v12;
  }
LABEL_21:
  v13 = *(_QWORD *)(a1 + 32);
  v18[0] = 1;
  v19 = webrtc::CpuInfo::DetectNumberOfCores(v8);
  v20 = 1440;
  v21 = 0;
  v22 = 0;
  v14 = (*(uint64_t (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)v13 + 32))(v13, &v23, v18);
  if (!(_DWORD)v14)
  {
    *(_BYTE *)(a1 + 128) = 1;
    v15 = *(_QWORD *)(a1 + 32);
    WebCore::computeAllocation((webrtc::VideoBitrateAllocation *)&v17, a3);
    webrtc::VideoEncoder::RateControlParameters::RateControlParameters();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 64))(v15, v18);
    webrtc::VideoEncoder::RateControlParameters::~RateControlParameters((webrtc::VideoEncoder::RateControlParameters *)v18);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), a1);
  }
  return v14;
}

uint64_t WebCore::LibWebRTCVPXVideoEncoder::encode(uint64_t a1, uint64_t *a2, char a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  {
    v5 = WebCore::vpxEncoderQueue(void)::queue;
  }
  else
  {
    v15 = a1;
    v13 = a2;
    v14 = a4;
    WTF::WorkQueue::create();
    a2 = v13;
    a1 = v15;
    a4 = v14;
    v5 = v17;
    WebCore::vpxEncoderQueue(void)::queue = v17;
  }
  v6 = *a2;
  *a2 = 0;
  v17 = *(_OWORD *)(a2 + 1);
  v18 = *((_BYTE *)a2 + 24);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *a4;
  *a4 = 0;
  v11 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v11 = &off_1E3417648;
  *(_QWORD *)(v11 + 8) = v6;
  *(_BYTE *)(v11 + 32) = v18;
  *(_OWORD *)(v11 + 16) = v17;
  *(_BYTE *)(v11 + 40) = a3;
  *(_QWORD *)(v11 + 48) = v7;
  *(_QWORD *)(v11 + 56) = v10;
  v16 = v11;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 32))(v5, &v16);
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::LibWebRTCVPXVideoEncoder::flush(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  {
    v2 = WebCore::vpxEncoderQueue(void)::queue;
  }
  else
  {
    v10 = a1;
    v9 = a2;
    WTF::WorkQueue::create();
    a2 = v9;
    a1 = v10;
    v2 = v11;
    WebCore::vpxEncoderQueue(void)::queue = v11;
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *a2;
  *a2 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E3417670;
  v7[1] = v3;
  v7[2] = v6;
  v11 = (uint64_t)v7;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 32))(v2, &v11);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::LibWebRTCVPXVideoEncoder::reset(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)(this + 8) + 72) = 1;
  return this;
}

uint64_t WebCore::LibWebRTCVPXVideoEncoder::close(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)(this + 8) + 72) = 1;
  return this;
}

uint64_t WebCore::LibWebRTCVPXVideoEncoder::setRates(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  {
    v6 = WebCore::vpxEncoderQueue(void)::queue;
  }
  else
  {
    v15 = a1;
    v14 = a3;
    WTF::WorkQueue::create();
    a3 = v14;
    a1 = v15;
    v6 = v16;
    WebCore::vpxEncoderQueue(void)::queue = v16;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *a3;
  *a3 = 0;
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v11 = &off_1E3417698;
  *(_QWORD *)(v11 + 8) = v7;
  *(_QWORD *)(v11 + 16) = a2;
  *(double *)(v11 + 24) = a4;
  *(_QWORD *)(v11 + 32) = v10;
  v16 = v11;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 32))(v6, &v16);
  v12 = v16;
  v16 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return 1;
}

void WebCore::LibWebRTCVPXInternalVideoEncoder::LibWebRTCVPXInternalVideoEncoder(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34173B8;
  v4 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 24) = v5;
  __asm { BR              X10 }
}

uint64_t sub_19627CC00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD v37[16];

  memset(v37, 0, 40);
  webrtc::EnvironmentFactory::Create((webrtc::EnvironmentFactory *)v37);
  webrtc::CreateVp8Encoder();
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 - 24);
  *(_QWORD *)(v27 - 24) = 0;
  v28 = *(unsigned int **)(v27 - 64);
  if (v28)
  {
    v29 = v28 + 2;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
  }
  v32 = v37[0];
  if (v37[0])
  {
    v33 = (unsigned int *)(v37[0] + 8);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  *(_BYTE *)(v26 + 64) = 0;
  *(_BYTE *)(v26 + 72) = 0;
  *(_QWORD *)(v26 + 80) = 0;
  *(_QWORD *)(v26 + 88) = 0;
  *(_BYTE *)(v26 + 96) = 0;
  *(_QWORD *)(v26 + 104) = 0;
  *(_QWORD *)(v26 + 112) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  *(_QWORD *)(v26 + 48) = 0;
  *(_BYTE *)(v26 + 56) = 0;
  *(_WORD *)(v26 + 120) = 1;
  *(_WORD *)(v26 + 128) = 0;
  *(_BYTE *)(v26 + 130) = 0;
  return v26;
}

uint64_t WebCore::computeAllocation(webrtc::VideoBitrateAllocation *a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  result = webrtc::VideoBitrateAllocation::VideoBitrateAllocation(a1);
  v5 = *(unsigned __int8 *)(a2 + 41);
  if (v5 == 2)
  {
    webrtc::VideoBitrateAllocation::SetBitrate(a1);
    webrtc::VideoBitrateAllocation::SetBitrate(a1);
    return webrtc::VideoBitrateAllocation::SetBitrate(a1);
  }
  else
  {
    if (v5 == 1)
    {
      webrtc::VideoBitrateAllocation::SetBitrate(a1);
    }
    else if (*(_BYTE *)(a2 + 41))
    {
      return result;
    }
    return webrtc::VideoBitrateAllocation::SetBitrate(a1);
  }
}

uint64_t WebCore::LibWebRTCVPXInternalVideoEncoder::OnEncodedImage(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  int v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  BOOL v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[7];
  uint64_t v22;
  char v23;
  _BYTE v24[7];

  if (*(_BYTE *)(a1 + 130))
  {
    v4 = (*(_QWORD *)(a2 + 192) & 0xFF00000000) != 0;
    if ((*(_QWORD *)(a2 + 192) & 0xFF00000000) != 0)
      v5 = *(_QWORD *)(a2 + 192);
    else
      v5 = 0;
    if ((*(_QWORD *)(a2 + 192) & 0xFF00000000) != 0)
      v6 = *(_DWORD *)(a2 + 192) & 0xFFFFFF00;
    else
      v6 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  result = *(_QWORD *)(a2 + 136);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 144);
  if (v9)
  {
    if (HIDWORD(v9))
    {
      __break(0xC471u);
      return result;
    }
    v10 = WTF::fastMalloc(*(WTF **)(a2 + 144));
    v11 = v10;
    for (i = 0; i != v9; ++i)
      *(_BYTE *)(v10 + i) = *(_BYTE *)(v8 + i);
  }
  else
  {
    v11 = 0;
  }
  v13 = *(_DWORD *)(a2 + 24) == 3;
  v14 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(_BYTE *)(a1 + 64);
  v15 = (unsigned int *)(a1 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v17 = &off_1E34176E8;
  *(_QWORD *)(v17 + 8) = a1;
  *(_QWORD *)(v17 + 16) = v11;
  *(_DWORD *)(v17 + 24) = v9;
  *(_DWORD *)(v17 + 28) = v9;
  *(_BYTE *)(v17 + 32) = v13;
  *(_DWORD *)(v17 + 33) = *(_DWORD *)v24;
  *(_DWORD *)(v17 + 36) = *(_DWORD *)&v24[3];
  v18 = v22;
  *(_QWORD *)(v17 + 40) = v14;
  *(_QWORD *)(v17 + 48) = v18;
  *(_BYTE *)(v17 + 56) = v23;
  *(_DWORD *)(v17 + 57) = *(_DWORD *)v21;
  *(_DWORD *)(v17 + 60) = *(_DWORD *)&v21[3];
  *(_DWORD *)(v17 + 64) = v6 | v5;
  *(_BYTE *)(v17 + 68) = v4;
  v20 = v17;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), &v20);
  v19 = v20;
  v20 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return 0;
}

void WebCore::LibWebRTCVPXInternalVideoDecoder::~LibWebRTCVPXInternalVideoDecoder(WebCore::LibWebRTCVPXInternalVideoDecoder *this)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E3417338;
  v2 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    CFRelease(v2);
  WTF::MachSendRight::~MachSendRight((WebCore::LibWebRTCVPXInternalVideoDecoder *)((char *)this + 68));
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

{
  const void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E3417338;
  v2 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    CFRelease(v2);
  WTF::MachSendRight::~MachSendRight((WebCore::LibWebRTCVPXInternalVideoDecoder *)((char *)this + 68));
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::fastFree(this, v3);
}

void WebCore::LibWebRTCVPXInternalVideoEncoder::~LibWebRTCVPXInternalVideoEncoder(WebCore::LibWebRTCVPXInternalVideoEncoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E34173B8;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void WebCore::LibWebRTCVPXInternalVideoEncoder::~LibWebRTCVPXInternalVideoEncoder(WebCore::LibWebRTCVPXInternalVideoEncoder *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E34173B8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::fastFree(this, a2);
}

unint64_t WTF::Vector<`anonymous namespace'::WebThreadBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
  }
  else
  {
    v6 = a3 - v5;
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<`anonymous namespace'::WebThreadBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  WTF *v12;
  WTF *v13;
  const void *v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(WTF **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v11 = (_QWORD *)v9;
        v12 = (WTF *)((char *)v7 + 16 * v8);
        v13 = v7;
        do
        {
          *v11 = _Block_copy(*(const void **)v13);
          v14 = *(const void **)v13;
          v15 = *((_QWORD *)v13 + 1);
          v13 = (WTF *)((char *)v13 + 16);
          v11[1] = v15;
          _Block_release(v14);
          v11 += 2;
        }
        while (v13 != v12);
      }
      if (v7)
      {
        if (*(WTF **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10);
      }
    }
  }
}

uint64_t rtc::RefCountedObject<webrtc::WebKitEncodedImageBufferWrapper>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 24);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::WebKitEncodedImageBufferWrapper>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 6;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::WebKitEncodedImageBufferWrapper>::~RefCountedObject()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t webrtc::WebKitEncodedImageBufferWrapper::data(webrtc::WebKitEncodedImageBufferWrapper *this)
{
  return *((_QWORD *)this + 1);
}

{
  return *((_QWORD *)this + 1);
}

uint64_t webrtc::WebKitEncodedImageBufferWrapper::size(webrtc::WebKitEncodedImageBufferWrapper *this)
{
  return *((_QWORD *)this + 2);
}

BOOL rtc::RefCountedObject<webrtc::WebKitEncodedImageBufferWrapper>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 24));
  return v1 == 1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoDecoder::create(WebCore::LibWebRTCVPXVideoDecoder::Type,WebCore::VideoDecoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&)> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E3417448;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoDecoder::create(WebCore::LibWebRTCVPXVideoDecoder::Type,WebCore::VideoDecoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&)> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3417448;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoDecoder::create(WebCore::LibWebRTCVPXVideoDecoder::Type,WebCore::VideoDecoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&)> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v8 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E3417470;
  *(_OWORD *)(v4 + 8) = v8;
  v9 = v4;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24), &v9);
  result = v9;
  v9 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  do
  {
    v6 = __ldaxr(v2);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v2));
  if (!v7)
  {
    atomic_store(1u, (unsigned int *)(v1 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoDecoder::create(WebCore::LibWebRTCVPXVideoDecoder::Type,WebCore::VideoDecoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&)> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E3417470;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoDecoder::create(WebCore::LibWebRTCVPXVideoDecoder::Type,WebCore::VideoDecoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&)> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3417470;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoDecoder::create(WebCore::LibWebRTCVPXVideoDecoder::Type,WebCore::VideoDecoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&)> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  char v6;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v4 = v2;
  v5 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 16))(v1, &v4);
  if (v5 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E3417488[v5])(&v6, &v4);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoDecoder::decode(WebCore::VideoDecoder::EncodedFrame &&,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;

  *(_QWORD *)a1 = &off_1E34174A8;
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(WTF **)(a1 + 8);
  if (v8)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoDecoder::decode(WebCore::VideoDecoder::EncodedFrame &&,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;

  *(_QWORD *)this = &off_1E34174A8;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v8, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoDecoder::decode(WebCore::VideoDecoder::EncodedFrame &&,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _BYTE v22[24];
  int v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 20);
  v4 = *(unsigned __int8 *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v6 + 56) = v5;
  webrtc::EncodedImage::EncodedImage((webrtc::EncodedImage *)v22);
  v7 = operator new();
  *(_QWORD *)(v7 + 8) = v2;
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)v7 = off_1E34173E8;
  *(_DWORD *)(v7 + 24) = 0;
  v8 = (unsigned int *)(v7 + 24);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  do
    v10 = __ldxr(v8);
  while (__stxr(v10 + 1, v8));
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v24 = v7;
  v25 = v3;
  do
  {
    v11 = __ldaxr(v8);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v8));
  if (!v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  if (v4)
    v13 = 3;
  else
    v13 = 4;
  v23 = v13;
  v14 = (*(uint64_t (**)(_QWORD, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(v6 + 32) + 32))(*(_QWORD *)(v6 + 32), v22, 0, 0);
  v15 = (unsigned int *)(v6 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v18 = &off_1E34174F8;
  *(_QWORD *)(v18 + 8) = v6;
  *(_DWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = v17;
  v21 = v18;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v6 + 24) + 16))(*(_QWORD *)(v6 + 24), &v21);
  v19 = v21;
  v21 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return MEMORY[0x19AEA5AF0](v22);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoDecoder::flush(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34174D0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoDecoder::flush(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34174D0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoDecoder::flush(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), a1 + 16);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXInternalVideoDecoder::decode(std::span<unsigned char const,18446744073709551615ul>,BOOL,long long,std::optional<unsigned long long>,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34174F8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXInternalVideoDecoder::decode(std::span<unsigned char const,18446744073709551615ul>,BOOL,long long,std::optional<unsigned long long>,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34174F8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXInternalVideoDecoder::decode(std::span<unsigned char const,18446744073709551615ul>,BOOL,long long,std::optional<unsigned long long>,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _BYTE *v10;
  size_t v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  char v17;
  WTF::StringImpl *v18[4];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v1 + 64))
    return result;
  v2 = result;
  v3 = *((_DWORD *)result + 4);
  if (v3)
  {
    if ((v3 & 0x80000000) != 0)
    {
      v15 = -v3;
      v4 = 1;
      do
      {
        ++v4;
        v16 = v15 >= 0xA;
        v15 /= 0xAu;
      }
      while (v16);
    }
    else
    {
      v4 = 0;
      v5 = *((_DWORD *)result + 4);
      do
      {
        ++v4;
        v6 = v5 > 9;
        v5 /= 0xAu;
      }
      while (v6);
    }
    if (v4 < 0
      || (v7 = (v4 + 31), __OFADD__(v4, 31))
      || (result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v7 + 20)), (v8 = v18[0]) == 0))
    {
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)v18[0] = 2;
    *((_DWORD *)v8 + 1) = v7;
    *((_QWORD *)v8 + 1) = (char *)v8 + 20;
    *((_DWORD *)v8 + 4) = 4;
    qmemcpy((char *)v8 + 20, "VPx decoding failed with error ", 31);
    v9 = 0;
    if ((v3 & 0x80000000) != 0)
    {
      v13 = -v3;
      do
      {
        *((_BYTE *)&v18[1] + v9-- + 4) = (v13 % 0xA) | 0x30;
        v6 = v13 > 9;
        v13 /= 0xAu;
      }
      while (v6);
      v14 = v9 + 12;
      v10 = (char *)&v18[1] + v9 + 4;
      *v10 = 45;
      if (v9 + 14 <= 14)
      {
        if (v14 <= 12)
          v14 = 12;
        v11 = v14 - v9 - 11;
        goto LABEL_13;
      }
    }
    else
    {
      do
      {
        *((_BYTE *)&v18[1] + v9-- + 4) = (v3 % 0xA) | 0x30;
        v6 = v3 > 9;
        v3 /= 0xAu;
      }
      while (v6);
      if (v9 + 14 <= 13)
      {
        v10 = (char *)&v18[1] + v9 + 5;
        v11 = -v9;
LABEL_13:
        memcpy((char *)v8 + 51, v10, v11);
      }
    }
    v18[0] = v8;
    v19 = 1;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), v18);
    if (v19 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E3417510[v19])(&v17, v18);
  }
  v18[0] = 0;
  (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)v2 + 3) + 16))(*((_QWORD *)v2 + 3), v18);
  result = v18[0];
  v18[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12VideoDecoder12DecodedFrameEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12VideoDecoder12DecodedFrameEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXInternalVideoDecoder::Decoded(webrtc::VideoFrame &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3417530;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXInternalVideoDecoder::Decoded(webrtc::VideoFrame &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3417530;
  v3 = *((_QWORD *)this + 4);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXInternalVideoDecoder::Decoded(webrtc::VideoFrame &)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v1 + 64))
  {
    v2 = result;
    v3 = (unsigned int *)(v1 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = operator new(0x10uLL);
    *v5 = &off_1E3417558;
    v5[1] = v1;
    if (*(_BYTE *)(v2 + 24))
      v6 = *(_QWORD *)(v2 + 16);
    else
      v6 = 0x100010101000100;
    v7 = WTF::fastMalloc((WTF *)0x78);
    *(_DWORD *)(v7 + 8) = 1;
    *(_OWORD *)(v7 + 16) = xmmword_1969F8FB0;
    *(_BYTE *)(v7 + 32) = 0;
    *(_WORD *)(v7 + 34) = 0;
    *(_QWORD *)(v7 + 36) = v6;
    *(_QWORD *)v7 = off_1E341A6A0;
    v8 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v7 + 48) = v8;
    v9 = (float)(*(int (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 48) + 48))(*(_QWORD *)(v7 + 48));
    *(float *)(v7 + 56) = v9;
    *(float *)(v7 + 60) = (float)v10;
    *(_DWORD *)(v7 + 64) = 0;
    v19 = 0;
    *(_QWORD *)(v7 + 96) = v5;
    *(_QWORD *)(v7 + 104) = 0;
    *(_BYTE *)(v7 + 112) = 0;
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 48) + 32))(*(_QWORD *)(v7 + 48));
    if (v11 == 1)
    {
      v12 = 875704422;
    }
    else
    {
      if (v11 != 5)
        goto LABEL_12;
      v12 = 2019963440;
    }
    *(_DWORD *)(v7 + 64) = v12;
LABEL_12:
    v13 = v19;
    if (v19 == v18)
    {
      v14 = 4;
      v13 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_17;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_17:
    v15 = *(_QWORD *)(v2 + 8);
    LOBYTE(v19) = *(_BYTE *)(v2 + 56);
    v16 = *(_QWORD *)(v2 + 48);
    v18[1] = *(_QWORD *)(v2 + 40);
    v18[2] = v16;
    v18[0] = v7;
    v20 = 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(v15 + 16) + 16))(*(_QWORD *)(v15 + 16), v18);
    if (v20 != -1)
      return ((uint64_t (*)(char *, _QWORD *))off_1E3417510[v20])(&v17, v18);
  }
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvEUlRT_E_NS_9allocatorISA_EEFN3WTF9RetainPtrIP10__CVBufferEERNS4_16VideoFrameBufferEEED1Ev(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3417558;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvEUlRT_E_NS_9allocatorISA_EEFN3WTF9RetainPtrIP10__CVBufferEERNS4_16VideoFrameBufferEEED0Ev(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3417558;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvEUlRT_E_NS_9allocatorISA_EEFN3WTF9RetainPtrIP10__CVBufferEERNS4_16VideoFrameBufferEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3417558;
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvEUlRT_E_NS_9allocatorISA_EEFN3WTF9RetainPtrIP10__CVBufferEERNS4_16VideoFrameBufferEEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3417558;
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  a2[1] = v2;
  return result;
}

unsigned int *_ZNSt3__110__function6__funcIZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvEUlRT_E_NS_9allocatorISA_EEFN3WTF9RetainPtrIP10__CVBufferEERNS4_16VideoFrameBufferEEE7destroyEv(uint64_t a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvEUlRT_E_NS_9allocatorISA_EEFN3WTF9RetainPtrIP10__CVBufferEERNS4_16VideoFrameBufferEEE18destroy_deallocateEv(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)__p[1];
  __p[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  operator delete(__p);
}

_QWORD *_ZNSt3__110__function6__funcIZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvEUlRT_E_NS_9allocatorISA_EEFN3WTF9RetainPtrIP10__CVBufferEERNS4_16VideoFrameBufferEEEclESJ_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = operator new(0x10uLL);
  *v6 = &off_1E34175A0;
  v6[1] = v3;
  v10 = v6;
  *a2 = webrtc::createPixelBufferFromFrameBuffer();
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

_QWORD *_ZNSt3__110__function6__funcIZZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvENKUlRT_E_clINS4_16VideoFrameBufferEEEDaS9_EUlmmNS4_10BufferTypeEE_NS_9allocatorISF_EEFP10__CVBuffermmSE_EED1Ev(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34175A0;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvENKUlRT_E_clINS4_16VideoFrameBufferEEEDaS9_EUlmmNS4_10BufferTypeEE_NS_9allocatorISF_EEFP10__CVBuffermmSE_EED0Ev(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34175A0;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *_ZNKSt3__110__function6__funcIZZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvENKUlRT_E_clINS4_16VideoFrameBufferEEEDaS9_EUlmmNS4_10BufferTypeEE_NS_9allocatorISF_EEFP10__CVBuffermmSE_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E34175A0;
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvENKUlRT_E_clINS4_16VideoFrameBufferEEEDaS9_EUlmmNS4_10BufferTypeEE_NS_9allocatorISF_EEFP10__CVBuffermmSE_EE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E34175A0;
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  a2[1] = v2;
  return result;
}

unsigned int *_ZNSt3__110__function6__funcIZZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvENKUlRT_E_clINS4_16VideoFrameBufferEEEDaS9_EUlmmNS4_10BufferTypeEE_NS_9allocatorISF_EEFP10__CVBuffermmSE_EE7destroyEv(uint64_t a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvENKUlRT_E_clINS4_16VideoFrameBufferEEEDaS9_EUlmmNS4_10BufferTypeEE_NS_9allocatorISF_EEFP10__CVBuffermmSE_EE18destroy_deallocateEv(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)__p[1];
  __p[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  operator delete(__p);
}

WebCore *_ZNSt3__110__function6__funcIZZZN7WebCore32LibWebRTCVPXInternalVideoDecoder7DecodedERN6webrtc10VideoFrameEEN3__0clEvENKUlRT_E_clINS4_16VideoFrameBufferEEEDaS9_EUlmmNS4_10BufferTypeEE_NS_9allocatorISF_EEFP10__CVBuffermmSE_EEclEOmSM_OSE_(uint64_t a1, WebCore **a2, uint64_t *a3, __CVBuffer **a4)
{
  uint64_t v4;
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  const __CFAllocator *v10;
  uint64_t v11;
  NSObject *v12;
  const void *v13;
  int PixelBuffer;
  int v15;
  int *v16;
  int v17;
  uint64_t IOSurface;
  NSObject *v20;
  _QWORD *v21;
  WebCore *v22;
  uint8_t buf[4];
  int v24;
  uint8_t v25[8];
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v6 = *a3;
  if (*(_DWORD *)a4)
  {
    if (*(_DWORD *)a4 != 1)
      return 0;
    v7 = 2016686640;
  }
  else
  {
    v7 = 875704438;
  }
  v22 = 0;
  v8 = (unsigned __int8 *)(v4 + 80);
  if (__ldaxr((unsigned __int8 *)(v4 + 80)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v4 + 80);
LABEL_9:
  v10 = *(const __CFAllocator **)(v4 + 72);
  if (v10 && *(WebCore **)(v4 + 88) == v5 && *(_QWORD *)(v4 + 96) == v6 && *(_DWORD *)(v4 + 104) == (_DWORD)v7)
    goto LABEL_23;
  if (*(_BYTE *)(v4 + 65))
    WebCore::createIOSurfaceCVPixelBufferPool(v5, v6, v7, 0, 0, v25);
  else
    WebCore::createInMemoryCVPixelBufferPool(v5, v6, v7, 0, 0, v25);
  v11 = v26;
  if (v26)
  {
    v12 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR))
    {
      if ((_DWORD)v11 != 1)
      {
        v21 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
        return (WebCore *)WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::create(WebCore::LibWebRTCVPXVideoEncoder::Type,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void>::~CallableWrapper(v21);
      }
      *(_DWORD *)buf = 67109120;
      v24 = *(_DWORD *)v25;
      _os_log_error_impl(&dword_1940B8000, v12, OS_LOG_TYPE_ERROR, "LibWebRTCVPXInternalVideoDecoder failed creating buffer pool with error %d", buf, 8u);
    }
    else if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint8_t *, uint8_t *))off_1E3417428[v11])(buf, v25);
    }
    goto LABEL_26;
  }
  v10 = *(const __CFAllocator **)v25;
  v13 = *(const void **)(v4 + 72);
  *(_QWORD *)(v4 + 72) = *(_QWORD *)v25;
  if (v13)
  {
    CFRelease(v13);
    v10 = *(const __CFAllocator **)(v4 + 72);
  }
  *(_QWORD *)(v4 + 88) = v5;
  *(_QWORD *)(v4 + 96) = v6;
  *(_DWORD *)(v4 + 104) = v7;
  if (v10)
  {
LABEL_23:
    PixelBuffer = WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBuffer(0, v10, (__CVPixelBufferPool *)&v22, a4);
    goto LABEL_27;
  }
LABEL_26:
  PixelBuffer = -6660;
LABEL_27:
  v15 = __ldxr(v8);
  if (v15 == 1)
  {
    if (!__stlxr(0, v8))
    {
      if (PixelBuffer)
      {
LABEL_38:
        v20 = qword_1ECE7C4A0;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v25 = 67109120;
          *(_DWORD *)&v25[4] = PixelBuffer;
          _os_log_error_impl(&dword_1940B8000, v20, OS_LOG_TYPE_ERROR, "Failed creating a pixel buffer for converting a VPX frame with error %d", v25, 8u);
        }
        return 0;
      }
      goto LABEL_33;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 80));
  if (PixelBuffer)
    goto LABEL_38;
LABEL_33:
  if (!v22)
    goto LABEL_38;
  v17 = *(_DWORD *)(v4 + 68);
  v16 = (int *)(v4 + 68);
  if (v17)
  {
    IOSurface = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface(v22, v10);
    if (IOSurface)
      WebCore::IOSurface::setOwnershipIdentity(IOSurface, v16);
  }
  return v22;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::create(WebCore::LibWebRTCVPXVideoEncoder::Type,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34175E8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::create(WebCore::LibWebRTCVPXVideoEncoder::Type,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34175E8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::create(WebCore::LibWebRTCVPXVideoEncoder::Type,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = &off_1E3417610;
  *(_OWORD *)(v6 + 8) = v10;
  *(_QWORD *)(v6 + 24) = v4;
  *(_DWORD *)(v6 + 32) = v5;
  v11 = v6;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24), &v11);
  result = v11;
  v11 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  do
  {
    v8 = __ldaxr(v2);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v2));
  if (!v9)
  {
    atomic_store(1u, (unsigned int *)(v1 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::create(WebCore::LibWebRTCVPXVideoEncoder::Type,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E3417610;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::create(WebCore::LibWebRTCVPXVideoEncoder::Type,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E3417610;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::create(WebCore::LibWebRTCVPXVideoEncoder::Type,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _BYTE *v9;
  size_t v10;
  WTF::StringImpl *v11;
  void *v12;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  char v18;
  WTF::StringImpl *v19;
  int v20;
  _BYTE v21[60];
  WTF *v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v1 = result;
  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(result + 32);
  if (v2)
  {
    if ((v2 & 0x80000000) != 0)
    {
      v16 = -v2;
      v3 = 1;
      do
      {
        ++v3;
        v17 = v16 >= 0xA;
        v16 /= 0xAu;
      }
      while (v17);
    }
    else
    {
      v3 = 0;
      v4 = *(_DWORD *)(result + 32);
      do
      {
        ++v3;
        v5 = v4 > 9;
        v4 /= 0xAu;
      }
      while (v5);
    }
    if (v3 < 0
      || (v6 = (v3 + 46), __OFADD__(v3, 46))
      || (result = WTF::tryFastCompactMalloc((WTF *)(v6 + 20)), (v7 = v19) == 0))
    {
      __break(0xC471u);
      return result;
    }
    *(_OWORD *)((char *)v19 + 20) = *(_OWORD *)"VPx encoding initialization failed with error ";
    *(_DWORD *)v7 = 2;
    *((_DWORD *)v7 + 1) = v6;
    *((_QWORD *)v7 + 1) = (char *)v7 + 20;
    *((_DWORD *)v7 + 4) = 4;
    qmemcpy((char *)v7 + 36, "tialization failed with error ", 30);
    v8 = 0;
    if ((v2 & 0x80000000) != 0)
    {
      v14 = -v2;
      do
      {
        v21[v8--] = (v14 % 0xA) | 0x30;
        v5 = v14 > 9;
        v14 /= 0xAu;
      }
      while (v5);
      v15 = v8 + 12;
      v9 = (char *)&v19 + v8 + 12;
      *v9 = 45;
      if (v8 + 14 > 14)
        goto LABEL_13;
      if (v15 <= 12)
        v15 = 12;
      v10 = v15 - v8 - 11;
    }
    else
    {
      do
      {
        v21[v8--] = (v2 % 0xA) | 0x30;
        v5 = v2 > 9;
        v2 /= 0xAu;
      }
      while (v5);
      if (v8 + 14 > 13)
        goto LABEL_13;
      v9 = &v21[v8 + 1];
      v10 = -v8;
    }
    memcpy((char *)v7 + 66, v9, v10);
LABEL_13:
    v19 = v7;
    v20 = 1;
    result = (*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v1 + 8) + 16))(*(_QWORD *)(v1 + 8), &v19);
    if (v20 != -1)
      return ((uint64_t (*)(char *, WTF::StringImpl **))off_1E3417628[v20])(&v18, &v19);
    return result;
  }
  v11 = *(WTF::StringImpl **)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  v19 = v11;
  v20 = 0;
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), &v19);
  if (v20 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E3417628[v20])(&v18, &v19);
  v19 = 0;
  LOBYTE(v20) = 0;
  v21[4] = 0;
  v21[12] = 0;
  v21[20] = 0;
  v21[28] = 0;
  v21[36] = 0;
  v21[44] = 0;
  v21[52] = 0;
  LOBYTE(v22) = 0;
  v24 = 0;
  v26 = 1;
  v25 = 0x100010101000100;
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), &v19);
  if (v24)
  {
    v13 = v22;
    if (v22)
    {
      v22 = 0;
      v23 = 0;
      WTF::fastFree(v13, v12);
    }
  }
  result = (uint64_t)v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::encode(WebCore::VideoEncoder::RawFrame &&,BOOL,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *a1 = &off_1E3417648;
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::encode(WebCore::VideoEncoder::RawFrame &&,BOOL,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = &off_1E3417648;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::encode(WebCore::VideoEncoder::RawFrame &&,BOOL,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  webrtc *v8;
  __CVBuffer *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[27];
  uint64_t v28;
  void *v29;
  void *v30;
  _DWORD *v31;

  v1 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v1 + 128))
  {
    v3 = *(unsigned __int8 *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 16);
    if ((*(_QWORD *)(v1 + 48) + v4 < 0) ^ __OFADD__(*(_QWORD *)(v1 + 48), v4) | (*(_QWORD *)(v1 + 48) + v4 == 0))
      *(_QWORD *)(v1 + 48) = 1 - v4;
    *(_QWORD *)(v1 + 40) = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_BYTE *)(v1 + 64) = *(_BYTE *)(a1 + 32);
    *(_QWORD *)(v1 + 56) = v5;
    v6 = 3;
    if (!v3)
    {
      if (*(_BYTE *)(v1 + 129))
        v6 = 4;
      else
        v6 = 3;
    }
    v7 = operator new(4uLL);
    v29 = v7;
    *v7 = v6;
    v30 = v7 + 1;
    v31 = v7 + 1;
    v8 = (webrtc *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    webrtc::pixelBufferToFrame(v8, v9);
    v10 = *(_QWORD *)(v1 + 80);
    if (v10 != (*(int (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28)
      || (v11 = *(_QWORD *)(v1 + 88), v11 != (*(int (**)(uint64_t))(*(_QWORD *)v28 + 48))(v28)))
    {
      v12 = v28;
      v13 = *(unsigned int *)(v1 + 80);
      v14 = *(unsigned int *)(v1 + 88);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(v27, v12, 0, 0, v15, v16, v13, v14);
      v17 = v27[0];
      v27[0] = 0;
      v18 = v28;
      v28 = v17;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        if (v27[0])
          (*(void (**)(_QWORD))(*(_QWORD *)v27[0] + 8))(v27[0]);
      }
    }
    webrtc::VideoFrame::VideoFrame();
    v19 = (*(uint64_t (**)(_QWORD, _QWORD *, void **))(**(_QWORD **)(v1 + 32) + 56))(*(_QWORD *)(v1 + 32), v27, &v29);
    v20 = v19;
    if (!*(_BYTE *)(v1 + 129))
      *(_BYTE *)(v1 + 129) = v19 == 0;
    v21 = (unsigned int *)(v1 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    v23 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    v24 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v24 = &off_1E34176C0;
    *(_QWORD *)(v24 + 8) = v1;
    *(_DWORD *)(v24 + 16) = v20;
    *(_QWORD *)(v24 + 24) = v23;
    v26 = v24;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24), &v26);
    v25 = v26;
    v26 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    webrtc::VideoFrame::~VideoFrame((webrtc::VideoFrame *)v27);
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::flush(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3417670;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::flush(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3417670;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::flush(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), a1 + 16);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::setRates(unsigned long long,double,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3417698;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::setRates(unsigned long long,double,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3417698;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXVideoEncoder::setRates(unsigned long long,double,WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[360];

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  if (v2)
    *(_QWORD *)(v3 + 104) = v2;
  if (v4 != 0.0)
    *(double *)(v3 + 112) = v4;
  v5 = *(_QWORD *)(v3 + 32);
  WebCore::computeAllocation((webrtc::VideoBitrateAllocation *)&v7, v3 + 80);
  webrtc::VideoEncoder::RateControlParameters::RateControlParameters();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 64))(v5, v8);
  webrtc::VideoEncoder::RateControlParameters::~RateControlParameters((webrtc::VideoEncoder::RateControlParameters *)v8);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), a1 + 32);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXInternalVideoEncoder::encode(WebCore::VideoEncoder::RawFrame &&,BOOL,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34176C0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXInternalVideoEncoder::encode(WebCore::VideoEncoder::RawFrame &&,BOOL,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34176C0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXInternalVideoEncoder::encode(WebCore::VideoEncoder::RawFrame &&,BOOL,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  size_t v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  WTF::StringImpl *v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(result + 8) + 72))
    return result;
  v1 = result;
  v16 = 0;
  v2 = *(_DWORD *)(result + 16);
  if (v2)
  {
    if ((v2 & 0x80000000) != 0)
    {
      v14 = -v2;
      v3 = 1;
      do
      {
        ++v3;
        v15 = v14 >= 0xA;
        v14 /= 0xAu;
      }
      while (v15);
    }
    else
    {
      v3 = 0;
      v4 = *(_DWORD *)(result + 16);
      do
      {
        ++v3;
        v5 = v4 > 9;
        v4 /= 0xAu;
      }
      while (v5);
    }
    if (v3 < 0
      || (v6 = (v3 + 31), __OFADD__(v3, 31))
      || (result = WTF::tryFastCompactMalloc((WTF *)(v6 + 20)), (v7 = v17[0]) == 0))
    {
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)v17[0] = 2;
    *(_DWORD *)(v7 + 4) = v6;
    *(_QWORD *)(v7 + 8) = v7 + 20;
    *(_DWORD *)(v7 + 16) = 4;
    qmemcpy((void *)(v7 + 20), "VPx encoding failed with error ", 31);
    v8 = 0;
    if ((v2 & 0x80000000) != 0)
    {
      v12 = -v2;
      do
      {
        *((_BYTE *)&v17[1] + v8-- + 4) = (v12 % 0xA) | 0x30;
        v5 = v12 > 9;
        v12 /= 0xAu;
      }
      while (v5);
      v13 = v8 + 12;
      v9 = (char *)&v17[1] + v8 + 4;
      *v9 = 45;
      if (v8 + 14 > 14)
        goto LABEL_14;
      if (v13 <= 12)
        v13 = 12;
      v10 = v13 - v8 - 11;
    }
    else
    {
      do
      {
        *((_BYTE *)&v17[1] + v8-- + 4) = (v2 % 0xA) | 0x30;
        v5 = v2 > 9;
        v2 /= 0xAu;
      }
      while (v5);
      if (v8 + 14 > 13)
        goto LABEL_14;
      v9 = (char *)&v17[1] + v8 + 5;
      v10 = -v8;
    }
    memcpy((void *)(v7 + 51), v9, v10);
LABEL_14:
    v16 = (WTF::StringImpl *)v7;
  }
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24), &v16);
  result = (uint64_t)v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXInternalVideoEncoder::OnEncodedImage(webrtc::EncodedImage const&,webrtc::CodecSpecificInfo const*)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = &off_1E34176E8;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXInternalVideoEncoder::OnEncodedImage(webrtc::EncodedImage const&,webrtc::CodecSpecificInfo const*)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34176E8;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCVPXInternalVideoEncoder::OnEncodedImage(webrtc::EncodedImage const&,webrtc::CodecSpecificInfo const*)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v1 + 72))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), result + 16);
  return result;
}

uint64_t WebCore::MediaEngineConfigurationFactory::resetFactories(WebCore::MediaEngineConfigurationFactory *this)
{
  WebCore *v1;
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = (WebCore *)WebCore::defaultFactories((WebCore *)&v10);
  WebCore::factories(v1);
  if (HIDWORD(qword_1EE2F8D90))
  {
    v3 = 16 * HIDWORD(qword_1EE2F8D90);
    v4 = (uint64_t *)(WebCore::factories(void)::factories + 8);
    do
    {
      v5 = *v4;
      *v4 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v6 = *(v4 - 1);
      *(v4 - 1) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v4 += 2;
      v3 -= 16;
    }
    while (v3);
  }
  v7 = (WTF *)WebCore::factories(void)::factories;
  if (WebCore::factories(void)::factories)
  {
    WebCore::factories(void)::factories = 0;
    LODWORD(qword_1EE2F8D90) = 0;
    WTF::fastFree(v7, v2);
  }
  WebCore::factories(void)::factories = v10;
  v8 = v11;
  v10 = 0;
  v11 = 0;
  qword_1EE2F8D90 = v8;
  return WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v2);
}

void WebCore::MediaEngineConfigurationFactory::createDecodingConfiguration(WebCore *this, WTF::StringImpl *a2, double a3, double a4, float a5)
{
  if (WebCore::mockEnabled(void)::enabled == 1)
  {
    WebCore::MediaEngineConfigurationFactoryMock::createDecodingConfiguration((uint64_t)this, a2, a3, a4, a5);
  }
  else
  {
    WebCore::factories(this);
    WebCore::MediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0::operator()<WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)>,WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *>((WebCore *)WebCore::factories(void)::factories, (uint64_t)this, a2);
  }
}

void WebCore::MediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0::operator()<WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)>,WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *>(WebCore *a1, uint64_t a2, _QWORD *a3)
{
  WebCore::MediaConfiguration *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _BYTE v26[40];
  __int128 v27;
  _BYTE v28[34];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  WebCore::factories(a1);
  if ((WebCore *)(WebCore::factories(void)::factories + 16 * HIDWORD(qword_1EE2F8D90)) == a1 || !*(_QWORD *)a1)
  {
    LOWORD(v25) = 0;
    BYTE2(v25) = 0;
    BYTE8(v25) = 0;
    v26[32] = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      v19 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)&v25 + 1) = v19;
      v20 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)v26 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)&v26[16] = v20;
      v26[32] = 1;
    }
    LOBYTE(v27) = 0;
    v28[32] = 0;
    if (*(_BYTE *)(a2 + 96))
    {
      v21 = *(_OWORD *)(a2 + 48);
      v22 = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      v27 = v21;
      *(_OWORD *)v28 = v22;
      *(_OWORD *)&v28[10] = *(_OWORD *)(a2 + 74);
      v28[32] = 1;
    }
    v6 = (WebCore::MediaConfiguration *)((char *)&v25 + 8);
    LOBYTE(v29) = 0;
    LOBYTE(v31) = 0;
    if (*(_BYTE *)(a2 + 120))
    {
      v29 = *(_QWORD *)(a2 + 104);
      v23 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 112) = 0;
      v30 = v23;
      LOBYTE(v31) = 1;
    }
    LOBYTE(v32) = 0;
    LOBYTE(v34) = 0;
    if (*(_BYTE *)(a2 + 144))
    {
      v32 = *(_QWORD *)(a2 + 128);
      v24 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      v33 = v24;
      LOBYTE(v34) = 1;
    }
    v35 = *(_WORD *)(a2 + 152);
    (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 16))(*a3, &v25);
  }
  else
  {
    *((_QWORD *)&v25 + 1) = a1;
    v6 = (WebCore::MediaConfiguration *)v26;
    WebCore::MediaConfiguration::MediaConfiguration((uint64_t)v26, a2);
    v36 = *(_WORD *)(a2 + 152);
    v7 = *a3;
    *a3 = 0;
    v37 = v7;
    v8 = WTF::fastMalloc((WTF *)0xC0);
    *(_QWORD *)v8 = off_1E3417A50;
    *(_OWORD *)(v8 + 8) = v25;
    *(_BYTE *)(v8 + 24) = 0;
    *(_BYTE *)(v8 + 64) = 0;
    if ((_BYTE)v27)
    {
      v9 = *(_QWORD *)v26;
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v8 + 24) = v9;
      v10 = *(_OWORD *)&v26[24];
      *(_OWORD *)(v8 + 32) = *(_OWORD *)&v26[8];
      *(_OWORD *)(v8 + 48) = v10;
      *(_BYTE *)(v8 + 64) = 1;
    }
    *(_BYTE *)(v8 + 72) = 0;
    *(_BYTE *)(v8 + 120) = 0;
    if ((_BYTE)v29)
    {
      *(_QWORD *)(v8 + 72) = *((_QWORD *)&v27 + 1);
      v11 = *(_QWORD *)v28;
      *((_QWORD *)&v27 + 1) = 0;
      *(_QWORD *)v28 = 0;
      *(_QWORD *)(v8 + 80) = v11;
      v12 = *(_OWORD *)&v28[18];
      *(_OWORD *)(v8 + 88) = *(_OWORD *)&v28[8];
      *(_OWORD *)(v8 + 98) = v12;
      *(_BYTE *)(v8 + 120) = 1;
    }
    *(_BYTE *)(v8 + 128) = 0;
    *(_BYTE *)(v8 + 144) = 0;
    if ((_BYTE)v32)
    {
      *(_QWORD *)(v8 + 128) = v30;
      v13 = v31;
      v30 = 0;
      v31 = 0;
      *(_QWORD *)(v8 + 136) = v13;
      *(_BYTE *)(v8 + 144) = 1;
    }
    *(_BYTE *)(v8 + 152) = 0;
    *(_BYTE *)(v8 + 168) = 0;
    if ((_BYTE)v35)
    {
      *(_QWORD *)(v8 + 152) = v33;
      v14 = v34;
      v33 = 0;
      v34 = 0;
      *(_QWORD *)(v8 + 160) = v14;
      *(_BYTE *)(v8 + 168) = 1;
    }
    *(_WORD *)(v8 + 176) = v36;
    v15 = v37;
    v37 = 0;
    *(_QWORD *)(v8 + 184) = v15;
    v38 = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, a2, &v38);
    v17 = v38;
    v38 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v37;
    v37 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  WebCore::MediaConfiguration::~MediaConfiguration(v6, v16);
}

void WebCore::MediaEngineConfigurationFactory::createEncodingConfiguration(WebCore *this, WTF::StringImpl *a2, double a3, double a4, float a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _OWORD v13[10];
  uint64_t v14;

  if (WebCore::mockEnabled(void)::enabled == 1)
  {
    WebCore::MediaEngineConfigurationFactoryMock::createEncodingConfiguration((uint64_t)this, a2, a3, a4, a5);
  }
  else
  {
    v7 = WebCore::factories(this);
    v8 = WebCore::factories(void)::factories;
    WebCore::factories((WebCore *)v7);
    if (WebCore::factories(void)::factories + 16 * HIDWORD(qword_1EE2F8D90) == v8 || !*(_QWORD *)(v8 + 8))
    {
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2, v13);
      WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)((char *)v13 + 8), v12);
    }
    else
    {
      v9 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v10 = &off_1E3417A78;
      v10[2] = v8;
      v10[3] = v9;
      *(_QWORD *)&v13[0] = v10;
      (*(void (**)(_QWORD, WebCore *, _OWORD *))(**(_QWORD **)(v8 + 8) + 16))(*(_QWORD *)(v8 + 8), this, v13);
      v11 = *(_QWORD *)&v13[0];
      *(_QWORD *)&v13[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
}

void WebCore::MediaEngineConfigurationFactory::enableMock(WebCore::MediaEngineConfigurationFactory *this)
{
  WebCore::mockEnabled(void)::enabled = 1;
}

void WebCore::MediaEngineConfigurationFactory::disableMock(WebCore::MediaEngineConfigurationFactory *this)
{
  WebCore::mockEnabled(void)::enabled = 0;
}

uint64_t WebCore::MediaRecorderPrivate::selectTracks(WebCore::MediaRecorderPrivate *this, WebCore::MediaStreamPrivate *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3417B50;
  v3[1] = v10;
  if (*((_DWORD *)this + 19))
  {
    v4 = *((_QWORD *)this + 8);
    v5 = *((unsigned int *)this + 18);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      v7 = (_QWORD *)*((_QWORD *)this + 8);
      while (!*v7)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_6;
      }
    }
    else
    {
      v7 = (_QWORD *)*((_QWORD *)this + 8);
    }
    v9 = (_QWORD *)(v4 + 16 * v5);
LABEL_9:
    if (v7 != v9)
    {
      (*(void (**)(_QWORD *, _QWORD))(*v3 + 16))(v3, v7[1]);
      while (1)
      {
        v7 += 2;
        if (v7 == v9)
          break;
        if (*v7)
          goto LABEL_9;
      }
    }
  }
LABEL_6:
  (*(void (**)(_QWORD *))(*v3 + 8))(v3);
  return v10[0];
}

uint64_t WebCore::MediaRecorderPrivate::stop(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v18;
  _BYTE v20[24];
  uint64_t v21;
  _QWORD *v22;

  v4 = a1[3];
  if (!v4)
  {
    a1[3] = 0;
    goto LABEL_25;
  }
  v5 = (unsigned __int8 *)(v4 + 144);
  if (__ldaxr((unsigned __int8 *)(v4 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v4 + 144);
LABEL_7:
  WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v4 + 152), (uint64_t)a1);
  v7 = __ldxr(v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, v5))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 144));
LABEL_12:
  v8 = a1[3];
  a1[3] = 0;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 144))(v8);
    v9 = a1[3];
    if (v9)
    {
      v10 = (unsigned __int8 *)(v9 + 144);
      if (__ldaxr((unsigned __int8 *)(v9 + 144)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_18;
      }
      MEMORY[0x19AEA534C](v9 + 144);
LABEL_18:
      v22 = a1;
      (*(void (**)(_QWORD *))(*a1 + 32))(a1);
      WTF::HashTable<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>>::add((uint64_t *)(v9 + 152), (uint64_t *)&v22, (uint64_t)v20);
      if (v22)
        (*(void (**)(_QWORD *))(*v22 + 40))(v22);
      v12 = __ldxr(v10);
      if (v12 == 1)
      {
        if (!__stlxr(0, v10))
          goto LABEL_25;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v9 + 144));
    }
  }
LABEL_25:
  v13 = a1[4];
  if (!v13)
  {
    a1[4] = 0;
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2);
  }
  WebCore::RealtimeMediaSource::removeVideoFrameObserver(v13, (uint64_t)(a1 + 1));
  v14 = a1[4];
  a1[4] = 0;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 144))(v14);
    v15 = a1[4];
    if (v15)
    {
      v16 = (unsigned __int8 *)(v15 + 160);
      if (__ldaxr((unsigned __int8 *)(v15 + 160)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v16))
      {
LABEL_33:
        v21 = 0;
        v22 = a1 + 1;
        WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(v15 + 168), (uint64_t *)&v22, (uint64_t)v20);
        v18 = __ldxr(v16);
        if (v18 == 1)
        {
          if (!__stlxr(0, v16))
            return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2);
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v15 + 160));
        return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2);
      }
      MEMORY[0x19AEA534C](v15 + 160);
      goto LABEL_33;
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2);
}

uint64_t WebCore::MediaRecorderPrivate::pause(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v22;
  _BYTE v24[24];
  uint64_t v25;
  _QWORD *v26;

  v4 = a1[3];
  if (v4)
    (*(void (**)(_QWORD))(*(_QWORD *)v4 + 136))(a1[3]);
  v5 = a1[5];
  a1[5] = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
  v6 = a1[4];
  if (v6)
    (*(void (**)(_QWORD))(*(_QWORD *)v6 + 136))(a1[4]);
  v7 = a1[6];
  a1[6] = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7);
  v8 = a1[3];
  if (!v8)
  {
    a1[3] = 0;
    goto LABEL_33;
  }
  v9 = (unsigned __int8 *)(v8 + 144);
  if (__ldaxr((unsigned __int8 *)(v8 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v8 + 144);
LABEL_15:
  WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v8 + 152), (uint64_t)a1);
  v11 = __ldxr(v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_20;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v8 + 144));
LABEL_20:
  v12 = a1[3];
  a1[3] = 0;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 144))(v12);
    v13 = a1[3];
    if (v13)
    {
      v14 = (unsigned __int8 *)(v13 + 144);
      if (__ldaxr((unsigned __int8 *)(v13 + 144)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v14))
      {
        goto LABEL_26;
      }
      MEMORY[0x19AEA534C](v13 + 144);
LABEL_26:
      v26 = a1;
      (*(void (**)(_QWORD *))(*a1 + 32))(a1);
      WTF::HashTable<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>>::add((uint64_t *)(v13 + 152), (uint64_t *)&v26, (uint64_t)v24);
      if (v26)
        (*(void (**)(_QWORD *))(*v26 + 40))(v26);
      v16 = __ldxr(v14);
      if (v16 == 1)
      {
        if (!__stlxr(0, v14))
          goto LABEL_33;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v13 + 144));
    }
  }
LABEL_33:
  v17 = a1[4];
  if (!v17)
  {
    a1[4] = 0;
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 88))(a1, a2);
  }
  WebCore::RealtimeMediaSource::removeVideoFrameObserver(v17, (uint64_t)(a1 + 1));
  v18 = a1[4];
  a1[4] = 0;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 144))(v18);
    v19 = a1[4];
    if (v19)
    {
      v20 = (unsigned __int8 *)(v19 + 160);
      if (__ldaxr((unsigned __int8 *)(v19 + 160)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v20))
      {
LABEL_41:
        v25 = 0;
        v26 = a1 + 1;
        WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(v19 + 168), (uint64_t *)&v26, (uint64_t)v24);
        v22 = __ldxr(v20);
        if (v22 == 1)
        {
          if (!__stlxr(0, v20))
            return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 88))(a1, a2);
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v19 + 160));
        return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 88))(a1, a2);
      }
      MEMORY[0x19AEA534C](v19 + 160);
      goto LABEL_41;
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 88))(a1, a2);
}

uint64_t WebCore::MediaRecorderPrivate::resume(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v18;
  _BYTE v20[24];
  uint64_t v21;
  _QWORD *v22;

  v4 = a1[3];
  if (!v4)
  {
    v7 = a1[5];
    a1[5] = 0;
    a1[3] = v7;
    goto LABEL_14;
  }
  v5 = (unsigned __int8 *)(v4 + 144);
  if (__ldaxr((unsigned __int8 *)(v4 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v4 + 144);
LABEL_7:
  WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v4 + 152), (uint64_t)a1);
  v8 = __ldxr(v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v5))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 144));
  v9 = a1[3];
  v7 = a1[5];
  a1[5] = 0;
  a1[3] = v7;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 144))(v9);
    v7 = a1[3];
  }
LABEL_14:
  if (!v7)
    goto LABEL_26;
  v10 = (unsigned __int8 *)(v7 + 144);
  if (__ldaxr((unsigned __int8 *)(v7 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v7 + 144);
LABEL_19:
  v22 = a1;
  (*(void (**)(_QWORD *))(*a1 + 32))(a1);
  WTF::HashTable<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>>::add((uint64_t *)(v7 + 152), (uint64_t *)&v22, (uint64_t)v20);
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 40))(v22);
  v12 = __ldxr(v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, v10))
LABEL_25:
    WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 144));
LABEL_26:
  v13 = a1[4];
  if (v13)
  {
    WebCore::RealtimeMediaSource::removeVideoFrameObserver(v13, (uint64_t)(a1 + 1));
    v14 = a1[4];
    v15 = a1[6];
    a1[6] = 0;
    a1[4] = v15;
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 144))(v14);
      v15 = a1[4];
    }
    if (!v15)
      return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 96))(a1, a2);
  }
  else
  {
    v15 = a1[6];
    a1[6] = 0;
    a1[4] = v15;
    if (!v15)
      return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 96))(a1, a2);
  }
  v16 = (unsigned __int8 *)(v15 + 160);
  if (__ldaxr((unsigned __int8 *)(v15 + 160)))
  {
    __clrex();
LABEL_35:
    MEMORY[0x19AEA534C](v15 + 160);
    goto LABEL_36;
  }
  if (__stxr(1u, v16))
    goto LABEL_35;
LABEL_36:
  v21 = 0;
  v22 = a1 + 1;
  WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(v15 + 168), (uint64_t *)&v22, (uint64_t)v20);
  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
      return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 96))(a1, a2);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v15 + 160));
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 96))(a1, a2);
}

unint64_t WebCore::MediaRecorderPrivate::computeBitRates(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  _BYTE *v12;
  _BYTE *v13;

  if (*(_BYTE *)(a1 + 28))
  {
    if (!a2)
    {
      v10 = *(_DWORD *)(a1 + 24);
      goto LABEL_16;
    }
    if (!*(_DWORD *)(a2 + 76))
    {
      v10 = *(_DWORD *)(a1 + 24);
      goto LABEL_50;
    }
    v2 = *(_QWORD **)(a2 + 64);
    v3 = *(unsigned int *)(a2 + 72);
    v4 = &v2[2 * v3];
    v5 = 16 * v3;
    v6 = v2;
    if ((_DWORD)v3)
    {
      v7 = 16 * v3;
      v6 = *(_QWORD **)(a2 + 64);
      while (!*v6)
      {
        v6 += 2;
        v7 -= 16;
        if (!v7)
          goto LABEL_34;
      }
    }
    if (v6 != v4)
    {
LABEL_24:
      v12 = (_BYTE *)v6[1];
      if (!v12[64] && v12[73] && !v12[74] && !v12[97])
      {
        LOBYTE(v7) = 1;
        goto LABEL_34;
      }
      while (1)
      {
        v6 += 2;
        if (v6 == v4)
          break;
        if (*v6)
        {
          LOBYTE(v7) = 0;
          if (v6 != v4)
            goto LABEL_24;
          goto LABEL_34;
        }
      }
    }
    LOBYTE(v7) = 0;
LABEL_34:
    if ((_DWORD)v3)
    {
      while (!*v2)
      {
        v2 += 2;
        v5 -= 16;
        if (!v5)
          goto LABEL_45;
      }
    }
LABEL_44:
    if (v2 == v4)
    {
LABEL_45:
      v10 = *(_DWORD *)(a1 + 24);
      if ((v7 & 1) != 0)
      {
        v9 = 0;
        if (v10 <= 0x1F40)
          v8 = 8000;
        else
          v8 = *(_DWORD *)(a1 + 24);
        return v8 | (unint64_t)(v9 << 32);
      }
      goto LABEL_50;
    }
    v13 = (_BYTE *)v2[1];
    if (!v13[64] || !v13[73] || v13[74] || v13[97])
    {
      while (1)
      {
        v2 += 2;
        if (v2 == v4)
          goto LABEL_45;
        if (*v2)
          goto LABEL_44;
      }
    }
    v10 = *(_DWORD *)(a1 + 24);
    if ((v7 & 1) == 0)
    {
LABEL_50:
      v8 = 0;
LABEL_51:
      if (v10 <= 0x13880)
        v9 = 80000;
      else
        v9 = v10;
      return v8 | (unint64_t)(v9 << 32);
    }
LABEL_16:
    v8 = v10 / 0xA;
    if (v10 / 0xA >= 0x2EE00)
      v8 = 192000;
    if (v10 <= 0x13889)
      v8 = 8000;
    v11 = v10 >= v8;
    v10 -= v8;
    if (!v11)
      v10 = 0;
    goto LABEL_51;
  }
  if (*(_BYTE *)(a1 + 12))
    v8 = *(_DWORD *)(a1 + 8);
  else
    v8 = 192000;
  LODWORD(v9) = *(_DWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 20))
    v9 = v9;
  else
    v9 = 10000000;
  return v8 | (unint64_t)(v9 << 32);
}

WebCore::MediaRecorderPrivateMock *WebCore::MediaRecorderPrivateMock::MediaRecorderPrivateMock(WebCore::MediaRecorderPrivateMock *this, WebCore::MediaStreamPrivate *a2)
{
  WebCore::MediaRecorderPrivateMock *v4;
  uint64_t *v5;
  WTF::StringImpl **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::MediaRecorderPrivateMock *v39;

  *((_QWORD *)this + 1) = &unk_1E3417790;
  v4 = (WebCore::MediaRecorderPrivateMock *)((char *)this + 8);
  *((_DWORD *)this + 4) = 0;
  *((_WORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (uint64_t *)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)this = off_1E3417710;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_BYTE *)this + 84) = 1;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  v6 = (WTF::StringImpl **)((char *)this + 96);
  *((_QWORD *)this + 13) = 0;
  v36 = 0;
  v37 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3417B50;
  v7[1] = &v36;
  if (*((_DWORD *)a2 + 19))
  {
    v8 = *((_QWORD *)a2 + 8);
    v9 = *((unsigned int *)a2 + 18);
    if ((_DWORD)v9)
    {
      v10 = 16 * v9;
      v11 = (_QWORD *)*((_QWORD *)a2 + 8);
      while (!*v11)
      {
        v11 += 2;
        v10 -= 16;
        if (!v10)
          goto LABEL_6;
      }
    }
    else
    {
      v11 = (_QWORD *)*((_QWORD *)a2 + 8);
    }
    v21 = (_QWORD *)(v8 + 16 * v9);
LABEL_17:
    if (v11 != v21)
    {
      (*(void (**)(_QWORD *, _QWORD))(*v7 + 16))(v7, v11[1]);
      while (1)
      {
        v11 += 2;
        if (v11 == v21)
          break;
        if (*v11)
          goto LABEL_17;
      }
    }
  }
LABEL_6:
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  v13 = v36;
  v14 = v37;
  if (!v36)
    goto LABEL_43;
  v15 = *(WTF::StringImpl **)(v36 + 48);
  if (v15)
    *(_DWORD *)v15 += 2;
  v16 = *v6;
  *v6 = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 136))(v17);
  v18 = *v5;
  if (!*v5)
  {
    *v5 = v17;
    goto LABEL_32;
  }
  v19 = (unsigned __int8 *)(v18 + 144);
  if (__ldaxr((unsigned __int8 *)(v18 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v19))
  {
    goto LABEL_25;
  }
  MEMORY[0x19AEA534C](v18 + 144);
LABEL_25:
  WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v18 + 152), (uint64_t)this);
  v22 = __ldxr(v19);
  if (v22 == 1)
  {
    if (!__stlxr(0, v19))
      goto LABEL_30;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v18 + 144));
LABEL_30:
  v23 = *v5;
  *v5 = v17;
  if (!v23 || ((*(void (**)(uint64_t))(*(_QWORD *)v23 + 144))(v23), (v17 = *v5) != 0))
  {
LABEL_32:
    v24 = (unsigned __int8 *)(v17 + 144);
    if (__ldaxr((unsigned __int8 *)(v17 + 144)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v24))
    {
      goto LABEL_36;
    }
    MEMORY[0x19AEA534C](v17 + 144);
LABEL_36:
    v39 = this;
    (*(void (**)(WebCore::MediaRecorderPrivateMock *))(*(_QWORD *)this + 32))(this);
    WTF::HashTable<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>>::add((uint64_t *)(v17 + 152), (uint64_t *)&v39, (uint64_t)&v36);
    if (v39)
      (*(void (**)(WebCore::MediaRecorderPrivateMock *))(*(_QWORD *)v39 + 40))(v39);
    v26 = __ldxr(v24);
    if (v26 == 1)
    {
      if (!__stlxr(0, v24))
        goto LABEL_43;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v17 + 144));
  }
LABEL_43:
  if (!v14)
    return this;
  v27 = *(_DWORD **)(v14 + 48);
  if (v27)
    *v27 += 2;
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v27;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v12);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(v14 + 40) + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 136))(v29);
  v30 = *((_QWORD *)this + 4);
  if (v30)
  {
    WebCore::RealtimeMediaSource::removeVideoFrameObserver(v30, (uint64_t)v4);
    v31 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v29;
    if (v31)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 144))(v31);
      v29 = *((_QWORD *)this + 4);
      if (!v29)
        return this;
    }
  }
  else
  {
    *((_QWORD *)this + 4) = v29;
  }
  v32 = (unsigned __int8 *)(v29 + 160);
  if (__ldaxr((unsigned __int8 *)(v29 + 160)))
  {
    __clrex();
LABEL_57:
    MEMORY[0x19AEA534C](v29 + 160);
    goto LABEL_58;
  }
  if (__stxr(1u, v32))
    goto LABEL_57;
LABEL_58:
  v38 = 0;
  v39 = v4;
  WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(v29 + 168), (uint64_t *)&v39, (uint64_t)&v36);
  v34 = __ldxr(v32);
  if (v34 == 1)
  {
    if (!__stlxr(0, v32))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v29 + 160));
  return this;
}

void WebCore::MediaRecorderPrivateMock::~MediaRecorderPrivateMock(WebCore::MediaRecorderPrivateMock *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)this = off_1E3417AA0;
  *((_QWORD *)this + 1) = &unk_1E3417B18;
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = (unsigned __int8 *)(v7 + 144);
    if (__ldaxr((unsigned __int8 *)(v7 + 144)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
      goto LABEL_18;
    }
    MEMORY[0x19AEA534C](v7 + 144);
LABEL_18:
    WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v7 + 152), (uint64_t)this);
    v10 = __ldxr(v8);
    if (v10 == 1)
    {
      if (!__stlxr(0, v8))
        goto LABEL_23;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 144));
  }
LABEL_23:
  v11 = *((_QWORD *)this + 4);
  if (v11)
    WebCore::RealtimeMediaSource::removeVideoFrameObserver(v11, (uint64_t)this + 8);
  v12 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 144))(v12);
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 144))(v13);
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 144))(v14);
  v15 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 144))(v15);
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaRecorderPrivateMock::~MediaRecorderPrivateMock(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree(v2, v3);
  }
}

void `non-virtual thunk to'WebCore::MediaRecorderPrivateMock::~MediaRecorderPrivateMock(WebCore::MediaRecorderPrivateMock *this, WTF::StringImpl *a2)
{
  WebCore::MediaRecorderPrivateMock::~MediaRecorderPrivateMock((WebCore::MediaRecorderPrivateMock *)((char *)this - 8), a2);
}

{
  WTF *v3;
  void *v4;

  WebCore::MediaRecorderPrivateMock::~MediaRecorderPrivateMock((WebCore::MediaRecorderPrivateMock *)((char *)this - 8), a2);
  if (*((_DWORD *)this + 2))
  {
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)v3 = 0u;
  }
  else
  {
    WTF::fastFree(v3, v4);
  }
}

uint64_t WebCore::MediaRecorderPrivateMock::stopRecording(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::MediaRecorderPrivateMock::pauseRecording(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::MediaRecorderPrivateMock::resumeRecording(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::MediaRecorderPrivateMock::videoFrameAvailable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  uint64_t result;
  int v6;
  int8x16_t *v7;
  int v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v2 = (unsigned __int8 *)(a1 + 56);
  if (__ldaxr((unsigned __int8 *)(a1 + 56)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 56);
LABEL_5:
  v10 = (int8x16_t *)"Video Track ID: ";
  v11 = 16;
  v7 = *(int8x16_t **)(a1 + 104);
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)(a1 + 64), (uint64_t)&v10, (uint64_t *)&v7);
  v4 = *(_DWORD *)(a1 + 88) + 1;
  *(_DWORD *)(a1 + 88) = v4;
  v10 = (int8x16_t *)" Counter: ";
  v11 = 10;
  v9 = v4;
  v7 = (int8x16_t *)"\r\n---------\r\n";
  v8 = 13;
  result = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)(a1 + 64), &v10, (unsigned int *)&v9, &v7);
  v6 = __ldxr(v2);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WebCore::MediaRecorderPrivateMock::generateMockCounterString(WebCore::MediaRecorderPrivateMock *this)
{
  int v1;
  int8x16_t *v3;
  int v4;
  int v5;
  int8x16_t *v6;
  int v7;

  v1 = *((_DWORD *)this + 22) + 1;
  *((_DWORD *)this + 22) = v1;
  v6 = (int8x16_t *)" Counter: ";
  v7 = 10;
  v5 = v1;
  v3 = (int8x16_t *)"\r\n---------\r\n";
  v4 = 13;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WebCore::MediaRecorderPrivateMock *)((char *)this + 64), &v6, (unsigned int *)&v5, &v3);
}

uint64_t `non-virtual thunk to'WebCore::MediaRecorderPrivateMock::videoFrameAvailable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  uint64_t result;
  int v6;
  int8x16_t *v7;
  int v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 48);
LABEL_5:
  v10 = (int8x16_t *)"Video Track ID: ";
  v11 = 16;
  v7 = *(int8x16_t **)(a1 + 96);
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)(a1 + 56), (uint64_t)&v10, (uint64_t *)&v7);
  v4 = *(_DWORD *)(a1 + 80) + 1;
  *(_DWORD *)(a1 + 80) = v4;
  v10 = (int8x16_t *)" Counter: ";
  v11 = 10;
  v9 = v4;
  v7 = (int8x16_t *)"\r\n---------\r\n";
  v8 = 13;
  result = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)(a1 + 56), &v10, (unsigned int *)&v9, &v7);
  v6 = __ldxr(v2);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WebCore::MediaRecorderPrivateMock::audioSamplesAvailable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  uint64_t result;
  int v6;
  int8x16_t *v7;
  int v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v2 = (unsigned __int8 *)(a1 + 56);
  if (__ldaxr((unsigned __int8 *)(a1 + 56)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 56);
LABEL_5:
  v10 = (int8x16_t *)"Audio Track ID: ";
  v11 = 16;
  v7 = *(int8x16_t **)(a1 + 96);
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)(a1 + 64), (uint64_t)&v10, (uint64_t *)&v7);
  v4 = *(_DWORD *)(a1 + 88) + 1;
  *(_DWORD *)(a1 + 88) = v4;
  v10 = (int8x16_t *)" Counter: ";
  v11 = 10;
  v9 = v4;
  v7 = (int8x16_t *)"\r\n---------\r\n";
  v8 = 13;
  result = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)(a1 + 64), &v10, (unsigned int *)&v9, &v7);
  v6 = __ldxr(v2);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t *WebCore::MediaRecorderPrivateMock::fetchData(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned __int8 *v4;
  WTF *v6;
  uint64_t v7;
  char *v8;
  WTF *v9;
  char v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  WTF::MonotonicTime *v17;
  int v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t StatusReg;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  WTF::MonotonicTime *v31;
  double v32;
  WTF::StringImpl *v33;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (unsigned __int8 *)(a1 + 56);
  if (__ldaxr((unsigned __int8 *)(a1 + 56)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 56);
LABEL_5:
  v6 = (WTF *)*(unsigned int *)(a1 + 80);
  if (!(_DWORD)v6)
  {
    v35 = 0;
    v36 = 0;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (v7)
  {
    if ((v6 & 0x80000000) == 0)
      goto LABEL_8;
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x196281528);
  }
  v7 = *(_QWORD *)(a1 + 72);
  if ((v6 & 0x80000000) != 0)
    goto LABEL_34;
LABEL_8:
  v8 = *(char **)(v7 + 8);
  HIDWORD(v36) = *(_DWORD *)(a1 + 80);
  v9 = (WTF *)WTF::fastMalloc(v6);
  LODWORD(v36) = (_DWORD)v6;
  v35 = v9;
  do
  {
    v10 = *v8++;
    *(_BYTE *)v9 = v10;
    v9 = (WTF *)((char *)v9 + 1);
    v6 = (WTF *)((char *)v6 - 1);
  }
  while (v6);
LABEL_10:
  v11 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_DWORD *)(a1 + 80) = 0;
  WebCore::FragmentedSharedBuffer::create(&v35, &v39);
  v13 = WTF::fastMalloc((WTF *)0x38);
  WebCore::SharedBuffer::SharedBuffer(v13, &v39);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v39, v14);
  v39 = 0;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v39, v15);
  v17 = v35;
  if (v35)
    v17 = (WTF::MonotonicTime *)WTF::fastFree(v35, v16);
  v18 = __ldxr(v4);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v4))
LABEL_22:
    v17 = (WTF::MonotonicTime *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v19 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if ((_MergedGlobals_236 & 1) != 0)
  {
    v20 = (int *)qword_1ECE84010;
    if (!qword_1ECE84010)
      goto LABEL_27;
    v21 = *(_DWORD *)qword_1ECE84010;
  }
  else
  {
    v20 = &WebCore::MediaRecorderPrivateMock::mimeType(void)::$_0::operator() const(void)::impl;
    v21 = WebCore::MediaRecorderPrivateMock::mimeType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::MediaRecorderPrivateMock::mimeType(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE84010 = (uint64_t)&WebCore::MediaRecorderPrivateMock::mimeType(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_236 = 1;
  }
  *v20 = v21 + 2;
LABEL_27:
  WTF::MonotonicTime::now(v17);
  v23 = v22;
  v38 = v22;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v24 = off_1E3417B98;
  v24[1] = v19;
  v35 = 0;
  v36 = 0;
  v24[2] = v13;
  v24[3] = v20;
  v37 = 0;
  v24[4] = v23;
  v25 = WTF::fastMalloc((WTF *)0x38);
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v26 = off_1E33A5088;
  *(_QWORD *)v25 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v25 + 8) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  v28 = *(unsigned int **)(StatusReg + 736);
  if (!v28)
    v28 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  *(_QWORD *)v25 = off_1E31F7378;
  *(_QWORD *)(v25 + 40) = v28;
  *(_QWORD *)(v25 + 48) = v26;
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v30 = &off_1E33A50B0;
  v30[1] = v25;
  v30[2] = v24;
  v31 = *(WTF::MonotonicTime **)(v25 + 48);
  *(_QWORD *)(v25 + 48) = v30;
  if (v31)
    v31 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v31 + 8))(v31);
  *(_QWORD *)(v25 + 24) = 0;
  WTF::MonotonicTime::now(v31);
  WebCore::TimerBase::setNextFireTime(v25, v32 + 0.05);
  return WebCore::MediaRecorderPrivateMock::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0::~$_0((uint64_t *)&v35, v33);
}

uint64_t *WebCore::MediaRecorderPrivateMock::mimeType(WebCore::MediaRecorderPrivateMock *this)
{
  if ((_MergedGlobals_236 & 1) == 0)
  {
    WebCore::MediaRecorderPrivateMock::mimeType(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE84010 = (uint64_t)&WebCore::MediaRecorderPrivateMock::mimeType(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_236 = 1;
  }
  return &qword_1ECE84010;
}

uint64_t *WebCore::MediaRecorderPrivateMock::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0::~$_0(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v9 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v4 + 8);
        v11 = v10 + 16 * v9;
        do
        {
          v12 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              v18 = v11;
              v19 = v10;
              v20 = (WTF *)v12;
              v21 = v4;
              atomic_store(1u, v12);
              v15 = v12[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))off_1E3417B68[v15])(&v23, v12 + 2);
              *((_DWORD *)v20 + 6) = -1;
              WTF::fastFree(v20, a2);
              v4 = v21;
              v11 = v18;
              v10 = v19;
            }
          }
          v10 += 16;
        }
        while (v10 != v11);
      }
      v16 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v16 && v16 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v22 = v4;
        WTF::fastFree(v16, a2);
        v4 = v22;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t WebCore::MediaRecorderPrivateAVFImpl::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  WebCore::MediaRecorderPrivateWriter *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  BOOL v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v46 = 0;
  v47 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E3417B50;
  v6[1] = &v46;
  if (*(_DWORD *)(a1 + 76))
  {
    v7 = *(_QWORD *)(a1 + 64);
    v8 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      v10 = *(_QWORD **)(a1 + 64);
      while (!*v10)
      {
        v10 += 2;
        v9 -= 16;
        if (!v9)
          goto LABEL_6;
      }
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 64);
    }
    v23 = (_QWORD *)(v7 + 16 * v8);
LABEL_14:
    if (v10 != v23)
    {
      (*(void (**)(_QWORD *, _QWORD))(*v6 + 16))(v6, v10[1]);
      while (1)
      {
        v10 += 2;
        if (v10 == v23)
          break;
        if (*v10)
          goto LABEL_14;
      }
    }
  }
LABEL_6:
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v12 = v46;
  v11 = v47;
  v13 = v46 != 0;
  v14 = (WebCore::MediaRecorderPrivateWriter *)WTF::fastMalloc((WTF *)0x170);
  WebCore::MediaRecorderPrivateWriter::MediaRecorderPrivateWriter(v14, v13, v11 != 0);
  if (!WebCore::MediaRecorderPrivateWriter::initialize((uint64_t)v14, a2))
  {
    result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*(unsigned __int8 **)v14);
    *a3 = 0;
    return result;
  }
  result = WTF::fastMalloc((WTF *)0xA8);
  v16 = result;
  *(_QWORD *)(result + 8) = &unk_1E3417838;
  v17 = result + 8;
  *(_DWORD *)(result + 16) = 0;
  *(_WORD *)(result + 20) = 0;
  *(_OWORD *)(result + 24) = 0u;
  v18 = (uint64_t *)(result + 24);
  *(_OWORD *)(result + 40) = 0u;
  *(_QWORD *)result = off_1E34177B8;
  *(_QWORD *)(result + 56) = v14;
  *(_QWORD *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_BYTE *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *a3 = result;
  if (v12)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 136))(v19);
    v20 = *v18;
    if (!*v18)
    {
      *v18 = v19;
      goto LABEL_29;
    }
    v21 = (unsigned __int8 *)(v20 + 144);
    if (__ldaxr((unsigned __int8 *)(v20 + 144)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v21))
    {
      goto LABEL_22;
    }
    MEMORY[0x19AEA534C](v20 + 144);
LABEL_22:
    WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v20 + 152), v16);
    v24 = __ldxr(v21);
    if (v24 == 1)
    {
      if (!__stlxr(0, v21))
        goto LABEL_27;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v20 + 144));
LABEL_27:
    v25 = *v18;
    *v18 = v19;
    if (v25)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 144))(v25);
      v19 = *v18;
      if (!*v18)
      {
        v29 = 0;
LABEL_42:
        v30 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
        if (v30 == v29)
        {
          if (*(_BYTE *)(v12 + 97))
            v33 = 1;
          else
            v33 = *(_BYTE *)(v12 + 73) == 0;
          v34 = v33;
          *(_BYTE *)(v16 + 20) = v34;
        }
        else if (v30 == *(_QWORD *)(v16 + 32))
        {
          if (*(_BYTE *)(v12 + 97))
            v31 = 1;
          else
            v31 = *(_BYTE *)(v12 + 73) == 0;
          v32 = v31;
          *(_BYTE *)(v16 + 21) = v32;
        }
        goto LABEL_58;
      }
    }
LABEL_29:
    v26 = (unsigned __int8 *)(v19 + 144);
    if (__ldaxr((unsigned __int8 *)(v19 + 144)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
      goto LABEL_33;
    }
    MEMORY[0x19AEA534C](v19 + 144);
LABEL_33:
    v49 = v16;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    WTF::HashTable<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>>::add((uint64_t *)(v19 + 152), &v49, (uint64_t)&v46);
    result = v49;
    if (v49)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
    v28 = __ldxr(v26);
    if (v28 == 1)
    {
      if (!__stlxr(0, v26))
        goto LABEL_40;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)(v19 + 144));
LABEL_40:
    v29 = *v18;
    goto LABEL_42;
  }
LABEL_58:
  if (!v11)
    return result;
  v35 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 136))(v35);
  v36 = *(_QWORD *)(v16 + 32);
  if (!v36)
  {
    *(_QWORD *)(v16 + 32) = v35;
    goto LABEL_64;
  }
  WebCore::RealtimeMediaSource::removeVideoFrameObserver(v36, v17);
  v37 = *(_QWORD *)(v16 + 32);
  *(_QWORD *)(v16 + 32) = v35;
  if (!v37
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 144))(v37), (v35 = *(_QWORD *)(v16 + 32)) != 0))
  {
LABEL_64:
    v38 = (unsigned __int8 *)(v35 + 160);
    if (__ldaxr((unsigned __int8 *)(v35 + 160)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v38))
    {
      goto LABEL_68;
    }
    MEMORY[0x19AEA534C](v35 + 160);
LABEL_68:
    v48 = 0;
    v49 = v17;
    result = (uint64_t)WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(v35 + 168), &v49, (uint64_t)&v46);
    v40 = __ldxr(v38);
    if (v40 == 1)
    {
      if (!__stlxr(0, v38))
        goto LABEL_73;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)(v35 + 160));
  }
LABEL_73:
  v41 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8);
  if (v41 == *v18)
  {
    if (*(_BYTE *)(v11 + 97))
      v44 = 1;
    else
      v44 = *(_BYTE *)(v11 + 73) == 0;
    v45 = v44;
    *(_BYTE *)(v16 + 20) = v45;
  }
  else if (v41 == *(_QWORD *)(v16 + 32))
  {
    if (*(_BYTE *)(v11 + 97))
      v42 = 1;
    else
      v42 = *(_BYTE *)(v11 + 73) == 0;
    v43 = v42;
    *(_BYTE *)(v16 + 21) = v43;
  }
  return result;
}

void sub_196281B20(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

void WebCore::MediaRecorderPrivateAVFImpl::~MediaRecorderPrivateAVFImpl(WebCore::MediaRecorderPrivateAVFImpl *this, OpaqueAudioConverter *a2, opaqueCMBufferQueueTriggerToken *a3)
{
  uint64_t v4;
  WebCore::AudioSampleBufferCompressor *v5;
  WTF *v6;
  void *v7;
  WebCore::VideoSampleBufferCompressor *v8;
  WTF *v9;
  void *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *((_QWORD *)this + 7);
  v5 = *(WebCore::AudioSampleBufferCompressor **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = 0;
  if (v5)
  {
    WebCore::AudioSampleBufferCompressor::~AudioSampleBufferCompressor(v5, a2, a3);
    WTF::fastFree(v6, v7);
  }
  v8 = *(WebCore::VideoSampleBufferCompressor **)(v4 + 80);
  *(_QWORD *)(v4 + 80) = 0;
  if (v8)
  {
    WebCore::VideoSampleBufferCompressor::~VideoSampleBufferCompressor(v8, a2, a3);
    WTF::fastFree(v9, v10);
  }
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)this + 20, 0);
  v11 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  v15 = (unsigned __int8 **)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v15);
  *(_QWORD *)this = off_1E3417AA0;
  *((_QWORD *)this + 1) = &unk_1E3417B18;
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    v17 = (unsigned __int8 *)(v16 + 144);
    if (__ldaxr((unsigned __int8 *)(v16 + 144)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_17;
    }
    MEMORY[0x19AEA534C](v16 + 144);
LABEL_17:
    WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v16 + 152), (uint64_t)this);
    v19 = __ldxr(v17);
    if (v19 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v16 + 144));
  }
LABEL_22:
  v20 = *((_QWORD *)this + 4);
  if (v20)
    WebCore::RealtimeMediaSource::removeVideoFrameObserver(v20, (uint64_t)this + 8);
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 144))(v21);
  v22 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 144))(v22);
  v23 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 144))(v23);
  v24 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 144))(v24);
}

{
  uint64_t v3;
  void *v4;

  WebCore::MediaRecorderPrivateAVFImpl::~MediaRecorderPrivateAVFImpl(this, a2, a3);
  if (*(_DWORD *)(v3 + 16))
  {
    *(_QWORD *)(v3 + 160) = 0;
    *(_OWORD *)(v3 + 128) = 0u;
    *(_OWORD *)(v3 + 144) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v3, v4);
  }
}

void `non-virtual thunk to'WebCore::MediaRecorderPrivateAVFImpl::~MediaRecorderPrivateAVFImpl(WebCore::MediaRecorderPrivateAVFImpl *this, OpaqueAudioConverter *a2, opaqueCMBufferQueueTriggerToken *a3)
{
  WebCore::MediaRecorderPrivateAVFImpl::~MediaRecorderPrivateAVFImpl((WebCore::MediaRecorderPrivateAVFImpl *)((char *)this - 8), a2, a3);
}

{
  uint64_t v4;
  void *v5;

  WebCore::MediaRecorderPrivateAVFImpl::~MediaRecorderPrivateAVFImpl((WebCore::MediaRecorderPrivateAVFImpl *)((char *)this - 8), a2, a3);
  if (*((_DWORD *)this + 2))
  {
    *(_QWORD *)(v4 + 160) = 0;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v4, v5);
  }
}

uint64_t WebCore::MediaRecorderPrivateAVFImpl::startRecording(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  int v12;
  char v13;

  v2 = *(_QWORD *)(a1 + 56);
  {
    WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::MediaRecorderPrivateWriter::mimeType(void)const::audioMP4 = (uint64_t)&WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_0::operator() const(void)::impl;
  }
  {
    v3 = (int *)WebCore::MediaRecorderPrivateWriter::mimeType(void)const::videoMP4;
  }
  else
  {
    v3 = &WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_1::operator() const(void)::impl;
    WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_1::operator() const(void)::impl += 2;
    WebCore::MediaRecorderPrivateWriter::mimeType(void)const::videoMP4 = (uint64_t)&WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_1::operator() const(void)::impl;
  }
  v4 = (int *)WebCore::MediaRecorderPrivateWriter::mimeType(void)const::audioMP4;
  if (*(_BYTE *)(v2 + 9))
    v4 = v3;
  if (v4)
    *v4 += 2;
  v11[0] = v4;
  v12 = 0;
  v5 = *(_QWORD *)(v2 + 56);
  if (v5 && *(_BYTE *)(v5 + 328))
    v6 = *(unsigned int *)(v5 + 324);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v2 + 80);
  if (v7 && *(_BYTE *)(v7 + 56))
    v8 = *(unsigned int *)(v7 + 52);
  else
    v8 = 0;
  v9 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v11, v6, v8);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v12 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3417B30[v12])(&v13, v11);
  return result;
}

void WebCore::MediaRecorderPrivateAVFImpl::videoFrameAvailable(uint64_t a1, WebCore::VideoFrame *a2)
{
  unsigned int *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  CVAttachmentMode *v8;
  __int16 v9;
  float v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  CFTypeRef v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _BYTE v20[10];
  CFTypeRef cf;

  v4 = *(unsigned int **)(a1 + 64);
  if (*(_BYTE *)(a1 + 21))
  {
    if (!v4)
    {
      v5 = (*(float (**)(WebCore::VideoFrame *))(*(_QWORD *)a2 + 16))(a2);
      v6 = *((_QWORD *)a2 + 2);
      v7 = *((_QWORD *)a2 + 3);
      v8 = (CVAttachmentMode *)*((unsigned __int8 *)a2 + 32);
      v9 = *((_WORD *)a2 + 17);
      WebCore::createBlackPixelBuffer((WebCore *)v5, (unint64_t)v10, 0, (WebCore **)&cf);
      v20[0] = 0;
      v20[8] = 0;
      v11 = WTF::fastMalloc((WTF *)0x38);
      WebCore::VideoFrameCV::VideoFrameCV(v11, v6, v7, v8, v9, (WebCore **)&cf, (uint64_t)v20);
      v12 = *(unsigned int **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v11;
      if (v12)
      {
        v13 = v12 + 2;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v12 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
        }
      }
      v16 = cf;
      cf = 0;
      if (v16)
        CFRelease(v16);
      v4 = *(unsigned int **)(a1 + 64);
    }
    WebCore::MediaRecorderPrivateWriter::appendVideoFrame(*(CGAffineTransform **)(a1 + 56), (WebCore::VideoFrame *)v4);
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    if (v4)
    {
      v17 = v4 + 2;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    WebCore::MediaRecorderPrivateWriter::appendVideoFrame(*(CGAffineTransform **)(a1 + 56), a2);
  }
}

void sub_196282030(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'WebCore::MediaRecorderPrivateAVFImpl::videoFrameAvailable(uint64_t a1, WebCore::VideoFrame *a2)
{
  WebCore::MediaRecorderPrivateAVFImpl::videoFrameAvailable(a1 - 8, a2);
}

void WebCore::MediaRecorderPrivateAVFImpl::audioSamplesAvailable(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  WebCore::WebAudioBufferList *v20;
  WebCore::WebAudioBufferList *v21;
  uint64_t v22;
  _BYTE v23[40];
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;

  if (!*(_BYTE *)(a1 + 20))
  {
    WebCore::MediaRecorderPrivateWriter::appendAudioSampleBuffer(*(_QWORD *)(a1 + 56), a3, a4, a2, a5);
    return;
  }
  if (*(_QWORD *)(a1 + 160))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    if (*(_DWORD *)(v9 + 16) != 1)
      goto LABEL_23;
    v10 = *(__int128 **)(v9 + 8);
    *(_QWORD *)v23 = off_1E34087C0;
    v11 = *v10;
    v12 = v10[1];
    v24 = *((_QWORD *)v10 + 4);
    *(_OWORD *)&v23[24] = v12;
    *(_OWORD *)&v23[8] = v11;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    if (*(_BYTE *)(a1 + 152)
      && *(_DWORD *)WebCore::CAAudioStreamDescription::platformDescription((WebCore::CAAudioStreamDescription *)v23) == 1)
    {
      v13 = (*(uint64_t (**)(WebCore::CAAudioStreamDescription *))(*(_QWORD *)v23 + 16))((WebCore::CAAudioStreamDescription *)v23);
      if (*(_DWORD *)(v13 + 16) != 1)
        goto LABEL_23;
      v14 = *(_QWORD *)(v13 + 8);
      if (*(double *)(a1 + 80) == *(double *)v14
        && *(_DWORD *)(a1 + 88) == *(_DWORD *)(v14 + 8)
        && *(_DWORD *)(a1 + 92) == *(_DWORD *)(v14 + 12)
        && *(_DWORD *)(a1 + 96) == *(_DWORD *)(v14 + 16)
        && *(_DWORD *)(a1 + 100) == *(_DWORD *)(v14 + 20)
        && *(_DWORD *)(a1 + 104) == *(_DWORD *)(v14 + 24)
        && *(_DWORD *)(a1 + 108) == *(_DWORD *)(v14 + 28)
        && *(_DWORD *)(a1 + 112) == *(_DWORD *)(v14 + 32))
      {
        WebCore::WebAudioBufferList::setSampleCount(*(_QWORD **)(a1 + 160), a5);
LABEL_22:
        bzero(*(void **)(*(_QWORD *)(a1 + 160) + 56), *(unsigned int *)(*(_QWORD *)(a1 + 160) + 68));
        WebCore::MediaRecorderPrivateWriter::appendAudioSampleBuffer(*(_QWORD *)(a1 + 56), *(_QWORD **)(a1 + 160), a4, a2, a5);
        return;
      }
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  if (*(_DWORD *)(v15 + 16) == 1)
  {
    v16 = *(__int128 **)(v15 + 8);
    *(_OWORD *)v23 = *v16;
    *(_OWORD *)&v23[16] = v16[1];
    *(_QWORD *)&v23[32] = *((_QWORD *)v16 + 4);
    if (*(_BYTE *)(a1 + 152))
    {
      v17 = *v16;
      v18 = v16[1];
      *(_QWORD *)(a1 + 112) = *((_QWORD *)v16 + 4);
      *(_OWORD *)(a1 + 80) = v17;
      *(_OWORD *)(a1 + 96) = v18;
      *(_DWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = 0;
      *(_DWORD *)(a1 + 136) = 0;
      *(_DWORD *)(a1 + 144) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 72) = off_1E34087C0;
      v19 = *(_OWORD *)&v23[16];
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v23;
      *(_OWORD *)(a1 + 96) = v19;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)&v23[32];
      *(_DWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = 0;
      *(_DWORD *)(a1 + 136) = 0;
      *(_DWORD *)(a1 + 144) = 0;
      *(_BYTE *)(a1 + 152) = 1;
    }
    v20 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
    v21 = WebCore::WebAudioBufferList::WebAudioBufferList(v20, (const WebCore::CAAudioStreamDescription *)(a1 + 72));
    WebCore::WebAudioBufferList::setSampleCount(v21, a5);
    std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)(a1 + 160), v20);
    goto LABEL_22;
  }
LABEL_23:
  v22 = std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::MediaRecorderPrivateAVFImpl::stopRecording(v22);
}

uint64_t WebCore::MediaRecorderPrivateAVFImpl::stopRecording(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  WebCore::MediaRecorderPrivateWriter::stopRecording(*(_QWORD *)(a1 + 56));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebCore::MediaRecorderPrivateAVFImpl::pauseRecording(PAL *a1, uint64_t *a2)
{
  uint64_t v3;
  PAL *HostTimeClock;
  OpaqueCMClock *v5;
  CMTime *v6;
  CMTime *v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  CMTime v16;
  __int128 v17;
  uint64_t v18;

  v3 = *((_QWORD *)a1 + 7);
  v14 = 0uLL;
  v15 = 0;
  HostTimeClock = (PAL *)PAL::softLinkCoreMediaCMClockGetHostTimeClock(a1);
  PAL::softLinkCoreMediaCMClockGetTime(HostTimeClock, v5);
  v16 = *(CMTime *)(v3 + 288);
  v17 = v12;
  v18 = v13;
  PAL::softLinkCoreMediaCMTimeSubtract((PAL *)&v17, &v16, v6);
  v17 = v14;
  v18 = v15;
  v16 = *(CMTime *)(v3 + 312);
  PAL::softLinkCoreMediaCMTimeAdd[0]((PAL *)&v17, &v16, v7);
  *(_OWORD *)(v3 + 312) = v10;
  *(_QWORD *)(v3 + 328) = v11;
  v8 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t WebCore::MediaRecorderPrivateAVFImpl::resumeRecording(PAL *a1, uint64_t *a2)
{
  uint64_t v3;
  PAL *HostTimeClock;
  OpaqueCMClock *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v3 = *((_QWORD *)a1 + 7);
  HostTimeClock = (PAL *)PAL::softLinkCoreMediaCMClockGetHostTimeClock(a1);
  PAL::softLinkCoreMediaCMClockGetTime(HostTimeClock, v5);
  *(_OWORD *)(v3 + 288) = v8;
  *(_QWORD *)(v3 + 304) = v9;
  v6 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t WebCore::MediaRecorderPrivateAVFImpl::fetchData(uint64_t a1, uint64_t *a2)
{
  WebCore::MediaRecorderPrivateWriter *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v2 = *(WebCore::MediaRecorderPrivateWriter **)(a1 + 56);
  v3 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 56);
  {
    WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::MediaRecorderPrivateWriter::mimeType(void)const::audioMP4 = (uint64_t)&WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_0::operator() const(void)::impl;
  }
  {
    v5 = (int *)WebCore::MediaRecorderPrivateWriter::mimeType(void)const::videoMP4;
  }
  else
  {
    v5 = &WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_1::operator() const(void)::impl;
    WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_1::operator() const(void)::impl += 2;
    WebCore::MediaRecorderPrivateWriter::mimeType(void)const::videoMP4 = (uint64_t)&WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_1::operator() const(void)::impl;
  }
  if (*(_BYTE *)(v4 + 9))
    v6 = v5;
  else
    v6 = (int *)WebCore::MediaRecorderPrivateWriter::mimeType(void)const::audioMP4;
  if (v6)
    *v6 += 2;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E3417BC0;
  v7[1] = v3;
  v7[2] = v6;
  v9 = v7;
  WebCore::MediaRecorderPrivateWriter::fetchData(v2, (uint64_t *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *WebCore::MediaRecorderPrivateAVFImpl::mimeType(WebCore::MediaRecorderPrivateAVFImpl *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  {
    WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::MediaRecorderPrivateWriter::mimeType(void)const::audioMP4 = (uint64_t)&WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_0::operator() const(void)::impl;
  }
  {
    WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_1::operator() const(void)::impl += 2;
    WebCore::MediaRecorderPrivateWriter::mimeType(void)const::videoMP4 = (uint64_t)&WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_1::operator() const(void)::impl;
  }
  if (*(_BYTE *)(v1 + 9))
    return &WebCore::MediaRecorderPrivateWriter::mimeType(void)const::videoMP4;
  else
    return &WebCore::MediaRecorderPrivateWriter::mimeType(void)const::audioMP4;
}

_QWORD *WebCore::AudioMediaStreamTrackRenderer::create@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0xB8);
  v5 = v4;
  *(_QWORD *)v4 = off_1E3417C60;
  *(_DWORD *)(v4 + 8) = 1065353216;
  v6 = **a1;
  **a1 = 0;
  *(_QWORD *)(v4 + 16) = v6;
  v8 = a1[1];
  v7 = a1[2];
  a1[1] = 0;
  *(_QWORD *)(v4 + 24) = v8;
  v9 = (unsigned int *)(v7 + 1);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = a1[3];
  *(_QWORD *)(v4 + 32) = v7;
  *(_QWORD *)(v4 + 40) = v11;
  *(_QWORD *)(v4 + 48) = 0;
  v13 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = v5;
  v14 = *(unsigned int **)(v5 + 48);
  *(_QWORD *)(v5 + 48) = v13;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v12);
    }
  }
  *(_QWORD *)v5 = off_1E3419978;
  *(_BYTE *)(v5 + 56) = 0;
  *(_BYTE *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  *(_BYTE *)(v5 + 160) = 0;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E341A148;
  result[1] = v5;
  *(_QWORD *)(v5 + 168) = 0;
  *(_QWORD *)(v5 + 176) = result;
  *a2 = v5;
  return result;
}

uint64_t WebCore::AudioMediaStreamTrackRenderer::AudioMediaStreamTrackRenderer(uint64_t result, uint64_t **a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t *v7;

  *(_QWORD *)result = off_1E3417C60;
  *(_DWORD *)(result + 8) = 1065353216;
  v2 = **a2;
  **a2 = 0;
  *(_QWORD *)(result + 16) = v2;
  v4 = a2[1];
  v3 = a2[2];
  a2[1] = 0;
  *(_QWORD *)(result + 24) = v4;
  v5 = (unsigned int *)(v3 + 1);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = a2[3];
  *(_QWORD *)(result + 32) = v3;
  *(_QWORD *)(result + 40) = v7;
  return result;
}

char *WebCore::AudioMediaStreamTrackRenderer::logChannel(WebCore::AudioMediaStreamTrackRenderer *this)
{
  return &WebCore::LogMedia;
}

uint64_t WebCore::AudioMediaStreamTrackRenderer::logger(WebCore::AudioMediaStreamTrackRenderer *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::AudioMediaStreamTrackRenderer::logIdentifier(WebCore::AudioMediaStreamTrackRenderer *this)
{
  return *((_QWORD *)this + 5);
}

const char *WebCore::AudioMediaStreamTrackRenderer::logClassName(WebCore::AudioMediaStreamTrackRenderer *this)
{
  return "AudioMediaStreamTrackRenderer";
}

_QWORD *WebCore::AudioTrackPrivateMediaStream::createRenderer@<X0>(WebCore::AudioTrackPrivateMediaStream *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  void (***v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;
  __int128 v24;

  v5 = *((_QWORD *)this + 12);
  if (v5)
    goto LABEL_21;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = (char *)this + 88;
  v7 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v5;
  if (!v7)
    goto LABEL_21;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  v5 = *((_QWORD *)this + 12);
  if (v5)
  {
LABEL_21:
    do
      v10 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v10 + 1, (unsigned int *)v5));
  }
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E3417BE8;
  v11[1] = v5;
  v12 = (_QWORD *)*((_QWORD *)this + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v12 + 256))(v12))
  {
    v13 = (void (***)(_QWORD))v12[55];
    if (v13)
      (**v13)(v13);
  }
  else
  {
    v13 = 0;
  }
  v24 = *(_OWORD *)(*((_QWORD *)this + 15) + 80);
  v14 = WTF::fastMalloc((WTF *)0xB8);
  v15 = v14;
  *(_QWORD *)v14 = off_1E3417C60;
  *(_DWORD *)(v14 + 8) = 1065353216;
  *(_QWORD *)(v14 + 16) = v11;
  *(_QWORD *)(v14 + 24) = v13;
  v16 = (unsigned int *)(v24 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_OWORD *)(v14 + 32) = v24;
  *(_QWORD *)(v14 + 48) = 0;
  v19 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = v15;
  v20 = *(unsigned int **)(v15 + 48);
  *(_QWORD *)(v15 + 48) = v19;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v18);
    }
  }
  *(_QWORD *)v15 = off_1E3419978;
  *(_BYTE *)(v15 + 56) = 0;
  *(_BYTE *)(v15 + 136) = 0;
  *(_QWORD *)(v15 + 144) = 0;
  *(_QWORD *)(v15 + 152) = 0;
  *(_BYTE *)(v15 + 160) = 0;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E341A148;
  result[1] = v15;
  *(_QWORD *)(v15 + 168) = 0;
  *(_QWORD *)(v15 + 176) = result;
  *a2 = v15;
  return result;
}

void WebCore::AudioTrackPrivateMediaStream::~AudioTrackPrivateMediaStream(WebCore::AudioTrackPrivateMediaStream *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::MediaStreamTrackPrivate *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  void *v22;

  if (*((_BYTE *)this + 119))
    goto LABEL_14;
  *((_BYTE *)this + 119) = 1;
  if (*((_BYTE *)this + 116))
  {
    v3 = *((_QWORD *)this + 16);
    v4 = (unsigned __int8 *)(v3 + 144);
    if (__ldaxr((unsigned __int8 *)(v3 + 144)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_7;
    }
    MEMORY[0x19AEA534C](v3 + 144);
LABEL_7:
    WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v3 + 152), (uint64_t)this + 104);
    v6 = __ldxr(v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, v4))
        goto LABEL_12;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 144));
  }
LABEL_12:
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)this + 15) + 24, (_QWORD *)this + 11);
  v7 = *((_QWORD *)this + 18);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
LABEL_14:
  v8 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 144))(v9);
  v10 = (WebCore::MediaStreamTrackPrivate *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v10, a2);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*((_DWORD *)v10 + 2);
    }
  }
  v11 = *((_QWORD *)this + 12);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 12) = 0;
  }
  *(_QWORD *)this = off_1E334D168;
  v15 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  uint64_t v2;
  void *v3;

  WebCore::AudioTrackPrivateMediaStream::~AudioTrackPrivateMediaStream(this, a2);
  if (*(_DWORD *)(v2 + 112))
  {
    *(_QWORD *)(v2 + 144) = 0;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

void `non-virtual thunk to'WebCore::AudioTrackPrivateMediaStream::~AudioTrackPrivateMediaStream(WebCore::AudioTrackPrivateMediaStream *this, void *a2)
{
  WebCore::AudioTrackPrivateMediaStream::~AudioTrackPrivateMediaStream((WebCore::AudioTrackPrivateMediaStream *)((char *)this - 88), a2);
}

{
  WebCore::AudioTrackPrivateMediaStream::~AudioTrackPrivateMediaStream((WebCore::AudioTrackPrivateMediaStream *)((char *)this - 104), a2);
}

{
  uint64_t v3;
  void *v4;

  WebCore::AudioTrackPrivateMediaStream::~AudioTrackPrivateMediaStream((WebCore::AudioTrackPrivateMediaStream *)((char *)this - 88), a2);
  if (*((_DWORD *)this + 6))
  {
    *(_QWORD *)(v3 + 144) = 0;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_OWORD *)(v3 + 128) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)v3 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v3, v4);
  }
}

{
  uint64_t v3;
  void *v4;

  WebCore::AudioTrackPrivateMediaStream::~AudioTrackPrivateMediaStream((WebCore::AudioTrackPrivateMediaStream *)((char *)this - 104), a2);
  if (*((_DWORD *)this + 2))
  {
    *(_QWORD *)(v3 + 144) = 0;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_OWORD *)(v3 + 128) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)v3 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v3, v4);
  }
}

_BYTE *WebCore::AudioTrackPrivateMediaStream::updateRenderer(_BYTE *this)
{
  _BYTE *v1;
  float *v2;
  _BYTE *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  _BYTE *v11;

  v1 = this;
  if (!this[117]
    || (v2 = (float *)*((_QWORD *)this + 18)) != 0 && v2[2] == 0.0
    || this[118]
    || (v3 = (_BYTE *)*((_QWORD *)this + 15), v3[97])
    || v3[74]
    || !v3[73])
  {
    if (!this[116])
      return this;
    this[116] = 0;
    v4 = *((_QWORD *)this + 16);
    v5 = (unsigned __int8 *)(v4 + 144);
    if (__ldaxr((unsigned __int8 *)(v4 + 144)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v4 + 144);
LABEL_12:
    WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v4 + 152), (uint64_t)(v1 + 104));
    v7 = __ldxr(v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, v5))
      {
LABEL_17:
        this = (_BYTE *)*((_QWORD *)v1 + 18);
        if (this)
          return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 56))(this);
        return this;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 144));
    goto LABEL_17;
  }
  if (v2)
  {
    if (!this[116])
    {
      this[116] = 1;
      v8 = (unsigned int *)(this + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = &off_1E3417C10;
      v10[1] = v1;
      v11 = v10;
      (*(void (**)(float *, _BYTE **))(*(_QWORD *)v2 + 48))(v2, &v11);
      this = v11;
      v11 = 0;
      if (this)
        return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

uint64_t WebCore::AudioTrackPrivateMediaStream::audioSamplesAvailable(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 144);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::AudioTrackPrivateMediaStream::audioSamplesAvailable(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

_BYTE *`non-virtual thunk to'WebCore::AudioTrackPrivateMediaStream::trackMutedChanged(WebCore::AudioTrackPrivateMediaStream *this, WebCore::MediaStreamTrackPrivate *a2)
{
  return WebCore::AudioTrackPrivateMediaStream::updateRenderer((_BYTE *)this - 88);
}

_BYTE *`non-virtual thunk to'WebCore::AudioTrackPrivateMediaStream::trackEnabledChanged(WebCore::AudioTrackPrivateMediaStream *this, WebCore::MediaStreamTrackPrivate *a2)
{
  return WebCore::AudioTrackPrivateMediaStream::updateRenderer((_BYTE *)this - 88);
}

_BYTE *`non-virtual thunk to'WebCore::AudioTrackPrivateMediaStream::trackEnded(WebCore::AudioTrackPrivateMediaStream *this, WebCore::MediaStreamTrackPrivate *a2)
{
  return WebCore::AudioTrackPrivateMediaStream::updateRenderer((_BYTE *)this - 88);
}

uint64_t WebCore::CaptureDeviceManager::computeCaptureDevices(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::CaptureDeviceManager::captureDeviceWithPersistentID(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[40] = 0;
}

uint64_t *WebCore::CaptureDeviceManager::captureDeviceFromPersistentID@<X0>(WebCore::CaptureDeviceManager *this@<X0>, const WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *result;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  _DWORD *v11;
  _DWORD *v12;

  result = (uint64_t *)(**(uint64_t (***)(WebCore::CaptureDeviceManager *))this)(this);
  v7 = *((unsigned int *)result + 3);
  if ((_DWORD)v7)
  {
    v8 = *result;
    v9 = 40 * v7;
    while (1)
    {
      result = (uint64_t *)WTF::equal(*(WTF **)v8, *a2, v6);
      if ((_DWORD)result)
        break;
      v8 += 40;
      v9 -= 40;
      if (!v9)
        goto LABEL_5;
    }
    v10 = *(WTF **)v8;
    if (*(_QWORD *)v8)
      *(_DWORD *)v10 += 2;
    *(_QWORD *)a3 = v10;
    *(_BYTE *)(a3 + 8) = *(_BYTE *)(v8 + 8);
    v11 = *(_DWORD **)(v8 + 16);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(a3 + 16) = v11;
    v12 = *(_DWORD **)(v8 + 24);
    if (v12)
      *v12 += 2;
    *(_QWORD *)(a3 + 24) = v12;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(v8 + 32);
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t WebCore::CaptureDeviceManager::deviceChanged(WebCore::CaptureDeviceManager *this)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1 = off_1E3417C38;
  v3 = (uint64_t)v1;
  WTF::ensureOnMainThread();
  result = v3;
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

uint64_t WebCore::convertToString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  switch((int)result)
  {
    case 0:
      v2 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      *a2 = v2;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      break;
    default:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t WebCore::MediaRecorderPrivate::ptrCount(WebCore::MediaRecorderPrivate *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t WebCore::MediaRecorderPrivate::ptrCountWithoutThreadCheck(WebCore::MediaRecorderPrivate *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t WebCore::MediaRecorderPrivate::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

uint64_t WebCore::MediaRecorderPrivate::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 16);
  if (v1)
  {
    *(_DWORD *)(this + 16) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::MediaRecorderPrivate::startRecording(uint64_t a1, uint64_t *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  int v7;
  char v8;

  v3 = *(_DWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if (v3)
    *v3 += 2;
  v6[0] = v3;
  v7 = 0;
  v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, v6, 0, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v7 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3417B30[v7])(&v8, v6);
  return result;
}

uint64_t WebCore::AudioMediaStreamTrackRenderer::setVolume(uint64_t this, float a2)
{
  *(float *)(this + 8) = a2;
  return this;
}

const char *WebCore::AudioTrackPrivateMediaStream::logClassName(WebCore::AudioTrackPrivateMediaStream *this)
{
  return "AudioTrackPrivateMediaStream";
}

WTF::AtomStringImpl *WebCore::AudioTrackPrivateMediaStream::label@<X0>(WebCore::AudioTrackPrivateMediaStream *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::AtomStringImpl **a3@<X8>)
{
  WTF::AtomStringImpl *result;
  WTF::AtomStringImpl *v5;

  result = *(WTF::AtomStringImpl **)(*((_QWORD *)this + 15) + 56);
  if (result)
  {
    if ((*((_BYTE *)result + 16) & 0x10) != 0)
    {
      *(_DWORD *)result += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(result, a2);
      result = v5;
    }
  }
  *a3 = result;
  return result;
}

uint64_t WebCore::AudioTrackPrivateMediaStream::trackIndex(WebCore::AudioTrackPrivateMediaStream *this)
{
  return *((unsigned int *)this + 34);
}

WTF::AtomStringImpl *WebCore::AudioTrackPrivateMediaStream::trackUID@<X0>(WebCore::AudioTrackPrivateMediaStream *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::AtomStringImpl *result;
  WTF::AtomStringImpl *v5;

  result = *(WTF::AtomStringImpl **)(*((_QWORD *)this + 15) + 48);
  if (result)
  {
    if ((*((_BYTE *)result + 16) & 0x10) != 0)
    {
      *(_DWORD *)result += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(result, a2);
      result = v5;
    }
  }
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = 1;
  return result;
}

uint64_t WebCore::AudioTrackPrivateMediaStream::kind(WebCore::AudioTrackPrivateMediaStream *this)
{
  return 2;
}

uint64_t WebCore::AudioTrackPrivateMediaStream::isBackedByMediaStreamTrack(WebCore::AudioTrackPrivateMediaStream *this)
{
  return 1;
}

uint64_t WebCore::AudioTrackPrivateMediaStream::ptrCount(WebCore::AudioTrackPrivateMediaStream *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t WebCore::AudioTrackPrivateMediaStream::ptrCountWithoutThreadCheck(WebCore::AudioTrackPrivateMediaStream *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t WebCore::AudioTrackPrivateMediaStream::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 112);
  return this;
}

uint64_t WebCore::AudioTrackPrivateMediaStream::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 112);
  if (v1)
  {
    *(_DWORD *)(this + 112) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::AudioTrackPrivateMediaStream::ptrCount(WebCore::AudioTrackPrivateMediaStream *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t `non-virtual thunk to'WebCore::AudioTrackPrivateMediaStream::ptrCountWithoutThreadCheck(WebCore::AudioTrackPrivateMediaStream *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t `non-virtual thunk to'WebCore::AudioTrackPrivateMediaStream::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::AudioTrackPrivateMediaStream::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 8);
  if (v1)
  {
    *(_DWORD *)(this + 8) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void (*)(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&),void,WebCore::MediaDecodingConfiguration &,void ()(WebCore::MediaCapabilitiesDecodingInfo &&)>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore31MediaEngineConfigurationFactory27createDecodingConfigurationEONS2_26MediaDecodingConfigurationEONS_8FunctionIFvONS2_29MediaCapabilitiesDecodingInfoEEEEEN3__0clISC_PNS3_18MediaEngineFactoryEEEDaT_T0_S5_SB_EUlS8_E_vJS8_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  *a1 = off_1E3417A50;
  v3 = a1[23];
  a1[23] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 3), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore31MediaEngineConfigurationFactory27createDecodingConfigurationEONS2_26MediaDecodingConfigurationEONS_8FunctionIFvONS2_29MediaCapabilitiesDecodingInfoEEEEEN3__0clISC_PNS3_18MediaEngineFactoryEEEDaT_T0_S5_SB_EUlS8_E_vJS8_EED0Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;

  *a1 = off_1E3417A50;
  v3 = a1[23];
  a1[23] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 3), a2);
  return WTF::fastFree((WTF *)a1, v4);
}

void _ZN3WTF6Detail15CallableWrapperIZZN7WebCore31MediaEngineConfigurationFactory27createDecodingConfigurationEONS2_26MediaDecodingConfigurationEONS_8FunctionIFvONS2_29MediaCapabilitiesDecodingInfoEEEEEN3__0clISC_PNS3_18MediaEngineFactoryEEEDaT_T0_S5_SB_EUlS8_E_vJS8_EE4callES8_(uint64_t a1, _BYTE *a2)
{
  WebCore *v2;

  if (*a2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 16))(*(_QWORD *)(a1 + 184));
  }
  else
  {
    v2 = (WebCore *)(*(_QWORD *)(a1 + 16) + 16);
    *(_QWORD *)(a1 + 16) = v2;
    WebCore::MediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0::operator()<WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)>,WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *>(v2, (uint64_t)(a2 + 8), (_QWORD *)(a1 + 184));
  }
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore31MediaEngineConfigurationFactory27createEncodingConfigurationEONS2_26MediaEncodingConfigurationEONS_8FunctionIFvONS2_29MediaCapabilitiesEncodingInfoEEEEEN3__0clISC_PNS3_18MediaEngineFactoryEEEDaT_T0_S5_SB_EUlOSH_E_vJS8_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3417A78;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore31MediaEngineConfigurationFactory27createEncodingConfigurationEONS2_26MediaEncodingConfigurationEONS_8FunctionIFvONS2_29MediaCapabilitiesEncodingInfoEEEEEN3__0clISC_PNS3_18MediaEngineFactoryEEEDaT_T0_S5_SB_EUlOSH_E_vJS8_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E3417A78;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN7WebCore31MediaEngineConfigurationFactory27createEncodingConfigurationEONS2_26MediaEncodingConfigurationEONS_8FunctionIFvONS2_29MediaCapabilitiesEncodingInfoEEEEEN3__0clISC_PNS3_18MediaEngineFactoryEEEDaT_T0_S5_SB_EUlOSH_E_vJS8_EE4callES8_(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _OWORD v9[10];
  uint64_t v10;

  if (*a2)
  {
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a2);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4 + 16;
    WebCore::factories((WebCore *)a1);
    if (WebCore::factories(void)::factories + 16 * HIDWORD(qword_1EE2F8D90) == v4 + 16 || !*(_QWORD *)(v4 + 24))
    {
      v10 = 0;
      memset(v9, 0, sizeof(v9));
      (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v9);
      WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)((char *)v9 + 8), v8);
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v6 = &off_1E3417A78;
      v6[2] = v4 + 16;
      v6[3] = v5;
      *(_QWORD *)&v9[0] = v6;
      (*(void (**)(_QWORD, _BYTE *, _OWORD *))(**(_QWORD **)(v4 + 24) + 16))(*(_QWORD *)(v4 + 24), a2 + 8, v9);
      v7 = *(_QWORD *)&v9[0];
      *(_QWORD *)&v9[0] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivate::selectTracks(WebCore::MediaStreamPrivate &)::$_0,void,WebCore::MediaStreamTrackPrivate &>::call(uint64_t result, _BYTE *a2)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;

  if (a2[74])
    return result;
  v2 = *(_QWORD **)(result + 8);
  if (!a2[64])
  {
    if (*v2)
      return result;
LABEL_13:
    *v2 = a2;
    return result;
  }
  v3 = v2[1];
  ++v2;
  if (v3)
    v4 = 1;
  else
    v4 = a2[187] == 0;
  if (!v4 && a2[188] != 0)
    goto LABEL_13;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateMock::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3417B98;
  WebCore::MediaRecorderPrivateMock::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateMock::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0,void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E3417B98;
  WebCore::MediaRecorderPrivateMock::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0::~$_0(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateMock::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0,void>::call(uint64_t a1)
{
  double v1;
  uint64_t v2;

  v1 = *(double *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v2 + 16))(v2, a1 + 16, a1 + 24, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateAVFImpl::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &,double>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E3417BC0;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateAVFImpl::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &,double>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3417BC0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateAVFImpl::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &,double>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a2, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioTrackPrivateMediaStream::createRenderer(WebCore::AudioTrackPrivateMediaStream&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3417BE8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioTrackPrivateMediaStream::createRenderer(WebCore::AudioTrackPrivateMediaStream&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3417BE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioTrackPrivateMediaStream::createRenderer(WebCore::AudioTrackPrivateMediaStream&)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;

  v1 = result[1];
  if (!v1)
    return result;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return result;
  v3 = *(unsigned __int8 *)(v2 + 28);
  if (*(_BYTE *)(v2 + 28))
  {
    *(_BYTE *)(v2 + 28) = 0;
    v4 = *(_QWORD *)(v2 + 40);
    v5 = (unsigned __int8 *)(v4 + 144);
    if (__ldaxr((unsigned __int8 *)(v4 + 144)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v4 + 144);
LABEL_8:
    WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v4 + 152), v2 + 16);
    v7 = __ldxr(v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, v5))
      {
LABEL_13:
        v8 = *(_QWORD *)(v2 + 56);
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 144));
    goto LABEL_13;
  }
LABEL_15:
  v9 = *(_QWORD *)(v2 + 56);
  if (v9)
    v10 = *(float *)(v9 + 8);
  else
    v10 = 1.0;
  WebCore::AudioTrackPrivateMediaStream::createRenderer((WebCore::AudioTrackPrivateMediaStream *)(v2 - 88), (uint64_t *)&v16);
  result = v16;
  v11 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = v16;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    result = *(_QWORD **)(v2 + 56);
  }
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, float))(*result + 80))(result, v10);
  if (v3)
  {
    if (!*(_BYTE *)(v2 + 28))
    {
      v12 = *(_QWORD *)(v2 + 56);
      if (v12)
      {
        *(_BYTE *)(v2 + 28) = 1;
        v13 = (unsigned int *)(v2 - 80);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
        v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v15 = &off_1E3417C10;
        v15[1] = v2 - 88;
        v16 = v15;
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v12 + 48))(v12, &v16);
        result = v16;
        v16 = 0;
        if (result)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioTrackPrivateMediaStream::startRenderer(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3417C10;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioTrackPrivateMediaStream::startRenderer(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3417C10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioTrackPrivateMediaStream::startRenderer(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(v1 + 116))
  {
    v2 = *(_QWORD *)(v1 + 128);
    v3 = v1 + 104;
    v4 = (unsigned __int8 *)(v2 + 144);
    if (__ldaxr((unsigned __int8 *)(v2 + 144)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v2 + 144);
LABEL_6:
    v8 = v3;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    WTF::HashTable<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>>::add((uint64_t *)(v2 + 152), &v8, (uint64_t)&v7);
    result = v8;
    if (v8)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v6 = __ldxr(v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, v4))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 144));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CaptureDeviceManager::deviceChanged(void)::$_0,void>::call()
{
  uint64_t result;

  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)&unk_1ECE911E8);
  if ((result & 1) == 0)
    return WTF::RunLoop::TimerBase::start();
  return result;
}

uint64_t WebCore::StringConstraint::merge(uint64_t this, const WebCore::StringConstraint *a2)
{
  unsigned int *v3;
  const WTF::StringImpl *v4;
  uint64_t *v5;
  const WTF::StringImpl **v6;
  const WTF::StringImpl **v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  uint64_t *v15;
  const WTF::StringImpl **v16;
  const WTF::StringImpl **v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  const WTF::StringImpl *v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;

  v3 = (unsigned int *)this;
  if (*((_DWORD *)a2 + 7))
  {
    v26 = 0;
    v27 = 0;
    this = (uint64_t)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v26, (unsigned int *)a2 + 4);
    v5 = (uint64_t *)(v3 + 4);
    if (v3[7])
    {
      if (HIDWORD(v27))
      {
        v6 = (const WTF::StringImpl **)v26;
        v7 = (const WTF::StringImpl **)((char *)v26 + 8 * HIDWORD(v27));
        do
        {
          LODWORD(v8) = v3[7];
          if ((_DWORD)v8)
          {
            v9 = 0;
            while (1)
            {
              this = WTF::equal(*(WTF **)(*v5 + 8 * v9), *v6, v4);
              if ((this & 1) != 0)
                break;
              ++v9;
              v8 = v3[7];
              if (v9 >= v8)
                goto LABEL_9;
            }
          }
          else
          {
LABEL_9:
            if ((_DWORD)v8 == v3[6])
            {
              this = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v3 + 4), v8 + 1, (unint64_t)v6);
              v8 = v3[7];
              v10 = *((_QWORD *)v3 + 2);
              v11 = *(_DWORD **)this;
              if (*(_QWORD *)this)
                *v11 += 2;
              *(_QWORD *)(v10 + 8 * v8) = v11;
            }
            else
            {
              v12 = *v5;
              v13 = *v6;
              if (*v6)
                *(_DWORD *)v13 += 2;
              *(_QWORD *)(v12 + 8 * v8) = v13;
            }
            v3[7] = v8 + 1;
          }
          ++v6;
        }
        while (v6 != v7);
      }
    }
    else
    {
      this = (uint64_t)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 4, (unsigned int *)&v26);
    }
  }
  else
  {
    if (!*((_DWORD *)a2 + 11))
      return this;
    v26 = 0;
    v27 = 0;
  }
  if (*((_DWORD *)a2 + 11))
  {
    this = (uint64_t)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v26, (unsigned int *)a2 + 8);
    v15 = (uint64_t *)(v3 + 8);
    if (v3[11])
    {
      if (HIDWORD(v27))
      {
        v16 = (const WTF::StringImpl **)v26;
        v17 = (const WTF::StringImpl **)((char *)v26 + 8 * HIDWORD(v27));
        do
        {
          LODWORD(v18) = v3[11];
          if ((_DWORD)v18)
          {
            v19 = 0;
            while (1)
            {
              this = WTF::equal(*(WTF **)(*v15 + 8 * v19), *v16, v14);
              if ((this & 1) != 0)
                break;
              ++v19;
              v18 = v3[11];
              if (v19 >= v18)
                goto LABEL_30;
            }
          }
          else
          {
LABEL_30:
            if ((_DWORD)v18 == v3[10])
            {
              this = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v3 + 8), v18 + 1, (unint64_t)v16);
              v18 = v3[11];
              v20 = *((_QWORD *)v3 + 4);
              v21 = *(_DWORD **)this;
              if (*(_QWORD *)this)
                *v21 += 2;
              *(_QWORD *)(v20 + 8 * v18) = v21;
            }
            else
            {
              v22 = *v15;
              v23 = *v16;
              if (*v16)
                *(_DWORD *)v23 += 2;
              *(_QWORD *)(v22 + 8 * v18) = v23;
            }
            v3[11] = v18 + 1;
          }
          ++v16;
        }
        while (v16 != v17);
      }
    }
    else
    {
      this = (uint64_t)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 8, (unsigned int *)&v26);
    }
  }
  v24 = v26;
  if (!HIDWORD(v27))
  {
    if (!v26)
      return this;
LABEL_52:
    v26 = 0;
    LODWORD(v27) = 0;
    return WTF::fastFree(v24, a2);
  }
  v25 = 8 * HIDWORD(v27);
  do
  {
    this = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
      else
        *(_DWORD *)this -= 2;
    }
    v24 = (WTF *)((char *)v24 + 8);
    v25 -= 8;
  }
  while (v25);
  v24 = v26;
  if (v26)
    goto LABEL_52;
  return this;
}

uint64_t WebCore::MediaTrackConstraintSetMap::forEach(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E3418380;
  v4[1] = v3;
  v6 = v4;
  WebCore::MediaTrackConstraintSetMap::filter(a1, &v6);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t WebCore::MediaTrackConstraintSetMap::filter(uint64_t result, _QWORD *a2)
{
  uint64_t v3;

  v3 = result;
  if (!*(_BYTE *)(result + 48)
    || !*(_BYTE *)(result + 16) && !*(_BYTE *)(result + 24) && !*(_BYTE *)(result + 32) && !*(_BYTE *)(result + 40)
    || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 1, result),
        (result & 1) == 0))
  {
    if (!*(_BYTE *)(v3 + 104)
      || !*(_BYTE *)(v3 + 72) && !*(_BYTE *)(v3 + 80) && !*(_BYTE *)(v3 + 88) && !*(_BYTE *)(v3 + 96)
      || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 2, v3 + 56),
          (result & 1) == 0))
    {
      if (!*(_BYTE *)(v3 + 160)
        || !*(_BYTE *)(v3 + 128) && !*(_BYTE *)(v3 + 136) && !*(_BYTE *)(v3 + 144) && !*(_BYTE *)(v3 + 152)
        || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 7, v3 + 112),
            (result & 1) == 0))
      {
        if (!*(_BYTE *)(v3 + 216)
          || !*(_BYTE *)(v3 + 184) && !*(_BYTE *)(v3 + 192) && !*(_BYTE *)(v3 + 200) && !*(_BYTE *)(v3 + 208)
          || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 8, v3 + 168),
              (result & 1) == 0))
        {
          if (!*(_BYTE *)(v3 + 304)
            || !*(_BYTE *)(v3 + 248) && !*(_BYTE *)(v3 + 264) && !*(_BYTE *)(v3 + 280) && !*(_BYTE *)(v3 + 296)
            || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 3, v3 + 224), (result & 1) == 0))
          {
            if (!*(_BYTE *)(v3 + 392)
              || !*(_BYTE *)(v3 + 336) && !*(_BYTE *)(v3 + 352) && !*(_BYTE *)(v3 + 368) && !*(_BYTE *)(v3 + 384)
              || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 4, v3 + 312), (result & 1) == 0))
            {
              if (!*(_BYTE *)(v3 + 480)
                || !*(_BYTE *)(v3 + 424) && !*(_BYTE *)(v3 + 440) && !*(_BYTE *)(v3 + 456) && !*(_BYTE *)(v3 + 472)
                || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 6, v3 + 400), (result & 1) == 0))
              {
                if (!*(_BYTE *)(v3 + 504)
                  || !*(_BYTE *)(v3 + 498) && !*(_BYTE *)(v3 + 500)
                  || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 9, v3 + 488), (result & 1) == 0))
                {
                  if (!*(_BYTE *)(v3 + 608)
                    || !*(_DWORD *)(v3 + 588) && !*(_DWORD *)(v3 + 604)
                    || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 5, v3 + 560), (result & 1) == 0))
                  {
                    if (!*(_BYTE *)(v3 + 664)
                      || !*(_DWORD *)(v3 + 644) && !*(_DWORD *)(v3 + 660)
                      || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 10, v3 + 616), (result & 1) == 0))
                    {
                      if (!*(_BYTE *)(v3 + 720)
                        || !*(_DWORD *)(v3 + 700) && !*(_DWORD *)(v3 + 716)
                        || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 11, v3 + 672), (result & 1) == 0))
                      {
                        if (!*(_BYTE *)(v3 + 776)
                          || !*(_DWORD *)(v3 + 756) && !*(_DWORD *)(v3 + 772)
                          || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 15, v3 + 728), (result & 1) == 0))
                        {
                          if (!*(_BYTE *)(v3 + 864)
                            || !*(_BYTE *)(v3 + 808)
                            && !*(_BYTE *)(v3 + 824)
                            && !*(_BYTE *)(v3 + 840)
                            && !*(_BYTE *)(v3 + 856)
                            || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 16, v3 + 784), (result & 1) == 0))
                          {
                            if (!*(_BYTE *)(v3 + 888)
                              || !*(_BYTE *)(v3 + 882) && !*(_BYTE *)(v3 + 884)
                              || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 17, v3 + 872), (result & 1) == 0))
                            {
                              if (!*(_BYTE *)(v3 + 912)
                                || !*(_BYTE *)(v3 + 906) && !*(_BYTE *)(v3 + 908)
                                || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 18, v3 + 896), (result & 1) == 0))
                              {
                                if (*(_BYTE *)(v3 + 936) && (*(_BYTE *)(v3 + 930) || *(_BYTE *)(v3 + 932)))
                                  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, 19, v3 + 920);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 WebCore::MediaTrackConstraintSetMap::set(uint64_t a1, int a2, uint64_t a3)
{
  __n128 result;

  switch(a2)
  {
    case 1:
      if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a3 + 48))
      {
        if (*(_BYTE *)(a1 + 48))
        {
          *(_BYTE *)(a1 + 8) = *(_BYTE *)(a3 + 8);
          result = *(__n128 *)(a3 + 12);
          *(_OWORD *)(a1 + 25) = *(_OWORD *)(a3 + 25);
          *(__n128 *)(a1 + 12) = result;
        }
      }
      else if (*(_BYTE *)(a1 + 48))
      {
        *(_BYTE *)(a1 + 48) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)a1 = &unk_1E3360638;
        result = *(__n128 *)(a3 + 12);
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a3 + 25);
        *(__n128 *)(a1 + 12) = result;
        *(_QWORD *)a1 = &off_1E335FF28;
        *(_BYTE *)(a1 + 48) = 1;
      }
      break;
    case 2:
      if (*(unsigned __int8 *)(a1 + 104) == *(unsigned __int8 *)(a3 + 48))
      {
        if (*(_BYTE *)(a1 + 104))
        {
          *(_BYTE *)(a1 + 64) = *(_BYTE *)(a3 + 8);
          result = *(__n128 *)(a3 + 12);
          *(_OWORD *)(a1 + 81) = *(_OWORD *)(a3 + 25);
          *(__n128 *)(a1 + 68) = result;
        }
      }
      else if (*(_BYTE *)(a1 + 104))
      {
        *(_BYTE *)(a1 + 104) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(a1 + 56) = &unk_1E3360638;
        result = *(__n128 *)(a3 + 12);
        *(_OWORD *)(a1 + 81) = *(_OWORD *)(a3 + 25);
        *(__n128 *)(a1 + 68) = result;
        *(_QWORD *)(a1 + 56) = &off_1E335FF28;
        *(_BYTE *)(a1 + 104) = 1;
      }
      break;
    case 7:
      if (*(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a3 + 48))
      {
        if (*(_BYTE *)(a1 + 160))
        {
          *(_BYTE *)(a1 + 120) = *(_BYTE *)(a3 + 8);
          result = *(__n128 *)(a3 + 12);
          *(_OWORD *)(a1 + 137) = *(_OWORD *)(a3 + 25);
          *(__n128 *)(a1 + 124) = result;
        }
      }
      else if (*(_BYTE *)(a1 + 160))
      {
        *(_BYTE *)(a1 + 160) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(a1 + 112) = &unk_1E3360638;
        result = *(__n128 *)(a3 + 12);
        *(_OWORD *)(a1 + 137) = *(_OWORD *)(a3 + 25);
        *(__n128 *)(a1 + 124) = result;
        *(_QWORD *)(a1 + 112) = &off_1E335FF28;
        *(_BYTE *)(a1 + 160) = 1;
      }
      break;
    case 8:
      if (*(unsigned __int8 *)(a1 + 216) == *(unsigned __int8 *)(a3 + 48))
      {
        if (*(_BYTE *)(a1 + 216))
        {
          *(_BYTE *)(a1 + 176) = *(_BYTE *)(a3 + 8);
          result = *(__n128 *)(a3 + 12);
          *(_OWORD *)(a1 + 193) = *(_OWORD *)(a3 + 25);
          *(__n128 *)(a1 + 180) = result;
        }
      }
      else if (*(_BYTE *)(a1 + 216))
      {
        *(_BYTE *)(a1 + 216) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 176) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(a1 + 168) = &unk_1E3360638;
        result = *(__n128 *)(a3 + 12);
        *(_OWORD *)(a1 + 193) = *(_OWORD *)(a3 + 25);
        *(__n128 *)(a1 + 180) = result;
        *(_QWORD *)(a1 + 168) = &off_1E335FF28;
        *(_BYTE *)(a1 + 216) = 1;
      }
      break;
    default:
      return result;
  }
  return result;
}

{
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (a2 > 5)
  {
    if (a2 == 6)
    {
      if (*(unsigned __int8 *)(a1 + 480) == *(unsigned __int8 *)(a3 + 80))
      {
        if (*(_BYTE *)(a1 + 480))
        {
          *(_BYTE *)(a1 + 408) = *(_BYTE *)(a3 + 8);
          result = *(__n128 *)(a3 + 16);
          v10 = *(_OWORD *)(a3 + 32);
          v11 = *(_OWORD *)(a3 + 48);
          *(_OWORD *)(a1 + 457) = *(_OWORD *)(a3 + 57);
          *(_OWORD *)(a1 + 432) = v10;
          *(_OWORD *)(a1 + 448) = v11;
          *(__n128 *)(a1 + 416) = result;
        }
      }
      else if (*(_BYTE *)(a1 + 480))
      {
        *(_BYTE *)(a1 + 480) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 408) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(a1 + 400) = &off_1E3360660;
        result = *(__n128 *)(a3 + 16);
        v20 = *(_OWORD *)(a3 + 32);
        v21 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a1 + 457) = *(_OWORD *)(a3 + 57);
        *(_OWORD *)(a1 + 432) = v20;
        *(_OWORD *)(a1 + 448) = v21;
        *(__n128 *)(a1 + 416) = result;
        *(_QWORD *)(a1 + 400) = &off_1E335FF50;
        *(_BYTE *)(a1 + 480) = 1;
      }
    }
    else if (a2 == 16)
    {
      if (*(unsigned __int8 *)(a1 + 864) == *(unsigned __int8 *)(a3 + 80))
      {
        if (*(_BYTE *)(a1 + 864))
        {
          *(_BYTE *)(a1 + 792) = *(_BYTE *)(a3 + 8);
          result = *(__n128 *)(a3 + 16);
          v6 = *(_OWORD *)(a3 + 32);
          v7 = *(_OWORD *)(a3 + 48);
          *(_OWORD *)(a1 + 841) = *(_OWORD *)(a3 + 57);
          *(_OWORD *)(a1 + 816) = v6;
          *(_OWORD *)(a1 + 832) = v7;
          *(__n128 *)(a1 + 800) = result;
        }
      }
      else if (*(_BYTE *)(a1 + 864))
      {
        *(_BYTE *)(a1 + 864) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 792) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(a1 + 784) = &off_1E3360660;
        result = *(__n128 *)(a3 + 16);
        v14 = *(_OWORD *)(a3 + 32);
        v15 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a1 + 841) = *(_OWORD *)(a3 + 57);
        *(_OWORD *)(a1 + 816) = v14;
        *(_OWORD *)(a1 + 832) = v15;
        *(__n128 *)(a1 + 800) = result;
        *(_QWORD *)(a1 + 784) = &off_1E335FF50;
        *(_BYTE *)(a1 + 864) = 1;
      }
    }
  }
  else if (a2 == 3)
  {
    if (*(unsigned __int8 *)(a1 + 304) == *(unsigned __int8 *)(a3 + 80))
    {
      if (*(_BYTE *)(a1 + 304))
      {
        *(_BYTE *)(a1 + 232) = *(_BYTE *)(a3 + 8);
        result = *(__n128 *)(a3 + 16);
        v8 = *(_OWORD *)(a3 + 32);
        v9 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a1 + 281) = *(_OWORD *)(a3 + 57);
        *(_OWORD *)(a1 + 256) = v8;
        *(_OWORD *)(a1 + 272) = v9;
        *(__n128 *)(a1 + 240) = result;
      }
    }
    else if (*(_BYTE *)(a1 + 304))
    {
      *(_BYTE *)(a1 + 304) = 0;
    }
    else
    {
      v16 = *(_BYTE *)(a3 + 8);
      *(_QWORD *)(a1 + 224) = &off_1E3360660;
      v17 = a1 + 224;
      *(_BYTE *)(v17 + 8) = v16;
      result = *(__n128 *)(a3 + 16);
      v18 = *(_OWORD *)(a3 + 32);
      v19 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v17 + 57) = *(_OWORD *)(a3 + 57);
      *(_OWORD *)(v17 + 32) = v18;
      *(_OWORD *)(v17 + 48) = v19;
      *(__n128 *)(v17 + 16) = result;
      *(_QWORD *)v17 = &off_1E335FF50;
      *(_BYTE *)(v17 + 80) = 1;
    }
  }
  else if (a2 == 4)
  {
    if (*(unsigned __int8 *)(a1 + 392) == *(unsigned __int8 *)(a3 + 80))
    {
      if (*(_BYTE *)(a1 + 392))
      {
        *(_BYTE *)(a1 + 320) = *(_BYTE *)(a3 + 8);
        result = *(__n128 *)(a3 + 16);
        v4 = *(_OWORD *)(a3 + 32);
        v5 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a1 + 369) = *(_OWORD *)(a3 + 57);
        *(_OWORD *)(a1 + 344) = v4;
        *(_OWORD *)(a1 + 360) = v5;
        *(__n128 *)(a1 + 328) = result;
      }
    }
    else if (*(_BYTE *)(a1 + 392))
    {
      *(_BYTE *)(a1 + 392) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 320) = *(_BYTE *)(a3 + 8);
      *(_QWORD *)(a1 + 312) = &off_1E3360660;
      result = *(__n128 *)(a3 + 16);
      v12 = *(_OWORD *)(a3 + 32);
      v13 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 369) = *(_OWORD *)(a3 + 57);
      *(_OWORD *)(a1 + 344) = v12;
      *(_OWORD *)(a1 + 360) = v13;
      *(__n128 *)(a1 + 328) = result;
      *(_QWORD *)(a1 + 312) = &off_1E335FF50;
      *(_BYTE *)(a1 + 392) = 1;
    }
  }
  return result;
}

uint64_t WebCore::MediaTrackConstraintSetMap::set(uint64_t result, int a2, uint64_t a3)
{
  _DWORD *v3;

  v3 = (_DWORD *)(result + 497);
  switch(a2)
  {
    case 9:
      if (*(unsigned __int8 *)(result + 504) == *(unsigned __int8 *)(a3 + 16))
      {
        if (*(_BYTE *)(result + 504))
        {
          *(_BYTE *)(result + 496) = *(_BYTE *)(a3 + 8);
          *v3 = *(_DWORD *)(a3 + 9);
        }
      }
      else if (*(_BYTE *)(result + 504))
      {
        *(_BYTE *)(result + 504) = 0;
      }
      else
      {
        *(_BYTE *)(result + 496) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(result + 488) = &off_1E335FF78;
        *v3 = *(_DWORD *)(a3 + 9);
        *(_BYTE *)(result + 504) = 1;
      }
      break;
    case 12:
      if (*(unsigned __int8 *)(result + 528) == *(unsigned __int8 *)(a3 + 16))
      {
        if (*(_BYTE *)(result + 528))
        {
          *(_BYTE *)(result + 520) = *(_BYTE *)(a3 + 8);
          *(_DWORD *)(result + 521) = *(_DWORD *)(a3 + 9);
        }
      }
      else if (*(_BYTE *)(result + 528))
      {
        *(_BYTE *)(result + 528) = 0;
      }
      else
      {
        *(_BYTE *)(result + 520) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(result + 512) = &off_1E335FF78;
        *(_DWORD *)(result + 521) = *(_DWORD *)(a3 + 9);
        *(_BYTE *)(result + 528) = 1;
      }
      break;
    case 13:
      if (*(unsigned __int8 *)(result + 552) == *(unsigned __int8 *)(a3 + 16))
      {
        if (*(_BYTE *)(result + 552))
        {
          *(_BYTE *)(result + 544) = *(_BYTE *)(a3 + 8);
          *(_DWORD *)(result + 545) = *(_DWORD *)(a3 + 9);
        }
      }
      else if (*(_BYTE *)(result + 552))
      {
        *(_BYTE *)(result + 552) = 0;
      }
      else
      {
        *(_BYTE *)(result + 544) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(result + 536) = &off_1E335FF78;
        *(_DWORD *)(result + 545) = *(_DWORD *)(a3 + 9);
        *(_BYTE *)(result + 552) = 1;
      }
      break;
    case 17:
      if (*(unsigned __int8 *)(result + 888) == *(unsigned __int8 *)(a3 + 16))
      {
        if (*(_BYTE *)(result + 888))
        {
          *(_BYTE *)(result + 880) = *(_BYTE *)(a3 + 8);
          *(_DWORD *)(result + 881) = *(_DWORD *)(a3 + 9);
        }
      }
      else if (*(_BYTE *)(result + 888))
      {
        *(_BYTE *)(result + 888) = 0;
      }
      else
      {
        *(_BYTE *)(result + 880) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(result + 872) = &off_1E335FF78;
        *(_DWORD *)(result + 881) = *(_DWORD *)(a3 + 9);
        *(_BYTE *)(result + 888) = 1;
      }
      break;
    case 18:
      if (*(unsigned __int8 *)(result + 912) == *(unsigned __int8 *)(a3 + 16))
      {
        if (*(_BYTE *)(result + 912))
        {
          *(_BYTE *)(result + 904) = *(_BYTE *)(a3 + 8);
          *(_DWORD *)(result + 905) = *(_DWORD *)(a3 + 9);
        }
      }
      else if (*(_BYTE *)(result + 912))
      {
        *(_BYTE *)(result + 912) = 0;
      }
      else
      {
        *(_BYTE *)(result + 904) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(result + 896) = &off_1E335FF78;
        *(_DWORD *)(result + 905) = *(_DWORD *)(a3 + 9);
        *(_BYTE *)(result + 912) = 1;
      }
      break;
    case 19:
      if (*(unsigned __int8 *)(result + 936) == *(unsigned __int8 *)(a3 + 16))
      {
        if (*(_BYTE *)(result + 936))
        {
          *(_BYTE *)(result + 928) = *(_BYTE *)(a3 + 8);
          *(_DWORD *)(result + 929) = *(_DWORD *)(a3 + 9);
        }
      }
      else if (*(_BYTE *)(result + 936))
      {
        *(_BYTE *)(result + 936) = 0;
      }
      else
      {
        *(_BYTE *)(result + 928) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(result + 920) = &off_1E335FF78;
        *(_DWORD *)(result + 929) = *(_DWORD *)(a3 + 9);
        *(_BYTE *)(result + 936) = 1;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WebCore::MediaTrackConstraintSetMap::set(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v4 = result;
  if ((int)a2 > 10)
  {
    if ((_DWORD)a2 == 11)
    {
      result += 672;
      v14 = *(unsigned __int8 *)(v4 + 720);
      if (v14 != *(unsigned __int8 *)(a3 + 48))
      {
        if (!*(_BYTE *)(v4 + 720))
        {
          *(_BYTE *)(v4 + 680) = *(_BYTE *)(a3 + 8);
          *(_QWORD *)(v4 + 672) = &off_1E335FFA0;
          *(_QWORD *)(v4 + 696) = 0;
          *(_QWORD *)(v4 + 688) = 0;
          v19 = *(_QWORD *)(a3 + 16);
          *(_QWORD *)(a3 + 16) = 0;
          *(_QWORD *)(v4 + 688) = v19;
          LODWORD(v19) = *(_DWORD *)(a3 + 24);
          *(_DWORD *)(a3 + 24) = 0;
          *(_DWORD *)(v4 + 696) = v19;
          LODWORD(v19) = *(_DWORD *)(a3 + 28);
          *(_DWORD *)(a3 + 28) = 0;
          *(_DWORD *)(v4 + 700) = v19;
          *(_QWORD *)(v4 + 712) = 0;
          *(_QWORD *)(v4 + 704) = 0;
          v20 = *(_QWORD *)(a3 + 32);
          *(_QWORD *)(a3 + 32) = 0;
          *(_QWORD *)(v4 + 704) = v20;
          LODWORD(v20) = *(_DWORD *)(a3 + 40);
          *(_DWORD *)(a3 + 40) = 0;
          *(_DWORD *)(v4 + 712) = v20;
          LODWORD(v20) = *(_DWORD *)(a3 + 44);
          *(_DWORD *)(a3 + 44) = 0;
          *(_DWORD *)(v4 + 716) = v20;
          *(_BYTE *)(v4 + 720) = 1;
          return result;
        }
        return std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100](result, a2);
      }
    }
    else
    {
      if ((_DWORD)a2 != 15)
        return result;
      result += 728;
      v14 = *(unsigned __int8 *)(v4 + 776);
      if (v14 != *(unsigned __int8 *)(a3 + 48))
      {
        if (!*(_BYTE *)(v4 + 776))
        {
          *(_BYTE *)(v4 + 736) = *(_BYTE *)(a3 + 8);
          *(_QWORD *)(v4 + 728) = &off_1E335FFA0;
          *(_QWORD *)(v4 + 752) = 0;
          *(_QWORD *)(v4 + 744) = 0;
          v15 = *(_QWORD *)(a3 + 16);
          *(_QWORD *)(a3 + 16) = 0;
          *(_QWORD *)(v4 + 744) = v15;
          LODWORD(v15) = *(_DWORD *)(a3 + 24);
          *(_DWORD *)(a3 + 24) = 0;
          *(_DWORD *)(v4 + 752) = v15;
          LODWORD(v15) = *(_DWORD *)(a3 + 28);
          *(_DWORD *)(a3 + 28) = 0;
          *(_DWORD *)(v4 + 756) = v15;
          *(_QWORD *)(v4 + 768) = 0;
          *(_QWORD *)(v4 + 760) = 0;
          v16 = *(_QWORD *)(a3 + 32);
          *(_QWORD *)(a3 + 32) = 0;
          *(_QWORD *)(v4 + 760) = v16;
          LODWORD(v16) = *(_DWORD *)(a3 + 40);
          *(_DWORD *)(a3 + 40) = 0;
          *(_DWORD *)(v4 + 768) = v16;
          LODWORD(v16) = *(_DWORD *)(a3 + 44);
          *(_DWORD *)(a3 + 44) = 0;
          *(_DWORD *)(v4 + 772) = v16;
          *(_BYTE *)(v4 + 776) = 1;
          return result;
        }
        return std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100](result, a2);
      }
    }
LABEL_30:
    if (v14)
      return WebCore::StringConstraint::operator=(result, a3);
    return result;
  }
  if ((_DWORD)a2 == 5)
  {
    result += 560;
    v14 = *(unsigned __int8 *)(v4 + 608);
    if (v14 != *(unsigned __int8 *)(a3 + 48))
    {
      if (!*(_BYTE *)(v4 + 608))
      {
        *(_BYTE *)(v4 + 568) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(v4 + 560) = &off_1E335FFA0;
        *(_QWORD *)(v4 + 584) = 0;
        *(_QWORD *)(v4 + 576) = 0;
        v17 = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(v4 + 576) = v17;
        LODWORD(v17) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 24) = 0;
        *(_DWORD *)(v4 + 584) = v17;
        LODWORD(v17) = *(_DWORD *)(a3 + 28);
        *(_DWORD *)(a3 + 28) = 0;
        *(_DWORD *)(v4 + 588) = v17;
        *(_QWORD *)(v4 + 600) = 0;
        *(_QWORD *)(v4 + 592) = 0;
        v18 = *(_QWORD *)(a3 + 32);
        *(_QWORD *)(a3 + 32) = 0;
        *(_QWORD *)(v4 + 592) = v18;
        LODWORD(v18) = *(_DWORD *)(a3 + 40);
        *(_DWORD *)(a3 + 40) = 0;
        *(_DWORD *)(v4 + 600) = v18;
        LODWORD(v18) = *(_DWORD *)(a3 + 44);
        *(_DWORD *)(a3 + 44) = 0;
        *(_DWORD *)(v4 + 604) = v18;
        *(_BYTE *)(v4 + 608) = 1;
        return result;
      }
      return std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100](result, a2);
    }
    goto LABEL_30;
  }
  if ((_DWORD)a2 != 10)
    return result;
  v5 = *(unsigned __int8 *)(a3 + 48);
  if (*(_BYTE *)(a3 + 48))
  {
    v6 = *(char **)(a3 + 16);
    v7 = *(unsigned int *)(a3 + 28);
    v8 = &v6[8 * v7];
    if ((_DWORD)v7)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a3 + 16);
      v11 = &v6[8 * v7];
      v12 = v11;
      do
      {
        v13 = *(WTF::StringImpl **)v6;
        if (!*(_QWORD *)v6 || !*((_DWORD *)v13 + 1))
        {
          if (v12 == (char *)(*(_QWORD *)(a3 + 16) + 8 * *(unsigned int *)(a3 + 28)))
          {
            v12 = v6;
          }
          else if (v6 != v11)
          {
            memmove(v12, v11, v10 - (_QWORD)v11);
            v12 += v10 - (_QWORD)v11;
            v13 = *(WTF::StringImpl **)v6;
          }
          *(_QWORD *)v6 = 0;
          v11 = v6 + 8;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, a2);
            else
              *(_DWORD *)v13 -= 2;
          }
          ++v9;
        }
        v6 += 8;
        v10 += 8;
      }
      while (v6 < v8);
      v6 = *(char **)(a3 + 16);
      v21 = *(unsigned int *)(a3 + 28);
      LODWORD(v7) = *(_DWORD *)(a3 + 28);
      v8 = v12;
    }
    else
    {
      v21 = 0;
      v9 = 0;
      v11 = &v6[8 * v7];
    }
    v22 = &v6[8 * v21];
    if (v11 != v22)
    {
      memmove(v8, v11, v22 - v11);
      LODWORD(v7) = *(_DWORD *)(a3 + 28);
    }
    *(_DWORD *)(a3 + 28) = v7 - v9;
    v23 = *(char **)(a3 + 32);
    v24 = *(unsigned int *)(a3 + 44);
    v25 = &v23[8 * v24];
    if ((_DWORD)v24)
    {
      v26 = 0;
      v27 = *(_QWORD *)(a3 + 32);
      v28 = &v23[8 * v24];
      v29 = v28;
      do
      {
        v30 = *(WTF::StringImpl **)v23;
        if (!*(_QWORD *)v23 || !*((_DWORD *)v30 + 1))
        {
          if (v29 == (char *)(*(_QWORD *)(a3 + 32) + 8 * *(unsigned int *)(a3 + 44)))
          {
            v29 = v23;
          }
          else if (v23 != v28)
          {
            memmove(v29, v28, v27 - (_QWORD)v28);
            v29 += v27 - (_QWORD)v28;
            v30 = *(WTF::StringImpl **)v23;
          }
          *(_QWORD *)v23 = 0;
          v28 = v23 + 8;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, a2);
            else
              *(_DWORD *)v30 -= 2;
          }
          ++v26;
        }
        v23 += 8;
        v27 += 8;
      }
      while (v23 < v25);
      v23 = *(char **)(a3 + 32);
      v31 = *(unsigned int *)(a3 + 44);
      LODWORD(v24) = *(_DWORD *)(a3 + 44);
      v25 = v29;
    }
    else
    {
      v31 = 0;
      v26 = 0;
      v28 = &v23[8 * v24];
    }
    v32 = &v23[8 * v31];
    if (v28 != v32)
    {
      memmove(v25, v28, v32 - v28);
      LODWORD(v24) = *(_DWORD *)(a3 + 44);
    }
    *(_DWORD *)(a3 + 44) = v24 - v26;
    v5 = *(unsigned __int8 *)(a3 + 48);
  }
  result = v4 + 616;
  if (*(unsigned __int8 *)(v4 + 664) == v5)
  {
    if (!*(_BYTE *)(v4 + 664))
      return result;
    return WebCore::StringConstraint::operator=(result, a3);
  }
  if (*(_BYTE *)(v4 + 664))
    return std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100](result, a2);
  *(_BYTE *)(v4 + 624) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(v4 + 616) = &off_1E335FFA0;
  *(_QWORD *)(v4 + 640) = 0;
  *(_QWORD *)(v4 + 632) = 0;
  v33 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(v4 + 632) = v33;
  LODWORD(v33) = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)(v4 + 640) = v33;
  LODWORD(v33) = *(_DWORD *)(a3 + 28);
  *(_DWORD *)(a3 + 28) = 0;
  *(_DWORD *)(v4 + 644) = v33;
  *(_QWORD *)(v4 + 656) = 0;
  *(_QWORD *)(v4 + 648) = 0;
  v34 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(v4 + 648) = v34;
  LODWORD(v34) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a3 + 40) = 0;
  *(_DWORD *)(v4 + 656) = v34;
  LODWORD(v34) = *(_DWORD *)(a3 + 44);
  *(_DWORD *)(a3 + 44) = 0;
  *(_DWORD *)(v4 + 660) = v34;
  *(_BYTE *)(v4 + 664) = 1;
  return result;
}

double WebCore::MediaTrackConstraintSetMap::set(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;
  void (**v21)(WebCore::IntConstraint *__hidden);
  char v22;
  _BYTE v23[39];
  _OWORD v24[2];
  char v25;

  switch(*(_BYTE *)(a3 + 8))
  {
    case 0:
      v22 = 0;
      *(_OWORD *)&v23[3] = *(_OWORD *)(a3 + 12);
      *(_OWORD *)&v23[16] = *(_OWORD *)(a3 + 25);
      v21 = &off_1E335FF28;
      LOBYTE(v24[0]) = 1;
      *(_QWORD *)&result = WebCore::MediaTrackConstraintSetMap::set(a1, (int)a2, (uint64_t)&v21).n128_u64[0];
      break;
    case 1:
      v22 = 1;
      v10 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)&v23[7] = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v23[23] = v10;
      v24[0] = *(_OWORD *)(a3 + 48);
      *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)(a3 + 57);
      v21 = &off_1E335FF50;
      v25 = 1;
      *(_QWORD *)&result = WebCore::MediaTrackConstraintSetMap::set(a1, (int)a2, (uint64_t)&v21).n128_u64[0];
      break;
    case 2:
      v22 = 2;
      v21 = &off_1E335FF78;
      *(_DWORD *)v23 = *(_DWORD *)(a3 + 9);
      v23[7] = 1;
      WebCore::MediaTrackConstraintSetMap::set(a1, (int)a2, (uint64_t)&v21);
      break;
    case 3:
      v22 = 3;
      v21 = &off_1E335FFA0;
      v7 = *(unsigned int *)(a3 + 28);
      *(_QWORD *)&v23[7] = 0;
      *(_DWORD *)&v23[15] = 0;
      *(_DWORD *)&v23[19] = v7;
      if ((_DWORD)v7)
      {
        if (v7 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x196285134);
        }
        v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
        *(_DWORD *)&v23[15] = v7;
        *(_QWORD *)&v23[7] = v11;
        v12 = *(unsigned int *)(a3 + 28);
        if ((_DWORD)v12)
        {
          v13 = *(_DWORD ***)(a3 + 16);
          v14 = 8 * v12;
          do
          {
            v15 = *v13;
            if (*v13)
              *v15 += 2;
            *v11++ = v15;
            ++v13;
            v14 -= 8;
          }
          while (v14);
        }
      }
      v8 = *(unsigned int *)(a3 + 44);
      *(_QWORD *)&v23[23] = 0;
      *(_DWORD *)&v23[31] = 0;
      *(_DWORD *)&v23[35] = v8;
      if ((_DWORD)v8)
      {
        if (v8 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19628513CLL);
        }
        v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v8));
        *(_DWORD *)&v23[31] = v8;
        *(_QWORD *)&v23[23] = v16;
        v17 = *(unsigned int *)(a3 + 44);
        if ((_DWORD)v17)
        {
          v18 = *(_DWORD ***)(a3 + 32);
          v19 = 8 * v17;
          do
          {
            v20 = *v18;
            if (*v18)
              *v20 += 2;
            *v16++ = v20;
            ++v18;
            v19 -= 8;
          }
          while (v19);
        }
      }
      LOBYTE(v24[0]) = 1;
      WebCore::MediaTrackConstraintSetMap::set(a1, a2, (uint64_t)&v21);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v9);
      break;
    default:
      return result;
  }
  return result;
}

__n128 WebCore::MediaTrackConstraintSetMap::merge(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  int v7;
  int v8;
  BOOL v9;
  int v12;
  int v13;
  BOOL v14;
  int v17;
  int v18;
  BOOL v19;
  int v22;
  __n128 result;

  switch(a2)
  {
    case 1:
      if (*(_BYTE *)(a1 + 48))
      {
        v3 = *(unsigned __int8 *)(a3 + 16);
        if (*(_BYTE *)(a3 + 16))
          v4 = 0;
        else
          v4 = *(_BYTE *)(a3 + 24) == 0;
        if (!v4 || *(_BYTE *)(a3 + 32) != 0 || *(_BYTE *)(a3 + 40) != 0)
        {
          if (*(_BYTE *)(a3 + 32))
          {
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a3 + 28);
            *(_BYTE *)(a1 + 32) = 1;
            v3 = *(unsigned __int8 *)(a3 + 16);
          }
          if (v3)
          {
            *(_DWORD *)(a1 + 12) = *(_DWORD *)(a3 + 12);
            *(_BYTE *)(a1 + 16) = 1;
          }
          if (*(_BYTE *)(a3 + 24))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a3 + 20);
            *(_BYTE *)(a1 + 24) = 1;
          }
          if (*(_BYTE *)(a3 + 40))
          {
            v7 = *(_DWORD *)(a3 + 36);
            if (!*(_BYTE *)(a1 + 40) || v7 > *(_DWORD *)(a1 + 36))
            {
              *(_DWORD *)(a1 + 36) = v7;
              *(_BYTE *)(a1 + 40) = 1;
            }
          }
        }
      }
      else
      {
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)a1 = &unk_1E3360638;
        result = *(__n128 *)(a3 + 12);
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a3 + 25);
        *(__n128 *)(a1 + 12) = result;
        *(_QWORD *)a1 = &off_1E335FF28;
        *(_BYTE *)(a1 + 48) = 1;
      }
      break;
    case 2:
      if (*(_BYTE *)(a1 + 104))
      {
        v8 = *(unsigned __int8 *)(a3 + 16);
        if (*(_BYTE *)(a3 + 16))
          v9 = 0;
        else
          v9 = *(_BYTE *)(a3 + 24) == 0;
        if (!v9 || *(_BYTE *)(a3 + 32) != 0 || *(_BYTE *)(a3 + 40) != 0)
        {
          if (*(_BYTE *)(a3 + 32))
          {
            *(_DWORD *)(a1 + 84) = *(_DWORD *)(a3 + 28);
            *(_BYTE *)(a1 + 88) = 1;
            v8 = *(unsigned __int8 *)(a3 + 16);
          }
          if (v8)
          {
            *(_DWORD *)(a1 + 68) = *(_DWORD *)(a3 + 12);
            *(_BYTE *)(a1 + 72) = 1;
          }
          if (*(_BYTE *)(a3 + 24))
          {
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(a3 + 20);
            *(_BYTE *)(a1 + 80) = 1;
          }
          if (*(_BYTE *)(a3 + 40))
          {
            v12 = *(_DWORD *)(a3 + 36);
            if (!*(_BYTE *)(a1 + 96) || v12 > *(_DWORD *)(a1 + 92))
            {
              *(_DWORD *)(a1 + 92) = v12;
              *(_BYTE *)(a1 + 96) = 1;
            }
          }
        }
      }
      else
      {
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(a1 + 56) = &unk_1E3360638;
        result = *(__n128 *)(a3 + 12);
        *(_OWORD *)(a1 + 81) = *(_OWORD *)(a3 + 25);
        *(__n128 *)(a1 + 68) = result;
        *(_QWORD *)(a1 + 56) = &off_1E335FF28;
        *(_BYTE *)(a1 + 104) = 1;
      }
      break;
    case 7:
      if (*(_BYTE *)(a1 + 160))
      {
        v13 = *(unsigned __int8 *)(a3 + 16);
        if (*(_BYTE *)(a3 + 16))
          v14 = 0;
        else
          v14 = *(_BYTE *)(a3 + 24) == 0;
        if (!v14 || *(_BYTE *)(a3 + 32) != 0 || *(_BYTE *)(a3 + 40) != 0)
        {
          if (*(_BYTE *)(a3 + 32))
          {
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(a3 + 28);
            *(_BYTE *)(a1 + 144) = 1;
            v13 = *(unsigned __int8 *)(a3 + 16);
          }
          if (v13)
          {
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(a3 + 12);
            *(_BYTE *)(a1 + 128) = 1;
          }
          if (*(_BYTE *)(a3 + 24))
          {
            *(_DWORD *)(a1 + 132) = *(_DWORD *)(a3 + 20);
            *(_BYTE *)(a1 + 136) = 1;
          }
          if (*(_BYTE *)(a3 + 40))
          {
            v17 = *(_DWORD *)(a3 + 36);
            if (!*(_BYTE *)(a1 + 152) || v17 > *(_DWORD *)(a1 + 148))
            {
              *(_DWORD *)(a1 + 148) = v17;
              *(_BYTE *)(a1 + 152) = 1;
            }
          }
        }
      }
      else
      {
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(a1 + 112) = &unk_1E3360638;
        result = *(__n128 *)(a3 + 12);
        *(_OWORD *)(a1 + 137) = *(_OWORD *)(a3 + 25);
        *(__n128 *)(a1 + 124) = result;
        *(_QWORD *)(a1 + 112) = &off_1E335FF28;
        *(_BYTE *)(a1 + 160) = 1;
      }
      break;
    case 8:
      if (*(_BYTE *)(a1 + 216))
      {
        v18 = *(unsigned __int8 *)(a3 + 16);
        if (*(_BYTE *)(a3 + 16))
          v19 = 0;
        else
          v19 = *(_BYTE *)(a3 + 24) == 0;
        if (!v19 || *(_BYTE *)(a3 + 32) != 0 || *(_BYTE *)(a3 + 40) != 0)
        {
          if (*(_BYTE *)(a3 + 32))
          {
            *(_DWORD *)(a1 + 196) = *(_DWORD *)(a3 + 28);
            *(_BYTE *)(a1 + 200) = 1;
            v18 = *(unsigned __int8 *)(a3 + 16);
          }
          if (v18)
          {
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(a3 + 12);
            *(_BYTE *)(a1 + 184) = 1;
          }
          if (*(_BYTE *)(a3 + 24))
          {
            *(_DWORD *)(a1 + 188) = *(_DWORD *)(a3 + 20);
            *(_BYTE *)(a1 + 192) = 1;
          }
          if (*(_BYTE *)(a3 + 40))
          {
            v22 = *(_DWORD *)(a3 + 36);
            if (!*(_BYTE *)(a1 + 208) || v22 > *(_DWORD *)(a1 + 204))
            {
              *(_DWORD *)(a1 + 204) = v22;
              *(_BYTE *)(a1 + 208) = 1;
            }
          }
        }
      }
      else
      {
        *(_BYTE *)(a1 + 176) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(a1 + 168) = &unk_1E3360638;
        result = *(__n128 *)(a3 + 12);
        *(_OWORD *)(a1 + 193) = *(_OWORD *)(a3 + 25);
        *(__n128 *)(a1 + 180) = result;
        *(_QWORD *)(a1 + 168) = &off_1E335FF28;
        *(_BYTE *)(a1 + 216) = 1;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WebCore::MediaTrackConstraintSetMap::merge(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  double v5;
  _BYTE *v6;
  int v7;
  double v8;
  int v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double v24;

  if (a2 > 5)
  {
    if (a2 == 6)
    {
      if (*(_BYTE *)(result + 480))
      {
        v9 = *(unsigned __int8 *)(a3 + 24);
        if (!*(_BYTE *)(a3 + 24) && !*(_BYTE *)(a3 + 40) && !*(_BYTE *)(a3 + 56) && !*(_BYTE *)(a3 + 72))
          return result;
        if (*(_BYTE *)(a3 + 56))
        {
          *(_QWORD *)(result + 448) = *(_QWORD *)(a3 + 48);
          *(_BYTE *)(result + 456) = 1;
          v9 = *(unsigned __int8 *)(a3 + 24);
        }
        if (v9)
        {
          *(_QWORD *)(result + 416) = *(_QWORD *)(a3 + 16);
          *(_BYTE *)(result + 424) = 1;
        }
        if (*(_BYTE *)(a3 + 40))
        {
          *(_QWORD *)(result + 432) = *(_QWORD *)(a3 + 32);
          *(_BYTE *)(result + 440) = 1;
        }
        if (!*(_BYTE *)(a3 + 72))
          return result;
        v10 = *(double *)(a3 + 64);
        if (*(_BYTE *)(result + 472))
        {
          if (v10 <= *(double *)(result + 464))
            return result;
        }
        v6 = (_BYTE *)(result + 472);
        *(double *)(result + 464) = v10;
      }
      else
      {
        v6 = (_BYTE *)(result + 480);
        *(_BYTE *)(result + 408) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(result + 400) = &off_1E3360660;
        v21 = *(_OWORD *)(a3 + 16);
        v22 = *(_OWORD *)(a3 + 32);
        v23 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(result + 457) = *(_OWORD *)(a3 + 57);
        *(_OWORD *)(result + 432) = v22;
        *(_OWORD *)(result + 448) = v23;
        *(_OWORD *)(result + 416) = v21;
        *(_QWORD *)(result + 400) = &off_1E335FF50;
      }
    }
    else
    {
      if (a2 != 16)
        return result;
      if (*(_BYTE *)(result + 864))
      {
        v4 = *(unsigned __int8 *)(a3 + 24);
        if (!*(_BYTE *)(a3 + 24) && !*(_BYTE *)(a3 + 40) && !*(_BYTE *)(a3 + 56) && !*(_BYTE *)(a3 + 72))
          return result;
        if (*(_BYTE *)(a3 + 56))
        {
          *(_QWORD *)(result + 832) = *(_QWORD *)(a3 + 48);
          *(_BYTE *)(result + 840) = 1;
          v4 = *(unsigned __int8 *)(a3 + 24);
        }
        if (v4)
        {
          *(_QWORD *)(result + 800) = *(_QWORD *)(a3 + 16);
          *(_BYTE *)(result + 808) = 1;
        }
        if (*(_BYTE *)(a3 + 40))
        {
          *(_QWORD *)(result + 816) = *(_QWORD *)(a3 + 32);
          *(_BYTE *)(result + 824) = 1;
        }
        if (!*(_BYTE *)(a3 + 72))
          return result;
        v5 = *(double *)(a3 + 64);
        if (*(_BYTE *)(result + 856))
        {
          if (v5 <= *(double *)(result + 848))
            return result;
        }
        v6 = (_BYTE *)(result + 856);
        *(double *)(result + 848) = v5;
      }
      else
      {
        v6 = (_BYTE *)(result + 864);
        *(_BYTE *)(result + 792) = *(_BYTE *)(a3 + 8);
        *(_QWORD *)(result + 784) = &off_1E3360660;
        v14 = *(_OWORD *)(a3 + 16);
        v15 = *(_OWORD *)(a3 + 32);
        v16 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(result + 841) = *(_OWORD *)(a3 + 57);
        *(_OWORD *)(result + 816) = v15;
        *(_OWORD *)(result + 832) = v16;
        *(_OWORD *)(result + 800) = v14;
        *(_QWORD *)(result + 784) = &off_1E335FF50;
      }
    }
LABEL_71:
    *v6 = 1;
    return result;
  }
  if (a2 == 3)
  {
    if (*(_BYTE *)(result + 304))
    {
      v7 = *(unsigned __int8 *)(a3 + 24);
      if (!*(_BYTE *)(a3 + 24) && !*(_BYTE *)(a3 + 40) && !*(_BYTE *)(a3 + 56) && !*(_BYTE *)(a3 + 72))
        return result;
      if (*(_BYTE *)(a3 + 56))
      {
        *(_QWORD *)(result + 272) = *(_QWORD *)(a3 + 48);
        *(_BYTE *)(result + 280) = 1;
        v7 = *(unsigned __int8 *)(a3 + 24);
      }
      if (v7)
      {
        *(_QWORD *)(result + 240) = *(_QWORD *)(a3 + 16);
        *(_BYTE *)(result + 248) = 1;
      }
      if (*(_BYTE *)(a3 + 40))
      {
        *(_QWORD *)(result + 256) = *(_QWORD *)(a3 + 32);
        *(_BYTE *)(result + 264) = 1;
      }
      if (!*(_BYTE *)(a3 + 72))
        return result;
      v8 = *(double *)(a3 + 64);
      if (*(_BYTE *)(result + 296))
      {
        if (v8 <= *(double *)(result + 288))
          return result;
      }
      v6 = (_BYTE *)(result + 296);
      *(double *)(result + 288) = v8;
    }
    else
    {
      v6 = (_BYTE *)(result + 304);
      v17 = *(_BYTE *)(a3 + 8);
      *(_QWORD *)(result + 224) = &off_1E3360660;
      result += 224;
      *(_BYTE *)(result + 8) = v17;
      v18 = *(_OWORD *)(a3 + 16);
      v19 = *(_OWORD *)(a3 + 32);
      v20 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(result + 57) = *(_OWORD *)(a3 + 57);
      *(_OWORD *)(result + 32) = v19;
      *(_OWORD *)(result + 48) = v20;
      *(_OWORD *)(result + 16) = v18;
      *(_QWORD *)result = &off_1E335FF50;
    }
    goto LABEL_71;
  }
  if (a2 != 4)
    return result;
  if (!*(_BYTE *)(result + 392))
  {
    v6 = (_BYTE *)(result + 392);
    *(_BYTE *)(result + 320) = *(_BYTE *)(a3 + 8);
    *(_QWORD *)(result + 312) = &off_1E3360660;
    v11 = *(_OWORD *)(a3 + 16);
    v12 = *(_OWORD *)(a3 + 32);
    v13 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(result + 369) = *(_OWORD *)(a3 + 57);
    *(_OWORD *)(result + 344) = v12;
    *(_OWORD *)(result + 360) = v13;
    *(_OWORD *)(result + 328) = v11;
    *(_QWORD *)(result + 312) = &off_1E335FF50;
    goto LABEL_71;
  }
  v3 = *(unsigned __int8 *)(a3 + 24);
  if (*(_BYTE *)(a3 + 24) || *(_BYTE *)(a3 + 40) || *(_BYTE *)(a3 + 56) || *(_BYTE *)(a3 + 72))
  {
    if (*(_BYTE *)(a3 + 56))
    {
      *(_QWORD *)(result + 360) = *(_QWORD *)(a3 + 48);
      *(_BYTE *)(result + 368) = 1;
      v3 = *(unsigned __int8 *)(a3 + 24);
    }
    if (v3)
    {
      *(_QWORD *)(result + 328) = *(_QWORD *)(a3 + 16);
      *(_BYTE *)(result + 336) = 1;
    }
    if (*(_BYTE *)(a3 + 40))
    {
      *(_QWORD *)(result + 344) = *(_QWORD *)(a3 + 32);
      *(_BYTE *)(result + 352) = 1;
    }
    if (*(_BYTE *)(a3 + 72))
    {
      v24 = *(double *)(a3 + 64);
      if (!*(_BYTE *)(result + 384) || v24 > *(double *)(result + 376))
      {
        v6 = (_BYTE *)(result + 384);
        *(double *)(result + 376) = v24;
        goto LABEL_71;
      }
    }
  }
  return result;
}

_BYTE *WebCore::MediaTrackConstraintSetMap::merge(_BYTE *result, int a2, WebCore::StringConstraint *a3)
{
  _BYTE *v3;
  uint64_t v4;

  v3 = result;
  if (a2 <= 10)
  {
    if (a2 == 5)
    {
      v4 = (uint64_t)(result + 560);
      if (!v3[608])
      {
        result = (_BYTE *)std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint const&,WebCore::StringConstraint*>(v4, (uint64_t)a3);
        v3[608] = 1;
        return result;
      }
    }
    else
    {
      if (a2 != 10)
        return result;
      v4 = (uint64_t)(result + 616);
      if (!v3[664])
      {
        result = (_BYTE *)std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint const&,WebCore::StringConstraint*>(v4, (uint64_t)a3);
        v3[664] = 1;
        return result;
      }
    }
    return (_BYTE *)WebCore::StringConstraint::merge(v4, a3);
  }
  if (a2 != 11)
  {
    if (a2 != 15)
      return result;
    v4 = (uint64_t)(result + 728);
    if (!v3[776])
    {
      result = (_BYTE *)std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint const&,WebCore::StringConstraint*>(v4, (uint64_t)a3);
      v3[776] = 1;
      return result;
    }
    return (_BYTE *)WebCore::StringConstraint::merge(v4, a3);
  }
  v4 = (uint64_t)(result + 672);
  if (v3[720])
    return (_BYTE *)WebCore::StringConstraint::merge(v4, a3);
  result = (_BYTE *)std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint const&,WebCore::StringConstraint*>(v4, (uint64_t)a3);
  v3[720] = 1;
  return result;
}

uint64_t WebCore::MediaTrackConstraintSetMap::merge(uint64_t result, int a2, _BYTE *a3)
{
  _WORD *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v3 = (_WORD *)(result + 497);
  switch(a2)
  {
    case 9:
      if (*(_BYTE *)(result + 504))
      {
        if (a3[10])
          *v3 = a3[9] | 0x100;
        if (a3[12] && (!*(_BYTE *)(result + 500) || a3[11] && !*(_BYTE *)(result + 499)))
          *(_WORD *)(result + 499) = a3[11] | 0x100;
      }
      else
      {
        *(_BYTE *)(result + 496) = a3[8];
        *(_QWORD *)(result + 488) = &off_1E335FF78;
        v4 = *(_DWORD *)(a3 + 9);
        *(_BYTE *)(result + 504) = 1;
        *(_DWORD *)v3 = v4;
      }
      break;
    case 12:
      if (*(_BYTE *)(result + 528))
      {
        if (a3[10])
          *(_WORD *)(result + 521) = a3[9] | 0x100;
        if (a3[12] && (!*(_BYTE *)(result + 524) || a3[11] && !*(_BYTE *)(result + 523)))
          *(_WORD *)(result + 523) = a3[11] | 0x100;
      }
      else
      {
        *(_BYTE *)(result + 520) = a3[8];
        *(_QWORD *)(result + 512) = &off_1E335FF78;
        v5 = *(_DWORD *)(a3 + 9);
        *(_BYTE *)(result + 528) = 1;
        *(_DWORD *)(result + 521) = v5;
      }
      break;
    case 13:
      if (*(_BYTE *)(result + 552))
      {
        if (a3[10])
          *(_WORD *)(result + 545) = a3[9] | 0x100;
        if (a3[12] && (!*(_BYTE *)(result + 548) || a3[11] && !*(_BYTE *)(result + 547)))
          *(_WORD *)(result + 547) = a3[11] | 0x100;
      }
      else
      {
        *(_BYTE *)(result + 544) = a3[8];
        *(_QWORD *)(result + 536) = &off_1E335FF78;
        v6 = *(_DWORD *)(a3 + 9);
        *(_BYTE *)(result + 552) = 1;
        *(_DWORD *)(result + 545) = v6;
      }
      break;
    case 17:
      if (*(_BYTE *)(result + 888))
      {
        if (a3[10])
          *(_WORD *)(result + 881) = a3[9] | 0x100;
        if (a3[12] && (!*(_BYTE *)(result + 884) || a3[11] && !*(_BYTE *)(result + 883)))
          *(_WORD *)(result + 883) = a3[11] | 0x100;
      }
      else
      {
        *(_BYTE *)(result + 880) = a3[8];
        *(_QWORD *)(result + 872) = &off_1E335FF78;
        v7 = *(_DWORD *)(a3 + 9);
        *(_BYTE *)(result + 888) = 1;
        *(_DWORD *)(result + 881) = v7;
      }
      break;
    case 18:
      if (*(_BYTE *)(result + 912))
      {
        if (a3[10])
          *(_WORD *)(result + 905) = a3[9] | 0x100;
        if (a3[12] && (!*(_BYTE *)(result + 908) || a3[11] && !*(_BYTE *)(result + 907)))
          *(_WORD *)(result + 907) = a3[11] | 0x100;
      }
      else
      {
        *(_BYTE *)(result + 904) = a3[8];
        *(_QWORD *)(result + 896) = &off_1E335FF78;
        v8 = *(_DWORD *)(a3 + 9);
        *(_BYTE *)(result + 912) = 1;
        *(_DWORD *)(result + 905) = v8;
      }
      break;
    case 19:
      if (*(_BYTE *)(result + 936))
      {
        if (a3[10])
          *(_WORD *)(result + 929) = a3[9] | 0x100;
        if (a3[12] && (!*(_BYTE *)(result + 932) || a3[11] && !*(_BYTE *)(result + 931)))
          *(_WORD *)(result + 931) = a3[11] | 0x100;
      }
      else
      {
        *(_BYTE *)(result + 928) = a3[8];
        *(_QWORD *)(result + 920) = &off_1E335FF78;
        v9 = *(_DWORD *)(a3 + 9);
        *(_BYTE *)(result + 936) = 1;
        *(_DWORD *)(result + 929) = v9;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WebCore::MediaTrackConstraintSetMap::size(WebCore::MediaTrackConstraintSetMap *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v5 = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34183A8;
  v2[1] = &v5;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E3418380;
  v3[1] = v2;
  v6 = v3;
  WebCore::MediaTrackConstraintSetMap::filter((uint64_t)this, &v6);
  (*(void (**)(_QWORD *))(*v3 + 8))(v3);
  return v5;
}

BOOL WebCore::MediaTrackConstraintSetMap::isValid(WebCore::MediaTrackConstraintSetMap *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = 1;
  v8 = 1;
  v9 = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34183A8;
  v3[1] = &v9;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E3418380;
  v4[1] = v3;
  v10 = v4;
  WebCore::MediaTrackConstraintSetMap::filter((uint64_t)this, &v10);
  (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  if (v9)
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E34183D0;
    v5[1] = &v8;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = &off_1E3418380;
    v6[1] = v5;
    v10 = v6;
    WebCore::MediaTrackConstraintSetMap::filter((uint64_t)this, &v10);
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    return v8 != 0;
  }
  return v2;
}

double WebCore::MediaConstraints::setDefaultVideoConstraints(WebCore::MediaConstraints *this)
{
  uint64_t v2;
  uint64_t (**v3)();
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t (**v20)();
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  double result;
  void (**v27)(WebCore::IntConstraint *__hidden);
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  int v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;

  v2 = WTF::fastMalloc((WTF *)0x10);
  v3 = off_1E3418420;
  *(_QWORD *)v2 = off_1E3418420;
  if (*((unsigned __int8 *)this + 392) | *((unsigned __int8 *)this + 48))
  {
    v4 = 0;
  }
  else
  {
    if (*((_BYTE *)this + 104))
    {
      v4 = 0;
    }
    else
    {
      v5 = *((_DWORD *)this + 239);
      if (v5)
      {
        v6 = *((_QWORD *)this + 118);
        v7 = 944 * v5 - 944;
        do
        {
          v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v6);
          if ((v8 & 1) != 0)
            break;
          v6 += 944;
          v9 = v7;
          v7 -= 944;
        }
        while (v9);
        v4 = v8 ^ 1;
        v3 = *(uint64_t (***)())v2;
        goto LABEL_11;
      }
      v4 = 1;
    }
    v3 = off_1E3418420;
  }
LABEL_11:
  ((void (*)(uint64_t))v3[1])(v2);
  v10 = WTF::fastMalloc((WTF *)0x10);
  v11 = off_1E3418448;
  *(_QWORD *)v10 = off_1E3418448;
  if (*((unsigned __int8 *)this + 48) | *((unsigned __int8 *)this + 104))
  {
    v12 = 0;
  }
  else
  {
    v13 = *((_DWORD *)this + 239);
    if (v13)
    {
      v14 = *((_QWORD *)this + 118);
      v15 = 944 * v13 - 944;
      do
      {
        v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v14);
        if ((v16 & 1) != 0)
          break;
        v14 += 944;
        v17 = v15;
        v15 -= 944;
      }
      while (v17);
      v12 = v16 ^ 1;
      v11 = *(uint64_t (***)())v10;
    }
    else
    {
      v12 = 1;
      v11 = off_1E3418448;
    }
  }
  ((void (*)(uint64_t))v11[1])(v10);
  v18 = WTF::fastMalloc((WTF *)0x10);
  v19 = 0;
  v20 = off_1E3418470;
  *(_QWORD *)v18 = off_1E3418470;
  if (!*((_BYTE *)this + 48) && !*((_BYTE *)this + 104) && !*((_BYTE *)this + 304))
  {
    if (*((_BYTE *)this + 936))
    {
      v19 = 0;
LABEL_24:
      v20 = off_1E3418470;
      goto LABEL_30;
    }
    v21 = *((_DWORD *)this + 239);
    if (!v21)
    {
      v19 = 1;
      goto LABEL_24;
    }
    v22 = *((_QWORD *)this + 118);
    v23 = 944 * v21 - 944;
    do
    {
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v22);
      if ((v24 & 1) != 0)
        break;
      v22 += 944;
      v25 = v23;
      v23 -= 944;
    }
    while (v25);
    v19 = v24 ^ 1;
    v20 = *(uint64_t (***)())v18;
  }
LABEL_30:
  ((void (*)(uint64_t))v20[1])(v18);
  if (v4)
  {
    v28 = 1;
    v30 = 0;
    v32 = 0;
    v34 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v27 = &off_1E335FF50;
    v39 = 0x403E000000000000;
    v40 = 1;
    result = WebCore::MediaTrackConstraintSetMap::set((uint64_t)this, (WTF::StringImpl *)4, (uint64_t)&v27);
  }
  if (v12)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v27 = &off_1E335FF28;
    v35 = 640;
    v36 = 1;
    result = WebCore::MediaTrackConstraintSetMap::set((uint64_t)this, (WTF::StringImpl *)1, (uint64_t)&v27);
  }
  if (v19)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v27 = &off_1E335FF28;
    v35 = 480;
    v36 = 1;
    return WebCore::MediaTrackConstraintSetMap::set((uint64_t)this, (WTF::StringImpl *)2, (uint64_t)&v27);
  }
  return result;
}

uint64_t WebCore::MediaConstraint::log(uint64_t result)
{
  switch(*(_BYTE *)(result + 8))
  {
    case 0:
    case 1:
    case 2:
    case 3:
      result = WTFLogAlways();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WebCore::StringConstraint::isolatedCopy(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = this;
  v4 = *(unsigned int *)(a2 + 28);
  if (!(_DWORD)v4)
  {
    v5 = 0;
LABEL_8:
    LODWORD(v7) = 0;
    goto LABEL_9;
  }
  if (v4 >> 29)
    goto LABEL_18;
  this = WTF::fastMalloc((WTF *)(8 * v4));
  v5 = this;
  v6 = *(unsigned int *)(a2 + 28);
  if (!(_DWORD)v6)
    goto LABEL_8;
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = 8 * v6;
  do
  {
    v10 = v7;
    this = WTF::String::isolatedCopy();
    ++v7;
    *(_QWORD *)(v5 + 8 * v10) = v18;
    v8 += 8;
    v9 -= 8;
  }
  while (v9);
LABEL_9:
  v11 = *(unsigned int *)(a2 + 44);
  if (!(_DWORD)v11)
  {
    v12 = 0;
    goto LABEL_16;
  }
  if (v11 >> 29)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x196286320);
  }
  this = WTF::fastMalloc((WTF *)(8 * v11));
  v12 = this;
  v13 = *(unsigned int *)(a2 + 44);
  if (!(_DWORD)v13)
  {
LABEL_16:
    LODWORD(v14) = 0;
    goto LABEL_17;
  }
  v14 = 0;
  v15 = *(_QWORD *)(a2 + 32);
  v16 = 8 * v13;
  do
  {
    v17 = v14;
    this = WTF::String::isolatedCopy();
    v14 = v17 + 1;
    *(_QWORD *)(v12 + 8 * v17) = v18;
    v15 += 8;
    v16 -= 8;
  }
  while (v16);
LABEL_17:
  *(_BYTE *)(v3 + 8) = 3;
  *(_QWORD *)v3 = &off_1E335FFA0;
  *(_QWORD *)(v3 + 16) = v5;
  *(_DWORD *)(v3 + 24) = v4;
  *(_DWORD *)(v3 + 28) = v7;
  *(_QWORD *)(v3 + 32) = v12;
  *(_DWORD *)(v3 + 40) = v11;
  *(_DWORD *)(v3 + 44) = v14;
  return this;
}

uint64_t WebCore::MediaTrackConstraintSetMap::isolatedCopy(WebCore::MediaTrackConstraintSetMap *this, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  int v12;
  char v13;
  int v14;
  __int128 v15;
  int v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v27;
  int v28;
  char v29;
  int v30;
  char v31;
  int v32;
  char v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  int v55;
  char v56;
  char v57;
  char v58;
  int v59;
  char v60;
  char v61;
  char v62;
  char v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  void (**v78)(WebCore::StringConstraint *__hidden);
  char v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  void (**v84)(WebCore::StringConstraint *__hidden);
  char v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  unsigned __int8 v89;
  void (**v90)(WebCore::StringConstraint *__hidden);
  char v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  unsigned __int8 v95;
  void (**v96)(WebCore::StringConstraint *__hidden);
  char v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unsigned __int8 v101;
  _BYTE v102[8];
  char v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  _OWORD v109[2];
  __int128 v110;
  __int128 v111;
  _OWORD v112[2];
  __int128 v113;
  __int128 v114;
  _OWORD v115[2];
  __int128 v116;
  __int128 v117;
  _OWORD v118[2];
  _OWORD v119[2];
  _OWORD v120[2];
  _OWORD v121[2];
  _OWORD v122[2];
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v68 = *(unsigned __int8 *)(a2 + 48);
  if (*(_BYTE *)(a2 + 48))
  {
    v52 = *(_BYTE *)(a2 + 8);
    v122[0] = *(_OWORD *)(a2 + 12);
    *(_OWORD *)((char *)v122 + 13) = *(_OWORD *)(a2 + 25);
  }
  v69 = *(unsigned __int8 *)(a2 + 104);
  if (*(_BYTE *)(a2 + 104))
  {
    v54 = *(_BYTE *)(a2 + 64);
    v121[0] = *(_OWORD *)(a2 + 68);
    *(_OWORD *)((char *)v121 + 13) = *(_OWORD *)(a2 + 81);
  }
  v71 = *(unsigned __int8 *)(a2 + 160);
  if (*(_BYTE *)(a2 + 160))
  {
    v56 = *(_BYTE *)(a2 + 120);
    v120[0] = *(_OWORD *)(a2 + 124);
    *(_OWORD *)((char *)v120 + 13) = *(_OWORD *)(a2 + 137);
  }
  v72 = *(unsigned __int8 *)(a2 + 216);
  if (*(_BYTE *)(a2 + 216))
  {
    v57 = *(_BYTE *)(a2 + 176);
    v119[0] = *(_OWORD *)(a2 + 180);
    *(_OWORD *)((char *)v119 + 13) = *(_OWORD *)(a2 + 193);
  }
  v73 = *(unsigned __int8 *)(a2 + 304);
  if (*(_BYTE *)(a2 + 304))
  {
    v61 = *(_BYTE *)(a2 + 232);
    v4 = *(_OWORD *)(a2 + 256);
    v116 = *(_OWORD *)(a2 + 240);
    v117 = v4;
    v118[0] = *(_OWORD *)(a2 + 272);
    *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)(a2 + 281);
  }
  v75 = *(unsigned __int8 *)(a2 + 392);
  if (*(_BYTE *)(a2 + 392))
  {
    v60 = *(_BYTE *)(a2 + 320);
    v5 = *(_OWORD *)(a2 + 344);
    v113 = *(_OWORD *)(a2 + 328);
    v114 = v5;
    v115[0] = *(_OWORD *)(a2 + 360);
    *(_OWORD *)((char *)v115 + 9) = *(_OWORD *)(a2 + 369);
  }
  v76 = *(unsigned __int8 *)(a2 + 480);
  if (*(_BYTE *)(a2 + 480))
  {
    v63 = *(_BYTE *)(a2 + 408);
    v6 = *(_OWORD *)(a2 + 432);
    v110 = *(_OWORD *)(a2 + 416);
    v111 = v6;
    v112[0] = *(_OWORD *)(a2 + 448);
    *(_OWORD *)((char *)v112 + 9) = *(_OWORD *)(a2 + 457);
  }
  v77 = *(unsigned __int8 *)(a2 + 504);
  if (*(_BYTE *)(a2 + 504))
  {
    v62 = *(_BYTE *)(a2 + 496);
    v64 = *(_DWORD *)(a2 + 497);
  }
  v74 = *(unsigned __int8 *)(a2 + 528);
  if (*(_BYTE *)(a2 + 528))
  {
    v58 = *(_BYTE *)(a2 + 520);
    v59 = *(_DWORD *)(a2 + 521);
  }
  v70 = *(unsigned __int8 *)(a2 + 552);
  if (*(_BYTE *)(a2 + 552))
  {
    v53 = *(_BYTE *)(a2 + 544);
    v55 = *(_DWORD *)(a2 + 545);
  }
  v7 = *(_BYTE *)(a2 + 608);
  v67 = v7;
  if (v7)
  {
    WebCore::StringConstraint::isolatedCopy((uint64_t)&v90, a2 + 560);
    v97 = v91;
    v96 = &off_1E335FFA0;
    v98 = v92;
    v99 = v93;
    v7 = 1;
    v100 = v94;
  }
  else
  {
    LOBYTE(v96) = 0;
  }
  v101 = v7;
  v8 = *(_BYTE *)(a2 + 664);
  v66 = v8;
  if (v8)
  {
    WebCore::StringConstraint::isolatedCopy((uint64_t)&v84, a2 + 616);
    v46 = v85;
    v91 = v85;
    v90 = &off_1E335FFA0;
    v48 = v86;
    v92 = v86;
    v9 = v87;
    v50 = HIDWORD(v9);
    v47 = v9;
    v93 = v87;
    v51 = *((_QWORD *)&v87 + 1);
    v8 = 1;
    v49 = v88;
    v94 = v88;
  }
  else
  {
    LOBYTE(v90) = 0;
  }
  v95 = v8;
  v10 = *(_BYTE *)(a2 + 720);
  v65 = v10;
  if (v10)
  {
    WebCore::StringConstraint::isolatedCopy((uint64_t)&v78, a2 + 672);
    v40 = v79;
    v85 = v79;
    v84 = &off_1E335FFA0;
    v42 = v80;
    v86 = v80;
    v11 = v81;
    v44 = HIDWORD(v11);
    v41 = v11;
    v87 = v81;
    v45 = *((_QWORD *)&v81 + 1);
    v10 = 1;
    v43 = v82;
    v88 = v82;
  }
  else
  {
    LOBYTE(v84) = 0;
  }
  v89 = v10;
  v12 = *(unsigned __int8 *)(a2 + 776);
  if (*(_BYTE *)(a2 + 776))
  {
    WebCore::StringConstraint::isolatedCopy((uint64_t)v102, a2 + 728);
    v34 = v103;
    v79 = v103;
    v78 = &off_1E335FFA0;
    v36 = v104;
    v80 = v104;
    v35 = v105;
    v81 = v105;
    v38 = DWORD1(v105);
    v39 = *((_QWORD *)&v105 + 1);
    v13 = 1;
    v37 = v106;
    v82 = v106;
  }
  else
  {
    v13 = 0;
    LOBYTE(v78) = 0;
  }
  v83 = v13;
  v14 = *(unsigned __int8 *)(a2 + 864);
  if (*(_BYTE *)(a2 + 864))
  {
    v33 = *(_BYTE *)(a2 + 792);
    v15 = *(_OWORD *)(a2 + 816);
    v107 = *(_OWORD *)(a2 + 800);
    v108 = v15;
    v109[0] = *(_OWORD *)(a2 + 832);
    *(_OWORD *)((char *)v109 + 9) = *(_OWORD *)(a2 + 841);
  }
  v16 = *(unsigned __int8 *)(a2 + 888);
  if (*(_BYTE *)(a2 + 888))
  {
    v31 = *(_BYTE *)(a2 + 880);
    v32 = *(_DWORD *)(a2 + 881);
  }
  v17 = *(unsigned __int8 *)(a2 + 912);
  if (*(_BYTE *)(a2 + 912))
  {
    v29 = *(_BYTE *)(a2 + 904);
    v30 = *(_DWORD *)(a2 + 905);
  }
  v18 = *(unsigned __int8 *)(a2 + 936);
  if (*(_BYTE *)(a2 + 936))
  {
    v27 = *(_BYTE *)(a2 + 928);
    v28 = *(_DWORD *)(a2 + 929);
  }
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 48) = 0;
  if (v68)
  {
    *((_BYTE *)this + 8) = v52;
    *(_OWORD *)((char *)this + 12) = v122[0];
    *(_OWORD *)((char *)this + 25) = *(_OWORD *)((char *)v122 + 13);
    *(_QWORD *)this = &off_1E335FF28;
    *((_BYTE *)this + 48) = 1;
  }
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 104) = 0;
  if (v69)
  {
    *((_BYTE *)this + 64) = v54;
    *(_OWORD *)((char *)this + 68) = v121[0];
    *(_OWORD *)((char *)this + 81) = *(_OWORD *)((char *)v121 + 13);
    *((_QWORD *)this + 7) = &off_1E335FF28;
    *((_BYTE *)this + 104) = 1;
  }
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 160) = 0;
  if (v71)
  {
    *((_BYTE *)this + 120) = v56;
    *(_OWORD *)((char *)this + 124) = v120[0];
    *(_OWORD *)((char *)this + 137) = *(_OWORD *)((char *)v120 + 13);
    *((_QWORD *)this + 14) = &off_1E335FF28;
    *((_BYTE *)this + 160) = 1;
  }
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 216) = 0;
  if (v72)
  {
    *((_BYTE *)this + 176) = v57;
    *(_OWORD *)((char *)this + 180) = v119[0];
    *(_OWORD *)((char *)this + 193) = *(_OWORD *)((char *)v119 + 13);
    *((_QWORD *)this + 21) = &off_1E335FF28;
    *((_BYTE *)this + 216) = 1;
  }
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 304) = 0;
  if (v73)
  {
    *((_QWORD *)this + 28) = &off_1E335FF50;
    *((_BYTE *)this + 232) = v61;
    v19 = v117;
    *((_OWORD *)this + 15) = v116;
    *((_OWORD *)this + 16) = v19;
    *((_OWORD *)this + 17) = v118[0];
    *(_OWORD *)((char *)this + 281) = *(_OWORD *)((char *)v118 + 9);
    *((_BYTE *)this + 304) = 1;
  }
  *((_BYTE *)this + 312) = 0;
  *((_BYTE *)this + 392) = 0;
  if (v75)
  {
    *((_BYTE *)this + 320) = v60;
    v20 = v114;
    *(_OWORD *)((char *)this + 328) = v113;
    *(_OWORD *)((char *)this + 344) = v20;
    *(_OWORD *)((char *)this + 360) = v115[0];
    *(_OWORD *)((char *)this + 369) = *(_OWORD *)((char *)v115 + 9);
    *((_QWORD *)this + 39) = &off_1E335FF50;
    *((_BYTE *)this + 392) = 1;
  }
  *((_BYTE *)this + 400) = 0;
  *((_BYTE *)this + 480) = 0;
  if (v76)
  {
    *((_BYTE *)this + 408) = v63;
    v21 = v111;
    *((_OWORD *)this + 26) = v110;
    *((_OWORD *)this + 27) = v21;
    *((_OWORD *)this + 28) = v112[0];
    *(_OWORD *)((char *)this + 457) = *(_OWORD *)((char *)v112 + 9);
    *((_QWORD *)this + 50) = &off_1E335FF50;
    *((_BYTE *)this + 480) = 1;
  }
  *((_BYTE *)this + 488) = 0;
  *((_BYTE *)this + 504) = 0;
  if (v77)
  {
    *((_BYTE *)this + 496) = v62;
    *((_QWORD *)this + 61) = &off_1E335FF78;
    *(_DWORD *)((char *)this + 497) = v64;
    *((_BYTE *)this + 504) = 1;
  }
  *((_BYTE *)this + 512) = 0;
  *((_BYTE *)this + 528) = 0;
  if (v74)
  {
    *((_BYTE *)this + 520) = v58;
    *((_QWORD *)this + 64) = &off_1E335FF78;
    *(_DWORD *)((char *)this + 521) = v59;
    *((_BYTE *)this + 528) = 1;
  }
  *((_BYTE *)this + 536) = 0;
  *((_BYTE *)this + 552) = 0;
  if (v70)
  {
    *((_BYTE *)this + 544) = v53;
    *((_QWORD *)this + 67) = &off_1E335FF78;
    *(_DWORD *)((char *)this + 545) = v55;
    *((_BYTE *)this + 552) = 1;
  }
  *((_BYTE *)this + 560) = 0;
  *((_BYTE *)this + 608) = 0;
  if (v67)
  {
    std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint const&,WebCore::StringConstraint*>((uint64_t)this + 560, (uint64_t)&v96);
    *((_BYTE *)this + 608) = 1;
  }
  *((_BYTE *)this + 616) = 0;
  *((_BYTE *)this + 664) = 0;
  if (v66)
  {
    *((_BYTE *)this + 624) = v46;
    *((_QWORD *)this + 77) = &off_1E335FFA0;
    v92 = 0;
    *((_QWORD *)this + 79) = v48;
    *((_DWORD *)this + 160) = v47;
    *(_QWORD *)&v93 = 0;
    *((_DWORD *)this + 161) = v50;
    *((_QWORD *)&v93 + 1) = 0;
    *((_QWORD *)this + 81) = v51;
    *((_DWORD *)this + 164) = v49;
    v94 = 0;
    *((_DWORD *)this + 165) = HIDWORD(v49);
    *((_BYTE *)this + 664) = 1;
  }
  *((_BYTE *)this + 672) = 0;
  *((_BYTE *)this + 720) = 0;
  if (v65)
  {
    *((_BYTE *)this + 680) = v40;
    *((_QWORD *)this + 84) = &off_1E335FFA0;
    v86 = 0;
    *((_QWORD *)this + 86) = v42;
    *((_DWORD *)this + 174) = v41;
    *(_QWORD *)&v87 = 0;
    *((_DWORD *)this + 175) = v44;
    *((_QWORD *)&v87 + 1) = 0;
    *((_QWORD *)this + 88) = v45;
    *((_DWORD *)this + 178) = v43;
    v88 = 0;
    *((_DWORD *)this + 179) = HIDWORD(v43);
    *((_BYTE *)this + 720) = 1;
  }
  *((_BYTE *)this + 728) = 0;
  *((_BYTE *)this + 776) = 0;
  if (v12)
  {
    *((_BYTE *)this + 736) = v34;
    *((_QWORD *)this + 91) = &off_1E335FFA0;
    v80 = 0;
    *((_QWORD *)this + 93) = v36;
    *((_DWORD *)this + 188) = v35;
    *(_QWORD *)&v81 = 0;
    *((_DWORD *)this + 189) = v38;
    *((_QWORD *)&v81 + 1) = 0;
    *((_QWORD *)this + 95) = v39;
    *((_DWORD *)this + 192) = v37;
    v82 = 0;
    *((_DWORD *)this + 193) = HIDWORD(v37);
    *((_BYTE *)this + 776) = 1;
  }
  *((_BYTE *)this + 784) = 0;
  *((_BYTE *)this + 864) = 0;
  if (v14)
  {
    *((_BYTE *)this + 792) = v33;
    v22 = v108;
    *((_OWORD *)this + 50) = v107;
    *((_OWORD *)this + 51) = v22;
    *((_OWORD *)this + 52) = v109[0];
    *(_OWORD *)((char *)this + 841) = *(_OWORD *)((char *)v109 + 9);
    *((_QWORD *)this + 98) = &off_1E335FF50;
    *((_BYTE *)this + 864) = 1;
  }
  *((_BYTE *)this + 872) = 0;
  *((_BYTE *)this + 888) = 0;
  if (v16)
  {
    *((_BYTE *)this + 880) = v31;
    *((_QWORD *)this + 109) = &off_1E335FF78;
    *(_DWORD *)((char *)this + 881) = v32;
    *((_BYTE *)this + 888) = 1;
  }
  *((_BYTE *)this + 896) = 0;
  *((_BYTE *)this + 912) = 0;
  if (v17)
  {
    *((_BYTE *)this + 904) = v29;
    *((_QWORD *)this + 112) = &off_1E335FF78;
    *(_DWORD *)((char *)this + 905) = v30;
    *((_BYTE *)this + 912) = 1;
  }
  *((_BYTE *)this + 920) = 0;
  *((_BYTE *)this + 936) = 0;
  if (v18)
  {
    *((_BYTE *)this + 928) = v27;
    *((_QWORD *)this + 115) = &off_1E335FF78;
    *(_DWORD *)((char *)this + 929) = v28;
    *((_BYTE *)this + 936) = 1;
  }
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v78, (WTF::StringImpl *)a2);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v84, v23);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v90, v24);
  return std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v96, v25);
}

unsigned int *WebCore::MediaStreamPrivate::create@<X0>(WTF *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::MediaStreamTrackPrivate *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebCore::MediaStreamTrackPrivate *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *result;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27[2];
  unsigned int *v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a1;
  v7 = (unsigned int *)(*(_QWORD *)a1 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v28 = (unsigned int *)v6;
  v30 = 0;
  WTF::createVersion4UUIDString(a1);
  v9 = (WebCore::MediaStreamTrackPrivate *)WTF::fastMalloc((WTF *)0x190);
  v10 = WebCore::MediaStreamTrackPrivate::MediaStreamTrackPrivate((uint64_t)v9, (uint64_t *)&v28, a2, (uint64_t *)v27, (uint64_t)v29);
  WebCore::MediaStreamTrackPrivateSourceObserver::initialize(*(WebCore::MediaStreamTrackPrivateSourceObserver **)(v10 + 40), v9);
  v12 = v27[0];
  v27[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
  v27[0] = v13;
  v27[1] = (WTF::StringImpl *)0x100000001;
  *(_QWORD *)v13 = v9;
  WTF::createVersion4UUIDString(v13);
  v14 = WTF::fastMalloc((WTF *)0x70);
  *a3 = WebCore::MediaStreamPrivate::MediaStreamPrivate(v14, (uint64_t *)a1, (uint64_t)v27, (uint64_t *)&v26);
  v16 = v26;
  v26 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(WebCore::MediaStreamTrackPrivate **)v13;
  *(_QWORD *)v13 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v17, v15);
      WTF::fastFree(v24, v25);
    }
    else
    {
      --*((_DWORD *)v17 + 2);
    }
  }
  WTF::fastFree(v13, v15);
  v18 = v30;
  if (v30 == v29)
  {
    v19 = 4;
    v18 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_17;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_17:
  result = v28;
  v28 = 0;
  if (result)
  {
    v21 = result + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF *WebCore::MediaStreamPrivate::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int *v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore::MediaStreamTrackPrivate *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char *v16;
  WTF *v17;
  uint64_t v18;
  WebCore::MediaStreamTrackPrivate *v19;
  WebCore::MediaStreamTrackPrivate *v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int v28;
  WebCore::MediaStreamTrackPrivate *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WebCore::MediaStreamTrackPrivate *v38;
  WTF::StringImpl **v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  uint64_t v48;
  WebCore::MediaStreamTrackPrivate *v49;
  WTF *v50;
  void *v51;
  WTF *result;
  WTF *v53;
  void *v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF *v58;
  WebCore::MediaStreamTrackPrivate *v59;
  WTF *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63[3];
  WTF::StringImpl **v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v61 = 2;
  v8 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  v60 = (WTF *)v8;
  if (!*a2)
    goto LABEL_25;
  v9 = (WTF *)*a1;
  v10 = (unsigned int *)(*a1 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v58 = v9;
  v57 = *a2;
  *a2 = 0;
  v64 = 0;
  WTF::createVersion4UUIDString((WTF *)v8);
  v12 = (WebCore::MediaStreamTrackPrivate *)WTF::fastMalloc((WTF *)0x190);
  v59 = (WebCore::MediaStreamTrackPrivate *)WebCore::MediaStreamTrackPrivate::MediaStreamTrackPrivate((uint64_t)v12, (uint64_t *)&v58, &v57, (uint64_t *)&v62, (uint64_t)v63);
  WebCore::MediaStreamTrackPrivateSourceObserver::initialize(*((WebCore::MediaStreamTrackPrivateSourceObserver **)v59 + 5), v12);
  v14 = v62;
  v62 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  LODWORD(v15) = HIDWORD(v61);
  if (HIDWORD(v61) == (_DWORD)v61)
  {
    v16 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v60, HIDWORD(v61) + 1, (unint64_t)&v59);
    v15 = HIDWORD(v61);
    v17 = v60;
    v18 = *(_QWORD *)v16;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v17 + v15) = v18;
  }
  else
  {
    v19 = v59;
    v59 = 0;
    *((_QWORD *)v60 + HIDWORD(v61)) = v19;
  }
  HIDWORD(v61) = v15 + 1;
  v20 = v59;
  v59 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v20, v13);
      WTF::fastFree(v53, v54);
    }
    else
    {
      --*((_DWORD *)v20 + 2);
    }
  }
  v21 = v64;
  if (v64 == v63)
  {
    v22 = 4;
    v21 = v63;
    goto LABEL_17;
  }
  if (v64)
  {
    v22 = 5;
LABEL_17:
    (*((void (**)(void))*v21 + v22))();
  }
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 144))(v57);
  v8 = (unsigned int *)v58;
  v58 = 0;
  if (v8)
  {
    v23 = v8 + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v8 + 2);
      v8 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
LABEL_25:
  if (!*a3)
    goto LABEL_48;
  v26 = (WTF *)*a1;
  v27 = (unsigned int *)(*a1 + 8);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v58 = v26;
  v57 = *a3;
  *a3 = 0;
  v64 = 0;
  WTF::createVersion4UUIDString((WTF *)v8);
  v29 = (WebCore::MediaStreamTrackPrivate *)WTF::fastMalloc((WTF *)0x190);
  v59 = (WebCore::MediaStreamTrackPrivate *)WebCore::MediaStreamTrackPrivate::MediaStreamTrackPrivate((uint64_t)v29, (uint64_t *)&v58, &v57, (uint64_t *)&v62, (uint64_t)v63);
  WebCore::MediaStreamTrackPrivateSourceObserver::initialize(*((WebCore::MediaStreamTrackPrivateSourceObserver **)v59 + 5), v29);
  v31 = v62;
  v62 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = HIDWORD(v61);
  if (HIDWORD(v61) == (_DWORD)v61)
  {
    v33 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v60, HIDWORD(v61) + 1, (unint64_t)&v59);
    v35 = HIDWORD(v61);
    v36 = v60;
    v37 = *(_QWORD *)v33;
    *(_QWORD *)v33 = 0;
    *((_QWORD *)v36 + v35) = v37;
    v38 = v59;
    HIDWORD(v61) = v35 + 1;
    v59 = 0;
    if (v38)
    {
      if (*((_DWORD *)v38 + 2) == 1)
      {
        WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v38, v34);
        WTF::fastFree(v55, v56);
      }
      else
      {
        --*((_DWORD *)v38 + 2);
      }
    }
  }
  else
  {
    *((_QWORD *)v60 + HIDWORD(v61)) = v29;
    HIDWORD(v61) = v32 + 1;
    v59 = 0;
  }
  v39 = v64;
  if (v64 == v63)
  {
    v40 = 4;
    v39 = v63;
    goto LABEL_40;
  }
  if (v64)
  {
    v40 = 5;
LABEL_40:
    (*((void (**)(void))*v39 + v40))();
  }
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 144))(v57);
  v8 = (unsigned int *)v58;
  v58 = 0;
  if (v8)
  {
    v41 = v8 + 2;
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v8 + 2);
      v8 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
LABEL_48:
  WTF::createVersion4UUIDString((WTF *)v8);
  v44 = WTF::fastMalloc((WTF *)0x70);
  *a4 = WebCore::MediaStreamPrivate::MediaStreamPrivate(v44, a1, (uint64_t)&v60, (uint64_t *)v63);
  v46 = v63[0];
  v63[0] = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v45);
    else
      *(_DWORD *)v46 -= 2;
  }
  if (HIDWORD(v61))
  {
    v47 = v60;
    v48 = 8 * HIDWORD(v61);
    do
    {
      v49 = *(WebCore::MediaStreamTrackPrivate **)v47;
      *(_QWORD *)v47 = 0;
      if (v49)
      {
        if (*((_DWORD *)v49 + 2) == 1)
        {
          WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v49, v45);
          WTF::fastFree(v50, v51);
        }
        else
        {
          --*((_DWORD *)v49 + 2);
        }
      }
      v47 = (WTF *)((char *)v47 + 8);
      v48 -= 8;
    }
    while (v48);
  }
  result = v60;
  if (v60)
  {
    v60 = 0;
    LODWORD(v61) = 0;
    return (WTF *)WTF::fastFree(result, v45);
  }
  return result;
}

uint64_t WebCore::MediaStreamPrivate::MediaStreamPrivate(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  WebCore::MediaStreamTrackPrivate *v33;
  WebCore::MediaStreamTrackPrivate *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WebCore::MediaStreamTrackPrivate **v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  WebCore::MediaStreamTrackPrivate *v42;
  WebCore::MediaStreamTrackPrivate *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  WTF *v52;
  void *v53;
  WTF *v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v63;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  v5 = a1;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E3417CD0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &unk_1E3417D48;
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = 0;
  v65 = (_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (uint64_t *)(a1 + 64);
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 77) = 0;
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 104) = WTF::cryptographicallyRandomNumber<unsigned long long>();
  v9 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD **)a3;
    v66 = &v10[v9];
    v67 = v5;
    do
    {
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*v10 + 24, (_QWORD *)v5, (uint64_t)&v70);
      v69 = *v10;
      v14 = *(unsigned int *)(v5 + 72);
      v13 = *(unsigned int *)(v5 + 76);
      if (10 * v13 >= (unint64_t)(9 * v14)
        || (v14 <= 2 * (int)v13 ? (v15 = *(_BYTE *)(v5 + 84) == 0) : (v15 = 1), !v15))
      {
        if ((_DWORD)v14)
          v16 = 2 * v14;
        else
          v16 = 8;
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v7, v16);
        LODWORD(v14) = *(_DWORD *)(v5 + 72);
      }
      v68 = v10;
      v17 = *(_DWORD *)(v5 + 80);
      v18 = *(WTF::StringImpl **)(v69 + 48);
      v19 = *((_DWORD *)v18 + 4);
      if (v19 < 0x100)
        v20 = WTF::StringImpl::hashSlowCase(v18);
      else
        v20 = v19 >> 8;
      v21 = v14 - 1;
      v22 = (v20 ^ v17) & (v14 - 1);
      v23 = *v7;
      v24 = *v7 + 16 * v22;
      v25 = *(WTF **)v24;
      if (*(_QWORD *)v24)
      {
        v26 = 0;
        while (1)
        {
          v27 = *((_DWORD *)v25 + 4);
          v28 = v27 < 0x100 ? WTF::StringImpl::hashSlowCase(v25) : v27 >> 8;
          v29 = (v22 + v14 - ((v28 ^ v17) & v21)) & v21;
          if (v26 > v29)
            break;
          if (v28 == v20 && (WTF::equal(*(WTF **)v24, *(const WTF::StringImpl **)(v69 + 48), v12) & 1) != 0)
            goto LABEL_53;
          v23 = *v7;
          v22 = ((_DWORD)v22 + 1) & v21;
          ++v26;
          v24 = *v7 + 16 * v22;
          v25 = *(WTF **)v24;
          if (!*(_QWORD *)v24)
          {
            if (v26 < 0x80)
              goto LABEL_26;
            v30 = v67;
            *(_BYTE *)(v67 + 84) = 1;
            goto LABEL_27;
          }
        }
        if (v26 >= 0x80)
          *(_BYTE *)(v67 + 84) = 1;
        v35 = *(WTF::StringImpl **)v24;
        *(_QWORD *)v24 = 0;
        v70 = v35;
        v36 = v23 + 16 * v22;
        v39 = *(_QWORD *)(v36 + 8);
        v37 = (WebCore::MediaStreamTrackPrivate **)(v36 + 8);
        v38 = v39;
        v71 = v39;
        *v37 = 0;
        v40 = *(WTF::StringImpl **)v24;
        *(_QWORD *)v24 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v11);
          else
            *(_DWORD *)v40 -= 2;
        }
        *(_QWORD *)v24 = 0;
        *(_QWORD *)(v24 + 8) = 0;
        v41 = *(_DWORD **)(v69 + 48);
        if (v41)
          *v41 += 2;
        *(_QWORD *)v24 = v41;
        v42 = (WebCore::MediaStreamTrackPrivate *)*v68;
        *((_DWORD *)v42 + 2) = *(_DWORD *)(*v68 + 8) + 1;
        v43 = *v37;
        *v37 = v42;
        if (v43)
        {
          if (*((_DWORD *)v43 + 2) == 1)
          {
            WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v43, v11);
            WTF::fastFree(v54, v55);
          }
          else
          {
            --*((_DWORD *)v43 + 2);
          }
        }
        v44 = ((_DWORD)v22 + 1) & v21;
        v45 = *v7;
        v46 = (WTF::StringImpl *)(*v7 + 16 * v44);
        v47 = *(WTF::StringImpl **)v46;
        if (*(_QWORD *)v46)
        {
          do
          {
            v48 = *((_DWORD *)v47 + 4);
            if (v48 < 0x100)
              v49 = WTF::StringImpl::hashSlowCase(v47);
            else
              v49 = v48 >> 8;
            ++v29;
            v50 = (v44 + v14 - ((v49 ^ v17) & v21)) & v21;
            if (v29 > v50)
            {
              std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>>(&v70, v46);
              v29 = v50;
            }
            v44 = ((_DWORD)v44 + 1) & v21;
            v45 = *v7;
            v46 = (WTF::StringImpl *)(*v7 + 16 * v44);
            v47 = *(WTF::StringImpl **)v46;
          }
          while (*(_QWORD *)v46);
          v35 = v70;
          v38 = v71;
        }
        *(_QWORD *)v46 = v35;
        v51 = v45 + 16 * v44;
        v34 = *(WebCore::MediaStreamTrackPrivate **)(v51 + 8);
        *(_QWORD *)(v51 + 8) = v38;
        v30 = v67;
        if (!v34)
          goto LABEL_52;
      }
      else
      {
LABEL_26:
        v30 = v67;
LABEL_27:
        v31 = *(_DWORD **)(v69 + 48);
        if (v31)
          *v31 += 2;
        *(_QWORD *)v24 = v31;
        v32 = v23 + 16 * v22;
        v33 = (WebCore::MediaStreamTrackPrivate *)*v68;
        *((_DWORD *)v33 + 2) = *(_DWORD *)(*v68 + 8) + 1;
        v34 = *(WebCore::MediaStreamTrackPrivate **)(v32 + 8);
        *(_QWORD *)(v32 + 8) = v33;
        if (!v34)
          goto LABEL_52;
      }
      if (*((_DWORD *)v34 + 2) == 1)
      {
        WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v34, v11);
        WTF::fastFree(v52, v53);
      }
      else
      {
        --*((_DWORD *)v34 + 2);
      }
LABEL_52:
      ++*(_DWORD *)(v30 + 76);
LABEL_53:
      v5 = v67;
      v10 = v68 + 1;
    }
    while (v68 + 1 != v66);
  }
  if (!*(_DWORD *)(v5 + 76))
  {
    v63 = 0;
    *(_BYTE *)(v5 + 88) = 0;
    goto LABEL_86;
  }
  v56 = *(_QWORD **)(v5 + 64);
  v57 = *(unsigned int *)(v5 + 72);
  v58 = &v56[2 * v57];
  v59 = 16 * v57;
  v60 = v56;
  if ((_DWORD)v57)
  {
    v61 = 16 * v57;
    v60 = *(_QWORD **)(v5 + 64);
    while (!*v60)
    {
      v60 += 2;
      v61 -= 16;
      if (!v61)
        goto LABEL_75;
    }
  }
  if (v60 == v58)
  {
LABEL_74:
    LOBYTE(v61) = 0;
  }
  else
  {
    do
    {
      v15 = *(_BYTE *)(v60[1] + 74) == 0;
      LOBYTE(v61) = *(_BYTE *)(v60[1] + 74) == 0;
      v60 += 2;
      if (v15 || v60 == v58)
        break;
      while (!*v60)
      {
        v60 += 2;
        if (v60 == v58)
          goto LABEL_74;
      }
    }
    while (v60 != v58);
  }
LABEL_75:
  *(_BYTE *)(v5 + 88) = v61;
  *(_QWORD *)(v5 + 56) = 0;
  if ((_DWORD)v57)
  {
    while (!*v56)
    {
      v56 += 2;
      v59 -= 16;
      if (!v59)
        return v5;
    }
  }
LABEL_83:
  if (v56 != v58)
  {
    v63 = v56[1];
    if (*(_BYTE *)(v63 + 74) || !*(_BYTE *)(v63 + 64))
    {
      while (1)
      {
        v56 += 2;
        if (v56 == v58)
          return v5;
        if (*v56)
          goto LABEL_83;
      }
    }
LABEL_86:
    *v65 = v63;
  }
  return v5;
}

void WebCore::MediaStreamPrivate::~MediaStreamPrivate(WebCore::MediaStreamPrivate *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v11;
  WebCore::MediaStreamTrackPrivate **v12;
  WebCore::MediaStreamTrackPrivate *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  void *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  if (*((_DWORD *)this + 19))
  {
    v3 = *((unsigned int *)this + 18);
    if ((_DWORD)v3)
    {
      v4 = 16 * v3;
      v5 = (_QWORD *)*((_QWORD *)this + 8);
      while (!*v5)
      {
        v5 += 2;
        v4 -= 16;
        if (!v4)
          goto LABEL_6;
      }
    }
    else
    {
      v5 = (_QWORD *)*((_QWORD *)this + 8);
    }
    v23 = *((_QWORD *)this + 8) + 16 * v3;
LABEL_38:
    if (v5 != (_QWORD *)v23)
    {
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v5[1] + 24, this);
      while (1)
      {
        v5 += 2;
        if (v5 == (_QWORD *)v23)
          break;
        if (*v5)
          goto LABEL_38;
      }
    }
  }
LABEL_6:
  v6 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v10 = (WTF *)*((_QWORD *)this + 8);
  if (v10)
  {
    v11 = *((unsigned int *)this + 18);
    if ((_DWORD)v11)
    {
      v12 = (WebCore::MediaStreamTrackPrivate **)((char *)v10 + 8);
      do
      {
        v13 = *v12;
        *v12 = 0;
        if (v13)
        {
          if (*((_DWORD *)v13 + 2) == 1)
          {
            WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v13, a2);
            WTF::fastFree(v15, v16);
          }
          else
          {
            --*((_DWORD *)v13 + 2);
          }
        }
        v14 = *(v12 - 1);
        *(v12 - 1) = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v14 -= 2;
        }
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree(v10, a2);
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *((_QWORD *)this + 4);
  if (v18)
  {
    v24 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v24)
    {
      for (i = 0; i != v24; ++i)
      {
        v26 = *(unsigned int **)(v18 + 8 * i);
        if (v26 != (unsigned int *)-1)
        {
          *(_QWORD *)(v18 + 8 * i) = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v18 - 16), a2);
  }
  v19 = *((_QWORD *)this + 1);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    v20 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaStreamPrivate::~MediaStreamPrivate(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::MediaStreamPrivate::~MediaStreamPrivate(WebCore::MediaStreamPrivate *this, void *a2)
{
  WebCore::MediaStreamPrivate::~MediaStreamPrivate((WebCore::MediaStreamPrivate *)((char *)this - 24), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaStreamPrivate::~MediaStreamPrivate((WebCore::MediaStreamPrivate *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::MediaStreamPrivate::updateActiveState(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;

  v1 = this;
  if (*(_DWORD *)(this + 76))
  {
    v2 = *(_QWORD **)(this + 64);
    v3 = *(unsigned int *)(this + 72);
    v4 = &v2[2 * v3];
    v5 = 16 * v3;
    v6 = v2;
    if ((_DWORD)v3)
    {
      v7 = 16 * v3;
      v6 = *(_QWORD **)(this + 64);
      while (!*v6)
      {
        v6 += 2;
        v7 -= 16;
        if (!v7)
          goto LABEL_18;
      }
    }
    if (v6 == v4)
    {
LABEL_17:
      LODWORD(v7) = 0;
    }
    else
    {
      do
      {
        v8 = *(_BYTE *)(v6[1] + 74) == 0;
        LODWORD(v7) = *(_BYTE *)(v6[1] + 74) == 0;
        v6 += 2;
        v8 = v8 || v6 == v4;
        if (v8)
          break;
        while (!*v6)
        {
          v6 += 2;
          if (v6 == v4)
            goto LABEL_17;
        }
      }
      while (v6 != v4);
    }
LABEL_18:
    *(_QWORD *)(this + 56) = 0;
    if ((_DWORD)v3)
    {
      while (!*v2)
      {
        v2 += 2;
        v5 -= 16;
        if (!v5)
          goto LABEL_29;
      }
    }
LABEL_26:
    if (v2 != v4)
    {
      v9 = v2[1];
      if (!*(_BYTE *)(v9 + 74) && *(_BYTE *)(v9 + 64))
      {
        *(_QWORD *)(this + 56) = v9;
      }
      else
      {
        while (1)
        {
          v2 += 2;
          if (v2 == v4)
            break;
          if (*v2)
            goto LABEL_26;
        }
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
    *(_QWORD *)(this + 56) = 0;
  }
LABEL_29:
  if (*(unsigned __int8 *)(this + 88) != (_DWORD)v7)
  {
    *(_BYTE *)(this + 88) = v7;
    v10 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v10 = off_1E34184C0;
    v14 = v10;
    ++*(_DWORD *)(v1 + 16);
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v1 + 32), &v14);
    if (*(_DWORD *)(v1 + 16) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate((WebCore::MediaStreamPrivate *)v1, v11);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)(v1 + 16);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t WebCore::MediaStreamPrivate::addTrack(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  WTF **v14;
  WTF *v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::MediaStreamTrackPrivate *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WebCore::MediaStreamTrackPrivate **v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  _DWORD *v53;
  WebCore::MediaStreamTrackPrivate *v54;
  WebCore::MediaStreamTrackPrivate *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  void *v65;
  WTF::StringImpl *v66;
  void *v67;
  WTF *v68;
  void *v69;
  WTF *v70;
  void *v71;
  WTF *v72;
  void *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;

  v5 = (uint64_t *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    v6 = *a2;
    v7 = *(_DWORD *)(a1 + 72);
    v8 = v7 - 1;
    v9 = *(_DWORD *)(a1 + 80);
    v10 = *(WTF::StringImpl **)(*a2 + 48);
    v11 = *((_DWORD *)v10 + 4);
    if (v11 < 0x100)
    {
      v12 = WTF::StringImpl::hashSlowCase(v10);
      v4 = *v5;
    }
    else
    {
      v12 = v11 >> 8;
    }
    v13 = (v12 ^ v9) & v8;
    v14 = (WTF **)(v4 + 16 * v13);
    v15 = *v14;
    if (*v14)
    {
      v16 = -1;
      do
      {
        v17 = *((_DWORD *)v15 + 4);
        v18 = v17 < 0x100 ? WTF::StringImpl::hashSlowCase(v15) : v17 >> 8;
        if (++v16 > ((v13 + v7 - ((v18 ^ v9) & v8)) & v8))
          break;
        if (v18 == v12)
        {
          result = WTF::equal(*v14, *(const WTF::StringImpl **)(v6 + 48), a3);
          if ((result & 1) != 0)
            return result;
        }
        v13 = (v13 + 1) & v8;
        v14 = (WTF **)(*v5 + 16 * v13);
        v15 = *v14;
      }
      while (*v14);
    }
  }
  v20 = *(_QWORD *)(a1 + 96);
  v21 = *(_QWORD *)(a1 + 104);
  v82 = (WTF::StringImpl *)"MediaStreamPrivate";
  v83 = 19;
  v84 = "addTrack";
  v85 = v21;
  v22 = *a2;
  if (*(_BYTE *)(v20 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v82);
    v22 = *a2;
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v22 + 24, (_QWORD *)a1, (uint64_t)&v82);
  v81 = *a2;
  v26 = *(unsigned int *)(a1 + 72);
  v25 = *(unsigned int *)(a1 + 76);
  v78 = v22;
  if (10 * v25 >= (unint64_t)(9 * v26) || v26 <= 2 * (int)v25 && *(_BYTE *)(a1 + 84))
  {
    if ((_DWORD)v26)
      v27 = 2 * v26;
    else
      v27 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v5, v27);
    LODWORD(v26) = *(_DWORD *)(a1 + 72);
  }
  v28 = v26 - 1;
  v29 = *(_DWORD *)(a1 + 80);
  v30 = *(WTF::StringImpl **)(v81 + 48);
  v31 = *((_DWORD *)v30 + 4);
  v79 = a1;
  if (v31 < 0x100)
    v32 = WTF::StringImpl::hashSlowCase(v30);
  else
    v32 = v31 >> 8;
  v33 = (v32 ^ v29) & v28;
  v34 = *v5;
  v35 = *v5 + 16 * v33;
  v36 = *(WTF **)v35;
  if (*(_QWORD *)v35)
  {
    v37 = 0;
    while (1)
    {
      v38 = *((_DWORD *)v36 + 4);
      v39 = v38 < 0x100 ? WTF::StringImpl::hashSlowCase(v36) : v38 >> 8;
      v40 = (v33 + v26 - ((v39 ^ v29) & v28)) & v28;
      if (v37 > v40)
        break;
      if (v39 == v32 && (WTF::equal(*(WTF **)v35, *(const WTF::StringImpl **)(v81 + 48), v24) & 1) != 0)
        goto LABEL_66;
      v34 = *v5;
      v33 = ((_DWORD)v33 + 1) & v28;
      ++v37;
      v35 = *v5 + 16 * v33;
      v36 = *(WTF **)v35;
      if (!*(_QWORD *)v35)
      {
        v41 = a2;
        if (v37 >= 0x80)
          *(_BYTE *)(v79 + 84) = 1;
        goto LABEL_38;
      }
    }
    if (v37 >= 0x80)
      *(_BYTE *)(v79 + 84) = 1;
    v47 = *(WTF::StringImpl **)v35;
    *(_QWORD *)v35 = 0;
    v82 = v47;
    v48 = v34 + 16 * v33;
    v51 = *(_QWORD *)(v48 + 8);
    v49 = (WebCore::MediaStreamTrackPrivate **)(v48 + 8);
    v50 = v51;
    v83 = v51;
    *v49 = 0;
    v52 = *(WTF::StringImpl **)v35;
    *(_QWORD *)v35 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        v74 = v47;
        WTF::StringImpl::destroy(v52, v23);
        v47 = v74;
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
    *(_QWORD *)v35 = 0;
    *(_QWORD *)(v35 + 8) = 0;
    v53 = *(_DWORD **)(v81 + 48);
    if (v53)
      *v53 += 2;
    *(_QWORD *)v35 = v53;
    v54 = (WebCore::MediaStreamTrackPrivate *)*a2;
    *a2 = 0;
    v55 = *v49;
    *v49 = v54;
    if (v55)
    {
      if (*((_DWORD *)v55 + 2) == 1)
      {
        v75 = v47;
        WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v55, v23);
        WTF::fastFree(v76, v77);
        v47 = v75;
      }
      else
      {
        --*((_DWORD *)v55 + 2);
      }
    }
    v56 = ((_DWORD)v33 + 1) & v28;
    v57 = *v5;
    v58 = (WTF::StringImpl *)(*v5 + 16 * v56);
    v59 = *(WTF::StringImpl **)v58;
    if (*(_QWORD *)v58)
    {
      v46 = v79;
      do
      {
        v60 = *((_DWORD *)v59 + 4);
        if (v60 < 0x100)
          v61 = WTF::StringImpl::hashSlowCase(v59);
        else
          v61 = v60 >> 8;
        ++v40;
        v62 = (v56 + v26 - ((v61 ^ v29) & v28)) & v28;
        if (v40 > v62)
        {
          std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>>(&v82, v58);
          v40 = v62;
        }
        v56 = ((_DWORD)v56 + 1) & v28;
        v57 = *v5;
        v58 = (WTF::StringImpl *)(*v5 + 16 * v56);
        v59 = *(WTF::StringImpl **)v58;
      }
      while (*(_QWORD *)v58);
      v47 = v82;
      v50 = v83;
    }
    else
    {
      v46 = v79;
    }
    *(_QWORD *)v58 = v47;
    v63 = v57 + 16 * v56;
    v45 = *(WebCore::MediaStreamTrackPrivate **)(v63 + 8);
    *(_QWORD *)(v63 + 8) = v50;
    if (!v45)
      goto LABEL_65;
  }
  else
  {
    v41 = a2;
LABEL_38:
    v42 = *(_DWORD **)(v81 + 48);
    if (v42)
      *v42 += 2;
    *(_QWORD *)v35 = v42;
    v43 = v34 + 16 * v33;
    v44 = *v41;
    *v41 = 0;
    v45 = *(WebCore::MediaStreamTrackPrivate **)(v43 + 8);
    *(_QWORD *)(v43 + 8) = v44;
    v46 = v79;
    if (!v45)
      goto LABEL_65;
  }
  if (*((_DWORD *)v45 + 2) == 1)
  {
    WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v45, v23);
    WTF::fastFree(v72, v73);
  }
  else
  {
    --*((_DWORD *)v45 + 2);
  }
LABEL_65:
  ++*(_DWORD *)(v46 + 76);
LABEL_66:
  v64 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v64 = off_1E34184E8;
  *((_QWORD *)v64 + 1) = v78;
  v82 = v64;
  ++*(_DWORD *)(v79 + 16);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v79 + 32), &v82);
  if (*(_DWORD *)(v79 + 16) == 1)
  {
    WebCore::MediaStreamPrivate::~MediaStreamPrivate((WebCore::MediaStreamPrivate *)v79, v65);
    WTF::fastFree(v68, v69);
  }
  else
  {
    --*(_DWORD *)(v79 + 16);
  }
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v64 + 8))(v64);
  WebCore::MediaStreamPrivate::updateActiveState(v79);
  v66 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v66 = off_1E3418538;
  v82 = v66;
  ++*(_DWORD *)(v79 + 16);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v79 + 32), &v82);
  if (*(_DWORD *)(v79 + 16) == 1)
  {
    WebCore::MediaStreamPrivate::~MediaStreamPrivate((WebCore::MediaStreamPrivate *)v79, v67);
    WTF::fastFree(v70, v71);
  }
  else
  {
    --*(_DWORD *)(v79 + 16);
  }
  return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v66 + 8))(v66);
}

uint64_t WebCore::MediaStreamPrivate::logger(WebCore::MediaStreamPrivate *this)
{
  return *((_QWORD *)this + 12);
}

char *WebCore::MediaStreamPrivate::logChannel(WebCore::MediaStreamPrivate *this)
{
  return &WebCore::LogWebRTC;
}

const char *WebCore::MediaStreamPrivate::logClassName(WebCore::MediaStreamPrivate *this)
{
  return "MediaStreamPrivate";
}

uint64_t WebCore::MediaStreamPrivate::logIdentifier(WebCore::MediaStreamPrivate *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t WebCore::MediaStreamTrackPrivate::logIdentifier(WebCore::MediaStreamTrackPrivate *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t WebCore::MediaStreamPrivate::removeTrack(uint64_t this, WebCore::MediaStreamTrackPrivate *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WebCore::MediaStreamTrackPrivate *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  WTF::StringImpl **v31;
  unsigned int v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::MediaStreamTrackPrivate **v38;
  uint64_t v39;
  WebCore::MediaStreamTrackPrivate *v40;
  WebCore::MediaStreamTrackPrivate *v41;
  WTF::StringImpl *v42;
  WTF *v43;
  void *v44;
  WTF *v45;
  void *v46;
  unsigned int v47;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  WTF *v55;
  void *v56;
  WTF *v57;
  void *v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  WebCore::MediaStreamTrackPrivate *v62;
  _QWORD v63[4];

  v4 = this;
  v6 = (uint64_t *)(this + 64);
  v5 = *(_QWORD *)(this + 64);
  v7 = *(unsigned int *)(this + 72);
  if (v5)
  {
    v8 = v7 - 1;
    v9 = *(_DWORD *)(this + 80);
    v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
    v11 = *((_DWORD *)v10 + 4);
    if (v11 < 0x100)
    {
      v12 = WTF::StringImpl::hashSlowCase(v10);
      v5 = *v6;
    }
    else
    {
      v12 = v11 >> 8;
    }
    v14 = (v12 ^ v9) & v8;
    v13 = v5 + 16 * v14;
    this = *(_QWORD *)v13;
    if (*(_QWORD *)v13)
    {
      v15 = -1;
      while (1)
      {
        v16 = *(_DWORD *)(this + 16);
        this = v16 < 0x100 ? WTF::StringImpl::hashSlowCase((WTF::StringImpl *)this) : v16 >> 8;
        if (++v15 > ((v14 + (_DWORD)v7 - ((this ^ v9) & v8)) & v8))
          break;
        if ((_DWORD)this == v12)
        {
          this = WTF::equal(*(WTF **)v13, *((const WTF::StringImpl **)a2 + 6), a3);
          v5 = *v6;
          if ((this & 1) != 0)
          {
            v7 = *(unsigned int *)(v4 + 72);
            goto LABEL_20;
          }
        }
        else
        {
          v5 = *v6;
        }
        v14 = (v14 + 1) & v8;
        v13 = v5 + 16 * v14;
        this = *(_QWORD *)v13;
        if (!*(_QWORD *)v13)
          goto LABEL_19;
      }
      v5 = *v6;
    }
LABEL_19:
    v7 = *(unsigned int *)(v4 + 72);
    v13 = v5 + 16 * v7;
  }
  else
  {
    v13 = 16 * v7;
  }
LABEL_20:
  if (v5 + 16 * v7 != v13)
  {
    v17 = *(WTF::StringImpl **)v13;
    *(_QWORD *)v13 = -1;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, a2);
      else
        *(_DWORD *)v17 -= 2;
    }
    v62 = a2;
    v18 = *(WebCore::MediaStreamTrackPrivate **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1)
      {
        WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v18, a2);
        WTF::fastFree(v59, v60);
      }
      else
      {
        --*((_DWORD *)v18 + 2);
      }
    }
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    v19 = *(_DWORD *)(v4 + 72);
    v20 = *(_DWORD *)(v4 + 76) - 1;
    *(_DWORD *)(v4 + 76) = v20;
    v21 = v19 - 1;
    v22 = *(_QWORD *)(v4 + 64);
    v23 = v13 - v22;
    v24 = (unint64_t)(v13 - v22) >> 4;
    v25 = ((_DWORD)v24 + 1) & (v19 - 1);
    v26 = v22 + 16 * v25;
    v27 = *(WTF::StringImpl **)v26;
    if (*(_QWORD *)v26)
    {
      v61 = v4;
      v28 = *(_DWORD *)(v4 + 80);
      v29 = (v23 >> 4);
      v30 = (v24 + 1) & v21;
      v31 = (WTF::StringImpl **)(v22 + 16 * v24);
      do
      {
        v32 = *((_DWORD *)v27 + 4);
        if (v32 < 0x100)
          v33 = WTF::StringImpl::hashSlowCase(v27);
        else
          v33 = v32 >> 8;
        if (((v30 + v19 - ((v33 ^ v28) & v21)) & v21) == 0)
          break;
        v34 = *(WTF::StringImpl **)v26;
        *(_QWORD *)v26 = 0;
        v35 = *v31;
        *v31 = v34;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, a2);
          else
            *(_DWORD *)v35 -= 2;
        }
        v36 = v22 + 16 * v29;
        v37 = v22 + 16 * v25;
        v39 = *(_QWORD *)(v37 + 8);
        v38 = (WebCore::MediaStreamTrackPrivate **)(v37 + 8);
        *v38 = 0;
        v40 = *(WebCore::MediaStreamTrackPrivate **)(v36 + 8);
        *(_QWORD *)(v36 + 8) = v39;
        if (v40)
        {
          if (*((_DWORD *)v40 + 2) == 1)
          {
            WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v40, a2);
            WTF::fastFree(v43, v44);
          }
          else
          {
            --*((_DWORD *)v40 + 2);
          }
        }
        v41 = *v38;
        *v38 = 0;
        if (v41)
        {
          if (*((_DWORD *)v41 + 2) == 1)
          {
            WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v41, a2);
            WTF::fastFree(v45, v46);
          }
          else
          {
            --*((_DWORD *)v41 + 2);
          }
        }
        v42 = *(WTF::StringImpl **)v26;
        *(_QWORD *)v26 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, a2);
          else
            *(_DWORD *)v42 -= 2;
        }
        *(_QWORD *)v26 = 0;
        *(_QWORD *)(v26 + 8) = 0;
        v25 = (v30 + 1) & v21;
        v22 = *v6;
        v29 = v30;
        v31 = (WTF::StringImpl **)(*v6 + 16 * v30);
        v26 = *v6 + 16 * v25;
        v27 = *(WTF::StringImpl **)v26;
        v30 = (v30 + 1) & v21;
      }
      while (*(_QWORD *)v26);
      v4 = v61;
      v19 = *(_DWORD *)(v61 + 72);
      v20 = *(_DWORD *)(v61 + 76);
    }
    v47 = 6 * v20;
    if (v19 >= 9 && v47 < v19)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v6, v19 >> 1);
    v49 = *(_QWORD *)(v4 + 96);
    v50 = *(_QWORD *)(v4 + 104);
    v63[0] = "MediaStreamPrivate";
    v63[1] = 19;
    v63[2] = "removeTrack";
    v63[3] = v50;
    if (*(_BYTE *)(v49 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v63);
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)v62 + 24, (_QWORD *)v4);
    v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v51 = off_1E3418510;
    v51[1] = v62;
    v63[0] = v51;
    ++*(_DWORD *)(v4 + 16);
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v4 + 32), v63);
    if (*(_DWORD *)(v4 + 16) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate((WebCore::MediaStreamPrivate *)v4, v52);
      WTF::fastFree(v55, v56);
    }
    else
    {
      --*(_DWORD *)(v4 + 16);
    }
    (*(void (**)(_QWORD *))(*v51 + 8))(v51);
    WebCore::MediaStreamPrivate::updateActiveState(v4);
    v53 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v53 = off_1E3418538;
    v63[0] = v53;
    ++*(_DWORD *)(v4 + 16);
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v4 + 32), v63);
    if (*(_DWORD *)(v4 + 16) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate((WebCore::MediaStreamPrivate *)v4, v54);
      WTF::fastFree(v57, v58);
    }
    else
    {
      --*(_DWORD *)(v4 + 16);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  return this;
}

_QWORD *WebCore::MediaStreamPrivate::startProducingData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD v12[4];

  v1 = this;
  v2 = this[12];
  v3 = this[13];
  v12[0] = "MediaStreamPrivate";
  v12[1] = 19;
  v12[2] = "startProducingData";
  v12[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    this = (_QWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v12);
  if (*((_DWORD *)v1 + 19))
  {
    v4 = v1[8];
    v5 = *((unsigned int *)v1 + 18);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      for (i = (_QWORD *)v1[8]; !*i; i += 2)
      {
        v6 -= 16;
        if (!v6)
          return this;
      }
    }
    else
    {
      i = (_QWORD *)v1[8];
    }
    v8 = (_QWORD *)(v4 + 16 * v5);
    if (i != v8)
    {
LABEL_11:
      v9 = *(unsigned int **)(i[1] + 40);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = &off_1E3418258;
      v11[1] = v9;
      v12[0] = v11;
      WTF::ensureOnMainThread();
      this = (_QWORD *)v12[0];
      v12[0] = 0;
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
      while (1)
      {
        i += 2;
        if (i == v8)
          break;
        if (*i)
        {
          if (i != v8)
            goto LABEL_11;
          return this;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::MediaStreamPrivate::hasVideo(WebCore::MediaStreamPrivate *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *i;
  uint64_t v4;
  _BYTE *v5;
  uint64_t result;

  if (!*((_DWORD *)this + 19))
    return 0;
  v1 = *((unsigned int *)this + 18);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    for (i = (_QWORD *)*((_QWORD *)this + 8); !*i; i += 2)
    {
      v2 -= 16;
      if (!v2)
        return 0;
    }
  }
  else
  {
    i = (_QWORD *)*((_QWORD *)this + 8);
  }
  v4 = *((_QWORD *)this + 8) + 16 * v1;
  if (i == (_QWORD *)v4)
    return 0;
LABEL_9:
  v5 = (_BYTE *)i[1];
  if (!v5[64] || !v5[73] || v5[74] || v5[97])
  {
    while (1)
    {
      i += 2;
      if (i == (_QWORD *)v4)
        return 0;
      if (*i)
      {
        result = 0;
        if (i != (_QWORD *)v4)
          goto LABEL_9;
        return result;
      }
    }
  }
  return 1;
}

uint64_t WebCore::MediaStreamPrivate::trackMutedChanged(WebCore::MediaStreamPrivate *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v8;
  void *v9;
  _QWORD v10[4];

  v3 = *((_QWORD *)this + 12);
  v4 = *((_QWORD *)this + 13);
  v10[0] = "MediaStreamPrivate";
  v10[1] = 19;
  v10[2] = "trackMutedChanged";
  v10[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*,char [2],BOOL>((WTF::Logger::LogSiteIdentifier *)v10);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E3418538;
  v10[0] = v5;
  ++*((_DWORD *)this + 4);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 4, v10);
  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::MediaStreamPrivate::~MediaStreamPrivate(this, v6);
    WTF::fastFree(v8, v9);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::MediaStreamPrivate::trackSettingsChanged(WebCore::MediaStreamPrivate *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v3;
  void *v4;
  WTF *v6;
  void *v7;
  uint64_t v8;

  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E3418538;
  v8 = v3;
  ++*((_DWORD *)this + 4);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 4, &v8);
  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::MediaStreamPrivate::~MediaStreamPrivate(this, v4);
    WTF::fastFree(v6, v7);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebCore::MediaStreamPrivate::trackEnabledChanged(WebCore::MediaStreamPrivate *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  _QWORD v15[4];

  v3 = *((_QWORD *)this + 12);
  v4 = *((_QWORD *)this + 13);
  v15[0] = "MediaStreamPrivate";
  v15[1] = 19;
  v15[2] = "trackEnabledChanged";
  v15[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*,char [2],BOOL>((WTF::Logger::LogSiteIdentifier *)v15);
  *((_QWORD *)this + 7) = 0;
  if (*((_DWORD *)this + 19))
  {
    v5 = *((unsigned int *)this + 18);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      v7 = (_QWORD *)*((_QWORD *)this + 8);
      while (!*v7)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_8;
      }
    }
    else
    {
      v7 = (_QWORD *)*((_QWORD *)this + 8);
    }
    v11 = *((_QWORD *)this + 8) + 16 * v5;
LABEL_13:
    if (v7 != (_QWORD *)v11)
    {
      v12 = v7[1];
      if (!*(_BYTE *)(v12 + 74) && *(_BYTE *)(v12 + 64))
      {
        *((_QWORD *)this + 7) = v12;
      }
      else
      {
        while (1)
        {
          v7 += 2;
          if (v7 == (_QWORD *)v11)
            break;
          if (*v7)
            goto LABEL_13;
        }
      }
    }
  }
LABEL_8:
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E3418538;
  v15[0] = v8;
  ++*((_DWORD *)this + 4);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 4, v15);
  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::MediaStreamPrivate::~MediaStreamPrivate(this, v9);
    WTF::fastFree(v13, v14);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t WebCore::MediaStreamPrivate::trackStarted(WebCore::MediaStreamPrivate *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v8;
  void *v9;
  _QWORD v10[4];

  v3 = *((_QWORD *)this + 12);
  v4 = *((_QWORD *)this + 13);
  v10[0] = "MediaStreamPrivate";
  v10[1] = 19;
  v10[2] = "trackStarted";
  v10[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v10);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E3418538;
  v10[0] = v5;
  ++*((_DWORD *)this + 4);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 4, v10);
  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::MediaStreamPrivate::~MediaStreamPrivate(this, v6);
    WTF::fastFree(v8, v9);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::MediaStreamPrivate::trackEnded(WebCore::MediaStreamPrivate *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v8;
  void *v9;
  _QWORD v10[4];

  v3 = *((_QWORD *)this + 12);
  v4 = *((_QWORD *)this + 13);
  v10[0] = "MediaStreamPrivate";
  v10[1] = 19;
  v10[2] = "trackEnded";
  v10[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v10);
  WebCore::MediaStreamPrivate::updateActiveState((uint64_t)this);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E3418538;
  v10[0] = v5;
  ++*((_DWORD *)this + 4);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 4, v10);
  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::MediaStreamPrivate::~MediaStreamPrivate(this, v6);
    WTF::fastFree(v8, v9);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::MediaStreamTrackPrivate::source(WebCore::MediaStreamTrackPrivate *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 5) + 8);
}

char *`non-virtual thunk to'WebCore::MediaStreamPrivate::logChannel(WebCore::MediaStreamPrivate *this)
{
  return &WebCore::LogWebRTC;
}

uint64_t WebCore::MediaStreamTrackDataHolder::MediaStreamTrackDataHolder(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11, __int128 *a12, __int128 *a13, _QWORD *a14)
{
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  WTF *v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  _DWORD *v30;
  _DWORD *v31;
  WTF *v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v43;

  v15 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v15;
  v16 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 17) = a5;
  *(_BYTE *)(a1 + 18) = a6;
  *(_BYTE *)(a1 + 19) = a7;
  *(_BYTE *)(a1 + 20) = a8;
  *(_BYTE *)(a1 + 21) = a9;
  *(_BYTE *)(a1 + 22) = a10;
  *(_BYTE *)(a1 + 23) = a11;
  v17 = *a12;
  v18 = a12[1];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a12 + 32);
  *(_OWORD *)(a1 + 40) = v18;
  *(_OWORD *)(a1 + 24) = v17;
  v19 = *((_QWORD *)a12 + 5);
  *((_QWORD *)a12 + 5) = 0;
  *(_QWORD *)(a1 + 64) = v19;
  v20 = *((_QWORD *)a12 + 6);
  *((_QWORD *)a12 + 6) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  v21 = *((_QWORD *)a12 + 7);
  *((_QWORD *)a12 + 7) = 0;
  *(_QWORD *)(a1 + 80) = v21;
  v22 = a12[4];
  v23 = a12[5];
  *(_QWORD *)(a1 + 118) = *(_QWORD *)((char *)a12 + 94);
  *(_OWORD *)(a1 + 104) = v23;
  *(_OWORD *)(a1 + 88) = v22;
  v24 = *a13;
  v25 = a13[2];
  *(_OWORD *)(a1 + 144) = a13[1];
  *(_OWORD *)(a1 + 160) = v25;
  *(_OWORD *)(a1 + 128) = v24;
  v26 = (WTF *)*((unsigned int *)a13 + 15);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = (_DWORD)v26;
  if ((_DWORD)v26)
  {
    v27 = (void *)WTF::fastMalloc(v26);
    *(_DWORD *)(a1 + 184) = (_DWORD)v26;
    *(_QWORD *)(a1 + 176) = v27;
    memcpy(v27, *((const void **)a13 + 6), *((unsigned int *)a13 + 15));
  }
  v28 = a13[4];
  v29 = a13[5];
  *(_BYTE *)(a1 + 224) = *((_BYTE *)a13 + 96);
  *(_OWORD *)(a1 + 192) = v28;
  *(_OWORD *)(a1 + 208) = v29;
  v30 = (_DWORD *)*((_QWORD *)a13 + 13);
  if (v30)
    *v30 += 2;
  *(_QWORD *)(a1 + 232) = v30;
  v31 = (_DWORD *)*((_QWORD *)a13 + 14);
  if (v31)
    *v31 += 2;
  *(_QWORD *)(a1 + 240) = v31;
  *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a13 + 120);
  v32 = (WTF *)*((unsigned int *)a13 + 37);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 276) = (_DWORD)v32;
  if ((_DWORD)v32)
  {
    v33 = (void *)WTF::fastMalloc(v32);
    *(_DWORD *)(a1 + 272) = (_DWORD)v32;
    *(_QWORD *)(a1 + 264) = v33;
    memcpy(v33, *((const void **)a13 + 17), *((unsigned int *)a13 + 37));
  }
  v34 = *(__int128 *)((char *)a13 + 152);
  v35 = *(__int128 *)((char *)a13 + 168);
  *(_QWORD *)(a1 + 310) = *(_QWORD *)((char *)a13 + 182);
  *(_OWORD *)(a1 + 296) = v35;
  *(_OWORD *)(a1 + 280) = v34;
  v36 = *a14;
  (*(void (**)(_QWORD))(*(_QWORD *)*a14 + 136))(*a14);
  *(_QWORD *)(a1 + 320) = v36;
  v37 = WTF::fastMalloc((WTF *)0x10);
  v38 = v37;
  *(_DWORD *)v37 = 1;
  *(_QWORD *)(v37 + 8) = 0;
  *(_QWORD *)(a1 + 328) = v37;
  do
    v39 = __ldaxr((unsigned int *)v37);
  while (__stlxr(v39 + 1, (unsigned int *)v37));
  v40 = *a14;
  *a14 = 0;
  v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v41 = &off_1E3417FE8;
  v41[1] = v38;
  v41[2] = v40;
  v43 = v41;
  WTF::ensureOnMainThread();
  if (v43)
    (*(void (**)(_QWORD *))(*v43 + 8))(v43);
  return a1;
}

{
  return WebCore::MediaStreamTrackDataHolder::MediaStreamTrackDataHolder(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void WebCore::MediaStreamTrackDataHolder::~MediaStreamTrackDataHolder(WebCore::MediaStreamTrackDataHolder *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  _QWORD *v17;

  v3 = (unsigned int *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E3418560;
      v16[1] = v3;
      v17 = v16;
      WTF::ensureOnMainThread();
      if (v17)
        (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    }
  }
  v6 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 144))(v6);
  v7 = (WTF *)*((_QWORD *)this + 33);
  if (v7)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF *)*((_QWORD *)this + 22);
  if (v10)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
}

uint64_t WebCore::MediaStreamTrackPrivate::MediaStreamTrackPrivate(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  WTF *v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  _DWORD *v39;
  _DWORD *v40;
  WTF *v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E3417D88;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v10 = WTF::fastMalloc((WTF *)0x48);
  v11 = (_QWORD *)v10;
  *(_DWORD *)v10 = 1;
  v12 = *a3;
  *a3 = 0;
  *(_QWORD *)(v10 + 8) = v12;
  *(_QWORD *)(v10 + 16) = 0;
  v13 = (_QWORD *)(v10 + 24);
  v14 = *(_QWORD *)(a5 + 24);
  if (v14)
  {
    if (v14 == a5)
    {
      *(_QWORD *)(v10 + 48) = v13;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24), v13);
    }
    else
    {
      *(_QWORD *)(v10 + 48) = v14;
      *(_QWORD *)(a5 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v10 + 48) = 0;
  }
  v11[7] = 0;
  v11[8] = 0;
  if (!v11[6])
  {
    v54[0] = &off_1E3418070;
    v55 = v54;
    std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::swap[abi:sn180100](v54, v13);
    v15 = v55;
    if (v55 == v54)
    {
      v16 = 4;
      v15 = v54;
    }
    else
    {
      if (!v55)
        goto LABEL_12;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
LABEL_12:
  *(_QWORD *)(a1 + 40) = v11;
  v17 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 48) = v17;
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD **)(*(_QWORD *)(v18 + 8) + 120);
  if (v19)
    *v19 += 2;
  *(_QWORD *)(a1 + 56) = v19;
  v20 = *(_BYTE **)(v18 + 8);
  *(_BYTE *)(a1 + 64) = v20[112];
  *(_BYTE *)(a1 + 65) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v20 + 208))(v20);
  *(_DWORD *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 200))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
  *(_WORD *)(a1 + 73) = 1;
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 293);
  *(_WORD *)(a1 + 76) = 0;
  v21 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 80) = v21;
  *(_QWORD *)(a1 + 88) = WTF::cryptographicallyRandomNumber<unsigned long long>();
  *(_BYTE *)(a1 + 96) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
  v22 = *(_BYTE **)(*(_QWORD *)(a1 + 40) + 8);
  *(_BYTE *)(a1 + 97) = v22[289];
  *(_BYTE *)(a1 + 98) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v22 + 88))(v22);
  v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
  v24 = *(_OWORD *)v23;
  v25 = *(_OWORD *)(v23 + 16);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(v23 + 32);
  *(_OWORD *)(a1 + 120) = v25;
  *(_OWORD *)(a1 + 104) = v24;
  v26 = *(_DWORD **)(v23 + 40);
  if (v26)
    *v26 += 2;
  *(_QWORD *)(a1 + 144) = v26;
  v27 = *(_DWORD **)(v23 + 48);
  if (v27)
    *v27 += 2;
  *(_QWORD *)(a1 + 152) = v27;
  v28 = *(_DWORD **)(v23 + 56);
  if (v28)
    *v28 += 2;
  *(_QWORD *)(a1 + 160) = v28;
  v29 = *(_OWORD *)(v23 + 64);
  v30 = *(_OWORD *)(v23 + 80);
  *(_QWORD *)(a1 + 198) = *(_QWORD *)(v23 + 94);
  *(_OWORD *)(a1 + 184) = v30;
  *(_OWORD *)(a1 + 168) = v29;
  v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
  v32 = v31;
  v33 = *(_OWORD *)(v31 + 32);
  v34 = *(_OWORD *)v31;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(v31 + 16);
  *(_OWORD *)(a1 + 240) = v33;
  *(_OWORD *)(a1 + 208) = v34;
  v35 = (WTF *)*(unsigned int *)(v31 + 60);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 268) = (_DWORD)v35;
  if ((_DWORD)v35)
  {
    v36 = (void *)WTF::fastMalloc(v35);
    *(_DWORD *)(a1 + 264) = (_DWORD)v35;
    *(_QWORD *)(a1 + 256) = v36;
    v31 = (uint64_t)memcpy(v36, *(const void **)(v32 + 48), *(unsigned int *)(v32 + 60));
  }
  v37 = *(_OWORD *)(v32 + 64);
  v38 = *(_OWORD *)(v32 + 80);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(v32 + 96);
  *(_OWORD *)(a1 + 272) = v37;
  *(_OWORD *)(a1 + 288) = v38;
  v39 = *(_DWORD **)(v32 + 104);
  if (v39)
    *v39 += 2;
  *(_QWORD *)(a1 + 312) = v39;
  v40 = *(_DWORD **)(v32 + 112);
  if (v40)
    *v40 += 2;
  *(_QWORD *)(a1 + 320) = v40;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(v32 + 120);
  v41 = (WTF *)*(unsigned int *)(v32 + 148);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = (_DWORD)v41;
  if ((_DWORD)v41)
  {
    v42 = (void *)WTF::fastMalloc(v41);
    *(_DWORD *)(a1 + 352) = (_DWORD)v41;
    *(_QWORD *)(a1 + 344) = v42;
    v31 = (uint64_t)memcpy(v42, *(const void **)(v32 + 136), *(unsigned int *)(v32 + 148));
  }
  v43 = *(_OWORD *)(v32 + 152);
  v44 = *(_OWORD *)(v32 + 168);
  *(_QWORD *)(a1 + 390) = *(_QWORD *)(v32 + 182);
  *(_OWORD *)(a1 + 376) = v44;
  *(_OWORD *)(a1 + 360) = v43;
  v45 = *(_QWORD *)(a1 + 80);
  v46 = *(_QWORD **)(a1 + 88);
  v54[0] = "MediaStreamTrackPrivate";
  v54[1] = 24;
  v54[2] = "MediaStreamTrackPrivate";
  v55 = v46;
  if (*(_BYTE *)(v45 + 12))
    v31 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v54);
  if (WTF::isMainThread((WTF *)v31))
  {
    v47 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v48 = *(unsigned int **)(a1 + 80);
    v49 = v48 + 2;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
    (*(void (**)(uint64_t, unsigned int *, _QWORD))(*(_QWORD *)v47 + 272))(v47, v48, *(_QWORD *)(a1 + 88));
    if (v48)
    {
      do
      {
        v51 = __ldaxr(v49);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v49));
      if (!v52)
      {
        atomic_store(1u, v48 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
      }
    }
  }
  return a1;
}

uint64_t WebCore::MediaStreamTrackPrivate::logger(WebCore::MediaStreamTrackPrivate *this)
{
  return *((_QWORD *)this + 10);
}

char *WebCore::MediaStreamTrackPrivate::logChannel(WebCore::MediaStreamTrackPrivate *this)
{
  return &WebCore::LogWebRTC;
}

const char *WebCore::MediaStreamTrackPrivate::logClassName(WebCore::MediaStreamTrackPrivate *this)
{
  return "MediaStreamTrackPrivate";
}

uint64_t WebCore::MediaStreamTrackPrivate::MediaStreamTrackPrivate(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  __int128 v29;
  __int128 v30;
  WTF *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  _DWORD *v35;
  _DWORD *v36;
  WTF *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E3417D88;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = *a3;
  v9 = WTF::fastMalloc((WTF *)0x48);
  v10 = (_QWORD *)v9;
  *(_DWORD *)v9 = 1;
  v11 = v8[40];
  v8[40] = 0;
  *(_QWORD *)(v9 + 8) = v11;
  *(_QWORD *)(v9 + 16) = 0;
  v12 = (_QWORD *)(v9 + 24);
  v13 = *(_QWORD *)(a4 + 24);
  if (v13)
  {
    if (v13 == a4)
    {
      *(_QWORD *)(v9 + 48) = v12;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24), v12);
    }
    else
    {
      *(_QWORD *)(v9 + 48) = v13;
      *(_QWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v9 + 48) = 0;
  }
  v10[7] = 0;
  v10[8] = 0;
  if (!v10[6])
  {
    v42[0] = &off_1E3418070;
    v43 = v42;
    std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::swap[abi:sn180100](v42, v12);
    v14 = v43;
    if (v43 == v42)
    {
      v15 = 4;
      v14 = v42;
    }
    else
    {
      if (!v43)
        goto LABEL_12;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
LABEL_12:
  *(_QWORD *)(a1 + 40) = v10;
  v16 = **a3;
  **a3 = 0;
  *(_QWORD *)(a1 + 48) = v16;
  v17 = (*a3)[1];
  (*a3)[1] = 0;
  *(_QWORD *)(a1 + 56) = v17;
  v18 = *a3;
  *(_WORD *)(a1 + 64) = *((_WORD *)*a3 + 8);
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = 256;
  *(_BYTE *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 77) = *((_BYTE *)v18 + 20);
  v19 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 88) = WTF::cryptographicallyRandomNumber<unsigned long long>();
  v20 = *a3;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)*a3 + 21);
  *(_WORD *)(a1 + 97) = *((_WORD *)v20 + 11);
  v21 = *((_BYTE *)v20 + 56);
  v22 = *(_OWORD *)(v20 + 5);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(v20 + 3);
  *(_OWORD *)(a1 + 120) = v22;
  *(_BYTE *)(a1 + 136) = v21;
  v23 = v20[8];
  v20[8] = 0;
  *(_QWORD *)(a1 + 144) = v23;
  v24 = v20[9];
  v20[9] = 0;
  *(_QWORD *)(a1 + 152) = v24;
  v25 = v20[10];
  v20[10] = 0;
  *(_QWORD *)(a1 + 160) = v25;
  v26 = *(_OWORD *)(v20 + 13);
  v27 = *(uint64_t *)((char *)v20 + 118);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(v20 + 11);
  *(_QWORD *)(a1 + 198) = v27;
  *(_OWORD *)(a1 + 184) = v26;
  v28 = *a3;
  v29 = *((_OWORD *)*a3 + 8);
  v30 = *((_OWORD *)*a3 + 10);
  *(_OWORD *)(a1 + 224) = *((_OWORD *)*a3 + 9);
  *(_OWORD *)(a1 + 240) = v30;
  *(_OWORD *)(a1 + 208) = v29;
  v31 = (WTF *)*((unsigned int *)v28 + 47);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 268) = (_DWORD)v31;
  if ((_DWORD)v31)
  {
    v32 = (void *)WTF::fastMalloc(v31);
    *(_DWORD *)(a1 + 264) = (_DWORD)v31;
    *(_QWORD *)(a1 + 256) = v32;
    memcpy(v32, (const void *)v28[22], *((unsigned int *)v28 + 47));
  }
  v33 = *((_OWORD *)v28 + 12);
  v34 = *((_OWORD *)v28 + 13);
  *(_BYTE *)(a1 + 304) = *((_BYTE *)v28 + 224);
  *(_OWORD *)(a1 + 272) = v33;
  *(_OWORD *)(a1 + 288) = v34;
  v35 = (_DWORD *)v28[29];
  if (v35)
    *v35 += 2;
  *(_QWORD *)(a1 + 312) = v35;
  v36 = (_DWORD *)v28[30];
  if (v36)
    *v36 += 2;
  *(_QWORD *)(a1 + 320) = v36;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(v28 + 31);
  v37 = (WTF *)*((unsigned int *)v28 + 69);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = (_DWORD)v37;
  if ((_DWORD)v37)
  {
    v38 = (void *)WTF::fastMalloc(v37);
    *(_DWORD *)(a1 + 352) = (_DWORD)v37;
    *(_QWORD *)(a1 + 344) = v38;
    memcpy(v38, (const void *)v28[33], *((unsigned int *)v28 + 69));
  }
  v39 = *(_OWORD *)(v28 + 35);
  v40 = *(_OWORD *)(v28 + 37);
  *(_QWORD *)(a1 + 390) = *(uint64_t *)((char *)v28 + 310);
  *(_OWORD *)(a1 + 376) = v40;
  *(_OWORD *)(a1 + 360) = v39;
  return a1;
}

uint64_t WebCore::MediaStreamTrackPrivateSourceObserver::initialize(WebCore::MediaStreamTrackPrivateSourceObserver *this, WebCore::MediaStreamTrackPrivate *a2)
{
  unsigned int v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  WebCore::MediaStreamTrackPrivateSourceObserver *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  do
    v4 = __ldaxr((unsigned int *)this);
  while (__stlxr(v4 + 1, (unsigned int *)this));
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    goto LABEL_32;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a2;
  v7 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  if (!v7)
    goto LABEL_32;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
  {
LABEL_32:
    do
      v10 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v10 + 1, (unsigned int *)v5));
  }
  v22 = (WTF *)v5;
  v11 = v23;
  v12 = (WebCore::MediaStreamTrackPrivateSourceObserver *)*((_QWORD *)this + 6);
  if (v12)
  {
    if (v12 == (WebCore::MediaStreamTrackPrivateSourceObserver *)((char *)this + 24))
    {
      v24 = v23;
      (*(void (**)(WebCore::MediaStreamTrackPrivateSourceObserver *, _QWORD *))(*(_QWORD *)v12 + 24))(v12, v23);
    }
    else
    {
      v24 = (_QWORD *)(*(uint64_t (**)(WebCore::MediaStreamTrackPrivateSourceObserver *))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  else
  {
    v24 = 0;
  }
  v13 = *((_QWORD *)this + 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 136))(v13);
  v25 = v13;
  LOBYTE(v26) = *((_BYTE *)a2 + 98);
  HIBYTE(v26) = *((_BYTE *)a2 + 97);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x50);
  v15 = v14;
  *v14 = &off_1E34180B8;
  v14[1] = this;
  v14[2] = this;
  v14[3] = v22;
  if (v24)
  {
    if (v24 == v23)
    {
      v14[7] = v14 + 4;
      (*(void (**)(_QWORD *))(v23[0] + 24))(v23);
    }
    else
    {
      v14[7] = v24;
      v24 = 0;
    }
  }
  else
  {
    v14[7] = 0;
  }
  v16 = v25;
  v25 = 0;
  v15[8] = v16;
  *((_WORD *)v15 + 36) = v26;
  WTF::ensureOnMainThread();
  if (v15)
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  v17 = v25;
  v25 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 144))(v17);
  if (v24 == v23)
  {
    v18 = 4;
    goto LABEL_28;
  }
  if (v24)
  {
    v18 = 5;
    v11 = v24;
LABEL_28:
    (*(void (**)(_QWORD *))(*v11 + 8 * v18))(v11);
  }
  return 0;
}

void WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(WebCore::MediaStreamTrackPrivate *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t i;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  WTF *v57[2];
  __int128 v58;
  __int128 v59;
  WTF::StringImpl *v60[2];
  WTF::StringImpl *v61[2];
  WTF *v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  WTF::StringImpl *v67[2];
  WTF::StringImpl *v68[2];
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[22];
  __int16 v72;
  char v73[8];
  WTF::StringImpl *v74;
  char v75;

  v3 = *((_QWORD *)this + 10);
  v4 = *((_QWORD *)this + 11);
  *(_QWORD *)&v54 = "MediaStreamTrackPrivate";
  *((_QWORD *)&v54 + 1) = 24;
  *(_QWORD *)&v55 = "~MediaStreamTrackPrivate";
  *((_QWORD *)&v55 + 1) = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v54);
  v5 = *((_QWORD *)this + 5);
  v6 = *(_QWORD **)(v5 + 56);
  *(_QWORD *)(v5 + 56) = 0;
  if (!v6)
  {
    v9 = 0;
    v7 = 0;
LABEL_12:
    v8 = &v6[2 * v7];
    goto LABEL_13;
  }
  v7 = *((unsigned int *)v6 - 1);
  v8 = &v6[2 * v7];
  if (!*((_DWORD *)v6 - 3))
  {
    v9 = &v6[2 * v7];
    goto LABEL_12;
  }
  v9 = v6;
  if ((_DWORD)v7)
  {
    v10 = 16 * v7;
    v9 = v6;
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
LABEL_13:
  v53 = v6;
  if (v6)
    v11 = &v6[2 * *((unsigned int *)v6 - 1)];
  else
    v11 = 0;
  while (v9 != v11)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v73[0] = 0;
    v74 = (WTF::StringImpl *)v54;
    v75 = 1;
    *(_OWORD *)v67 = 0u;
    *(_OWORD *)v68 = 0u;
    memset(v66, 0, sizeof(v66));
    v69 = 4;
    v72 = 0;
    v70 = 0x3FF0000000000000;
    memset(v71, 0, sizeof(v71));
    v64 = 0u;
    v65 = 0u;
    *(_OWORD *)v62 = 0u;
    v63 = 0u;
    *(_OWORD *)v60 = 0u;
    *(_OWORD *)v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    *(_OWORD *)v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v12 = v9[1];
    v9[1] = 0;
    (*(void (**)(uint64_t, char *, _OWORD *, __int128 *))(*(_QWORD *)v12 + 16))(v12, v73, v66, &v54);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v62[1];
    if (v62[1])
    {
      v62[1] = 0;
      LODWORD(v63) = 0;
      WTF::fastFree(v13, a2);
    }
    v14 = v61[0];
    v61[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v60[1];
    v60[1] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v57[0];
    if (v57[0])
    {
      v57[0] = 0;
      LODWORD(v57[1]) = 0;
      WTF::fastFree(v16, a2);
    }
    v17 = v68[1];
    v68[1] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v68[0];
    v68[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v67[1];
    v67[1] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (v75)
    {
      v20 = v74;
      v74 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    v21 = v9 + 2;
    v9 = v8;
    if (v21 != v8)
    {
      v9 = v21;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  if (v53)
  {
    v22 = *((unsigned int *)v53 - 1);
    if ((_DWORD)v22)
    {
      v23 = v53 + 1;
      do
      {
        if (*(v23 - 1) != -1)
        {
          v24 = *v23;
          *v23 = 0;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        }
        v23 += 2;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree((WTF *)(v53 - 2), a2);
  }
  v25 = (WTF *)*((_QWORD *)this + 43);
  if (v25)
  {
    *((_QWORD *)this + 43) = 0;
    *((_DWORD *)this + 88) = 0;
    WTF::fastFree(v25, a2);
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (WTF *)*((_QWORD *)this + 32);
  if (v28)
  {
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    WTF::fastFree(v28, a2);
  }
  v29 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v32)
  {
    v33 = v32 + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v32 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
    }
  }
  v36 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v38)
  {
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, v38);
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v51 = off_1E3418588;
      v51[1] = v38;
      *(_QWORD *)&v54 = v51;
      WTF::ensureOnMainThread();
      v52 = v54;
      *(_QWORD *)&v54 = 0;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    }
  }
  v41 = *((_QWORD *)this + 3);
  if (v41)
  {
    v46 = *(unsigned int *)(v41 - 4);
    if ((_DWORD)v46)
    {
      for (i = 0; i != v46; ++i)
      {
        v48 = *(unsigned int **)(v41 + 8 * i);
        if (v48 != (unsigned int *)-1)
        {
          *(_QWORD *)(v41 + 8 * i) = 0;
          if (v48)
          {
            do
            {
              v49 = __ldaxr(v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, v48));
            if (!v50)
            {
              atomic_store(1u, v48);
              WTF::fastFree((WTF *)v48, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v41 - 16), a2);
  }
  v42 = *((_QWORD *)this + 2);
  if (v42)
  {
    *(_QWORD *)(v42 + 8) = 0;
    v43 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v43)
    {
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        atomic_store(1u, v43);
        WTF::fastFree((WTF *)v43, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::MediaStreamTrackPrivate::setEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  WTF *v7;
  void *v8;
  _QWORD v9[4];
  char v10;

  v10 = a2;
  if (*(unsigned __int8 *)(this + 73) != a2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 80);
    v4 = *(_QWORD *)(this + 88);
    v9[0] = "MediaStreamTrackPrivate";
    v9[1] = 24;
    v9[2] = "setEnabled";
    v9[3] = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v9);
      LOBYTE(a2) = v10;
    }
    *(_BYTE *)(v2 + 73) = a2;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E34185B0;
    v5[1] = v2;
    v9[0] = v5;
    ++*(_DWORD *)(v2 + 8);
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v2 + 24), v9);
    if (*(_DWORD *)(v2 + 8) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate((WebCore::MediaStreamTrackPrivate *)v2, v6);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)(v2 + 8);
    }
    this = v9[0];
    v9[0] = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::MediaStreamTrackPrivate::endTrack(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  WTF *v10;
  void *v11;
  _QWORD v12[4];

  if (!*(_BYTE *)(this + 74))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 80);
    v3 = *(_QWORD *)(this + 88);
    v12[0] = "MediaStreamTrackPrivate";
    v12[1] = 24;
    v12[2] = "endTrack";
    v12[3] = v3;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v12);
    *(_BYTE *)(v1 + 74) = 1;
    WebCore::MediaStreamTrackPrivate::updateReadyState(v1);
    v4 = *(unsigned int **)(v1 + 40);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = &off_1E34182A8;
    v6[1] = v4;
    v12[0] = v6;
    WTF::ensureOnMainThread();
    v7 = v12[0];
    v12[0] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E34185D8;
    v8[1] = v1;
    v12[0] = v8;
    ++*(_DWORD *)(v1 + 8);
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v1 + 24), v12);
    if (*(_DWORD *)(v1 + 8) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate((WebCore::MediaStreamTrackPrivate *)v1, v9);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)(v1 + 8);
    }
    this = v12[0];
    v12[0] = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::MediaStreamTrackPrivate::updateReadyState(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  _QWORD *v38;
  void *v39;
  WTF *v40;
  void *v41;
  _QWORD v42[4];
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  __int128 buf;
  int v49;
  WTF::StringImpl *v50[3];

  v1 = this;
  v50[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(this + 74);
  if (*(_BYTE *)(this + 74))
    v3 = 2;
  else
    v3 = *(unsigned __int8 *)(this + 76);
  if (v3 == *(_DWORD *)(this + 68))
    return this;
  v4 = *(_QWORD *)(this + 80);
  v5 = *(_QWORD *)(this + 88);
  v42[0] = "MediaStreamTrackPrivate";
  v42[1] = 24;
  v42[2] = "updateReadyState";
  v42[3] = v5;
  if (v2)
    v6 = "Ended";
  else
    v6 = "Live";
  if (*(_BYTE *)(v4 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v42);
    this = WTF::String::String((WTF::String *)&v45, v6);
    if (v46)
    {
      v7 = *((_DWORD *)v46 + 1);
      if (v45)
      {
LABEL_11:
        v8 = *((_DWORD *)v45 + 1);
LABEL_12:
        if ((v8 | v7) < 0 || (this = (v7 + v8), __OFADD__(v7, v8)))
        {
          v47 = 0;
          goto LABEL_88;
        }
        if (v46)
        {
          v9 = *((_DWORD *)v46 + 4);
          v10 = (v9 >> 2) & 1;
          if (v45 && (v9 & 4) != 0)
            goto LABEL_17;
        }
        else
        {
          if (v45)
          {
LABEL_17:
            v10 = (*((unsigned __int8 *)v45 + 16) >> 2) & 1;
            goto LABEL_18;
          }
          v10 = 1;
        }
LABEL_18:
        this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v10, (uint64_t)v46, (uint64_t)v45, &v47);
        if (v47)
        {
          v12 = v45;
          v45 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v11);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = v46;
          v46 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v11);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = qword_1ECE7CD60;
          v15 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v15)
          {
            WTF::String::utf8();
            v17 = v43 ? (char *)v43 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v17;
            _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v15 = (uint64_t)v43;
            v43 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 1)
                v15 = WTF::fastFree((WTF *)v15, v16);
              else
                --*(_DWORD *)v15;
            }
          }
          if (WebCore::LogWebRTC)
          {
            v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v19 = *v18;
              if ((v19 & 1) != 0)
                break;
              v20 = __ldaxr(v18);
              if (v20 == v19)
              {
                if (!__stxr(v19 | 1, v18))
                {
                  v21 = WTF::Logger::observers((WTF::Logger *)v15);
                  v22 = *(unsigned int *)(v21 + 12);
                  if ((_DWORD)v22)
                  {
                    v23 = *(uint64_t **)v21;
                    v24 = *(_QWORD *)v21 + 8 * v22;
                    do
                    {
                      v25 = *v23;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v42);
                      v49 = 0;
                      WTF::String::String((WTF::String *)v50, v6);
                      v43 = 0;
                      v44 = 0;
                      v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v44) = 2;
                      v43 = v26;
                      v27 = HIDWORD(v44);
                      *((_DWORD *)v26 + 4 * HIDWORD(v44)) = buf;
                      v28 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v26 + 2 * v27 + 1) = v28;
                      *((_DWORD *)v26 + 4 * (v27 + 1)) = v49;
                      v29 = v50[0];
                      if (v50[0])
                        *(_DWORD *)v50[0] += 2;
                      *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
                      HIDWORD(v44) = v27 + 2;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v25 + 16))(v25, &WebCore::LogWebRTC, 0, &v43);
                      v30 = v43;
                      if (HIDWORD(v44))
                      {
                        v31 = 16 * HIDWORD(v44);
                        v32 = (WTF::StringImpl **)((char *)v43 + 8);
                        do
                        {
                          v33 = *v32;
                          *v32 = 0;
                          if (v33)
                          {
                            if (*(_DWORD *)v33 == 2)
                              WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v16);
                            else
                              *(_DWORD *)v33 -= 2;
                          }
                          v32 += 2;
                          v31 -= 16;
                        }
                        while (v31);
                        v30 = v43;
                      }
                      if (v30)
                      {
                        v43 = 0;
                        LODWORD(v44) = 0;
                        WTF::fastFree(v30, v16);
                      }
                      v34 = v50[0];
                      v50[0] = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v16);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      v35 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v35)
                      {
                        if (*(_DWORD *)v35 == 2)
                          WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v16);
                        else
                          *(_DWORD *)v35 -= 2;
                      }
                      ++v23;
                    }
                    while (v23 != (uint64_t *)v24);
                  }
                  v36 = __ldxr(v18);
                  if (v36 == 1)
                  {
                    if (!__stlxr(0, v18))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v37 = v47;
          v47 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v37 -= 2;
          }
          goto LABEL_73;
        }
LABEL_88:
        __break(0xC471u);
        return this;
      }
    }
    else
    {
      v7 = 0;
      if (v45)
        goto LABEL_11;
    }
    v8 = 0;
    goto LABEL_12;
  }
LABEL_73:
  *(_DWORD *)(v1 + 68) = v3;
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v38 = off_1E34186F0;
  v38[1] = v1;
  *(_QWORD *)&buf = v38;
  ++*(_DWORD *)(v1 + 8);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v1 + 24), &buf);
  if (*(_DWORD *)(v1 + 8) == 1)
  {
    WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate((WebCore::MediaStreamTrackPrivate *)v1, v39);
    WTF::fastFree(v40, v41);
  }
  else
  {
    --*(_DWORD *)(v1 + 8);
  }
  this = buf;
  *(_QWORD *)&buf = 0;
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

_QWORD *WebCore::MediaStreamTrackPrivate::clone@<X0>(WebCore::MediaStreamTrackPrivate *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::MediaStreamTrackPrivate *v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *result;
  uint64_t v30;
  uint64_t v31[4];
  WebCore::MediaStreamTrackDataHolder *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  v5 = *(_QWORD *)(v4 + 48);
  if (v5)
  {
    if (v5 == v4 + 24)
    {
      v34 = v33;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 24))(v5, v33);
    }
    else
    {
      v34 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    v34 = 0;
  }
  v6 = *((_QWORD *)this + 10);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v31[0] = v6;
  WebCore::MediaStreamTrackPrivate::toDataHolder((uint64_t)this, 1, (uint64_t *)&v32);
  v9 = (WebCore::MediaStreamTrackPrivate *)WTF::fastMalloc((WTF *)0x190);
  v10 = WebCore::MediaStreamTrackPrivate::MediaStreamTrackPrivate((uint64_t)v9, v31, (uint64_t **)&v32, (uint64_t)v33);
  *a2 = v10;
  WebCore::MediaStreamTrackPrivateSourceObserver::initialize(*(WebCore::MediaStreamTrackPrivateSourceObserver **)(v10 + 40), v9);
  if (v32)
  {
    WebCore::MediaStreamTrackDataHolder::~MediaStreamTrackDataHolder(v32, v11);
    WTF::fastFree(v12, v13);
  }
  v14 = (unsigned int *)v31[0];
  v31[0] = 0;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  v18 = *((_QWORD *)this + 10);
  v19 = *((_QWORD *)this + 11);
  v31[0] = (uint64_t)"MediaStreamTrackPrivate";
  v31[1] = 24;
  v31[2] = (uint64_t)"clone";
  v31[3] = v19;
  v20 = *a2;
  v32 = *(WebCore::MediaStreamTrackDataHolder **)(v20 + 88);
  if (*(_BYTE *)(v18 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v31);
  *(_BYTE *)(v20 + 72) = *((_BYTE *)this + 72);
  *(_BYTE *)(v20 + 75) = *((_BYTE *)this + 75);
  WebCore::MediaStreamTrackPrivate::updateReadyState(v20);
  if (*((_BYTE *)this + 96))
  {
    v25 = *(unsigned int **)(v20 + 40);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v27 = &off_1E3418258;
    v27[1] = v25;
    v31[0] = (uint64_t)v27;
    WTF::ensureOnMainThread();
    v28 = v31[0];
    v31[0] = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  result = v34;
  if (v34 == v33)
  {
    v30 = 4;
    result = v33;
  }
  else
  {
    if (!v34)
      return result;
    v30 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v30))(result, v21, v22, v23, v24);
}

WTF::StringImpl *WebCore::MediaStreamTrackPrivate::toDataHolder@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  __int128 v22;
  WTF::StringImpl *v23;
  size_t v24;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  size_t v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *result;
  int v37;
  int v38;
  int v39;
  char v40;
  char v41;
  _QWORD *v43;
  _OWORD v44[3];
  void *__src;
  _DWORD v46[5];
  __int128 v47;
  char v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  __int128 v51;
  WTF *v52;
  _DWORD v53[5];
  _BYTE v54[22];
  __int128 v55;
  __int128 v56;
  char v57;
  __int128 v58;
  WTF::StringImpl *v59;
  __int128 v60;
  _BYTE v61[22];
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  __int128 v64[3];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  __int128 v71;
  void *v72;
  int v73;
  int v74;
  __int128 v75;
  _BYTE v76[22];
  __int128 v77[2];
  char v78;
  __int128 v79;
  WTF::StringImpl *v80;
  __int128 v81;
  _BYTE v82[22];

  if (a2)
    WTF::createVersion4UUIDString((WTF *)a1);
  else
    WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v5 = *(_DWORD *)(a1 + 112);
  v6 = *(_BYTE *)(a1 + 116);
  v7 = *(_BYTE *)(a1 + 136);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 128);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v11 = *(_WORD *)(a1 + 168);
  v12 = *(_BYTE *)(a1 + 170);
  v13 = *(_QWORD *)(a1 + 176);
  v14 = *(_WORD *)(a1 + 184);
  v15 = *(_BYTE *)(a1 + 186);
  *(_OWORD *)&v61[3] = *(_OWORD *)(a1 + 187);
  *(_DWORD *)&v61[18] = *(_DWORD *)(a1 + 202);
  *(_QWORD *)&v55 = v8;
  DWORD2(v55) = v5;
  BYTE12(v55) = v6;
  *(_QWORD *)&v56 = v9;
  *((_QWORD *)&v56 + 1) = v10;
  v57 = v7;
  *(_QWORD *)&v58 = *(_QWORD *)&v64[0];
  *((_QWORD *)&v58 + 1) = *(_QWORD *)&v44[0];
  LOWORD(v60) = v11;
  BYTE2(v60) = v12;
  *((_QWORD *)&v60 + 1) = v13;
  *(_WORD *)v61 = v14;
  v61[2] = v15;
  WebCore::RealtimeMediaSourceCapabilities::isolatedCopy((WebCore::RealtimeMediaSourceCapabilities *)v44, (__int128 *)(a1 + 208));
  v16 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v17 = *v16;
  if (a2)
  {
    (*(void (**)(_QWORD **__return_ptr, _QWORD))(v17 + 48))(&v43, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
  }
  else
  {
    (*(void (**)(_QWORD))(v17 + 136))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
    v43 = v16;
  }
  v18 = WTF::fastMalloc((WTF *)0x150);
  v38 = *(unsigned __int8 *)(a1 + 73);
  v39 = *(unsigned __int8 *)(a1 + 64);
  v37 = *(unsigned __int8 *)(a1 + 74);
  v40 = *(_BYTE *)(a1 + 77);
  v41 = *(_BYTE *)(a1 + 65);
  v19 = *(unsigned __int8 *)(a1 + 96);
  v20 = *(unsigned __int8 *)(a1 + 97);
  v21 = *(unsigned __int8 *)(a1 + 98);
  v77[0] = v55;
  v77[1] = v56;
  v78 = v57;
  v22 = v58;
  v58 = 0u;
  v79 = v22;
  v23 = v59;
  v59 = 0;
  v80 = v23;
  *(_QWORD *)&v82[14] = *(_QWORD *)&v61[14];
  v81 = v60;
  *(_OWORD *)v82 = *(_OWORD *)v61;
  v64[0] = v44[0];
  v64[1] = v44[1];
  v24 = v46[0];
  v64[2] = v44[2];
  v65 = 0u;
  HIDWORD(v65) = v46[0];
  if (v46[0])
  {
    v25 = (void *)WTF::fastMalloc((WTF *)v46[0]);
    DWORD2(v65) = v24;
    *(_QWORD *)&v65 = v25;
    memcpy(v25, __src, v24);
  }
  else
  {
    v25 = 0;
  }
  v66 = *(_OWORD *)&v46[1];
  v67 = v47;
  v68 = v48;
  v26 = v49;
  if (v49)
    *(_DWORD *)v49 += 2;
  v69 = v26;
  v27 = v50;
  if (v50)
    *(_DWORD *)v50 += 2;
  v71 = v51;
  v28 = v53[0];
  v73 = 0;
  v70 = v27;
  v72 = 0;
  v74 = v53[0];
  if (v53[0])
  {
    v29 = (void *)WTF::fastMalloc((WTF *)v53[0]);
    v73 = v28;
    v72 = v29;
    memcpy(v29, v52, v28);
  }
  else
  {
    v29 = 0;
  }
  v75 = *(_OWORD *)&v53[1];
  *(_OWORD *)v76 = *(_OWORD *)v54;
  *(_QWORD *)&v76[14] = *(_QWORD *)&v54[14];
  WebCore::MediaStreamTrackDataHolder::MediaStreamTrackDataHolder(v18, (uint64_t *)&v63, (uint64_t *)&v62, v39 != 0, v41, v38 != 0, v37 != 0, v40, v19 != 0, v20 != 0, v21 != 0, v77, v64, &v43);
  *a3 = v18;
  if (v29)
    WTF::fastFree((WTF *)v29, v30);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v30);
      if (!v26)
        goto LABEL_25;
      goto LABEL_23;
    }
    *(_DWORD *)v27 -= 2;
  }
  if (!v26)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v26 == 2)
    WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v30);
  else
    *(_DWORD *)v26 -= 2;
LABEL_25:
  if (v25)
    WTF::fastFree((WTF *)v25, v30);
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v80 -= 2;
  }
  if (*((_QWORD *)&v79 + 1))
  {
    if (**((_DWORD **)&v79 + 1) == 2)
      WTF::StringImpl::destroy(*((WTF::StringImpl **)&v79 + 1), (WTF::StringImpl *)v30);
    else
      **((_DWORD **)&v79 + 1) -= 2;
  }
  if ((_QWORD)v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v79, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v79 -= 2;
  }
  v31 = v43;
  v43 = 0;
  if (v31)
    (*(void (**)(_QWORD *))(*v31 + 144))(v31);
  if (v52)
    WTF::fastFree(v52, v30);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v30);
      if (!v26)
        goto LABEL_46;
      goto LABEL_44;
    }
    *(_DWORD *)v27 -= 2;
  }
  if (!v26)
    goto LABEL_46;
LABEL_44:
  if (*(_DWORD *)v26 == 2)
    WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v30);
  else
    *(_DWORD *)v26 -= 2;
LABEL_46:
  if (__src)
    WTF::fastFree((WTF *)__src, v30);
  v32 = v59;
  v59 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = (WTF::StringImpl *)*((_QWORD *)&v58 + 1);
  *((_QWORD *)&v58 + 1) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = (WTF::StringImpl *)v58;
  *(_QWORD *)&v58 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v62;
  v62 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v35 -= 2;
  }
  result = v63;
  v63 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::MediaStreamTrackPrivate::applyConstraints(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  _QWORD *v15;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    goto LABEL_12;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a1;
  v8 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (!v8)
    goto LABEL_12;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
LABEL_12:
    do
      v11 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v11 + 1, (unsigned int *)v6));
  }
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = &off_1E3418600;
  v13[1] = v6;
  v13[2] = v12;
  v15 = v13;
  WebCore::MediaStreamTrackPrivateSourceObserver::applyConstraints(*(_QWORD *)(a1 + 40), a2, (uint64_t *)&v15);
  result = (uint64_t)v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::MediaStreamTrackPrivateSourceObserver::applyConstraints(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[944];
  __int128 v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[70];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (uint64_t *)(a1 + 56);
  ++*(_QWORD *)(a1 + 64);
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash((uint64_t *)(a1 + 56), 8u), (v6 = *v7) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(a1 + 64);
  v10 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (_QWORD *)(v6 + 16 * v13);
  v15 = *v14;
  if (!*v14)
  {
LABEL_12:
    *v14 = v9;
    v18 = *a3;
    *a3 = 0;
    v19 = v14[1];
    v14[1] = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = *v7;
    if (*v7)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v7;
    if (*v7)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_27;
    }
    else
    {
      if (3 * v25 > 4 * v24)
        goto LABEL_27;
      if (!(_DWORD)v25)
      {
        v26 = 8;
        goto LABEL_26;
      }
    }
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_26:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v7, v26);
    goto LABEL_27;
  }
  v16 = 0;
  v17 = 1;
  while (v15 != v9)
  {
    if (v15 == -1)
      v16 = v14;
    v13 = (v13 + v17) & v8;
    v14 = (_QWORD *)(v6 + 16 * v13);
    v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(*(_QWORD *)(a1 + 56) - 16);
        v9 = *(_QWORD *)(a1 + 64);
        v14 = v16;
      }
      goto LABEL_12;
    }
  }
LABEL_27:
  v43 = a1;
  do
    v27 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v27 + 1, (unsigned int *)a1));
  v44 = a1;
  WebCore::MediaTrackConstraintSetMap::isolatedCopy((WebCore::MediaTrackConstraintSetMap *)v45, a2);
  v46 = 0u;
  v28 = *(_DWORD *)(a2 + 956);
  if (v28)
  {
    if (v28 >= 0x456C7A)
    {
      __break(0xC471u);
      return;
    }
    v29 = 944 * v28;
    v30 = WTF::fastMalloc((WTF *)(944 * v28));
    DWORD2(v46) = (v29 & 0xFFFFFFF0) / 0x3B0;
    *(_QWORD *)&v46 = v30;
    v31 = *(_DWORD *)(a2 + 956);
    if (v31)
    {
      v32 = *(_QWORD *)(a2 + 944);
      v33 = 944 * v31;
      do
      {
        WebCore::MediaTrackConstraintSetMap::isolatedCopy((WebCore::MediaTrackConstraintSetMap *)v50, v32);
        WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v46 + 944 * HIDWORD(v46), (uint64_t)v50);
        ++HIDWORD(v46);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v34);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v53, v35);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52, v36);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v37);
        v32 += 944;
        v33 -= 944;
      }
      while (v33);
    }
  }
  v47 = *(_BYTE *)(a2 + 960);
  v48 = *(_QWORD *)(a1 + 64);
  v38 = WTF::fastMalloc((WTF *)0x3E8);
  *(_QWORD *)v38 = off_1E34182D0;
  *(_QWORD *)(v38 + 8) = v43;
  *(_QWORD *)(v38 + 16) = v44;
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v38 + 24, (uint64_t)v45);
  v39 = v46;
  *(_QWORD *)&v46 = 0;
  *(_QWORD *)(v38 + 968) = v39;
  v40 = *((_QWORD *)&v46 + 1);
  *((_QWORD *)&v46 + 1) = 0;
  *(_QWORD *)(v38 + 976) = v40;
  *(_BYTE *)(v38 + 984) = v47;
  *(_QWORD *)(v38 + 992) = v48;
  v49 = v38;
  WTF::ensureOnMainThread();
  v42 = v49;
  v49 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)v45, v41);
}

uint64_t WebCore::RealtimeMediaSourceCapabilities::isolatedCopy(WebCore::RealtimeMediaSourceCapabilities *this, __int128 *a2)
{
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  __int128 v10;
  size_t v11;
  void *v12;
  __int128 v13;
  char v14;
  char v15;
  char v16;
  void *v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[19];
  WTF::StringImpl *v27;
  uint64_t v28;

  v23 = a2[1];
  v24 = *a2;
  v22 = a2[2];
  v4 = *((_DWORD *)a2 + 15);
  if (v4)
  {
    v5 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)a2 + 15));
    memcpy(v5, *((const void **)a2 + 6), *((unsigned int *)a2 + 15));
  }
  else
  {
    v5 = 0;
  }
  v6 = *((_QWORD *)a2 + 8);
  v7 = *((_QWORD *)a2 + 9);
  v20 = *((_QWORD *)a2 + 11);
  v21 = *((_QWORD *)a2 + 10);
  v8 = *((_BYTE *)a2 + 96);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v10 = *(__int128 *)((char *)a2 + 120);
  v11 = *((unsigned int *)a2 + 37);
  if ((_DWORD)v11)
  {
    v19 = *(__int128 *)((char *)a2 + 120);
    v12 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)a2 + 37));
    memcpy(v12, *((const void **)a2 + 17), *((unsigned int *)a2 + 37));
    v10 = v19;
  }
  else
  {
    v12 = 0;
  }
  v13 = *(__int128 *)((char *)a2 + 152);
  v14 = *((_BYTE *)a2 + 168);
  v15 = *((_BYTE *)a2 + 169);
  v16 = *((_BYTE *)a2 + 170);
  *(_OWORD *)v26 = *(__int128 *)((char *)a2 + 171);
  *(_DWORD *)&v26[15] = *(_DWORD *)((char *)a2 + 186);
  *(_OWORD *)this = v24;
  *((_OWORD *)this + 1) = v23;
  *((_OWORD *)this + 2) = v22;
  *((_QWORD *)this + 6) = v5;
  *((_DWORD *)this + 14) = v4;
  *((_DWORD *)this + 15) = v4;
  *((_QWORD *)this + 8) = v6;
  *((_QWORD *)this + 9) = v7;
  *((_QWORD *)this + 10) = v21;
  *((_QWORD *)this + 11) = v20;
  *((_BYTE *)this + 96) = v8;
  *((_QWORD *)this + 13) = v28;
  *((_QWORD *)this + 14) = v27;
  *(_OWORD *)((char *)this + 120) = v10;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 37) = v11;
  if ((_DWORD)v11)
  {
    v25 = v13;
    v17 = (void *)WTF::fastMalloc((WTF *)v11);
    *((_DWORD *)this + 36) = v11;
    *((_QWORD *)this + 17) = v17;
    memcpy(v17, v12, v11);
    v13 = v25;
  }
  *(_OWORD *)((char *)this + 152) = v13;
  *((_BYTE *)this + 168) = v14;
  *((_BYTE *)this + 169) = v15;
  *((_BYTE *)this + 170) = v16;
  *(_OWORD *)((char *)this + 171) = *(_OWORD *)v26;
  *(_DWORD *)((char *)this + 186) = *(_DWORD *)&v26[15];
  if (v12)
    WTF::fastFree((WTF *)v12, v9);
  return 0;
}

uint64_t WebCore::RealtimeIncomingAudioSource::RealtimeIncomingAudioSource(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v20;
  v7 = *a3;
  if (*a3)
    *(_DWORD *)v7 += 2;
  v20 = v7;
  v21 = 1;
  if (v6)
    *(_DWORD *)v6 += 2;
  v22 = v6;
  v8 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v8 += 2;
  v23 = v8;
  v24 = 0;
  v18 = 0;
  v19 = 0;
  WebCore::RealtimeMediaSource::RealtimeMediaSource(a1, (uint64_t)&v20, (uint64_t *)&v18, 0);
  v10 = v19;
  v19 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v23;
  v23 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v20;
  v20 = 0;
  if (!v14)
  {
LABEL_22:
    if (!v6)
      goto LABEL_25;
    goto LABEL_23;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v14, v9);
  if (!v6)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v9);
  else
    *(_DWORD *)v6 -= 2;
LABEL_25:
  *(_QWORD *)(a1 + 304) = &off_1E3418348;
  *(_QWORD *)(a1 + 312) = &unk_1E3418740;
  v15 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v15 = 0;
  *(_OWORD *)(v15 + 8) = xmmword_19689B170;
  *(_QWORD *)(v15 + 24) = a1;
  *(_QWORD *)a1 = off_1E3417DC8;
  *(_QWORD *)(a1 + 304) = &unk_1E3417F88;
  *(_QWORD *)(a1 + 312) = &unk_1E3417FC0;
  *(_QWORD *)(a1 + 320) = v15;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 333) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_WORD *)(a1 + 392) = 4;
  *(_BYTE *)(a1 + 394) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 400) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 422) = 0;
  v16 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = v16;
  (**(void (***)(uint64_t, uint64_t))(v16 + 8))(v16 + 8, a1 + 312);
  return a1;
}

void WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource(WebCore::RealtimeIncomingAudioSource *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void (**v5)(WebCore::RealtimeIncomingAudioSource *__hidden);
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _QWORD v16[4];

  *(_QWORD *)this = off_1E3417DC8;
  v2 = (char *)this + 312;
  *((_QWORD *)this + 38) = &unk_1E3417F88;
  *((_QWORD *)this + 39) = &unk_1E3417FC0;
  if (*((_BYTE *)this + 292))
  {
    v3 = *((_QWORD *)this + 5);
    if (v3
      && (v4 = *((_QWORD *)this + 6),
          v16[0] = "RealtimeIncomingAudioSource",
          v16[1] = 28,
          v16[2] = "stop",
          v16[3] = v4,
          *(_BYTE *)(v3 + 12)))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v16);
      v5 = *(void (***)(WebCore::RealtimeIncomingAudioSource *__hidden))this;
    }
    else
    {
      v5 = off_1E3417DC8;
    }
    *((_BYTE *)this + 292) = 0;
    v5[46](this);
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*((_QWORD *)this + 54) + 8) + 8))(*((_QWORD *)this + 54) + 8, v2);
  v7 = (unsigned int *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  v11 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 54);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v6);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v6);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::RealtimeMediaSource::~RealtimeMediaSource(this, v6);
}

{
  WTF *v1;
  void *v2;

  WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource(WebCore::RealtimeIncomingAudioSource *this)
{
  WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource((WebCore::RealtimeIncomingAudioSource *)((char *)this - 304));
}

{
  WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource((WebCore::RealtimeIncomingAudioSource *)((char *)this - 312));
}

{
  WTF *v1;
  void *v2;

  WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource((WebCore::RealtimeIncomingAudioSource *)((char *)this - 304));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource((WebCore::RealtimeIncomingAudioSource *)((char *)this - 312));
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::RealtimeIncomingAudioSource::startProducingData(WebCore::RealtimeIncomingAudioSource *this)
{
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 54) + 80))(*((_QWORD *)this + 54), (char *)this + 304);
}

uint64_t WebCore::RealtimeIncomingAudioSource::stopProducingData(WebCore::RealtimeIncomingAudioSource *this)
{
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 54) + 88))(*((_QWORD *)this + 54), (char *)this + 304);
}

uint64_t WebCore::RealtimeIncomingAudioSource::OnChanged(WebCore::RealtimeIncomingAudioSource *this)
{
  uint64_t v2;
  int v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v2 = *((_QWORD *)this + 40);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_5:
  ++*(_QWORD *)(v2 + 8);
  v4 = __ldxr((unsigned __int8 *)v2);
  if (v4 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E3418718;
  v5[1] = this;
  v7 = (uint64_t)v5;
  WTF::callOnMainThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::RealtimeIncomingAudioSource::OnChanged(WebCore::RealtimeIncomingAudioSource *this)
{
  uint64_t v2;
  char *v4;
  int v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v2 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = (char *)this - 312;
  ++*(_QWORD *)(v2 + 8);
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E3418718;
  v6[1] = v4;
  v8 = (uint64_t)v6;
  WTF::callOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

__int128 *WebCore::RealtimeIncomingAudioSource::capabilities(WebCore::RealtimeIncomingAudioSource *this)
{
  {
    xmmword_1EE2E0E70 = 0u;
    unk_1EE2E0E80 = 0u;
    xmmword_1EE2E0E50 = 0u;
    unk_1EE2E0E60 = 0u;
    xmmword_1EE2E0E30 = 0u;
    unk_1EE2E0E40 = 0u;
    xmmword_1EE2E0E10 = 0u;
    unk_1EE2E0E20 = 0u;
    xmmword_1EE2E0DF0 = 0u;
    unk_1EE2E0E00 = 0u;
    WebCore::RealtimeMediaSourceCapabilities::emptyCapabilities(void)::emptyCapabilities = 0u;
    unk_1EE2E0DE0 = 0u;
  }
  return &WebCore::RealtimeMediaSourceCapabilities::emptyCapabilities(void)::emptyCapabilities;
}

uint64_t WebCore::RealtimeIncomingAudioSource::settings(WebCore::RealtimeIncomingAudioSource *this)
{
  return (uint64_t)this + 328;
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamPrivate::logger(WebCore::MediaStreamPrivate *this)
{
  return *((_QWORD *)this + 9);
}

const char *`non-virtual thunk to'WebCore::MediaStreamPrivate::logClassName(WebCore::MediaStreamPrivate *this)
{
  return "MediaStreamPrivate";
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamPrivate::logIdentifier(WebCore::MediaStreamPrivate *this)
{
  return *((_QWORD *)this + 10);
}

const char *WebCore::RealtimeIncomingAudioSource::logClassName(WebCore::RealtimeIncomingAudioSource *this)
{
  return "RealtimeIncomingAudioSource";
}

uint64_t WebCore::RealtimeIncomingAudioSource::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 320);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebCore::RealtimeIncomingAudioSource::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingAudioSource,(WTF::DestructionThread)2>(this[40]);
}

uint64_t WebCore::RealtimeIncomingAudioSource::controlBlock(WebCore::RealtimeIncomingAudioSource *this)
{
  return *((_QWORD *)this + 40);
}

uint64_t WebCore::RealtimeIncomingAudioSource::isIncomingAudioSource(WebCore::RealtimeIncomingAudioSource *this)
{
  return 1;
}

uint64_t webrtc::AudioTrackSinkInterface::OnData(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t webrtc::AudioTrackSinkInterface::NumPreferredChannels(webrtc::AudioTrackSinkInterface *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint const&,WebCore::StringConstraint*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;

  if (!a1)
  {
    __break(1u);
    goto LABEL_20;
  }
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = &off_1E335FFA0;
  v4 = *(unsigned int *)(a2 + 28);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
      goto LABEL_20;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 16) = v7;
    v8 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v8)
    {
      v9 = *(_DWORD ***)(a2 + 16);
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        if (*v9)
          *v11 += 2;
        *v7++ = v11;
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  v5 = *(unsigned int *)(a2 + 44);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = v5;
  if (!(_DWORD)v5)
    return a1;
  if (v5 >> 29)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x19628BB08);
  }
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
  *(_DWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 32) = v12;
  v13 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v13)
  {
    v14 = *(_DWORD ***)(a2 + 32);
    v15 = 8 * v13;
    do
    {
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *v12++ = v16;
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PreventSourceFromEndingObserverWrapper::initialize(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E3417FE8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3418560;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PreventSourceFromEndingObserverWrapper::initialize(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E3417FE8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 144))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3418560;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::PreventSourceFromEndingObserverWrapper::initialize(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *result;
  uint64_t v5;
  WTF *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _BYTE v20[24];

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v2 = off_1E3418010;
  v2[1] = 0;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v2[2] = v3;
  result = WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v3 + 128, v2, (uint64_t)v20);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(WTF **)(v5 + 8);
  *(_QWORD *)(v5 + 8) = v2;
  if (!v6)
    return result;
  v7 = (_QWORD *)*((_QWORD *)v6 + 2);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v7 + 16), v6);
  v9 = v7[16];
  if (v9 && *(_DWORD *)(v9 - 12))
  {
    v15 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v15)
    {
      v16 = 8 * v15;
      v17 = (uint64_t *)v7[16];
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        ++v17;
        v16 -= 8;
        if (!v16)
          goto LABEL_3;
      }
    }
    else
    {
      v17 = (uint64_t *)v7[16];
    }
    v18 = (uint64_t *)(v9 + 8 * v15);
    if (v17 != v18)
    {
      v19 = *v17;
LABEL_23:
      if (*(_QWORD *)(v19 + 8))
        goto LABEL_4;
      while (++v17 != v18)
      {
        v19 = *v17;
        if ((unint64_t)(*v17 + 1) > 1)
        {
          if (v17 != v18)
            goto LABEL_23;
          break;
        }
      }
    }
  }
LABEL_3:
  (*(void (**)(_QWORD *))(*v7 + 392))(v7);
LABEL_4:
  v10 = *((_QWORD *)v6 + 2);
  *((_QWORD *)v6 + 2) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 144))(v10);
  v11 = *((_QWORD *)v6 + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v8);
      }
    }
  }
  else
  {
    *((_QWORD *)v6 + 1) = 0;
  }
  return (unsigned int *)WTF::fastFree(v6, v8);
}

void WebCore::PreventSourceFromEndingObserverWrapper::PreventSourceFromEndingObserver::~PreventSourceFromEndingObserver(WebCore::PreventSourceFromEndingObserverWrapper::PreventSourceFromEndingObserver *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v2 + 16), this);
  v4 = v2[16];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v10 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    v12 = (uint64_t *)v2[16];
    while ((unint64_t)(*v12 + 1) <= 1)
    {
      ++v12;
      v11 -= 8;
      if (!v11)
        goto LABEL_2;
    }
  }
  else
  {
    v12 = (uint64_t *)v2[16];
  }
  v13 = (uint64_t *)(v4 + 8 * v10);
  if (v12 == v13)
    goto LABEL_2;
  v14 = *v12;
LABEL_21:
  if (!*(_QWORD *)(v14 + 8))
  {
    while (++v12 != v13)
    {
      v14 = *v12;
      if ((unint64_t)(*v12 + 1) > 1)
      {
        if (v12 != v13)
          goto LABEL_21;
        break;
      }
    }
LABEL_2:
    (*(void (**)(_QWORD *))(*v2 + 392))(v2);
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v3);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v2 + 16), this);
  v4 = v2[16];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v10 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    v12 = (uint64_t *)v2[16];
    while ((unint64_t)(*v12 + 1) <= 1)
    {
      ++v12;
      v11 -= 8;
      if (!v11)
        goto LABEL_2;
    }
  }
  else
  {
    v12 = (uint64_t *)v2[16];
  }
  v13 = (uint64_t *)(v4 + 8 * v10);
  if (v12 == v13)
    goto LABEL_2;
  v14 = *v12;
LABEL_21:
  if (!*(_QWORD *)(v14 + 8))
  {
    while (++v12 != v13)
    {
      v14 = *v12;
      if ((unint64_t)(*v12 + 1) > 1)
      {
        if (v12 != v13)
          goto LABEL_21;
        break;
      }
    }
LABEL_2:
    (*(void (**)(_QWORD *))(*v2 + 392))(v2);
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v3);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, v3);
}

uint64_t WebCore::PreventSourceFromEndingObserverWrapper::PreventSourceFromEndingObserver::preventSourceFromEnding(WebCore::PreventSourceFromEndingObserverWrapper::PreventSourceFromEndingObserver *this)
{
  return 1;
}

void std::__function::__func<WebCore::MediaStreamTrackPrivateSourceObserver::MediaStreamTrackPrivateSourceObserver(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&,std::function<void ()(WTF::Function<void ()(void)> &&)> &&)::{lambda(WTF::Function<void ()(void)>)#1},std::allocator<std::function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::Function<void ()(void)> &>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::MediaStreamTrackPrivateSourceObserver::MediaStreamTrackPrivateSourceObserver(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&,std::function<void ()(WTF::Function<void ()(void)> &&)> &&)::{lambda(WTF::Function<void ()(void)>)#1},std::allocator<std::function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::Function<void ()(void)> &>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3418070;
  return result;
}

void std::__function::__func<WebCore::MediaStreamTrackPrivateSourceObserver::MediaStreamTrackPrivateSourceObserver(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&,std::function<void ()(WTF::Function<void ()(void)> &&)> &&)::{lambda(WTF::Function<void ()(void)>)#1},std::allocator<std::function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::Function<void ()(void)> &>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3418070;
}

uint64_t std::__function::__func<WebCore::MediaStreamTrackPrivateSourceObserver::MediaStreamTrackPrivateSourceObserver(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&,std::function<void ()(WTF::Function<void ()(void)> &&)> &&)::{lambda(WTF::Function<void ()(void)>)#1},std::allocator<std::function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::Function<void ()(void)> &>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::initialize(WebCore::MediaStreamTrackPrivate &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v13;
  _QWORD *v14;

  *a1 = &off_1E34180B8;
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 144))(v3);
  v4 = (_QWORD *)a1[7];
  if (v4 == a1 + 4)
  {
    v5 = 4;
    v4 = a1 + 4;
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v6 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E3418588;
      v13[1] = v9;
      v14 = v13;
      WTF::ensureOnMainThread();
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::initialize(WebCore::MediaStreamTrackPrivate &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v13;
  _QWORD *v14;

  *(_QWORD *)this = &off_1E34180B8;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 144))(v3);
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4 == (WTF *)((char *)this + 32))
  {
    v5 = 4;
    v4 = (WTF *)((char *)this + 32);
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E3418588;
      v13[1] = v9;
      v14 = v13;
      WTF::ensureOnMainThread();
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::initialize(WebCore::MediaStreamTrackPrivate &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *v29;
  _QWORD v30[3];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x48);
  v5 = v3;
  *v3 = off_1E34180E0;
  v3[1] = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v3[2] = v6;
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v3[3] = v7;
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    if (v8 == a1 + 32)
    {
      v3[7] = v3 + 4;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56));
    }
    else
    {
      v3[7] = v8;
      *(_QWORD *)(a1 + 56) = 0;
    }
  }
  else
  {
    v3[7] = 0;
  }
  *((_WORD *)v5 + 32) = 1;
  v9 = *(WTF **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  if (v9)
  {
    std::default_delete<WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy>::operator()[abi:sn180100](v9, v4);
    v5 = *(_QWORD **)(v2 + 16);
  }
  v10 = (unsigned __int8 *)v5[3];
  if (!v10[294])
  {
    v18 = v10[289];
    if ((*(_BYTE *)(a1 + 73) != 0) == (v10[289] != 0))
    {
      v19 = *(_BYTE *)(a1 + 72) != 0;
      if (v19 == (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v10 + 88))(v10))
        goto LABEL_25;
      v10 = (unsigned __int8 *)v5[3];
      v18 = v10[289];
    }
    v20 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 88))(v10);
    v21 = WTF::fastMalloc((WTF *)0x10);
    v22 = v21;
    *(_QWORD *)v21 = off_1E34181B8;
    if (v20)
      v23 = 256;
    else
      v23 = 0;
    *(_WORD *)(v21 + 8) = v23 | v18;
    v24 = (unsigned int *)v5[2];
    if (v24)
    {
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v26 = &off_1E3418140;
    v26[1] = v22;
    v26[2] = v24;
    v30[0] = v26;
    v27 = v5[7];
    if (!v27)
      goto LABEL_27;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v27 + 48))(v27, v30);
    v28 = v30[0];
    v30[0] = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
LABEL_25:
    *((_BYTE *)v5 + 65) = 1;
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v5[3] + 128, v5, (uint64_t)v30);
    return;
  }
  v11 = v10[293];
  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v12 = off_1E3418190;
  *(_BYTE *)(v12 + 8) = v11;
  v13 = (unsigned int *)v5[2];
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v15 = &off_1E3418140;
  v15[1] = v12;
  v15[2] = v13;
  v30[0] = v15;
  v16 = v5[7];
  if (!v16)
  {
LABEL_27:
    v29 = (WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *)std::__throw_bad_function_call[abi:sn180100]();
    WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::~MediaStreamTrackPrivateSourceObserverSourceProxy(v29);
    return;
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 48))(v16, v30);
  v17 = v30[0];
  v30[0] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
}

void WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::~MediaStreamTrackPrivateSourceObserverSourceProxy(WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *this, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  if (*((_BYTE *)this + 65))
  {
    v3 = (_QWORD *)*((_QWORD *)this + 3);
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v3 + 16), this);
    v4 = v3[16];
    if (!v4 || !*(_DWORD *)(v4 - 12))
      goto LABEL_3;
    v15 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v15)
    {
      v16 = 8 * v15;
      v17 = (uint64_t *)v3[16];
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        ++v17;
        v16 -= 8;
        if (!v16)
          goto LABEL_3;
      }
    }
    else
    {
      v17 = (uint64_t *)v3[16];
    }
    v18 = (uint64_t *)(v4 + 8 * v15);
    if (v17 == v18)
      goto LABEL_3;
    v19 = *v17;
LABEL_31:
    if (!*(_QWORD *)(v19 + 8))
    {
      while (++v17 != v18)
      {
        v19 = *v17;
        if ((unint64_t)(*v17 + 1) > 1)
        {
          if (v17 != v18)
            goto LABEL_31;
          break;
        }
      }
LABEL_3:
      (*(void (**)(_QWORD *))(*v3 + 392))(v3);
    }
  }
  v5 = (WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *)*((_QWORD *)this + 7);
  if (v5 == (WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *)((char *)this + 32))
  {
    v6 = 4;
    v5 = (WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *)((char *)this + 32);
  }
  else
  {
    if (!v5)
      goto LABEL_9;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_9:
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7);
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  _QWORD *v3;
  uint64_t v4;
  WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  if (*((_BYTE *)this + 65))
  {
    v3 = (_QWORD *)*((_QWORD *)this + 3);
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v3 + 16), this);
    v4 = v3[16];
    if (!v4 || !*(_DWORD *)(v4 - 12))
      goto LABEL_3;
    v15 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v15)
    {
      v16 = 8 * v15;
      v17 = (uint64_t *)v3[16];
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        ++v17;
        v16 -= 8;
        if (!v16)
          goto LABEL_3;
      }
    }
    else
    {
      v17 = (uint64_t *)v3[16];
    }
    v18 = (uint64_t *)(v4 + 8 * v15);
    if (v17 == v18)
      goto LABEL_3;
    v19 = *v17;
LABEL_31:
    if (!*(_QWORD *)(v19 + 8))
    {
      while (++v17 != v18)
      {
        v19 = *v17;
        if ((unint64_t)(*v17 + 1) > 1)
        {
          if (v17 != v18)
            goto LABEL_31;
          break;
        }
      }
LABEL_3:
      (*(void (**)(_QWORD *))(*v3 + 392))(v3);
    }
  }
  v5 = (WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *)*((_QWORD *)this + 7);
  if (v5 == (WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *)((char *)this + 32))
  {
    v6 = 4;
    v5 = (WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *)((char *)this + 32);
  }
  else
  {
    if (!v5)
      goto LABEL_9;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_9:
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7);
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sourceStarted(WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *this)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *v8;
  uint64_t v9;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3418168;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E3418140;
  v5[1] = v2;
  v5[2] = v3;
  v9 = (uint64_t)v5;
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v9);
    result = v9;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v8 = (WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *)std::__throw_bad_function_call[abi:sn180100]();
    return WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sourceStopped(v8);
  }
  return result;
}

uint64_t WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sourceStopped(WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *this)
{
  char v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *v9;
  uint64_t v10;

  v2 = *(_BYTE *)(*((_QWORD *)this + 3) + 293);
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E3418190;
  *(_BYTE *)(v3 + 8) = v2;
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E3418140;
  v6[1] = v3;
  v6[2] = v4;
  v10 = (uint64_t)v6;
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v10);
    result = v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v9 = (WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *)std::__throw_bad_function_call[abi:sn180100]();
    return WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sourceMutedChanged(v9);
  }
  return result;
}

uint64_t WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sourceMutedChanged(WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *this)
{
  unsigned __int8 *v2;
  __int16 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *v13;
  uint64_t v14;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v3 = v2[289];
  v4 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v2 + 88))(v2);
  v5 = WTF::fastMalloc((WTF *)0x10);
  v6 = v5;
  *(_QWORD *)v5 = off_1E34181B8;
  if (v4)
    v7 = 256;
  else
    v7 = 0;
  *(_WORD *)(v5 + 8) = v7 | v3;
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E3418140;
  v10[1] = v6;
  v10[2] = v8;
  v14 = (uint64_t)v10;
  v11 = *((_QWORD *)this + 7);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v14);
    result = v14;
    v14 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v13 = (WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *)std::__throw_bad_function_call[abi:sn180100]();
    return WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sourceSettingsChanged(v13);
  }
  return result;
}

uint64_t WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sourceSettingsChanged(WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *this)
{
  uint64_t v2;
  int v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  __int128 v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  WTF *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  _DWORD *v29;
  _DWORD *v30;
  WTF *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  unsigned int *v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *v42;
  __int128 v43;
  __int128 v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  _BYTE v49[22];
  _OWORD v50[3];
  void *__src;
  _DWORD __n[5];
  __int128 v53;
  char v54;
  _DWORD *v55;
  _DWORD *v56;
  __int128 v57;
  void *v58;
  _DWORD v59[5];
  _BYTE v60[22];
  uint64_t v61;
  _QWORD *v62;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 128))(*((_QWORD *)this + 3));
  v3 = *(_DWORD *)(v2 + 8);
  v4 = *(_BYTE *)(v2 + 12);
  v5 = *(_BYTE *)(v2 + 32);
  v6 = *(_QWORD *)v2;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v9 = *(_WORD *)(v2 + 64);
  v10 = *(_BYTE *)(v2 + 66);
  v11 = *(_QWORD *)(v2 + 72);
  v12 = *(_WORD *)(v2 + 80);
  v13 = *(_BYTE *)(v2 + 82);
  v14 = *(_OWORD *)(v2 + 83);
  *(_DWORD *)&v49[18] = *(_DWORD *)(v2 + 98);
  *(_OWORD *)&v49[3] = v14;
  *(_QWORD *)&v43 = v6;
  DWORD2(v43) = v3;
  BYTE12(v43) = v4;
  *(_QWORD *)&v44 = v7;
  *((_QWORD *)&v44 + 1) = v8;
  v45 = v5;
  *(_QWORD *)&v46 = v62;
  *((_QWORD *)&v46 + 1) = v61;
  LOWORD(v48) = v9;
  BYTE2(v48) = v10;
  *((_QWORD *)&v48 + 1) = v11;
  *(_WORD *)v49 = v12;
  v49[2] = v13;
  v15 = (__int128 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3));
  WebCore::RealtimeMediaSourceCapabilities::isolatedCopy((WebCore::RealtimeMediaSourceCapabilities *)v50, v15);
  v16 = WTF::fastMalloc((WTF *)0x130);
  *(_QWORD *)v16 = off_1E34181E0;
  v17 = v43;
  v18 = v44;
  *(_BYTE *)(v16 + 40) = v45;
  *(_OWORD *)(v16 + 24) = v18;
  *(_OWORD *)(v16 + 8) = v17;
  *(_QWORD *)(v16 + 48) = v46;
  v19 = *((_QWORD *)&v46 + 1);
  v46 = 0u;
  *(_QWORD *)(v16 + 56) = v19;
  v20 = v47;
  v47 = 0;
  *(_QWORD *)(v16 + 64) = v20;
  v21 = v48;
  v22 = *(_OWORD *)v49;
  *(_QWORD *)(v16 + 102) = *(_QWORD *)&v49[14];
  *(_OWORD *)(v16 + 88) = v22;
  *(_OWORD *)(v16 + 72) = v21;
  v23 = v50[0];
  v24 = v50[2];
  *(_OWORD *)(v16 + 128) = v50[1];
  *(_OWORD *)(v16 + 144) = v24;
  *(_OWORD *)(v16 + 112) = v23;
  v25 = (WTF *)__n[0];
  *(_OWORD *)(v16 + 160) = 0u;
  *(_DWORD *)(v16 + 172) = (_DWORD)v25;
  if ((_DWORD)v25)
  {
    v26 = (void *)WTF::fastMalloc(v25);
    *(_DWORD *)(v16 + 168) = (_DWORD)v25;
    *(_QWORD *)(v16 + 160) = v26;
    memcpy(v26, __src, __n[0]);
  }
  v27 = *(_OWORD *)&__n[1];
  v28 = v53;
  *(_BYTE *)(v16 + 208) = v54;
  *(_OWORD *)(v16 + 176) = v27;
  *(_OWORD *)(v16 + 192) = v28;
  v29 = v55;
  if (v55)
    *v55 += 2;
  *(_QWORD *)(v16 + 216) = v29;
  v30 = v56;
  if (v56)
    *v56 += 2;
  *(_QWORD *)(v16 + 224) = v30;
  *(_OWORD *)(v16 + 232) = v57;
  v31 = (WTF *)v59[0];
  *(_QWORD *)(v16 + 248) = 0;
  *(_QWORD *)(v16 + 256) = 0;
  *(_DWORD *)(v16 + 260) = (_DWORD)v31;
  if ((_DWORD)v31)
  {
    v32 = (void *)WTF::fastMalloc(v31);
    *(_DWORD *)(v16 + 256) = (_DWORD)v31;
    *(_QWORD *)(v16 + 248) = v32;
    memcpy(v32, v58, v59[0]);
  }
  v33 = *(_OWORD *)&v59[1];
  v34 = *(_OWORD *)v60;
  *(_QWORD *)(v16 + 294) = *(_QWORD *)&v60[14];
  *(_OWORD *)(v16 + 264) = v33;
  *(_OWORD *)(v16 + 280) = v34;
  v35 = (unsigned int *)*((_QWORD *)this + 2);
  if (v35)
  {
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 + 1, v35));
  }
  v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v37 = &off_1E3418140;
  v37[1] = v16;
  v37[2] = v35;
  v62 = v37;
  v38 = *((_QWORD *)this + 7);
  if (v38)
  {
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v38 + 48))(v38, &v62);
    v40 = v62;
    v62 = 0;
    if (v40)
      (*(void (**)(_QWORD *))(*v40 + 8))(v40);
    return _ZZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy21sourceSettingsChangedEvENUlRT_E_D2Ev((uint64_t)&v43, v39);
  }
  else
  {
    v42 = (WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *)std::__throw_bad_function_call[abi:sn180100]();
    return WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sourceConfigurationChanged(v42);
  }
}

uint64_t WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sourceConfigurationChanged(WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *this)
{
  uint64_t v2;
  int v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  __int128 v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  WTF *v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  _DWORD *v30;
  _DWORD *v31;
  WTF *v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  unsigned int *v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  _BYTE v51[22];
  _OWORD v52[3];
  void *__src;
  _DWORD __n[5];
  __int128 v55;
  char v56;
  _DWORD *v57;
  _DWORD *v58;
  __int128 v59;
  void *v60;
  _DWORD v61[5];
  _BYTE v62[22];
  uint64_t v63;
  _QWORD *v64;

  WTF::String::isolatedCopy();
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 128))(*((_QWORD *)this + 3));
  v3 = *(_DWORD *)(v2 + 8);
  v4 = *(_BYTE *)(v2 + 12);
  v5 = *(_BYTE *)(v2 + 32);
  v6 = *(_QWORD *)v2;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v9 = *(_WORD *)(v2 + 64);
  v10 = *(_BYTE *)(v2 + 66);
  v11 = *(_QWORD *)(v2 + 72);
  v12 = *(_WORD *)(v2 + 80);
  v13 = *(_BYTE *)(v2 + 82);
  v14 = *(_OWORD *)(v2 + 83);
  *(_DWORD *)&v51[18] = *(_DWORD *)(v2 + 98);
  *(_OWORD *)&v51[3] = v14;
  *(_QWORD *)&v45 = v6;
  DWORD2(v45) = v3;
  BYTE12(v45) = v4;
  *(_QWORD *)&v46 = v7;
  *((_QWORD *)&v46 + 1) = v8;
  v47 = v5;
  *(_QWORD *)&v48 = v64;
  *((_QWORD *)&v48 + 1) = v63;
  LOWORD(v50) = v9;
  BYTE2(v50) = v10;
  *((_QWORD *)&v50 + 1) = v11;
  *(_WORD *)v51 = v12;
  v51[2] = v13;
  v15 = (__int128 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3));
  WebCore::RealtimeMediaSourceCapabilities::isolatedCopy((WebCore::RealtimeMediaSourceCapabilities *)v52, v15);
  v16 = WTF::fastMalloc((WTF *)0x138);
  *(_QWORD *)v16 = off_1E3418208;
  v17 = v44;
  v44 = 0;
  *(_QWORD *)(v16 + 8) = v17;
  v18 = v45;
  v19 = v46;
  *(_BYTE *)(v16 + 48) = v47;
  *(_OWORD *)(v16 + 16) = v18;
  *(_OWORD *)(v16 + 32) = v19;
  *(_QWORD *)(v16 + 56) = v48;
  v20 = *((_QWORD *)&v48 + 1);
  v48 = 0u;
  *(_QWORD *)(v16 + 64) = v20;
  v21 = v49;
  v49 = 0;
  *(_QWORD *)(v16 + 72) = v21;
  v22 = v50;
  v23 = *(_OWORD *)v51;
  *(_QWORD *)(v16 + 110) = *(_QWORD *)&v51[14];
  *(_OWORD *)(v16 + 80) = v22;
  *(_OWORD *)(v16 + 96) = v23;
  v24 = v52[0];
  v25 = v52[1];
  *(_OWORD *)(v16 + 152) = v52[2];
  *(_OWORD *)(v16 + 136) = v25;
  *(_OWORD *)(v16 + 120) = v24;
  v26 = (WTF *)__n[0];
  *(_OWORD *)(v16 + 168) = 0u;
  *(_DWORD *)(v16 + 180) = (_DWORD)v26;
  if ((_DWORD)v26)
  {
    v27 = (void *)WTF::fastMalloc(v26);
    *(_DWORD *)(v16 + 176) = (_DWORD)v26;
    *(_QWORD *)(v16 + 168) = v27;
    memcpy(v27, __src, __n[0]);
  }
  v28 = *(_OWORD *)&__n[1];
  v29 = v55;
  *(_BYTE *)(v16 + 216) = v56;
  *(_OWORD *)(v16 + 200) = v29;
  *(_OWORD *)(v16 + 184) = v28;
  v30 = v57;
  if (v57)
    *v57 += 2;
  *(_QWORD *)(v16 + 224) = v30;
  v31 = v58;
  if (v58)
    *v58 += 2;
  *(_QWORD *)(v16 + 232) = v31;
  *(_OWORD *)(v16 + 240) = v59;
  v32 = (WTF *)v61[0];
  *(_QWORD *)(v16 + 256) = 0;
  *(_QWORD *)(v16 + 264) = 0;
  *(_DWORD *)(v16 + 268) = (_DWORD)v32;
  if ((_DWORD)v32)
  {
    v33 = (void *)WTF::fastMalloc(v32);
    *(_DWORD *)(v16 + 264) = (_DWORD)v32;
    *(_QWORD *)(v16 + 256) = v33;
    memcpy(v33, v60, v61[0]);
  }
  v34 = *(_OWORD *)&v61[1];
  v35 = *(_OWORD *)v62;
  *(_QWORD *)(v16 + 302) = *(_QWORD *)&v62[14];
  *(_OWORD *)(v16 + 272) = v34;
  *(_OWORD *)(v16 + 288) = v35;
  v36 = (unsigned int *)*((_QWORD *)this + 2);
  if (v36)
  {
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v38 = &off_1E3418140;
  v38[1] = v16;
  v38[2] = v36;
  v64 = v38;
  v39 = *((_QWORD *)this + 7);
  if (v39)
  {
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v39 + 48))(v39, &v64);
    v41 = v64;
    v64 = 0;
    if (v41)
      (*(void (**)(_QWORD *))(*v41 + 8))(v41);
    return _ZZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy26sourceConfigurationChangedEvENUlRT_E_D2Ev((uint64_t)&v44, v40);
  }
  else
  {
    v43 = (WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *)std::__throw_bad_function_call[abi:sn180100]();
    return WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::preventSourceFromEnding(v43);
  }
}

uint64_t WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::preventSourceFromEnding(WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::hasStartedProducingData(WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy *this)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3418230;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E3418140;
  v5[1] = v2;
  v5[2] = v3;
  v9 = (uint64_t)v5;
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v9);
    result = v9;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v8 = std::__throw_bad_function_call[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sendToMediaStreamTrackPrivate(WTF::Function<void ()(WebCore::MediaStreamTrackPrivate &)> &&)::{lambda(void)#1},void>::~CallableWrapper(v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sendToMediaStreamTrackPrivate(WTF::Function<void ()(WebCore::MediaStreamTrackPrivate &)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *a1 = &off_1E3418140;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sendToMediaStreamTrackPrivate(WTF::Function<void ()(WebCore::MediaStreamTrackPrivate &)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E3418140;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy::sendToMediaStreamTrackPrivate(WTF::Function<void ()(WebCore::MediaStreamTrackPrivate &)> &&)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  WebCore::MediaStreamTrackPrivate *v2;
  void *v3;
  WTF *v4;
  void *v5;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = *(WebCore::MediaStreamTrackPrivate **)(v1 + 8);
    if (v2)
    {
      ++*((_DWORD *)v2 + 2);
      result = (*(uint64_t (**)(_QWORD, WebCore::MediaStreamTrackPrivate *))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), v2);
      if (*((_DWORD *)v2 + 2) == 1)
      {
        WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v2, v3);
        return WTF::fastFree(v4, v5);
      }
      else
      {
        --*((_DWORD *)v2 + 2);
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy13sourceStartedEvEUlRT_E_vJRNS2_23MediaStreamTrackPrivateEEE4callES8_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t result;
  WTF *v8;
  void *v9;
  _QWORD v10[4];

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_QWORD *)(a2 + 88);
  v10[0] = "MediaStreamTrackPrivate";
  v10[1] = 24;
  v10[2] = "sourceStarted";
  v10[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v10);
  *(_BYTE *)(a2 + 96) = 1;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E3418628;
  v5[1] = a2;
  v10[0] = v5;
  ++*(_DWORD *)(a2 + 8);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(a2 + 24), v10);
  if (*(_DWORD *)(a2 + 8) == 1)
  {
    WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate((WebCore::MediaStreamTrackPrivate *)a2, v6);
    WTF::fastFree(v8, v9);
  }
  else
  {
    --*(_DWORD *)(a2 + 8);
  }
  result = v10[0];
  v10[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_BYTE *_ZN3WTF6Detail15CallableWrapperIZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy13sourceStoppedEvEUlRT_E_vJRNS2_23MediaStreamTrackPrivateEEE4callES8_(_BYTE *result, WebCore::MediaStreamTrackPrivate *this)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  WTF *v8;
  void *v9;
  _QWORD v10[4];

  v2 = result[8];
  *((_BYTE *)this + 96) = 0;
  if (!*((_BYTE *)this + 74))
  {
    v4 = *((_QWORD *)this + 10);
    v5 = *((_QWORD *)this + 11);
    v10[0] = "MediaStreamTrackPrivate";
    v10[1] = 24;
    v10[2] = "sourceStopped";
    v10[3] = v5;
    if (*(_BYTE *)(v4 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v10);
    *((_BYTE *)this + 74) = 1;
    *((_BYTE *)this + 75) = v2;
    WebCore::MediaStreamTrackPrivate::updateReadyState((uint64_t)this);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3418650;
    v6[1] = this;
    v10[0] = v6;
    ++*((_DWORD *)this + 2);
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 3, v10);
    if (*((_DWORD *)this + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(this, v7);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*((_DWORD *)this + 2);
    }
    result = (_BYTE *)v10[0];
    v10[0] = 0;
    if (result)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy18sourceMutedChangedEvEUlRT_E_vJRNS2_23MediaStreamTrackPrivateEEE4callES8_(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t result;
  WTF *v10;
  void *v11;
  _QWORD v12[4];

  v3 = *(_BYTE *)(a1 + 9);
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 88);
  v12[0] = "MediaStreamTrackPrivate";
  v12[1] = 24;
  v12[2] = "sourceMutedChanged";
  v12[3] = v6;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v12);
  *(_BYTE *)(a2 + 98) = v3;
  *(_BYTE *)(a2 + 97) = v4;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3418678;
  v7[1] = a2;
  v12[0] = v7;
  ++*(_DWORD *)(a2 + 8);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(a2 + 24), v12);
  if (*(_DWORD *)(a2 + 8) == 1)
  {
    WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate((WebCore::MediaStreamTrackPrivate *)a2, v8);
    WTF::fastFree(v10, v11);
  }
  else
  {
    --*(_DWORD *)(a2 + 8);
  }
  result = v12[0];
  v12[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy21sourceSettingsChangedEvEUlRT_E_vJRNS2_23MediaStreamTrackPrivateEEED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E34181E0;
  _ZZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy21sourceSettingsChangedEvENUlRT_E_D2Ev((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy21sourceSettingsChangedEvEUlRT_E_vJRNS2_23MediaStreamTrackPrivateEEED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34181E0;
  _ZZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy21sourceSettingsChangedEvENUlRT_E_D2Ev((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy21sourceSettingsChangedEvEUlRT_E_vJRNS2_23MediaStreamTrackPrivateEEE4callES8_(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  void *v29;
  uint64_t result;
  WTF *v31;
  void *v32;
  _QWORD v33[4];

  v4 = (__int128 *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 88);
  v33[0] = "MediaStreamTrackPrivate";
  v33[1] = 24;
  v33[2] = "sourceSettingsChanged";
  v33[3] = v6;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v33);
  v7 = *v4;
  v8 = v4[1];
  *(_BYTE *)(a2 + 136) = *((_BYTE *)v4 + 32);
  *(_OWORD *)(a2 + 120) = v8;
  *(_OWORD *)(a2 + 104) = v7;
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v10 = *(WTF::StringImpl **)(a2 + 144);
  *(_QWORD *)(a2 + 144) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v12 = *(WTF::StringImpl **)(a2 + 152);
  *(_QWORD *)(a2 + 152) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v14 = *(WTF::StringImpl **)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(_OWORD *)(a1 + 72);
  v16 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 198) = *(_QWORD *)(a1 + 102);
  *(_OWORD *)(a2 + 184) = v16;
  *(_OWORD *)(a2 + 168) = v15;
  v17 = *(_OWORD *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 240) = v18;
  *(_OWORD *)(a2 + 208) = v17;
  WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 256, (const void **)(a1 + 160));
  v20 = *(_OWORD *)(a1 + 176);
  v21 = *(_OWORD *)(a1 + 192);
  *(_BYTE *)(a2 + 304) = *(_BYTE *)(a1 + 208);
  *(_OWORD *)(a2 + 272) = v20;
  *(_OWORD *)(a2 + 288) = v21;
  v22 = *(_DWORD **)(a1 + 216);
  if (v22)
    *v22 += 2;
  v23 = *(WTF::StringImpl **)(a2 + 312);
  *(_QWORD *)(a2 + 312) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v19);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *(_DWORD **)(a1 + 224);
  if (v24)
    *v24 += 2;
  v25 = *(WTF::StringImpl **)(a2 + 320);
  *(_QWORD *)(a2 + 320) = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v19);
    else
      *(_DWORD *)v25 -= 2;
  }
  *(_OWORD *)(a2 + 328) = *(_OWORD *)(a1 + 232);
  WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 344, (const void **)(a1 + 248));
  v26 = *(_QWORD *)(a1 + 294);
  v27 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(a2 + 360) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(a2 + 376) = v27;
  *(_QWORD *)(a2 + 390) = v26;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v28 = off_1E34186A0;
  v28[1] = a2;
  v33[0] = v28;
  ++*(_DWORD *)(a2 + 8);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(a2 + 24), v33);
  if (*(_DWORD *)(a2 + 8) == 1)
  {
    WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate((WebCore::MediaStreamTrackPrivate *)a2, v29);
    WTF::fastFree(v31, v32);
  }
  else
  {
    --*(_DWORD *)(a2 + 8);
  }
  result = v33[0];
  v33[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy21sourceSettingsChangedEvENUlRT_E_D2Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = *(WTF **)(a1 + 240);
  if (v3)
  {
    *(_QWORD *)(a1 + 240) = 0;
    *(_DWORD *)(a1 + 248) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF::StringImpl **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF **)(a1 + 152);
  if (v6)
  {
    *(_QWORD *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 160) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy26sourceConfigurationChangedEvEUlRT_E_vJRNS2_23MediaStreamTrackPrivateEEED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E3418208;
  _ZZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy26sourceConfigurationChangedEvENUlRT_E_D2Ev((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy26sourceConfigurationChangedEvEUlRT_E_vJRNS2_23MediaStreamTrackPrivateEEED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3418208;
  _ZZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy26sourceConfigurationChangedEvENUlRT_E_D2Ev((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy26sourceConfigurationChangedEvEUlRT_E_vJRNS2_23MediaStreamTrackPrivateEEE4callES8_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  __int128 v28;
  _QWORD *v29;
  void *v30;
  uint64_t result;
  WTF *v32;
  void *v33;
  _QWORD v34[4];

  v4 = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  v34[0] = "MediaStreamTrackPrivate";
  v34[1] = 24;
  v34[2] = "sourceConfigurationChanged";
  v34[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v34);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *(WTF::StringImpl **)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 136) = *(_BYTE *)(a1 + 48);
  *(_OWORD *)(a2 + 120) = v9;
  *(_OWORD *)(a2 + 104) = v8;
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v11 = *(WTF::StringImpl **)(a2 + 144);
  *(_QWORD *)(a2 + 144) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v13 = *(WTF::StringImpl **)(a2 + 152);
  *(_QWORD *)(a2 + 152) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  v15 = *(WTF::StringImpl **)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(_OWORD *)(a1 + 80);
  v17 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 198) = *(_QWORD *)(a1 + 110);
  *(_OWORD *)(a2 + 184) = v17;
  *(_OWORD *)(a2 + 168) = v16;
  v18 = *(_OWORD *)(a1 + 120);
  v19 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 240) = v19;
  *(_OWORD *)(a2 + 208) = v18;
  WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 256, (const void **)(a1 + 168));
  v21 = *(_OWORD *)(a1 + 184);
  v22 = *(_OWORD *)(a1 + 200);
  *(_BYTE *)(a2 + 304) = *(_BYTE *)(a1 + 216);
  *(_OWORD *)(a2 + 272) = v21;
  *(_OWORD *)(a2 + 288) = v22;
  v23 = *(_DWORD **)(a1 + 224);
  if (v23)
    *v23 += 2;
  v24 = *(WTF::StringImpl **)(a2 + 312);
  *(_QWORD *)(a2 + 312) = v23;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v20);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *(_DWORD **)(a1 + 232);
  if (v25)
    *v25 += 2;
  v26 = *(WTF::StringImpl **)(a2 + 320);
  *(_QWORD *)(a2 + 320) = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v20);
    else
      *(_DWORD *)v26 -= 2;
  }
  *(_OWORD *)(a2 + 328) = *(_OWORD *)(a1 + 240);
  WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 344, (const void **)(a1 + 256));
  v27 = *(_QWORD *)(a1 + 302);
  v28 = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a2 + 360) = *(_OWORD *)(a1 + 272);
  *(_OWORD *)(a2 + 376) = v28;
  *(_QWORD *)(a2 + 390) = v27;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v29 = off_1E34186C8;
  v29[1] = a2;
  v34[0] = v29;
  ++*(_DWORD *)(a2 + 8);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(a2 + 24), v34);
  if (*(_DWORD *)(a2 + 8) == 1)
  {
    WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate((WebCore::MediaStreamTrackPrivate *)a2, v30);
    WTF::fastFree(v32, v33);
  }
  else
  {
    --*(_DWORD *)(a2 + 8);
  }
  result = v34[0];
  v34[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy26sourceConfigurationChangedEvENUlRT_E_D2Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = *(WTF **)(a1 + 248);
  if (v3)
  {
    *(_QWORD *)(a1 + 248) = 0;
    *(_DWORD *)(a1 + 256) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF::StringImpl **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF **)(a1 + 160);
  if (v6)
  {
    *(_QWORD *)(a1 + 160) = 0;
    *(_DWORD *)(a1 + 168) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore48MediaStreamTrackPrivateSourceObserverSourceProxy23hasStartedProducingDataEvEUlRT_E_vJRNS2_23MediaStreamTrackPrivateEEE4callES8_(int a1, WebCore::MediaStreamTrackPrivate *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[4];

  if (!*((_BYTE *)this + 76))
  {
    v3 = *((_QWORD *)this + 10);
    v4 = *((_QWORD *)this + 11);
    v6[0] = "MediaStreamTrackPrivate";
    v6[1] = 24;
    v6[2] = "hasStartedProducingData";
    v6[3] = v4;
    if (*(_BYTE *)(v3 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v6);
    *((_BYTE *)this + 76) = 1;
    return WebCore::MediaStreamTrackPrivate::updateReadyState((uint64_t)this);
  }
  return result;
}

uint64_t std::default_delete<WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy>::operator()[abi:sn180100](WTF *this, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  if (*((_BYTE *)this + 65))
  {
    v3 = (_QWORD *)*((_QWORD *)this + 3);
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v3 + 16), this);
    v4 = v3[16];
    if (!v4 || !*(_DWORD *)(v4 - 12))
      goto LABEL_3;
    v16 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v16)
    {
      v17 = 8 * v16;
      v18 = (uint64_t *)v3[16];
      while ((unint64_t)(*v18 + 1) <= 1)
      {
        ++v18;
        v17 -= 8;
        if (!v17)
          goto LABEL_3;
      }
    }
    else
    {
      v18 = (uint64_t *)v3[16];
    }
    v19 = (uint64_t *)(v4 + 8 * v16);
    if (v18 == v19)
      goto LABEL_3;
    v20 = *v18;
LABEL_31:
    if (!*(_QWORD *)(v20 + 8))
    {
      while (++v18 != v19)
      {
        v20 = *v18;
        if ((unint64_t)(*v18 + 1) > 1)
        {
          if (v18 != v19)
            goto LABEL_31;
          break;
        }
      }
LABEL_3:
      (*(void (**)(_QWORD *))(*v3 + 392))(v3);
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 7);
  if (v5 == (WTF *)((char *)this + 32))
  {
    v6 = 4;
    v5 = (WTF *)((char *)this + 32);
  }
  else
  {
    if (!v5)
      goto LABEL_9;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_9:
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7);
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::start(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3418258;
  a1[1] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E3418588;
      v6[1] = v2;
      v7 = v6;
      WTF::ensureOnMainThread();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::start(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3418258;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3418588;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return WTF::fastFree(this, a2);
}

_BYTE *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::start(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebCore::RealtimeMediaSource::start(*(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::setMuted(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3418280;
  a1[1] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E3418588;
      v6[1] = v2;
      v7 = v6;
      WTF::ensureOnMainThread();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::setMuted(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3418280;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3418588;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::setMuted(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 24);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 80))(v2, v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::requestToEnd(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34182A8;
  a1[1] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E3418588;
      v6[1] = v2;
      v7 = v6;
      WTF::ensureOnMainThread();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::requestToEnd(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34182A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3418588;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::requestToEnd(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  *(_BYTE *)(v1 + 64) = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 72))(*(_QWORD *)(v1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::applyConstraints(WebCore::MediaConstraints const&,WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = off_1E34182D0;
  WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3418588;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::applyConstraints(WebCore::MediaConstraints const&,WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = off_1E34182D0;
  WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3418588;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivateSourceObserver::applyConstraints(WebCore::MediaConstraints const&,WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)> &&)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;

  v2 = *(_QWORD *)(a1[1] + 16);
  v3 = a1 + 3;
  v4 = *(_QWORD *)(v2 + 8);
  if (v4)
    goto LABEL_12;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = v2;
  v6 = *(unsigned int **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = v4;
  if (!v6)
    goto LABEL_12;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v4 = *(_QWORD *)(v2 + 8);
  if (v4)
  {
LABEL_12:
    do
      v9 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v9 + 1, (unsigned int *)v4));
  }
  v10 = a1[2];
  a1[2] = 0;
  v11 = a1[124];
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = &off_1E34182F8;
  v12[1] = v4;
  v12[2] = v10;
  v12[3] = v11;
  v14 = v12;
  (*(void (**)(_QWORD, _QWORD *, _QWORD **))(**(_QWORD **)(v2 + 24) + 184))(*(_QWORD *)(v2 + 24), v3, &v14);
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore37MediaStreamTrackPrivateSourceObserver16applyConstraintsERKNS2_16MediaConstraintsEONS_17CompletionHandlerIFvONSt3__18optionalINS2_19RealtimeMediaSource21ApplyConstraintsErrorEEEONS2_27RealtimeMediaSourceSettingsEONS2_31RealtimeMediaSourceCapabilitiesEEEEENUlvE_clEvEUlOT_E_vJSD_EED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  *a1 = &off_1E34182F8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E3418588;
      v10[1] = v3;
      v11 = v10;
      WTF::ensureOnMainThread();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore37MediaStreamTrackPrivateSourceObserver16applyConstraintsERKNS2_16MediaConstraintsEONS_17CompletionHandlerIFvONSt3__18optionalINS2_19RealtimeMediaSource21ApplyConstraintsErrorEEEONS2_27RealtimeMediaSourceSettingsEONS2_31RealtimeMediaSourceCapabilitiesEEEEENUlvE_clEvEUlOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  *(_QWORD *)this = &off_1E34182F8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E3418588;
      v10[1] = v3;
      v11 = v10;
      WTF::ensureOnMainThread();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore37MediaStreamTrackPrivateSourceObserver16applyConstraintsERKNS2_16MediaConstraintsEONS_17CompletionHandlerIFvONSt3__18optionalINS2_19RealtimeMediaSource21ApplyConstraintsErrorEEEONS2_27RealtimeMediaSourceSettingsEONS2_31RealtimeMediaSourceCapabilitiesEEEEENUlvE_clEvEUlOT_E_vJSD_EE4callESD_(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  WTF *v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  _DWORD *v39;
  _DWORD *v40;
  WTF *v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  __int128 v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  _BYTE v59[22];
  _OWORD v60[3];
  void *__src;
  _DWORD __n[5];
  __int128 v63;
  char v64;
  _DWORD *v65;
  _DWORD *v66;
  __int128 v67;
  void *v68;
  _DWORD v69[5];
  _BYTE v70[22];
  uint64_t v71;
  _QWORD v72[4];

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = result;
      v5 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = 0;
      v49 = v5;
      v6 = a2[16];
      if (v6)
      {
        LOBYTE(v72[0]) = *a2;
        WTF::String::isolatedCopy();
        v6 = v72[0];
        v51 = v72[1];
        v2 = *(_QWORD *)(v4 + 8);
        v7 = 1;
      }
      else
      {
        v7 = 0;
      }
      v50 = v6;
      v52 = v7;
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 24) + 128))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 24));
      v9 = *(_DWORD *)(v8 + 8);
      v10 = *(_BYTE *)(v8 + 12);
      v11 = *(_BYTE *)(v8 + 32);
      v12 = *(_QWORD *)v8;
      v13 = *(_QWORD *)(v8 + 16);
      v14 = *(_QWORD *)(v8 + 24);
      WTF::String::isolatedCopy();
      WTF::String::isolatedCopy();
      WTF::String::isolatedCopy();
      v15 = *(_WORD *)(v8 + 64);
      v16 = *(_BYTE *)(v8 + 66);
      v17 = *(_QWORD *)(v8 + 72);
      v18 = *(_WORD *)(v8 + 80);
      v19 = *(_BYTE *)(v8 + 82);
      v20 = *(_OWORD *)(v8 + 83);
      *(_DWORD *)&v59[18] = *(_DWORD *)(v8 + 98);
      *(_OWORD *)&v59[3] = v20;
      *(_QWORD *)&v53 = v12;
      DWORD2(v53) = v9;
      BYTE12(v53) = v10;
      *(_QWORD *)&v54 = v13;
      *((_QWORD *)&v54 + 1) = v14;
      v55 = v11;
      *(_QWORD *)&v56 = v72[0];
      *((_QWORD *)&v56 + 1) = v72[2];
      LOWORD(v58) = v15;
      BYTE2(v58) = v16;
      *((_QWORD *)&v58 + 1) = v17;
      *(_WORD *)v59 = v18;
      v59[2] = v19;
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 24);
      v22 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 120))(v21);
      WebCore::RealtimeMediaSourceCapabilities::isolatedCopy((WebCore::RealtimeMediaSourceCapabilities *)v60, v22);
      v71 = *(_QWORD *)(v4 + 24);
      v23 = WTF::fastMalloc((WTF *)0x158);
      v24 = v23;
      *(_QWORD *)v23 = off_1E3418320;
      v25 = v49;
      v49 = 0;
      *(_QWORD *)(v23 + 8) = v25;
      *(_BYTE *)(v23 + 16) = 0;
      *(_BYTE *)(v23 + 32) = 0;
      if (v52)
      {
        *(_BYTE *)(v23 + 16) = v50;
        v26 = v51;
        v51 = 0;
        *(_QWORD *)(v23 + 24) = v26;
        *(_BYTE *)(v23 + 32) = 1;
      }
      v27 = v53;
      v28 = v54;
      *(_BYTE *)(v23 + 72) = v55;
      *(_OWORD *)(v23 + 56) = v28;
      *(_OWORD *)(v23 + 40) = v27;
      *(_QWORD *)(v23 + 80) = v56;
      v29 = *((_QWORD *)&v56 + 1);
      v56 = 0u;
      *(_QWORD *)(v23 + 88) = v29;
      v30 = v57;
      v57 = 0;
      *(_QWORD *)(v23 + 96) = v30;
      v31 = v58;
      v32 = *(_OWORD *)v59;
      *(_QWORD *)(v23 + 134) = *(_QWORD *)&v59[14];
      *(_OWORD *)(v23 + 120) = v32;
      *(_OWORD *)(v23 + 104) = v31;
      v33 = v60[0];
      v34 = v60[2];
      *(_OWORD *)(v23 + 160) = v60[1];
      *(_OWORD *)(v23 + 176) = v34;
      *(_OWORD *)(v23 + 144) = v33;
      v35 = (WTF *)__n[0];
      *(_OWORD *)(v23 + 192) = 0u;
      *(_DWORD *)(v23 + 204) = (_DWORD)v35;
      if ((_DWORD)v35)
      {
        v36 = (void *)WTF::fastMalloc(v35);
        *(_DWORD *)(v24 + 200) = (_DWORD)v35;
        *(_QWORD *)(v24 + 192) = v36;
        memcpy(v36, __src, __n[0]);
      }
      v37 = *(_OWORD *)&__n[1];
      v38 = v63;
      *(_BYTE *)(v24 + 240) = v64;
      *(_OWORD *)(v24 + 208) = v37;
      *(_OWORD *)(v24 + 224) = v38;
      v39 = v65;
      if (v65)
        *v65 += 2;
      *(_QWORD *)(v24 + 248) = v39;
      v40 = v66;
      if (v66)
        *v66 += 2;
      *(_QWORD *)(v24 + 256) = v40;
      *(_OWORD *)(v24 + 264) = v67;
      v41 = (WTF *)v69[0];
      *(_QWORD *)(v24 + 280) = 0;
      *(_QWORD *)(v24 + 288) = 0;
      *(_DWORD *)(v24 + 292) = (_DWORD)v41;
      if ((_DWORD)v41)
      {
        v42 = (void *)WTF::fastMalloc(v41);
        *(_DWORD *)(v24 + 288) = (_DWORD)v41;
        *(_QWORD *)(v24 + 280) = v42;
        memcpy(v42, v68, v69[0]);
      }
      v43 = *(_OWORD *)&v69[1];
      v44 = *(_OWORD *)v70;
      *(_QWORD *)(v24 + 326) = *(_QWORD *)&v70[14];
      *(_OWORD *)(v24 + 296) = v43;
      *(_OWORD *)(v24 + 312) = v44;
      *(_QWORD *)(v24 + 336) = v71;
      v72[0] = v24;
      v45 = *(_QWORD *)(v3 + 56);
      if (v45)
      {
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v45 + 48))(v45, v72);
        v47 = v72[0];
        v72[0] = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        return _ZZZZN7WebCore37MediaStreamTrackPrivateSourceObserver16applyConstraintsERKNS_16MediaConstraintsEON3WTF17CompletionHandlerIFvONSt3__18optionalINS_19RealtimeMediaSource21ApplyConstraintsErrorEEEONS_27RealtimeMediaSourceSettingsEONS_31RealtimeMediaSourceCapabilitiesEEEEENUlvE_clEvENUlOT_E_clISA_EEDaSL_ENUlvE_D2Ev((uint64_t)&v49, v46);
      }
      else
      {
        v48 = std::__throw_bad_function_call[abi:sn180100]();
        return _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore37MediaStreamTrackPrivateSourceObserver16applyConstraintsERKNS2_16MediaConstraintsEONS_17CompletionHandlerIFvONSt3__18optionalINS2_19RealtimeMediaSource21ApplyConstraintsErrorEEEONS2_27RealtimeMediaSourceSettingsEONS2_31RealtimeMediaSourceCapabilitiesEEEEENUlvE_clEvENUlOT_E_clISC_EEDaSN_EUlvE_vJEED1Ev(v48);
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore37MediaStreamTrackPrivateSourceObserver16applyConstraintsERKNS2_16MediaConstraintsEONS_17CompletionHandlerIFvONSt3__18optionalINS2_19RealtimeMediaSource21ApplyConstraintsErrorEEEONS2_27RealtimeMediaSourceSettingsEONS2_31RealtimeMediaSourceCapabilitiesEEEEENUlvE_clEvENUlOT_E_clISC_EEDaSN_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E3418320;
  _ZZZZN7WebCore37MediaStreamTrackPrivateSourceObserver16applyConstraintsERKNS_16MediaConstraintsEON3WTF17CompletionHandlerIFvONSt3__18optionalINS_19RealtimeMediaSource21ApplyConstraintsErrorEEEONS_27RealtimeMediaSourceSettingsEONS_31RealtimeMediaSourceCapabilitiesEEEEENUlvE_clEvENUlOT_E_clISA_EEDaSL_ENUlvE_D2Ev((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore37MediaStreamTrackPrivateSourceObserver16applyConstraintsERKNS2_16MediaConstraintsEONS_17CompletionHandlerIFvONSt3__18optionalINS2_19RealtimeMediaSource21ApplyConstraintsErrorEEEONS2_27RealtimeMediaSourceSettingsEONS2_31RealtimeMediaSourceCapabilitiesEEEEENUlvE_clEvENUlOT_E_clISC_EEDaSN_EUlvE_vJEED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3418320;
  _ZZZZN7WebCore37MediaStreamTrackPrivateSourceObserver16applyConstraintsERKNS_16MediaConstraintsEON3WTF17CompletionHandlerIFvONSt3__18optionalINS_19RealtimeMediaSource21ApplyConstraintsErrorEEEONS_27RealtimeMediaSourceSettingsEONS_31RealtimeMediaSourceCapabilitiesEEEEENUlvE_clEvENUlOT_E_clISA_EEDaSL_ENUlvE_D2Ev((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore37MediaStreamTrackPrivateSourceObserver16applyConstraintsERKNS2_16MediaConstraintsEONS_17CompletionHandlerIFvONSt3__18optionalINS2_19RealtimeMediaSource21ApplyConstraintsErrorEEEONS2_27RealtimeMediaSourceSettingsEONS2_31RealtimeMediaSourceCapabilitiesEEEEENUlvE_clEvENUlOT_E_clISC_EEDaSN_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v2 + 56);
  v3 = (uint64_t *)(v2 + 56);
  v4 = v5;
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 336);
    v7 = *(_DWORD *)(v4 - 8);
    v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v4 + 16 * v11);
    if (v12 != v6)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v4 + 16 * v11);
        ++v13;
        if (v12 == v6)
          goto LABEL_8;
      }
      v11 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v11 != *(_DWORD *)(v4 - 4))
    {
      v14 = (_QWORD *)(v4 + 16 * v11);
      v15 = v14[1];
      v14[1] = 0;
      v16 = *v3;
      if (!*v3 || (v16 += 16 * *(unsigned int *)(v16 - 4), (_QWORD *)v16 != v14))
      {
        if ((_QWORD *)v16 != v14)
        {
          *v14 = -1;
          v14[1] = 0;
          ++*(_DWORD *)(*v3 - 16);
          v17 = *v3;
          v18 = *v3 ? *(_DWORD *)(v17 - 12) - 1 : -1;
          *(_DWORD *)(v17 - 12) = v18;
          v19 = *v3;
          if (*v3)
          {
            v20 = 6 * *(_DWORD *)(v19 - 12);
            v21 = *(_DWORD *)(v19 - 4);
            if (v20 < v21 && v21 >= 9)
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v3, v21 >> 1);
          }
        }
      }
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, a1 + 16, a1 + 40, a1 + 144);
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
    }
  }
}

uint64_t _ZZZZN7WebCore37MediaStreamTrackPrivateSourceObserver16applyConstraintsERKNS_16MediaConstraintsEON3WTF17CompletionHandlerIFvONSt3__18optionalINS_19RealtimeMediaSource21ApplyConstraintsErrorEEEONS_27RealtimeMediaSourceSettingsEONS_31RealtimeMediaSourceCapabilitiesEEEEENUlvE_clEvENUlOT_E_clISA_EEDaSL_ENUlvE_D2Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v15;
  _QWORD *v16;

  v3 = *(WTF **)(a1 + 272);
  if (v3)
  {
    *(_QWORD *)(a1 + 272) = 0;
    *(_DWORD *)(a1 + 280) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF::StringImpl **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF **)(a1 + 184);
  if (v6)
  {
    *(_QWORD *)(a1 + 184) = 0;
    *(_DWORD *)(a1 + 192) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v10 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  v11 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v15 = off_1E3418588;
      v15[1] = v11;
      v16 = v15;
      WTF::ensureOnMainThread();
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    }
  }
  return a1;
}

void webrtc::AudioTrackSinkInterface::~AudioTrackSinkInterface(webrtc::AudioTrackSinkInterface *this)
{
  JUMPOUT(0x19AEA7644);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingAudioSource,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E3418768;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingAudioSource,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaTrackConstraintSetMap::forEach(WTF::Function<void ()(WebCore::MediaConstraintType,WebCore::MediaConstraint const&)> &&)::$_0,BOOL,WebCore::MediaConstraintType,WebCore::MediaConstraint const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3418380;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaTrackConstraintSetMap::forEach(WTF::Function<void ()(WebCore::MediaConstraintType,WebCore::MediaConstraint const&)> &&)::$_0,BOOL,WebCore::MediaConstraintType,WebCore::MediaConstraint const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3418380;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaTrackConstraintSetMap::forEach(WTF::Function<void ()(WebCore::MediaConstraintType,WebCore::MediaConstraint const&)> &&)::$_0,BOOL,WebCore::MediaConstraintType,WebCore::MediaConstraint const&>::call(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaTrackConstraintSetMap::size(void)::$_0,void,WebCore::MediaConstraintType,WebCore::MediaConstraint const&>::call(uint64_t result)
{
  ++**(_QWORD **)(result + 8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaTrackConstraintSetMap::isValid(void)::$_0,void,WebCore::MediaConstraintType,WebCore::MediaConstraint const&>::call(uint64_t result, int a2, uint64_t a3)
{
  BOOL *v3;
  BOOL v5;

  if ((a2 - 1) <= 0x12)
  {
    v3 = *(BOOL **)(result + 8);
    v5 = byte_1969F9006[(char)(a2 - 1)] == *(unsigned __int8 *)(a3 + 8) && *v3;
    *v3 = v5;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaConstraints::setDefaultAudioConstraints(void)::$_0,BOOL,WebCore::MediaTrackConstraintSetMap const&>::call(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 504);
}

BOOL WTF::Detail::CallableWrapper<WebCore::MediaConstraints::setDefaultVideoConstraints(void)::$_0,BOOL,WebCore::MediaTrackConstraintSetMap const&>::call(uint64_t a1, unsigned __int8 *a2)
{
  return a2[392] | a2[48] || a2[104] != 0;
}

BOOL WTF::Detail::CallableWrapper<WebCore::MediaConstraints::setDefaultVideoConstraints(void)::$_1,BOOL,WebCore::MediaTrackConstraintSetMap const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 48) | *(unsigned __int8 *)(a2 + 104)) != 0;
}

BOOL WTF::Detail::CallableWrapper<WebCore::MediaConstraints::setDefaultVideoConstraints(void)::$_2,BOOL,WebCore::MediaTrackConstraintSetMap const&>::call(uint64_t a1, _BYTE *a2)
{
  BOOL v2;

  if (a2[48])
    v2 = 0;
  else
    v2 = a2[104] == 0;
  return !v2 || a2[304] != 0 || a2[936] != 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaConstraints::hasDisallowedRequiredConstraintForDeviceSelection(WebCore::MediaConstraints::DeviceType)::$_0,void,WebCore::MediaConstraintType,WebCore::MediaConstraint const&>::call(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;

  if ((a2 & 0xFE) != 0xC && a2 >= 0xC && **(_BYTE **)(a1 + 16) == 0)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  else
    result = 0;
  **(_BYTE **)(a1 + 8) |= result;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  WebCore::MediaStreamTrackPrivate **v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WebCore::MediaStreamTrackPrivate *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebCore::MediaStreamTrackPrivate *v34;
  WebCore::MediaStreamTrackPrivate *v35;
  WTF::StringImpl *v36;
  WebCore::MediaStreamTrackPrivate *v37;
  WTF *v38;
  void *v39;
  WTF *v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  WebCore::MediaStreamTrackPrivate *v47;
  WebCore::MediaStreamTrackPrivate *v48;
  WTF::StringImpl *v49;
  WTF *v50;
  void *v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t *v57;

  v4 = *((unsigned int *)a1 + 2);
  v5 = (WTF *)*a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *a1 = result;
  *((_DWORD *)a1 + 2) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *((_DWORD *)a1 + 4) = (v10 >> 31) ^ v10;
  *((_BYTE *)a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v11 = a1;
    v12 = 0;
    v57 = a1;
    v54 = v4;
    v55 = v5;
    do
    {
      v13 = (char *)v5 + 16 * v12;
      v14 = *(WTF::StringImpl **)v13;
      if (*(_QWORD *)v13)
      {
        v15 = *((_DWORD *)v11 + 2);
        v16 = *((_DWORD *)v11 + 4);
        v17 = *((_DWORD *)v14 + 4);
        if (v17 < 0x100)
        {
          v18 = WTF::StringImpl::hashSlowCase(v14);
          v11 = v57;
        }
        else
        {
          v18 = v17 >> 8;
        }
        v19 = v15 - 1;
        v20 = (v18 ^ v16) & (v15 - 1);
        v21 = *v11;
        v22 = *v11 + 16 * v20;
        v23 = *(WTF::StringImpl **)v22;
        if (*(_QWORD *)v22)
        {
          v24 = v12;
          v25 = 0;
          v56 = v24;
          v26 = (WebCore::MediaStreamTrackPrivate **)((char *)v5 + 16 * v24 + 8);
          do
          {
            v27 = *((_DWORD *)v23 + 4);
            if (v27 < 0x100)
            {
              v28 = WTF::StringImpl::hashSlowCase(v23);
              v11 = v57;
            }
            else
            {
              v28 = v27 >> 8;
            }
            v29 = (v20 + v15 - ((v28 ^ v16) & v19)) & v19;
            if (v25 > v29)
            {
              v30 = *(WTF::StringImpl **)v13;
              v31 = *v26;
              *(_QWORD *)v13 = 0;
              *((_QWORD *)v13 + 1) = 0;
              v32 = *(WTF::StringImpl **)v22;
              *(_QWORD *)v22 = 0;
              v33 = *(WTF::StringImpl **)v13;
              *(_QWORD *)v13 = v32;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                {
                  WTF::StringImpl::destroy(v33, v7);
                  v11 = v57;
                }
                else
                {
                  *(_DWORD *)v33 -= 2;
                }
              }
              v34 = *(WebCore::MediaStreamTrackPrivate **)(v22 + 8);
              *(_QWORD *)(v22 + 8) = 0;
              v35 = *v26;
              *v26 = v34;
              if (v35)
              {
                if (*((_DWORD *)v35 + 2) == 1)
                {
                  WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v35, v7);
                  WTF::fastFree(v38, v39);
                  v11 = v57;
                }
                else
                {
                  --*((_DWORD *)v35 + 2);
                }
              }
              v36 = *(WTF::StringImpl **)v22;
              *(_QWORD *)v22 = v30;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                {
                  WTF::StringImpl::destroy(v36, v7);
                  v11 = v57;
                }
                else
                {
                  *(_DWORD *)v36 -= 2;
                }
              }
              v37 = *(WebCore::MediaStreamTrackPrivate **)(v22 + 8);
              *(_QWORD *)(v22 + 8) = v31;
              if (v37)
              {
                if (*((_DWORD *)v37 + 2) == 1)
                {
                  WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v37, v7);
                  WTF::fastFree(v40, v41);
                  v11 = v57;
                }
                else
                {
                  --*((_DWORD *)v37 + 2);
                }
              }
              v25 = v29;
            }
            v20 = ((_DWORD)v20 + 1) & v19;
            ++v25;
            v21 = *v11;
            v22 = *v11 + 16 * v20;
            v23 = *(WTF::StringImpl **)v22;
          }
          while (*(_QWORD *)v22);
          v4 = v54;
          v5 = v55;
          v12 = v56;
        }
        v42 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        v43 = *(WTF::StringImpl **)v22;
        *(_QWORD *)v22 = v42;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
          {
            WTF::StringImpl::destroy(v43, v7);
            v11 = v57;
          }
          else
          {
            *(_DWORD *)v43 -= 2;
          }
        }
        v44 = v21 + 16 * v20;
        v45 = (char *)v5 + 16 * v12;
        v46 = *((_QWORD *)v45 + 1);
        *((_QWORD *)v45 + 1) = 0;
        v47 = *(WebCore::MediaStreamTrackPrivate **)(v44 + 8);
        *(_QWORD *)(v44 + 8) = v46;
        if (v47)
        {
          if (*((_DWORD *)v47 + 2) == 1)
          {
            WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v47, v7);
            WTF::fastFree(v52, v53);
            v11 = v57;
          }
          else
          {
            --*((_DWORD *)v47 + 2);
          }
        }
      }
      v48 = (WebCore::MediaStreamTrackPrivate *)*((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = 0;
      if (v48)
      {
        if (*((_DWORD *)v48 + 2) == 1)
        {
          WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v48, v7);
          WTF::fastFree(v50, v51);
          v11 = v57;
        }
        else
        {
          --*((_DWORD *)v48 + 2);
        }
      }
      v49 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
        {
          WTF::StringImpl::destroy(v49, v7);
          v11 = v57;
        }
        else
        {
          *(_DWORD *)v49 -= 2;
        }
      }
      ++v12;
    }
    while (v12 != v4);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

WebCore::MediaStreamTrackPrivate *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>>>>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::MediaStreamTrackPrivate *v9;
  WTF::StringImpl *v10;
  WebCore::MediaStreamTrackPrivate *result;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;

  v5 = *a1;
  v4 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v6 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v7 = *a1;
  *a1 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v9 = a1[1];
  a1[1] = v8;
  if (v9)
  {
    if (*((_DWORD *)v9 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v9, a2);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*((_DWORD *)v9 + 2);
    }
  }
  v10 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = (WebCore::MediaStreamTrackPrivate *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(result, a2);
      return (WebCore::MediaStreamTrackPrivate *)WTF::fastFree(v14, v15);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamPrivate::updateActiveState(void)::$_0,void,WebCore::MediaStreamPrivateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamPrivate::addTrack(WTF::Ref<WebCore::MediaStreamTrackPrivate,WTF::RawPtrTraits<WebCore::MediaStreamTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrackPrivate>> &&)::$_0,void,WebCore::MediaStreamPrivateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamPrivate::removeTrack(WebCore::MediaStreamTrackPrivate &)::$_0,void,WebCore::MediaStreamPrivateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamPrivate::characteristicsChanged(void)::$_0,void,WebCore::MediaStreamPrivateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*,char [2],BOOL>(WTF::Logger::LogSiteIdentifier *a1)
{
  uint64_t result;
  WTF::StringImpl *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char v10;
  int v11;
  char v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  unsigned int v45;
  WTF::Logger *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  __int128 buf;
  int v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v48, " ");
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (WTF::StringImpl *)buf;
  if (v50)
  {
    v4 = *((_DWORD *)v50 + 1);
    if (v49)
      goto LABEL_3;
  }
  else
  {
    v4 = 0;
    if (v49)
    {
LABEL_3:
      v5 = *((_DWORD *)v49 + 1);
      if (v48)
        goto LABEL_4;
LABEL_109:
      v6 = 0;
      if ((_QWORD)buf)
        goto LABEL_5;
LABEL_110:
      v7 = 0;
      goto LABEL_6;
    }
  }
  v5 = 0;
  if (!v48)
    goto LABEL_109;
LABEL_4:
  v6 = *((_DWORD *)v48 + 1);
  if (!(_QWORD)buf)
    goto LABEL_110;
LABEL_5:
  v7 = *(_DWORD *)(buf + 4);
LABEL_6:
  if ((v7 | v6) < 0
    || ((v8 = __OFADD__(v6, v7), v9 = v6 + v7, !v8) ? (v10 = 0) : (v10 = 1),
        v5 < 0
     || (v10 & 1) != 0
     || ((v8 = __OFADD__(v5, v9), v11 = v5 + v9, !v8) ? (v12 = 0) : (v12 = 1),
         v4 < 0 || (v12 & 1) != 0 || (result = (v4 + v11), __OFADD__(v4, v11)))))
  {
    v51 = 0;
    goto LABEL_115;
  }
  if (v50 && (*((_BYTE *)v50 + 16) & 4) == 0 || v49 && (*((_BYTE *)v49 + 16) & 4) == 0)
  {
    v13 = 0;
    goto LABEL_23;
  }
  if (v48)
  {
    v45 = *((_DWORD *)v48 + 4);
    v13 = (v45 >> 2) & 1;
    if (!(_QWORD)buf || (v45 & 4) == 0)
    {
LABEL_23:
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, (uint64_t)v50, v49, (uint64_t)v48, buf, &v51);
      if (v51)
      {
        if (v3)
        {
          if (*(_DWORD *)v3 == 2)
            WTF::StringImpl::destroy(v3, v14);
          else
            *(_DWORD *)v3 -= 2;
        }
        goto LABEL_27;
      }
LABEL_115:
      __break(0xC471u);
      return result;
    }
LABEL_100:
    v13 = (*(unsigned __int8 *)(buf + 16) >> 2) & 1;
    goto LABEL_23;
  }
  if ((_QWORD)buf)
    goto LABEL_100;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, 1, (uint64_t)v50, v49, 0, 0, &v51);
  if (!v51)
    goto LABEL_115;
LABEL_27:
  v15 = v48;
  v48 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v49;
  v49 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v50;
  v50 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = qword_1ECE7CD60;
  v19 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v19)
  {
    WTF::String::utf8();
    v21 = v46 ? (char *)v46 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v21;
    _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v19 = (uint64_t)v46;
    v46 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
        v19 = WTF::fastFree((WTF *)v19, v20);
      else
        --*(_DWORD *)v19;
    }
  }
  if (WebCore::LogWebRTC)
  {
    v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v23 = *v22;
      if ((v23 & 1) != 0)
        break;
      v24 = __ldaxr(v22);
      if (v24 == v23)
      {
        if (!__stxr(v23 | 1, v22))
        {
          v25 = WTF::Logger::observers((WTF::Logger *)v19);
          v26 = *(unsigned int *)(v25 + 12);
          if ((_DWORD)v26)
          {
            v27 = *(uint64_t **)v25;
            v28 = *(_QWORD *)v25 + 8 * v26;
            do
            {
              v29 = *v27;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v53 = 0;
              WTF::LogArgument<void const*>::toString();
              v55 = 0;
              WTF::String::String((WTF::String *)&v56, " ");
              v57 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v58 = v46;
              v46 = 0;
              v47 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v47) = 4;
              v46 = v30;
              v31 = HIDWORD(v47);
              *((_DWORD *)v30 + 4 * HIDWORD(v47)) = buf;
              v32 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v53;
              v33 = v54;
              if (v54)
                *(_DWORD *)v54 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              *((_DWORD *)v30 + 4 * (v31 + 2)) = v55;
              v34 = v56;
              if (v56)
                *(_DWORD *)v56 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
              *((_DWORD *)v30 + 4 * (v31 + 3)) = v57;
              v35 = v58;
              if (v58)
                *(_DWORD *)v58 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
              HIDWORD(v47) = v31 + 4;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, &WebCore::LogWebRTC, 0, &v46);
              v36 = v46;
              if (HIDWORD(v47))
              {
                v37 = 16 * HIDWORD(v47);
                v38 = (WTF::StringImpl **)((char *)v46 + 8);
                do
                {
                  v39 = *v38;
                  *v38 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v38 += 2;
                  v37 -= 16;
                }
                while (v37);
                v36 = v46;
              }
              if (v36)
              {
                v46 = 0;
                LODWORD(v47) = 0;
                WTF::fastFree(v36, v20);
              }
              v40 = v58;
              v58 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v20);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = v56;
              v56 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v20);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v54;
              v54 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v20);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v20);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v27;
            }
            while (v27 != (uint64_t *)v28);
          }
          v44 = __ldxr(v22);
          if (v44 == 1)
          {
            if (!__stlxr(0, v22))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v51;
  v51 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::PreventSourceFromEndingObserverWrapper,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t result, void *a2)
{
  WTF *v2;
  WTF *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  v2 = *(WTF **)(result + 8);
  if (v2)
  {
    v3 = (WTF *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (!v3)
      return WTF::fastFree(v2, a2);
    v4 = (_QWORD *)*((_QWORD *)v3 + 2);
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v4 + 16), v3);
    v6 = v4[16];
    if (v6 && *(_DWORD *)(v6 - 12))
    {
      v12 = *(unsigned int *)(v6 - 4);
      if ((_DWORD)v12)
      {
        v13 = 8 * v12;
        v14 = (uint64_t *)v4[16];
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          ++v14;
          v13 -= 8;
          if (!v13)
            goto LABEL_4;
        }
      }
      else
      {
        v14 = (uint64_t *)v4[16];
      }
      v15 = (uint64_t *)(v6 + 8 * v12);
      if (v14 != v15)
      {
        v16 = *v14;
LABEL_25:
        if (*(_QWORD *)(v16 + 8))
          goto LABEL_5;
        while (++v14 != v15)
        {
          v16 = *v14;
          if ((unint64_t)(*v14 + 1) > 1)
          {
            if (v14 != v15)
              goto LABEL_25;
            break;
          }
        }
      }
    }
LABEL_4:
    (*(void (**)(_QWORD *))(*v4 + 392))(v4);
LABEL_5:
    v7 = *((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7);
    v8 = *((_QWORD *)v3 + 1);
    if (v8)
    {
      *(_QWORD *)(v8 + 8) = 0;
      v9 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, v5);
        }
      }
    }
    else
    {
      *((_QWORD *)v3 + 1) = 0;
    }
    WTF::fastFree(v3, v5);
    return WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::MediaStreamTrackPrivateSourceObserver,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;

  v2 = *(_QWORD **)(result + 8);
  if (!v2)
    return result;
  v3 = v2[7];
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = (_QWORD *)v2[6];
  if (v7 == v2 + 3)
  {
    v8 = 4;
    v7 = v2 + 3;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v9 = (WTF *)v2[2];
  v2[2] = 0;
  if (v9)
    std::default_delete<WebCore::MediaStreamTrackPrivateSourceObserverSourceProxy>::operator()[abi:sn180100](v9, a2);
  v10 = v2[1];
  v2[1] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 144))(v10);
  return WTF::fastFree((WTF *)v2, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivate::setEnabled(BOOL)::$_0,void,WebCore::MediaStreamTrackPrivateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivate::endTrack(void)::$_0,void,WebCore::MediaStreamTrackPrivateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivate::applyConstraints(WebCore::MediaConstraints const&,WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)> &&)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3418600;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivate::applyConstraints(WebCore::MediaConstraints const&,WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)> &&)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3418600;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivate::applyConstraints(WebCore::MediaConstraints const&,WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)> &&)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&>::call(uint64_t a1, WTF::StringImpl *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  void *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  WTF *v34;
  void *v35;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      ++*(_DWORD *)(v7 + 8);
      v10 = *a3;
      v11 = a3[1];
      *(_BYTE *)(v7 + 136) = *((_BYTE *)a3 + 32);
      *(_OWORD *)(v7 + 120) = v11;
      *(_OWORD *)(v7 + 104) = v10;
      v12 = *((_QWORD *)a3 + 5);
      *((_QWORD *)a3 + 5) = 0;
      v13 = *(WTF::StringImpl **)(v7 + 144);
      *(_QWORD *)(v7 + 144) = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *((_QWORD *)a3 + 6);
      *((_QWORD *)a3 + 6) = 0;
      v15 = *(WTF::StringImpl **)(v7 + 152);
      *(_QWORD *)(v7 + 152) = v14;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = *((_QWORD *)a3 + 7);
      *((_QWORD *)a3 + 7) = 0;
      v17 = *(WTF::StringImpl **)(v7 + 160);
      *(_QWORD *)(v7 + 160) = v16;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = a3[4];
      v19 = a3[5];
      *(_QWORD *)(v7 + 198) = *(_QWORD *)((char *)a3 + 94);
      *(_OWORD *)(v7 + 184) = v19;
      *(_OWORD *)(v7 + 168) = v18;
      v20 = *a4;
      v21 = a4[2];
      *(_OWORD *)(v7 + 224) = a4[1];
      *(_OWORD *)(v7 + 240) = v21;
      *(_OWORD *)(v7 + 208) = v20;
      WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v7 + 256, (const void **)a4 + 6);
      v23 = a4[4];
      v24 = a4[5];
      *(_BYTE *)(v7 + 304) = *((_BYTE *)a4 + 96);
      *(_OWORD *)(v7 + 272) = v23;
      *(_OWORD *)(v7 + 288) = v24;
      v25 = (_DWORD *)*((_QWORD *)a4 + 13);
      if (v25)
        *v25 += 2;
      v26 = *(WTF::StringImpl **)(v7 + 312);
      *(_QWORD *)(v7 + 312) = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v22);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = (_DWORD *)*((_QWORD *)a4 + 14);
      if (v27)
        *v27 += 2;
      v28 = *(WTF::StringImpl **)(v7 + 320);
      *(_QWORD *)(v7 + 320) = v27;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v22);
        else
          *(_DWORD *)v28 -= 2;
      }
      *(_OWORD *)(v7 + 328) = *(__int128 *)((char *)a4 + 120);
      WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v7 + 344, (const void **)a4 + 17);
      v30 = *(_QWORD *)((char *)a4 + 182);
      v31 = *(__int128 *)((char *)a4 + 168);
      *(_OWORD *)(v7 + 360) = *(__int128 *)((char *)a4 + 152);
      *(_OWORD *)(v7 + 376) = v31;
      *(_QWORD *)(v7 + 390) = v30;
      if (*(_DWORD *)(v7 + 8) == 1)
      {
        WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate((WebCore::MediaStreamTrackPrivate *)v7, v29);
        WTF::fastFree(v34, v35);
      }
      else
      {
        --*(_DWORD *)(v7 + 8);
      }
    }
  }
  v32 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v32 + 16))(v32, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivate::sourceStarted(void)::$_0,void,WebCore::MediaStreamTrackPrivateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivate::sourceStopped(BOOL)::$_0,void,WebCore::MediaStreamTrackPrivateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivate::sourceMutedChanged(BOOL,BOOL)::$_0,void,WebCore::MediaStreamTrackPrivateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivate::sourceSettingsChanged(WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,void,WebCore::MediaStreamTrackPrivateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivate::sourceConfigurationChanged(WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)::$_0,void,WebCore::MediaStreamTrackPrivateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackPrivate::updateReadyState(void)::$_0,void,WebCore::MediaStreamTrackPrivateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeIncomingAudioSource::OnChanged(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3418718;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingAudioSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 320));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeIncomingAudioSource::OnChanged(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3418718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingAudioSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 320));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeIncomingAudioSource::OnChanged(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 432) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 432));
  if ((_DWORD)result == 1)
    return WebCore::RealtimeMediaSource::end(*(_QWORD *)(a1 + 8), 0);
  return result;
}

WTF::StringImpl *WebCore::RealtimeIncomingVideoSource::RealtimeIncomingVideoSource(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t *v19;
  WTF *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  WTF::StringImpl *v24[2];
  WTF::StringImpl *v25[2];
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[22];
  __int16 v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = (WTF::StringImpl *)v22;
  v7 = *a3;
  if (v7)
    *(_DWORD *)v7 += 2;
  *(_QWORD *)&v22 = v7;
  BYTE8(v22) = 3;
  if (v6)
    *(_DWORD *)v6 += 2;
  *(_QWORD *)&v23 = v6;
  v8 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v8 += 2;
  *((_QWORD *)&v23 + 1) = v8;
  LODWORD(v24[0]) = 0;
  v30 = 0;
  v31 = 0;
  WebCore::RealtimeMediaSource::RealtimeMediaSource(a1, (uint64_t)&v22, (uint64_t *)&v30, 0);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v9);
    else
      *(_DWORD *)v31 -= 2;
  }
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::destroy(v30, v9);
      if (!v8)
        goto LABEL_16;
      goto LABEL_14;
    }
    *(_DWORD *)v30 -= 2;
  }
  if (!v8)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v9);
  else
    *(_DWORD *)v8 -= 2;
LABEL_16:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v9);
      if (!v7)
        goto LABEL_22;
      goto LABEL_20;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v7)
    goto LABEL_22;
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v9);
  else
    *(_DWORD *)v7 -= 2;
LABEL_22:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v9);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)(a1 + 304) = off_1E34191C8;
  *(_QWORD *)(a1 + 312) = &unk_1E3418740;
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_19689B170;
  *(_QWORD *)(v10 + 24) = a1;
  *(_QWORD *)a1 = off_1E3418790;
  *(_QWORD *)(a1 + 304) = &unk_1E3418948;
  *(_QWORD *)(a1 + 312) = &unk_1E3418980;
  *(_QWORD *)(a1 + 320) = v10;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 440) = v11;
  *(_QWORD *)(a1 + 448) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  v26 = 4;
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v29 = 0;
  v27 = 0x3FF0000000000000;
  memset(v28, 0, sizeof(v28));
  std::optional<WebCore::RealtimeMediaSourceSettings>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,void>(a1 + 328, (uint64_t)&v22);
  v13 = v25[1];
  v25[1] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v25[0];
  v25[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v24[1];
  v24[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_BYTE *)(a1 + 432))
  {
    *(_DWORD *)(a1 + 411) = 16843009;
    *(_QWORD *)(a1 + 415) = 0;
    *(_QWORD *)(a1 + 422) = 0;
    (**(void (***)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 440) + 8))(*(_QWORD *)(a1 + 440) + 8, a1 + 312);
    v16 = WTF::fastMalloc((WTF *)0x3F8);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = off_1E3419200;
    v17[1] = a1;
    *(_QWORD *)v16 = v17;
    *(_OWORD *)(v16 + 8) = 0u;
    *(_QWORD *)(v16 + 24) = v16 + 40;
    *(_QWORD *)(v16 + 32) = 120;
    *(_OWORD *)(v16 + 1000) = 0u;
    v19 = *(uint64_t **)(a1 + 456);
    *(_QWORD *)(a1 + 456) = v16;
    if (v19)
    {
      v20 = (WTF *)v19[3];
      if (v19 + 5 != (uint64_t *)v20 && v20)
      {
        v19[3] = 0;
        *((_DWORD *)v19 + 8) = 0;
        WTF::fastFree(v20, v18);
      }
      v21 = *v19;
      *v19 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      WTF::fastFree((WTF *)v19, v18);
    }
    return (WTF::StringImpl *)a1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::RealtimeMediaSource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD **v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;

  *(_QWORD *)a1 = off_1E3418A08;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 72) = a4;
  v6 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 80) = v6;
  v7 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(a1 + 112) = (v8 - 3) < 3;
  {
    WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
    WebCore::CaptureDevice::label(void)const::airPods = &WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl;
  }
  if ((v8 - 1) > 1 || !*(_QWORD *)(a2 + 16) || WTF::StringImpl::find() == -1)
    v9 = (_DWORD **)(a2 + 16);
  else
    v9 = (_DWORD **)&WebCore::CaptureDevice::label(void)const::airPods;
  v10 = *v9;
  if (v10)
    *v10 += 2;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = v10;
  *(_BYTE *)(a1 + 144) = 0;
  v11 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v11 += 2;
  *(_QWORD *)(a1 + 176) = v11;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 8);
  v12 = *(_DWORD **)(a2 + 16);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(a1 + 192) = v12;
  v13 = *(_DWORD **)(a2 + 24);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(a1 + 200) = v13;
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = xmmword_1969F9020;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 272) = 1;
  *(_QWORD *)(a1 + 280) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  WebCore::RealtimeMediaSource::initializePersistentId((WebCore::RealtimeMediaSource *)a1);
  return a1;
}

void WebCore::RealtimeIncomingVideoSource::~RealtimeIncomingVideoSource(WebCore::RealtimeIncomingVideoSource *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void (**v5)(WebCore::RealtimeIncomingVideoSource *__hidden);
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  WTF *v12;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _QWORD v19[4];

  *(_QWORD *)this = off_1E3418790;
  v2 = (char *)this + 312;
  *((_QWORD *)this + 38) = &unk_1E3418948;
  *((_QWORD *)this + 39) = &unk_1E3418980;
  if (*((_BYTE *)this + 292))
  {
    v3 = *((_QWORD *)this + 5);
    if (v3
      && (v4 = *((_QWORD *)this + 6),
          v19[0] = "RealtimeIncomingVideoSource",
          v19[1] = 28,
          v19[2] = "stop",
          v19[3] = v4,
          *(_BYTE *)(v3 + 12)))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v19);
      v5 = *(void (***)(WebCore::RealtimeIncomingVideoSource *__hidden))this;
    }
    else
    {
      v5 = off_1E3418790;
    }
    *((_BYTE *)this + 292) = 0;
    v5[46](this);
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*((_QWORD *)this + 55) + 8) + 8))(*((_QWORD *)this + 55) + 8, v2);
  v7 = (unsigned int *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  v11 = (uint64_t *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v11)
  {
    v12 = (WTF *)v11[3];
    if (v11 + 5 != (uint64_t *)v12 && v12 != 0)
    {
      v11[3] = 0;
      *((_DWORD *)v11 + 8) = 0;
      WTF::fastFree(v12, v6);
    }
    v14 = *v11;
    *v11 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    WTF::fastFree((WTF *)v11, v6);
  }
  v15 = *((_QWORD *)this + 55);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (*((_BYTE *)this + 432))
  {
    v16 = (WTF::StringImpl *)*((_QWORD *)this + 48);
    *((_QWORD *)this + 48) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = (WTF::StringImpl *)*((_QWORD *)this + 47);
    *((_QWORD *)this + 47) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = (WTF::StringImpl *)*((_QWORD *)this + 46);
    *((_QWORD *)this + 46) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  WebCore::RealtimeMediaSource::~RealtimeMediaSource(this, (WTF::StringImpl *)v6);
}

uint64_t WebCore::RealtimeMediaSource::stop(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_BYTE *)(this + 292))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 40);
    if (v2)
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
      v4 = *(_QWORD *)(v1 + 48);
      v6[0] = v3;
      v6[1] = v5;
      v6[2] = "stop";
      v6[3] = v4;
      if (*(_BYTE *)(v2 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v6);
    }
    *(_BYTE *)(v1 + 292) = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 368))(v1);
  }
  return this;
}

void WebCore::RealtimeMediaSource::~RealtimeMediaSource(WebCore::RealtimeMediaSource *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WebCore::RealtimeMediaSource *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  *(_QWORD *)this = off_1E3418A08;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 21);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      v8 = (WTF **)(v6 + 8);
      do
      {
        if (*(v8 - 1) != (WTF *)-1)
        {
          v9 = *v8;
          *v8 = 0;
          if (v9)
          {
            v10 = *((_QWORD *)v9 + 4);
            *((_QWORD *)v9 + 4) = 0;
            if (v10)
            {
              v11 = *(const void **)(v10 + 40);
              *(_QWORD *)(v10 + 40) = 0;
              if (v11)
                CFRelease(v11);
              v12 = *(const void **)(v10 + 8);
              *(_QWORD *)(v10 + 8) = 0;
              if (v12)
                CFRelease(v12);
              v13 = *(const void **)v10;
              *(_QWORD *)v10 = 0;
              if (v13)
                CFRelease(v13);
              MEMORY[0x19AEA7644](v10, 0x10C0C404B4E061BLL);
            }
            WTF::fastFree(v9, a2);
          }
        }
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v14 = *((_QWORD *)this + 19);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v15)
    {
      v16 = (_QWORD *)*((_QWORD *)this + 19);
      do
      {
        if ((unint64_t)(*v16 + 1) >= 2)
          (*(void (**)(_QWORD))(*(_QWORD *)*v16 + 40))(*v16);
        ++v16;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
  v17 = *((_QWORD *)this + 16);
  if (v17)
  {
    v29 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v29)
    {
      for (i = 0; i != v29; ++i)
      {
        v31 = *(unsigned int **)(v17 + 8 * i);
        if (v31 != (unsigned int *)-1)
        {
          *(_QWORD *)(v17 + 8 * i) = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v17 - 16), a2);
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v23 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
    }
  }
  v27 = (WebCore::RealtimeMediaSource *)*((_QWORD *)this + 4);
  if (v27 == (WebCore::RealtimeMediaSource *)((char *)this + 8))
  {
    v28 = 4;
    v27 = (WebCore::RealtimeMediaSource *)((char *)this + 8);
  }
  else
  {
    if (!v27)
      return;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
}

void WebCore::RealtimeIncomingVideoSource::startProducingData(WebCore::RealtimeIncomingVideoSource *this)
{
  uint64_t v1;
  char *v2;
  _BYTE v3[64];

  v1 = *((_QWORD *)this + 55);
  v2 = (char *)this + 304;
  rtc::VideoSinkWants::VideoSinkWants((rtc::VideoSinkWants *)v3);
  (*(void (**)(uint64_t, char *, _BYTE *))(*(_QWORD *)v1 + 72))(v1, v2, v3);
  rtc::VideoSinkWants::~VideoSinkWants((rtc::VideoSinkWants *)v3);
}

uint64_t WebCore::RealtimeIncomingVideoSource::stopProducingData(WebCore::RealtimeIncomingVideoSource *this)
{
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 55) + 80))(*((_QWORD *)this + 55), (char *)this + 304);
}

uint64_t WebCore::RealtimeIncomingVideoSource::OnChanged(WebCore::RealtimeIncomingVideoSource *this)
{
  uint64_t v2;
  int v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v2 = *((_QWORD *)this + 40);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_5:
  ++*(_QWORD *)(v2 + 8);
  v4 = __ldxr((unsigned __int8 *)v2);
  if (v4 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34192E0;
  v5[1] = this;
  v7 = (uint64_t)v5;
  WTF::callOnMainThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::RealtimeIncomingVideoSource::OnChanged(WebCore::RealtimeIncomingVideoSource *this)
{
  uint64_t v2;
  char *v4;
  int v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v2 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = (char *)this - 312;
  ++*(_QWORD *)(v2 + 8);
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34192E0;
  v6[1] = v4;
  v8 = (uint64_t)v6;
  WTF::callOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

__int128 *WebCore::RealtimeIncomingVideoSource::capabilities(WebCore::RealtimeIncomingVideoSource *this)
{
  {
    xmmword_1EE2E0E70 = 0u;
    unk_1EE2E0E80 = 0u;
    xmmword_1EE2E0E50 = 0u;
    unk_1EE2E0E60 = 0u;
    xmmword_1EE2E0E30 = 0u;
    unk_1EE2E0E40 = 0u;
    xmmword_1EE2E0E10 = 0u;
    unk_1EE2E0E20 = 0u;
    xmmword_1EE2E0DF0 = 0u;
    unk_1EE2E0E00 = 0u;
    WebCore::RealtimeMediaSourceCapabilities::emptyCapabilities(void)::emptyCapabilities = 0u;
    unk_1EE2E0DE0 = 0u;
  }
  return &WebCore::RealtimeMediaSourceCapabilities::emptyCapabilities(void)::emptyCapabilities;
}

char *WebCore::RealtimeIncomingVideoSource::settings(WebCore::RealtimeIncomingVideoSource *this)
{
  char *v1;
  float v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v9;
  uint64_t v10;
  float v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  _BYTE v22[22];

  v1 = (char *)this + 328;
  if (*((_BYTE *)this + 432))
    return v1;
  v12 = 0;
  v11 = 0.0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v19 = 4;
  v20 = 0;
  v21 = 0x3FF0000000000000;
  *(_QWORD *)v22 = 0x1010101000000;
  *(_QWORD *)&v22[14] = 0;
  *(_QWORD *)&v22[7] = 0;
  v10 = (*(uint64_t (**)(WebCore::RealtimeIncomingVideoSource *))(*(_QWORD *)this + 96))(this);
  v3 = *((double *)this + 29);
  v11 = v3;
  std::optional<WebCore::RealtimeMediaSourceSettings>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,void>((uint64_t)v1, (uint64_t)&v10);
  if (*((_BYTE *)this + 432))
  {
    v5 = v18;
    v18 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v17;
    v17 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v16;
    v16 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    return v1;
  }
  v9 = std::__throw_bad_optional_access[abi:sn180100]();
  return (char *)WebCore::RealtimeIncomingVideoSource::settingsDidChange(v9);
}

uint64_t WebCore::RealtimeIncomingVideoSource::settingsDidChange(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if ((a2 & 7) != 0)
  {
    v2 = result;
    if (*(_BYTE *)(result + 432))
    {
      v3 = *(WTF::StringImpl **)(result + 384);
      *(_QWORD *)(v2 + 384) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      v4 = *(WTF::StringImpl **)(v2 + 376);
      *(_QWORD *)(v2 + 376) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *(_QWORD *)(v2 + 368);
      *(_QWORD *)(v2 + 368) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      *(_BYTE *)(v2 + 432) = 0;
    }
  }
  return result;
}

double WebCore::RealtimeIncomingVideoSource::metadataFromVideoFrame@<D0>(WebCore::RealtimeIncomingVideoSource *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WebCore::RealtimeIncomingVideoSource *v21;
  uint64_t v22;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  v3 = *((_QWORD *)this + 3);
  v4 = &byte_19689B000;
  if (v3 >= 1)
  {
    *(_BYTE *)(a2 + 24) = 1;
    *(double *)(a2 + 16) = (double)v3 / 1000.0;
  }
  *(_DWORD *)(a2 + 48) = *((_DWORD *)this + 4);
  *(_BYTE *)(a2 + 52) = 1;
  v5 = *((_QWORD *)this + 23);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
LABEL_5:
    v7 = (_QWORD *)(v5 + 8);
    goto LABEL_8;
  }
  if ((byte_1ECE84020 & 1) != 0)
  {
    v7 = (_QWORD *)_MergedGlobals_237;
    v6 = *(_QWORD *)_MergedGlobals_237;
  }
  else
  {
    v22 = a2;
    v21 = this;
    v7 = (_QWORD *)operator new();
    v6 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    _MergedGlobals_237 = (uint64_t)v7;
    byte_1ECE84020 = 1;
    this = v21;
    v5 = *((_QWORD *)v21 + 23);
    if (v5)
    {
      a2 = v22;
      v4 = &byte_19689B000;
      goto LABEL_5;
    }
    a2 = v22;
    v4 = &byte_19689B000;
  }
LABEL_8:
  v8 = v7[1];
  v9 = v6 + 104;
  if (v6 != v8 && v9 != v8)
  {
    do
    {
      if (*(_QWORD *)(v6 + 40) < *(_QWORD *)(v9 + 40))
        v6 = v9;
      v9 += 104;
    }
    while (v9 != v8);
  }
  result = *((double *)v4 + 48);
  v12 = (double)*(uint64_t *)(v6 + 40) / result / result;
  *(_BYTE *)(a2 + 40) = 1;
  *(double *)(a2 + 32) = v12;
  if (*((_BYTE *)this + 208))
  {
    v13 = *((_QWORD *)this + 25);
    v14 = 0x7FFFFFFFFFFFFFFFLL;
    if (v13 != 0x7FFFFFFFFFFFFFFFLL
      && (v15 = *((_QWORD *)this + 24), v16 = 0x8000000000000000, v15 != 0x8000000000000000)
      && (v13 == 0x8000000000000000 || v15 == 0x7FFFFFFFFFFFFFFFLL
                                      || (v16 = v13 - v15, v14 = v13 - v15, v13 - v15 < 0)))
    {
      v18 = -(uint64_t)v16;
      v19 = ((v18 >> 3) * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64;
      if (v18 % 0x3E8 <= 0x1F4)
        v20 = 0;
      else
        v20 = -1;
      v17 = v20 - (v19 >> 4);
    }
    else
    {
      v17 = v14 / 0x3E8;
      if (v14 % 0x3E8 > 0x1F3)
        ++v17;
    }
    result = (double)v17 / result;
    *(double *)a2 = result;
    *(_BYTE *)(a2 + 8) = 1;
  }
  return result;
}

WebCore::FrameRateMonitor *WebCore::RealtimeIncomingVideoSource::notifyNewFrame(WebCore::RealtimeIncomingVideoSource *this)
{
  WebCore::FrameRateMonitor *result;
  double v3;
  BOOL v4;
  __n128 v5;
  uint64_t v7;
  int v9;
  double *v10;
  WebCore::FrameRateMonitor *v11;

  result = (WebCore::FrameRateMonitor *)*((_QWORD *)this + 57);
  if (result)
  {
    result = (WebCore::FrameRateMonitor *)WebCore::FrameRateMonitor::update(result);
    v3 = *(double *)(*((_QWORD *)this + 57) + 1000);
    v5.n128_u64[0] = *((_QWORD *)this + 56);
    v4 = v5.n128_f64[0] <= 0.0;
    v5.n128_f64[0] = vabdd_f64(v5.n128_f64[0], v3);
    if (v4 || v5.n128_f64[0] >= 1.0)
    {
      *((double *)this + 56) = v3;
      v7 = *((_QWORD *)this + 40);
      if (__ldaxr((unsigned __int8 *)v7))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v7))
      {
        goto LABEL_10;
      }
      MEMORY[0x19AEA534C](v7, v5);
LABEL_10:
      ++*(_QWORD *)(v7 + 8);
      v9 = __ldxr((unsigned __int8 *)v7);
      if (v9 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
        {
LABEL_15:
          v10 = (double *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v10 = &off_1E3419308;
          *((_QWORD *)v10 + 1) = this;
          v10[2] = v3;
          v11 = (WebCore::FrameRateMonitor *)v10;
          WTF::callOnMainThread();
          result = v11;
          if (v11)
            return (WebCore::FrameRateMonitor *)(*(uint64_t (**)(WebCore::FrameRateMonitor *))(*(_QWORD *)v11 + 8))(v11);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      goto LABEL_15;
    }
  }
  return result;
}

_QWORD *WebCore::RealtimeMediaSourceObserver::RealtimeMediaSourceObserver(_QWORD *this)
{
  *this = &off_1E34189A8;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E34189A8;
  this[1] = 0;
  return this;
}

void WebCore::RealtimeMediaSourceObserver::~RealtimeMediaSourceObserver(WebCore::RealtimeMediaSourceObserver *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

WTF::StringImpl *WebCore::RealtimeMediaSource::initializePersistentId(WebCore::RealtimeMediaSource *this)
{
  uint64_t v2;
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v3 = (WebCore::RealtimeMediaSource *)((char *)this + 176);
  v2 = *((_QWORD *)this + 22);
  if (!v2 || !*(_DWORD *)(v2 + 4))
  {
    WTF::createVersion4UUIDString(this);
    v5 = v17;
    if (v17)
      *(_DWORD *)v17 += 2;
    v6 = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v4);
        v5 = v17;
      }
      else
      {
        *(_DWORD *)v6 -= 2;
      }
    }
    v17 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  WebCore::RealtimeMediaSourceCenter::hashStringWithSalt(v3, (WebCore::RealtimeMediaSource *)((char *)this + 80), (WTF::String *)&v17);
  v8 = v17;
  v17 = 0;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v8;
  if (v9)
  {
    v10 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 != 2)
    {
LABEL_12:
      *(_DWORD *)v9 = v10;
      goto LABEL_13;
    }
    WTF::StringImpl::destroy(v9, v7);
    v9 = v17;
    v17 = 0;
    if (v9)
    {
      v10 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 != 2)
        goto LABEL_12;
      WTF::StringImpl::destroy(v9, v15);
    }
  }
LABEL_13:
  WebCore::RealtimeMediaSourceCenter::hashStringWithSalt(v3, (WebCore::RealtimeMediaSource *)((char *)this + 88), (WTF::String *)&v17);
  v12 = v17;
  v17 = 0;
  result = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v12;
  if (!result)
    return result;
  v14 = *(_DWORD *)result - 2;
  if (*(_DWORD *)result != 2)
    goto LABEL_15;
  WTF::StringImpl::destroy(result, v11);
  result = v17;
  v17 = 0;
  if (result)
  {
    v14 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
LABEL_15:
    *(_DWORD *)result = v14;
  }
  return result;
}

WTF::StringImpl *WebCore::RealtimeMediaSource::setPersistentId(WebCore::RealtimeMediaSource *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WebCore::RealtimeMediaSource::initializePersistentId(this);
}

WTF *WebCore::RealtimeMediaSourceCenter::hashStringWithSalt@<X0>(WTF *this@<X0>, const WTF::String *a2@<X1>, WTF::String *a3@<X8>)
{
  _DWORD *v5;
  uint64_t v7;
  const char *v8;
  void *v9;
  WTF *v10;
  _BYTE v11[96];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4) && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v7 = (uint64_t)this;
    WTF::SHA1::SHA1((WTF::SHA1 *)v11);
    if (*(_QWORD *)v7 && *(_DWORD *)(*(_QWORD *)v7 + 4))
      WTF::SHA1::addUTF8Bytes();
    if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
      WTF::SHA1::addUTF8Bytes();
    WTF::SHA1::computeHash();
    WTF::SHA1::hexDigest();
    if (v10)
      v8 = (char *)v10 + 16;
    else
      v8 = 0;
    WTF::String::String(a3, v8);
    this = v10;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        return (WTF *)WTF::fastFree(v10, v9);
      else
        --*(_DWORD *)v10;
    }
  }
  else
  {
    v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v5 += 2;
    *(_QWORD *)a3 = v5;
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::addAudioSampleObserver(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (unsigned __int8 *)(a1 + 144);
  if (__ldaxr((unsigned __int8 *)(a1 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 144);
LABEL_5:
  v9 = a2;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::HashTable<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>>::add((uint64_t *)(a1 + 152), &v9, (uint64_t)&v8);
  result = v9;
  if (v9)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::RealtimeMediaSource::removeAudioSampleObserver(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  int v7;

  v4 = (unsigned __int8 *)(a1 + 144);
  if (__ldaxr((unsigned __int8 *)(a1 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 144);
LABEL_5:
  result = WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(a1 + 152), a2);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t *WebCore::RealtimeMediaSource::addVideoFrameObserver(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t *result;
  int v7;
  _BYTE v8[24];
  uint64_t v9;
  uint64_t v10;

  v4 = (unsigned __int8 *)(a1 + 160);
  if (__ldaxr((unsigned __int8 *)(a1 + 160)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 160);
LABEL_5:
  v9 = 0;
  v10 = a2;
  result = WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(a1 + 168), &v10, (uint64_t)v8);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t *WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  WTF *v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WebCore::RealtimeMediaSource::VideoFrameObserver *,WTF::KeyValuePair<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v6 - 4);
        v31 = 0;
        v32 = v6 + 16 * v25;
        goto LABEL_43;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  v18 = (WTF *)v14[1];
  *v14 = v9;
  v14[1] = 0;
  if (v18)
  {
    v19 = *((_QWORD *)v18 + 4);
    *((_QWORD *)v18 + 4) = 0;
    if (v19)
    {
      v20 = *(const void **)(v19 + 40);
      *(_QWORD *)(v19 + 40) = 0;
      if (v20)
        CFRelease(v20);
      v21 = *(const void **)(v19 + 8);
      *(_QWORD *)(v19 + 8) = 0;
      if (v21)
        CFRelease(v21);
      v22 = *(const void **)v19;
      *(_QWORD *)v19 = 0;
      if (v22)
        CFRelease(v22);
      MEMORY[0x19AEA7644](v19, 0x10C0C404B4E061BLL);
    }
    result = (uint64_t *)WTF::fastFree(v18, a2);
  }
  v23 = *v4;
  if (*v4)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v26 = *v4;
  if (*v4)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
      goto LABEL_38;
  }
  else if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v30 = 8;
      goto LABEL_39;
    }
LABEL_38:
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_39:
    result = WTF::HashTable<WebCore::RealtimeMediaSource::VideoFrameObserver *,WTF::KeyValuePair<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>>::rehash(v4, v30, v14);
    v14 = result;
    v26 = *v4;
    if (*v4)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
  }
  v32 = v26 + 16 * v29;
  v31 = 1;
LABEL_43:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v32;
  *(_BYTE *)(a3 + 16) = v31;
  return result;
}

uint64_t WebCore::RealtimeMediaSource::addVideoFrameObserver(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  unsigned __int8 *v8;
  uint64_t result;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  WTF *v24;
  uint64_t v25;
  const void *v26;
  const void *v27;
  const void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  const void *v32;
  const void *v33;
  const void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  int v40;

  v8 = (unsigned __int8 *)(a1 + 160);
  if (__ldaxr((unsigned __int8 *)(a1 + 160)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 160);
    goto LABEL_5;
  }
  if (__stxr(1u, v8))
    goto LABEL_4;
LABEL_5:
  result = WTF::fastMalloc((WTF *)0x28);
  v12 = (WTF *)result;
  *(_QWORD *)result = a3;
  *(double *)(result + 8) = a4;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 1;
  v14 = (uint64_t *)(a1 + 168);
  v13 = *(_QWORD *)(a1 + 168);
  if (v13
    || (result = (uint64_t)WTF::HashTable<WebCore::RealtimeMediaSource::VideoFrameObserver *,WTF::KeyValuePair<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>>::rehash((uint64_t *)(a1 + 168), 8u, 0), (v13 = *v14) != 0))
  {
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v13 + 16 * v19);
  v21 = *v20;
  if (!*v20)
  {
LABEL_16:
    v24 = (WTF *)v20[1];
    *v20 = a2;
    v20[1] = (uint64_t)v12;
    if (v24)
    {
      v25 = *((_QWORD *)v24 + 4);
      *((_QWORD *)v24 + 4) = 0;
      if (v25)
      {
        v26 = *(const void **)(v25 + 40);
        *(_QWORD *)(v25 + 40) = 0;
        if (v26)
          CFRelease(v26);
        v27 = *(const void **)(v25 + 8);
        *(_QWORD *)(v25 + 8) = 0;
        if (v27)
          CFRelease(v27);
        v28 = *(const void **)v25;
        *(_QWORD *)v25 = 0;
        if (v28)
          CFRelease(v28);
        MEMORY[0x19AEA7644](v25, 0x10C0C404B4E061BLL);
      }
      result = WTF::fastFree(v24, v11);
    }
    v29 = *v14;
    if (*v14)
      v30 = *(_DWORD *)(v29 - 12) + 1;
    else
      v30 = 1;
    *(_DWORD *)(v29 - 12) = v30;
    v35 = *v14;
    if (*v14)
      v36 = *(_DWORD *)(v35 - 12);
    else
      v36 = 0;
    v37 = (*(_DWORD *)(v35 - 16) + v36);
    v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 > 2 * v37)
        goto LABEL_49;
    }
    else
    {
      if (3 * v38 > 4 * v37)
        goto LABEL_49;
      if (!(_DWORD)v38)
      {
        v39 = 8;
LABEL_48:
        result = (uint64_t)WTF::HashTable<WebCore::RealtimeMediaSource::VideoFrameObserver *,WTF::KeyValuePair<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>>::rehash((uint64_t *)(a1 + 168), v39, v20);
        goto LABEL_49;
      }
    }
    v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
    goto LABEL_48;
  }
  v22 = 0;
  v23 = 1;
  while (v21 != a2)
  {
    if (v21 == -1)
      v22 = v20;
    v19 = (v19 + v23) & v15;
    v20 = (uint64_t *)(v13 + 16 * v19);
    v21 = *v20;
    ++v23;
    if (!*v20)
    {
      if (v22)
      {
        *v22 = 0;
        v22[1] = 0;
        --*(_DWORD *)(*v14 - 16);
        v20 = v22;
      }
      goto LABEL_16;
    }
  }
  v31 = *((_QWORD *)v12 + 4);
  *((_QWORD *)v12 + 4) = 0;
  if (v31)
  {
    v32 = *(const void **)(v31 + 40);
    *(_QWORD *)(v31 + 40) = 0;
    if (v32)
      CFRelease(v32);
    v33 = *(const void **)(v31 + 8);
    *(_QWORD *)(v31 + 8) = 0;
    if (v33)
      CFRelease(v33);
    v34 = *(const void **)v31;
    *(_QWORD *)v31 = 0;
    if (v34)
      CFRelease(v34);
    MEMORY[0x19AEA7644](v31, 0x10C0C404B4E061BLL);
  }
  result = WTF::fastFree(v12, v11);
LABEL_49:
  ++*(_DWORD *)(a1 + 296);
  v40 = __ldxr(v8);
  if (v40 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  if (__stlxr(0, v8))
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  return result;
}

uint64_t WebCore::RealtimeMediaSource::removeVideoFrameObserver(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  void *v7;
  WTF *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const void *v12;
  int v13;
  uint64_t v14;
  WTF *v15;

  v4 = (unsigned __int8 *)(a1 + 160);
  if (__ldaxr((unsigned __int8 *)(a1 + 160)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 160);
LABEL_5:
  v14 = a2;
  result = (uint64_t)WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::take((uint64_t *)(a1 + 168), &v14, &v15);
  v8 = v15;
  if (v15)
  {
    --*(_DWORD *)(a1 + 296);
    v15 = 0;
    v9 = *((_QWORD *)v8 + 4);
    *((_QWORD *)v8 + 4) = 0;
    if (v9)
    {
      v10 = *(const void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = 0;
      if (v10)
        CFRelease(v10);
      v11 = *(const void **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v11)
        CFRelease(v11);
      v12 = *(const void **)v9;
      *(_QWORD *)v9 = 0;
      if (v12)
        CFRelease(v12);
      MEMORY[0x19AEA7644](v9, 0x10C0C404B4E061BLL);
    }
    result = WTF::fastFree(v8, v7);
  }
  v13 = __ldxr(v4);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t *WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *result;
  if (!*result)
    goto LABEL_9;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = ~(*a2 << 32) + *a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v10;
      if (v9 == *a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v8 != *(_DWORD *)(v3 - 4))
  {
    v11 = (_QWORD *)(v3 + 16 * v8);
    v12 = v11[1];
    v11[1] = 0;
    *a3 = v12;
    v13 = (_QWORD *)*result;
    if (!*result || (v13 += 2 * *((unsigned int *)v13 - 1), v13 != v11))
    {
      if (v13 != v11)
      {
        *v11 = -1;
        v11[1] = 0;
        ++*(_DWORD *)(*result - 16);
        v14 = *result;
        if (*result)
          v15 = *(_DWORD *)(v14 - 12) - 1;
        else
          v15 = -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *result;
        if (*result)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            return WTF::HashTable<WebCore::RealtimeMediaSource::VideoFrameObserver *,WTF::KeyValuePair<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>>::rehash(result, v18 >> 1, 0);
        }
      }
    }
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  return result;
}

unsigned int *WebCore::RealtimeMediaSource::addObserver(WebCore::RealtimeMediaSource *this, WebCore::RealtimeMediaSourceObserver *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)this + 128, a2, (uint64_t)v3);
}

uint64_t WebCore::RealtimeMediaSource::removeObserver(WebCore::RealtimeMediaSource *this, WebCore::RealtimeMediaSourceObserver *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;

  result = WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)this + 128, a2);
  v4 = *((_QWORD *)this + 16);
  if (!v4 || !*(_DWORD *)(v4 - 12))
    return (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 392))(this);
  v5 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    for (i = (uint64_t *)*((_QWORD *)this + 16); (unint64_t)(*i + 1) <= 1; ++i)
    {
      v6 -= 8;
      if (!v6)
        return (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 392))(this);
    }
  }
  else
  {
    i = (uint64_t *)*((_QWORD *)this + 16);
  }
  v8 = (uint64_t *)(v4 + 8 * v5);
  if (i == v8)
    return (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 392))(this);
  v9 = *i;
LABEL_12:
  if (!*(_QWORD *)(v9 + 8))
  {
    while (1)
    {
      if (++i == v8)
        return (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 392))(this);
      v9 = *i;
      if ((unint64_t)(*i + 1) > 1)
      {
        if (i != v8)
          goto LABEL_12;
        return (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 392))(this);
      }
    }
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::setMuted(uint64_t this, int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;

  v3 = this;
  v4 = a2;
  v20 = a2;
  v5 = *(unsigned __int8 *)(this + 289);
  v6 = *(_QWORD *)(this + 40);
  if (v5 != a2 && v6 != 0)
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
    v8 = *(_QWORD *)(v3 + 48);
    v21 = this;
    v22 = v9;
    v23 = "setMuted";
    v24 = v8;
    if (*(_BYTE *)(v6 + 12))
    {
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v21);
      v4 = v20;
    }
  }
  if (v5 != a2 && v4 == 0)
  {
    if (!*(_BYTE *)(v3 + 292))
    {
      *(_BYTE *)(v3 + 289) = 0;
      goto LABEL_24;
    }
    v11 = *(_QWORD *)(v3 + 40);
    if (v11)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      v13 = *(_QWORD *)(v3 + 48);
      v21 = v12;
      v22 = v14;
      v23 = "stop";
      v24 = v13;
      if (*(_BYTE *)(v11 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v21);
    }
    *(_BYTE *)(v3 + 292) = 0;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 368))(v3);
    v4 = v20;
  }
  *(_BYTE *)(v3 + 289) = v4;
  if (!v4)
  {
LABEL_24:
    this = (uint64_t)WebCore::RealtimeMediaSource::start((_BYTE *)v3);
    goto LABEL_25;
  }
  if (*(_BYTE *)(v3 + 292))
  {
    v15 = *(_QWORD *)(v3 + 40);
    if (v15)
    {
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      v17 = *(_QWORD *)(v3 + 48);
      v21 = v16;
      v22 = v18;
      v23 = "stop";
      v24 = v17;
      if (*(_BYTE *)(v15 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v21);
    }
    *(_BYTE *)(v3 + 292) = 0;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 368))(v3);
  }
LABEL_25:
  if (v5 != a2)
  {
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E3419330;
    v21 = (uint64_t)v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 136))(v3);
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v3 + 128), &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 144))(v3);
    this = v21;
    v21 = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

char *WebCore::RealtimeMediaSource::logChannel(WebCore::RealtimeMediaSource *this)
{
  return &WebCore::LogWebRTC;
}

_BYTE *WebCore::RealtimeMediaSource::start(_BYTE *this)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[4];

  if (!this[292])
  {
    v1 = this;
    if (!this[294])
    {
      v2 = *((_QWORD *)this + 5);
      if (v2)
      {
        v3 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 24))(this);
        v4 = *((_QWORD *)v1 + 6);
        v7[0] = v3;
        v7[1] = v5;
        v7[2] = "start";
        v7[3] = v4;
        if (*(_BYTE *)(v2 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v7);
      }
      v1[292] = 1;
      (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 360))(v1);
      this = (_BYTE *)*((_QWORD *)v1 + 4);
      if (this)
      {
        LOBYTE(v7[0]) = 0;
        this = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *, _QWORD *))(*(_QWORD *)this + 48))(this, v1, v7);
      }
      if (v1[292])
      {
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v6 = off_1E34193F8;
        v7[0] = v6;
        (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v1);
        WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)v1 + 16, v7);
        (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 144))(v1);
        this = (_BYTE *)v7[0];
        v7[0] = 0;
        if (this)
          return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::notifyMutedObservers(uint64_t **this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3419330;
  v4 = (uint64_t)v2;
  ((void (*)(uint64_t **))(*this)[17])(this);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(this + 16, &v4);
  ((void (*)(uint64_t **))(*this)[18])(this);
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int8 *WebCore::RealtimeMediaSource::notifyMutedChange(unsigned __int8 *this, int a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[4];
  unsigned __int8 v10;

  v10 = a2;
  if (this[289] != a2)
  {
    v2 = a2;
    v3 = this;
    v4 = *((_QWORD *)this + 5);
    if (v4)
    {
      v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 24))(this);
      v6 = *((_QWORD *)v3 + 6);
      v9[0] = v5;
      v9[1] = v7;
      v9[2] = "notifyMutedChange";
      v9[3] = v6;
      if (*(_BYTE *)(v4 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v9);
        v2 = v10;
      }
    }
    v3[289] = v2;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3419330;
    v9[0] = v8;
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v3 + 136))(v3);
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)v3 + 16, v9);
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v3 + 144))(v3);
    this = (unsigned __int8 *)v9[0];
    v9[0] = 0;
    if (this)
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::forEachObserver(uint64_t **a1, _QWORD *a2)
{
  ((void (*)(uint64_t **))(*a1)[17])(a1);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(a1 + 16, a2);
  return ((uint64_t (*)(uint64_t **))(*a1)[18])(a1);
}

uint64_t WebCore::RealtimeMediaSource::forEachVideoFrameObserver(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 160);
  if (__ldaxr((unsigned __int8 *)(result + 160)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 160);
LABEL_5:
  v6 = *(_QWORD **)(v3 + 168);
  if (v6)
  {
    v7 = *((unsigned int *)v6 - 1);
    v8 = &v6[2 * v7];
    if (*((_DWORD *)v6 - 3))
    {
      v9 = v6;
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = v6;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v9 = &v6[2 * v7];
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = &v6[2 * v7];
  if (v6)
  {
LABEL_12:
    v11 = &v6[2 * *((unsigned int *)v6 - 1)];
    goto LABEL_17;
  }
  v11 = 0;
LABEL_17:
  while (v9 != v11)
  {
    v12 = v9 + 2;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v9);
    v9 = v8;
    if (v12 != v8)
    {
      v9 = v12;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  v13 = __ldxr(v4);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[4];
  unsigned int v11;

  v11 = a2;
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 384))(a1, a2);
  if (!*(_BYTE *)(a1 + 290))
  {
    *(_BYTE *)(a1 + 290) = 1;
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v6 = *(_QWORD *)(a1 + 48);
      v10[0] = v5;
      v10[1] = v7;
      v10[2] = "notifySettingsDidChangeObservers";
      v10[3] = v6;
      if (*(_BYTE *)(v4 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::OptionSet<WebCore::RealtimeMediaSourceSettings::Flag>>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v10, (int *)&v11);
    }
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3419358;
    v8[1] = a1;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = &off_1E34195B0;
    v9[1] = a1;
    v9[2] = v8;
    v10[0] = v9;
    WTF::callOnMainThread();
    result = v10[0];
    v10[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::scheduleDeferredTask(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E34195B0;
  v5[1] = a1;
  v5[2] = v4;
  v7 = v5;
  WTF::callOnMainThread();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

_BYTE *WebCore::RealtimeMediaSource::updateHasStartedProducingData(_BYTE *this)
{
  _BYTE *v1;
  _QWORD *v2;
  uint64_t v3;

  if (!this[295])
  {
    v1 = this;
    (*(void (**)(_BYTE *))(*(_QWORD *)this + 136))(this);
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = &off_1E34193A8;
    v2[1] = v1;
    v3 = (uint64_t)v2;
    WTF::callOnMainThread();
    this = (_BYTE *)v3;
    if (v3)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::videoFrameRotation(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

unint64_t WebCore::RealtimeMediaSource::computeResizedVideoFrameSize(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = HIDWORD(a2);
  if ((_DWORD)a2)
  {
    if (!HIDWORD(a2))
      v3 = (HIDWORD(a3) * (int)a2 / (int)a3);
  }
  else if (HIDWORD(a2))
  {
    LODWORD(a2) = HIDWORD(a2) * (int)a3 / SHIDWORD(a3);
  }
  else
  {
    LODWORD(a2) = 0;
  }
  return a2 | (v3 << 32);
}

uint64_t WebCore::RealtimeMediaSource::videoFrameAvailable(uint64_t a1, WebCore::VideoFrame *a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t result;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  unsigned __int8 *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  int v38;
  int v39;
  WebCore::ImageTransferSessionVT *v40;
  WebCore::ImageTransferSessionVT *v41;
  uint64_t v42;
  const void *v43;
  const void *v44;
  const void *v45;
  unsigned int *v46;
  uint64_t v47;
  __int128 v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  __int128 v53;
  uint64_t *v54;
  int v55;
  _OWORD v56[3];
  uint64_t v57;
  _OWORD v58[3];
  uint64_t v59;
  double v60;
  _QWORD v61[5];

  v6 = (unsigned int *)(a1 + 64);
  ++*(_DWORD *)(a1 + 64);
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v9 = v8;
  v10 = *((double *)v6 - 1);
  if (v10 == 0.0)
  {
LABEL_12:
    *(double *)(a1 + 56) = v9;
    goto LABEL_13;
  }
  v11 = v9 - v10;
  if (v9 - v10 >= 1.0)
  {
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v13 = *(_QWORD *)(a1 + 48);
      v61[0] = result;
      v61[1] = v14;
      v61[2] = "videoFrameAvailable";
      v61[3] = v13;
      v60 = v11;
      if (*(_BYTE *)(v12 + 12))
      {
        if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
          result = (uint64_t)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned int,char [17],double,char [9]>((WTF::Logger::LogSiteIdentifier *)v61, v6, &v60);
      }
    }
    *v6 = 0;
    goto LABEL_12;
  }
LABEL_13:
  if (!*(_BYTE *)(a1 + 295))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = &off_1E34193A8;
    v16[1] = a1;
    v61[0] = v16;
    WTF::callOnMainThread();
    result = v61[0];
    v61[0] = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v17 = (unsigned __int8 *)(a1 + 160);
  if (__ldaxr((unsigned __int8 *)(a1 + 160)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_20;
  }
  result = MEMORY[0x19AEA534C](a1 + 160);
LABEL_20:
  v19 = *(_QWORD *)(a1 + 168);
  if (v19)
  {
    v20 = *(unsigned int *)(v19 - 4);
    v21 = (uint64_t *)(v19 + 16 * v20);
    if (*(_DWORD *)(v19 - 12))
    {
      v22 = *(uint64_t **)(a1 + 168);
      if ((_DWORD)v20)
      {
        v23 = 16 * v20;
        v22 = *(uint64_t **)(a1 + 168);
        while ((unint64_t)(*v22 + 1) <= 1)
        {
          v22 += 2;
          v23 -= 16;
          if (!v23)
          {
            v22 = v21;
            goto LABEL_27;
          }
        }
      }
      goto LABEL_27;
    }
    v22 = (uint64_t *)(v19 + 16 * v20);
  }
  else
  {
    v22 = 0;
    v20 = 0;
  }
  v21 = (uint64_t *)(v19 + 16 * v20);
  if (v19)
  {
LABEL_27:
    v24 = (uint64_t *)(v19 + 16 * *(unsigned int *)(v19 - 4));
    goto LABEL_32;
  }
  v24 = 0;
LABEL_32:
  if (v24 != v22)
  {
    while (1)
    {
      v25 = v22[1];
      if (!v25)
        goto LABEL_69;
      v26 = *(_QWORD *)(v25 + 16);
      if (v26 >= 2)
      {
        v27 = *(_QWORD *)(v25 + 24) + 1;
        *(_QWORD *)(v25 + 24) = v27;
        if (v27 % v26)
          goto LABEL_70;
      }
      if (*(double *)(v25 + 8) == 0.0)
      {
        v28 = 1;
      }
      else
      {
        v28 = (unint64_t)((*(double (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1) / *(double *)(v25 + 8));
        if (v28 <= 1)
          v28 = 1;
      }
      *(_QWORD *)(v25 + 16) = v28;
      if (!*(_DWORD *)v25 && !*(_DWORD *)(v25 + 4))
        goto LABEL_69;
      v29 = ceilf((*(float (**)(WebCore::VideoFrame *))(*(_QWORD *)a2 + 16))(a2));
      if (v29 >= 2147500000.0)
        v31 = 0x7FFFFFFFLL;
      else
        v31 = v29 <= -2147500000.0 ? 0x80000000 : (int)v29;
      v32 = ceilf(v30);
      if (v32 >= 2147500000.0)
        v33 = 0x7FFFFFFF00000000;
      else
        v33 = v32 <= -2147500000.0 ? 0x8000000000000000 : (unint64_t)(int)v32 << 32;
      v34 = HIDWORD(v33);
      v35 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)a1 + 224))(a1, *(_QWORD *)v25, v33 | v31);
      if ((_DWORD)v35 == (_DWORD)v31 && HIDWORD(v35) == (_DWORD)v34)
        goto LABEL_69;
      v61[0] = v35;
      v37 = *(_QWORD *)(v25 + 32);
      if (v37)
      {
        v38 = *(_DWORD *)(v37 + 48);
        if (v38 == (*(unsigned int (**)(WebCore::VideoFrame *))(*(_QWORD *)a2 + 24))(a2))
          goto LABEL_63;
      }
      v39 = (*(uint64_t (**)(WebCore::VideoFrame *))(*(_QWORD *)a2 + 24))(a2);
      v40 = (WebCore::ImageTransferSessionVT *)operator new();
      v41 = WebCore::ImageTransferSessionVT::ImageTransferSessionVT(v40, v39, (OpaqueVTPixelTransferSession **)1);
      v42 = *(_QWORD *)(v25 + 32);
      *(_QWORD *)(v25 + 32) = v41;
      if (v42)
        break;
LABEL_64:
      WebCore::ImageTransferSessionVT::convertVideoFrame(v41, a2, (const WebCore::IntSize *)v61, (uint64_t *)&v60);
      v46 = *(unsigned int **)&v60;
      if (v60 != 0.0)
      {
        v47 = *v22;
        v59 = *(_QWORD *)(a3 + 48);
        v48 = *(_OWORD *)(a3 + 32);
        v58[1] = *(_OWORD *)(a3 + 16);
        v58[2] = v48;
        v58[0] = *(_OWORD *)a3;
        result = (*(uint64_t (**)(uint64_t, double, _OWORD *))(*(_QWORD *)v47 + 16))(v47, COERCE_DOUBLE(*(_QWORD *)&v60), v58);
        v60 = 0.0;
        v49 = v46 + 2;
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          atomic_store(1u, v46 + 2);
          result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
        }
        goto LABEL_70;
      }
LABEL_69:
      v52 = *v22;
      v57 = *(_QWORD *)(a3 + 48);
      v53 = *(_OWORD *)(a3 + 32);
      v56[1] = *(_OWORD *)(a3 + 16);
      v56[2] = v53;
      v56[0] = *(_OWORD *)a3;
      result = (*(uint64_t (**)(uint64_t, WebCore::VideoFrame *, _OWORD *))(*(_QWORD *)v52 + 16))(v52, a2, v56);
LABEL_70:
      v54 = v22 + 2;
      v22 = v21;
      if (v54 != v21)
      {
        v22 = v54;
        while ((unint64_t)(*v22 + 1) <= 1)
        {
          v22 += 2;
          if (v22 == v21)
          {
            v22 = v21;
            break;
          }
        }
      }
      if (v22 == v24)
        goto LABEL_81;
    }
    v43 = *(const void **)(v42 + 40);
    *(_QWORD *)(v42 + 40) = 0;
    if (v43)
      CFRelease(v43);
    v44 = *(const void **)(v42 + 8);
    *(_QWORD *)(v42 + 8) = 0;
    if (v44)
      CFRelease(v44);
    v45 = *(const void **)v42;
    *(_QWORD *)v42 = 0;
    if (v45)
      CFRelease(v45);
    MEMORY[0x19AEA7644](v42, 0x10C0C404B4E061BLL);
LABEL_63:
    v41 = *(WebCore::ImageTransferSessionVT **)(v25 + 32);
    if (!v41)
      goto LABEL_69;
    goto LABEL_64;
  }
LABEL_81:
  v55 = __ldxr(v17);
  if (v55 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 160));
  }
  if (__stlxr(0, v17))
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 160));
  return result;
}

_BYTE *WebCore::RealtimeMediaSource::audioSamplesAvailable(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  _BYTE *v21;

  v9 = result;
  if (!result[295])
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)result + 136))(result);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E34193A8;
    v10[1] = v9;
    v21 = v10;
    WTF::callOnMainThread();
    result = v21;
    if (v21)
      result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v21 + 8))(v21);
  }
  v11 = v9 + 144;
  if (__ldaxr(v9 + 144))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_8;
  }
  result = (_BYTE *)MEMORY[0x19AEA534C](v9 + 144);
LABEL_8:
  v13 = (_QWORD *)*((_QWORD *)v9 + 19);
  if (v13)
  {
    v14 = *((unsigned int *)v13 - 1);
    v15 = &v13[v14];
    if (*((_DWORD *)v13 - 3))
    {
      v16 = v13;
      if ((_DWORD)v14)
      {
        v17 = 8 * v14;
        v16 = v13;
        while ((unint64_t)(*v16 + 1) <= 1)
        {
          ++v16;
          v17 -= 8;
          if (!v17)
          {
            v16 = v15;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    v16 = &v13[v14];
  }
  else
  {
    v16 = 0;
    v14 = 0;
  }
  v15 = &v13[v14];
  if (v13)
  {
LABEL_15:
    v18 = &v13[*((unsigned int *)v13 - 1)];
    goto LABEL_20;
  }
  v18 = 0;
LABEL_20:
  while (v16 != v18)
  {
    v19 = v16 + 1;
    result = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v16 + 48))(*v16, a2, a3, a4, a5);
    v16 = v15;
    if (v19 != v15)
    {
      v16 = v19;
      while ((unint64_t)(*v16 + 1) <= 1)
      {
        if (++v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  v20 = __ldxr(v11);
  if (v20 != 1)
  {
    __clrex();
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
  }
  if (__stlxr(0, v11))
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
  return result;
}

uint64_t WebCore::RealtimeMediaSource::requestToEnd(uint64_t **this, WebCore::RealtimeMediaSourceObserver *a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD v10[4];
  char v11;

  v11 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E3419420;
  v4[1] = &v11;
  v10[0] = v4;
  ((void (*)(uint64_t **))(*this)[17])(this);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(this + 16, v10);
  ((void (*)(uint64_t **))(*this)[18])(this);
  result = v10[0];
  v10[0] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (!v11)
  {
    v6 = this[5];
    if (v6)
    {
      v7 = ((uint64_t (*)(uint64_t **))(*this)[3])(this);
      v8 = this[6];
      v10[0] = v7;
      v10[1] = v9;
      v10[2] = "requestToEnd";
      v10[3] = v8;
      if (*((_BYTE *)v6 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v10);
    }
    return WebCore::RealtimeMediaSource::end((uint64_t)this, a2);
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::end(uint64_t this, WebCore::RealtimeMediaSourceObserver *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[4];
  WebCore::RealtimeMediaSourceObserver *v11;

  v11 = a2;
  if (!*(_BYTE *)(this + 294))
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 40);
    if (v3)
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
      v5 = *(_QWORD *)(v2 + 48);
      v10[0] = v4;
      v10[1] = v6;
      v10[2] = "end";
      v10[3] = v5;
      if (*(_BYTE *)(v3 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v10);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 376))(v2);
    *(_BYTE *)(v2 + 294) = 1;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 400))(v2);
    v7 = *(_QWORD *)(v2 + 32);
    if (v7)
    {
      LOBYTE(v10[0]) = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v2, v10);
    }
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3419448;
    v8[1] = &v11;
    v10[0] = v8;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v2 + 128), v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
    v9 = v10[0];
    v10[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  }
  return this;
}

_QWORD *WebCore::RealtimeMediaSource::registerOwnerCallback(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result == v4)
  {
    v6 = 4;
    result = v4;
  }
  else
  {
    if (!result)
      goto LABEL_6;
    v6 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    if (v7 == a2)
    {
      *(_QWORD *)(a1 + 32) = v4;
      return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v4);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::captureFailed(WebCore::RealtimeMediaSource *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 24))(this);
    v4 = *((_QWORD *)this + 6);
    v7[0] = v3;
    v7[1] = v5;
    v7[2] = "captureFailed";
    v7[3] = v4;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 1, (WTF::Logger::LogSiteIdentifier *)v7);
  }
  *((_BYTE *)this + 293) = 1;
  return WebCore::RealtimeMediaSource::end((uint64_t)this, 0);
}

uint64_t WebCore::RealtimeMediaSource::supportsSizeFrameRateAndZoom()
{
  return 1;
}

uint64_t WebCore::RealtimeMediaSource::hasInvalidSizeFrameRateAndZoomConstraints(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  int v11;
  unsigned int *v12;
  BOOL v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  WTF::String *v17;
  WTF::String *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  WTF::String *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  signed int v37;
  signed int v38;
  signed int v39;
  signed int v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  WTF::Logger *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::Logger *v54;
  WTF::String *v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  int v65;
  signed int v66;
  char v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  WTF::String *v73;
  WTF::String *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::String *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  BOOL v83;
  int v84;
  char v85;
  int v86;
  char v87;
  uint64_t v88;
  int v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  NSObject *v95;
  uint64_t v96;
  void *v97;
  char *v98;
  unsigned __int8 *v99;
  int v100;
  int v101;
  int v102;
  signed int v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  WTF::Logger *v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::Logger *v116;
  WTF::String *v117;
  uint64_t v118;
  WTF::StringImpl **v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  int v126;
  char v127;
  double v128;
  double v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  double v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WTF::String *v138;
  WTF::String *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  NSObject *v147;
  uint64_t v148;
  void *v149;
  char *v150;
  unsigned __int8 *v151;
  int v152;
  int v153;
  double v154;
  double v155;
  double v156;
  double v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  WTF::String *v164;
  WTF::String *v165;
  WTF::Logger *v166;
  uint64_t v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::Logger *v174;
  uint64_t v175;
  WTF::StringImpl **v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  int v184;
  WTF::StringImpl *v185;
  int v186;
  char v187;
  uint64_t v188;
  double v189;
  uint64_t v190;
  double v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  WTF::String *v196;
  WTF::String *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  NSObject *v205;
  uint64_t v206;
  void *v207;
  char *v208;
  unsigned __int8 *v209;
  int v210;
  int v211;
  double v212;
  double v213;
  double v214;
  double v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  WTF::String *v222;
  WTF::String *v223;
  WTF::Logger *v224;
  uint64_t v225;
  uint64_t v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  WTF::Logger *v232;
  uint64_t v233;
  WTF::StringImpl **v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  int v242;
  unsigned int v243;
  WTF::StringImpl *v244;
  char v245;
  char v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  uint64_t v250;
  char v251;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  const char *v259;
  uint64_t v260;
  WTF::Logger *v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  __int128 buf;
  double v275;
  WTF::StringImpl *v276;
  double v277;
  WTF::StringImpl *v278;
  int v279;
  WTF::StringImpl *v280;
  int v281;
  WTF::StringImpl *v282;
  int v283;
  WTF::StringImpl *v284[5];

  v284[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 48) && !*(_BYTE *)(a3 + 48) && !*(_BYTE *)(a4 + 80))
  {
    v11 = *(unsigned __int8 *)(a5 + 80);
    if (!*(_BYTE *)(a5 + 80))
    {
      v186 = 0;
      return v11 | (v186 << 8);
    }
  }
  v12 = (unsigned int *)(*(uint64_t (**)(double *))(*(_QWORD *)a1 + 120))(a1);
  *a6 = INFINITY;
  if (*(_BYTE *)(a2 + 48))
    v13 = *((_BYTE *)v12 + 171) == 0;
  else
    v13 = 1;
  if (v13)
    goto LABEL_10;
  v14 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 120))(a1);
  if (*(_BYTE *)(v14 + 171))
    v15 = WebCore::NumericConstraint<int>::fitnessDistance(a2, *(_DWORD *)v14, *(_DWORD *)(v14 + 4));
  else
    v15 = 0.0;
  if (fabs(v15) == INFINITY)
  {
    v16 = *((_QWORD *)a1 + 5);
    if (v16)
    {
      v18 = (WTF::String *)*v12;
      v17 = (WTF::String *)v12[1];
      v19 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 24))(a1);
      v20 = *((_QWORD *)a1 + 6);
      v257 = v19;
      v258 = v21;
      v259 = "hasInvalidSizeFrameRateAndZoomConstraints";
      v260 = v20;
      if (*(_BYTE *)(v16 + 12))
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v257);
        WTF::String::String((WTF::String *)&v267, "RealtimeMediaSource::supportsSizeFrameRateAndZoom failed width constraint, capabilities are [");
        WTF::String::number(v18);
        WTF::String::String((WTF::String *)&v265, ", ");
        WTF::String::number(v17);
        WTF::String::String((WTF::String *)&v263, "]");
        v261 = v267;
        v273 = v266;
        *(_QWORD *)&buf = v268;
        v271 = v264;
        v272 = v265;
        v270 = v263;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v261, (uint64_t *)&v273, (uint64_t *)&v272, (uint64_t *)&v271, (uint64_t *)&v270, &v269);
        if (!v269)
        {
          __break(0xC471u);
          JUMPOUT(0x1962952BCLL);
        }
        v23 = v263;
        v263 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v22);
          else
            *(_DWORD *)v23 -= 2;
        }
        v24 = v264;
        v264 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v22);
          else
            *(_DWORD *)v24 -= 2;
        }
        v25 = v265;
        v265 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v22);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = v266;
        v266 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v22);
          else
            *(_DWORD *)v26 -= 2;
        }
        v27 = v267;
        v267 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v22);
          else
            *(_DWORD *)v27 -= 2;
        }
        v28 = v268;
        v268 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v22);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = qword_1ECE7CD60;
        v30 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v30)
        {
          WTF::String::utf8();
          v32 = v261 ? (char *)v261 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v32;
          _os_log_impl(&dword_1940B8000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v30 = (uint64_t)v261;
          v261 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
              v30 = WTF::fastFree((WTF *)v30, v31);
            else
              --*(_DWORD *)v30;
          }
        }
        v33 = (WTF::String *)v18;
        if (WebCore::LogWebRTC && byte_1ECE7CD50)
        {
          v34 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v35 = *v34;
            if ((v35 & 1) != 0)
              break;
            v36 = __ldaxr(v34);
            if (v36 == v35)
            {
              if (!__stxr(v35 | 1, v34))
              {
                v42 = WTF::Logger::observers((WTF::Logger *)v30);
                v43 = *(unsigned int *)(v42 + 12);
                if ((_DWORD)v43)
                {
                  v44 = *(uint64_t **)v42;
                  v253 = *(_QWORD *)v42 + 8 * v43;
                  do
                  {
                    v45 = *v44;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v257);
                    LODWORD(v275) = 0;
                    WTF::String::String((WTF::String *)&v276, "RealtimeMediaSource::supportsSizeFrameRateAndZoom failed width constraint, capabilities are [");
                    LODWORD(v277) = 0;
                    WTF::String::number(v33);
                    v279 = 0;
                    WTF::String::String((WTF::String *)&v280, ", ");
                    v281 = 0;
                    WTF::String::number(v17);
                    v283 = 0;
                    WTF::String::String((WTF::String *)v284, "]");
                    v261 = 0;
                    v262 = 0;
                    v46 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                    LODWORD(v262) = 6;
                    v261 = v46;
                    v47 = HIDWORD(v262);
                    *((_DWORD *)v46 + 4 * HIDWORD(v262)) = buf;
                    v48 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v46 + 2 * v47 + 1) = v48;
                    *((_DWORD *)v46 + 4 * (v47 + 1)) = LODWORD(v275);
                    v49 = v276;
                    if (v276)
                      *(_DWORD *)v276 += 2;
                    *((_QWORD *)v46 + 2 * (v47 + 1) + 1) = v49;
                    *((_DWORD *)v46 + 4 * (v47 + 2)) = LODWORD(v277);
                    v50 = v278;
                    if (v278)
                      *(_DWORD *)v278 += 2;
                    *((_QWORD *)v46 + 2 * (v47 + 2) + 1) = v50;
                    *((_DWORD *)v46 + 4 * (v47 + 3)) = v279;
                    v51 = v280;
                    if (v280)
                      *(_DWORD *)v280 += 2;
                    *((_QWORD *)v46 + 2 * (v47 + 3) + 1) = v51;
                    *((_DWORD *)v46 + 4 * (v47 + 4)) = v281;
                    v52 = v282;
                    if (v282)
                      *(_DWORD *)v282 += 2;
                    *((_QWORD *)v46 + 2 * (v47 + 4) + 1) = v52;
                    *((_DWORD *)v46 + 4 * (v47 + 5)) = v283;
                    v53 = v284[0];
                    if (v284[0])
                      *(_DWORD *)v284[0] += 2;
                    *((_QWORD *)v46 + 2 * (v47 + 5) + 1) = v53;
                    HIDWORD(v262) = v47 + 6;
                    (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v45 + 16))(v45, &WebCore::LogWebRTC, 1, &v261);
                    v54 = v261;
                    if (HIDWORD(v262))
                    {
                      v55 = v17;
                      v56 = 16 * HIDWORD(v262);
                      v57 = (WTF::StringImpl **)((char *)v261 + 8);
                      do
                      {
                        v58 = *v57;
                        *v57 = 0;
                        if (v58)
                        {
                          if (*(_DWORD *)v58 == 2)
                            WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v31);
                          else
                            *(_DWORD *)v58 -= 2;
                        }
                        v57 += 2;
                        v56 -= 16;
                      }
                      while (v56);
                      v54 = v261;
                      v17 = v55;
                      v33 = (WTF::String *)v18;
                    }
                    if (v54)
                    {
                      v261 = 0;
                      LODWORD(v262) = 0;
                      WTF::fastFree(v54, v31);
                    }
                    v59 = v284[0];
                    v284[0] = 0;
                    if (v59)
                    {
                      if (*(_DWORD *)v59 == 2)
                        WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v31);
                      else
                        *(_DWORD *)v59 -= 2;
                    }
                    v60 = v282;
                    v282 = 0;
                    if (v60)
                    {
                      if (*(_DWORD *)v60 == 2)
                        WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v31);
                      else
                        *(_DWORD *)v60 -= 2;
                    }
                    v61 = v280;
                    v280 = 0;
                    if (v61)
                    {
                      if (*(_DWORD *)v61 == 2)
                        WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v31);
                      else
                        *(_DWORD *)v61 -= 2;
                    }
                    v62 = v278;
                    v278 = 0;
                    if (v62)
                    {
                      if (*(_DWORD *)v62 == 2)
                        WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v31);
                      else
                        *(_DWORD *)v62 -= 2;
                    }
                    v63 = v276;
                    v276 = 0;
                    if (v63)
                    {
                      if (*(_DWORD *)v63 == 2)
                        WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v31);
                      else
                        *(_DWORD *)v63 -= 2;
                    }
                    v64 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v64)
                    {
                      if (*(_DWORD *)v64 == 2)
                        WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v31);
                      else
                        *(_DWORD *)v64 -= 2;
                    }
                    ++v44;
                  }
                  while (v44 != (uint64_t *)v253);
                }
                v65 = __ldxr(v34);
                if (v65 == 1)
                {
                  if (!__stlxr(0, v34))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v185 = v269;
        v269 = 0;
        if (v185)
        {
          if (*(_DWORD *)v185 == 2)
            WTF::StringImpl::destroy(v185, (WTF::StringImpl *)v31);
          else
            *(_DWORD *)v185 -= 2;
        }
      }
    }
    goto LABEL_551;
  }
  if (v15 >= *a6)
    v15 = *a6;
  *a6 = v15;
  if (!*(_BYTE *)(a2 + 48))
    goto LABEL_607;
  if (*(_BYTE *)(a2 + 16) || *(_BYTE *)(a2 + 24) || *(_BYTE *)(a2 + 32))
  {
    v37 = *v12;
    v38 = v12[1];
    v39 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 96))(a1);
    if (*(_BYTE *)(a2 + 32))
    {
      v40 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      if (*(_BYTE *)(a2 + 16))
      {
        if (*(_DWORD *)(a2 + 12) > v37)
          v37 = *(_DWORD *)(a2 + 12);
        if (v37 < v39 && *(_BYTE *)(a2 + 40) == 0)
          v40 = v39;
        else
          v40 = v37;
      }
      else
      {
        v40 = 0;
      }
      if (*(_BYTE *)(a2 + 24))
      {
        if (*(_DWORD *)(a2 + 20) < v38)
          v38 = *(_DWORD *)(a2 + 20);
        v40 = v38;
      }
      if (*(_BYTE *)(a2 + 40))
      {
        v66 = *(_DWORD *)(a2 + 36);
        if (v66 >= v38)
          v66 = v38;
        if (v37 <= v66)
          v40 = v66;
        else
          v40 = v37;
      }
    }
    LODWORD(v250) = v40 & 0xFFFFFF00;
    BYTE4(v250) = v40;
    v251 = 1;
  }
  else
  {
LABEL_10:
    v251 = 0;
    v250 = 0;
  }
  v67 = 0;
  if (*(_BYTE *)(a3 + 48))
  {
    LOBYTE(v68) = 0;
    v69 = 0;
    if (*((_BYTE *)v12 + 172))
    {
      v70 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 120))(a1);
      if (*(_BYTE *)(v70 + 172))
        v71 = WebCore::NumericConstraint<int>::fitnessDistance(a3, *(_DWORD *)(v70 + 8), *(_DWORD *)(v70 + 12));
      else
        v71 = 0.0;
      if (fabs(v71) == INFINITY)
      {
        v72 = *((_QWORD *)a1 + 5);
        if (!v72)
          goto LABEL_536;
        v74 = (WTF::String *)v12[2];
        v73 = (WTF::String *)v12[3];
        v75 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 24))(a1);
        v76 = *((_QWORD *)a1 + 6);
        v257 = v75;
        v258 = v77;
        v259 = "hasInvalidSizeFrameRateAndZoomConstraints";
        v260 = v76;
        if (!*(_BYTE *)(v72 + 12))
        {
LABEL_536:
          v186 = 1;
          v11 = 2;
          return v11 | (v186 << 8);
        }
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v257);
        WTF::String::String((WTF::String *)&v271, "RealtimeMediaSource::supportsSizeFrameRateAndZoom failed height constraint, capabilities are [%d, %d]");
        WTF::String::number(v74);
        WTF::String::number(v73);
        v78 = v73;
        if (v272)
          v79 = *((_DWORD *)v272 + 1);
        else
          v79 = 0;
        if (v271)
        {
          v80 = *((_DWORD *)v271 + 1);
          if (v270)
            goto LABEL_146;
        }
        else
        {
          v80 = 0;
          if (v270)
          {
LABEL_146:
            v81 = *((_DWORD *)v270 + 1);
            if (v269)
            {
LABEL_147:
              v82 = *((_DWORD *)v269 + 1);
LABEL_148:
              if ((v82 | v81) < 0
                || ((v83 = __OFADD__(v81, v82), v84 = v81 + v82, !v83) ? (v85 = 0) : (v85 = 1),
                    v80 < 0
                 || (v85 & 1) != 0
                 || ((v83 = __OFADD__(v80, v84), v86 = v80 + v84, !v83) ? (v87 = 0) : (v87 = 1),
                     v79 < 0 || (v87 & 1) != 0 || (v88 = (v79 + v86), __OFADD__(v79, v86)))))
              {
                v273 = 0;
                goto LABEL_612;
              }
              if (v272 && (*((_BYTE *)v272 + 16) & 4) == 0 || v271 && (*((_BYTE *)v271 + 16) & 4) == 0)
              {
                v89 = 0;
                goto LABEL_165;
              }
              if (v270)
              {
                v243 = *((_DWORD *)v270 + 4);
                v89 = (v243 >> 2) & 1;
                if (v269 && (v243 & 4) != 0)
                  goto LABEL_530;
              }
              else
              {
                if (v269)
                {
LABEL_530:
                  v89 = (*((unsigned __int8 *)v269 + 16) >> 2) & 1;
                  goto LABEL_165;
                }
                v89 = 1;
              }
LABEL_165:
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v88, v89, (uint64_t)v272, v271, (uint64_t)v270, (uint64_t)v269, &v273);
              if (v273)
              {
                v91 = v269;
                v269 = 0;
                if (v91)
                {
                  if (*(_DWORD *)v91 == 2)
                    WTF::StringImpl::destroy(v91, v90);
                  else
                    *(_DWORD *)v91 -= 2;
                }
                v92 = v270;
                v270 = 0;
                if (v92)
                {
                  if (*(_DWORD *)v92 == 2)
                    WTF::StringImpl::destroy(v92, v90);
                  else
                    *(_DWORD *)v92 -= 2;
                }
                v93 = v271;
                v271 = 0;
                if (v93)
                {
                  if (*(_DWORD *)v93 == 2)
                    WTF::StringImpl::destroy(v93, v90);
                  else
                    *(_DWORD *)v93 -= 2;
                }
                v94 = v272;
                v272 = 0;
                if (v94)
                {
                  if (*(_DWORD *)v94 == 2)
                    WTF::StringImpl::destroy(v94, v90);
                  else
                    *(_DWORD *)v94 -= 2;
                }
                v95 = qword_1ECE7CD60;
                v96 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v96)
                {
                  WTF::String::utf8();
                  v98 = v261 ? (char *)v261 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v98;
                  _os_log_impl(&dword_1940B8000, v95, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v96 = (uint64_t)v261;
                  v261 = 0;
                  if (v96)
                  {
                    if (*(_DWORD *)v96 == 1)
                      v96 = WTF::fastFree((WTF *)v96, v97);
                    else
                      --*(_DWORD *)v96;
                  }
                }
                if (WebCore::LogWebRTC && byte_1ECE7CD50)
                {
                  v99 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v100 = *v99;
                    if ((v100 & 1) != 0)
                      break;
                    v101 = __ldaxr(v99);
                    if (v101 == v100)
                    {
                      if (!__stxr(v100 | 1, v99))
                      {
                        v106 = WTF::Logger::observers((WTF::Logger *)v96);
                        v107 = *(unsigned int *)(v106 + 12);
                        if ((_DWORD)v107)
                        {
                          v108 = *(uint64_t **)v106;
                          v254 = *(_QWORD *)v106 + 8 * v107;
                          do
                          {
                            v109 = *v108;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v257);
                            LODWORD(v275) = 0;
                            WTF::String::String((WTF::String *)&v276, "RealtimeMediaSource::supportsSizeFrameRateAndZoom failed height constraint, capabilities are [%d, %d]");
                            LODWORD(v277) = 0;
                            WTF::String::number(v74);
                            v279 = 0;
                            WTF::String::number(v78);
                            v261 = 0;
                            v262 = 0;
                            v110 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                            LODWORD(v262) = 4;
                            v261 = v110;
                            v111 = HIDWORD(v262);
                            *((_DWORD *)v110 + 4 * HIDWORD(v262)) = buf;
                            v112 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v110 + 2 * v111 + 1) = v112;
                            *((_DWORD *)v110 + 4 * (v111 + 1)) = LODWORD(v275);
                            v113 = v276;
                            if (v276)
                              *(_DWORD *)v276 += 2;
                            *((_QWORD *)v110 + 2 * (v111 + 1) + 1) = v113;
                            *((_DWORD *)v110 + 4 * (v111 + 2)) = LODWORD(v277);
                            v114 = v278;
                            if (v278)
                              *(_DWORD *)v278 += 2;
                            *((_QWORD *)v110 + 2 * (v111 + 2) + 1) = v114;
                            *((_DWORD *)v110 + 4 * (v111 + 3)) = v279;
                            v115 = v280;
                            if (v280)
                              *(_DWORD *)v280 += 2;
                            *((_QWORD *)v110 + 2 * (v111 + 3) + 1) = v115;
                            HIDWORD(v262) = v111 + 4;
                            (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v109 + 16))(v109, &WebCore::LogWebRTC, 1, &v261);
                            v116 = v261;
                            if (HIDWORD(v262))
                            {
                              v117 = v78;
                              v118 = 16 * HIDWORD(v262);
                              v119 = (WTF::StringImpl **)((char *)v261 + 8);
                              do
                              {
                                v120 = *v119;
                                *v119 = 0;
                                if (v120)
                                {
                                  if (*(_DWORD *)v120 == 2)
                                    WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v97);
                                  else
                                    *(_DWORD *)v120 -= 2;
                                }
                                v119 += 2;
                                v118 -= 16;
                              }
                              while (v118);
                              v116 = v261;
                              v78 = v117;
                            }
                            if (v116)
                            {
                              v261 = 0;
                              LODWORD(v262) = 0;
                              WTF::fastFree(v116, v97);
                            }
                            v121 = v280;
                            v280 = 0;
                            if (v121)
                            {
                              if (*(_DWORD *)v121 == 2)
                                WTF::StringImpl::destroy(v121, (WTF::StringImpl *)v97);
                              else
                                *(_DWORD *)v121 -= 2;
                            }
                            v122 = v278;
                            v278 = 0;
                            if (v122)
                            {
                              if (*(_DWORD *)v122 == 2)
                                WTF::StringImpl::destroy(v122, (WTF::StringImpl *)v97);
                              else
                                *(_DWORD *)v122 -= 2;
                            }
                            v123 = v276;
                            v276 = 0;
                            if (v123)
                            {
                              if (*(_DWORD *)v123 == 2)
                                WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v97);
                              else
                                *(_DWORD *)v123 -= 2;
                            }
                            v124 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v124)
                            {
                              if (*(_DWORD *)v124 == 2)
                                WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v97);
                              else
                                *(_DWORD *)v124 -= 2;
                            }
                            ++v108;
                          }
                          while (v108 != (uint64_t *)v254);
                        }
                        v125 = __ldxr(v99);
                        if (v125 == 1)
                        {
                          if (!__stlxr(0, v99))
                            break;
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                v244 = v273;
                v273 = 0;
                if (v244)
                {
                  if (*(_DWORD *)v244 == 2)
                    WTF::StringImpl::destroy(v244, (WTF::StringImpl *)v97);
                  else
                    *(_DWORD *)v244 -= 2;
                }
                goto LABEL_536;
              }
LABEL_612:
              __break(0xC471u);
              JUMPOUT(0x1962952B4);
            }
LABEL_602:
            v82 = 0;
            goto LABEL_148;
          }
        }
        v81 = 0;
        if (v269)
          goto LABEL_147;
        goto LABEL_602;
      }
      if (v71 >= *a6)
        v71 = *a6;
      *a6 = v71;
      if (!*(_BYTE *)(a3 + 48))
        goto LABEL_607;
      if (*(_BYTE *)(a3 + 16) || *(_BYTE *)(a3 + 24) || *(_BYTE *)(a3 + 32))
      {
        v102 = v12[2];
        v103 = v12[3];
        v104 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 96))(a1);
        if (*(_BYTE *)(a3 + 32))
        {
          v68 = *(_DWORD *)(a3 + 28);
        }
        else
        {
          if (*(_BYTE *)(a3 + 16))
          {
            if (*(_DWORD *)(a3 + 12) > v102)
              v102 = *(_DWORD *)(a3 + 12);
            if (v102 < SHIDWORD(v104) && *(_BYTE *)(a3 + 40) == 0)
              v68 = HIDWORD(v104);
            else
              v68 = v102;
          }
          else
          {
            v68 = 0;
          }
          if (*(_BYTE *)(a3 + 24))
          {
            if (*(_DWORD *)(a3 + 20) < v103)
              v103 = *(_DWORD *)(a3 + 20);
            v68 = v103;
          }
          if (*(_BYTE *)(a3 + 40))
          {
            v126 = *(_DWORD *)(a3 + 36);
            if (v126 >= v103)
              v126 = v103;
            if (v102 <= v126)
              v68 = v126;
            else
              v68 = v102;
          }
        }
        v69 = v68 & 0xFFFFFF00;
        v67 = 1;
      }
      else
      {
        v67 = 0;
        LOBYTE(v68) = 0;
        v69 = 0;
      }
    }
  }
  else
  {
    LOBYTE(v68) = 0;
    v69 = 0;
  }
  v127 = 0;
  v128 = 0.0;
  if (*(_BYTE *)(a4 + 80))
  {
    v129 = 0.0;
    if (*((_BYTE *)v12 + 174))
    {
      v130 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 120))(a1);
      if (*(_BYTE *)(v130 + 174))
        v131 = WebCore::NumericConstraint<double>::fitnessDistance(a4, *(double *)(v130 + 32), *(double *)(v130 + 40));
      else
        v131 = 0.0;
      if (fabs(v131) == INFINITY)
      {
        v132 = *((_QWORD *)a1 + 5);
        if (v132)
        {
          v134 = *((double *)v12 + 4);
          v133 = *((double *)v12 + 5);
          v135 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 24))(a1);
          v136 = *((_QWORD *)a1 + 6);
          v257 = v135;
          v258 = v137;
          v259 = "hasInvalidSizeFrameRateAndZoomConstraints";
          v260 = v136;
          if (*(_BYTE *)(v132 + 12))
          {
            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v257);
            v138 = (WTF::String *)WTF::String::String((WTF::String *)&v267, "RealtimeMediaSource::supportsSizeFrameRateAndZoom failed frame rate constraint, capabilities are [");
            WTF::String::number(v138, v134);
            v139 = (WTF::String *)WTF::String::String((WTF::String *)&v265, ", ");
            WTF::String::number(v139, v133);
            WTF::String::String((WTF::String *)&v263, "]");
            v261 = v267;
            v273 = v266;
            *(_QWORD *)&buf = v268;
            v271 = v264;
            v272 = v265;
            v270 = v263;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v261, (uint64_t *)&v273, (uint64_t *)&v272, (uint64_t *)&v271, (uint64_t *)&v270, &v269);
            if (!v269)
            {
              __break(0xC471u);
              JUMPOUT(0x1962952C4);
            }
            v141 = v263;
            v263 = 0;
            if (v141)
            {
              if (*(_DWORD *)v141 == 2)
                WTF::StringImpl::destroy(v141, v140);
              else
                *(_DWORD *)v141 -= 2;
            }
            v142 = v264;
            v264 = 0;
            if (v142)
            {
              if (*(_DWORD *)v142 == 2)
                WTF::StringImpl::destroy(v142, v140);
              else
                *(_DWORD *)v142 -= 2;
            }
            v143 = v265;
            v265 = 0;
            if (v143)
            {
              if (*(_DWORD *)v143 == 2)
                WTF::StringImpl::destroy(v143, v140);
              else
                *(_DWORD *)v143 -= 2;
            }
            v144 = v266;
            v266 = 0;
            if (v144)
            {
              if (*(_DWORD *)v144 == 2)
                WTF::StringImpl::destroy(v144, v140);
              else
                *(_DWORD *)v144 -= 2;
            }
            v145 = v267;
            v267 = 0;
            if (v145)
            {
              if (*(_DWORD *)v145 == 2)
                WTF::StringImpl::destroy(v145, v140);
              else
                *(_DWORD *)v145 -= 2;
            }
            v146 = v268;
            v268 = 0;
            if (v146)
            {
              if (*(_DWORD *)v146 == 2)
                WTF::StringImpl::destroy(v146, v140);
              else
                *(_DWORD *)v146 -= 2;
            }
            v147 = qword_1ECE7CD60;
            v148 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v148)
            {
              WTF::String::utf8();
              v150 = v261 ? (char *)v261 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v150;
              _os_log_impl(&dword_1940B8000, v147, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v148 = (uint64_t)v261;
              v261 = 0;
              if (v148)
              {
                if (*(_DWORD *)v148 == 1)
                  v148 = WTF::fastFree((WTF *)v148, v149);
                else
                  --*(_DWORD *)v148;
              }
            }
            if (WebCore::LogWebRTC && byte_1ECE7CD50)
            {
              v151 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v152 = *v151;
                if ((v152 & 1) != 0)
                  break;
                v153 = __ldaxr(v151);
                if (v153 == v152)
                {
                  if (!__stxr(v152 | 1, v151))
                  {
                    v160 = WTF::Logger::observers((WTF::Logger *)v148);
                    v161 = *(unsigned int *)(v160 + 12);
                    if ((_DWORD)v161)
                    {
                      v162 = *(uint64_t **)v160;
                      v255 = *(_QWORD *)v160 + 8 * v161;
                      do
                      {
                        v163 = *v162;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v257);
                        LODWORD(v275) = 0;
                        v164 = (WTF::String *)WTF::String::String((WTF::String *)&v276, "RealtimeMediaSource::supportsSizeFrameRateAndZoom failed frame rate constraint, capabilities are [");
                        LODWORD(v277) = 0;
                        WTF::String::number(v164, v134);
                        v279 = 0;
                        v165 = (WTF::String *)WTF::String::String((WTF::String *)&v280, ", ");
                        v281 = 0;
                        WTF::String::number(v165, v133);
                        v283 = 0;
                        WTF::String::String((WTF::String *)v284, "]");
                        v261 = 0;
                        v262 = 0;
                        v166 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                        LODWORD(v262) = 6;
                        v261 = v166;
                        v167 = HIDWORD(v262);
                        *((_DWORD *)v166 + 4 * HIDWORD(v262)) = buf;
                        v168 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v166 + 2 * v167 + 1) = v168;
                        *((_DWORD *)v166 + 4 * (v167 + 1)) = LODWORD(v275);
                        v169 = v276;
                        if (v276)
                          *(_DWORD *)v276 += 2;
                        *((_QWORD *)v166 + 2 * (v167 + 1) + 1) = v169;
                        *((_DWORD *)v166 + 4 * (v167 + 2)) = LODWORD(v277);
                        v170 = v278;
                        if (v278)
                          *(_DWORD *)v278 += 2;
                        *((_QWORD *)v166 + 2 * (v167 + 2) + 1) = v170;
                        *((_DWORD *)v166 + 4 * (v167 + 3)) = v279;
                        v171 = v280;
                        if (v280)
                          *(_DWORD *)v280 += 2;
                        *((_QWORD *)v166 + 2 * (v167 + 3) + 1) = v171;
                        *((_DWORD *)v166 + 4 * (v167 + 4)) = v281;
                        v172 = v282;
                        if (v282)
                          *(_DWORD *)v282 += 2;
                        *((_QWORD *)v166 + 2 * (v167 + 4) + 1) = v172;
                        *((_DWORD *)v166 + 4 * (v167 + 5)) = v283;
                        v173 = v284[0];
                        if (v284[0])
                          *(_DWORD *)v284[0] += 2;
                        *((_QWORD *)v166 + 2 * (v167 + 5) + 1) = v173;
                        HIDWORD(v262) = v167 + 6;
                        (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v163 + 16))(v163, &WebCore::LogWebRTC, 1, &v261);
                        v174 = v261;
                        if (HIDWORD(v262))
                        {
                          v175 = 16 * HIDWORD(v262);
                          v176 = (WTF::StringImpl **)((char *)v261 + 8);
                          do
                          {
                            v177 = *v176;
                            *v176 = 0;
                            if (v177)
                            {
                              if (*(_DWORD *)v177 == 2)
                                WTF::StringImpl::destroy(v177, (WTF::StringImpl *)v149);
                              else
                                *(_DWORD *)v177 -= 2;
                            }
                            v176 += 2;
                            v175 -= 16;
                          }
                          while (v175);
                          v174 = v261;
                        }
                        if (v174)
                        {
                          v261 = 0;
                          LODWORD(v262) = 0;
                          WTF::fastFree(v174, v149);
                        }
                        v178 = v284[0];
                        v284[0] = 0;
                        if (v178)
                        {
                          if (*(_DWORD *)v178 == 2)
                            WTF::StringImpl::destroy(v178, (WTF::StringImpl *)v149);
                          else
                            *(_DWORD *)v178 -= 2;
                        }
                        v179 = v282;
                        v282 = 0;
                        if (v179)
                        {
                          if (*(_DWORD *)v179 == 2)
                            WTF::StringImpl::destroy(v179, (WTF::StringImpl *)v149);
                          else
                            *(_DWORD *)v179 -= 2;
                        }
                        v180 = v280;
                        v280 = 0;
                        if (v180)
                        {
                          if (*(_DWORD *)v180 == 2)
                            WTF::StringImpl::destroy(v180, (WTF::StringImpl *)v149);
                          else
                            *(_DWORD *)v180 -= 2;
                        }
                        v181 = v278;
                        v278 = 0;
                        if (v181)
                        {
                          if (*(_DWORD *)v181 == 2)
                            WTF::StringImpl::destroy(v181, (WTF::StringImpl *)v149);
                          else
                            *(_DWORD *)v181 -= 2;
                        }
                        v182 = v276;
                        v276 = 0;
                        if (v182)
                        {
                          if (*(_DWORD *)v182 == 2)
                            WTF::StringImpl::destroy(v182, (WTF::StringImpl *)v149);
                          else
                            *(_DWORD *)v182 -= 2;
                        }
                        v183 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v183)
                        {
                          if (*(_DWORD *)v183 == 2)
                            WTF::StringImpl::destroy(v183, (WTF::StringImpl *)v149);
                          else
                            *(_DWORD *)v183 -= 2;
                        }
                        ++v162;
                      }
                      while (v162 != (uint64_t *)v255);
                    }
                    v184 = __ldxr(v151);
                    if (v184 == 1)
                    {
                      if (!__stlxr(0, v151))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v247 = v269;
            v269 = 0;
            if (v247)
            {
              if (*(_DWORD *)v247 == 2)
                WTF::StringImpl::destroy(v247, (WTF::StringImpl *)v149);
              else
                *(_DWORD *)v247 -= 2;
            }
          }
        }
        v186 = 1;
        v11 = 4;
        return v11 | (v186 << 8);
      }
      if (v131 >= *a6)
        v131 = *a6;
      *a6 = v131;
      if (!*(_BYTE *)(a4 + 80))
        goto LABEL_607;
      if (*(_BYTE *)(a4 + 24))
      {
        if (!*(_BYTE *)(a4 + 56))
        {
          v154 = *(double *)(a4 + 16);
          v155 = *((double *)v12 + 4);
          v156 = *((double *)v12 + 5);
          if (v154 > v155)
            v155 = *(double *)(a4 + 16);
          if (v154 < v155)
            v154 = v155;
          if (v154 < a1[29] && *(_BYTE *)(a4 + 72) == 0)
            v129 = a1[29];
          else
            v129 = v154;
          if (!*(_BYTE *)(a4 + 40))
            goto LABEL_332;
          goto LABEL_326;
        }
      }
      else if (*(_BYTE *)(a4 + 40))
      {
        if (!*(_BYTE *)(a4 + 56))
        {
          v155 = *((double *)v12 + 4);
          v156 = *((double *)v12 + 5);
LABEL_326:
          v158 = *(double *)(a4 + 32);
          if (v158 > v156)
            v159 = v156;
          else
            v159 = *(double *)(a4 + 32);
          if (v158 >= v156)
          {
            v129 = v159;
          }
          else
          {
            v156 = *(double *)(a4 + 32);
            v129 = v156;
          }
LABEL_332:
          if (*(_BYTE *)(a4 + 72))
          {
            if (*(double *)(a4 + 64) < v156)
              v156 = *(double *)(a4 + 64);
            if (v155 >= v156)
              v129 = v155;
            else
              v129 = v156;
          }
          goto LABEL_399;
        }
      }
      else if (!*(_BYTE *)(a4 + 56))
      {
        v127 = 0;
        goto LABEL_400;
      }
      v129 = *(double *)(a4 + 48);
LABEL_399:
      v127 = 1;
    }
  }
  else
  {
    v129 = 0.0;
  }
LABEL_400:
  v187 = 0;
  if (!*(_BYTE *)(a5 + 80) || !*((_BYTE *)v12 + 186))
    goto LABEL_540;
  v188 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 120))(a1);
  if (*(_BYTE *)(v188 + 186))
    v189 = WebCore::NumericConstraint<double>::fitnessDistance(a5, *(double *)(v188 + 152), *(double *)(v188 + 160));
  else
    v189 = 0.0;
  if (fabs(v189) == INFINITY)
  {
    v190 = *((_QWORD *)a1 + 5);
    if (v190)
    {
      v192 = *((double *)v12 + 19);
      v191 = *((double *)v12 + 20);
      v193 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 24))(a1);
      v194 = *((_QWORD *)a1 + 6);
      v257 = v193;
      v258 = v195;
      v259 = "hasInvalidSizeFrameRateAndZoomConstraints";
      v260 = v194;
      if (*(_BYTE *)(v190 + 12))
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v257);
        v196 = (WTF::String *)WTF::String::String((WTF::String *)&v267, "RealtimeMediaSource::supportsSizeFrameRateAndZoom failed zoom constraint, capabilities are [");
        WTF::String::number(v196, v192);
        v197 = (WTF::String *)WTF::String::String((WTF::String *)&v265, ", ");
        WTF::String::number(v197, v191);
        WTF::String::String((WTF::String *)&v263, "]");
        v261 = v267;
        v273 = v266;
        *(_QWORD *)&buf = v268;
        v271 = v264;
        v272 = v265;
        v270 = v263;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v261, (uint64_t *)&v273, (uint64_t *)&v272, (uint64_t *)&v271, (uint64_t *)&v270, &v269);
        if (!v269)
          goto LABEL_612;
        v199 = v263;
        v263 = 0;
        if (v199)
        {
          if (*(_DWORD *)v199 == 2)
            WTF::StringImpl::destroy(v199, v198);
          else
            *(_DWORD *)v199 -= 2;
        }
        v200 = v264;
        v264 = 0;
        if (v200)
        {
          if (*(_DWORD *)v200 == 2)
            WTF::StringImpl::destroy(v200, v198);
          else
            *(_DWORD *)v200 -= 2;
        }
        v201 = v265;
        v265 = 0;
        if (v201)
        {
          if (*(_DWORD *)v201 == 2)
            WTF::StringImpl::destroy(v201, v198);
          else
            *(_DWORD *)v201 -= 2;
        }
        v202 = v266;
        v266 = 0;
        if (v202)
        {
          if (*(_DWORD *)v202 == 2)
            WTF::StringImpl::destroy(v202, v198);
          else
            *(_DWORD *)v202 -= 2;
        }
        v203 = v267;
        v267 = 0;
        if (v203)
        {
          if (*(_DWORD *)v203 == 2)
            WTF::StringImpl::destroy(v203, v198);
          else
            *(_DWORD *)v203 -= 2;
        }
        v204 = v268;
        v268 = 0;
        if (v204)
        {
          if (*(_DWORD *)v204 == 2)
            WTF::StringImpl::destroy(v204, v198);
          else
            *(_DWORD *)v204 -= 2;
        }
        v205 = qword_1ECE7CD60;
        v206 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v206)
        {
          WTF::String::utf8();
          v208 = v261 ? (char *)v261 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v208;
          _os_log_impl(&dword_1940B8000, v205, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v206 = (uint64_t)v261;
          v261 = 0;
          if (v206)
          {
            if (*(_DWORD *)v206 == 1)
              v206 = WTF::fastFree((WTF *)v206, v207);
            else
              --*(_DWORD *)v206;
          }
        }
        if (WebCore::LogWebRTC && byte_1ECE7CD50)
        {
          v209 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v210 = *v209;
            if ((v210 & 1) != 0)
              break;
            v211 = __ldaxr(v209);
            if (v211 == v210)
            {
              if (!__stxr(v210 | 1, v209))
              {
                v218 = WTF::Logger::observers((WTF::Logger *)v206);
                v219 = *(unsigned int *)(v218 + 12);
                if ((_DWORD)v219)
                {
                  v220 = *(uint64_t **)v218;
                  v256 = *(_QWORD *)v218 + 8 * v219;
                  do
                  {
                    v221 = *v220;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v257);
                    LODWORD(v275) = 0;
                    v222 = (WTF::String *)WTF::String::String((WTF::String *)&v276, "RealtimeMediaSource::supportsSizeFrameRateAndZoom failed zoom constraint, capabilities are [");
                    LODWORD(v277) = 0;
                    WTF::String::number(v222, v192);
                    v279 = 0;
                    v223 = (WTF::String *)WTF::String::String((WTF::String *)&v280, ", ");
                    v281 = 0;
                    WTF::String::number(v223, v191);
                    v283 = 0;
                    WTF::String::String((WTF::String *)v284, "]");
                    v261 = 0;
                    v262 = 0;
                    v224 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                    LODWORD(v262) = 6;
                    v261 = v224;
                    v225 = HIDWORD(v262);
                    *((_DWORD *)v224 + 4 * HIDWORD(v262)) = buf;
                    v226 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v224 + 2 * v225 + 1) = v226;
                    *((_DWORD *)v224 + 4 * (v225 + 1)) = LODWORD(v275);
                    v227 = v276;
                    if (v276)
                      *(_DWORD *)v276 += 2;
                    *((_QWORD *)v224 + 2 * (v225 + 1) + 1) = v227;
                    *((_DWORD *)v224 + 4 * (v225 + 2)) = LODWORD(v277);
                    v228 = v278;
                    if (v278)
                      *(_DWORD *)v278 += 2;
                    *((_QWORD *)v224 + 2 * (v225 + 2) + 1) = v228;
                    *((_DWORD *)v224 + 4 * (v225 + 3)) = v279;
                    v229 = v280;
                    if (v280)
                      *(_DWORD *)v280 += 2;
                    *((_QWORD *)v224 + 2 * (v225 + 3) + 1) = v229;
                    *((_DWORD *)v224 + 4 * (v225 + 4)) = v281;
                    v230 = v282;
                    if (v282)
                      *(_DWORD *)v282 += 2;
                    *((_QWORD *)v224 + 2 * (v225 + 4) + 1) = v230;
                    *((_DWORD *)v224 + 4 * (v225 + 5)) = v283;
                    v231 = v284[0];
                    if (v284[0])
                      *(_DWORD *)v284[0] += 2;
                    *((_QWORD *)v224 + 2 * (v225 + 5) + 1) = v231;
                    HIDWORD(v262) = v225 + 6;
                    (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v221 + 16))(v221, &WebCore::LogWebRTC, 1, &v261);
                    v232 = v261;
                    if (HIDWORD(v262))
                    {
                      v233 = 16 * HIDWORD(v262);
                      v234 = (WTF::StringImpl **)((char *)v261 + 8);
                      do
                      {
                        v235 = *v234;
                        *v234 = 0;
                        if (v235)
                        {
                          if (*(_DWORD *)v235 == 2)
                            WTF::StringImpl::destroy(v235, (WTF::StringImpl *)v207);
                          else
                            *(_DWORD *)v235 -= 2;
                        }
                        v234 += 2;
                        v233 -= 16;
                      }
                      while (v233);
                      v232 = v261;
                    }
                    if (v232)
                    {
                      v261 = 0;
                      LODWORD(v262) = 0;
                      WTF::fastFree(v232, v207);
                    }
                    v236 = v284[0];
                    v284[0] = 0;
                    if (v236)
                    {
                      if (*(_DWORD *)v236 == 2)
                        WTF::StringImpl::destroy(v236, (WTF::StringImpl *)v207);
                      else
                        *(_DWORD *)v236 -= 2;
                    }
                    v237 = v282;
                    v282 = 0;
                    if (v237)
                    {
                      if (*(_DWORD *)v237 == 2)
                        WTF::StringImpl::destroy(v237, (WTF::StringImpl *)v207);
                      else
                        *(_DWORD *)v237 -= 2;
                    }
                    v238 = v280;
                    v280 = 0;
                    if (v238)
                    {
                      if (*(_DWORD *)v238 == 2)
                        WTF::StringImpl::destroy(v238, (WTF::StringImpl *)v207);
                      else
                        *(_DWORD *)v238 -= 2;
                    }
                    v239 = v278;
                    v278 = 0;
                    if (v239)
                    {
                      if (*(_DWORD *)v239 == 2)
                        WTF::StringImpl::destroy(v239, (WTF::StringImpl *)v207);
                      else
                        *(_DWORD *)v239 -= 2;
                    }
                    v240 = v276;
                    v276 = 0;
                    if (v240)
                    {
                      if (*(_DWORD *)v240 == 2)
                        WTF::StringImpl::destroy(v240, (WTF::StringImpl *)v207);
                      else
                        *(_DWORD *)v240 -= 2;
                    }
                    v241 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v241)
                    {
                      if (*(_DWORD *)v241 == 2)
                        WTF::StringImpl::destroy(v241, (WTF::StringImpl *)v207);
                      else
                        *(_DWORD *)v241 -= 2;
                    }
                    ++v220;
                  }
                  while (v220 != (uint64_t *)v256);
                }
                v242 = __ldxr(v209);
                if (v242 == 1)
                {
                  if (!__stlxr(0, v209))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v248 = v269;
        v269 = 0;
        if (v248)
        {
          if (*(_DWORD *)v248 == 2)
            WTF::StringImpl::destroy(v248, (WTF::StringImpl *)v207);
          else
            *(_DWORD *)v248 -= 2;
        }
      }
    }
    v186 = 1;
    v11 = 16;
    return v11 | (v186 << 8);
  }
  if (v189 >= *a6)
    v189 = *a6;
  *a6 = v189;
  if (!*(_BYTE *)(a5 + 80))
LABEL_607:
    __break(1u);
  if (*(_BYTE *)(a5 + 24))
  {
    if (!*(_BYTE *)(a5 + 56))
    {
      v212 = *(double *)(a5 + 16);
      v213 = *((double *)v12 + 19);
      v214 = *((double *)v12 + 20);
      if (v212 > v213)
        v213 = *(double *)(a5 + 16);
      if (v212 < v213)
        v212 = v213;
      if (v212 < a1[35] && *(_BYTE *)(a5 + 72) == 0)
        v128 = a1[35];
      else
        v128 = v212;
      if (!*(_BYTE *)(a5 + 40))
        goto LABEL_468;
      goto LABEL_462;
    }
    goto LABEL_538;
  }
  v187 = *(_BYTE *)(a5 + 56);
  if (*(_BYTE *)(a5 + 40))
  {
    if (!*(_BYTE *)(a5 + 56))
    {
      v213 = *((double *)v12 + 19);
      v214 = *((double *)v12 + 20);
LABEL_462:
      v216 = *(double *)(a5 + 32);
      if (v216 > v214)
        v217 = v214;
      else
        v217 = *(double *)(a5 + 32);
      if (v216 >= v214)
      {
        v128 = v217;
      }
      else
      {
        v214 = *(double *)(a5 + 32);
        v128 = v214;
      }
LABEL_468:
      if (*(_BYTE *)(a5 + 72))
      {
        if (*(double *)(a5 + 64) < v214)
          v214 = *(double *)(a5 + 64);
        if (v213 >= v214)
          v128 = v213;
        else
          v128 = v214;
      }
      goto LABEL_539;
    }
LABEL_538:
    v128 = *(double *)(a5 + 48);
LABEL_539:
    v187 = 1;
    goto LABEL_540;
  }
  if (*(_BYTE *)(a5 + 56))
    goto LABEL_538;
LABEL_540:
  LODWORD(buf) = v250 | BYTE4(v250);
  BYTE4(buf) = v251;
  DWORD2(buf) = v69 | v68;
  BYTE12(buf) = v67;
  v275 = v129;
  LOBYTE(v276) = v127;
  v277 = v128;
  LOBYTE(v278) = v187;
  LOBYTE(v279) = 0;
  v245 = (*(uint64_t (**)(double *, __int128 *))(*(_QWORD *)a1 + 344))(a1, &buf);
  v11 = 0;
  v186 = 0;
  if ((v245 & 1) == 0)
  {
    if (*(_BYTE *)(a4 + 80) && (*(_BYTE *)(a4 + 24) || *(_BYTE *)(a4 + 40) || *(_BYTE *)(a4 + 56)))
      goto LABEL_550;
    if (*(_BYTE *)(a5 + 80) && (*(_BYTE *)(a5 + 24) || *(_BYTE *)(a5 + 40) || *(_BYTE *)(a5 + 56)))
      goto LABEL_550;
    LODWORD(buf) = v250 | BYTE4(v250);
    BYTE4(buf) = v251;
    DWORD2(buf) = v69 | v68;
    BYTE12(buf) = v67;
    LOBYTE(v275) = 0;
    LOBYTE(v276) = 0;
    LOBYTE(v277) = 0;
    LOBYTE(v278) = 0;
    LOBYTE(v279) = 0;
    v246 = (*(uint64_t (**)(double *, __int128 *))(*(_QWORD *)a1 + 344))(a1, &buf);
    v11 = 0;
    v186 = 0;
    if ((v246 & 1) == 0)
    {
LABEL_550:
      if (!*(_BYTE *)(a2 + 48))
      {
        if (*(_BYTE *)(a3 + 48))
          v11 = 2;
        else
          v11 = 4;
        goto LABEL_552;
      }
LABEL_551:
      v11 = 1;
LABEL_552:
      v186 = 1;
    }
  }
  return v11 | (v186 << 8);
}

double WebCore::RealtimeMediaSource::fitnessDistance(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  _DWORD *v8;
  int v9;
  int v10;
  void *v12;
  WTF *v13;
  uint64_t v14;
  int *v15;
  int v16;
  double v17;
  uint64_t v18;
  int *v19;
  int v20;
  double v21;
  int v22;
  int v23;
  WTF *v24;
  int v25;
  unsigned int v26;
  char v27;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v7 = 0.0;
  v8 = (_DWORD *)v6;
  switch(a2)
  {
    case 1:
      if (!*(_BYTE *)(v6 + 171))
        return v7;
      v9 = *(_DWORD *)v6;
      v10 = *(_DWORD *)(v6 + 4);
      return WebCore::NumericConstraint<int>::fitnessDistance(a3, v9, v10);
    case 2:
      if (!*(_BYTE *)(v6 + 172))
        return v7;
      v9 = *(_DWORD *)(v6 + 8);
      v10 = *(_DWORD *)(v6 + 12);
      return WebCore::NumericConstraint<int>::fitnessDistance(a3, v9, v10);
    case 7:
      if (!*(_BYTE *)(v6 + 177))
        return v7;
      (*(void (**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)a1 + 104))(&v24, a1);
      if (!v27)
      {
        v22 = v8[20];
        v23 = v8[21];
        return WebCore::NumericConstraint<int>::fitnessDistance(a3, v22, v23);
      }
      v13 = v24;
      if (!v26)
        goto LABEL_24;
      v14 = 4 * v26;
      v7 = INFINITY;
      v15 = (int *)v24;
      do
      {
        v16 = *v15++;
        v17 = WebCore::NumericConstraint<int>::fitnessDistance(a3, v16, v16);
        if (v17 < v7)
          v7 = v17;
        v14 -= 4;
      }
      while (v14);
      goto LABEL_22;
    case 8:
      if (!*(_BYTE *)(v6 + 178))
        return v7;
      (*(void (**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v24, a1);
      if (v27)
      {
        v13 = v24;
        if (!v26)
        {
LABEL_24:
          v7 = INFINITY;
          if (!v13)
            return v7;
          goto LABEL_25;
        }
        v18 = 4 * v26;
        v7 = INFINITY;
        v19 = (int *)v24;
        do
        {
          v20 = *v19++;
          v21 = WebCore::NumericConstraint<int>::fitnessDistance(a3, v20, v20);
          if (v21 < v7)
            v7 = v21;
          v18 -= 4;
        }
        while (v18);
LABEL_22:
        if (v13)
        {
LABEL_25:
          v24 = 0;
          v25 = 0;
          WTF::fastFree(v13, v12);
        }
      }
      else
      {
        v22 = v8[22];
        v23 = v8[23];
        return WebCore::NumericConstraint<int>::fitnessDistance(a3, v22, v23);
      }
      return v7;
    default:
      return v7;
  }
}

{
  double *v5;
  double *v6;
  double *v7;

  v5 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (a2 > 5)
  {
    if (a2 == 6)
    {
      if (*((_BYTE *)v5 + 176))
      {
        v6 = v5 + 8;
        v7 = v5 + 9;
        return WebCore::NumericConstraint<double>::fitnessDistance(a3, *v6, *v7);
      }
    }
    else if (a2 == 16 && *((_BYTE *)v5 + 186))
    {
      v6 = v5 + 19;
      v7 = v5 + 20;
      return WebCore::NumericConstraint<double>::fitnessDistance(a3, *v6, *v7);
    }
  }
  else if (a2 == 3)
  {
    if (*((_BYTE *)v5 + 173))
    {
      v6 = v5 + 2;
      v7 = v5 + 3;
      return WebCore::NumericConstraint<double>::fitnessDistance(a3, *v6, *v7);
    }
  }
  else if (a2 == 4 && *((_BYTE *)v5 + 174))
  {
    v6 = v5 + 4;
    v7 = v5 + 5;
    return WebCore::NumericConstraint<double>::fitnessDistance(a3, *v6, *v7);
  }
  return 0.0;
}

double WebCore::RealtimeMediaSource::fitnessDistance(_BYTE *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  const WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t i;
  _DWORD *v39;
  const WTF::StringImpl **v40;
  const WTF::StringImpl **v41;
  uint64_t v42;
  double v43;
  unint64_t v44;
  int v45;
  const WTF::StringImpl **v46;
  uint64_t v47;
  double v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;

  v6 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 120))(a1);
  v9 = v6;
  v10 = 0.0;
  if (a2 <= 10)
  {
    if (a2 != 5)
    {
      if (a2 == 10)
      {
        if (a1[211])
          v11 = 104;
        else
          v11 = 96;
        if (*(_DWORD *)(a3 + 28))
        {
          v12 = 0;
          while ((WTF::equal(*(WTF **)(*(_QWORD *)(a3 + 16) + 8 * v12), *(const WTF::StringImpl **)&a1[v11], (const WTF::StringImpl *)v8) & 1) == 0)
          {
            if (++v12 >= (unint64_t)*(unsigned int *)(a3 + 28))
              return INFINITY;
          }
        }
        if (*(_DWORD *)(a3 + 44))
        {
          v35 = 0;
          do
          {
            v36 = WTF::equal(*(WTF **)(*(_QWORD *)(a3 + 32) + 8 * v35), *(const WTF::StringImpl **)&a1[v11], (const WTF::StringImpl *)v8);
            if ((v36 & 1) != 0)
              break;
            ++v35;
          }
          while (v35 < *(unsigned int *)(a3 + 44));
          return (double)(v36 ^ 1u);
        }
      }
      return v10;
    }
    if (!*(_BYTE *)(v6 + 175))
      return v10;
    v22 = *(unsigned int *)(v6 + 60);
    if (!(_DWORD)v22)
    {
      v14 = 0;
      LODWORD(v24) = 0;
LABEL_63:
      v28 = (_DWORD *)(a3 + 44);
      v29 = (_DWORD *)(a3 + 28);
      v10 = 0.0;
      if (!(*(_DWORD *)(a3 + 28) | *(_DWORD *)(a3 + 44)))
        goto LABEL_82;
      if ((_DWORD)v24)
      {
        v40 = (const WTF::StringImpl **)((char *)v14 + 8 * v24);
LABEL_67:
        v10 = INFINITY;
        v41 = (const WTF::StringImpl **)v14;
        do
        {
          if (*v29)
          {
            v42 = 0;
            while ((WTF::equal(*(WTF **)(*(_QWORD *)(a3 + 16) + 8 * v42), *v41, (const WTF::StringImpl *)v8) & 1) == 0)
            {
              if (++v42 >= (unint64_t)*v29)
              {
                v43 = INFINITY;
                goto LABEL_79;
              }
            }
          }
          if (*v28)
          {
            v44 = 0;
            do
            {
              v45 = WTF::equal(*(WTF **)(*(_QWORD *)(a3 + 32) + 8 * v44), *v41, (const WTF::StringImpl *)v8);
              if ((v45 & 1) != 0)
                break;
              ++v44;
            }
            while (v44 < *v28);
            v43 = (double)(v45 ^ 1u);
          }
          else
          {
            v43 = 0.0;
          }
LABEL_79:
          if (v43 < v10)
            v10 = v43;
          ++v41;
        }
        while (v41 != v40);
LABEL_82:
        if ((_DWORD)v24)
        {
LABEL_36:
          v30 = 0;
          do
          {
            v31 = *(WTF::StringImpl **)((char *)v14 + v30);
            *(_QWORD *)((char *)v14 + v30) = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v7);
              else
                *(_DWORD *)v31 -= 2;
            }
            v30 += 8;
          }
          while (8 * v24 != v30);
        }
LABEL_112:
        if (v14)
          WTF::fastFree(v14, v7);
        return v10;
      }
LABEL_111:
      v10 = INFINITY;
      goto LABEL_112;
    }
    if (!(v22 >> 29))
    {
      v23 = (WTF *)WTF::fastMalloc((WTF *)(8 * v22));
      v14 = v23;
      v24 = *(unsigned int *)(v9 + 60);
      if ((_DWORD)v24)
      {
        v25 = *(unsigned __int8 **)(v9 + 48);
        v26 = *v25;
        {
          WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_0::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_1::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_2::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_3::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_0::operator() const(void)::impl;
          unk_1EE2F8DC0 = &WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_1::operator() const(void)::impl;
          qword_1EE2F8DC8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_2::operator() const(void)::impl;
          unk_1EE2F8DD0 = &WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_3::operator() const(void)::impl;
          WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_4::operator() const(void)::impl += 2;
          qword_1EE2F8DD8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_4::operator() const(void)::impl;
        }
        v27 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::values[v26];
        if (v27)
          *v27 += 2;
        *(_QWORD *)v23 = v27;
        if ((_DWORD)v24 == 1)
        {
          v28 = (_DWORD *)(a3 + 44);
          v29 = (_DWORD *)(a3 + 28);
          if (!(*(_DWORD *)(a3 + 28) | *(_DWORD *)(a3 + 44)))
          {
            LODWORD(v24) = 1;
            goto LABEL_36;
          }
          v40 = (const WTF::StringImpl **)((char *)v23 + 8);
          LODWORD(v24) = 1;
          goto LABEL_67;
        }
        for (i = 1; i != v24; ++i)
        {
          v39 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::values[v25[i]];
          if (v39)
            *v39 += 2;
          *((_QWORD *)v23 + i) = v39;
        }
      }
      goto LABEL_63;
    }
LABEL_116:
    __break(0xC471u);
    JUMPOUT(0x196295B40);
  }
  if (a2 != 11)
  {
    if (a2 != 15 || !*(_BYTE *)(v6 + 185))
      return v10;
    v13 = *(unsigned int *)(v6 + 148);
    if ((_DWORD)v13)
    {
      if (v13 >> 29)
        goto LABEL_116;
      v14 = (WTF *)WTF::fastMalloc((WTF *)(8 * v13));
      v15 = *(unsigned int *)(v9 + 148);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v18 = *(_QWORD *)(v9 + 136);
        v7 = (WTF::StringImpl *)&WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_1::operator() const(void)::impl;
        v8 = 1;
        do
        {
          v19 = *(unsigned __int8 *)(v18 + v16);
          if ((v17 & 1) == 0)
          {
            WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_0::operator() const(void)::impl += 2;
            WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_1::operator() const(void)::impl += 2;
            WebCore::convertEnumerationToString(WebCore::MeteringMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_0::operator() const(void)::impl;
            *(_QWORD *)algn_1EE2F4898 = &WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_1::operator() const(void)::impl;
            WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_2::operator() const(void)::impl += 2;
            WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_3::operator() const(void)::impl += 2;
            qword_1EE2F48A0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_2::operator() const(void)::impl;
            unk_1EE2F48A8 = &WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_3::operator() const(void)::impl;
          }
          v20 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::MeteringMode)::values[v19];
          if (v20)
            *v20 += 2;
          v21 = v16 + 1;
          *((_QWORD *)v14 + v16) = v20;
          v17 = 1;
          v16 = v21;
        }
        while (v21 < v15);
LABEL_86:
        v10 = 0.0;
        if (*(_DWORD *)(a3 + 28) | *(_DWORD *)(a3 + 44))
        {
          if (!(_DWORD)v21)
            goto LABEL_111;
          v10 = INFINITY;
          v46 = (const WTF::StringImpl **)v14;
          do
          {
            if (*(_DWORD *)(a3 + 28))
            {
              v47 = 0;
              while ((WTF::equal(*(WTF **)(*(_QWORD *)(a3 + 16) + 8 * v47), *v46, (const WTF::StringImpl *)v8) & 1) == 0)
              {
                if (++v47 >= (unint64_t)*(unsigned int *)(a3 + 28))
                {
                  v48 = INFINITY;
                  goto LABEL_100;
                }
              }
            }
            if (*(_DWORD *)(a3 + 44))
            {
              v49 = 0;
              do
              {
                v50 = WTF::equal(*(WTF **)(*(_QWORD *)(a3 + 32) + 8 * v49), *v46, (const WTF::StringImpl *)v8);
                if ((v50 & 1) != 0)
                  break;
                ++v49;
              }
              while (v49 < *(unsigned int *)(a3 + 44));
              v48 = (double)(v50 ^ 1u);
            }
            else
            {
              v48 = 0.0;
            }
LABEL_100:
            if (v48 < v10)
              v10 = v48;
            ++v46;
          }
          while (v46 != (const WTF::StringImpl **)((char *)v14 + 8 * v21));
        }
        if ((_DWORD)v21)
        {
          v51 = 8 * v21;
          v52 = (WTF::StringImpl **)v14;
          do
          {
            v53 = *v52;
            *v52 = 0;
            if (v53)
            {
              if (*(_DWORD *)v53 == 2)
                WTF::StringImpl::destroy(v53, v7);
              else
                *(_DWORD *)v53 -= 2;
            }
            ++v52;
            v51 -= 8;
          }
          while (v51);
        }
        goto LABEL_112;
      }
    }
    else
    {
      v14 = 0;
    }
    LODWORD(v21) = 0;
    goto LABEL_86;
  }
  if (*(_BYTE *)(v6 + 180))
  {
    v33 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 128))(a1);
    if (*(_DWORD *)(a3 + 28))
    {
      v34 = 0;
      while ((WTF::equal(*(WTF **)(*(_QWORD *)(a3 + 16) + 8 * v34), *(const WTF::StringImpl **)(v33 + 48), v32) & 1) == 0)
      {
        if (++v34 >= (unint64_t)*(unsigned int *)(a3 + 28))
          return INFINITY;
      }
    }
    if (*(_DWORD *)(a3 + 44))
    {
      v37 = 0;
      do
      {
        v36 = WTF::equal(*(WTF **)(*(_QWORD *)(a3 + 32) + 8 * v37), *(const WTF::StringImpl **)(v33 + 48), v32);
        if ((v36 & 1) != 0)
          break;
        ++v37;
      }
      while (v37 < *(unsigned int *)(a3 + 44));
      return (double)(v36 ^ 1u);
    }
  }
  return v10;
}

uint64_t WebCore::RealtimeMediaSource::hashedId(WebCore::RealtimeMediaSource *this)
{
  if (*((_BYTE *)this + 211))
    return (uint64_t)this + 104;
  else
    return (uint64_t)this + 96;
}

double WebCore::RealtimeMediaSource::fitnessDistance(uint64_t a1, int a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  double result;
  int v7;
  BOOL v8;

  v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  result = 0.0;
  if (a2 == 17)
  {
    if (v5[187])
      v8 = a3[10] == 0;
    else
      v8 = 0;
    if (!v8 || a3[12] == 0)
      return result;
    v7 = v5[168];
LABEL_16:
    result = 1.0;
    if (a3[11] == v7)
      return 0.0;
    return result;
  }
  if (a2 == 9 && v5[179])
  {
    v7 = v5[96];
    if (a3[10] && a3[9] != v7)
      return INFINITY;
    if (a3[12])
      goto LABEL_16;
  }
  return result;
}

double WebCore::RealtimeMediaSource::fitnessDistance(_BYTE *a1, int a2, _BYTE *a3)
{
  double v3;
  double *v7;
  double *v8;
  double *v9;
  unsigned __int8 *v10;
  int v11;
  BOOL v12;

  v3 = 0.0;
  switch(a3[8])
  {
    case 0:
      return WebCore::RealtimeMediaSource::fitnessDistance((uint64_t)a1, a2, (uint64_t)a3);
    case 1:
      v7 = (double *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 120))(a1);
      if (a2 > 5)
      {
        if (a2 == 6)
        {
          if (!*((_BYTE *)v7 + 176))
            return v3;
          v8 = v7 + 8;
          v9 = v7 + 9;
        }
        else
        {
          if (a2 != 16 || !*((_BYTE *)v7 + 186))
            return v3;
          v8 = v7 + 19;
          v9 = v7 + 20;
        }
      }
      else if (a2 == 3)
      {
        if (!*((_BYTE *)v7 + 173))
          return v3;
        v8 = v7 + 2;
        v9 = v7 + 3;
      }
      else
      {
        if (a2 != 4 || !*((_BYTE *)v7 + 174))
          return v3;
        v8 = v7 + 4;
        v9 = v7 + 5;
      }
      return WebCore::NumericConstraint<double>::fitnessDistance((uint64_t)a3, *v8, *v9);
    case 2:
      v10 = (unsigned __int8 *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 120))(a1);
      if (a2 == 17)
      {
        if (v10[187])
          v12 = a3[10] == 0;
        else
          v12 = 0;
        if (v12 && a3[12] != 0)
        {
          v11 = v10[168];
LABEL_28:
          if (a3[11] == v11)
            return 0.0;
          else
            return 1.0;
        }
      }
      else if (a2 == 9 && v10[179])
      {
        v11 = v10[96];
        if (a3[10] && a3[9] != v11)
          return INFINITY;
        if (!a3[12])
          return v3;
        goto LABEL_28;
      }
      return v3;
    case 3:
      return WebCore::RealtimeMediaSource::fitnessDistance(a1, a2, (uint64_t)a3);
    default:
      return v3;
  }
}

uint64_t WebCore::RealtimeMediaSource::setSizeFrameRateAndZoom(uint64_t result, int *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  double v26;

  v3 = result;
  v21 = 0;
  v4 = *((unsigned __int8 *)a2 + 4);
  if (*((_BYTE *)a2 + 4))
  {
    v4 = *a2;
    LODWORD(v21) = *a2;
  }
  v5 = *((unsigned __int8 *)a2 + 12);
  if (*((_BYTE *)a2 + 12))
  {
    v5 = a2[2];
    HIDWORD(v21) = v5;
  }
  if (v4 != *(_DWORD *)(result + 216) || v5 != *(_DWORD *)(result + 220))
  {
    v7 = *(_QWORD *)(result + 40);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      v9 = *(_QWORD *)(v3 + 48);
      v22 = v8;
      v23 = v10;
      v24 = "setSize";
      v25 = v9;
      if (*(_BYTE *)(v7 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v22, (WebCore::IntSize *)&v21);
    }
    *(_QWORD *)(v3 + 216) = v21;
    result = WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v3, 3u);
  }
  if (*((_BYTE *)a2 + 24))
  {
    v11 = *((double *)a2 + 2);
    v26 = v11;
    if (*(double *)(v3 + 232) != v11)
    {
      v12 = *(_QWORD *)(v3 + 40);
      if (v12)
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
        v14 = *(_QWORD *)(v3 + 48);
        v22 = v13;
        v23 = v15;
        v24 = "setFrameRate";
        v25 = v14;
        if (*(_BYTE *)(v12 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v22, &v26);
          v11 = v26;
        }
      }
      *(double *)(v3 + 232) = v11;
      result = WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v3, 4u);
    }
  }
  if (*((_BYTE *)a2 + 40))
  {
    v16 = *((double *)a2 + 4);
    v26 = v16;
    if (*(double *)(v3 + 280) != v16)
    {
      v17 = *(_QWORD *)(v3 + 40);
      if (v17)
      {
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
        v19 = *(_QWORD *)(v3 + 48);
        v22 = v18;
        v23 = v20;
        v24 = "setZoom";
        v25 = v19;
        if (*(_BYTE *)(v17 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v22, &v26);
          v16 = v26;
        }
      }
      *(double *)(v3 + 280) = v16;
      return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v3, 0x4000u);
    }
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::setSize(uint64_t this, const WebCore::IntSize *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (*(_DWORD *)a2 != *(_DWORD *)(this + 216) || *((_DWORD *)a2 + 1) != *(_DWORD *)(this + 220))
  {
    v4 = this;
    v5 = *(_QWORD *)(this + 40);
    if (v5)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
      v7 = *(_QWORD *)(v4 + 48);
      v9[0] = v6;
      v9[1] = v8;
      v9[2] = "setSize";
      v9[3] = v7;
      if (*(_BYTE *)(v5 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v9, a2);
    }
    *(_QWORD *)(v4 + 216) = *(_QWORD *)a2;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v4, 3u);
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::setFrameRate(uint64_t this, double a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  double v9;

  v2 = a2;
  v9 = a2;
  if (*(double *)(this + 232) != a2)
  {
    v3 = this;
    v4 = *(_QWORD *)(this + 40);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
      v6 = *(_QWORD *)(v3 + 48);
      v8[0] = v5;
      v8[1] = v7;
      v8[2] = "setFrameRate";
      v8[3] = v6;
      if (*(_BYTE *)(v4 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v8, &v9);
        v2 = v9;
      }
    }
    *(double *)(v3 + 232) = v2;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v3, 4u);
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::setZoom(uint64_t this, double a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  double v9;

  v2 = a2;
  v9 = a2;
  if (*(double *)(this + 280) != a2)
  {
    v3 = this;
    v4 = *(_QWORD *)(this + 40);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
      v6 = *(_QWORD *)(v3 + 48);
      v8[0] = v5;
      v8[1] = v7;
      v8[2] = "setZoom";
      v8[3] = v6;
      if (*(_BYTE *)(v4 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v8, &v9);
        v2 = v9;
      }
    }
    *(double *)(v3 + 280) = v2;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v3, 0x4000u);
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::applyConstraint(uint64_t a1, WTF::String *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t result;
  uint64_t v43;
  size_t v44;
  void *v45;
  size_t v46;
  void *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _BYTE *v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  int *p_buf;
  int v60;
  double v61;
  int v62;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl **v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  double v90;
  double v91;
  BOOL v92;
  double v93;
  double v94;
  BOOL v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  BOOL v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  int v112;
  unint64_t v113;
  int v114;
  unsigned int v115;
  double v116;
  double v117;
  int v118;
  int v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  int v139;
  int v140;
  double v141;
  double v142;
  BOOL v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  int *v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  int v163;
  unsigned int v164;
  char v165;
  double v166[4];
  WTF::Logger *v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  __int128 buf;
  const char *v173;
  WTF::StringImpl *v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v8 = *(double *)(a1 + 48);
    *(_QWORD *)&v166[0] = v7;
    v166[1] = v9;
    *(_QWORD *)&v166[2] = "applyConstraint";
    v166[3] = v8;
    if (*(_BYTE *)(v6 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v166);
      WTF::String::number(a2);
      if (v170)
      {
        v10 = *((_DWORD *)v170 + 1);
        if (v169)
        {
LABEL_5:
          v11 = *((_DWORD *)v169 + 1);
LABEL_6:
          if ((v11 | v10) < 0 || (v12 = (v10 + v11), __OFADD__(v10, v11)))
          {
            v171 = 0;
            goto LABEL_355;
          }
          if (v170)
          {
            v13 = *((_DWORD *)v170 + 4);
            v14 = (v13 >> 2) & 1;
            if (v169 && (v13 & 4) != 0)
              goto LABEL_11;
          }
          else
          {
            if (v169)
            {
LABEL_11:
              v14 = (*((unsigned __int8 *)v169 + 16) >> 2) & 1;
              goto LABEL_12;
            }
            v14 = 1;
          }
LABEL_12:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v12, v14, (uint64_t)v170, (uint64_t)v169, &v171);
          if (v171)
          {
            v16 = v169;
            v169 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v15);
              else
                *(_DWORD *)v16 -= 2;
            }
            v17 = v170;
            v170 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v15);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = qword_1ECE7CD60;
            v19 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v19)
            {
              WTF::String::utf8();
              v21 = v167 ? (char *)v167 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v21;
              _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v19 = (uint64_t)v167;
              v167 = 0;
              if (v19)
              {
                if (*(_DWORD *)v19 == 1)
                  v19 = WTF::fastFree((WTF *)v19, v20);
                else
                  --*(_DWORD *)v19;
              }
            }
            if (WebCore::LogWebRTC)
            {
              v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v23 = *v22;
                if ((v23 & 1) != 0)
                  break;
                v24 = __ldaxr(v22);
                if (v24 == v23)
                {
                  if (!__stxr(v23 | 1, v22))
                  {
                    v161 = a3;
                    v25 = WTF::Logger::observers((WTF::Logger *)v19);
                    v26 = *(unsigned int *)(v25 + 12);
                    if ((_DWORD)v26)
                    {
                      v27 = *(uint64_t **)v25;
                      v28 = *(_QWORD *)v25 + 8 * v26;
                      do
                      {
                        v29 = *v27;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v166);
                        LODWORD(v173) = 0;
                        WTF::String::number(a2);
                        v167 = 0;
                        v168 = 0;
                        v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                        LODWORD(v168) = 2;
                        v167 = v30;
                        v31 = HIDWORD(v168);
                        *((_DWORD *)v30 + 4 * HIDWORD(v168)) = buf;
                        v32 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                        *((_DWORD *)v30 + 4 * (v31 + 1)) = (_DWORD)v173;
                        v33 = v174;
                        if (v174)
                          *(_DWORD *)v174 += 2;
                        *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                        HIDWORD(v168) = v31 + 2;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, &WebCore::LogWebRTC, 0, &v167);
                        v34 = v167;
                        if (HIDWORD(v168))
                        {
                          v35 = 16 * HIDWORD(v168);
                          v36 = (WTF::StringImpl **)((char *)v167 + 8);
                          do
                          {
                            v37 = *v36;
                            *v36 = 0;
                            if (v37)
                            {
                              if (*(_DWORD *)v37 == 2)
                                WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v20);
                              else
                                *(_DWORD *)v37 -= 2;
                            }
                            v36 += 2;
                            v35 -= 16;
                          }
                          while (v35);
                          v34 = v167;
                        }
                        if (v34)
                        {
                          v167 = 0;
                          LODWORD(v168) = 0;
                          WTF::fastFree(v34, v20);
                        }
                        v38 = v174;
                        v174 = 0;
                        if (v38)
                        {
                          if (*(_DWORD *)v38 == 2)
                            WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v20);
                          else
                            *(_DWORD *)v38 -= 2;
                        }
                        v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v39)
                        {
                          if (*(_DWORD *)v39 == 2)
                            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v20);
                          else
                            *(_DWORD *)v39 -= 2;
                        }
                        ++v27;
                      }
                      while (v27 != (uint64_t *)v28);
                    }
                    v40 = __ldxr(v22);
                    if (v40 == 1)
                    {
                      a3 = v161;
                      if (!__stlxr(0, v22))
                        break;
                    }
                    else
                    {
                      __clrex();
                      a3 = v161;
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v41 = v171;
            v171 = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v20);
              else
                *(_DWORD *)v41 -= 2;
            }
            goto LABEL_67;
          }
LABEL_355:
          __break(0xC471u);
          JUMPOUT(0x19629720CLL);
        }
      }
      else
      {
        v10 = 0;
        if (v169)
          goto LABEL_5;
      }
      v11 = 0;
      goto LABEL_6;
    }
  }
LABEL_67:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v43 = result;
  switch((int)a2)
  {
    case 5:
      if (!*(_BYTE *)(result + 175))
        return result;
      v44 = *(unsigned int *)(result + 60);
      if ((_DWORD)v44)
      {
        v45 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(result + 60));
        memcpy(v45, *(const void **)(v43 + 48), *(unsigned int *)(v43 + 60));
      }
      else
      {
        v45 = 0;
      }
      if (*(_BYTE *)(a3 + 8) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1962971E8);
      }
      v65 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)(v65 + 8) = 0;
      *(_QWORD *)(v65 + 16) = 0;
      *(_QWORD *)v65 = &off_1E3419470;
      *(_DWORD *)(v65 + 20) = v44;
      if ((_DWORD)v44)
      {
        v66 = (void *)WTF::fastMalloc((WTF *)v44);
        *(_DWORD *)(v65 + 16) = v44;
        *(_QWORD *)(v65 + 8) = v66;
        memcpy(v66, v45, v44);
      }
      v67 = *(unsigned int *)(a3 + 28);
      if (!(_DWORD)v67)
        goto LABEL_111;
      v68 = *(WTF::StringImpl ***)(a3 + 16);
      v69 = 8 * v67;
      while (((*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v65 + 16))(v65, v68) & 1) == 0)
      {
        ++v68;
        v69 -= 8;
        if (!v69)
        {
LABEL_111:
          v70 = *(unsigned int *)(a3 + 44);
          if ((_DWORD)v70)
          {
            v68 = *(WTF::StringImpl ***)(a3 + 32);
            v71 = 8 * v70;
            v72 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
            while (((*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v65 + 16))(v65, v68) & 1) == 0)
            {
              ++v68;
              v71 -= 8;
              if (!v71)
              {
                v68 = v72;
                goto LABEL_183;
              }
            }
          }
          else
          {
            v68 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
          }
          break;
        }
      }
LABEL_183:
      v111 = *v68;
      if (*v68)
      {
        *(_DWORD *)v111 += 2;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
        if (*((_DWORD *)v111 + 1))
        {
          result = MEMORY[0x19AEA53F4](v111, "user", 4);
          if ((result & 1) != 0)
          {
            v112 = 1;
          }
          else
          {
            result = MEMORY[0x19AEA53F4](v111, "environment", 11);
            if ((result & 1) != 0)
            {
              v112 = 2;
            }
            else
            {
              result = MEMORY[0x19AEA53F4](v111, "left", 4);
              if ((result & 1) != 0)
              {
                v112 = 3;
              }
              else
              {
                result = MEMORY[0x19AEA53F4](v111, "right", 5);
                v112 = (_DWORD)result ? 4 : 0;
              }
            }
          }
          LOBYTE(v166[0]) = v112;
          if (*(unsigned __int8 *)(a1 + 272) != v112)
          {
            v135 = *(_QWORD *)(a1 + 40);
            if (v135)
            {
              v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
              v137 = *(WTF::StringImpl **)(a1 + 48);
              *(_QWORD *)&buf = v136;
              *((_QWORD *)&buf + 1) = v138;
              v173 = "setFacingMode";
              v174 = v137;
              if (*(_BYTE *)(v135 + 12))
              {
                WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::VideoFacingMode>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, (unsigned __int8 *)v166);
                LOBYTE(v112) = LOBYTE(v166[0]);
              }
            }
            *(_BYTE *)(a1 + 272) = v112;
            result = WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(a1, 8u);
          }
        }
        if (*(_DWORD *)v111 == 2)
          result = WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v56);
        else
          *(_DWORD *)v111 -= 2;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
      }
      if (!v45)
        return result;
      result = (uint64_t)v45;
      return WTF::fastFree((WTF *)result, (void *)v56);
    case 6:
      if (!*(_BYTE *)(result + 176))
        return result;
      if (*(_BYTE *)(a3 + 8) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x196297128);
      }
      v48 = *(double *)(a1 + 240);
      if (*(_BYTE *)(a3 + 56))
      {
        v49 = *(double *)(a3 + 48);
      }
      else
      {
        v90 = *(double *)(result + 64);
        if (*(_BYTE *)(a3 + 24))
        {
          v91 = *(double *)(a3 + 16);
          if (v91 > v90)
            v90 = *(double *)(a3 + 16);
          if (v91 < v90)
            v91 = v90;
          v92 = v91 < v48 && *(_BYTE *)(a3 + 72) == 0;
          v49 = v92 ? *(double *)(a1 + 240) : v91;
        }
        else
        {
          v49 = 0.0;
        }
        v116 = *(double *)(result + 72);
        if (*(_BYTE *)(a3 + 40))
        {
          v49 = *(double *)(a3 + 32);
          if (v49 >= v116)
          {
            if (v49 > v116)
              v49 = *(double *)(result + 72);
          }
          else
          {
            v116 = *(double *)(a3 + 32);
          }
        }
        if (*(_BYTE *)(a3 + 72))
        {
          if (*(double *)(a3 + 64) < v116)
            v116 = *(double *)(a3 + 64);
          if (v90 >= v116)
            v49 = v90;
          else
            v49 = v116;
        }
      }
      if (v49 == v48)
        return result;
      v166[0] = v49;
      v126 = *(_QWORD *)(a1 + 40);
      if (v126)
      {
        v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v128 = *(WTF::StringImpl **)(a1 + 48);
        *(_QWORD *)&buf = v127;
        *((_QWORD *)&buf + 1) = v129;
        v173 = "setVolume";
        v174 = v128;
        if (*(_BYTE *)(v126 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, v166);
          v49 = v166[0];
        }
      }
      *(double *)(a1 + 240) = v49;
      v88 = a1;
      v89 = 16;
      return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v88, v89);
    case 7:
      if (!*(_BYTE *)(result + 177))
        return result;
      if (*(_BYTE *)(a3 + 8))
      {
        __break(0xC471u);
        JUMPOUT(0x196297188);
      }
      v53 = *(_DWORD *)(result + 80);
      v54 = *(_DWORD *)(result + 84);
      v55 = (int)*(double *)(a1 + 248);
      result = (uint64_t)(*(_QWORD *(**)(unsigned int **__return_ptr, uint64_t))(*(_QWORD *)a1 + 104))(&v162, a1);
      if (v165)
      {
        v57 = v162;
        v58 = v164;
        LOBYTE(buf) = 0;
        if (*(_BYTE *)(a3 + 32))
        {
          p_buf = (int *)(a3 + 28);
          v60 = 1;
LABEL_334:
          if (!v60)
            goto LABEL_342;
          v156 = *p_buf;
          if (v156 == v55)
            goto LABEL_342;
          LODWORD(v166[0]) = v156;
          v141 = *(double *)(a1 + 248);
          v142 = (double)v156;
          goto LABEL_337;
        }
        v60 = *(unsigned __int8 *)(a3 + 16);
        if (*(_BYTE *)(a3 + 16))
        {
          if (!v164)
          {
            if (!*(_BYTE *)(a3 + 24))
              goto LABEL_342;
            goto LABEL_356;
          }
          v113 = 0;
          while (1)
          {
            v114 = v162[v113];
            if (*(_DWORD *)(a3 + 12) >= v114)
              break;
            if (v164 == ++v113)
            {
              v115 = 0;
              v114 = 0;
              v60 = 0;
              goto LABEL_267;
            }
          }
          if (v113 >= v164)
          {
            __break(0xC471u);
            JUMPOUT(0x19629721CLL);
          }
          v134 = 0;
          v115 = v114 & 0xFFFFFF00;
          if (*(_BYTE *)(a3 + 40))
            v143 = 0;
          else
            v143 = v114 < v55;
          if (v143)
            v144 = v55;
          else
            v144 = v162[v113];
          LODWORD(buf) = v144;
          v114 = v114;
          v60 = 1;
        }
        else
        {
          v115 = 0;
          v114 = 0;
LABEL_267:
          v134 = 1;
        }
        v145 = *(unsigned __int8 *)(a3 + 24);
        if (!*(_BYTE *)(a3 + 24))
        {
          v147 = 0;
          v148 = 0;
LABEL_318:
          if (*(_BYTE *)(a3 + 40) && v164)
          {
            v153 = *(_DWORD *)(a3 + 36);
            while (1)
            {
              v154 = *v57++;
              result = v154;
              if (v154 == v153)
                break;
              if (!--v58)
                goto LABEL_333;
            }
            v155 = v148 | v147;
            if (v153 < (int)(v148 | v147))
              v155 = *(_DWORD *)(a3 + 36);
            if (!v145)
              v155 = *(_DWORD *)(a3 + 36);
            LODWORD(buf) = v155;
            if ((v134 & 1) == 0)
            {
              if ((int)(v114 | v115) > v155)
                v155 = v114 | v115;
              LODWORD(buf) = v155;
            }
            v60 = 1;
          }
LABEL_333:
          p_buf = (int *)&buf;
          goto LABEL_334;
        }
        if (v164)
        {
          v146 = *(_DWORD *)(a3 + 20);
          if (v146 >= (int)*v162)
          {
            v145 = 0;
            v148 = 0;
            v149 = buf;
            result = 4 * v164;
            v56 = 1;
            v150 = (int *)v162;
            do
            {
              v152 = *v150++;
              v151 = v152;
              if (v146 <= v152)
              {
                v148 = v151;
                v149 = v151;
                v145 = 1;
                v60 = 1;
              }
              result -= 4;
            }
            while (result);
            LODWORD(buf) = v149;
            v147 = v148 & 0xFFFFFF00;
            v148 = v148;
          }
          else
          {
            v147 = 0;
            v148 = 0;
            v145 = 0;
          }
          goto LABEL_318;
        }
LABEL_356:
        __break(0xC471u);
        JUMPOUT(0x196297214);
      }
      if (*(_BYTE *)(a3 + 32))
      {
        v101 = *(_DWORD *)(a3 + 28);
      }
      else
      {
        if (*(_BYTE *)(a3 + 16))
        {
          if (*(_DWORD *)(a3 + 12) > v53)
            v53 = *(_DWORD *)(a3 + 12);
          v118 = *(unsigned __int8 *)(a3 + 40);
          if (v53 < v55 && v118 == 0)
            v101 = v55;
          else
            v101 = v53;
        }
        else
        {
          v101 = 0;
          v118 = *(unsigned __int8 *)(a3 + 40);
        }
        v139 = *(_DWORD *)(a3 + 20);
        if (v139 >= v54)
          v139 = v54;
        if (*(_BYTE *)(a3 + 24))
          v101 = v139;
        if (v118)
        {
          if (*(_BYTE *)(a3 + 24))
            v140 = v139;
          else
            v140 = v54;
          if (*(_DWORD *)(a3 + 36) < v140)
            v140 = *(_DWORD *)(a3 + 36);
          if (v53 <= v140)
            v101 = v140;
          else
            v101 = v53;
        }
      }
      if (v101 != v55)
      {
        LODWORD(v166[0]) = v101;
        v141 = *(double *)(a1 + 248);
        v142 = (double)v101;
LABEL_337:
        if (v141 != v142)
        {
          v157 = *(_QWORD *)(a1 + 40);
          if (v157)
          {
            v158 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
            v159 = *(WTF::StringImpl **)(a1 + 48);
            *(_QWORD *)&buf = v158;
            *((_QWORD *)&buf + 1) = v160;
            v173 = "setSampleRate";
            v174 = v159;
            if (*(_BYTE *)(v157 + 12))
            {
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,int>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, (unsigned int *)v166);
              v142 = (double)SLODWORD(v166[0]);
            }
          }
          *(double *)(a1 + 248) = v142;
          result = WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(a1, 0x20u);
        }
      }
LABEL_342:
      if (v165)
      {
        result = (uint64_t)v162;
        if (v162)
        {
          v162 = 0;
          v163 = 0;
          return WTF::fastFree((WTF *)result, (void *)v56);
        }
      }
      return result;
    case 8:
      if (!*(_BYTE *)(result + 178))
        return result;
      if (*(_BYTE *)(a3 + 8))
      {
        __break(0xC471u);
        JUMPOUT(0x1962971A8);
      }
      v61 = *(double *)(a1 + 256);
      v62 = (int)v61;
      if (*(_BYTE *)(a3 + 32))
      {
        v63 = *(_DWORD *)(a3 + 28);
      }
      else
      {
        v102 = *(_DWORD *)(result + 88);
        v103 = *(_DWORD *)(result + 92);
        if (*(_BYTE *)(a3 + 16))
        {
          if (*(_DWORD *)(a3 + 12) > v102)
            v102 = *(_DWORD *)(a3 + 12);
          v104 = *(unsigned __int8 *)(a3 + 40);
          v105 = v102 < v62 && v104 == 0;
          v63 = v105 ? (int)v61 : v102;
        }
        else
        {
          v63 = 0;
          v104 = *(unsigned __int8 *)(a3 + 40);
        }
        v120 = *(_DWORD *)(a3 + 20);
        if (v120 >= v103)
          v120 = *(_DWORD *)(result + 92);
        if (*(_BYTE *)(a3 + 24))
          v63 = v120;
        if (v104)
        {
          if (*(_BYTE *)(a3 + 24))
            v103 = v120;
          if (*(_DWORD *)(a3 + 36) < v103)
            v103 = *(_DWORD *)(a3 + 36);
          if (v102 <= v103)
            v63 = v103;
          else
            v63 = v102;
        }
      }
      if (v63 == v62)
        return result;
      LODWORD(v166[0]) = v63;
      v121 = (double)v63;
      if (v61 == (double)v63)
        return result;
      v122 = *(_QWORD *)(a1 + 40);
      if (v122)
      {
        v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v124 = *(WTF::StringImpl **)(a1 + 48);
        *(_QWORD *)&buf = v123;
        *((_QWORD *)&buf + 1) = v125;
        v173 = "setSampleSize";
        v174 = v124;
        if (*(_BYTE *)(v122 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,int>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, (unsigned int *)v166);
          v121 = (double)SLODWORD(v166[0]);
        }
      }
      *(double *)(a1 + 256) = v121;
      v88 = a1;
      v89 = 64;
      return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v88, v89);
    case 9:
      if (!*(_BYTE *)(result + 179))
        return result;
      if (*(_BYTE *)(a3 + 8) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1962971C8);
      }
      if (*(_BYTE *)(a3 + 10))
      {
        v64 = (_BYTE *)(a3 + 9);
      }
      else
      {
        if (!*(_BYTE *)(a3 + 12))
          return result;
        v64 = (_BYTE *)(a3 + 11);
      }
      LOBYTE(v166[0]) = *v64;
      v106 = LOBYTE(v166[0]);
      if (*(unsigned __int8 *)(a1 + 291) == LOBYTE(v166[0]))
        return result;
      v107 = *(_QWORD *)(a1 + 40);
      if (v107)
      {
        v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v109 = *(WTF::StringImpl **)(a1 + 48);
        *(_QWORD *)&buf = v108;
        *((_QWORD *)&buf + 1) = v110;
        v173 = "setEchoCancellation";
        v174 = v109;
        if (*(_BYTE *)(v107 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
          v106 = LOBYTE(v166[0]);
        }
      }
      *(_BYTE *)(a1 + 291) = v106;
      v88 = a1;
      v89 = 128;
      return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v88, v89);
    case 15:
      if (!*(_BYTE *)(result + 185))
        return result;
      LOWORD(v166[0]) = 0;
      if (*(_BYTE *)(a3 + 8) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x196297108);
      }
      v46 = *(unsigned int *)(result + 148);
      if ((_DWORD)v46)
      {
        v47 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(result + 148));
        memcpy(v47, *(const void **)(v43 + 136), *(unsigned int *)(v43 + 148));
      }
      else
      {
        v47 = 0;
      }
      v73 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)(v73 + 8) = 0;
      *(_QWORD *)(v73 + 16) = 0;
      *(_QWORD *)v73 = &off_1E3419498;
      *(_DWORD *)(v73 + 20) = v46;
      if ((_DWORD)v46)
      {
        v74 = (void *)WTF::fastMalloc((WTF *)v46);
        *(_DWORD *)(v73 + 16) = v46;
        *(_QWORD *)(v73 + 8) = v74;
        memcpy(v74, v47, v46);
      }
      *(_QWORD *)(v73 + 24) = v166;
      v75 = *(unsigned int *)(a3 + 28);
      if (!(_DWORD)v75)
        goto LABEL_123;
      v76 = *(_QWORD *)(a3 + 16);
      v77 = 8 * v75;
      while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v76) & 1) == 0)
      {
        v76 += 8;
        v77 -= 8;
        if (!v77)
        {
LABEL_123:
          v78 = *(unsigned int *)(a3 + 44);
          if ((_DWORD)v78)
          {
            v79 = *(_QWORD *)(a3 + 32);
            v80 = 8 * v78 - 8;
            do
            {
              if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v79) & 1) != 0)
                break;
              v79 += 8;
              v81 = v80;
              v80 -= 8;
            }
            while (v81);
          }
          break;
        }
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      if (v47)
        result = WTF::fastFree((WTF *)v47, v82);
      if (BYTE1(v166[0]))
      {
        v83 = LOBYTE(v166[0]);
        LOBYTE(v167) = LOBYTE(v166[0]);
        if (*(unsigned __int8 *)(a1 + 273) != LOBYTE(v166[0]))
        {
          v84 = *(_QWORD *)(a1 + 40);
          if (v84)
          {
            v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
            v86 = *(WTF::StringImpl **)(a1 + 48);
            *(_QWORD *)&buf = v85;
            *((_QWORD *)&buf + 1) = v87;
            v173 = "setWhiteBalanceMode";
            v174 = v86;
            if (*(_BYTE *)(v84 + 12))
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MeteringMode>((WTF::Logger::LogSiteIdentifier *)&buf, (unsigned __int8 *)&v167);
          }
          *(_BYTE *)(a1 + 273) = v83;
          v88 = a1;
          v89 = 0x2000;
          return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v88, v89);
        }
      }
      return result;
    case 16:
      if (!*(_BYTE *)(result + 186))
        return result;
      if (*(_BYTE *)(a3 + 8) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x196297148);
      }
      v50 = *(double *)(a1 + 280);
      if (*(_BYTE *)(a3 + 56))
      {
        v51 = *(double *)(a3 + 48);
      }
      else
      {
        v93 = *(double *)(result + 152);
        if (*(_BYTE *)(a3 + 24))
        {
          v94 = *(double *)(a3 + 16);
          if (v94 > v93)
            v93 = *(double *)(a3 + 16);
          if (v94 < v93)
            v94 = v93;
          v95 = v94 < v50 && *(_BYTE *)(a3 + 72) == 0;
          v51 = v95 ? *(double *)(a1 + 280) : v94;
        }
        else
        {
          v51 = 0.0;
        }
        v117 = *(double *)(result + 160);
        if (*(_BYTE *)(a3 + 40))
        {
          v51 = *(double *)(a3 + 32);
          if (v51 >= v117)
          {
            if (v51 > v117)
              v51 = *(double *)(result + 160);
          }
          else
          {
            v117 = *(double *)(a3 + 32);
          }
        }
        if (*(_BYTE *)(a3 + 72))
        {
          if (*(double *)(a3 + 64) < v117)
            v117 = *(double *)(a3 + 64);
          if (v93 >= v117)
            v51 = v93;
          else
            v51 = v117;
        }
      }
      if (v51 == v50)
        return result;
      v166[0] = v51;
      v130 = *(_QWORD *)(a1 + 40);
      if (v130)
      {
        v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v132 = *(WTF::StringImpl **)(a1 + 48);
        *(_QWORD *)&buf = v131;
        *((_QWORD *)&buf + 1) = v133;
        v173 = "setZoom";
        v174 = v132;
        if (*(_BYTE *)(v130 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, v166);
          v51 = v166[0];
        }
      }
      *(double *)(a1 + 280) = v51;
      v88 = a1;
      v89 = 0x4000;
      return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v88, v89);
    case 17:
      if (!*(_BYTE *)(result + 187))
        return result;
      if (*(_BYTE *)(a3 + 8) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x196297168);
      }
      if (*(_BYTE *)(a3 + 10))
      {
        v52 = (_BYTE *)(a3 + 9);
      }
      else
      {
        if (!*(_BYTE *)(a3 + 12))
          return result;
        v52 = (_BYTE *)(a3 + 11);
      }
      LOBYTE(v166[0]) = *v52;
      v96 = LOBYTE(v166[0]);
      if (*(unsigned __int8 *)(a1 + 288) == LOBYTE(v166[0]))
        return result;
      v97 = *(_QWORD *)(a1 + 40);
      if (v97)
      {
        v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v99 = *(WTF::StringImpl **)(a1 + 48);
        *(_QWORD *)&buf = v98;
        *((_QWORD *)&buf + 1) = v100;
        v173 = "setTorch";
        v174 = v99;
        if (*(_BYTE *)(v97 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
          v96 = LOBYTE(v166[0]);
        }
      }
      *(_BYTE *)(a1 + 288) = v96;
      v88 = a1;
      v89 = 0x8000;
      return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v88, v89);
    default:
      return result;
  }
}

uint64_t WebCore::RealtimeMediaSource::setSampleRate(uint64_t this, int a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  int v9;

  v9 = a2;
  v2 = (double)a2;
  if (*(double *)(this + 248) != (double)a2)
  {
    v3 = this;
    v4 = *(_QWORD *)(this + 40);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
      v6 = *(_QWORD *)(v3 + 48);
      v8[0] = v5;
      v8[1] = v7;
      v8[2] = "setSampleRate";
      v8[3] = v6;
      if (*(_BYTE *)(v4 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,int>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v8, (unsigned int *)&v9);
        v2 = (double)v9;
      }
    }
    *(double *)(v3 + 248) = v2;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v3, 0x20u);
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::setSampleSize(uint64_t this, int a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  int v9;

  v9 = a2;
  v2 = (double)a2;
  if (*(double *)(this + 256) != (double)a2)
  {
    v3 = this;
    v4 = *(_QWORD *)(this + 40);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
      v6 = *(_QWORD *)(v3 + 48);
      v8[0] = v5;
      v8[1] = v7;
      v8[2] = "setSampleSize";
      v8[3] = v6;
      if (*(_BYTE *)(v4 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,int>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v8, (unsigned int *)&v9);
        v2 = (double)v9;
      }
    }
    *(double *)(v3 + 256) = v2;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v3, 0x40u);
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::setEchoCancellation(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  char v9;

  v9 = a2;
  if (*(unsigned __int8 *)(this + 291) != a2)
  {
    v2 = a2;
    v3 = this;
    v4 = *(_QWORD *)(this + 40);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
      v6 = *(_QWORD *)(v3 + 48);
      v8[0] = v5;
      v8[1] = v7;
      v8[2] = "setEchoCancellation";
      v8[3] = v6;
      if (*(_BYTE *)(v4 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v8);
        v2 = v9;
      }
    }
    *(_BYTE *)(v3 + 291) = v2;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v3, 0x80u);
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::setFacingMode(uint64_t result, int a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  unsigned __int8 v9;

  v9 = a2;
  if (*(unsigned __int8 *)(result + 272) != a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(_QWORD *)(result + 40);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      v6 = *(_QWORD *)(v3 + 48);
      v8[0] = v5;
      v8[1] = v7;
      v8[2] = "setFacingMode";
      v8[3] = v6;
      if (*(_BYTE *)(v4 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::VideoFacingMode>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v8, &v9);
        v2 = v9;
      }
    }
    *(_BYTE *)(v3 + 272) = v2;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v3, 8u);
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::setWhiteBalanceMode(uint64_t result, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  unsigned __int8 v9;

  v9 = a2;
  if (*(unsigned __int8 *)(result + 273) != a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(_QWORD *)(result + 40);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      v6 = *(_QWORD *)(v3 + 48);
      v8[0] = v5;
      v8[1] = v7;
      v8[2] = "setWhiteBalanceMode";
      v8[3] = v6;
      if (*(_BYTE *)(v4 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MeteringMode>((WTF::Logger::LogSiteIdentifier *)v8, &v9);
    }
    *(_BYTE *)(v3 + 273) = v2;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v3, 0x2000u);
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::setVolume(uint64_t this, double a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  double v9;

  v2 = a2;
  v9 = a2;
  if (*(double *)(this + 240) != a2)
  {
    v3 = this;
    v4 = *(_QWORD *)(this + 40);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
      v6 = *(_QWORD *)(v3 + 48);
      v8[0] = v5;
      v8[1] = v7;
      v8[2] = "setVolume";
      v8[3] = v6;
      if (*(_BYTE *)(v4 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v8, &v9);
        v2 = v9;
      }
    }
    *(double *)(v3 + 240) = v2;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v3, 0x10u);
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::setTorch(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  char v9;

  v9 = a2;
  if (*(unsigned __int8 *)(this + 288) != a2)
  {
    v2 = a2;
    v3 = this;
    v4 = *(_QWORD *)(this + 40);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
      v6 = *(_QWORD *)(v3 + 48);
      v8[0] = v5;
      v8[1] = v7;
      v8[2] = "setTorch";
      v8[3] = v6;
      if (*(_BYTE *)(v4 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v8);
        v2 = v9;
      }
    }
    *(_BYTE *)(v3 + 288) = v2;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v3, 0x8000u);
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::selectSettings(WebCore::RealtimeMediaSource *this, const WebCore::MediaConstraints *a2, WebCore::MediaTrackConstraintSetMap *a3)
{
  double *v5;
  __int128 v6;
  __int128 v7;
  unsigned __int16 hasInvalidSizeFrameRateAndZoomConstraints;
  double v9;
  double v10;
  int v11;
  double v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  WTF::StringImpl *v24;
  _QWORD *v25;
  double *v26;
  _QWORD *v27;
  double *v28;
  double v29;
  _QWORD *v30;
  int v31;
  _QWORD *v32;
  WTF::StringImpl *v33;
  double *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  double v44;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  double v52;
  uint64_t result;
  double v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WebCore::MediaTrackConstraintSetMap *v60;
  uint64_t v61;
  double v62;
  _BYTE v63[560];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (**v68)(WebCore::DoubleConstraint *__hidden);
  char v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[2];
  char v73;
  void (**v74)(WebCore::DoubleConstraint *__hidden);
  char v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[2];
  char v79;
  void (**v80)(WebCore::IntConstraint *__hidden);
  char v81;
  _BYTE v82[29];
  char v83;
  void (**v84)(WebCore::IntConstraint *__hidden);
  char v85;
  _OWORD v86[2];
  char v87;
  char v88;
  double v89;
  WTF *v90;
  uint64_t v91;
  unsigned __int16 v92;
  uint64_t v93;
  void (**v94)(WebCore::DoubleConstraint *__hidden);
  char v95;
  __int128 v96;
  __int128 v97;
  _OWORD v98[2];
  char v99;
  void (**v100)(WebCore::DoubleConstraint *__hidden);
  char v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[2];
  char v105;
  void (**v106)(WebCore::IntConstraint *__hidden);
  char v107;
  _OWORD v108[2];
  char v109;
  void (**v110)(WebCore::IntConstraint *__hidden);
  char v111;
  _BYTE v112[29];
  char v113;
  double v114[2];

  v5 = (double *)this;
  v114[0] = INFINITY;
  LOBYTE(v110) = 0;
  v113 = 0;
  if (*((_BYTE *)a2 + 48))
  {
    v111 = *((_BYTE *)a2 + 8);
    *(_OWORD *)v112 = *(_OWORD *)((char *)a2 + 12);
    *(_OWORD *)&v112[13] = *(_OWORD *)((char *)a2 + 25);
    v110 = &off_1E335FF28;
    v113 = 1;
  }
  LOBYTE(v106) = 0;
  v109 = 0;
  if (*((_BYTE *)a2 + 104))
  {
    v107 = *((_BYTE *)a2 + 64);
    v108[0] = *(_OWORD *)((char *)a2 + 68);
    *(_OWORD *)((char *)v108 + 13) = *(_OWORD *)((char *)a2 + 81);
    v106 = &off_1E335FF28;
    v109 = 1;
  }
  LOBYTE(v100) = 0;
  v105 = 0;
  if (*((_BYTE *)a2 + 392))
  {
    v101 = *((_BYTE *)a2 + 320);
    v6 = *(_OWORD *)((char *)a2 + 344);
    v102 = *(_OWORD *)((char *)a2 + 328);
    v103 = v6;
    v104[0] = *(_OWORD *)((char *)a2 + 360);
    *(_OWORD *)((char *)v104 + 9) = *(_OWORD *)((char *)a2 + 369);
    v100 = &off_1E335FF50;
    v105 = 1;
  }
  LOBYTE(v94) = 0;
  v99 = 0;
  if (*((_BYTE *)a2 + 864))
  {
    v95 = *((_BYTE *)a2 + 792);
    v7 = *((_OWORD *)a2 + 51);
    v96 = *((_OWORD *)a2 + 50);
    v97 = v7;
    v98[0] = *((_OWORD *)a2 + 52);
    *(_OWORD *)((char *)v98 + 9) = *(_OWORD *)((char *)a2 + 841);
    v94 = &off_1E335FF50;
    v99 = 1;
  }
  hasInvalidSizeFrameRateAndZoomConstraints = WebCore::RealtimeMediaSource::hasInvalidSizeFrameRateAndZoomConstraints((double *)this, (uint64_t)&v110, (uint64_t)&v106, (uint64_t)&v100, (uint64_t)&v94, v114);
  if (hasInvalidSizeFrameRateAndZoomConstraints > 0xFFu)
  {
    v11 = 1;
    return hasInvalidSizeFrameRateAndZoomConstraints | (v11 << 8);
  }
  *(double *)&v93 = INFINITY;
  v92 = 0;
  v9 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)0x28));
  **(_QWORD **)&v9 = off_1E34194C0;
  *(_QWORD *)(*(_QWORD *)&v9 + 8) = v5;
  *(_QWORD *)(*(_QWORD *)&v9 + 16) = a3;
  *(_QWORD *)(*(_QWORD *)&v9 + 24) = &v92;
  *(_QWORD *)(*(_QWORD *)&v9 + 32) = &v93;
  v62 = v9;
  WebCore::MediaTrackConstraintSetMap::filter((uint64_t)a2, &v62);
  v10 = v62;
  v62 = 0.0;
  if (v10 != 0.0)
    (*(void (**)(double))(**(_QWORD **)&v10 + 8))(COERCE_DOUBLE(*(_QWORD *)&v10));
  if (HIBYTE(v92))
  {
    LOBYTE(hasInvalidSizeFrameRateAndZoomConstraints) = v92;
    v11 = HIBYTE(v92);
    return hasInvalidSizeFrameRateAndZoomConstraints | (v11 << 8);
  }
  v12 = *(double *)&v93;
  v114[0] = *(double *)&v93;
  v91 = 0;
  v90 = 0;
  v13 = *((_DWORD *)a2 + 239);
  if (!v13)
  {
LABEL_64:
    LOBYTE(hasInvalidSizeFrameRateAndZoomConstraints) = 0;
    v11 = 0;
    return hasInvalidSizeFrameRateAndZoomConstraints | (v11 << 8);
  }
  v60 = a3;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = *((_QWORD *)a2 + 118);
  v61 = 944 * v13;
  do
  {
    v18 = v17 + v14;
    v89 = 0.0;
    v88 = 0;
    if (*(_BYTE *)(v17 + v14 + 48))
    {
      v85 = *(_BYTE *)(v18 + 8);
      v86[0] = *(_OWORD *)(v18 + 12);
      *(_OWORD *)((char *)v86 + 13) = *(_OWORD *)(v18 + 25);
      v84 = &off_1E335FF28;
      v19 = *(unsigned __int8 *)(v18 + 104);
      v20 = 1;
    }
    else
    {
      v19 = *(unsigned __int8 *)(v18 + 104);
      if (!*(_BYTE *)(v18 + 104) && !*(_BYTE *)(v17 + v14 + 392) && !*(_BYTE *)(v17 + v14 + 864))
        goto LABEL_31;
      v20 = 0;
      LOBYTE(v84) = 0;
    }
    v87 = v20;
    LOBYTE(v80) = 0;
    v83 = 0;
    if (v19)
    {
      v81 = *(_BYTE *)(v17 + v14 + 64);
      *(_OWORD *)v82 = *(_OWORD *)(v17 + v14 + 68);
      *(_OWORD *)&v82[13] = *(_OWORD *)(v17 + v14 + 81);
      v80 = &off_1E335FF28;
      v83 = 1;
    }
    LOBYTE(v74) = 0;
    v79 = 0;
    v21 = v17 + v14;
    if (*(_BYTE *)(v17 + v14 + 392))
    {
      v75 = *(_BYTE *)(v21 + 320);
      v22 = *(_OWORD *)(v21 + 344);
      v76 = *(_OWORD *)(v21 + 328);
      v77 = v22;
      v78[0] = *(_OWORD *)(v21 + 360);
      *(_OWORD *)((char *)v78 + 9) = *(_OWORD *)(v21 + 369);
      v74 = &off_1E335FF50;
      v79 = 1;
    }
    LOBYTE(v68) = 0;
    v73 = 0;
    if (*(_BYTE *)(v21 + 864))
    {
      v69 = *(_BYTE *)(v17 + v14 + 792);
      v23 = *(_OWORD *)(v17 + v14 + 816);
      v70 = *(_OWORD *)(v17 + v14 + 800);
      v71 = v23;
      v72[0] = *(_OWORD *)(v17 + v14 + 832);
      *(_OWORD *)((char *)v72 + 9) = *(_OWORD *)(v17 + v14 + 841);
      v68 = &off_1E335FF50;
      v73 = 1;
    }
    if ((unsigned __int16)WebCore::RealtimeMediaSource::hasInvalidSizeFrameRateAndZoomConstraints(v5, (uint64_t)&v84, (uint64_t)&v80, (uint64_t)&v74, (uint64_t)&v68, &v89) <= 0xFFu)
    {
      v88 = 1;
LABEL_31:
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      v26 = v5;
      v27 = v25;
      *v25 = off_1E34194E8;
      v25[1] = v26;
      v28 = v26;
      v25[2] = &v93;
      v25[3] = &v89;
      v25[4] = &v88;
      v29 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)0x10));
      **(_QWORD **)&v29 = &off_1E3418380;
      *(_QWORD *)(*(_QWORD *)&v29 + 8) = v27;
      v62 = v29;
      WebCore::MediaTrackConstraintSetMap::filter(v17 + v14, &v62);
      (*(void (**)(double))(**(_QWORD **)&v29 + 8))(COERCE_DOUBLE(*(_QWORD *)&v29));
      if (v89 < v12)
        v12 = v89;
      if (v88)
      {
        v62 = v89;
        WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((WebCore::MediaTrackConstraintSetMap *)v63, (const WebCore::MediaTrackConstraintSetMap *)(v17 + v14));
        if (v16 == (_DWORD)v91)
        {
          v30 = (_QWORD *)WTF::Vector<std::pair<double,WebCore::MediaTrackConstraintSetMap>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v90, v16 + 1, (unint64_t)&v62);
          v31 = HIDWORD(v91);
          v15 = v90;
          v32 = (_QWORD *)((char *)v90 + 952 * HIDWORD(v91));
          *v32 = *v30;
          WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)(v32 + 1), (uint64_t)(v30 + 1));
        }
        else
        {
          v34 = (double *)((char *)v15 + 952 * v16);
          *v34 = v62;
          WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)(v34 + 1), (uint64_t)v63);
          v31 = HIDWORD(v91);
        }
        v5 = v28;
        v16 = v31 + 1;
        HIDWORD(v91) = v31 + 1;
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v67, v33);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66, v35);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v36);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v37);
      }
      else
      {
        v5 = v28;
      }
    }
    v14 += 944;
  }
  while (v61 != v14);
  v114[0] = v12;
  if (!v16)
    goto LABEL_62;
  v38 = 0;
  v39 = 0;
  v40 = (char *)v15 + 952 * v16;
  v41 = (unint64_t)v40;
  v42 = (unint64_t)v40;
  do
  {
    v43 = (char *)v15 + v38;
    v44 = *(double *)((char *)v15 + v38);
    if (fabs(v44) == INFINITY || v114[0] < v44)
    {
      if ((WTF *)v42 != (WTF *)((char *)v90 + 952 * HIDWORD(v91)))
      {
        if (v43 == (char *)v41)
        {
          v43 = (char *)v42;
        }
        else
        {
          WTF::VectorMover<false,std::pair<double,WebCore::MediaTrackConstraintSetMap>>::moveOverlapping(v41, (uint64_t)v15 + v38, v42);
          v43 = (char *)v15 + v38 - v41 + v42;
        }
      }
      v41 = (unint64_t)v15 + v38 + 952;
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15 + v38 + 736, v24);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15 + v38 + 680, v46);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15 + v38 + 624, v47);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15 + v38 + 568, v48);
      ++v39;
      v42 = (unint64_t)v43;
    }
    v38 += 952;
  }
  while ((char *)v15 + v38 < v40);
  v15 = v90;
  v49 = HIDWORD(v91);
  v24 = (WTF *)((char *)v90 + 952 * HIDWORD(v91));
  if ((WTF::StringImpl *)v41 != v24)
  {
    WTF::VectorMover<false,std::pair<double,WebCore::MediaTrackConstraintSetMap>>::moveOverlapping(v41, (uint64_t)v24, v42);
    v49 = HIDWORD(v91);
    v15 = v90;
  }
  HIDWORD(v91) = v49 - v39;
  if (v49 == v39)
  {
LABEL_62:
    if (v15)
    {
      v90 = 0;
      LODWORD(v91) = 0;
      WTF::fastFree(v15, v24);
    }
    goto LABEL_64;
  }
  v50 = (uint64_t)v15 + 8;
  v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v51 = off_1E3419510;
  v51[1] = v60;
  v52 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)0x10));
  **(_QWORD **)&v52 = &off_1E3418380;
  *(_QWORD *)(*(_QWORD *)&v52 + 8) = v51;
  v62 = v52;
  WebCore::MediaTrackConstraintSetMap::filter(v50, &v62);
  result = (*(uint64_t (**)(double))(**(_QWORD **)&v52 + 8))(COERCE_DOUBLE(*(_QWORD *)&v52));
  if (HIDWORD(v91))
  {
    v54 = *(double *)v90;
    if (*(double *)v90 >= v114[0])
      v54 = v114[0];
    v114[0] = v54;
    v55 = 952 * HIDWORD(v91);
    v56 = (uint64_t)v90 + 568;
    do
    {
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v56 + 168, v24);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v56 + 112, v57);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v56 + 56, v58);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v56, v59);
      v56 += 952;
      v55 -= 952;
    }
    while (v55);
    v15 = v90;
    goto LABEL_62;
  }
  __break(0xC471u);
  return result;
}

BOOL WebCore::RealtimeMediaSource::supportsConstraint(uint64_t a1, int a2)
{
  unsigned __int8 *v4;
  _BOOL8 result;
  int v6;

  v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  result = 0;
  switch(a2)
  {
    case 1:
      v6 = v4[171];
      goto LABEL_16;
    case 2:
      v6 = v4[172];
      goto LABEL_16;
    case 3:
      v6 = v4[173];
      goto LABEL_16;
    case 4:
      v6 = v4[174];
      goto LABEL_16;
    case 5:
      v6 = v4[175];
      goto LABEL_16;
    case 6:
      v6 = v4[176];
      goto LABEL_16;
    case 7:
      v6 = v4[177];
      goto LABEL_16;
    case 8:
      v6 = v4[178];
      goto LABEL_16;
    case 9:
      v6 = v4[179];
      goto LABEL_16;
    case 10:
    case 11:
      v6 = v4[180];
      goto LABEL_16;
    case 15:
      v6 = v4[185];
      goto LABEL_16;
    case 16:
      v6 = v4[186];
      goto LABEL_16;
    case 17:
      v6 = v4[187];
      goto LABEL_16;
    case 18:
      v6 = v4[188];
LABEL_16:
      result = v6 != 0;
      break;
    case 19:
      result = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1) == 3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::hasAnyInvalidConstraint(WebCore::RealtimeMediaSource *this, const WebCore::MediaConstraints *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  unsigned __int8 v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::String *v16;
  uint64_t result;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  char v23;
  int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::String *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  _QWORD v60[4];
  _QWORD v61[6];
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  _BYTE v81[56];
  _BYTE v82[56];
  _BYTE v83[56];
  _BYTE v84[216];
  WTF::StringImpl **v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  __int128 buf;
  int v92;
  WTF::StringImpl *v93;
  int v94;
  WTF::StringImpl *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 24))(this);
    v6 = *((_QWORD *)this + 6);
    v61[0] = v5;
    v61[1] = v7;
    v61[2] = "hasAnyInvalidConstraint";
    v61[3] = v6;
    if (*(_BYTE *)(v4 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v61);
  }
  LOBYTE(v61[0]) = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81[0] = 0;
  v81[48] = 0;
  v82[0] = 0;
  v82[48] = 0;
  v83[0] = 0;
  v83[48] = 0;
  v84[0] = 0;
  v84[48] = 0;
  v84[56] = 0;
  v84[136] = 0;
  v84[144] = 0;
  v84[160] = 0;
  v84[168] = 0;
  v84[184] = 0;
  v84[192] = 0;
  v84[208] = 0;
  v9 = WebCore::RealtimeMediaSource::selectSettings(this, a2, (WebCore::MediaTrackConstraintSetMap *)v61);
  v10 = v9;
  if ((unsigned __int16)v9 > 0xFFu)
    goto LABEL_90;
  *((_QWORD *)this + 33) = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E3419538;
  v11[1] = this;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E3418380;
  v12[1] = v11;
  *(_QWORD *)&buf = v12;
  WebCore::MediaTrackConstraintSetMap::filter((uint64_t)v61, &buf);
  (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v13 = *((_QWORD *)this + 5);
  if (!v13
    || (v14 = (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 24))(this),
        v15 = *((_QWORD *)this + 6),
        v60[0] = v14,
        v60[1] = v8,
        v60[2] = "hasAnyInvalidConstraint",
        v60[3] = v15,
        !*(_BYTE *)(v13 + 12)))
  {
LABEL_89:
    v10 = 0;
LABEL_90:
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v84, v8);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v83, v57);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v82, v58);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v81, v59);
    return v9 & 0xFFFFFF00 | v10;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v60);
  v16 = (WTF::String *)WTF::String::String((WTF::String *)&v88, "fitness distance : ");
  result = WTF::String::number(v16, *((double *)this + 33));
  if (v89)
  {
    v18 = *((_DWORD *)v89 + 1);
    if (v88)
      goto LABEL_9;
LABEL_97:
    v19 = 0;
    if (v87)
      goto LABEL_10;
LABEL_98:
    v20 = 0;
    goto LABEL_11;
  }
  v18 = 0;
  if (!v88)
    goto LABEL_97;
LABEL_9:
  v19 = *((_DWORD *)v88 + 1);
  if (!v87)
    goto LABEL_98;
LABEL_10:
  v20 = *(_DWORD *)(v87 + 4);
LABEL_11:
  if ((v20 | v19) < 0
    || ((v21 = __OFADD__(v19, v20), v22 = v19 + v20, !v21) ? (v23 = 0) : (v23 = 1),
        v18 < 0 || (v23 & 1) != 0 || (result = (v18 + v22), __OFADD__(v18, v22))))
  {
    v90 = 0;
    goto LABEL_102;
  }
  if (v89 && (*((_BYTE *)v89 + 16) & 4) == 0)
  {
    v24 = 0;
    goto LABEL_25;
  }
  if (v88)
  {
    v25 = *((_DWORD *)v88 + 4);
    v24 = (v25 >> 2) & 1;
    if (v87 && (v25 & 4) != 0)
      goto LABEL_24;
  }
  else
  {
    if (v87)
    {
LABEL_24:
      v24 = (*(unsigned __int8 *)(v87 + 16) >> 2) & 1;
      goto LABEL_25;
    }
    v24 = 1;
  }
LABEL_25:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v24, v89, (uint64_t)v88, v87, &v90);
  if (v90)
  {
    v27 = (WTF::StringImpl *)v87;
    v87 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = v88;
    v88 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v26);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = v89;
    v89 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v26);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = qword_1ECE7CD60;
    v31 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v31)
    {
      WTF::String::utf8();
      v32 = v85 ? (uint64_t)(v85 + 2) : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v32;
      _os_log_impl(&dword_1940B8000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v31 = (uint64_t)v85;
      v85 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
          v31 = WTF::fastFree((WTF *)v31, v8);
        else
          --*(_DWORD *)v31;
      }
    }
    if (WebCore::LogWebRTC)
    {
      v33 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v34 = *v33;
        if ((v34 & 1) != 0)
          break;
        v35 = __ldaxr(v33);
        if (v35 == v34)
        {
          if (!__stxr(v34 | 1, v33))
          {
            v36 = WTF::Logger::observers((WTF::Logger *)v31);
            v37 = *(unsigned int *)(v36 + 12);
            if ((_DWORD)v37)
            {
              v38 = *(uint64_t **)v36;
              v39 = *(_QWORD *)v36 + 8 * v37;
              do
              {
                v40 = *v38;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v60);
                v92 = 0;
                v41 = (WTF::String *)WTF::String::String((WTF::String *)&v93, "fitness distance : ");
                v42 = *((double *)this + 33);
                v94 = 0;
                WTF::String::number(v41, v42);
                v85 = 0;
                v86 = 0;
                v43 = WTF::fastMalloc((WTF *)0x30);
                LODWORD(v86) = 3;
                v85 = (WTF::StringImpl **)v43;
                v44 = HIDWORD(v86);
                *(_DWORD *)(v43 + 16 * HIDWORD(v86)) = buf;
                v45 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *(_QWORD *)(v43 + 16 * v44 + 8) = v45;
                *(_DWORD *)(v43 + 16 * (v44 + 1)) = v92;
                v46 = v93;
                if (v93)
                  *(_DWORD *)v93 += 2;
                *(_QWORD *)(v43 + 16 * (v44 + 1) + 8) = v46;
                *(_DWORD *)(v43 + 16 * (v44 + 2)) = v94;
                v47 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *(_QWORD *)(v43 + 16 * (v44 + 2) + 8) = v47;
                HIDWORD(v86) = v44 + 3;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::StringImpl ***))(*(_QWORD *)v40 + 16))(v40, &WebCore::LogWebRTC, 0, &v85);
                v48 = (WTF *)v85;
                if (HIDWORD(v86))
                {
                  v49 = 16 * HIDWORD(v86);
                  v50 = v85 + 1;
                  do
                  {
                    v51 = *v50;
                    *v50 = 0;
                    if (v51)
                    {
                      if (*(_DWORD *)v51 == 2)
                        WTF::StringImpl::destroy(v51, v8);
                      else
                        *(_DWORD *)v51 -= 2;
                    }
                    v50 += 2;
                    v49 -= 16;
                  }
                  while (v49);
                  v48 = (WTF *)v85;
                }
                if (v48)
                {
                  v85 = 0;
                  LODWORD(v86) = 0;
                  WTF::fastFree(v48, v8);
                }
                v52 = v95;
                v95 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, v8);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v93;
                v93 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, v8);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, v8);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v38;
              }
              while (v38 != (uint64_t *)v39);
            }
            v55 = __ldxr(v33);
            if (v55 == 1)
            {
              if (!__stlxr(0, v33))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v56 = v90;
    v90 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v8);
      else
        *(_DWORD *)v56 -= 2;
    }
    goto LABEL_89;
  }
LABEL_102:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RealtimeMediaSource::extractVideoPresetConstraints@<X0>(WebCore::RealtimeMediaSource *this@<X0>, const WebCore::MediaConstraints *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _BYTE v10[560];
  _BYTE v11[56];
  _BYTE v12[56];
  _BYTE v13[56];
  _BYTE v14[216];

  v10[0] = 0;
  v10[48] = 0;
  v10[56] = 0;
  v10[104] = 0;
  v10[112] = 0;
  v10[160] = 0;
  v10[168] = 0;
  v10[216] = 0;
  v10[224] = 0;
  v10[304] = 0;
  v10[312] = 0;
  v10[392] = 0;
  v10[400] = 0;
  v10[480] = 0;
  v10[488] = 0;
  v10[504] = 0;
  v10[512] = 0;
  v10[528] = 0;
  v10[536] = 0;
  v10[552] = 0;
  v11[0] = 0;
  v11[48] = 0;
  v12[0] = 0;
  v12[48] = 0;
  v13[0] = 0;
  v13[48] = 0;
  v14[0] = 0;
  v14[48] = 0;
  v14[56] = 0;
  v14[136] = 0;
  v14[144] = 0;
  v14[160] = 0;
  v14[168] = 0;
  v14[184] = 0;
  v14[192] = 0;
  v14[208] = 0;
  if ((unsigned __int16)WebCore::RealtimeMediaSource::selectSettings(this, a2, (WebCore::MediaTrackConstraintSetMap *)v10) >= 0x100u)
  {
    *a3 = 0;
    a3[4] = 0;
    a3[8] = 0;
    a3[12] = 0;
    a3[16] = 0;
    a3[24] = 0;
    a3[32] = 0;
    a3[40] = 0;
    a3[48] = 0;
  }
  else
  {
    WebCore::RealtimeMediaSource::extractVideoPresetConstraints((double *)this, (uint64_t)v10, a3);
  }
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v5);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v6);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v7);
  return std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v8);
}

uint64_t WebCore::RealtimeMediaSource::extractVideoPresetConstraints@<X0>(double *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int *v6;
  _BYTE *v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  double v35;
  int v36;
  double v37;
  double v38;
  int v39;
  double v40;
  int v41;
  double v42;
  double v43;
  double v44;
  double v46;
  double v47;
  double v48;
  double v49;
  double v51;
  double v52;
  double v53;
  double v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  _BYTE *v61;
  _BYTE *v62;
  int v63;
  int v64;
  int *v65;
  int *v66;
  int v67;

  *a3 = 0;
  a3[4] = 0;
  v62 = a3 + 4;
  a3[8] = 0;
  v6 = (int *)(a3 + 8);
  a3[12] = 0;
  v7 = a3 + 12;
  a3[16] = 0;
  a3[24] = 0;
  a3[32] = 0;
  a3[40] = 0;
  a3[48] = 0;
  result = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 120))(a1);
  v9 = result;
  if (*(_BYTE *)(a2 + 48) && *(_BYTE *)(result + 171))
  {
    v65 = v6;
    v10 = *(_DWORD *)(a2 + 12);
    v11 = *(_DWORD *)(a2 + 20);
    v63 = *(unsigned __int8 *)(a2 + 24);
    v12 = *(_DWORD *)(a2 + 36);
    v58 = *(unsigned __int8 *)(a2 + 16);
    v60 = *(unsigned __int8 *)(a2 + 40);
    v13 = *(unsigned __int8 *)(a2 + 32);
    v14 = *(_DWORD *)(a2 + 28);
    result = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 96))(a1);
    if (!v13)
    {
      v16 = *(_DWORD *)v9;
      v15 = *(_DWORD *)(v9 + 4);
      v17 = v10 <= *(_DWORD *)v9 ? *(_DWORD *)v9 : v10;
      v18 = v17 < (int)result && v60 == 0;
      v19 = v18 ? result : v17;
      if (v58)
        v16 = v17;
      else
        v19 = 0;
      v20 = v11 >= v15 ? *(_DWORD *)(v9 + 4) : v11;
      v14 = v63 ? v20 : v19;
      if (v60)
      {
        if (v63)
          v15 = v20;
        if (v12 < v15)
          v15 = v12;
        if (v16 <= v15)
          v14 = v15;
        else
          v14 = v16;
      }
    }
    v6 = v65;
    v64 = 0;
    *(_DWORD *)a3 = v14;
    a3[4] = 1;
  }
  else
  {
    v64 = 1;
  }
  if (*(_BYTE *)(a2 + 104) && *(_BYTE *)(v9 + 172))
  {
    v61 = v7;
    v66 = v6;
    v21 = *(_DWORD *)(a2 + 68);
    v22 = *(_DWORD *)(a2 + 76);
    v57 = *(unsigned __int8 *)(a2 + 72);
    v59 = *(unsigned __int8 *)(a2 + 80);
    v23 = *(_DWORD *)(a2 + 92);
    v24 = *(unsigned __int8 *)(a2 + 96);
    v25 = *(unsigned __int8 *)(a2 + 88);
    v26 = *(_DWORD *)(a2 + 84);
    result = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 96))(a1);
    if (!v25)
    {
      v27 = *(_DWORD *)(v9 + 12);
      v28 = v21 <= *(_DWORD *)(v9 + 8) ? *(_DWORD *)(v9 + 8) : v21;
      v29 = v28 < SHIDWORD(result) && v24 == 0;
      v30 = v29 ? HIDWORD(result) : v28;
      v31 = v57 ? v28 : *(_DWORD *)(v9 + 8);
      v32 = v57 ? v30 : 0;
      v33 = v22 >= v27 ? *(_DWORD *)(v9 + 12) : v22;
      v26 = v59 ? v33 : v32;
      if (v24)
      {
        if (v59)
          v27 = v33;
        if (v23 < v27)
          v27 = v23;
        if (v31 <= v27)
          v26 = v27;
        else
          v26 = v31;
      }
    }
    v6 = v66;
    v7 = v61;
    v34 = 0;
    *v66 = v26;
    *v61 = 1;
  }
  else
  {
    v34 = 1;
  }
  if (!*(_BYTE *)(a2 + 304) || !*(_BYTE *)(v9 + 173))
    goto LABEL_104;
  v35 = *(double *)(a2 + 240);
  v36 = *(unsigned __int8 *)(a2 + 248);
  v37 = *(double *)(a2 + 256);
  v67 = *(unsigned __int8 *)(a2 + 264);
  v38 = *(double *)(a2 + 272);
  v39 = *(unsigned __int8 *)(a2 + 280);
  v40 = *(double *)(a2 + 288);
  v41 = *(unsigned __int8 *)(a2 + 296);
  result = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 96))(a1);
  if ((_DWORD)result)
  {
    v42 = (double)(int)result / (double)SHIDWORD(result);
    if (v39)
      goto LABEL_97;
  }
  else
  {
    v42 = 0.0;
    if (v39)
      goto LABEL_97;
  }
  v43 = *(double *)(v9 + 16);
  if (v36)
  {
    if (v35 > v43)
      v43 = v35;
    if (v35 >= v43)
      v44 = v35;
    else
      v44 = v43;
    if (v44 < v42 && v41 == 0)
      v38 = v42;
    else
      v38 = v44;
  }
  else
  {
    v38 = 0.0;
  }
  v46 = *(double *)(v9 + 24);
  if (v67)
  {
    if (v37 >= v46)
    {
      if (v37 > v46)
      {
        v38 = *(double *)(v9 + 24);
        goto LABEL_91;
      }
    }
    else
    {
      v46 = v37;
    }
    v38 = v37;
  }
LABEL_91:
  if (v41)
  {
    if (v40 < v46)
      v46 = v40;
    if (v43 >= v46)
      v38 = v43;
    else
      v38 = v46;
  }
LABEL_97:
  if (v38 != 0.0)
  {
    if (v64)
    {
      if ((v34 & 1) == 0)
      {
        v47 = v38 * (double)*v6;
        v7 = v62;
        v6 = (int *)a3;
LABEL_103:
        *v7 = 1;
        *v6 = (int)v47;
      }
    }
    else if (v34)
    {
      v47 = (double)*(int *)a3 / v38;
      goto LABEL_103;
    }
  }
LABEL_104:
  if (*(_BYTE *)(a2 + 392) && *(_BYTE *)(v9 + 174))
  {
    if (*(_BYTE *)(a2 + 368))
    {
      v48 = *(double *)(a2 + 360);
    }
    else
    {
      v49 = *(double *)(v9 + 32);
      if (*(_BYTE *)(a2 + 336))
      {
        v48 = *(double *)(a2 + 328);
        if (v48 > v49)
          v49 = *(double *)(a2 + 328);
        if (v48 < v49)
          v48 = v49;
        if (v48 < a1[29] && *(_BYTE *)(a2 + 384) == 0)
          v48 = a1[29];
      }
      else
      {
        v48 = 0.0;
      }
      v51 = *(double *)(v9 + 40);
      if (*(_BYTE *)(a2 + 352))
      {
        v48 = *(double *)(a2 + 344);
        if (v48 >= v51)
        {
          if (v48 > v51)
            v48 = *(double *)(v9 + 40);
        }
        else
        {
          v51 = *(double *)(a2 + 344);
        }
      }
      if (*(_BYTE *)(a2 + 384))
      {
        v48 = *(double *)(a2 + 376);
        if (v48 >= v51)
          v48 = v51;
        if (v49 >= v48)
          v48 = v49;
      }
    }
    *((double *)a3 + 2) = v48;
    a3[24] = 1;
  }
  if (*(_BYTE *)(a2 + 864) && *(_BYTE *)(v9 + 186))
  {
    if (*(_BYTE *)(a2 + 840))
    {
      v52 = *(double *)(a2 + 832);
    }
    else
    {
      v53 = *(double *)(v9 + 152);
      if (*(_BYTE *)(a2 + 808))
      {
        v52 = *(double *)(a2 + 800);
        if (v52 > v53)
          v53 = *(double *)(a2 + 800);
        if (v52 < v53)
          v52 = v53;
        if (v52 < a1[35] && *(_BYTE *)(a2 + 856) == 0)
          v52 = a1[35];
      }
      else
      {
        v52 = 0.0;
      }
      v55 = *(double *)(v9 + 160);
      if (*(_BYTE *)(a2 + 824))
      {
        v52 = *(double *)(a2 + 816);
        if (v52 >= v55)
        {
          if (v52 > v55)
            v52 = *(double *)(v9 + 160);
        }
        else
        {
          v55 = *(double *)(a2 + 816);
        }
      }
      if (*(_BYTE *)(a2 + 856))
      {
        v52 = *(double *)(a2 + 848);
        if (v52 >= v55)
          v52 = v55;
        if (v53 >= v52)
          v52 = v53;
      }
    }
    *((double *)a3 + 4) = v52;
    a3[40] = 1;
  }
  if (*(_BYTE *)(a2 + 936))
  {
    v56 = *(_DWORD *)(a2 + 929);
    if ((v56 & 0xFF00) == 0)
    {
      if (!HIBYTE(v56))
        return result;
      v56 >>= 16;
    }
    a3[48] = v56;
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::applyConstraints(WebCore::RealtimeMediaSource *this, const WebCore::MediaTrackConstraintSetMap *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  char v11;
  char v12;
  _QWORD *v13;

  v13 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34183A8;
  v4[1] = &v13;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E3418380;
  v5[1] = v4;
  v9 = v5;
  WebCore::MediaTrackConstraintSetMap::filter((uint64_t)a2, &v9);
  result = (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  if (v13)
  {
    (*(void (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 328))(this);
    WebCore::RealtimeMediaSource::extractVideoPresetConstraints((double *)this, (uint64_t)a2, &v9);
    if (BYTE4(v9) || v10 || v11 || v12)
      (*(void (**)(WebCore::RealtimeMediaSource *, _QWORD **))(*(_QWORD *)this + 352))(this, &v9);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E3419560;
    v7[1] = this;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E3418380;
    v8[1] = v7;
    v13 = v8;
    WebCore::MediaTrackConstraintSetMap::filter((uint64_t)a2, &v13);
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    return (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 336))(this);
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::applyConstraints@<X0>(WebCore::RealtimeMediaSource *this@<X0>, const WebCore::MediaConstraints *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  WTF::StringImpl *v11;
  char v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD v18[6];
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  _BYTE v38[56];
  _BYTE v39[56];
  _BYTE v40[56];
  _BYTE v41[216];

  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v7 = (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 24))(this);
    v8 = *((_QWORD *)this + 6);
    v18[0] = v7;
    v18[1] = v9;
    v18[2] = "applyConstraints";
    v18[3] = v8;
    if (*(_BYTE *)(v6 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v18);
  }
  LOBYTE(v18[0]) = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38[0] = 0;
  v38[48] = 0;
  v39[0] = 0;
  v39[48] = 0;
  v40[0] = 0;
  v40[48] = 0;
  v41[0] = 0;
  v41[48] = 0;
  v41[56] = 0;
  v41[136] = 0;
  v41[144] = 0;
  v41[160] = 0;
  v41[168] = 0;
  v41[184] = 0;
  v41[192] = 0;
  v41[208] = 0;
  v10 = WebCore::RealtimeMediaSource::selectSettings(this, a2, (WebCore::MediaTrackConstraintSetMap *)v18);
  if (v10 >= 0x100u)
  {
    v12 = v10;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 1;
  }
  else
  {
    WebCore::RealtimeMediaSource::applyConstraints(this, (const WebCore::MediaTrackConstraintSetMap *)v18);
    v12 = 0;
    v13 = 0;
  }
  *a3 = v12;
  a3[16] = v13;
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v41, v11);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40, v14);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39, v15);
  return std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v38, v16);
}

WTF::StringImpl *WebCore::RealtimeMediaSource::applyConstraints(WebCore::RealtimeMediaSource *a1, const WebCore::MediaConstraints *a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  _BYTE v7[8];
  WTF::StringImpl *v8;
  char v9;

  WebCore::RealtimeMediaSource::applyConstraints(a1, a2, v7);
  v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v7);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v9)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unint64_t WebCore::RealtimeMediaSource::size(WebCore::RealtimeMediaSource *this)
{
  uint64_t v1;
  int v2;
  int v4;
  int v5;

  v2 = *((_DWORD *)this + 54);
  v1 = *((unsigned int *)this + 55);
  if (v2 < 1 || (int)v1 <= 0)
  {
    v4 = *((_DWORD *)this + 56);
    if (v4 >= 1)
    {
      v5 = *((_DWORD *)this + 57);
      if (v5 >= 1)
      {
        if (v2)
        {
          v1 = (int)((double)v5 / (double)v4 * (double)v2);
        }
        else if ((_DWORD)v1)
        {
          v2 = (int)((double)v4 / (double)v5 * (double)(int)v1);
        }
        else
        {
          v2 = *((_DWORD *)this + 56);
          v1 = *((unsigned int *)this + 57);
        }
      }
    }
  }
  return v2 | (unint64_t)(v1 << 32);
}

_DWORD *WebCore::RealtimeMediaSource::setIntrinsicSize(_DWORD *this, const WebCore::IntSize *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[4];

  if (this[56] != *(_DWORD *)a2 || this[57] != *((_DWORD *)a2 + 1))
  {
    v6 = this;
    v7 = *((_QWORD *)this + 5);
    if (v7)
    {
      this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 24))(this);
      v8 = v6[6];
      v12[0] = this;
      v12[1] = v9;
      v12[2] = "setIntrinsicSize";
      v12[3] = v8;
      if (*(_BYTE *)(v7 + 12))
        this = (_DWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v12, a2);
    }
    v6[28] = *(_QWORD *)a2;
    if (a3)
    {
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E3419588;
      v10[1] = v6;
      (*(void (**)(_QWORD *))(*v6 + 136))(v6);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v11 = &off_1E34195B0;
      v11[1] = v6;
      v11[2] = v10;
      v12[0] = v11;
      WTF::callOnMainThread();
      this = (_DWORD *)v12[0];
      v12[0] = 0;
      if (this)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::intrinsicSize(WebCore::RealtimeMediaSource *this)
{
  return *((_QWORD *)this + 28);
}

void WebCore::RealtimeMediaSource::discreteSampleRates(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void WebCore::RealtimeMediaSource::discreteSampleSizes(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t WebCore::RealtimeMediaSource::deviceIDHashSalts(WebCore::RealtimeMediaSource *this)
{
  return (uint64_t)this + 80;
}

uint64_t WebCore::RealtimeMediaSource::setType(uint64_t result, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if ((((*(_BYTE *)(result + 112) == 0) ^ a2) & 1) == 0)
  {
    v2 = result;
    *(_BYTE *)(result + 112) = a2;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E34195D8;
    v3[1] = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v4 = &off_1E34195B0;
    v4[1] = v2;
    v4[2] = v3;
    v5 = v4;
    WTF::callOnMainThread();
    result = (uint64_t)v5;
    if (v5)
      return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  }
  return result;
}

WTF *WebCore::RealtimeMediaSource::takePhoto@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v6;
  __int128 v7;
  _QWORD v8[2];

  v8[0] = "Not supported";
  v8[1] = 14;
  v6 = 0uLL;
  *(_QWORD *)&v7 = "takePhoto";
  *((_QWORD *)&v7 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E31F73A0;
  v3 = v7;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = v2 + 112;
  *(_QWORD *)(v2 + 104) = 1;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 136) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v4, 4u, "creating ", v2);
  *a1 = v2;
  return WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::reject<WTF::ASCIILiteral,std::enable_if<true,void>>(v2, (uint64_t)v8, (WTF::Logger::LogSiteIdentifier *)&v6);
}

WTF *WebCore::RealtimeMediaSource::getPhotoCapabilities@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  __int128 v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *result;
  int v12;
  __int128 v13;
  __int128 v14;
  WTF::Lock *v15;
  char v16;
  uint64_t v17;

  v13 = 0uLL;
  *(_QWORD *)&v14 = "getPhotoCapabilities";
  *((_QWORD *)&v14 + 1) = 0;
  v3 = WTF::fastMalloc((WTF *)0x110);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = off_1E31F73F0;
  v4 = v14;
  *(_OWORD *)(v3 + 16) = v13;
  *(_OWORD *)(v3 + 32) = v4;
  *(_BYTE *)(v3 + 48) = 0;
  v5 = (unsigned __int8 *)(v3 + 48);
  *(_DWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 224) = v3 + 240;
  *(_QWORD *)(v3 + 232) = 1;
  *(_QWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  *(_WORD *)(v3 + 264) = 0;
  v6 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v3);
  if (*v6 && v6[16] >= 4u)
    v6 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>((uint64_t)v6, 4u, "creating ", v3);
  *a1 = v3;
  v15 = (WTF::Lock *)(v3 + 48);
  v16 = 1;
  if (__ldaxr(v5))
  {
    __clrex();
LABEL_7:
    v6 = (unsigned __int8 *)MEMORY[0x19AEA534C](v5);
    goto LABEL_8;
  }
  if (__stxr(1u, v5))
    goto LABEL_7;
LABEL_8:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v8 && v8[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>((uint64_t)v8, 4u, (WTF::Logger::LogSiteIdentifier *)&v13, " rejecting ", v3);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = v17;
  v10 = *(unsigned int *)(v3 + 216);
  if ((_DWORD)v10 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E3419618[v10])(&v17, v3 + 56);
  *(_QWORD *)(v3 + 64) = v9;
  *(_DWORD *)(v3 + 208) = 1;
  *(_DWORD *)(v3 + 216) = 1;
  result = WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::dispatchAll(v3, (unsigned __int8 **)&v15);
  if (v16)
  {
    result = v15;
    v12 = __ldxr((unsigned __int8 *)v15);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF *WebCore::RealtimeMediaSource::getPhotoSettings@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  __int128 v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *result;
  int v12;
  __int128 v13;
  __int128 v14;
  WTF::Lock *v15;
  char v16;
  uint64_t v17;

  v13 = 0uLL;
  *(_QWORD *)&v14 = "getPhotoSettings";
  *((_QWORD *)&v14 + 1) = 0;
  v3 = WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = off_1E31F7440;
  v4 = v14;
  *(_OWORD *)(v3 + 16) = v13;
  *(_OWORD *)(v3 + 32) = v4;
  *(_BYTE *)(v3 + 48) = 0;
  v5 = (unsigned __int8 *)(v3 + 48);
  *(_DWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = v3 + 144;
  *(_QWORD *)(v3 + 136) = 1;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_WORD *)(v3 + 168) = 0;
  v6 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v3);
  if (*v6 && v6[16] >= 4u)
    v6 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>((uint64_t)v6, 4u, "creating ", v3);
  *a1 = v3;
  v15 = (WTF::Lock *)(v3 + 48);
  v16 = 1;
  if (__ldaxr(v5))
  {
    __clrex();
LABEL_7:
    v6 = (unsigned __int8 *)MEMORY[0x19AEA534C](v5);
    goto LABEL_8;
  }
  if (__stxr(1u, v5))
    goto LABEL_7;
LABEL_8:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v8 && v8[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>((uint64_t)v8, 4u, (WTF::Logger::LogSiteIdentifier *)&v13, " rejecting ", v3);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = v17;
  v10 = *(unsigned int *)(v3 + 120);
  if ((_DWORD)v10 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E3419630[v10])(&v17, v3 + 56);
  *(_QWORD *)(v3 + 64) = v9;
  *(_DWORD *)(v3 + 112) = 1;
  *(_DWORD *)(v3 + 120) = 1;
  result = WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::dispatchAll(v3, (unsigned __int8 **)&v15);
  if (v16)
  {
    result = v15;
    v12 = __ldxr((unsigned __int8 *)v15);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::StringImpl *WebCore::RealtimeMediaSource::setLogger(WebCore::RealtimeMediaSource *this, const WTF::Logger *a2, const void *a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *result;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  v5 = (unsigned int *)((char *)a2 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = a2;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  *((_QWORD *)this + 6) = a3;
  v11 = *((_QWORD *)this + 5);
  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 24))(this);
  v13 = *((_QWORD *)this + 6);
  v15[0] = result;
  v15[1] = v14;
  v15[2] = "setLogger";
  v15[3] = v13;
  if (*(_BYTE *)(v11 + 12))
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::RealtimeMediaSource::Type,char [3],WTF::String,char [3],WTF::String,char [3],WTF::String>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v15, (unsigned __int8 *)this + 112, ", ", (WTF::StringImpl **)this + 15, ", ", (WTF::StringImpl **)this + 12, ", ", (WTF::StringImpl **)this + 13);
  return result;
}

uint64_t WebCore::RealtimeMediaSourceCenter::triggerDevicesChangedObservers(WebCore::RealtimeMediaSourceCenter *this)
{
  unsigned int v2;
  _QWORD *v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;

  do
    v2 = __ldaxr((unsigned int *)this);
  while (__stlxr(v2 + 1, (unsigned int *)this));
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3419748;
  v8 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 5, &v8);
  result = v8;
  v8 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (this)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)this);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)this));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)this);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E34196F8;
      v7[1] = this;
      v8 = (uint64_t)v7;
      WTF::ensureOnMainRunLoop();
      result = v8;
      v8 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WebCore::RealtimeMediaSourceCenter::~RealtimeMediaSourceCenter(WebCore::RealtimeMediaSourceCenter *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
    os_release(v4);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v12 = i;
              v13 = v7;
              WTF::fastFree((WTF *)v9, a2);
              i = v12;
              v7 = v13;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  *((_QWORD *)this + 1) = off_1E32051C0;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::RunLoop::TimerBase::~TimerBase((WebCore::RealtimeMediaSourceCenter *)((char *)this + 8));
}

void WebCore::RealtimeMediaSourceCenterObserver::~RealtimeMediaSourceCenterObserver(WebCore::RealtimeMediaSourceCenterObserver *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

WTF::StringImpl *WebCore::RealtimeMediaSourceCenter::createMediaStream(_QWORD *a1, uint64_t *a2, _QWORD *a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *result;
  uint64_t *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  char v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a5 + 8))
  {
    v20 = 0;
    goto LABEL_25;
  }
  v14 = (uint64_t *)a1[7];
  if (!v14)
    v14 = WebCore::CoreAudioCaptureSourceFactory::singleton(0);
  v15 = *a4;
  if (*a4)
    *(_DWORD *)v15 += 2;
  v32 = v15;
  v16 = a4[1];
  if (v16)
    *(_DWORD *)v16 += 2;
  v33 = v16;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t *, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*v14 + 16))(&v35, v14, a5, &v32, a7 + 8, *(_QWORD *)(a7 + 1952));
  v18 = v33;
  v33 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v32;
  v32 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v35;
  if (v35)
  {
    v35 = 0;
  }
  else
  {
    v21 = v36;
    v36 = 0;
    v32 = v21;
    LOWORD(v33) = v37;
    v34 = 1;
    (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a3 + 16))(*a3, &v32);
    if (v34 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E3419218[v34])(&v31, &v32);
  }
  v22 = v36;
  v36 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v17);
    else
      *(_DWORD *)v22 -= 2;
  }
  result = v35;
  v35 = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 144))(result);
  if (v20)
  {
LABEL_25:
    if (*(_BYTE *)(a6 + 8))
    {
      if (*(_BYTE *)(a6 + 8) == 3)
      {
        v24 = (uint64_t *)a1[8];
        if (!v24)
        {
          v24 = &WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory;
          {
            WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory = (uint64_t)&off_1E341BAE8;
          }
        }
      }
      else
      {
        v24 = (uint64_t *)a1[9];
        if (!v24)
        {
          v24 = &WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory;
          {
            WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory = (uint64_t)&off_1E341BB18;
          }
        }
      }
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t *, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*v24 + 16))(&v35, v24, a6, a4, a7 + 976, *(_QWORD *)(a7 + 1952));
      v25 = v35;
      if (!v35)
      {
        v35 = v36;
        LOWORD(v36) = v37;
        v37 = 1;
        result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a3 + 16))(*a3, &v35);
        if (v37 != -1)
          result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3419218[v37])(&v32, &v35);
        goto LABEL_47;
      }
      if (!v36)
      {
LABEL_39:
        if (!v20)
          goto LABEL_41;
        goto LABEL_40;
      }
      if (*(_DWORD *)v36 != 2)
      {
        *(_DWORD *)v36 -= 2;
        goto LABEL_39;
      }
      WTF::StringImpl::destroy(v36, v26);
      if (!v20)
      {
LABEL_41:
        v27 = *a2;
        *a2 = 0;
        v28 = *a3;
        *a3 = 0;
        v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v29 = &off_1E3419680;
        *((_QWORD *)v29 + 1) = v20;
        *((_QWORD *)v29 + 2) = v25;
        *((_QWORD *)v29 + 3) = v27;
        *((_QWORD *)v29 + 4) = v28;
        v32 = v29;
        if (v20)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v20 + 56))(v20, &v32);
          result = v32;
          v32 = 0;
          if (result)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        }
        else
        {
          v30 = v29;
          v35 = 0;
          v36 = 0;
          WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::createMediaStream(WTF::Ref<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<WebCore::MediaStreamPrivate,WTF::RawPtrTraits<std::experimental::fundamentals_v3::expected>,WTF::DefaultRefDerefTraits<std::experimental::fundamentals_v3::expected>>,WebCore::CaptureSourceError> &&)> &&,WebCore::MediaDeviceHashSalts &&,WebCore::CaptureDevice &&,WebCore::MediaDeviceHashSalts,WebCore::MediaStreamRequest const&)::$_0,void,WTF::Ref<WebCore::MediaStreamPrivate,WTF::RawPtrTraits<std::experimental::fundamentals_v3::expected>,WTF::DefaultRefDerefTraits<std::experimental::fundamentals_v3::expected>>&&>::call((uint64_t)v29, (uint64_t)&v35);
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
        }
LABEL_47:
        if (v20)
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 144))(v20);
        return result;
      }
    }
    else
    {
      v25 = 0;
      if (!v20)
        goto LABEL_41;
    }
LABEL_40:
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 136))(v20);
    goto LABEL_41;
  }
  return result;
}

uint64_t *WebCore::RealtimeMediaSourceCenter::audioCaptureFactory(WebCore::RealtimeMediaSourceCenter *this)
{
  uint64_t *result;

  result = (uint64_t *)*((_QWORD *)this + 7);
  if (!result)
    return WebCore::CoreAudioCaptureSourceFactory::singleton(0);
  return result;
}

uint64_t *WebCore::RealtimeMediaSourceCenter::videoCaptureFactory(WebCore::RealtimeMediaSourceCenter *this)
{
  uint64_t *result;

  result = (uint64_t *)*((_QWORD *)this + 8);
  if (!result)
  {
    result = &WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory;
    {
      WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory = (uint64_t)&off_1E341BAE8;
    }
  }
  return result;
}

uint64_t *WebCore::RealtimeMediaSourceCenter::displayCaptureFactory(WebCore::RealtimeMediaSourceCenter *this)
{
  uint64_t *result;

  result = (uint64_t *)*((_QWORD *)this + 9);
  if (!result)
  {
    result = &WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory;
    {
      WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory = (uint64_t)&off_1E341BB18;
    }
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSourceCenter::getMediaStreamDevices(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v4 = (uint64_t *)a1[9];
  if (!v4)
  {
    v4 = &WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory;
    {
      WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory = (uint64_t)&off_1E341BB18;
    }
  }
  v5 = (*(uint64_t (**)(uint64_t *))(*v4 + 24))(v4);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v7 = *a2;
  *a2 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E34196D0;
  v8[1] = a1;
  v8[2] = v7;
  v10 = v8;
  WebCore::RealtimeMediaSourceCenter::enumerateDevices(a1, 1, v6, 1, 1, (uint64_t *)&v10);
  result = (uint64_t)v10;
  if (v10)
    return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  return result;
}

WebCore::CoreAudioCaptureSourceFactory *WebCore::RealtimeMediaSourceCenter::enumerateDevices(_QWORD *a1, int a2, int a3, int a4, int a5, uint64_t *a6)
{
  WebCore::CoreAudioCaptureSourceFactory *result;
  void *v13;
  WebCore::CoreAudioCaptureSourceFactory *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  WebCore::CoreAudioCaptureSourceFactory *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  WebCore::CoreAudioCaptureSourceFactory *v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  WebCore::CoreAudioCaptureSourceFactory *v27;
  uint64_t *v28;
  unsigned int v29;
  WebCore::CoreAudioCaptureSourceFactory *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::CoreAudioCaptureSourceFactory *v35;

  result = (WebCore::CoreAudioCaptureSourceFactory *)WTF::fastMalloc((WTF *)0x10);
  v14 = result;
  *(_DWORD *)result = 1;
  v15 = *a6;
  *a6 = 0;
  *((_QWORD *)result + 1) = v15;
  if (a2)
  {
    v16 = (uint64_t *)a1[8];
    if (!v16)
    {
      v16 = &WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory;
      {
        WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory = (uint64_t)&off_1E341BAE8;
      }
    }
    v17 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    do
      v18 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v18 + 1, (unsigned int *)v14));
    v19 = (WebCore::CoreAudioCaptureSourceFactory *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v19 = &off_1E3419770;
    *((_QWORD *)v19 + 1) = v14;
    v35 = v19;
    (*(void (**)(uint64_t, WebCore::CoreAudioCaptureSourceFactory **))(*(_QWORD *)v17 + 8))(v17, &v35);
    result = v35;
    v35 = 0;
    if (result)
      result = (WebCore::CoreAudioCaptureSourceFactory *)(*(uint64_t (**)(WebCore::CoreAudioCaptureSourceFactory *))(*(_QWORD *)result + 8))(result);
  }
  if (a3)
  {
    v20 = (uint64_t *)a1[9];
    if (!v20)
    {
      v20 = &WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory;
      {
        WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory = (uint64_t)&off_1E341BB18;
      }
    }
    v21 = (*(uint64_t (**)(uint64_t *))(*v20 + 24))(v20);
    do
      v22 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v22 + 1, (unsigned int *)v14));
    v23 = (WebCore::CoreAudioCaptureSourceFactory *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = &off_1E3419798;
    *((_QWORD *)v23 + 1) = v14;
    v35 = v23;
    (*(void (**)(uint64_t, WebCore::CoreAudioCaptureSourceFactory **))(*(_QWORD *)v21 + 8))(v21, &v35);
    result = v35;
    v35 = 0;
    if (result)
      result = (WebCore::CoreAudioCaptureSourceFactory *)(*(uint64_t (**)(WebCore::CoreAudioCaptureSourceFactory *))(*(_QWORD *)result + 8))(result);
  }
  if (a4)
  {
    v24 = (uint64_t *)a1[7];
    if (!v24)
      v24 = WebCore::CoreAudioCaptureSourceFactory::singleton(0);
    v25 = (*(uint64_t (**)(uint64_t *))(*v24 + 24))(v24);
    do
      v26 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v26 + 1, (unsigned int *)v14));
    v27 = (WebCore::CoreAudioCaptureSourceFactory *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v27 = &off_1E34197C0;
    *((_QWORD *)v27 + 1) = v14;
    v35 = v27;
    (*(void (**)(uint64_t, WebCore::CoreAudioCaptureSourceFactory **))(*(_QWORD *)v25 + 8))(v25, &v35);
    result = v35;
    v35 = 0;
    if (result)
      result = (WebCore::CoreAudioCaptureSourceFactory *)(*(uint64_t (**)(WebCore::CoreAudioCaptureSourceFactory *))(*(_QWORD *)result + 8))(result);
  }
  if (a5)
  {
    v28 = (uint64_t *)a1[7];
    if (!v28)
      v28 = WebCore::CoreAudioCaptureSourceFactory::singleton(result);
    do
      v29 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v29 + 1, (unsigned int *)v14));
    v30 = (WebCore::CoreAudioCaptureSourceFactory *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v30 = &off_1E34197E8;
    *((_QWORD *)v30 + 1) = v14;
    v35 = v30;
    (*(void (**)(uint64_t *, WebCore::CoreAudioCaptureSourceFactory **))(*v28 + 40))(v28, &v35);
    result = v35;
    v35 = 0;
    if (result)
      result = (WebCore::CoreAudioCaptureSourceFactory *)(*(uint64_t (**)(WebCore::CoreAudioCaptureSourceFactory *))(*(_QWORD *)result + 8))(result);
  }
  do
  {
    v31 = __ldaxr((unsigned int *)v14);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, (unsigned int *)v14));
  if (!v32)
  {
    atomic_store(1u, (unsigned int *)v14);
    v33 = *((_QWORD *)v14 + 1);
    *((_QWORD *)v14 + 1) = 0;
    if (v33)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      v34 = *((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    }
    return (WebCore::CoreAudioCaptureSourceFactory *)WTF::fastFree(v14, v13);
  }
  return result;
}

WTF::StringImpl *WebCore::RealtimeMediaSourceCenter::getCapabilities@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  __int128 v12;
  WTF *v13;
  void *v14;
  __int128 v15;
  _DWORD *v16;
  _DWORD *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v5 = *(unsigned __int8 *)(a2 + 8);
  if (v5 == 1)
  {
    v6 = (uint64_t *)*((_QWORD *)result + 7);
    if (!v6)
      v6 = WebCore::CoreAudioCaptureSourceFactory::singleton(result);
  }
  else
  {
    if (v5 != 3)
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 192) = 0;
      return result;
    }
    v6 = (uint64_t *)*((_QWORD *)result + 8);
    if (!v6)
    {
      v6 = &WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory;
      {
        WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory = (uint64_t)&off_1E341BAE8;
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22 = v23;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t *, uint64_t, WTF::StringImpl **, _QWORD, _QWORD))(*v6 + 16))(&v23, v6, a2, &v21, 0, 0);
  v8 = v22;
  v22 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v21;
  v21 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v23;
  if (v23)
  {
    v23 = 0;
    v11 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 120))(v10);
    v12 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v11;
    *(_OWORD *)(a3 + 16) = v12;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v11 + 32);
    v13 = (WTF *)*(unsigned int *)(v11 + 60);
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_DWORD *)(a3 + 60) = (_DWORD)v13;
    if ((_DWORD)v13)
    {
      v14 = (void *)WTF::fastMalloc(v13);
      *(_DWORD *)(a3 + 56) = (_DWORD)v13;
      *(_QWORD *)(a3 + 48) = v14;
      memcpy(v14, *(const void **)(v11 + 48), *(unsigned int *)(v11 + 60));
    }
    v15 = *(_OWORD *)(v11 + 80);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(v11 + 64);
    *(_OWORD *)(a3 + 80) = v15;
    *(_BYTE *)(a3 + 96) = *(_BYTE *)(v11 + 96);
    v16 = *(_DWORD **)(v11 + 104);
    if (v16)
      *v16 += 2;
    *(_QWORD *)(a3 + 104) = v16;
    v17 = *(_DWORD **)(v11 + 112);
    if (v17)
      *v17 += 2;
    *(_QWORD *)(a3 + 112) = v17;
    *(_OWORD *)(a3 + 120) = *(_OWORD *)(v11 + 120);
    v18 = (WTF *)*(unsigned int *)(v11 + 148);
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 144) = 0;
    *(_DWORD *)(a3 + 148) = (_DWORD)v18;
    if ((_DWORD)v18)
    {
      v19 = (void *)WTF::fastMalloc(v18);
      *(_DWORD *)(a3 + 144) = (_DWORD)v18;
      *(_QWORD *)(a3 + 136) = v19;
      memcpy(v19, *(const void **)(v11 + 136), *(unsigned int *)(v11 + 148));
    }
    *(_OWORD *)(a3 + 152) = *(_OWORD *)(v11 + 152);
    *(_OWORD *)(a3 + 168) = *(_OWORD *)(v11 + 168);
    *(_QWORD *)(a3 + 182) = *(_QWORD *)(v11 + 182);
    *(_BYTE *)(a3 + 192) = 1;
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 144))(v10);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 192) = 0;
  }
  v20 = v24;
  v24 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v7);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v23;
  v23 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 144))(result);
  return result;
}

unsigned int *WebCore::RealtimeMediaSourceCenter::addDevicesChangedObserver(WebCore::RealtimeMediaSourceCenter *this, WebCore::RealtimeMediaSourceCenterObserver *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)this + 40, a2, (uint64_t)v3);
}

uint64_t WebCore::RealtimeMediaSourceCenter::removeDevicesChangedObserver(WebCore::RealtimeMediaSourceCenter *this, WebCore::RealtimeMediaSourceCenterObserver *a2)
{
  return WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)this + 40, a2);
}

uint64_t WebCore::RealtimeMediaSourceCenter::captureDevicesChanged(WebCore::RealtimeMediaSourceCenter *this)
{
  uint64_t result;

  result = WTF::RunLoop::TimerBase::isActive((WebCore::RealtimeMediaSourceCenter *)((char *)this + 8));
  if ((result & 1) == 0)
    return WTF::RunLoop::TimerBase::start();
  return result;
}

uint64_t WebCore::RealtimeMediaSourceCenter::captureDeviceWillBeRemoved(WebCore::RealtimeMediaSourceCenter *this, const WTF::String *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;

  do
    v4 = __ldaxr((unsigned int *)this);
  while (__stlxr(v4 + 1, (unsigned int *)this));
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E3419720;
  v5[1] = a2;
  v10 = (uint64_t)v5;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 5, &v10);
  result = v10;
  v10 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (this)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)this);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)this));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)this);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E34196F8;
      v9[1] = this;
      v10 = (uint64_t)v9;
      WTF::ensureOnMainRunLoop();
      result = v10;
      v10 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WebCore::RealtimeMediaSource *WebCore::RealtimeMediaSourceCenter::getDisplayMediaDevices(WebCore::RealtimeMediaSource *result, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, _BYTE *a5)
{
  WebCore::RealtimeMediaSource *v9;
  uint64_t *v10;
  uint64_t (***v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned __int16 hasAnyInvalidConstraint;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WebCore::RealtimeMediaSource *v48;
  WTF::StringImpl *v49;

  if (*(_BYTE *)(a2 + 1936))
  {
    v9 = result;
    v10 = (uint64_t *)*((_QWORD *)result + 9);
    if (!v10)
    {
      v10 = &WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory;
      {
        WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory = (uint64_t)&off_1E341BB18;
      }
    }
    v11 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t *))(*v10 + 24))(v10);
    result = (WebCore::RealtimeMediaSource *)(**v11)(v11);
    v12 = *((unsigned int *)result + 3);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)result;
      v14 = 40 * v12;
      do
      {
        if (*(_BYTE *)(v13 + 32))
        {
          v15 = (uint64_t *)*((_QWORD *)v9 + 9);
          if (!v15)
          {
            v15 = &WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory;
            {
              WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory = (uint64_t)&off_1E341BB18;
              v15 = &WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory;
            }
          }
          v16 = *a3;
          if (*a3)
            *(_DWORD *)v16 += 2;
          v42 = v16;
          v17 = a3[1];
          if (v17)
            *(_DWORD *)v17 += 2;
          v43 = v17;
          (*(void (**)(WebCore::RealtimeMediaSource **__return_ptr, uint64_t *, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*v15 + 16))(&v48, v15, v13, &v42, a2 + 976, *(_QWORD *)(a2 + 1952));
          v19 = v43;
          v43 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v18);
            else
              *(_DWORD *)v19 -= 2;
          }
          v20 = v42;
          v42 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v18);
            else
              *(_DWORD *)v20 -= 2;
          }
          if (v48)
          {
            hasAnyInvalidConstraint = WebCore::RealtimeMediaSource::hasAnyInvalidConstraint(v48, (const WebCore::MediaConstraints *)(a2 + 976));
            if (hasAnyInvalidConstraint >= 0x100u)
            {
              if (!*a5)
                *a5 = hasAnyInvalidConstraint;
            }
            else
            {
              v22 = (WTF::StringImpl *)*((_QWORD *)v48 + 33);
              v42 = v22;
              v23 = *(WTF::StringImpl **)v13;
              if (*(_QWORD *)v13)
                *(_DWORD *)v23 += 2;
              v43 = v23;
              v24 = *(_BYTE *)(v13 + 8);
              v44 = v24;
              v25 = *(WTF::StringImpl **)(v13 + 16);
              if (v25)
                *(_DWORD *)v25 += 2;
              v45 = v25;
              v26 = *(WTF::StringImpl **)(v13 + 24);
              if (v26)
                *(_DWORD *)v26 += 2;
              v46 = v26;
              v47 = *(_DWORD *)(v13 + 32);
              v27 = *(unsigned int *)(a4 + 12);
              if ((_DWORD)v27 == *(_DWORD *)(a4 + 8))
              {
                v28 = WTF::Vector<WebCore::RealtimeMediaSourceCenter::DeviceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v27 + 1, (unint64_t)&v42);
                v29 = *(_QWORD *)a4 + 48 * *(unsigned int *)(a4 + 12);
                *(_QWORD *)v29 = *(_QWORD *)v28;
                v30 = *((_QWORD *)v28 + 1);
                *((_QWORD *)v28 + 1) = 0;
                *(_QWORD *)(v29 + 8) = v30;
                *(_BYTE *)(v29 + 16) = v28[16];
                v31 = *((_QWORD *)v28 + 3);
                *((_QWORD *)v28 + 3) = 0;
                *(_QWORD *)(v29 + 24) = v31;
                v32 = *((_QWORD *)v28 + 4);
                *((_QWORD *)v28 + 4) = 0;
                *(_QWORD *)(v29 + 32) = v32;
                v33 = (int *)(v29 + 40);
                v34 = (int *)(v28 + 40);
              }
              else
              {
                v35 = *(_QWORD *)a4 + 48 * v27;
                *(_QWORD *)v35 = v22;
                v43 = 0;
                *(_QWORD *)(v35 + 8) = v23;
                *(_BYTE *)(v35 + 16) = v24;
                v36 = v45;
                v45 = 0;
                *(_QWORD *)(v35 + 24) = v36;
                v37 = v46;
                v46 = 0;
                *(_QWORD *)(v35 + 32) = v37;
                v33 = (int *)(v35 + 40);
                v34 = &v47;
              }
              *v33 = *v34;
              ++*(_DWORD *)(a4 + 12);
              v38 = v46;
              v46 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = v45;
              v45 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, v18);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = v43;
              v43 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, v18);
                else
                  *(_DWORD *)v40 -= 2;
              }
            }
          }
          v41 = v49;
          v49 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, v18);
            else
              *(_DWORD *)v41 -= 2;
          }
          result = v48;
          v48 = 0;
          if (result)
            result = (WebCore::RealtimeMediaSource *)(*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)result + 144))(result);
        }
        v13 += 40;
        v14 -= 40;
      }
      while (v14);
    }
  }
  return result;
}

WebCore::RealtimeMediaSource *WebCore::RealtimeMediaSourceCenter::getUserMediaDevices(WebCore::RealtimeMediaSource *result, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  WebCore::RealtimeMediaSource *v10;
  uint64_t *v12;
  uint64_t (***v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned __int16 hasAnyInvalidConstraint;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  int *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t *v44;
  uint64_t (***v45)(_QWORD);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unsigned __int16 v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  char v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  char v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  int v81;
  WebCore::RealtimeMediaSource *v82;
  WTF::StringImpl *v83;

  v10 = result;
  if (*(_BYTE *)(a2 + 968))
  {
    v12 = (uint64_t *)*((_QWORD *)result + 7);
    if (!v12)
      v12 = WebCore::CoreAudioCaptureSourceFactory::singleton(0);
    v13 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t *))(*v12 + 24))(v12);
    result = (WebCore::RealtimeMediaSource *)(**v13)(v13);
    v14 = *((unsigned int *)result + 3);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)result;
      v16 = 40 * v14;
      do
      {
        if (*(_BYTE *)(v15 + 32))
        {
          v17 = (uint64_t *)*((_QWORD *)v10 + 7);
          if (!v17)
            v17 = WebCore::CoreAudioCaptureSourceFactory::singleton(0);
          v18 = *a3;
          if (*a3)
            *(_DWORD *)v18 += 2;
          v76 = v18;
          v19 = a3[1];
          if (v19)
            *(_DWORD *)v19 += 2;
          v77 = v19;
          (*(void (**)(WebCore::RealtimeMediaSource **__return_ptr, uint64_t *, uint64_t, WTF::StringImpl **, _QWORD, _QWORD))(*v17 + 16))(&v82, v17, v15, &v76, 0, *(_QWORD *)(a2 + 1952));
          v21 = v77;
          v77 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v20);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = v76;
          v76 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v20);
            else
              *(_DWORD *)v22 -= 2;
          }
          if (v82)
          {
            hasAnyInvalidConstraint = WebCore::RealtimeMediaSource::hasAnyInvalidConstraint(v82, (const WebCore::MediaConstraints *)(a2 + 8));
            if (hasAnyInvalidConstraint >= 0x100u)
            {
              if (!*a6)
                *a6 = hasAnyInvalidConstraint;
            }
            else
            {
              v24 = (WTF::StringImpl *)*((_QWORD *)v82 + 33);
              v76 = v24;
              v25 = *(WTF::StringImpl **)v15;
              if (*(_QWORD *)v15)
                *(_DWORD *)v25 += 2;
              v77 = v25;
              v26 = *(_BYTE *)(v15 + 8);
              v78 = v26;
              v27 = *(WTF::StringImpl **)(v15 + 16);
              if (v27)
                *(_DWORD *)v27 += 2;
              v79 = v27;
              v28 = *(WTF::StringImpl **)(v15 + 24);
              if (v28)
                *(_DWORD *)v28 += 2;
              v80 = v28;
              v81 = *(_DWORD *)(v15 + 32);
              v29 = *(unsigned int *)(a4 + 12);
              if ((_DWORD)v29 == *(_DWORD *)(a4 + 8))
              {
                v30 = WTF::Vector<WebCore::RealtimeMediaSourceCenter::DeviceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v29 + 1, (unint64_t)&v76);
                v31 = *(_QWORD *)a4 + 48 * *(unsigned int *)(a4 + 12);
                *(_QWORD *)v31 = *(_QWORD *)v30;
                v32 = *((_QWORD *)v30 + 1);
                *((_QWORD *)v30 + 1) = 0;
                *(_QWORD *)(v31 + 8) = v32;
                *(_BYTE *)(v31 + 16) = v30[16];
                v33 = *((_QWORD *)v30 + 3);
                *((_QWORD *)v30 + 3) = 0;
                *(_QWORD *)(v31 + 24) = v33;
                v34 = *((_QWORD *)v30 + 4);
                *((_QWORD *)v30 + 4) = 0;
                *(_QWORD *)(v31 + 32) = v34;
                v35 = (int *)(v31 + 40);
                v36 = (int *)(v30 + 40);
              }
              else
              {
                v37 = *(_QWORD *)a4 + 48 * v29;
                *(_QWORD *)v37 = v24;
                v77 = 0;
                *(_QWORD *)(v37 + 8) = v25;
                *(_BYTE *)(v37 + 16) = v26;
                v38 = v79;
                v79 = 0;
                *(_QWORD *)(v37 + 24) = v38;
                v39 = v80;
                v80 = 0;
                *(_QWORD *)(v37 + 32) = v39;
                v35 = (int *)(v37 + 40);
                v36 = &v81;
              }
              *v35 = *v36;
              ++*(_DWORD *)(a4 + 12);
              v40 = v80;
              v80 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, v20);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = v79;
              v79 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, v20);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v77;
              v77 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, v20);
                else
                  *(_DWORD *)v42 -= 2;
              }
            }
          }
          v43 = v83;
          v83 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v20);
            else
              *(_DWORD *)v43 -= 2;
          }
          result = v82;
          v82 = 0;
          if (result)
            result = (WebCore::RealtimeMediaSource *)(*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)result + 144))(result);
        }
        v15 += 40;
        v16 -= 40;
      }
      while (v16);
    }
  }
  if (*(_BYTE *)(a2 + 1936))
  {
    v44 = (uint64_t *)*((_QWORD *)v10 + 8);
    if (!v44)
    {
      v44 = &WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory;
      {
        WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory = (uint64_t)&off_1E341BAE8;
      }
    }
    v45 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t *))(*v44 + 24))(v44);
    result = (WebCore::RealtimeMediaSource *)(**v45)(v45);
    v46 = *((unsigned int *)result + 3);
    if ((_DWORD)v46)
    {
      v47 = *(_QWORD *)result;
      v48 = 40 * v46;
      do
      {
        if (*(_BYTE *)(v47 + 32))
        {
          v49 = (uint64_t *)*((_QWORD *)v10 + 8);
          if (!v49)
          {
            v49 = &WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory;
            {
              WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory = (uint64_t)&off_1E341BAE8;
              v49 = &WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory;
            }
          }
          v50 = *a3;
          if (*a3)
            *(_DWORD *)v50 += 2;
          v76 = v50;
          v51 = a3[1];
          if (v51)
            *(_DWORD *)v51 += 2;
          v77 = v51;
          (*(void (**)(WebCore::RealtimeMediaSource **__return_ptr, uint64_t *, uint64_t, WTF::StringImpl **, _QWORD, _QWORD))(*v49 + 16))(&v82, v49, v47, &v76, 0, *(_QWORD *)(a2 + 1952));
          v53 = v77;
          v77 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v52);
            else
              *(_DWORD *)v53 -= 2;
          }
          v54 = v76;
          v76 = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v52);
            else
              *(_DWORD *)v54 -= 2;
          }
          if (v82)
          {
            v55 = WebCore::RealtimeMediaSource::hasAnyInvalidConstraint(v82, (const WebCore::MediaConstraints *)(a2 + 976));
            if (v55 >= 0x100u)
            {
              if (!*a6)
                *a6 = v55;
            }
            else
            {
              v56 = (WTF::StringImpl *)*((_QWORD *)v82 + 33);
              v76 = v56;
              v57 = *(WTF::StringImpl **)v47;
              if (*(_QWORD *)v47)
                *(_DWORD *)v57 += 2;
              v77 = v57;
              v58 = *(_BYTE *)(v47 + 8);
              v78 = v58;
              v59 = *(WTF::StringImpl **)(v47 + 16);
              if (v59)
                *(_DWORD *)v59 += 2;
              v79 = v59;
              v60 = *(WTF::StringImpl **)(v47 + 24);
              if (v60)
                *(_DWORD *)v60 += 2;
              v80 = v60;
              v81 = *(_DWORD *)(v47 + 32);
              v61 = *(unsigned int *)(a5 + 12);
              if ((_DWORD)v61 == *(_DWORD *)(a5 + 8))
              {
                v62 = WTF::Vector<WebCore::RealtimeMediaSourceCenter::DeviceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v61 + 1, (unint64_t)&v76);
                v63 = *(_QWORD *)a5 + 48 * *(unsigned int *)(a5 + 12);
                *(_QWORD *)v63 = *(_QWORD *)v62;
                v64 = *((_QWORD *)v62 + 1);
                *((_QWORD *)v62 + 1) = 0;
                *(_QWORD *)(v63 + 8) = v64;
                *(_BYTE *)(v63 + 16) = v62[16];
                v65 = *((_QWORD *)v62 + 3);
                *((_QWORD *)v62 + 3) = 0;
                *(_QWORD *)(v63 + 24) = v65;
                v66 = *((_QWORD *)v62 + 4);
                *((_QWORD *)v62 + 4) = 0;
                *(_QWORD *)(v63 + 32) = v66;
                v67 = (int *)(v63 + 40);
                v68 = (int *)(v62 + 40);
              }
              else
              {
                v69 = *(_QWORD *)a5 + 48 * v61;
                *(_QWORD *)v69 = v56;
                v77 = 0;
                *(_QWORD *)(v69 + 8) = v57;
                *(_BYTE *)(v69 + 16) = v58;
                v70 = v79;
                v79 = 0;
                *(_QWORD *)(v69 + 24) = v70;
                v71 = v80;
                v80 = 0;
                *(_QWORD *)(v69 + 32) = v71;
                v67 = (int *)(v69 + 40);
                v68 = &v81;
              }
              *v67 = *v68;
              ++*(_DWORD *)(a5 + 12);
              v72 = v80;
              v80 = 0;
              if (v72)
              {
                if (*(_DWORD *)v72 == 2)
                  WTF::StringImpl::destroy(v72, v52);
                else
                  *(_DWORD *)v72 -= 2;
              }
              v73 = v79;
              v79 = 0;
              if (v73)
              {
                if (*(_DWORD *)v73 == 2)
                  WTF::StringImpl::destroy(v73, v52);
                else
                  *(_DWORD *)v73 -= 2;
              }
              v74 = v77;
              v77 = 0;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2)
                  WTF::StringImpl::destroy(v74, v52);
                else
                  *(_DWORD *)v74 -= 2;
              }
            }
          }
          v75 = v83;
          v83 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
              WTF::StringImpl::destroy(v75, v52);
            else
              *(_DWORD *)v75 -= 2;
          }
          result = v82;
          v82 = 0;
          if (result)
            result = (WebCore::RealtimeMediaSource *)(*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)result + 144))(result);
        }
        v47 += 40;
        v48 -= 40;
      }
      while (v48);
    }
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSourceCenter::validateRequestConstraints(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, __int128 *a5)
{
  int v10;
  uint64_t *v11;
  _BOOL4 v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _QWORD *v32;

  v10 = *(unsigned __int8 *)(a4 + 1936);
  v11 = (uint64_t *)a1[9];
  if (!v11)
  {
    v11 = &WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory;
    {
      WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory = (uint64_t)&off_1E341BB18;
    }
  }
  v12 = v10 != 0;
  v13 = (*(uint64_t (**)(uint64_t *))(*v11 + 24))(v11);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  v15 = *(unsigned __int8 *)(a4 + 968);
  v16 = *a2;
  *a2 = 0;
  v26 = v16;
  v17 = *a3;
  *a3 = 0;
  v27 = v17;
  WebCore::MediaStreamRequest::MediaStreamRequest((uint64_t)&v28, a4);
  v18 = *a5;
  *a5 = 0u;
  v31 = v18;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x7D8);
  *v19 = off_1E3419810;
  v19[1] = a1;
  v19[2] = v26;
  v19[3] = v27;
  WebCore::MediaStreamRequest::MediaStreamRequest((uint64_t)(v19 + 4), (uint64_t)&v28);
  v19[249] = v31;
  v20 = *((_QWORD *)&v31 + 1);
  v31 = 0u;
  v19[250] = v20;
  v32 = v19;
  WebCore::RealtimeMediaSourceCenter::enumerateDevices(a1, v12, v14, v15, 0, (uint64_t *)&v32);
  if (v32)
    (*(void (**)(_QWORD *))(*v32 + 8))(v32);
  v22 = (WTF::StringImpl *)*((_QWORD *)&v31 + 1);
  *((_QWORD *)&v31 + 1) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WTF::StringImpl *)v31;
  *(_QWORD *)&v31 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)&v30, v21);
  WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)&v29, v24);
  return 0;
}

uint64_t WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WebCore::RealtimeMediaSource *a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, WTF::StringImpl **a5)
{
  uint64_t *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t (***v21)(_QWORD);
  _QWORD *v22;
  _QWORD *v23;
  uint64_t (**v24)();
  unint64_t v25;
  uint64_t *v26;
  uint64_t (***v27)(_QWORD);
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t *v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  const std::nothrow_t *v33;
  unint64_t v34;
  void *v35;
  double v36;
  BOOL v37;
  char *v38;
  void *v39;
  uint64_t v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  unsigned int v47;
  _DWORD *v48;
  char v49;
  _DWORD *v50;
  _DWORD *v51;
  int v52;
  uint64_t *v53;
  WTF::StringImpl *v54;
  const std::nothrow_t *v55;
  unint64_t v56;
  void *v57;
  double v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  _DWORD *v65;
  char v66;
  _DWORD *v67;
  _DWORD *v68;
  int v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  _QWORD v75[2];
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  unsigned __int8 v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;

  v83 = 0;
  v84 = 0;
  v81 = 0;
  v82 = 0;
  v80 = 0;
  v10 = (uint64_t *)*((_QWORD *)a1 + 9);
  if (!v10)
  {
    v10 = &WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory;
    {
      WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory = (uint64_t)&off_1E341BB18;
    }
  }
  v11 = (*(uint64_t (**)(uint64_t *))(*v10 + 24))(v10);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11) && *a4 - 1 <= 1)
  {
    v12 = *a5;
    if (*a5)
      *(_DWORD *)v12 += 2;
    v78 = v12;
    v13 = a5[1];
    if (v13)
    {
      *(_DWORD *)v13 += 2;
      v79 = (unint64_t)v13;
      WebCore::RealtimeMediaSourceCenter::getDisplayMediaDevices(a1, (uint64_t)a4, &v78, (uint64_t)&v81, &v80);
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
    else
    {
      v79 = 0;
      WebCore::RealtimeMediaSourceCenter::getDisplayMediaDevices(a1, (uint64_t)a4, &v78, (uint64_t)&v81, &v80);
    }
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v14);
      else
        *(_DWORD *)v12 -= 2;
    }
    v15 = 0;
  }
  else
  {
    v16 = *a5;
    if (*a5)
      *(_DWORD *)v16 += 2;
    v78 = v16;
    v17 = a5[1];
    if (v17)
    {
      *(_DWORD *)v17 += 2;
      v79 = (unint64_t)v17;
      WebCore::RealtimeMediaSourceCenter::getUserMediaDevices(a1, (uint64_t)a4, &v78, (uint64_t)&v83, (uint64_t)&v81, &v80);
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v18);
      else
        *(_DWORD *)v17 -= 2;
    }
    else
    {
      v79 = 0;
      WebCore::RealtimeMediaSourceCenter::getUserMediaDevices(a1, (uint64_t)a4, &v78, (uint64_t)&v83, (uint64_t)&v81, &v80);
    }
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v18);
      else
        *(_DWORD *)v16 -= 2;
    }
    v15 = HIDWORD(v84);
  }
  if (!a4[968] || v15)
  {
    v25 = HIDWORD(v82);
    if (a4[1936] && !HIDWORD(v82))
    {
      v19 = (uint64_t)(a4 + 976);
      v26 = (uint64_t *)*((_QWORD *)a1 + 8);
      if (!v26)
      {
        v26 = &WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory;
        {
          WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory = (uint64_t)&off_1E341BAE8;
        }
      }
      v27 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t *))(*v26 + 24))(v26);
      (**v27)(v27);
      WTFLogAlways();
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v23 = v22;
      v24 = off_1E3419860;
      goto LABEL_35;
    }
    v78 = 0;
    v79 = 0;
    if (v15)
    {
      v30 = v83;
      v31 = v15;
      v32 = (WTF::StringImpl *)&v83[6 * v15];
      v33 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v34 = v15;
      while (1)
      {
        v35 = operator new(48 * v34, v33);
        if (v35)
          break;
        v37 = v34 > 1;
        v34 >>= 1;
        if (!v37)
        {
          std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(v30, v32, v31, 0, 0, v36);
          goto LABEL_42;
        }
      }
      v39 = v35;
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(v30, v32, v31, (uint64_t)v35, v34, v36);
      operator delete(v39);
LABEL_42:
      v40 = HIDWORD(v84);
      if (HIDWORD(v84))
      {
        if (HIDWORD(v84) >= 0x6666667)
        {
          __break(0xC471u);
          goto LABEL_81;
        }
        v41 = 40 * HIDWORD(v84);
        v42 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(40 * HIDWORD(v84)));
        v43 = 0;
        v44 = 48 * v40;
        v45 = (v41 & 0xFFFFFFF8) / 0x28;
        LODWORD(v77) = v45;
        v76 = (uint64_t)v42;
        v46 = v30 + 3;
        v47 = (48 * v40 - 48) / 0x30uLL + 1;
        do
        {
          v48 = (_DWORD *)*(v46 - 2);
          if (v48)
            *v48 += 2;
          v49 = *((_BYTE *)v46 - 8);
          v50 = (_DWORD *)*v46;
          if (*v46)
            *v50 += 2;
          v51 = (_DWORD *)v46[1];
          if (v51)
            *v51 += 2;
          v52 = *((_DWORD *)v46 + 4);
          v38 = (char *)v42 + v43;
          *(_QWORD *)v38 = v48;
          v38[8] = v49;
          *((_QWORD *)v38 + 2) = v50;
          *((_QWORD *)v38 + 3) = v51;
          *((_DWORD *)v38 + 8) = v52;
          v43 += 40;
          v46 += 6;
          v44 -= 48;
        }
        while (v44);
      }
      else
      {
        v42 = 0;
        v45 = 0;
        v47 = 0;
      }
      v76 = 0;
      v77 = 0;
      v78 = v42;
      v79 = __PAIR64__(v47, v45);
      WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v76, (WTF::StringImpl *)v38);
    }
    v76 = 0;
    v77 = 0;
    if (!(_DWORD)v25)
    {
LABEL_71:
      (*(void (**)(_QWORD, WTF::StringImpl **, uint64_t *))(*(_QWORD *)*a2 + 16))(*a2, &v78, &v76);
      WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v76, v71);
      WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v78, v72);
      goto LABEL_72;
    }
    v53 = v81;
    v54 = (WTF::StringImpl *)&v81[6 * v25];
    v55 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v56 = v25;
    while (1)
    {
      v57 = operator new(48 * v56, v55);
      if (v57)
        break;
      v37 = v56 > 1;
      v56 >>= 1;
      if (!v37)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(v53, v54, v25, 0, 0, v58);
        goto LABEL_61;
      }
    }
    v59 = v57;
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(v53, v54, v25, (uint64_t)v57, v56, v58);
    operator delete(v59);
LABEL_61:
    if (v25 < 0x6666667)
    {
      v60 = WTF::fastMalloc((WTF *)(40 * v25));
      v61 = 0;
      v62 = 0;
      v63 = v53 + 3;
      v64 = 48 * v25;
      do
      {
        v65 = (_DWORD *)*(v63 - 2);
        if (v65)
          *v65 += 2;
        v66 = *((_BYTE *)v63 - 8);
        v67 = (_DWORD *)*v63;
        if (*v63)
          *v67 += 2;
        v68 = (_DWORD *)v63[1];
        if (v68)
          *v68 += 2;
        v69 = *((_DWORD *)v63 + 4);
        v70 = v60 + v61;
        *(_QWORD *)v70 = v65;
        *(_BYTE *)(v70 + 8) = v66;
        *(_QWORD *)(v70 + 16) = v67;
        *(_QWORD *)(v70 + 24) = v68;
        *(_DWORD *)(v70 + 32) = v69;
        ++v62;
        v61 += 40;
        v63 += 6;
        v64 -= 48;
      }
      while (v64);
      v75[0] = 0;
      v75[1] = 0;
      v76 = v60;
      LODWORD(v77) = 40 * (int)v25 / 0x28u;
      HIDWORD(v77) = v62;
      WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v75, (WTF::StringImpl *)v70);
      goto LABEL_71;
    }
    __break(0xC471u);
LABEL_81:
    JUMPOUT(0x19629B6B0);
  }
  v19 = (uint64_t)(a4 + 8);
  v20 = (uint64_t *)*((_QWORD *)a1 + 7);
  if (!v20)
    v20 = WebCore::CoreAudioCaptureSourceFactory::singleton(0);
  v21 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t *))(*v20 + 24))(v20);
  (**v21)(v21);
  WTFLogAlways();
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v23 = v22;
  v24 = off_1E3419838;
LABEL_35:
  *v22 = v24;
  v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = &off_1E3418380;
  *((_QWORD *)v28 + 1) = v23;
  v78 = v28;
  WebCore::MediaTrackConstraintSetMap::filter(v19, &v78);
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v28 + 8))(v28);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 16))(*a3, v80);
LABEL_72:
  WTF::Vector<WebCore::RealtimeMediaSourceCenter::DeviceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v29);
  return WTF::Vector<WebCore::RealtimeMediaSourceCenter::DeviceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v73);
}

uint64_t WebCore::RealtimeMediaSourceCenter::unsetAudioCaptureFactory(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 56) == a2)
    *(_QWORD *)(result + 56) = 0;
  return result;
}

uint64_t WebCore::RealtimeMediaSourceCenter::unsetVideoCaptureFactory(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 64) == a2)
    *(_QWORD *)(result + 64) = 0;
  return result;
}

uint64_t WebCore::RealtimeMediaSourceCenter::unsetDisplayCaptureFactory(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 72) == a2)
    *(_QWORD *)(result + 72) = 0;
  return result;
}

uint64_t WebCore::RealtimeMediaSourceCenter::currentMediaEnvironment(WebCore::RealtimeMediaSourceCenter *this)
{
  return (uint64_t)this + 96;
}

WTF::StringImpl *WebCore::RealtimeMediaSourceCenter::setCurrentMediaEnvironment(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::RealtimeMediaSourceSettings::convertFlagsToString(WTF::StringImpl **a1, int a2)
{
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  WTF::StringBuilder::append();
  for (; a2; a2 &= a2 - 1)
  {
    v4 = a2 & -a2;
    if (v4 > 511)
    {
      if (v4 < 0x2000)
      {
        if (v4 > 2047)
        {
          if (v4 != 2048 && v4 != 4096)
            continue;
        }
        else if (v4 != 512 && v4 != 1024)
        {
          continue;
        }
      }
      else if (v4 < 0x8000)
      {
        if (v4 != 0x2000 && v4 != 0x4000)
          continue;
      }
      else if (v4 != 0x8000 && v4 != 0x10000 && v4 != 0x20000)
      {
        continue;
      }
    }
    else
    {
      if (v4 <= 31)
      {
        switch(v4)
        {
          case 1:
          case 2:
          case 4:
          case 8:
            goto LABEL_29;
          case 3:
          case 5:
          case 6:
          case 7:
            continue;
          default:
            if (v4 == 16)
              goto LABEL_29;
            break;
        }
        continue;
      }
      if (v4 > 127)
      {
        if (v4 != 128 && v4 != 256)
          continue;
      }
      else if (v4 != 32 && v4 != 64)
      {
        continue;
      }
    }
LABEL_29:
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v8);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v8);
  result = v8;
  if (v8)
    *(_DWORD *)v8 += 2;
  *a1 = result;
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      result = v8;
    }
    else
    {
      *(_DWORD *)v7 -= 2;
    }
  }
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSourceSettings::difference(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  int v5;
  int v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  int v9;
  unsigned int v10;

  v5 = *(_DWORD *)a1 != *(_DWORD *)a2;
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    v5 |= 2u;
  if (*(float *)(a1 + 8) != *(float *)(a2 + 8))
    v5 |= 4u;
  if (*(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12))
    v5 |= 8u;
  if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
    v5 |= 0x10u;
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
    v5 |= 0x20u;
  if (*(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
    v5 |= 0x40u;
  if ((*(_BYTE *)(a1 + 32) != 0) != (*(_BYTE *)(a2 + 32) != 0))
    v6 = v5 | 0x80;
  else
    v6 = v5;
  if (!WTF::equal(*(WTF **)(a1 + 40), *(const WTF::StringImpl **)(a2 + 40), a3))
    v6 |= 0x100u;
  if (!WTF::equal(*(WTF **)(a1 + 48), *(const WTF::StringImpl **)(a2 + 48), v7))
    v6 |= 0x200u;
  v9 = WTF::equal(*(WTF **)(a1 + 56), *(const WTF::StringImpl **)(a2 + 56), v8);
  v10 = v6 | 0x400;
  if (v9)
    v10 = v6;
  if (*(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64))
    v10 |= 0x800u;
  if ((*(_BYTE *)(a1 + 65) != 0) != (*(_BYTE *)(a2 + 65) != 0))
    v10 |= 0x1000u;
  if (*(unsigned __int8 *)(a1 + 66) != *(unsigned __int8 *)(a2 + 66))
    v10 |= 0x2000u;
  if (*(double *)(a1 + 72) != *(double *)(a2 + 72))
    v10 |= 0x4000u;
  if ((*(_BYTE *)(a1 + 80) != 0) != (*(_BYTE *)(a2 + 80) != 0))
    v10 |= 0x8000u;
  if ((*(_BYTE *)(a1 + 81) != 0) != (*(_BYTE *)(a2 + 81) != 0))
    v10 |= 0x10000u;
  if ((*(_BYTE *)(a1 + 82) != 0) != (*(_BYTE *)(a2 + 82) != 0))
    return v10 | 0x20000;
  else
    return v10;
}

void WebCore::RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource(WebCore::RealtimeOutgoingAudioSource *this)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  void *v8;
  uint64_t v9;
  WebCore::MediaStreamTrackPrivate *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  void *v16;

  *((_QWORD *)this + 3) = &unk_1E3418CC8;
  v2 = (_QWORD *)((char *)this + 24);
  *(_QWORD *)this = off_1E3418BB8;
  *((_QWORD *)this + 1) = &unk_1E3418C98;
  *((_QWORD *)this + 5) = &unk_1E3418D20;
  v3 = (char *)this + 40;
  *((_QWORD *)this + 6) = &unk_1E3418D68;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 40) + 8);
  v5 = (unsigned __int8 *)(v4 + 144);
  if (__ldaxr((unsigned __int8 *)(v4 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4 + 144);
LABEL_5:
  WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v4 + 152), (uint64_t)v3);
  v7 = __ldxr(v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v5))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 144));
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)this + 7) + 24, v2);
  v9 = *((_QWORD *)this + 9);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), v8);
  v10 = (WebCore::MediaStreamTrackPrivate *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v10, v8);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*((_DWORD *)v10 + 2);
    }
  }
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v8);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
}

uint64_t WebCore::RealtimeOutgoingAudioSource::observeSource(WebCore::RealtimeOutgoingAudioSource *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*((_QWORD *)this + 7) + 24, (_QWORD *)this + 3, (uint64_t)v9);
  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 40) + 8);
  v3 = (unsigned __int8 *)(v2 + 144);
  if (__ldaxr((unsigned __int8 *)(v2 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2 + 144);
LABEL_5:
  v8 = (uint64_t)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::HashTable<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>>::add((uint64_t *)(v2 + 152), &v8, (uint64_t)v9);
  result = v8;
  if (v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v6 = __ldxr(v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 144));
LABEL_12:
  v7 = *((_QWORD *)this + 7);
  *((_BYTE *)this + 64) = *(_BYTE *)(v7 + 97);
  *((_BYTE *)this + 65) = *(_BYTE *)(v7 + 73);
  return result;
}

uint64_t WebCore::RealtimeOutgoingAudioSource::logger(WebCore::RealtimeOutgoingAudioSource *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 80);
}

char *WebCore::RealtimeOutgoingAudioSource::logChannel(WebCore::RealtimeOutgoingAudioSource *this)
{
  return &WebCore::LogWebRTC;
}

uint64_t WebCore::RealtimeOutgoingAudioSource::AddSink(uint64_t this, webrtc::AudioTrackSinkInterface *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  webrtc::AudioTrackSinkInterface **v14;
  webrtc::AudioTrackSinkInterface *v15;
  webrtc::AudioTrackSinkInterface **v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;

  v3 = this;
  v4 = (unsigned __int8 *)(this + 66);
  if (__ldaxr((unsigned __int8 *)(this + 66)))
  {
    __clrex();
LABEL_4:
    this = MEMORY[0x19AEA534C](this + 66);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  v8 = *(_QWORD *)(v3 + 72);
  v7 = (uint64_t *)(v3 + 72);
  v6 = v8;
  if (v8
    || (this = WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v7, 8u), (v6 = *v7) != 0))
  {
    v9 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = (webrtc::AudioTrackSinkInterface **)(v6 + 8 * v13);
  v15 = *v14;
  if (!*v14)
  {
LABEL_16:
    *v14 = a2;
    v18 = *v7;
    if (*v7)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *v7;
    if (*v7)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        goto LABEL_30;
    }
    else
    {
      if (3 * v23 > 4 * v22)
        goto LABEL_30;
      if (!(_DWORD)v23)
      {
        v24 = 8;
LABEL_29:
        this = WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v7, v24);
        goto LABEL_30;
      }
    }
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_29;
  }
  v16 = 0;
  v17 = 1;
  while (v15 != a2)
  {
    if (v15 == (webrtc::AudioTrackSinkInterface *)-1)
      v16 = v14;
    v13 = (v13 + v17) & v9;
    v14 = (webrtc::AudioTrackSinkInterface **)(v6 + 8 * v13);
    v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *v16 = 0;
        --*(_DWORD *)(*v7 - 16);
        v14 = v16;
      }
      goto LABEL_16;
    }
  }
LABEL_30:
  v25 = __ldxr(v4);
  if (v25 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

uint64_t WebCore::RealtimeOutgoingAudioSource::RemoveSink(uint64_t this, webrtc::AudioTrackSinkInterface *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  webrtc::AudioTrackSinkInterface *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v22;

  v3 = this;
  v4 = (unsigned __int8 *)(this + 66);
  if (__ldaxr((unsigned __int8 *)(this + 66)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this + 66);
LABEL_5:
  v8 = *(_QWORD *)(v3 + 72);
  v7 = (uint64_t *)(v3 + 72);
  v6 = v8;
  if (v8)
  {
    v9 = *(_DWORD *)(v6 - 8);
    v10 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(webrtc::AudioTrackSinkInterface **)(v6 + 8 * v13);
    if (v14 != a2)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(webrtc::AudioTrackSinkInterface **)(v6 + 8 * v13);
        ++v15;
        if (v14 == a2)
          goto LABEL_12;
      }
      v13 = *(unsigned int *)(v6 - 4);
    }
LABEL_12:
    if (v13 != *(_DWORD *)(v6 - 4))
    {
      *(_QWORD *)(v6 + 8 * v13) = -1;
      ++*(_DWORD *)(*v7 - 16);
      v16 = *v7;
      v17 = *v7 ? *(_DWORD *)(v16 - 12) - 1 : -1;
      *(_DWORD *)(v16 - 12) = v17;
      v18 = *v7;
      if (*v7)
      {
        v19 = 6 * *(_DWORD *)(v18 - 12);
        v20 = *(_DWORD *)(v18 - 4);
        if (v19 < v20 && v20 >= 9)
          this = WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v7, v20 >> 1);
      }
    }
  }
  v22 = __ldxr(v4);
  if (v22 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

uint64_t WebCore::RealtimeOutgoingAudioSource::sendAudioFrames(uint64_t this, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  _QWORD v26[4];

  v11 = this;
  v12 = *(_QWORD *)(this + 80) + 1;
  *(_QWORD *)(this + 80) = v12;
  if (__ROR8__(0x8F5C28F5C28F5C29 * v12, 3) <= 0x147AE147AE147AEuLL)
  {
    v13 = *(_QWORD *)(this + 56);
    v15 = *(_QWORD *)(v13 + 80);
    v14 = *(_QWORD *)(v13 + 88);
    v26[0] = "RealtimeOutgoingAudioSource";
    v26[1] = 28;
    v26[2] = "sendAudioFrames";
    v26[3] = v14;
    if (*(_BYTE *)(v15 + 12))
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [7],unsigned long>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v26, "chunk ", (WTF::String **)(this + 80));
  }
  v16 = (unsigned __int8 *)(v11 + 66);
  if (__ldaxr((unsigned __int8 *)(v11 + 66)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_8;
  }
  this = MEMORY[0x19AEA534C](v11 + 66);
LABEL_8:
  v18 = *(_QWORD **)(v11 + 72);
  if (v18)
  {
    v19 = *((unsigned int *)v18 - 1);
    v20 = &v18[v19];
    if (*((_DWORD *)v18 - 3))
    {
      v21 = v18;
      if ((_DWORD)v19)
      {
        v22 = 8 * v19;
        v21 = v18;
        while ((unint64_t)(*v21 + 1) <= 1)
        {
          ++v21;
          v22 -= 8;
          if (!v22)
          {
            v21 = v20;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    v21 = &v18[v19];
  }
  else
  {
    v21 = 0;
    v19 = 0;
  }
  v20 = &v18[v19];
  if (v18)
  {
LABEL_15:
    v23 = &v18[*((unsigned int *)v18 - 1)];
    goto LABEL_20;
  }
  v23 = 0;
LABEL_20:
  while (v21 != v23)
  {
    v24 = v21 + 1;
    this = (**(uint64_t (***)(_QWORD, const void *, uint64_t, uint64_t, uint64_t, uint64_t))*v21)(*v21, a2, a3, a4, a5, a6);
    v21 = v20;
    if (v24 != v20)
    {
      v21 = v24;
      while ((unint64_t)(*v21 + 1) <= 1)
      {
        if (++v21 == v20)
        {
          v21 = v20;
          break;
        }
      }
    }
  }
  v25 = __ldxr(v16);
  if (v25 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v16);
  }
  if (__stlxr(0, v16))
    return WTF::Lock::unlockSlow((WTF::Lock *)v16);
  return this;
}

const char *WebCore::RealtimeOutgoingAudioSource::logClassName(WebCore::RealtimeOutgoingAudioSource *this)
{
  return "RealtimeOutgoingAudioSource";
}

uint64_t WebCore::RealtimeOutgoingAudioSource::logIdentifier(WebCore::RealtimeOutgoingAudioSource *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 88);
}

char *`non-virtual thunk to'WebCore::RealtimeOutgoingAudioSource::logChannel(WebCore::RealtimeOutgoingAudioSource *this)
{
  return &WebCore::LogWebRTC;
}

uint64_t WebCore::RealtimeOutgoingVideoSource::RealtimeOutgoingVideoSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v13[4];

  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = off_1E3418DA8;
  *(_QWORD *)(a1 + 8) = &unk_1E3418E98;
  *(_QWORD *)(a1 + 16) = &unk_1E3418EC8;
  *(_QWORD *)(a1 + 32) = &unk_1E3418F00;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &unk_1E3418F58;
  *(_QWORD *)(a1 + 56) = &unk_1E3418F80;
  *(_BYTE *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 80) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)(a1 + 120) = v5;
  *(_QWORD *)(a1 + 80) = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E3419888;
  v7[1] = WebCore::RealtimeOutgoingVideoSource::sendOneBlackFrame;
  v7[2] = 0;
  v7[3] = a1;
  *(_QWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 160) = 256;
  *(_BYTE *)(a1 + 162) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 216) = 1;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 80);
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 224) = v8;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 88);
  *(_QWORD *)(a1 + 232) = v11;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  v13[0] = "RealtimeOutgoingVideoSource";
  v13[1] = 28;
  v13[2] = "RealtimeOutgoingVideoSource";
  v13[3] = v11;
  if (*(_BYTE *)(v8 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v13);
  return a1;
}

uint64_t WebCore::RealtimeOutgoingVideoSource::sendOneBlackFrame(WebCore::RealtimeOutgoingVideoSource *this)
{
  uint64_t v2;
  uint64_t v3;
  void (***v4)(_QWORD);
  uint64_t result;
  _QWORD v6[4];

  v2 = *((_QWORD *)this + 28);
  v3 = *((_QWORD *)this + 29);
  v6[0] = "RealtimeOutgoingVideoSource";
  v6[1] = 28;
  v6[2] = "sendOneBlackFrame";
  v6[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  v4 = (void (***)(_QWORD))*((_QWORD *)this + 17);
  v6[0] = v4;
  if (v4)
    (**v4)(v4);
  WebCore::RealtimeOutgoingVideoSource::sendFrame((uint64_t)this);
  result = v6[0];
  if (v6[0])
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v6[0] + 8))(v6[0]);
  return result;
}

uint64_t WebCore::RealtimeOutgoingVideoSource::logger(WebCore::RealtimeOutgoingVideoSource *this)
{
  return *((_QWORD *)this + 28);
}

char *WebCore::RealtimeOutgoingVideoSource::logChannel(WebCore::RealtimeOutgoingVideoSource *this)
{
  return &WebCore::LogWebRTC;
}

const char *WebCore::RealtimeOutgoingVideoSource::logClassName(WebCore::RealtimeOutgoingVideoSource *this)
{
  return "RealtimeOutgoingVideoSource";
}

uint64_t WebCore::RealtimeOutgoingVideoSource::logIdentifier(WebCore::RealtimeOutgoingVideoSource *this)
{
  return *((_QWORD *)this + 29);
}

void WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource(WebCore::RealtimeOutgoingVideoSource *this)
{
  char *v2;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WebCore::MediaStreamTrackPrivate *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  void *v18;

  *(_QWORD *)this = off_1E3418DA8;
  *((_QWORD *)this + 1) = &unk_1E3418E98;
  *((_QWORD *)this + 2) = &unk_1E3418EC8;
  *((_QWORD *)this + 4) = &unk_1E3418F00;
  *((_QWORD *)this + 6) = &unk_1E3418F58;
  v2 = (char *)this + 48;
  *((_QWORD *)this + 7) = &unk_1E3418F80;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)this + 9) + 24, (_QWORD *)this + 4);
  WebCore::RealtimeMediaSource::removeVideoFrameObserver(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 40) + 8), (uint64_t)v2);
  if ((*((_QWORD *)this + 14) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::RealtimeOutgoingVideoSource *)((char *)this + 80));
  v4 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *((_QWORD *)this + 19);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), v3);
  v9 = *((_QWORD *)this + 17);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 10) = off_1E31F7378;
  v10 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WebCore::TimerBase::~TimerBase((WebCore::RealtimeOutgoingVideoSource *)((char *)this + 80));
  v12 = (WebCore::MediaStreamTrackPrivate *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v12, v11);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*((_DWORD *)v12 + 2);
    }
  }
  v13 = *((_QWORD *)this + 5);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v11);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
}

uint64_t WebCore::RealtimeOutgoingVideoSource::setSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  _QWORD v10[4];

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v3;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate((WebCore::MediaStreamTrackPrivate *)result, a2);
      result = WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)(result + 8);
    }
  }
  v5 = *(_QWORD *)(a1 + 224);
  v6 = *(_QWORD *)(a1 + 232);
  v10[0] = "RealtimeOutgoingVideoSource";
  v10[1] = 28;
  v10[2] = "setSource";
  v10[3] = v6;
  if (*(_BYTE *)(v5 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [7],void const*>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v10, "track ");
  if (*(_BYTE *)(a1 + 160))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 40) + 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 296))(v7, 1);
    if ((result & 1) == 0)
      *(_BYTE *)(a1 + 64) = 1;
  }
  return result;
}

uint64_t WebCore::RealtimeOutgoingVideoSource::updateFramesSending(uint64_t this, double a2, double a3, double a4)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  char v8;
  double v9;
  double v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::MonotonicTime *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;

  v4 = this;
  if (*(_BYTE *)(this + 200) && (v5 = *(double *)(this + 192), v5 > 0.0))
  {
    LODWORD(a3) = *(_DWORD *)(this + 164);
    LODWORD(a4) = *(_DWORD *)(this + 168);
    v6 = (double)*(unint64_t *)&a3;
    v7 = 1.0;
    if (v6 * (double)*(unint64_t *)&a4 > v5)
    {
      v8 = 1;
      do
      {
        if ((v8 & 1) != 0)
          v9 = 0.75;
        else
          v9 = 0.666666667;
        v7 = v7 * v9;
        ++v8;
      }
      while (v7 * v6 * (double)*(unint64_t *)&a4 > v5);
    }
    v10 = sqrt(v7);
    if (v7 == 1.0)
      v10 = v7;
    v11 = *(_QWORD *)&v10;
  }
  else
  {
    v11 = 0x3FF0000000000000;
  }
  atomic_store(v11, (unint64_t *)(this + 208));
  if (!*(_BYTE *)(this + 162) && *(_BYTE *)(this + 161))
  {
    if (*(_BYTE *)(this + 217))
      goto LABEL_56;
    *(_BYTE *)(this + 217) = 1;
    v14 = *(_QWORD *)(*(_QWORD *)(this + 72) + 40);
    v15 = *(_QWORD *)(v14 + 8);
    if (*(_BYTE *)(this + 184))
    {
      this = WebCore::RealtimeMediaSource::addVideoFrameObserver(*(_QWORD *)(v14 + 8), this + 48, 0, *(double *)(this + 176));
      goto LABEL_56;
    }
    v16 = (unsigned __int8 *)(v15 + 160);
    if (__ldaxr((unsigned __int8 *)(v15 + 160)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v16))
    {
LABEL_51:
      v27 = v4 + 48;
      this = (uint64_t)WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(v15 + 168), &v27, (uint64_t)&v28);
      v26 = __ldxr(v16);
      if (v26 == 1)
      {
        if (!__stlxr(0, v16))
          goto LABEL_56;
      }
      else
      {
        __clrex();
      }
      this = WTF::Lock::unlockSlow((WTF::Lock *)(v15 + 160));
LABEL_56:
      if ((*(_QWORD *)(v4 + 112) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*(_QWORD *)(v4 + 112) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
      {
        return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v4 + 80));
      }
      return this;
    }
    MEMORY[0x19AEA534C](v15 + 160);
    goto LABEL_51;
  }
  if (*(_BYTE *)(this + 217))
  {
    *(_BYTE *)(this + 217) = 0;
    this = WebCore::RealtimeMediaSource::removeVideoFrameObserver(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 72) + 40) + 8), this + 48);
  }
  if (((*(_QWORD *)(v4 + 112) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*(_QWORD *)(v4 + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    && (*(_BYTE *)(v4 + 162) || !*(_BYTE *)(v4 + 161)))
  {
    v12 = *(_DWORD *)(v4 + 164);
    if (v12)
    {
      if (*(_DWORD *)(v4 + 168))
      {
        this = *(_QWORD *)(v4 + 136);
        if (this)
          goto LABEL_39;
        if (!*(_BYTE *)(v4 + 64) && ((v18 = *(_DWORD *)(v4 + 68), v18 == 270) || v18 == 90))
        {
          v13 = *(_DWORD *)(v4 + 168);
        }
        else
        {
          v13 = *(_DWORD *)(v4 + 164);
          v12 = *(_DWORD *)(v4 + 168);
        }
        (*(void (**)(const char **__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 112))(&v28, v4, v13, v12);
        this = (uint64_t)v28;
        v28 = 0;
        v19 = *(_QWORD *)(v4 + 136);
        *(_QWORD *)(v4 + 136) = this;
        if (v19)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          if (v28)
            (*(void (**)(const char *))(*(_QWORD *)v28 + 8))(v28);
          this = *(_QWORD *)(v4 + 136);
        }
        if (this)
        {
LABEL_39:
          v20 = *(_QWORD *)(v4 + 224);
          v21 = *(_QWORD *)(v4 + 232);
          v28 = "RealtimeOutgoingVideoSource";
          v29 = 28;
          v30 = "sendOneBlackFrame";
          v31 = v21;
          if (*(_BYTE *)(v20 + 12))
          {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v28);
            this = *(_QWORD *)(v4 + 136);
            v28 = (const char *)this;
            if (!this)
              goto LABEL_44;
          }
          else
          {
            v28 = (const char *)this;
          }
          (**(void (***)(uint64_t))this)(this);
LABEL_44:
          WebCore::RealtimeOutgoingVideoSource::sendFrame(v4);
          v22 = (WTF::MonotonicTime *)v28;
          if (v28)
            v22 = (WTF::MonotonicTime *)(*(uint64_t (**)(const char *))(*(_QWORD *)v28 + 8))(v28);
          *(_QWORD *)(v4 + 104) = 0x3FF0000000000000;
          WTF::MonotonicTime::now(v22);
          return WebCore::TimerBase::setNextFireTime(v4 + 80, v23 + 1.0);
        }
        v24 = *(_QWORD *)(v4 + 224);
        v25 = *(_QWORD *)(v4 + 232);
        v28 = "RealtimeOutgoingVideoSource";
        v29 = 28;
        v30 = "sendBlackFramesIfNeeded";
        v31 = v25;
        if (*(_BYTE *)(v24 + 12))
          return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [28]>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v28, "Unable to send black frames");
      }
    }
  }
  return this;
}

uint64_t *WebCore::RealtimeOutgoingVideoSource::AddOrUpdateSink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  double v11;
  int v12;
  BOOL v13;
  double v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  uint64_t *result;
  int v22;
  _QWORD *v23;
  _BYTE v24[7];
  uint64_t v25;

  v25 = a2;
  if (*(_BYTE *)a3)
  {
    v5 = (unsigned int *)(a1 + 24);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = &off_1E34198B0;
    v7[1] = a1;
    v7[2] = a1;
    v23 = v7;
    WTF::ensureOnMainThread();
    v8 = v23;
    v23 = 0;
    if (v8)
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  }
  v9 = *(_DWORD *)(a3 + 16);
  v10 = v9 != 0x7FFFFFFF;
  if (v9 == 0x7FFFFFFF)
    v11 = 0.0;
  else
    v11 = (double)v9;
  v12 = *(_DWORD *)(a3 + 4);
  v13 = v12 != 0x7FFFFFFF;
  if (v12 == 0x7FFFFFFF)
    v14 = 0.0;
  else
    v14 = (double)v12;
  v15 = (unsigned int *)(a1 + 24);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v17 = &off_1E34198D8;
  *(_QWORD *)(v17 + 8) = a1;
  *(_QWORD *)(v17 + 16) = a1;
  *(double *)(v17 + 24) = v11;
  *(_BYTE *)(v17 + 32) = v10;
  *(_DWORD *)(v17 + 33) = *(_DWORD *)v24;
  *(_DWORD *)(v17 + 36) = *(_DWORD *)&v24[3];
  *(double *)(v17 + 40) = v14;
  *(_BYTE *)(v17 + 48) = v13;
  v23 = (_QWORD *)v17;
  WTF::ensureOnMainThread();
  v18 = v23;
  v23 = 0;
  if (v18)
    (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  v19 = (unsigned __int8 *)(a1 + 144);
  if (__ldaxr((unsigned __int8 *)(a1 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v19))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](a1 + 144);
LABEL_20:
  result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a1 + 152), &v25, (uint64_t)&v23);
  v22 = __ldxr(v19);
  if (v22 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 144));
  }
  if (__stlxr(0, v19))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 144));
  return result;
}

uint64_t *`non-virtual thunk to'WebCore::RealtimeOutgoingVideoSource::AddOrUpdateSink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::RealtimeOutgoingVideoSource::AddOrUpdateSink(a1 - 16, a2, a3);
}

unsigned __int8 *WebCore::RealtimeOutgoingVideoSource::RemoveSink(unsigned __int8 *result, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v22;

  v3 = result;
  v4 = result + 144;
  if (__ldaxr(result + 144))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](result + 144);
LABEL_5:
  v8 = *((_QWORD *)v3 + 19);
  v7 = (uint64_t *)(v3 + 152);
  v6 = v8;
  if (v8)
  {
    v9 = *(_DWORD *)(v6 - 8);
    v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    if (v14 != a2)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v6 + 8 * v13);
        ++v15;
        if (v14 == a2)
          goto LABEL_12;
      }
      v13 = *(unsigned int *)(v6 - 4);
    }
LABEL_12:
    if (v13 != *(_DWORD *)(v6 - 4))
    {
      *(_QWORD *)(v6 + 8 * v13) = -1;
      ++*(_DWORD *)(*v7 - 16);
      v16 = *v7;
      v17 = *v7 ? *(_DWORD *)(v16 - 12) - 1 : -1;
      *(_DWORD *)(v16 - 12) = v17;
      v18 = *v7;
      if (*v7)
      {
        v19 = 6 * *(_DWORD *)(v18 - 12);
        v20 = *(_DWORD *)(v18 - 4);
        if (v19 < v20 && v20 >= 9)
          result = (unsigned __int8 *)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v7, v20 >> 1, 0);
      }
    }
  }
  v22 = __ldxr(v4);
  if (v22 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebCore::RealtimeOutgoingVideoSource::RemoveSink(uint64_t a1, uint64_t a2)
{
  return WebCore::RealtimeOutgoingVideoSource::RemoveSink((unsigned __int8 *)(a1 - 16), a2);
}

void WebCore::RealtimeOutgoingVideoSource::sendFrame(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned __int8 *v9;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  double v19;
  _QWORD v20[4];
  _BYTE v21[216];

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v3 = v2;
  webrtc::VideoFrame::VideoFrame();
  ++*(_DWORD *)(a1 + 248);
  v4 = *(double *)(a1 + 240);
  if (v4 != 0.0)
  {
    v5 = v3 - v4;
    if (v5 < 1.0)
      goto LABEL_12;
    v6 = *(_QWORD *)(a1 + 224);
    v7 = *(_QWORD *)(a1 + 232);
    v20[0] = "RealtimeOutgoingVideoSource";
    v20[1] = 28;
    v20[2] = "sendFrame";
    v20[3] = v7;
    v19 = v5;
    if (*(_BYTE *)(v6 + 12))
    {
      if (WebCore::LogWebRTC)
        v8 = byte_1ECE7CD50 >= 3u;
      else
        v8 = 0;
      if (v8)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned int,char [17],double,char [9]>((WTF::Logger::LogSiteIdentifier *)v20, (unsigned int *)(a1 + 248), &v19);
    }
    *(_DWORD *)(a1 + 248) = 0;
  }
  *(double *)(a1 + 240) = v3;
LABEL_12:
  v9 = (unsigned __int8 *)(a1 + 144);
  if (__ldaxr((unsigned __int8 *)(a1 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](a1 + 144);
LABEL_16:
  v11 = *(_QWORD **)(a1 + 152);
  if (v11)
  {
    v12 = *((unsigned int *)v11 - 1);
    v13 = &v11[v12];
    if (*((_DWORD *)v11 - 3))
    {
      v14 = v11;
      if ((_DWORD)v12)
      {
        v15 = 8 * v12;
        v14 = v11;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          ++v14;
          v15 -= 8;
          if (!v15)
          {
            v14 = v13;
            goto LABEL_23;
          }
        }
      }
      goto LABEL_23;
    }
    v14 = &v11[v12];
  }
  else
  {
    v14 = 0;
    v12 = 0;
  }
  v13 = &v11[v12];
  if (v11)
  {
LABEL_23:
    v16 = &v11[*((unsigned int *)v11 - 1)];
    goto LABEL_28;
  }
  v16 = 0;
LABEL_28:
  while (v14 != v16)
  {
    v17 = v14 + 1;
    (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v14 + 16))(*v14, v21);
    v14 = v13;
    if (v17 != v13)
    {
      v14 = v17;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        if (++v14 == v13)
        {
          v14 = v13;
          break;
        }
      }
    }
  }
  v18 = __ldxr(v9);
  if (v18 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_40;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_40:
  webrtc::VideoFrame::~VideoFrame((webrtc::VideoFrame *)v21);
}

char *`non-virtual thunk to'WebCore::RealtimeOutgoingVideoSource::logChannel(WebCore::RealtimeOutgoingVideoSource *this)
{
  return &WebCore::LogWebRTC;
}

uint64_t WebCore::RealtimeVideoCaptureSource::RealtimeVideoCaptureSource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;

  WebCore::RealtimeMediaSource::RealtimeMediaSource(a1, a2, a3, a4);
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v5 = 0;
  *(_OWORD *)(v5 + 8) = xmmword_19689B170;
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(a1 + 304) = v5;
  *(_QWORD *)a1 = off_1E3418FC0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 417) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  return a1;
}

void WebCore::RealtimeVideoCaptureSource::~RealtimeVideoCaptureSource(WebCore::RealtimeVideoCaptureSource *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  WTF *v8;
  WTF *v9;
  const void *v10;
  WTF *v11;

  *(_QWORD *)this = off_1E3418FC0;
  v3 = (WTF *)*((_QWORD *)this + 51);
  if (v3)
  {
    *((_QWORD *)this + 51) = 0;
    *((_DWORD *)this + 104) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 97);
  if ((_DWORD)v4)
  {
    v5 = 56 * v4;
    v6 = (const void **)(*((_QWORD *)this + 47) + 48);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
        CFRelease(v7);
      v8 = (WTF *)*(v6 - 5);
      if (v8)
      {
        *(v6 - 5) = 0;
        *((_DWORD *)v6 - 8) = 0;
        WTF::fastFree(v8, a2);
      }
      v6 += 7;
      v5 -= 56;
    }
    while (v5);
  }
  v9 = (WTF *)*((_QWORD *)this + 47);
  if (v9)
  {
    *((_QWORD *)this + 47) = 0;
    *((_DWORD *)this + 96) = 0;
    WTF::fastFree(v9, a2);
  }
  if (*((_BYTE *)this + 368))
  {
    v10 = (const void *)*((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (v10)
      CFRelease(v10);
    v11 = (WTF *)*((_QWORD *)this + 40);
    if (v11)
    {
      *((_QWORD *)this + 40) = 0;
      *((_DWORD *)this + 82) = 0;
      WTF::fastFree(v11, a2);
    }
  }
  WebCore::RealtimeMediaSource::~RealtimeMediaSource(this, (WTF::StringImpl *)a2);
}

uint64_t WebCore::RealtimeVideoCaptureSource::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 304);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebCore::RealtimeVideoCaptureSource::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(this[38]);
}

uint64_t WebCore::RealtimeVideoCaptureSource::controlBlock(WebCore::RealtimeVideoCaptureSource *this)
{
  return *((_QWORD *)this + 38);
}

uint64_t WebCore::RealtimeVideoCaptureSource::presets(WebCore::RealtimeVideoCaptureSource *this)
{
  if (!*((_DWORD *)this + 97))
    (*(void (**)(WebCore::RealtimeVideoCaptureSource *))(*(_QWORD *)this + 416))(this);
  return (uint64_t)this + 376;
}

void WebCore::RealtimeVideoCaptureSource::setSupportedPresets(uint64_t a1, uint64_t *a2, __n128 a3)
{
  uint64_t v4;
  unsigned int v6;
  WTF *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  const void **v20;
  const void *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v4 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v4)
  {
    if (v4 >= 0x4924925)
    {
      __break(0xC471u);
      return;
    }
    v6 = 56 * v4;
    v7 = (WTF *)WTF::fastMalloc((WTF *)(56 * v4));
    LODWORD(v24) = v6 / 0x38;
    v23 = v7;
    v8 = *((_DWORD *)a2 + 3);
    if (v8)
    {
      v9 = 0;
      v10 = *a2;
      v11 = *a2 + 48 * v8;
      v12 = (__n128 *)((char *)v7 + 24);
      do
      {
        v13 = *(_QWORD *)v10;
        v14 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        v15 = *(_BYTE *)(v10 + 40);
        a3 = *(__n128 *)(v10 + 24);
        v12[-1].n128_u64[0] = v14;
        v16 = *(_QWORD *)(v10 + 16);
        *(_QWORD *)(v10 + 16) = 0;
        v12[-2].n128_u64[1] = v13;
        v12[-1].n128_u64[1] = v16;
        *v12 = a3;
        v12[1].n128_u8[0] = v15;
        v12[1].n128_u64[1] = 0;
        ++v9;
        v12 = (__n128 *)((char *)v12 + 56);
        v10 += 48;
      }
      while (v10 != v11);
      HIDWORD(v24) = v9;
    }
  }
  WebCore::RealtimeVideoCaptureSource::setSupportedPresets(a1, &v23, a3);
  v18 = v23;
  if (HIDWORD(v24))
  {
    v19 = 56 * HIDWORD(v24);
    v20 = (const void **)((char *)v23 + 48);
    do
    {
      v21 = *v20;
      *v20 = 0;
      if (v21)
        CFRelease(v21);
      v22 = (WTF *)*(v20 - 5);
      if (v22)
      {
        *(v20 - 5) = 0;
        *((_DWORD *)v20 - 8) = 0;
        WTF::fastFree(v22, v17);
      }
      v20 += 7;
      v19 -= 56;
    }
    while (v19);
  }
  if (v18)
    WTF::fastFree(v18, v17);
}

void WebCore::RealtimeVideoCaptureSource::setSupportedPresets(uint64_t a1, _DWORD *a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  const void *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  __n128 *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v5 = *(unsigned int *)(a1 + 388);
  if ((_DWORD)v5)
  {
    v6 = 56 * v5;
    v7 = (const void **)(*(_QWORD *)(a1 + 376) + 48);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
        CFRelease(v8);
      v9 = (WTF *)*(v7 - 5);
      if (v9)
      {
        *(v7 - 5) = 0;
        *((_DWORD *)v7 - 8) = 0;
        WTF::fastFree(v9, a2);
      }
      v7 += 7;
      v6 -= 56;
    }
    while (v6);
  }
  v10 = *(WTF **)(a1 + 376);
  if (v10)
  {
    *(_QWORD *)(a1 + 376) = 0;
    *(_DWORD *)(a1 + 384) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 376) = v11;
  v12 = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 384) = v12;
  v13 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 388) = v13;
  if ((_DWORD)v13)
  {
    v14 = 56 * v13;
    v15 = (unsigned int *)(v11 + 20);
    do
    {
      v16 = *(_QWORD *)(v15 - 3);
      v17 = *v15;
      v15 += 14;
      v18 = (__n128 *)(v16 + 16 * v17);
      v19 = 126 - 2 * __clz(v17);
      if (v17)
        v20 = v19;
      else
        v20 = 0;
      a3 = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN7WebCore11VideoPreset19sortFrameRateRangesEvEUlRKT_RKT0_E_PNS2_14FrameRateRangeELb0EEEvT1_SE_S7_NS_15iterator_traitsISE_E15difference_typeEb(v16, v18, (uint64_t)&v21, v20, 1, a3);
      v14 -= 56;
    }
    while (v14);
  }
}

int *WebCore::RealtimeVideoCaptureSource::standardVideoSizes(WebCore::RealtimeVideoCaptureSource *this)
{
  return &WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes;
}

uint64_t WebCore::RealtimeVideoCaptureSource::updateCapabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  int v12;
  double v13;
  int v14;
  double v15;
  double v16;
  int v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double v23;
  double v24;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  v5 = *(_DWORD *)(v4 + 12);
  if (v5)
  {
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
    v8 = *(_QWORD *)v4;
    v9 = *(_QWORD *)v4 + 56 * v5;
    v10 = 1.0;
    v11 = 0.0;
    v12 = 0x7FFFFFFF;
    v13 = 1.79769313e308;
    v14 = 0x7FFFFFFF;
    v15 = 0.0;
    v16 = 1.79769313e308;
    do
    {
      v18 = *(_DWORD *)v8;
      v17 = *(_DWORD *)(v8 + 4);
      if (v12 >= *(_DWORD *)v8)
        v12 = *(_DWORD *)v8;
      if ((int)v6 <= v18)
        v6 = v18;
      else
        v6 = v6;
      if (v14 >= v17)
        v14 = *(_DWORD *)(v8 + 4);
      if ((int)v7 <= v17)
        v7 = v17;
      else
        v7 = v7;
      v19 = (double)v18 / (double)v17;
      if (v13 > v19)
        v13 = (double)v18 / (double)v17;
      if (v11 < v19)
        v11 = (double)v18 / (double)v17;
      if (*(double *)(v8 + 24) < v16)
        v16 = *(double *)(v8 + 24);
      if (v10 < *(double *)(v8 + 32))
        v10 = *(double *)(v8 + 32);
      v20 = *(unsigned int *)(v8 + 20);
      if ((_DWORD)v20)
      {
        v21 = 16 * v20;
        v22 = (double *)(*(_QWORD *)(v8 + 8) + 8);
        do
        {
          v23 = *v22;
          v22 += 2;
          v24 = v23;
          if (v15 < v23)
            v15 = v24;
          v21 -= 16;
        }
        while (v21);
      }
      v8 += 56;
    }
    while (v8 != v9);
  }
  else
  {
    v7 = 0;
    v6 = 0;
    v14 = 0x7FFFFFFF;
    v15 = 0.0;
    v10 = 1.0;
    v16 = 1.79769313e308;
    v11 = 0.0;
    v13 = 1.79769313e308;
    v12 = 0x7FFFFFFF;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  if ((result & 1) != 0)
  {
    v13 = 1.0 / (double)(int)v7;
    v11 = (double)(int)v6;
    v14 = 1;
    v12 = 1;
  }
  if (v12 > (int)v6)
    goto LABEL_41;
  *(_QWORD *)a2 = v12 | (unint64_t)(v6 << 32);
  if (v14 > (int)v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19629D7CCLL);
  }
  *(_QWORD *)(a2 + 8) = v14 | (unint64_t)(v7 << 32);
  if (v13 > v11)
  {
    __break(0xC471u);
    JUMPOUT(0x19629D7ECLL);
  }
  *(double *)(a2 + 16) = v13;
  *(double *)(a2 + 24) = v11;
  if (v15 < 1.0)
  {
    __break(0xC471u);
    JUMPOUT(0x19629D80CLL);
  }
  *(_QWORD *)(a2 + 32) = 0x3FF0000000000000;
  *(double *)(a2 + 40) = v15;
  if (v16 > v10)
  {
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x19629D7ACLL);
  }
  *(double *)(a2 + 152) = v16;
  *(double *)(a2 + 160) = v10;
  return result;
}

uint64_t WebCore::RealtimeVideoCaptureSource::supportsSizeFrameRateAndZoom(WTF *a1, uint64_t a2)
{
  BOOL v2;
  void *v5;
  _BOOL8 v6;
  BOOL v7;
  CFTypeRef v8;
  WTF *v9;
  uint64_t v11;
  WTF *v12;
  int v13;
  CFTypeRef cf;
  char v15;
  char v16;

  if (*(_BYTE *)(a2 + 4))
    v2 = 0;
  else
    v2 = *(_BYTE *)(a2 + 12) == 0;
  if (v2 && *(_BYTE *)(a2 + 24) == 0 && *(_BYTE *)(a2 + 40) == 0)
    return 1;
  WebCore::RealtimeVideoCaptureSource::bestSupportedSizeFrameRateAndZoom(a1, (double *)a2, 1, (uint64_t)&v11);
  v6 = v16 != 0;
  if (v16)
    v7 = v15 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
    v9 = v12;
    if (v12)
    {
      v12 = 0;
      v13 = 0;
      WTF::fastFree(v9, v5);
    }
  }
  return v6;
}

WTF *WebCore::RealtimeVideoCaptureSource::bestSupportedSizeFrameRateAndZoom@<X0>(WTF *result@<X0>, double *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  double v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  double *v14;
  double v15;
  double v16;
  uint64_t v17;
  BOOL v18;
  void *v19;
  unsigned int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double *v25;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  void *v32;
  int v33;
  int v34;
  uint64_t i;
  uint64_t (***v36)();
  uint64_t (**v37)();
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t j;
  int v45;
  uint64_t v46;
  int v47;
  char v48;
  BOOL v49;
  int v50;
  BOOL v51;
  BOOL v53;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  double *v60;
  double v61;
  double v62;
  double *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  WTF *v71;
  double v72;
  double v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  WTF *v82;
  double v83;
  double v84;
  double *v85;
  double v86;
  double v87;
  double v88;
  unsigned int v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  double v97;
  double v98;
  double *v99;
  const void *v100;
  uint64_t v101;
  double v103;
  uint64_t v104;
  WTF *v105;
  CFTypeRef v106;
  unint64_t v107;
  uint64_t v108;
  double v110;
  uint64_t v111;
  WTF *v112;
  CFTypeRef v113;
  CFTypeRef v114;
  const void *v115;
  uint64_t v116;
  double *v117;
  double v118;
  double v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  double *v125;
  unint64_t v126;
  unsigned int v127;
  int v129;
  char v130;
  int v131;
  int v132;
  int v133;
  int v134;
  char v135;
  double v136;
  char v137;
  double v138;
  char v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  WTF *v143;
  uint64_t v144;
  __int128 v145;
  char v146;
  CFTypeRef cf;
  char v148;
  uint64_t v149;
  WTF *v150;
  uint64_t v151;
  __int128 v152;
  char v153;
  CFTypeRef v154;
  unsigned __int8 v155;
  uint64_t v156;
  double *v157;
  uint64_t v158;
  __int128 v159;
  char v160;
  const void *v161;
  unsigned __int8 v162;

  v5 = *a2;
  v4 = *((_QWORD *)a2 + 1);
  v6 = BYTE4(*(_QWORD *)a2);
  v7 = BYTE4(v4);
  v8 = *((unsigned __int8 *)a2 + 24);
  v9 = *((unsigned __int8 *)a2 + 40);
  if (BYTE4(*(_QWORD *)a2))
    v10 = 0;
  else
    v10 = BYTE4(v4) == 0;
  if (v10 && v8 == 0 && v9 == 0)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 88) = 0;
    return result;
  }
  v14 = (double *)result;
  v15 = a2[2];
  v16 = a2[4];
  v119 = *a2;
  v120 = *((_QWORD *)a2 + 1);
  if (!BYTE4(*(_QWORD *)a2))
  {
    if (BYTE4(v4))
    {
      v6 = 0;
      goto LABEL_22;
    }
    v17 = (*(uint64_t (**)(WTF *))(*(_QWORD *)result + 96))(result);
    if (a3 != 1)
      goto LABEL_21;
    v18 = (int)v17 < 1 || SHIDWORD(v17) < 1;
    v6 = BYTE4(v4);
    if (!v18)
    {
      LODWORD(v5) = (*(uint64_t (**)(double *))(*(_QWORD *)v14 + 96))(v14);
      v4 = (unint64_t)(*(uint64_t (**)(double *))(*(_QWORD *)v14 + 96))(v14) >> 32;
      v7 = 1;
LABEL_21:
      v6 = v7;
    }
  }
LABEL_22:
  v121 = a3;
  LOBYTE(v156) = 0;
  v162 = 0;
  LOBYTE(v149) = 0;
  v155 = 0;
  LOBYTE(v142) = 0;
  v148 = 0;
  result = (WTF *)(*(uint64_t (**)(double *))(*(_QWORD *)v14 + 440))(v14);
  v20 = *((_DWORD *)result + 3);
  if (v20)
  {
    v122 = 0;
    v123 = 0;
    v126 = 0;
    v127 = 0;
    v21 = *(int **)result;
    v22 = *(_QWORD *)result + 56 * v20;
    v125 = v14;
    v129 = v9;
    v131 = v7;
    while (1)
    {
      if (v8)
      {
        v23 = v21[5];
        if (!(_DWORD)v23)
          goto LABEL_150;
        v24 = (double *)*((_QWORD *)v21 + 1);
        v25 = &v24[2 * v23];
        while (v15 + 0.001 < *v24 || v15 + -0.001 > v24[1])
        {
          v24 += 2;
          if (v24 == v25)
            goto LABEL_150;
        }
      }
      if (v9)
      {
        if (*((double *)v21 + 3) > v16 || *((double *)v21 + 4) < v16)
          goto LABEL_150;
      }
      if (v6)
      {
        if (*v21 < SLODWORD(v5))
          goto LABEL_150;
        if (!v7)
        {
          v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          v29 = 0;
          *v28 = off_1E3419928;
          v28[1] = v21;
          while (1)
          {
            if (WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[v29] == LODWORD(v5))
            {
              v30 = WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[v29 + 1];
              v132 = LODWORD(v5);
              v133 = v30;
              if (((*(uint64_t (**)(_QWORD *, int *))(*v28 + 16))(v28, &v132) & 1) != 0)
                break;
            }
            v29 += 2;
            if (v29 == 68)
            {
              v130 = 0;
              v14 = v125;
              goto LABEL_58;
            }
          }
          v14 = v125;
LABEL_86:
          result = (WTF *)(*(uint64_t (**)(_QWORD *))(*v28 + 8))(v28);
LABEL_87:
          if (!v162 || *((_BYTE *)v21 + 40))
            result = std::optional<WebCore::VideoPreset>::operator=[abi:sn180100]<WebCore::VideoPreset const&,void>((uint64_t)&v156, (uint64_t *)v21);
          v7 = v131;
          goto LABEL_150;
        }
      }
      else if (!v7)
      {
        result = std::optional<WebCore::VideoPreset>::operator=[abi:sn180100]<WebCore::VideoPreset const&,void>((uint64_t)&v156, (uint64_t *)v21);
        goto LABEL_153;
      }
      if (v21[1] < (int)v4)
        goto LABEL_150;
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v28 = v31;
      *v31 = off_1E3419928;
      v31[1] = v21;
      if (v6)
      {
        v34 = *v21;
        v33 = v21[1];
        result = (WTF *)WTF::fastFree((WTF *)v31, v32);
        v130 = 1;
        if (LODWORD(v5) == v34)
        {
          v10 = (_DWORD)v4 == v33;
          v14 = v125;
          v9 = v129;
          if (v10)
            goto LABEL_87;
        }
        else
        {
          v14 = v125;
          v9 = v129;
        }
      }
      else
      {
        for (i = 0; i != 68; i += 2)
        {
          if (WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[i + 1] == (_DWORD)v4)
          {
            v132 = WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[i];
            v133 = v4;
            if (((*(uint64_t (**)(_QWORD *, int *))(*v28 + 16))(v28, &v132) & 1) != 0)
            {
              v9 = v129;
              goto LABEL_86;
            }
          }
        }
        v130 = 1;
        v9 = v129;
LABEL_58:
        (*(void (**)(_QWORD *))(*v28 + 8))(v28);
      }
      v141 = 0;
      v36 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
      *v36 = off_1E3419950;
      v36[1] = (uint64_t (**)())v14;
      v36[2] = (uint64_t (**)())v21;
      v36[3] = (uint64_t (**)())&v141;
      if (!v6)
      {
        if (!v131)
          goto LABEL_278;
        v38 = 0;
        while (1)
        {
          if (WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[v38 + 1] == (_DWORD)v4)
          {
            v132 = WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[v38];
            v133 = v4;
            if ((((uint64_t (*)(uint64_t (***)(), int *))(*v36)[2])(v36, &v132) & 1) != 0)
              goto LABEL_65;
          }
          v38 += 2;
          if (v38 == 68)
          {
LABEL_83:
            result = (WTF *)((uint64_t (*)(uint64_t (***)()))(*v36)[1])(v36);
            v9 = v129;
            goto LABEL_93;
          }
        }
      }
      if (!v131)
        break;
      v37 = off_1E3419950;
      if (vabdd_f64((double)*v21 / (double)v21[1], (double)SLODWORD(v5) / (double)(int)v4) <= 0.000001)
      {
        if (((*(uint64_t (**)(double *))(*(_QWORD *)v14 + 432))(v14) & 1) != 0)
        {
          *v36[3] = (uint64_t (*)())(LODWORD(v5) | ((unint64_t)v4 << 32));
LABEL_65:
          result = (WTF *)((uint64_t (*)(uint64_t (***)()))(*v36)[1])(v36);
          v9 = v129;
          v7 = v131;
          if (!v155
            || *((_BYTE *)a2 + 48) && *((_BYTE *)v21 + 40) && !v153
            || *v21 <= (int)v149 && v21[1] <= SHIDWORD(v149) && *((_BYTE *)v21 + 40))
          {
            result = std::optional<WebCore::VideoPreset>::operator=[abi:sn180100]<WebCore::VideoPreset const&,void>((uint64_t)&v149, (uint64_t *)v21);
            v123 = v141;
            v122 = HIDWORD(v141);
          }
          goto LABEL_94;
        }
        v37 = *v36;
      }
      result = (WTF *)((uint64_t (*)(uint64_t (***)()))v37[1])(v36);
LABEL_93:
      v7 = v131;
LABEL_94:
      if (!(v162 | v155))
      {
        if (!v6)
        {
          v42 = v130;
          if ((v130 & 1) != 0 && (int)v4 > v21[1])
            goto LABEL_150;
          goto LABEL_109;
        }
        v41 = *(_QWORD *)v21;
        v42 = v130;
        if (SLODWORD(v5) <= (int)*(_QWORD *)v21)
        {
          if ((v130 & 1) != 0)
          {
            if ((int)v4 > SHIDWORD(v41)
              || v148
              && (!*((_BYTE *)a2 + 48) || !*((_BYTE *)v21 + 40) || v146)
              && ((int)v41 > (int)v142 || SHIDWORD(v41) > SHIDWORD(v142) || !*((_BYTE *)v21 + 40)))
            {
              goto LABEL_150;
            }
            result = std::optional<WebCore::VideoPreset>::operator=[abi:sn180100]<WebCore::VideoPreset const&,void>((uint64_t)&v142, (uint64_t *)v21);
            v127 = LODWORD(v5);
            v43 = v4;
            goto LABEL_147;
          }
LABEL_109:
          for (j = 0; j != 68; j += 2)
          {
            v45 = WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[j];
            v46 = *(_QWORD *)v21;
            if (v45 > (int)*(_QWORD *)v21)
              break;
            v47 = WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[j + 1];
            if (v47 > SHIDWORD(v46))
              break;
            if (v47 == (_DWORD)v4)
              v48 = 0;
            else
              v48 = v42;
            v49 = v45 == LODWORD(v5) || v6 == 0;
            if (v49
              && (v48 & 1) == 0
              && (!v148
               || *((_BYTE *)a2 + 48) && *((_BYTE *)v21 + 40) && !v146
               || (int)v46 <= (int)v142 && SHIDWORD(v46) <= SHIDWORD(v142) && *((_BYTE *)v21 + 40)))
            {
              result = std::optional<WebCore::VideoPreset>::operator=[abi:sn180100]<WebCore::VideoPreset const&,void>((uint64_t)&v142, (uint64_t *)v21);
              v42 = v130;
              v127 = WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[j];
              v126 = WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[j + 1];
            }
          }
          v7 = v131;
          if (v148)
          {
            v50 = *((unsigned __int8 *)v21 + 40);
            v51 = !*((_BYTE *)a2 + 48) || v50 == 0;
            if (v51 || v146 != 0)
            {
              v53 = *v21 <= (int)v142 && v21[1] <= SHIDWORD(v142);
              if (!v53 || v50 == 0)
                goto LABEL_150;
            }
          }
          result = std::optional<WebCore::VideoPreset>::operator=[abi:sn180100]<WebCore::VideoPreset const&,void>((uint64_t)&v142, (uint64_t *)v21);
          if (!v6)
          {
            if (!v131)
              goto LABEL_278;
            v126 = v4;
            v127 = *v21 * (int)v4 / v21[1];
            goto LABEL_150;
          }
          v127 = LODWORD(v5);
          v43 = (v21[1] * LODWORD(v5) / *v21);
LABEL_147:
          v126 = v43;
        }
      }
LABEL_150:
      v21 += 14;
      if (v21 == (int *)v22)
        goto LABEL_153;
    }
    v39 = 0;
    while (1)
    {
      if (WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[v39] == LODWORD(v5))
      {
        v40 = WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[v39 + 1];
        v132 = LODWORD(v5);
        v133 = v40;
        if ((((uint64_t (*)(uint64_t (***)(), int *))(*v36)[2])(v36, &v132) & 1) != 0)
          goto LABEL_65;
      }
      v39 += 2;
      if (v39 == 68)
        goto LABEL_83;
    }
  }
  v127 = 0;
  v126 = 0;
  v123 = 0;
  v122 = 0;
LABEL_153:
  if (!v162 && !v155 && !v148)
  {
    if (v121 == 1)
    {
      v132 = LODWORD(v119);
      LOBYTE(v133) = BYTE4(v119);
      v134 = v120;
      v135 = BYTE4(v120);
      v136 = v15;
      v137 = v8;
      v138 = v16;
      v139 = v9;
    }
    else
    {
      if (!(v8 | v9))
      {
        WTFLogAlways();
        result = (WTF *)(*(uint64_t (**)(double *))(*(_QWORD *)v14 + 440))(v14);
        v89 = *((_DWORD *)result + 3);
        if (v89)
        {
          v90 = *(int **)result;
          v91 = *(_QWORD *)result + 56 * v89;
          do
          {
            result = (WTF *)WTFLogAlways();
            v92 = v90[5];
            if ((_DWORD)v92)
            {
              v93 = *((_QWORD *)v90 + 1);
              v94 = v93 + 16 * v92;
              do
              {
                v93 += 16;
                result = (WTF *)WTFLogAlways();
              }
              while (v93 != v94);
            }
            v90 += 14;
          }
          while (v90 != (int *)v91);
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 88) = 0;
        goto LABEL_261;
      }
      v132 = LODWORD(v119);
      LOBYTE(v133) = BYTE4(v119);
      v134 = v120;
      v135 = BYTE4(v120);
      LOBYTE(v136) = 0;
      v137 = 0;
      LOBYTE(v138) = 0;
      v139 = 0;
    }
    v140 = 0;
    result = (WTF *)WebCore::RealtimeVideoCaptureSource::bestSupportedSizeFrameRateAndZoom(v14, &v132, 0);
LABEL_261:
    if (v148)
    {
      v113 = cf;
      cf = 0;
      if (v113)
        CFRelease(v113);
      result = v143;
      if (v143)
      {
        v143 = 0;
        LODWORD(v144) = 0;
        result = (WTF *)WTF::fastFree(result, v19);
      }
    }
    if (v155)
    {
      v114 = v154;
      v154 = 0;
      if (v114)
        CFRelease(v114);
      result = v150;
      if (v150)
      {
        v150 = 0;
        LODWORD(v151) = 0;
        result = (WTF *)WTF::fastFree(result, v19);
      }
    }
    if (v162)
    {
      v115 = v161;
      v161 = 0;
      if (v115)
        CFRelease(v115);
      result = (WTF *)v157;
      if (v157)
      {
        v157 = 0;
        LODWORD(v158) = 0;
        return (WTF *)WTF::fastFree(result, v19);
      }
    }
    return result;
  }
  if (v162)
  {
    v55 = a4;
    if (!*((_BYTE *)a2 + 48) || v160)
      goto LABEL_170;
    if (v155 && v153)
      goto LABEL_198;
    if (!v148 || !v146)
    {
LABEL_170:
      if (!v8)
      {
        v56 = v14[29];
        if (HIDWORD(v158))
        {
          v57 = 16 * HIDWORD(v158);
          v58 = 1.79769313e308;
          v59 = v57;
          v60 = v157;
          do
          {
            v61 = *v60;
            v60 += 2;
            v62 = v61;
            if (v58 > v61)
              v58 = v62;
            v59 -= 16;
          }
          while (v59);
          v63 = v157 + 1;
          v64 = 0.0;
          do
          {
            v65 = *v63;
            v63 += 2;
            v66 = v65;
            if (v64 < v65)
              v64 = v66;
            v57 -= 16;
          }
          while (v57);
        }
        else
        {
          v64 = 0.0;
          v58 = 1.79769313e308;
        }
        if (v64 < v56 || v58 > v56)
          v15 = v64;
        else
          v15 = v14[29];
      }
      v96 = v156;
      if (!v9)
      {
        v97 = v14[35];
        v98 = *((double *)&v159 + 1);
        if (*((double *)&v159 + 1) >= v97)
          v98 = v14[35];
        if (*(double *)&v159 <= v97)
          v16 = v98;
        else
          v16 = *(double *)&v159;
      }
      v99 = v157;
      *(_OWORD *)(a4 + 24) = v159;
      *(_BYTE *)(a4 + 40) = v160;
      v100 = v161;
      v161 = 0;
      *(_QWORD *)a4 = v96;
      *(_QWORD *)(a4 + 8) = v99;
      v101 = v158;
      v157 = 0;
      v158 = 0;
      *(_QWORD *)(a4 + 16) = v101;
      *(_QWORD *)(a4 + 48) = v100;
      *(_BYTE *)(a4 + 56) = 1;
      *(_QWORD *)(a4 + 64) = v96;
      *(double *)(a4 + 72) = v15;
      *(double *)(a4 + 80) = v16;
      goto LABEL_260;
    }
    if (!v155)
      goto LABEL_186;
  }
  else
  {
    v55 = a4;
    if (!v155)
      goto LABEL_186;
    if (!*((_BYTE *)a2 + 48))
    {
LABEL_198:
      if (!v8)
      {
        v78 = v14[29];
        if (HIDWORD(v151))
        {
          v79 = 16 * HIDWORD(v151);
          v80 = 1.79769313e308;
          v81 = v79;
          v82 = v150;
          do
          {
            v83 = *(double *)v82;
            v82 = (WTF *)((char *)v82 + 16);
            v84 = v83;
            if (v80 > v83)
              v80 = v84;
            v81 -= 16;
          }
          while (v81);
          v85 = (double *)((char *)v150 + 8);
          v86 = 0.0;
          do
          {
            v87 = *v85;
            v85 += 2;
            v88 = v87;
            if (v86 < v87)
              v86 = v88;
            v79 -= 16;
          }
          while (v79);
        }
        else
        {
          v86 = 0.0;
          v80 = 1.79769313e308;
        }
        if (v86 < v78 || v80 > v78)
          v15 = v86;
        else
          v15 = v14[29];
      }
      if (!v9)
      {
        v103 = v14[35];
        v16 = *(double *)&v152;
        if (*(double *)&v152 <= v103)
        {
          v16 = v14[35];
          if (*((double *)&v152 + 1) < v103)
            v16 = *((double *)&v152 + 1);
        }
      }
      v104 = v149;
      v105 = v150;
      *(_OWORD *)(v55 + 24) = v152;
      *(_BYTE *)(v55 + 40) = v153;
      v106 = v154;
      v154 = 0;
      v107 = v123 | (unint64_t)(v122 << 32);
      *(_QWORD *)v55 = v104;
      *(_QWORD *)(v55 + 8) = v105;
      v108 = v151;
      v150 = 0;
      v151 = 0;
      goto LABEL_258;
    }
  }
  if (v153 || !v148 || !v146)
    goto LABEL_198;
LABEL_186:
  if (!v8)
  {
    if (!v148)
      goto LABEL_277;
    v67 = v14[29];
    if (HIDWORD(v144))
    {
      v68 = 16 * HIDWORD(v144);
      v69 = 1.79769313e308;
      v70 = v68;
      v71 = v143;
      do
      {
        v72 = *(double *)v71;
        v71 = (WTF *)((char *)v71 + 16);
        v73 = v72;
        if (v69 > v72)
          v69 = v73;
        v70 -= 16;
      }
      while (v70);
      v74 = (double *)((char *)v143 + 8);
      v75 = 0.0;
      do
      {
        v76 = *v74;
        v74 += 2;
        v77 = v76;
        if (v75 < v76)
          v75 = v77;
        v68 -= 16;
      }
      while (v68);
    }
    else
    {
      v75 = 0.0;
      v69 = 1.79769313e308;
    }
    if (v75 < v67 || v69 > v67)
      v15 = v75;
    else
      v15 = v14[29];
  }
  if (v9)
  {
    if (!v148)
    {
      v107 = v127 | (v126 << 32);
      *(_BYTE *)v55 = 0;
      *(_BYTE *)(v55 + 56) = 0;
LABEL_259:
      *(_QWORD *)(v55 + 64) = v107;
      *(double *)(v55 + 72) = v15;
      *(double *)(v55 + 80) = v16;
LABEL_260:
      *(_BYTE *)(v55 + 88) = 1;
      goto LABEL_261;
    }
    goto LABEL_257;
  }
  if (v148)
  {
    v110 = v14[35];
    v16 = *(double *)&v145;
    if (*(double *)&v145 <= v110)
    {
      v16 = v14[35];
      if (*((double *)&v145 + 1) < v110)
        v16 = *((double *)&v145 + 1);
    }
LABEL_257:
    v111 = v142;
    v112 = v143;
    *(_OWORD *)(v55 + 24) = v145;
    *(_BYTE *)(v55 + 40) = v146;
    v106 = cf;
    cf = 0;
    v107 = v127 | (v126 << 32);
    *(_QWORD *)v55 = v111;
    *(_QWORD *)(v55 + 8) = v112;
    v108 = v144;
    v143 = 0;
    v144 = 0;
LABEL_258:
    *(_QWORD *)(v55 + 16) = v108;
    *(_QWORD *)(v55 + 48) = v106;
    *(_BYTE *)(v55 + 56) = 1;
    goto LABEL_259;
  }
LABEL_277:
  __break(1u);
LABEL_278:
  v116 = std::__throw_bad_optional_access[abi:sn180100]();
  return (WTF *)WebCore::RealtimeVideoCaptureSource::frameRateRangeIncludesRate(v118, v116, v117);
}

BOOL WebCore::RealtimeVideoCaptureSource::frameRateRangeIncludesRate(double a1, uint64_t a2, double *a3)
{
  return a1 + -0.001 <= a3[1] && a1 + 0.001 >= *a3;
}

BOOL WebCore::RealtimeVideoCaptureSource::presetSupportsFrameRate(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  _BOOL8 result;

  v3 = *(unsigned int *)(a3 + 20);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(double **)(a3 + 8);
  v5 = &v4[2 * v3];
  v6 = a1 + 0.001;
  v7 = a1 + -0.001;
  do
  {
    result = v7 <= v4[1] && v6 >= *v4;
    if (result)
      break;
    v4 += 2;
  }
  while (v4 != v5);
  return result;
}

BOOL WebCore::RealtimeVideoCaptureSource::presetSupportsZoom(double a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a3 + 32) >= a1 && *(double *)(a3 + 24) <= a1;
}

uint64_t WebCore::RealtimeVideoCaptureSource::supportsCaptureSize(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  int v15;

  v5 = a3;
  v6 = a3 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    v7 = a2;
    if (v6)
    {
      v14 = a2;
      v15 = a3;
      return (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)*a4 + 16))(*a4, &v14);
    }
    v10 = 0;
    while (1)
    {
      if (WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[v10] == v7)
      {
        v11 = WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[v10 + 1];
        v14 = v7;
        v15 = v11;
        if (((*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)*a4 + 16))(*a4, &v14) & 1) != 0)
          break;
      }
      v10 += 2;
      if (v10 == 68)
        return 0;
    }
    return 1;
  }
  if (v6)
  {
    v9 = 0;
    while (1)
    {
      if (WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[v9 + 1] == v5)
      {
        v14 = WebCore::RealtimeVideoCaptureSource::standardVideoSizes(void)::sizes[v9];
        v15 = v5;
        if (((*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)*a4 + 16))(*a4, &v14) & 1) != 0)
          break;
      }
      v9 += 2;
      if (v9 == 68)
        return 0;
    }
    return 1;
  }
  v12 = std::__throw_bad_optional_access[abi:sn180100]();
  return (uint64_t)std::optional<WebCore::VideoPreset>::operator=[abi:sn180100]<WebCore::VideoPreset const&,void>(v12, v13);
}

WTF *std::optional<WebCore::VideoPreset>::operator=[abi:sn180100]<WebCore::VideoPreset const&,void>(uint64_t a1, uint64_t *a2)
{
  int v4;
  WTF *v5;
  uint64_t v6;
  WTF *result;
  __int128 v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  const void *v14;

  v4 = *(unsigned __int8 *)(a1 + 56);
  v6 = *a2;
  v5 = (WTF *)(a2 + 1);
  *(_QWORD *)a1 = v6;
  result = (WTF *)(a1 + 8);
  if (v4)
  {
    WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(result, v5);
    v8 = *(_OWORD *)(a2 + 3);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_OWORD *)(a1 + 24) = v8;
    v9 = (const void *)a2[6];
    if (v9)
      CFRetain(v9);
    v10 = *(const void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v9;
    if (v10)
      CFRelease(v10);
    return (WTF *)a1;
  }
  v11 = *((unsigned int *)a2 + 5);
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  *(_DWORD *)(a1 + 20) = v11;
  if (!(_DWORD)v11)
  {
LABEL_9:
    v13 = *(_OWORD *)(a2 + 3);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_OWORD *)(a1 + 24) = v13;
    v14 = (const void *)a2[6];
    *(_QWORD *)(a1 + 48) = v14;
    if (v14)
      CFRetain(v14);
    *(_BYTE *)(a1 + 56) = 1;
    return (WTF *)a1;
  }
  if (!(v11 >> 28))
  {
    v12 = (void *)WTF::fastMalloc((WTF *)(16 * v11));
    *(_DWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 8) = v12;
    memcpy(v12, (const void *)a2[1], 16 * *((unsigned int *)a2 + 5));
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RealtimeVideoCaptureSource::dispatchVideoFrameToObservers(uint64_t a1, WebCore::VideoFrame *a2, uint64_t a3)
{
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  double *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  unint64_t v44;
  __int128 v45;
  _OWORD v47[3];
  uint64_t v48;
  __int128 v49;

  v49 = *((_OWORD *)a2 + 1);
  WTF::MediaTime::toDouble((WTF::MediaTime *)&v49);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 392);
  v9 = *(_QWORD *)(a1 + 400);
  if (v8)
  {
    if (v9 + 1 != v8)
      goto LABEL_18;
    LODWORD(v10) = *(_DWORD *)(a1 + 416);
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 416);
    if (v9)
    {
      if (v9 != v10 - 1)
        goto LABEL_18;
    }
    else if ((_DWORD)v10)
    {
      goto LABEL_18;
    }
  }
  v11 = v10;
  v12 = ((unint64_t)v10 >> 2) + v10;
  if (v12 <= 0xF)
    v12 = 15;
  if (v12 >= 0x1FFFFFFF)
  {
LABEL_66:
    __break(0xC471u);
    JUMPOUT(0x19629EAE4);
  }
  v13 = *(char **)(a1 + 408);
  v14 = v12 + 1;
  v15 = (char *)WTF::fastMalloc((WTF *)(8 * (v12 + 1)));
  *(_DWORD *)(a1 + 416) = v14;
  *(_QWORD *)(a1 + 408) = v15;
  v17 = *(_QWORD *)(a1 + 392);
  v16 = *(_QWORD *)(a1 + 400);
  if (v17 <= v16)
  {
    memcpy(&v15[8 * v17], &v13[8 * v17], 8 * v16 - 8 * v17);
    if (!v13)
      goto LABEL_18;
  }
  else
  {
    memcpy(v15, v13, 8 * v16);
    v18 = *(_QWORD *)(a1 + 392);
    v19 = v18 - v11 + *(unsigned int *)(a1 + 416);
    memcpy((void *)(*(_QWORD *)(a1 + 408) + 8 * v19), &v13[8 * v18], 8 * v11 - 8 * v18);
    *(_QWORD *)(a1 + 392) = v19;
    if (!v13)
      goto LABEL_18;
  }
  if (*(char **)(a1 + 408) == v13)
  {
    *(_QWORD *)(a1 + 408) = 0;
    *(_DWORD *)(a1 + 416) = 0;
  }
  WTF::fastFree((WTF *)v13, v20);
LABEL_18:
  v21 = *(_QWORD *)(a1 + 400);
  v22 = *(double **)(a1 + 408);
  v22[v21] = v7;
  v23 = *(unsigned int *)(a1 + 416);
  if (v21 == v23 - 1)
    v24 = 0;
  else
    v24 = v21 + 1;
  *(_QWORD *)(a1 + 400) = v24;
  v25 = *(_QWORD *)(a1 + 392);
  if (v25 <= v24)
    v26 = 0;
  else
    v26 = v23;
  v27 = v24 + v26;
  v28 = v27 - v25;
  if (v27 != v25)
  {
    v29 = v7 + -2.0;
    while (1)
    {
      v30 = *(_QWORD *)(a1 + 392);
      if (v30 == v24)
        goto LABEL_66;
      v31 = v22[v30];
      if (v30 == v23 - 1)
        v32 = 0;
      else
        v32 = v30 + 1;
      *(_QWORD *)(a1 + 392) = v32;
      if (v29 >= v31)
        goto LABEL_51;
      if (v32)
      {
        if (v24 + 1 == v32)
          goto LABEL_38;
      }
      else if (v24)
      {
        if (v24 == v23 - 1)
          goto LABEL_38;
      }
      else if (!v23)
      {
LABEL_38:
        v33 = v23 + (v23 >> 2);
        if (v33 <= 0xF)
          v33 = 15;
        if (v33 >= 0x1FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x19629EB0CLL);
        }
        v34 = v33 + 1;
        v35 = (char *)WTF::fastMalloc((WTF *)(8 * (v33 + 1)));
        *(_DWORD *)(a1 + 416) = v34;
        *(_QWORD *)(a1 + 408) = v35;
        v37 = *(_QWORD *)(a1 + 392);
        v36 = *(_QWORD *)(a1 + 400);
        if (v37 <= v36)
        {
          memcpy(&v35[8 * v37], &v22[v37], 8 * v36 - 8 * v37);
        }
        else
        {
          memcpy(v35, v22, 8 * v36);
          v38 = *(_QWORD *)(a1 + 392);
          v39 = v38 - v23 + *(unsigned int *)(a1 + 416);
          memcpy((void *)(*(_QWORD *)(a1 + 408) + 8 * v39), &v22[v38], 8 * v23 - 8 * v38);
          *(_QWORD *)(a1 + 392) = v39;
        }
        if (*(double **)(a1 + 408) == v22)
        {
          *(_QWORD *)(a1 + 408) = 0;
          *(_DWORD *)(a1 + 416) = 0;
        }
        WTF::fastFree((WTF *)v22, v40);
        v22 = *(double **)(a1 + 408);
      }
      v41 = *(_QWORD *)(a1 + 400);
      v22[v41] = v31;
      v23 = *(unsigned int *)(a1 + 416);
      if (v41 == v23 - 1)
        v24 = 0;
      else
        v24 = v41 + 1;
      *(_QWORD *)(a1 + 400) = v24;
LABEL_51:
      if (!--v28)
      {
        v25 = *(_QWORD *)(a1 + 392);
        break;
      }
    }
  }
  if (v25 == v24)
  {
    __break(0xC471u);
    JUMPOUT(0x19629EB04);
  }
  if (v24)
    v42 = v24;
  else
    v42 = v23;
  v43 = v22[v42 - 1] - v22[v25];
  if (v43 > 1.0)
  {
    if (v25 <= v24)
      v44 = 0;
    else
      v44 = v23;
    *(double *)(a1 + 424) = (double)(v24 + v44 - v25) / v43;
  }
  v45 = *(_OWORD *)(a3 + 16);
  v47[0] = *(_OWORD *)a3;
  v47[1] = v45;
  v47[2] = *(_OWORD *)(a3 + 32);
  v48 = *(_QWORD *)(a3 + 48);
  return WebCore::RealtimeMediaSource::videoFrameAvailable(a1, a2, (uint64_t)v47);
}

WTF *WebCore::RealtimeVideoCaptureSource::bestSupportedSizeFrameRateAndZoomConsideringObservers@<X0>(WTF *a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF *result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)a1 + 128))(a1);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = a2[2];
  v11 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a1 + 74) >= 2u)
  {
    if (*((_BYTE *)a2 + 4) && *(_DWORD *)a2 <= *(_DWORD *)result)
    {
      LOBYTE(v8) = 0;
      BYTE4(v8) = 0;
    }
    if (*((_BYTE *)a2 + 12) && *((_DWORD *)a2 + 2) <= *((_DWORD *)result + 1))
    {
      BYTE8(v8) = 0;
      BYTE12(v8) = 0;
    }
    if (*((_BYTE *)a2 + 24) && *((double *)a2 + 2) <= *((float *)result + 2))
    {
      LOBYTE(v9) = 0;
      BYTE8(v9) = 0;
    }
  }
  if (BYTE4(v8) || BYTE12(v8) || BYTE8(v9) || BYTE8(v10))
    return WebCore::RealtimeVideoCaptureSource::bestSupportedSizeFrameRateAndZoom(a1, (double *)&v8, 1, (uint64_t)a3);
  *a3 = 0;
  a3[88] = 0;
  return result;
}

uint64_t WebCore::RealtimeVideoCaptureSource::setSizeFrameRateAndZoom(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  BOOL v6;
  double v7;
  double v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::Logger *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CFTypeRef v55;
  double v56[4];
  WTF::Logger *v57;
  WTF *v58;
  int v59;
  CFTypeRef cf;
  char v61;
  double v62;
  double v63;
  unsigned __int8 v64;
  WTF::Logger *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  __int128 buf;
  const char *v71;
  _QWORD v72[3];

  v72[1] = *MEMORY[0x1E0C80C00];
  result = (uint64_t)WebCore::RealtimeVideoCaptureSource::bestSupportedSizeFrameRateAndZoomConsideringObservers((WTF *)a1, a2, &v57);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = v64;
  if (v4)
    v6 = v64 == 0;
  else
    v6 = 0;
  if (v6)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v7 = *(double *)(a1 + 48);
    *(_QWORD *)&v56[0] = result;
    v56[1] = v8;
    *(_QWORD *)&v56[2] = "setSizeFrameRateAndZoom";
    v56[3] = v7;
    if (!*(_BYTE *)(v4 + 12))
    {
LABEL_72:
      v5 = v64;
      goto LABEL_73;
    }
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v56);
    result = WTF::String::String((WTF::String *)&v67, "unable to find a preset that would match the size, frame rate and zoom");
    if (v68)
    {
      v9 = *((_DWORD *)v68 + 1);
      if (v67)
      {
LABEL_9:
        v10 = *((_DWORD *)v67 + 1);
LABEL_10:
        if ((v10 | v9) < 0 || (result = (v9 + v10), __OFADD__(v9, v10)))
        {
          v69 = 0;
          goto LABEL_108;
        }
        if (v68)
        {
          v11 = *((_DWORD *)v68 + 4);
          v12 = (v11 >> 2) & 1;
          if (v67 && (v11 & 4) != 0)
            goto LABEL_15;
        }
        else
        {
          if (v67)
          {
LABEL_15:
            v12 = (*((unsigned __int8 *)v67 + 16) >> 2) & 1;
            goto LABEL_16;
          }
          v12 = 1;
        }
LABEL_16:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, (uint64_t)v68, (uint64_t)v67, &v69);
        if (v69)
        {
          v14 = v67;
          v67 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v13);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = v68;
          v68 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v13);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = qword_1ECE7CD60;
          v17 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v17)
          {
            WTF::String::utf8();
            v19 = v65 ? (char *)v65 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v19;
            _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v17 = (uint64_t)v65;
            v65 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 1)
                v17 = WTF::fastFree((WTF *)v17, v18);
              else
                --*(_DWORD *)v17;
            }
          }
          if (WebCore::LogWebRTC && byte_1ECE7CD50)
          {
            v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v21 = *v20;
              if ((v21 & 1) != 0)
                break;
              v22 = __ldaxr(v20);
              if (v22 == v21)
              {
                if (!__stxr(v21 | 1, v20))
                {
                  v23 = WTF::Logger::observers((WTF::Logger *)v17);
                  v24 = *(unsigned int *)(v23 + 12);
                  if ((_DWORD)v24)
                  {
                    v25 = *(uint64_t **)v23;
                    v26 = *(_QWORD *)v23 + 8 * v24;
                    do
                    {
                      v27 = *v25;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v56);
                      LODWORD(v71) = 0;
                      WTF::String::String((WTF::String *)v72, "unable to find a preset that would match the size, frame rate and zoom");
                      v65 = 0;
                      v66 = 0;
                      v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v66) = 2;
                      v65 = v28;
                      v29 = HIDWORD(v66);
                      *((_DWORD *)v28 + 4 * HIDWORD(v66)) = buf;
                      v30 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v28 + 2 * v29 + 1) = v30;
                      *((_DWORD *)v28 + 4 * (v29 + 1)) = (_DWORD)v71;
                      v31 = v72[0];
                      if (v72[0])
                        *(_DWORD *)v72[0] += 2;
                      *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
                      HIDWORD(v66) = v29 + 2;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, &WebCore::LogWebRTC, 1, &v65);
                      v32 = v65;
                      if (HIDWORD(v66))
                      {
                        v33 = 16 * HIDWORD(v66);
                        v34 = (WTF::StringImpl **)((char *)v65 + 8);
                        do
                        {
                          v35 = *v34;
                          *v34 = 0;
                          if (v35)
                          {
                            if (*(_DWORD *)v35 == 2)
                              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v18);
                            else
                              *(_DWORD *)v35 -= 2;
                          }
                          v34 += 2;
                          v33 -= 16;
                        }
                        while (v33);
                        v32 = v65;
                      }
                      if (v32)
                      {
                        v65 = 0;
                        LODWORD(v66) = 0;
                        WTF::fastFree(v32, v18);
                      }
                      v36 = (WTF::StringImpl *)v72[0];
                      v72[0] = 0;
                      if (v36)
                      {
                        if (*(_DWORD *)v36 == 2)
                          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v18);
                        else
                          *(_DWORD *)v36 -= 2;
                      }
                      v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v37)
                      {
                        if (*(_DWORD *)v37 == 2)
                          WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                        else
                          *(_DWORD *)v37 -= 2;
                      }
                      ++v25;
                    }
                    while (v25 != (uint64_t *)v26);
                  }
                  v38 = __ldxr(v20);
                  if (v38 == 1)
                  {
                    if (!__stlxr(0, v20))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          result = v69;
          v69 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_72;
        }
LABEL_108:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v9 = 0;
      if (v67)
        goto LABEL_9;
    }
    v10 = 0;
    goto LABEL_10;
  }
LABEL_73:
  if (v5)
  {
    std::__optional_storage_base<WebCore::VideoPreset,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::VideoPreset,false> const&>(a1 + 312, (uint64_t)&v57);
    if (!v64 || !v61)
      goto LABEL_106;
    v39 = v57;
    v65 = v57;
    result = (*(uint64_t (**)(uint64_t, WTF::Logger **, double, double))(*(_QWORD *)a1 + 424))(a1, &v57, v62, v63);
    if (*(WTF::Logger **)(a1 + 216) != v39)
    {
      v41 = *(_QWORD *)(a1 + 40);
      if (v41)
      {
        v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v43 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)&buf = v42;
        *((_QWORD *)&buf + 1) = v44;
        v71 = "setSize";
        v72[0] = v43;
        if (*(_BYTE *)(v41 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, (WebCore::IntSize *)&v65);
          v39 = v65;
        }
      }
      *(_QWORD *)(a1 + 216) = v39;
      result = WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(a1, 3u);
    }
    if (!v64)
      goto LABEL_106;
    v45 = v62;
    v56[0] = v62;
    if (*(double *)(a1 + 232) != v62)
    {
      v46 = *(_QWORD *)(a1 + 40);
      if (v46)
      {
        v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v48 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)&buf = v47;
        *((_QWORD *)&buf + 1) = v49;
        v71 = "setFrameRate";
        v72[0] = v48;
        if (*(_BYTE *)(v46 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, v56);
          v45 = v56[0];
        }
      }
      *(double *)(a1 + 232) = v45;
      result = WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(a1, 4u);
      if (!v64)
LABEL_106:
        __break(1u);
    }
    v50 = v63;
    v56[0] = v63;
    if (*(double *)(a1 + 280) == v63)
      goto LABEL_92;
    v51 = *(_QWORD *)(a1 + 40);
    if (v51)
    {
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v53 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)&buf = v52;
      *((_QWORD *)&buf + 1) = v54;
      v71 = "setZoom";
      v72[0] = v53;
      if (*(_BYTE *)(v51 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, v56);
        v50 = v56[0];
      }
    }
    *(double *)(a1 + 280) = v50;
    result = WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(a1, 0x4000u);
    if (v64)
    {
LABEL_92:
      if (v61)
      {
        v55 = cf;
        cf = 0;
        if (v55)
          CFRelease(v55);
        result = (uint64_t)v58;
        if (v58)
        {
          v58 = 0;
          v59 = 0;
          return WTF::fastFree((WTF *)result, v40);
        }
      }
    }
  }
  return result;
}

WTF *WebCore::RealtimeVideoCaptureSource::takePhotoInternal@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v6;
  __int128 v7;
  _QWORD v8[2];

  v8[0] = "Not supported";
  v8[1] = 14;
  v6 = 0uLL;
  *(_QWORD *)&v7 = "takePhotoInternal";
  *((_QWORD *)&v7 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E31F73A0;
  v3 = v7;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = v2 + 112;
  *(_QWORD *)(v2 + 104) = 1;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 136) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v4, 4u, "creating ", v2);
  *a1 = v2;
  return WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::reject<WTF::ASCIILiteral,std::enable_if<true,void>>(v2, (uint64_t)v8, (WTF::Logger::LogSiteIdentifier *)&v6);
}

void WebCore::RealtimeVideoCaptureSource::takePhoto(int *a1@<X0>, uint64_t a2@<X1>, WTF::Logger::LogSiteIdentifier *a3@<X8>)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  const void *v13;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  WTF::Lock *v18;
  int v19;
  uint64_t v20;
  double *v21;
  double v22;
  int v23;
  int v24;
  double v25;
  double v26;
  int v27;
  double v28;
  int v29;
  int v30;
  int v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  unsigned int *v36;
  void *v37;
  __n128 v38;
  CFTypeRef v39;
  uint64_t v40;
  uint64_t v41;
  WTF::Lock *v42;
  uint64_t v43;
  void *v44;
  CFTypeRef v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  unsigned int *v50;
  uint64_t v51;
  WTF::Lock *v52;
  uint64_t v53;
  WTF::Lock *v54;
  WTF::RunLoop *v55;
  WTF::Lock *v56;
  uint64_t v57;
  uint64_t v58;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  WTF::Lock *v71;
  unsigned __int8 *v72;
  uint64_t *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  WTF::Lock *v80;
  void *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  WTF::Lock *v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  char v102;
  CFTypeRef v103;
  WTF *v104;
  unsigned int *v105;
  int v106;
  CFTypeRef v107;
  CFTypeRef v108;
  WTF *v109;
  int v110;
  __int128 v111;
  WTF::Lock *v112;
  __int128 v113;
  char v114;
  WTF::Lock *v115[2];
  __int128 v116;
  const char *v117;
  uint64_t v118;
  CFTypeRef cf;
  char v120;
  char v121;
  __int128 v122;
  __int128 v123;
  CFTypeRef v124;
  char v125;
  double v126;
  double v127;
  unsigned __int8 v128;
  __int128 v129;
  const char *v130;
  uint64_t v131;
  char v132;
  char v133;
  char v134;

  if (!*((_BYTE *)a1 + 294))
  {
    v13 = (const void *)a2;
    if (*(_BYTE *)(a2 + 16))
    {
      if (*(_BYTE *)(a2 + 32))
      {
        LOBYTE(v122) = 0;
        v128 = 0;
        v15 = 1;
        goto LABEL_36;
      }
      v24 = (int)*(double *)(a2 + 8);
      v25 = (double)a1[56];
      v26 = (double)a1[57];
      v21 = (double *)(a2 + 24);
      v27 = (int)(v25 / v26 * (double)v24);
      if (v24)
        v28 = (double)v24;
      else
        v28 = (double)(int)(v26 / v25 * 0.0);
      if (v24)
        v29 = v27;
      else
        v29 = 0;
      *(double *)(a2 + 8) = v28;
      *(_BYTE *)(a2 + 32) = 1;
      v22 = (double)v29;
    }
    else
    {
      LODWORD(v20) = 1;
      if (!*(_BYTE *)(a2 + 32))
      {
        v15 = 0;
LABEL_35:
        LOBYTE(v122) = 0;
        v128 = 0;
        if ((_DWORD)v20)
          goto LABEL_79;
LABEL_36:
        v30 = (int)*(double *)(a2 + 24);
        v31 = (int)*(double *)(a2 + 8);
        v32 = (int *)(*(uint64_t (**)(int *))(*(_QWORD *)a1 + 128))(a1);
        if (v15)
          v33 = v30;
        else
          v33 = 0;
        LODWORD(v129) = v33;
        BYTE4(v129) = v15;
        if (v15)
          v34 = v31;
        else
          v34 = 0;
        DWORD2(v129) = v34;
        BYTE12(v129) = v15;
        v130 = 0;
        LOBYTE(v131) = 0;
        v132 = 0;
        v133 = 0;
        v134 = 0;
        if (a1[74] < 2)
        {
          v35 = v15;
        }
        else
        {
          v35 = v15;
          if (v15)
          {
            v35 = v15;
            if (v33 <= *v32)
            {
              v35 = 0;
              LOBYTE(v129) = 0;
              BYTE4(v129) = 0;
            }
          }
          if (v15 && v34 <= v32[1])
          {
            v15 = 0;
            BYTE8(v129) = 0;
            BYTE12(v129) = 0;
          }
        }
        if (v35 | v15)
        {
          WebCore::RealtimeVideoCaptureSource::bestSupportedSizeFrameRateAndZoom((WTF *)a1, (double *)&v129, 1, (uint64_t)v115);
        }
        else
        {
          LOBYTE(v115[0]) = 0;
          v121 = 0;
        }
        v38 = std::__optional_storage_base<WebCore::RealtimeVideoCaptureSource::CaptureSizeFrameRateAndZoom,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeVideoCaptureSource::CaptureSizeFrameRateAndZoom,false>>((uint64_t)&v122, (uint64_t *)v115);
        if (v121 && v120)
        {
          v39 = cf;
          cf = 0;
          if (v39)
            CFRelease(v39);
          v36 = (unsigned int *)v115[1];
          if (v115[1])
          {
            v115[1] = 0;
            LODWORD(v116) = 0;
            v36 = (unsigned int *)WTF::fastFree((WTF *)v36, v37);
          }
        }
        v40 = *((_QWORD *)a1 + 5);
        if (v40)
        {
          LODWORD(v20) = v128;
          if (v128)
          {
LABEL_64:
            v43 = *((unsigned __int8 *)a1 + 368);
            if (!*((_BYTE *)a1 + 368))
              goto LABEL_75;
            if (!v125)
              goto LABEL_190;
            v20 = *((_QWORD *)a1 + 39);
            if (v20 != (_QWORD)v122)
            {
LABEL_75:
              if ((_DWORD)v43)
              {
                v47 = *((_QWORD *)a1 + 39);
                v48 = a1[83];
                v106 = v48;
                if ((_DWORD)v48)
                {
                  if (v48 >> 28)
                  {
                    __break(0xC471u);
                    return;
                  }
                  v109 = (WTF *)WTF::fastMalloc((WTF *)(16 * v48));
                  memcpy(v109, *((const void **)a1 + 40), 16 * a1[83]);
                }
                else
                {
                  v109 = 0;
                }
                v38 = *((__n128 *)a1 + 21);
                *(__n128 *)v115 = v38;
                LOBYTE(v116) = *((_BYTE *)a1 + 352);
                v49 = (const void *)*((_QWORD *)a1 + 45);
                if (v49)
                {
                  v107 = (CFTypeRef)*((_QWORD *)a1 + 45);
                  CFRetain(v49);
                }
                else
                {
                  v107 = 0;
                }
              }
              else
              {
                v47 = 0;
                v106 = v20;
              }
              v36 = (unsigned int *)(*(uint64_t (**)(int *, __n128))(*(_QWORD *)a1 + 96))(a1, v38);
              v50 = v36;
              if ((_DWORD)v43)
              {
                v38 = *(__n128 *)v115;
                v113 = *(_OWORD *)v115;
                v114 = v116;
                v110 = 1;
              }
              else
              {
                v47 = 0;
                v110 = 0;
              }
              v6 = *((_QWORD *)a1 + 29);
              v5 = *((_QWORD *)a1 + 35);
              if (!*((_BYTE *)a1 + 289))
              {
                v43 = 1;
                v36 = (unsigned int *)(*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)a1 + 80))(a1, 1);
                *((_BYTE *)a1 + 432) = 1;
              }
              if (v128)
              {
                std::__optional_storage_base<WebCore::VideoPreset,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::VideoPreset,false> const&>((uint64_t)(a1 + 78), (uint64_t)&v122);
                if (v128)
                {
                  if (v125)
                  {
                    *(_QWORD *)&v129 = v122;
                    v36 = (unsigned int *)(*(uint64_t (**)(int *))(*(_QWORD *)a1 + 328))(a1);
                    if (v128)
                    {
                      (*(void (**)(int *, __int128 *, double, double))(*(_QWORD *)a1 + 424))(a1, &v122, v126, v127);
                      if ((_QWORD)v129 != *((_QWORD *)a1 + 27))
                      {
                        v51 = *((_QWORD *)a1 + 5);
                        if (v51)
                        {
                          v52 = (WTF::Lock *)(*(uint64_t (**)(int *))(*(_QWORD *)a1 + 24))(a1);
                          v53 = *((_QWORD *)a1 + 6);
                          v115[0] = v52;
                          v115[1] = v54;
                          *(_QWORD *)&v116 = "setSize";
                          *((_QWORD *)&v116 + 1) = v53;
                          if (*(_BYTE *)(v51 + 12))
                            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v115, (WebCore::IntSize *)&v129);
                        }
                        *((_QWORD *)a1 + 27) = v129;
                        WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers((uint64_t)a1, 3u);
                      }
                      v105 = v50;
                      (*(void (**)(int *))(*(_QWORD *)a1 + 336))(a1);
                      v3 = 0;
LABEL_100:
                      v55 = (WTF::RunLoop *)(*(_QWORD *(**)(WTF::Lock **__return_ptr, int *, const void *))(*(_QWORD *)a1 + 448))(&v112, a1, v13);
                      v56 = v112;
                      v57 = WTF::RunLoop::main(v55);
                      v58 = *((_QWORD *)a1 + 38);
                      if (__ldaxr((unsigned __int8 *)v58))
                      {
                        __clrex();
                      }
                      else if (!__stxr(1u, (unsigned __int8 *)v58))
                      {
                        goto LABEL_104;
                      }
                      MEMORY[0x19AEA534C](v58);
LABEL_104:
                      ++*(_QWORD *)(v58 + 8);
                      v60 = __ldxr((unsigned __int8 *)v58);
                      if (v60 == 1)
                      {
                        if (!__stlxr(0, (unsigned __int8 *)v58))
                        {
                          if ((v3 & 1) != 0)
                          {
LABEL_107:
                            v47 = 0;
                            v111 = 0uLL;
                            goto LABEL_113;
                          }
LABEL_110:
                          if (v110)
                          {
                            LOBYTE(v58) = 0;
                            v108 = 0;
                            v43 = 0;
                            v129 = v113;
                            LOBYTE(v130) = v114;
                            v111 = 0uLL;
                            goto LABEL_114;
                          }
                          v47 = 0;
                          v111 = 0uLL;
                          LOBYTE(v58) = 1;
LABEL_113:
                          v108 = v107;
                          v43 = (uint64_t)v109;
LABEL_114:
                          v61 = WTF::fastMalloc((WTF *)0x50);
                          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 32))(v57);
                          v62 = WTF::fastMalloc((WTF *)0x78);
                          *(_QWORD *)v62 = &off_1E3419238;
                          *(_QWORD *)(v62 + 8) = a1;
                          *(_QWORD *)(v62 + 16) = a1;
                          *(_BYTE *)(v62 + 24) = 0;
                          *(_BYTE *)(v62 + 112) = 0;
                          if ((v3 & 1) == 0)
                          {
                            *(_BYTE *)(v62 + 80) = 0;
                            if ((v58 & 1) == 0)
                            {
                              *(_QWORD *)(v62 + 24) = v47;
                              *(_QWORD *)(v62 + 32) = v109;
                              *(_DWORD *)(v62 + 40) = v106;
                              *(_DWORD *)(v62 + 44) = v106;
                              *(_OWORD *)(v62 + 48) = v129;
                              *(_BYTE *)(v62 + 64) = (_BYTE)v130;
                              *(_QWORD *)(v62 + 72) = v107;
                              *(_BYTE *)(v62 + 80) = 1;
                              v107 = 0;
                              v109 = 0;
                            }
                            *(_QWORD *)(v62 + 88) = v105;
                            *(_QWORD *)(v62 + 96) = v6;
                            *(_QWORD *)(v62 + 104) = v5;
                            *(_BYTE *)(v62 + 112) = 1;
                          }
                          *(_DWORD *)(v61 + 8) = 1;
                          *(_QWORD *)(v61 + 16) = v57;
                          *(_OWORD *)(v61 + 24) = v111;
                          *(_QWORD *)(v61 + 40) = "takePhoto";
                          *(_QWORD *)(v61 + 48) = 0;
                          *(_WORD *)(v61 + 56) = 0;
                          *(_QWORD *)v61 = &off_1E34192B0;
                          *(_QWORD *)(v61 + 64) = 0;
                          *(_QWORD *)(v61 + 72) = v62;
                          v64 = (unsigned int *)((char *)v56 + 8);
                          do
                            v65 = __ldaxr(v64);
                          while (__stlxr(v65 + 1, v64));
                          v115[0] = v56;
                          v115[1] = (WTF::Lock *)v61;
                          v116 = v111;
                          v117 = "takePhoto";
                          v118 = 0;
                          v4 = v3 | v58;
                          if (((v3 | v58) & 1) == 0)
                          {
                            if (v107)
                              CFRelease(v107);
                            if (v109)
                              WTF::fastFree(v109, v63);
                          }
                          v129 = 0uLL;
                          v130 = "<completion promise>";
                          v131 = 0;
                          v66 = WTF::fastMalloc((WTF *)0x28);
                          v68 = *(_QWORD *)WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromiseProducer<std::enable_if<true,void>>(v66, 0, &v129);
                          if (v68)
                          {
                            v69 = (unsigned int *)(v68 + 8);
                            do
                              v70 = __ldaxr(v69);
                            while (__stlxr(v70 + 1, v69));
                          }
                          *(_QWORD *)a3 = v68;
                          v71 = v115[1];
                          v72 = (unsigned __int8 *)v115[1] + 57;
                          if (__ldaxr((unsigned __int8 *)v115[1] + 57))
                          {
                            __clrex();
                          }
                          else if (!__stxr(1u, v72))
                          {
                            goto LABEL_132;
                          }
                          MEMORY[0x19AEA534C](v72);
LABEL_132:
                          a3 = (WTF::Logger::LogSiteIdentifier *)&v116;
                          v74 = (uint64_t *)*((_QWORD *)v71 + 8);
                          *((_QWORD *)v71 + 8) = v66;
                          if (v74)
                          {
                            if (*v74)
                            {
                              WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(*v74);
                              v75 = (unsigned int *)*v74;
                              *v74 = 0;
                              if (v75)
                              {
                                v76 = v75 + 2;
                                do
                                {
                                  v77 = __ldaxr(v76);
                                  v78 = v77 - 1;
                                }
                                while (__stlxr(v78, v76));
                                if (!v78)
                                {
                                  atomic_store(1u, v75 + 2);
                                  (*(void (**)(unsigned int *))(*(_QWORD *)v75 + 16))(v75);
                                }
                              }
                            }
                            else
                            {
                              *v74 = 0;
                            }
                            WTF::fastFree((WTF *)v74, v67);
                          }
                          v79 = __ldxr(v72);
                          if (v79 == 1)
                          {
                            v13 = v108;
                            if (!__stlxr(0, v72))
                              goto LABEL_146;
                          }
                          else
                          {
                            __clrex();
                            v13 = v108;
                          }
                          WTF::Lock::unlockSlow((WTF::Lock *)v72);
LABEL_146:
                          v80 = v115[1];
                          v115[1] = 0;
                          *(_QWORD *)&v129 = v80;
                          WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle((uint64_t)v115[0], (WTF::NativePromiseBase **)&v129, (WTF::Logger::LogSiteIdentifier *)&v116);
                          v36 = (unsigned int *)v129;
                          *(_QWORD *)&v129 = 0;
                          if (!v36)
                            goto LABEL_150;
                          v82 = v36 + 2;
                          do
                          {
                            v83 = __ldaxr(v82);
                            v84 = v83 - 1;
                          }
                          while (__stlxr(v84, v82));
                          if (v84)
                          {
LABEL_150:
                            v85 = v115[1];
                            if (v115[1])
                            {
                              v115[1] = 0;
                              *(_QWORD *)&v129 = v85;
                              WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle((uint64_t)v115[0], (WTF::NativePromiseBase **)&v129, a3);
                              v86 = (unsigned int *)v129;
                              *(_QWORD *)&v129 = 0;
                              if (v86)
                              {
                                v87 = v86 + 2;
                                do
                                {
                                  v88 = __ldaxr(v87);
                                  v89 = v88 - 1;
                                }
                                while (__stlxr(v89, v87));
                                if (!v89)
                                {
                                  atomic_store(1u, v86 + 2);
                                  (*(void (**)(unsigned int *))(*(_QWORD *)v86 + 8))(v86);
                                }
                              }
                              v90 = (unsigned int *)v115[1];
                              v115[1] = 0;
                              if (v90)
                              {
                                v91 = v90 + 2;
                                do
                                {
                                  v92 = __ldaxr(v91);
                                  v93 = v92 - 1;
                                }
                                while (__stlxr(v93, v91));
                                if (!v93)
                                {
                                  atomic_store(1u, v90 + 2);
                                  (*(void (**)(unsigned int *))(*(_QWORD *)v90 + 8))(v90);
                                }
                              }
                            }
                            else
                            {
                              v115[1] = 0;
                            }
                            v94 = (unsigned int *)v115[0];
                            v115[0] = 0;
                            if (!v94)
                              goto LABEL_166;
                            v95 = v94 + 2;
                            do
                            {
                              v96 = __ldaxr(v95);
                              v97 = v96 - 1;
                            }
                            while (__stlxr(v97, v95));
                            if (!v97)
                            {
                              atomic_store(1u, v94 + 2);
                              (*(void (**)(unsigned int *))(*(_QWORD *)v94 + 16))(v94);
                              if ((v4 & 1) == 0)
                                goto LABEL_167;
                            }
                            else
                            {
LABEL_166:
                              if ((v4 & 1) == 0)
                              {
LABEL_167:
                                if (v13)
                                  CFRelease(v13);
                                if (v43)
                                  WTF::fastFree((WTF *)v43, v81);
                              }
                            }
                            v98 = (unsigned int *)v112;
                            v112 = 0;
                            if (v98)
                            {
                              v99 = v98 + 2;
                              do
                              {
                                v100 = __ldaxr(v99);
                                v101 = v100 - 1;
                              }
                              while (__stlxr(v101, v99));
                              if (!v101)
                              {
                                atomic_store(1u, v98 + 2);
                                (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 16))(v98);
                              }
                            }
                            if (v110)
                              v102 = v3;
                            else
                              v102 = 1;
                            if ((v102 & 1) == 0)
                            {
                              if (v13)
                                CFRelease(v13);
                              if (v43)
                                WTF::fastFree((WTF *)v43, v81);
                            }
                            if (v128 && v125)
                            {
                              v103 = v124;
                              v124 = 0;
                              if (v103)
                                CFRelease(v103);
                              v104 = (WTF *)*((_QWORD *)&v122 + 1);
                              if (*((_QWORD *)&v122 + 1))
                              {
                                *((_QWORD *)&v122 + 1) = 0;
                                LODWORD(v123) = 0;
                                WTF::fastFree(v104, v81);
                              }
                            }
                            return;
                          }
LABEL_191:
                          atomic_store(1u, v36 + 2);
                          (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v36 + 8))(v36, v38);
                          goto LABEL_150;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)v58);
                      if ((v3 & 1) != 0)
                        goto LABEL_107;
                      goto LABEL_110;
                    }
                  }
                }
              }
LABEL_190:
              __break(1u);
              goto LABEL_191;
            }
            LOBYTE(v115[0]) = 0;
            v121 = 0;
            v38 = std::__optional_storage_base<WebCore::RealtimeVideoCaptureSource::CaptureSizeFrameRateAndZoom,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeVideoCaptureSource::CaptureSizeFrameRateAndZoom,false>>((uint64_t)&v122, (uint64_t *)v115);
            if (v121 && v120)
            {
              v45 = cf;
              cf = 0;
              if (v45)
                CFRelease(v45);
              v46 = v115[1];
              if (v115[1])
              {
                v115[1] = 0;
                LODWORD(v116) = 0;
                WTF::fastFree(v46, v44);
              }
            }
            LODWORD(v20) = v128;
            if (v128)
            {
              v43 = *((unsigned __int8 *)a1 + 368);
              goto LABEL_75;
            }
LABEL_79:
            v110 = 0;
            v47 = 0;
            v3 = 1;
            v106 = v20;
            goto LABEL_100;
          }
          v36 = (unsigned int *)(*(uint64_t (**)(int *, __n128))(*(_QWORD *)a1 + 24))(a1, v38);
          v41 = *((_QWORD *)a1 + 6);
          v115[0] = (WTF::Lock *)v36;
          v115[1] = v42;
          *(_QWORD *)&v116 = "takePhoto";
          *((_QWORD *)&v116 + 1) = v41;
          if (*(_BYTE *)(v40 + 12))
            v36 = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)v115, "unable to find a preset to match the size of requested photo, using current preset");
        }
        LODWORD(v20) = v128;
        if (!v128)
          goto LABEL_79;
        goto LABEL_64;
      }
      v21 = (double *)(a2 + 24);
      v22 = (double)(int)*(double *)(a2 + 24);
      v23 = (int)((double)a1[57] / (double)a1[56] * v22);
      *(_BYTE *)(a2 + 16) = 1;
      *(double *)(a2 + 8) = (double)v23;
    }
    LODWORD(v20) = 0;
    *v21 = v22;
    v15 = 1;
    goto LABEL_35;
  }
  v122 = 0uLL;
  *(_QWORD *)&v123 = "takePhoto";
  *((_QWORD *)&v123 + 1) = 0;
  v8 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E31F73A0;
  v9 = v123;
  *(_OWORD *)(v8 + 16) = v122;
  *(_OWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v8 + 48) = 0;
  v10 = (unsigned __int8 *)(v8 + 48);
  *(_DWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = v8 + 112;
  *(_QWORD *)(v8 + 104) = 1;
  *(_QWORD *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 128) = 0;
  *(_WORD *)(v8 + 136) = 0;
  v11 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v8);
  if (*v11 && v11[16] >= 4u)
    v11 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v11, 4u, "creating ", v8);
  *(_QWORD *)a3 = v8;
  v115[0] = (WTF::Lock *)(v8 + 48);
  LOBYTE(v115[1]) = 1;
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_11:
    v11 = (unsigned __int8 *)MEMORY[0x19AEA534C](v10);
    goto LABEL_12;
  }
  if (__stxr(1u, v10))
    goto LABEL_11;
LABEL_12:
  v16 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v16 && v16[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v16, 4u, (WTF::Logger::LogSiteIdentifier *)&v122, " resolving ", v8);
  v17 = *(unsigned int *)(v8 + 88);
  if ((_DWORD)v17 != -1)
    ((void (*)(__int128 *, uint64_t))off_1E3419250[v17])(&v129, v8 + 56);
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_DWORD *)(v8 + 88) = 1;
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(v8, (unsigned __int8 **)v115);
  if (LOBYTE(v115[1]))
  {
    v18 = v115[0];
    v19 = __ldxr((unsigned __int8 *)v115[0]);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v115[0]))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v18);
  }
}

unint64_t WebCore::RealtimeVideoCaptureSource::ensureIntrinsicSizeMaintainsAspectRatio(WebCore::RealtimeVideoCaptureSource *this)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;

  v18 = *((_QWORD *)this + 28);
  v2 = v18;
  result = (*(uint64_t (**)(WebCore::RealtimeVideoCaptureSource *))(*(_QWORD *)this + 96))(this);
  v4 = HIDWORD(result);
  if (!HIDWORD(result))
    LODWORD(v4) = HIDWORD(v18);
  if ((_DWORD)result)
    v5 = result;
  else
    v5 = v18;
  if (SHIDWORD(v18) < (int)v4)
    LODWORD(v4) = HIDWORD(v18);
  if ((int)v18 < v5)
    v5 = v18;
  v6 = v5 * HIDWORD(v18) / (int)v18;
  if (v6 <= (int)v4)
  {
    LODWORD(v17) = v5;
    HIDWORD(v17) = v5 * HIDWORD(v18) / (int)v18;
    if (v5 != *((_DWORD *)this + 54) || v6 != *((_DWORD *)this + 55))
      goto LABEL_24;
  }
  else
  {
    v7 = (int)v4 * (int)v18 / SHIDWORD(v18);
    if (v7 > v5)
    {
      if (*((_QWORD *)this + 27) == v18)
        return result;
      v8 = *((_QWORD *)this + 5);
      if (v8)
      {
        v9 = (*(uint64_t (**)(WebCore::RealtimeVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
        v10 = *((_QWORD *)this + 6);
        v19 = v9;
        v20 = v11;
        v21 = "setSize";
        v22 = v10;
        if (*(_BYTE *)(v8 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v19, (WebCore::IntSize *)&v18);
          v2 = v18;
        }
      }
      *((_QWORD *)this + 27) = v2;
      return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers((uint64_t)this, 3u);
    }
    LODWORD(v17) = (int)v4 * (int)v18 / SHIDWORD(v18);
    HIDWORD(v17) = v4;
    if (v7 != *((_DWORD *)this + 54) || (_DWORD)v4 != *((_DWORD *)this + 55))
    {
LABEL_24:
      v13 = *((_QWORD *)this + 5);
      if (v13)
      {
        v14 = (*(uint64_t (**)(WebCore::RealtimeVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
        v15 = *((_QWORD *)this + 6);
        v19 = v14;
        v20 = v16;
        v21 = "setSize";
        v22 = v15;
        if (*(_BYTE *)(v13 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v19, (WebCore::IntSize *)&v17);
      }
      *((_QWORD *)this + 27) = v17;
      return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers((uint64_t)this, 3u);
    }
  }
  return result;
}

uint64_t WebCore::RealtimeVideoCaptureSource::isPowerEfficient(uint64_t this)
{
  if (*(_BYTE *)(this + 368))
    return *(unsigned __int8 *)(this + 352);
  __break(1u);
  return this;
}

WTF::StringImpl *WebCore::SizeFrameRateAndZoom::toJSONObject@<X0>(WebCore::SizeFrameRateAndZoom *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  double v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::JSONImpl::Value *v15;
  double v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::JSONImpl::Value *v25;
  double v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::JSONImpl::Value *v35;
  double v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  WTF::StringImpl *result;
  _DWORD **v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD **v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD **v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD **v53;
  uint64_t v54;
  _DWORD *v55;
  WTF::StringImpl *v56;
  _DWORD *v57;
  _QWORD v58[2];
  char v59;

  WTF::JSONImpl::Object::create(this);
  v4 = *a2;
  v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (*((_BYTE *)this + 4))
    v6 = (double)*(int *)this;
  else
    v6 = 0.0;
  WTF::JSONImpl::Value::create(v5, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v56, (const WTF::StringImpl *)&v57, (uint64_t)v58);
  if (v59)
  {
    v8 = (uint64_t *)(v4 + 24);
    v9 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v9 == *(_DWORD *)(v4 + 32))
    {
      v44 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v56);
      v9 = *(unsigned int *)(v4 + 36);
      v45 = *(_QWORD *)(v4 + 24);
      v46 = *v44;
      if (*v44)
        *v46 += 2;
      *(_QWORD *)(v45 + 8 * v9) = v46;
    }
    else
    {
      v10 = *v8;
      v11 = v56;
      if (v56)
        *(_DWORD *)v56 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *(_DWORD *)(v4 + 36) = v9 + 1;
  }
  v12 = v57;
  v57 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  v13 = v56;
  v56 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v7);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *a2;
  v15 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v56 = (WTF::StringImpl *)v58[0];
  if (*((_BYTE *)this + 12))
    v16 = (double)*((int *)this + 2);
  else
    v16 = 0.0;
  WTF::JSONImpl::Value::create(v15, v16);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v14 + 16), &v56, (const WTF::StringImpl *)&v57, (uint64_t)v58);
  if (v59)
  {
    v18 = (uint64_t *)(v14 + 24);
    v19 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v19 == *(_DWORD *)(v14 + 32))
    {
      v47 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v56);
      v19 = *(unsigned int *)(v14 + 36);
      v48 = *(_QWORD *)(v14 + 24);
      v49 = *v47;
      if (*v47)
        *v49 += 2;
      *(_QWORD *)(v48 + 8 * v19) = v49;
    }
    else
    {
      v20 = *v18;
      v21 = v56;
      if (v56)
        *(_DWORD *)v56 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *(_DWORD *)(v14 + 36) = v19 + 1;
  }
  v22 = v57;
  v57 = 0;
  if (v22)
  {
    if (*v22 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v22;
  }
  v23 = v56;
  v56 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *a2;
  v25 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v56 = (WTF::StringImpl *)v58[0];
  if (*((_BYTE *)this + 24))
    v26 = *((double *)this + 2);
  else
    v26 = 0.0;
  WTF::JSONImpl::Value::create(v25, v26);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v24 + 16), &v56, (const WTF::StringImpl *)&v57, (uint64_t)v58);
  if (v59)
  {
    v28 = (uint64_t *)(v24 + 24);
    v29 = *(unsigned int *)(v24 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v24 + 32))
    {
      v50 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1, (unint64_t)&v56);
      v29 = *(unsigned int *)(v24 + 36);
      v51 = *(_QWORD *)(v24 + 24);
      v52 = *v50;
      if (*v50)
        *v52 += 2;
      *(_QWORD *)(v51 + 8 * v29) = v52;
    }
    else
    {
      v30 = *v28;
      v31 = v56;
      if (v56)
        *(_DWORD *)v56 += 2;
      *(_QWORD *)(v30 + 8 * v29) = v31;
    }
    *(_DWORD *)(v24 + 36) = v29 + 1;
  }
  v32 = v57;
  v57 = 0;
  if (v32)
  {
    if (*v32 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v32;
  }
  v33 = v56;
  v56 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v27);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = *a2;
  v35 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (*((_BYTE *)this + 40))
    v36 = *((double *)this + 4);
  else
    v36 = 0.0;
  WTF::JSONImpl::Value::create(v35, v36);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v34 + 16), &v56, (const WTF::StringImpl *)&v57, (uint64_t)v58);
  if (v59)
  {
    v38 = (uint64_t *)(v34 + 24);
    v39 = *(unsigned int *)(v34 + 36);
    if ((_DWORD)v39 == *(_DWORD *)(v34 + 32))
    {
      v53 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v56);
      v39 = *(unsigned int *)(v34 + 36);
      v54 = *(_QWORD *)(v34 + 24);
      v55 = *v53;
      if (*v53)
        *v55 += 2;
      *(_QWORD *)(v54 + 8 * v39) = v55;
    }
    else
    {
      v40 = *v38;
      v41 = v56;
      if (v56)
        *(_DWORD *)v56 += 2;
      *(_QWORD *)(v40 + 8 * v39) = v41;
    }
    *(_DWORD *)(v34 + 36) = v39 + 1;
  }
  v42 = v57;
  v57 = 0;
  if (v42)
  {
    if (*v42 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v42;
  }
  result = v56;
  v56 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::RealtimeVideoCaptureSource::canBePowerEfficient(WebCore::RealtimeVideoCaptureSource *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  _BOOL8 result;
  BOOL v13;

  v2 = (*(uint64_t (**)(WebCore::RealtimeVideoCaptureSource *))(*(_QWORD *)this + 440))(this);
  v3 = *(unsigned int *)(v2 + 12);
  if (!(_DWORD)v3)
    return 0;
  v4 = (unsigned __int8 *)(*(_QWORD *)v2 + 40);
  v5 = 56 * v3;
  while (1)
  {
    v6 = *v4;
    v4 += 56;
    if (v6)
      break;
    v5 -= 56;
    if (!v5)
      return 0;
  }
  v7 = (*(uint64_t (**)(WebCore::RealtimeVideoCaptureSource *))(*(_QWORD *)this + 440))(this);
  v8 = *(_DWORD *)(v7 + 12);
  if (!v8)
    return 0;
  v9 = 56 * v8 - 56;
  v10 = (unsigned __int8 *)(*(_QWORD *)v7 + 40);
  do
  {
    v11 = *v10;
    v10 += 56;
    result = v11 == 0;
    if (v11)
      v13 = v9 == 0;
    else
      v13 = 1;
    v9 -= 56;
  }
  while (!v13);
  return result;
}

uint64_t WebCore::RealtimeOutgoingAudioSource::AddRef(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 16);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

BOOL WebCore::RealtimeOutgoingAudioSource::Release(WebCore::RealtimeOutgoingAudioSource *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  v1 = (unsigned int *)((char *)this + 16);
  v2 = atomic_load((unsigned int *)this + 4);
  do
  {
    v3 = __ldaxr(v1);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v1));
  if (!v4)
  {
    atomic_store(1u, v1);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3363888;
    v6[1] = v1;
    v7 = v6;
    WTF::ensureOnMainThread();
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  return v2 != 1;
}

uint64_t WebCore::RealtimeOutgoingAudioSource::state(WebCore::RealtimeOutgoingAudioSource *this)
{
  return 1;
}

uint64_t WebCore::RealtimeOutgoingAudioSource::remote(WebCore::RealtimeOutgoingAudioSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeOutgoingAudioSource::isReachingBufferedAudioDataHighLimit(WebCore::RealtimeOutgoingAudioSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeOutgoingAudioSource::isReachingBufferedAudioDataLowLimit(WebCore::RealtimeOutgoingAudioSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeOutgoingAudioSource::hasBufferedEnoughData(WebCore::RealtimeOutgoingAudioSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeOutgoingAudioSource::trackMutedChanged(uint64_t this, WebCore::MediaStreamTrackPrivate *a2)
{
  *(_BYTE *)(this + 64) = *(_BYTE *)(*(_QWORD *)(this + 56) + 97);
  return this;
}

uint64_t WebCore::RealtimeOutgoingAudioSource::trackEnabledChanged(uint64_t this, WebCore::MediaStreamTrackPrivate *a2)
{
  *(_BYTE *)(this + 65) = *(_BYTE *)(*(_QWORD *)(this + 56) + 73);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingAudioSource::trackMutedChanged(uint64_t this, WebCore::MediaStreamTrackPrivate *a2)
{
  *(_BYTE *)(this + 40) = *(_BYTE *)(*(_QWORD *)(this + 32) + 97);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingAudioSource::trackEnabledChanged(uint64_t this, WebCore::MediaStreamTrackPrivate *a2)
{
  *(_BYTE *)(this + 41) = *(_BYTE *)(*(_QWORD *)(this + 32) + 73);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingAudioSource::logger(WebCore::RealtimeOutgoingAudioSource *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 80);
}

const char *`non-virtual thunk to'WebCore::RealtimeOutgoingAudioSource::logClassName(WebCore::RealtimeOutgoingAudioSource *this)
{
  return "RealtimeOutgoingAudioSource";
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingAudioSource::logIdentifier(WebCore::RealtimeOutgoingAudioSource *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 88);
}

uint64_t WebCore::RealtimeOutgoingVideoSource::AddRef(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t WebCore::RealtimeOutgoingVideoSource::Release(WebCore::RealtimeOutgoingVideoSource *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  _QWORD *v5;
  _QWORD *v6;

  v1 = (unsigned int *)((char *)this + 24);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, v1);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E33638B0;
    v5[1] = v1;
    v6 = v5;
    WTF::ensureOnMainThread();
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  }
  return 1;
}

uint64_t WebCore::RealtimeOutgoingVideoSource::state(WebCore::RealtimeOutgoingVideoSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeOutgoingVideoSource::remote(WebCore::RealtimeOutgoingVideoSource *this)
{
  return 1;
}

uint64_t WebCore::RealtimeOutgoingVideoSource::is_screencast(WebCore::RealtimeOutgoingVideoSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeOutgoingVideoSource::needs_denoising(WebCore::RealtimeOutgoingVideoSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeOutgoingVideoSource::GetStats()
{
  return 0;
}

uint64_t WebCore::RealtimeOutgoingVideoSource::SupportsEncodedOutput(WebCore::RealtimeOutgoingVideoSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeOutgoingVideoSource::trackMutedChanged(uint64_t this, WebCore::MediaStreamTrackPrivate *x1_0, double a2, double a3, double a4)
{
  *(_BYTE *)(this + 162) = *(_BYTE *)(*(_QWORD *)(this + 72) + 97);
  return WebCore::RealtimeOutgoingVideoSource::updateFramesSending(this, a2, a3, a4);
}

uint64_t WebCore::RealtimeOutgoingVideoSource::trackEnabledChanged(uint64_t this, WebCore::MediaStreamTrackPrivate *x1_0, double a2, double a3, double a4)
{
  *(_BYTE *)(this + 161) = *(_BYTE *)(*(_QWORD *)(this + 72) + 73);
  return WebCore::RealtimeOutgoingVideoSource::updateFramesSending(this, a2, a3, a4);
}

uint64_t WebCore::RealtimeOutgoingVideoSource::trackSettingsChanged(WebCore::RealtimeOutgoingVideoSource *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v3;
  double *v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 40) + 8);
  v4 = (double *)(*(uint64_t (**)(uint64_t, WebCore::MediaStreamTrackPrivate *))(*(_QWORD *)v3 + 128))(v3, a2);
  v5 = *v4;
  *(double *)((char *)this + 164) = *v4;
  v6 = *((_QWORD *)this + 9);
  *((_BYTE *)this + 162) = *(_BYTE *)(v6 + 97);
  *((_BYTE *)this + 161) = *(_BYTE *)(v6 + 73);
  return WebCore::RealtimeOutgoingVideoSource::updateFramesSending((uint64_t)this, v5, v7, v8);
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingVideoSource::trackMutedChanged(WebCore::RealtimeOutgoingVideoSource *this, WebCore::MediaStreamTrackPrivate *a2, double a3, double a4, double a5)
{
  *((_BYTE *)this + 130) = *(_BYTE *)(*((_QWORD *)this + 5) + 97);
  return WebCore::RealtimeOutgoingVideoSource::updateFramesSending((uint64_t)this - 32, a3, a4, a5);
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingVideoSource::trackSettingsChanged(WebCore::RealtimeOutgoingVideoSource *this, WebCore::MediaStreamTrackPrivate *a2)
{
  char *v3;
  uint64_t v4;
  double *v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;

  v3 = (char *)this - 32;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 8);
  v5 = (double *)(*(uint64_t (**)(uint64_t, WebCore::MediaStreamTrackPrivate *))(*(_QWORD *)v4 + 128))(v4, a2);
  v6 = *v5;
  *(double *)((char *)this + 132) = *v5;
  v7 = *((_QWORD *)this + 5);
  *((_BYTE *)this + 130) = *(_BYTE *)(v7 + 97);
  *((_BYTE *)this + 129) = *(_BYTE *)(v7 + 73);
  return WebCore::RealtimeOutgoingVideoSource::updateFramesSending((uint64_t)v3, v6, v8, v9);
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingVideoSource::trackEnabledChanged(WebCore::RealtimeOutgoingVideoSource *this, WebCore::MediaStreamTrackPrivate *a2, double a3, double a4, double a5)
{
  *((_BYTE *)this + 129) = *(_BYTE *)(*((_QWORD *)this + 5) + 73);
  return WebCore::RealtimeOutgoingVideoSource::updateFramesSending((uint64_t)this - 32, a3, a4, a5);
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingVideoSource::logger(WebCore::RealtimeOutgoingVideoSource *this)
{
  return *((_QWORD *)this + 21);
}

const char *`non-virtual thunk to'WebCore::RealtimeOutgoingVideoSource::logClassName(WebCore::RealtimeOutgoingVideoSource *this)
{
  return "RealtimeOutgoingVideoSource";
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingVideoSource::logIdentifier(WebCore::RealtimeOutgoingVideoSource *this)
{
  return *((_QWORD *)this + 22);
}

uint64_t WebCore::RealtimeVideoCaptureSource::canResizeVideoFrames(WebCore::RealtimeVideoCaptureSource *this)
{
  return 0;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::RealtimeIncomingVideoSource::RealtimeIncomingVideoSource(webrtc::scoped_refptr<webrtc::VideoTrackInterface> &&,WTF::String &&)::$_0,void,WebCore::FrameRateMonitor::LateFrameInfo>::call(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  WTF::String *v7;
  uint64_t v8;
  WTF::String *v9;
  WTF::String *v10;
  WTF::String *v11;
  WTF::String *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  WTF::String *v36;
  WTF::String *v37;
  WTF::String *v38;
  WTF::String *v39;
  WTF::Logger *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::Logger *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  int v68;
  uint64_t v69;
  _QWORD v70[4];
  WTF::Logger *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  __int128 buf;
  int v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  int v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  int v111;
  WTF::StringImpl *v112;
  int v113;
  WTF::StringImpl *v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v2 + 464))
  {
    v3 = *(_QWORD *)(v2 + 40);
    if (v3)
    {
      v4 = *(double *)a2;
      v5 = *(double *)(a2 + 8);
      v6 = *(double *)(a2 + 16);
      v7 = *(WTF::String **)(a2 + 24);
      v8 = *(_QWORD *)(v2 + 48);
      v70[0] = "RealtimeIncomingVideoSource";
      v70[1] = 28;
      v70[2] = "operator()";
      v70[3] = v8;
      if (*(_BYTE *)(v3 + 12))
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v70);
        v9 = (WTF::String *)WTF::String::String((WTF::String *)&v82, "frame at ");
        WTF::String::number(v9, v4);
        v10 = (WTF::String *)WTF::String::String((WTF::String *)&v80, " previous frame was at ");
        WTF::String::number(v10, v5);
        v11 = (WTF::String *)WTF::String::String((WTF::String *)&v78, ", observed frame rate is ");
        WTF::String::number(v11, v6);
        v12 = (WTF::String *)WTF::String::String((WTF::String *)&v76, ", delay since last frame is ");
        WTF::String::number(v12, (v4 - v5) * 1000.0);
        WTF::String::String((WTF::String *)&v74, " ms, frame count is ");
        WTF::String::number(v7);
        v71 = v82;
        v93 = v81;
        *(_QWORD *)&buf = v83;
        v91 = v79;
        v92 = v80;
        v89 = v77;
        v90 = v78;
        v87 = v75;
        v88 = v76;
        v85 = v73;
        v86 = v74;
        result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v71, (uint64_t *)&v93, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, &v84, (uint64_t *)&v87, (uint64_t *)&v86, (uint64_t *)&v85);
        if (v84)
        {
          v14 = v73;
          v73 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v13);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = v74;
          v74 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v13);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = v75;
          v75 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v13);
            else
              *(_DWORD *)v16 -= 2;
          }
          v17 = v76;
          v76 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v13);
            else
              *(_DWORD *)v17 -= 2;
          }
          v18 = v77;
          v77 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v13);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = v78;
          v78 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v13);
            else
              *(_DWORD *)v19 -= 2;
          }
          v20 = v79;
          v79 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v13);
            else
              *(_DWORD *)v20 -= 2;
          }
          v21 = v80;
          v80 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v13);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = v81;
          v81 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v13);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = v82;
          v82 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v13);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = v83;
          v83 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v13);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = qword_1ECE7CD60;
          v26 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v26)
          {
            WTF::String::utf8();
            v28 = v71 ? (char *)v71 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v28;
            _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v26 = (uint64_t)v71;
            v71 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 1)
                v26 = WTF::fastFree((WTF *)v26, v27);
              else
                --*(_DWORD *)v26;
            }
          }
          if (WebCore::LogWebRTC)
          {
            v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v30 = *v29;
              if ((v30 & 1) != 0)
                break;
              v31 = __ldaxr(v29);
              if (v31 == v30)
              {
                if (!__stxr(v30 | 1, v29))
                {
                  v32 = WTF::Logger::observers((WTF::Logger *)v26);
                  v33 = *(unsigned int *)(v32 + 12);
                  if ((_DWORD)v33)
                  {
                    v34 = *(uint64_t **)v32;
                    v69 = *(_QWORD *)v32 + 8 * v33;
                    do
                    {
                      v35 = *v34;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v70);
                      v95 = 0;
                      v36 = (WTF::String *)WTF::String::String((WTF::String *)&v96, "frame at ");
                      v97 = 0;
                      WTF::String::number(v36, v4);
                      v99 = 0;
                      v37 = (WTF::String *)WTF::String::String((WTF::String *)&v100, " previous frame was at ");
                      v101 = 0;
                      WTF::String::number(v37, v5);
                      v103 = 0;
                      v38 = (WTF::String *)WTF::String::String((WTF::String *)&v104, ", observed frame rate is ");
                      v105 = 0;
                      WTF::String::number(v38, v6);
                      v107 = 0;
                      v39 = (WTF::String *)WTF::String::String((WTF::String *)&v108, ", delay since last frame is ");
                      v109 = 0;
                      WTF::String::number(v39, (v4 - v5) * 1000.0);
                      v111 = 0;
                      WTF::String::String((WTF::String *)&v112, " ms, frame count is ");
                      v113 = 0;
                      WTF::String::number(v7);
                      v71 = 0;
                      v72 = 0;
                      v40 = (WTF::Logger *)WTF::fastMalloc((WTF *)0xB0);
                      LODWORD(v72) = 11;
                      v71 = v40;
                      v41 = HIDWORD(v72);
                      *((_DWORD *)v40 + 4 * HIDWORD(v72)) = buf;
                      v42 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v40 + 2 * v41 + 1) = v42;
                      *((_DWORD *)v40 + 4 * (v41 + 1)) = v95;
                      v43 = v96;
                      if (v96)
                        *(_DWORD *)v96 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 1) + 1) = v43;
                      *((_DWORD *)v40 + 4 * (v41 + 2)) = v97;
                      v44 = v98;
                      if (v98)
                        *(_DWORD *)v98 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 2) + 1) = v44;
                      *((_DWORD *)v40 + 4 * (v41 + 3)) = v99;
                      v45 = v100;
                      if (v100)
                        *(_DWORD *)v100 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 3) + 1) = v45;
                      *((_DWORD *)v40 + 4 * (v41 + 4)) = v101;
                      v46 = v102;
                      if (v102)
                        *(_DWORD *)v102 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 4) + 1) = v46;
                      *((_DWORD *)v40 + 4 * (v41 + 5)) = v103;
                      v47 = v104;
                      if (v104)
                        *(_DWORD *)v104 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 5) + 1) = v47;
                      *((_DWORD *)v40 + 4 * (v41 + 6)) = v105;
                      v48 = v106;
                      if (v106)
                        *(_DWORD *)v106 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 6) + 1) = v48;
                      *((_DWORD *)v40 + 4 * (v41 + 7)) = v107;
                      v49 = v108;
                      if (v108)
                        *(_DWORD *)v108 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 7) + 1) = v49;
                      *((_DWORD *)v40 + 4 * (v41 + 8)) = v109;
                      v50 = v110;
                      if (v110)
                        *(_DWORD *)v110 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 8) + 1) = v50;
                      *((_DWORD *)v40 + 4 * (v41 + 9)) = v111;
                      v51 = v112;
                      if (v112)
                        *(_DWORD *)v112 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 9) + 1) = v51;
                      *((_DWORD *)v40 + 4 * (v41 + 10)) = v113;
                      v52 = v114;
                      if (v114)
                        *(_DWORD *)v114 += 2;
                      *((_QWORD *)v40 + 2 * (v41 + 10) + 1) = v52;
                      HIDWORD(v72) = v41 + 11;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v35 + 16))(v35, &WebCore::LogWebRTC, 0, &v71);
                      v53 = v71;
                      if (HIDWORD(v72))
                      {
                        v54 = 16 * HIDWORD(v72);
                        v55 = (WTF::StringImpl **)((char *)v71 + 8);
                        do
                        {
                          v56 = *v55;
                          *v55 = 0;
                          if (v56)
                          {
                            if (*(_DWORD *)v56 == 2)
                              WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v27);
                            else
                              *(_DWORD *)v56 -= 2;
                          }
                          v55 += 2;
                          v54 -= 16;
                        }
                        while (v54);
                        v53 = v71;
                      }
                      if (v53)
                      {
                        v71 = 0;
                        LODWORD(v72) = 0;
                        WTF::fastFree(v53, v27);
                      }
                      v57 = v114;
                      v114 = 0;
                      if (v57)
                      {
                        if (*(_DWORD *)v57 == 2)
                          WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v27);
                        else
                          *(_DWORD *)v57 -= 2;
                      }
                      v58 = v112;
                      v112 = 0;
                      if (v58)
                      {
                        if (*(_DWORD *)v58 == 2)
                          WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v27);
                        else
                          *(_DWORD *)v58 -= 2;
                      }
                      v59 = v110;
                      v110 = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2)
                          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v27);
                        else
                          *(_DWORD *)v59 -= 2;
                      }
                      v60 = v108;
                      v108 = 0;
                      if (v60)
                      {
                        if (*(_DWORD *)v60 == 2)
                          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v27);
                        else
                          *(_DWORD *)v60 -= 2;
                      }
                      v61 = v106;
                      v106 = 0;
                      if (v61)
                      {
                        if (*(_DWORD *)v61 == 2)
                          WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v27);
                        else
                          *(_DWORD *)v61 -= 2;
                      }
                      v62 = v104;
                      v104 = 0;
                      if (v62)
                      {
                        if (*(_DWORD *)v62 == 2)
                          WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v27);
                        else
                          *(_DWORD *)v62 -= 2;
                      }
                      v63 = v102;
                      v102 = 0;
                      if (v63)
                      {
                        if (*(_DWORD *)v63 == 2)
                          WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v27);
                        else
                          *(_DWORD *)v63 -= 2;
                      }
                      v64 = v100;
                      v100 = 0;
                      if (v64)
                      {
                        if (*(_DWORD *)v64 == 2)
                          WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v27);
                        else
                          *(_DWORD *)v64 -= 2;
                      }
                      v65 = v98;
                      v98 = 0;
                      if (v65)
                      {
                        if (*(_DWORD *)v65 == 2)
                          WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v27);
                        else
                          *(_DWORD *)v65 -= 2;
                      }
                      v66 = v96;
                      v96 = 0;
                      if (v66)
                      {
                        if (*(_DWORD *)v66 == 2)
                          WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v27);
                        else
                          *(_DWORD *)v66 -= 2;
                      }
                      v67 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v67)
                      {
                        if (*(_DWORD *)v67 == 2)
                          WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v27);
                        else
                          *(_DWORD *)v67 -= 2;
                      }
                      ++v34;
                    }
                    while (v34 != (uint64_t *)v69);
                  }
                  v68 = __ldxr(v29);
                  if (v68 == 1)
                  {
                    if (!__stlxr(0, v29))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          result = v84;
          v84 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
            else
              *(_DWORD *)result -= 2;
          }
        }
        else
        {
          __break(0xC471u);
        }
      }
    }
  }
  return result;
}

WebCore::MediaTrackConstraintSetMap *WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(WebCore::MediaTrackConstraintSetMap *this, const WebCore::MediaTrackConstraintSetMap *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 48) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)this = &unk_1E3360638;
    v4 = *(_OWORD *)((char *)a2 + 12);
    *(_OWORD *)((char *)this + 25) = *(_OWORD *)((char *)a2 + 25);
    *(_OWORD *)((char *)this + 12) = v4;
    *(_QWORD *)this = &off_1E335FF28;
    *((_BYTE *)this + 48) = 1;
  }
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 104) = 0;
  if (*((_BYTE *)a2 + 104))
  {
    *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
    *((_QWORD *)this + 7) = &unk_1E3360638;
    v5 = *(_OWORD *)((char *)a2 + 68);
    *(_OWORD *)((char *)this + 81) = *(_OWORD *)((char *)a2 + 81);
    *(_OWORD *)((char *)this + 68) = v5;
    *((_QWORD *)this + 7) = &off_1E335FF28;
    *((_BYTE *)this + 104) = 1;
  }
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 160) = 0;
  if (*((_BYTE *)a2 + 160))
  {
    *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
    *((_QWORD *)this + 14) = &unk_1E3360638;
    v6 = *(_OWORD *)((char *)a2 + 124);
    *(_OWORD *)((char *)this + 137) = *(_OWORD *)((char *)a2 + 137);
    *(_OWORD *)((char *)this + 124) = v6;
    *((_QWORD *)this + 14) = &off_1E335FF28;
    *((_BYTE *)this + 160) = 1;
  }
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 216) = 0;
  if (*((_BYTE *)a2 + 216))
  {
    *((_BYTE *)this + 176) = *((_BYTE *)a2 + 176);
    *((_QWORD *)this + 21) = &unk_1E3360638;
    v7 = *(_OWORD *)((char *)a2 + 180);
    *(_OWORD *)((char *)this + 193) = *(_OWORD *)((char *)a2 + 193);
    *(_OWORD *)((char *)this + 180) = v7;
    *((_QWORD *)this + 21) = &off_1E335FF28;
    *((_BYTE *)this + 216) = 1;
  }
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 304) = 0;
  if (*((_BYTE *)a2 + 304))
  {
    v8 = *((_BYTE *)a2 + 232);
    *((_QWORD *)this + 28) = &off_1E3360660;
    *((_BYTE *)this + 232) = v8;
    v9 = *((_OWORD *)a2 + 15);
    v10 = *((_OWORD *)a2 + 16);
    v11 = *((_OWORD *)a2 + 17);
    *(_OWORD *)((char *)this + 281) = *(_OWORD *)((char *)a2 + 281);
    *((_OWORD *)this + 16) = v10;
    *((_OWORD *)this + 17) = v11;
    *((_OWORD *)this + 15) = v9;
    *((_QWORD *)this + 28) = &off_1E335FF50;
    *((_BYTE *)this + 304) = 1;
  }
  *((_BYTE *)this + 312) = 0;
  *((_BYTE *)this + 392) = 0;
  if (*((_BYTE *)a2 + 392))
  {
    *((_BYTE *)this + 320) = *((_BYTE *)a2 + 320);
    *((_QWORD *)this + 39) = &off_1E3360660;
    v12 = *(_OWORD *)((char *)a2 + 328);
    v13 = *(_OWORD *)((char *)a2 + 344);
    v14 = *(_OWORD *)((char *)a2 + 360);
    *(_OWORD *)((char *)this + 369) = *(_OWORD *)((char *)a2 + 369);
    *(_OWORD *)((char *)this + 344) = v13;
    *(_OWORD *)((char *)this + 360) = v14;
    *(_OWORD *)((char *)this + 328) = v12;
    *((_QWORD *)this + 39) = &off_1E335FF50;
    *((_BYTE *)this + 392) = 1;
  }
  *((_BYTE *)this + 400) = 0;
  *((_BYTE *)this + 480) = 0;
  if (*((_BYTE *)a2 + 480))
  {
    *((_BYTE *)this + 408) = *((_BYTE *)a2 + 408);
    *((_QWORD *)this + 50) = &off_1E3360660;
    v15 = *((_OWORD *)a2 + 26);
    v16 = *((_OWORD *)a2 + 27);
    v17 = *((_OWORD *)a2 + 28);
    *(_OWORD *)((char *)this + 457) = *(_OWORD *)((char *)a2 + 457);
    *((_OWORD *)this + 27) = v16;
    *((_OWORD *)this + 28) = v17;
    *((_OWORD *)this + 26) = v15;
    *((_QWORD *)this + 50) = &off_1E335FF50;
    *((_BYTE *)this + 480) = 1;
  }
  *((_BYTE *)this + 488) = 0;
  *((_BYTE *)this + 504) = 0;
  if (*((_BYTE *)a2 + 504))
  {
    *((_BYTE *)this + 496) = *((_BYTE *)a2 + 496);
    *((_QWORD *)this + 61) = &off_1E335FF78;
    *(_DWORD *)((char *)this + 497) = *(_DWORD *)((char *)a2 + 497);
    *((_BYTE *)this + 504) = 1;
  }
  *((_BYTE *)this + 512) = 0;
  *((_BYTE *)this + 528) = 0;
  if (*((_BYTE *)a2 + 528))
  {
    *((_BYTE *)this + 520) = *((_BYTE *)a2 + 520);
    *((_QWORD *)this + 64) = &off_1E335FF78;
    *(_DWORD *)((char *)this + 521) = *(_DWORD *)((char *)a2 + 521);
    *((_BYTE *)this + 528) = 1;
  }
  *((_BYTE *)this + 536) = 0;
  *((_BYTE *)this + 552) = 0;
  if (*((_BYTE *)a2 + 552))
  {
    *((_BYTE *)this + 544) = *((_BYTE *)a2 + 544);
    *((_QWORD *)this + 67) = &off_1E335FF78;
    *(_DWORD *)((char *)this + 545) = *(_DWORD *)((char *)a2 + 545);
    *((_BYTE *)this + 552) = 1;
  }
  *((_BYTE *)this + 560) = 0;
  *((_BYTE *)this + 608) = 0;
  if (*((_BYTE *)a2 + 608))
  {
    std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint const&,WebCore::StringConstraint*>((uint64_t)this + 560, (uint64_t)a2 + 560);
    *((_BYTE *)this + 608) = 1;
  }
  *((_BYTE *)this + 616) = 0;
  *((_BYTE *)this + 664) = 0;
  if (*((_BYTE *)a2 + 664))
  {
    std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint const&,WebCore::StringConstraint*>((uint64_t)this + 616, (uint64_t)a2 + 616);
    *((_BYTE *)this + 664) = 1;
  }
  *((_BYTE *)this + 672) = 0;
  *((_BYTE *)this + 720) = 0;
  if (*((_BYTE *)a2 + 720))
  {
    std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint const&,WebCore::StringConstraint*>((uint64_t)this + 672, (uint64_t)a2 + 672);
    *((_BYTE *)this + 720) = 1;
  }
  *((_BYTE *)this + 728) = 0;
  *((_BYTE *)this + 776) = 0;
  if (*((_BYTE *)a2 + 776))
  {
    std::construct_at[abi:sn180100]<WebCore::StringConstraint,WebCore::StringConstraint const&,WebCore::StringConstraint*>((uint64_t)this + 728, (uint64_t)a2 + 728);
    *((_BYTE *)this + 776) = 1;
  }
  *((_BYTE *)this + 784) = 0;
  *((_BYTE *)this + 864) = 0;
  if (*((_BYTE *)a2 + 864))
  {
    *((_BYTE *)this + 792) = *((_BYTE *)a2 + 792);
    *((_QWORD *)this + 98) = &off_1E3360660;
    v18 = *((_OWORD *)a2 + 50);
    v19 = *((_OWORD *)a2 + 51);
    v20 = *((_OWORD *)a2 + 52);
    *(_OWORD *)((char *)this + 841) = *(_OWORD *)((char *)a2 + 841);
    *((_OWORD *)this + 51) = v19;
    *((_OWORD *)this + 52) = v20;
    *((_OWORD *)this + 50) = v18;
    *((_QWORD *)this + 98) = &off_1E335FF50;
    *((_BYTE *)this + 864) = 1;
  }
  *((_BYTE *)this + 872) = 0;
  *((_BYTE *)this + 888) = 0;
  if (*((_BYTE *)a2 + 888))
  {
    *((_BYTE *)this + 880) = *((_BYTE *)a2 + 880);
    *((_QWORD *)this + 109) = &off_1E335FF78;
    *(_DWORD *)((char *)this + 881) = *(_DWORD *)((char *)a2 + 881);
    *((_BYTE *)this + 888) = 1;
  }
  *((_BYTE *)this + 896) = 0;
  *((_BYTE *)this + 912) = 0;
  if (*((_BYTE *)a2 + 912))
  {
    *((_BYTE *)this + 904) = *((_BYTE *)a2 + 904);
    *((_QWORD *)this + 112) = &off_1E335FF78;
    *(_DWORD *)((char *)this + 905) = *(_DWORD *)((char *)a2 + 905);
    *((_BYTE *)this + 912) = 1;
  }
  *((_BYTE *)this + 920) = 0;
  *((_BYTE *)this + 936) = 0;
  if (*((_BYTE *)a2 + 936))
  {
    *((_BYTE *)this + 928) = *((_BYTE *)a2 + 928);
    *((_QWORD *)this + 115) = &off_1E335FF78;
    *(_DWORD *)((char *)this + 929) = *(_DWORD *)((char *)a2 + 929);
    *((_BYTE *)this + 936) = 1;
  }
  return this;
}

uint64_t WebCore::MediaStreamRequest::MediaStreamRequest(uint64_t a1, uint64_t a2)
{
  WebCore::MediaTrackConstraintSetMap *v4;
  unsigned int v5;
  int v6;
  WebCore::MediaTrackConstraintSetMap *v7;
  unsigned int v8;
  const WebCore::MediaTrackConstraintSetMap *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WebCore::MediaTrackConstraintSetMap *v13;
  unsigned int v14;
  const WebCore::MediaTrackConstraintSetMap *v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((WebCore::MediaTrackConstraintSetMap *)(a1 + 8), (const WebCore::MediaTrackConstraintSetMap *)(a2 + 8));
  v5 = *(_DWORD *)(a2 + 964);
  *((_OWORD *)v4 + 59) = 0u;
  *(_DWORD *)(a1 + 964) = v5;
  if (v5)
  {
    if (v5 >= 0x456C7A)
      goto LABEL_12;
    v6 = 944 * v5;
    v7 = (WebCore::MediaTrackConstraintSetMap *)WTF::fastMalloc((WTF *)(944 * v5));
    *(_DWORD *)(a1 + 960) = (v6 & 0xFFFFFFF0) / 0x3B0;
    *(_QWORD *)(a1 + 952) = v7;
    v8 = *(_DWORD *)(a2 + 964);
    if (v8)
    {
      v9 = *(const WebCore::MediaTrackConstraintSetMap **)(a2 + 952);
      v10 = 944 * v8;
      do
      {
        v7 = (WebCore::MediaTrackConstraintSetMap *)((char *)WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v7, v9)+ 944);
        v9 = (const WebCore::MediaTrackConstraintSetMap *)((char *)v9 + 944);
        v10 -= 944;
      }
      while (v10);
    }
  }
  *(_BYTE *)(a1 + 968) = *(_BYTE *)(a2 + 968);
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((WebCore::MediaTrackConstraintSetMap *)(a1 + 976), (const WebCore::MediaTrackConstraintSetMap *)(a2 + 976));
  v11 = *(_DWORD *)(a2 + 1932);
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_DWORD *)(a1 + 1932) = v11;
  if (!v11)
    goto LABEL_11;
  if (v11 >= 0x456C7A)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x1962A17F0);
  }
  v12 = 944 * v11;
  v13 = (WebCore::MediaTrackConstraintSetMap *)WTF::fastMalloc((WTF *)(944 * v11));
  *(_DWORD *)(a1 + 1928) = (v12 & 0xFFFFFFF0) / 0x3B0;
  *(_QWORD *)(a1 + 1920) = v13;
  v14 = *(_DWORD *)(a2 + 1932);
  if (v14)
  {
    v15 = *(const WebCore::MediaTrackConstraintSetMap **)(a2 + 1920);
    v16 = 944 * v14;
    do
    {
      v13 = (WebCore::MediaTrackConstraintSetMap *)((char *)WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v13, v15)+ 944);
      v15 = (const WebCore::MediaTrackConstraintSetMap *)((char *)v15 + 944);
      v16 -= 944;
    }
    while (v16);
  }
LABEL_11:
  *(_BYTE *)(a1 + 1936) = *(_BYTE *)(a2 + 1936);
  *(_OWORD *)(a1 + 1944) = *(_OWORD *)(a2 + 1944);
  return a1;
}

__n128 _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN7WebCore11VideoPreset19sortFrameRateRangesEvEUlRKT_RKT0_E_PNS2_14FrameRateRangeELb0EEEvT1_SE_S7_NS_15iterator_traitsISE_E15difference_typeEb(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 result)
{
  unint64_t *n128_u64;
  double *n128_f64;
  double *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  __n128 *v21;
  unint64_t v22;
  __n128 *v23;
  double v24;
  double v25;
  double v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 *v30;
  unint64_t v31;
  __n128 *v32;
  double v33;
  double v34;
  double v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  __n128 *v43;
  __n128 *v44;
  double v45;
  double v46;
  __n128 *v47;
  double *v48;
  double v49;
  double v50;
  BOOL v51;
  __n128 v52;
  uint64_t v53;
  double v54;
  double v55;
  double *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  __n128 *v63;
  double v64;
  BOOL v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  _QWORD *v73;
  int64_t v74;
  int64_t v75;
  uint64_t v76;
  double *v77;
  double *v78;
  double v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  __n128 *v87;
  __n128 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __n128 *v93;
  uint64_t v94;
  __n128 *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  __n128 *v101;
  __n128 *v103;
  double v104;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;

BOOL _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore11VideoPreset19sortFrameRateRangesEvEUlRKT_RKT0_E_PNS2_14FrameRateRangeEEEbT1_SE_S7_(uint64_t a1, __n128 *a2, __n128 a3)
{
  uint64_t v3;
  __n128 *v4;
  double v5;
  __n128 v6;
  __n128 *v7;
  double v8;
  __n128 *v9;
  double v10;
  double v11;
  __n128 v12;
  __n128 *v13;
  double v14;
  __n128 *v15;
  double v16;
  double v17;
  __n128 v18;
  double v19;
  __n128 *v20;
  double v21;
  __n128 *v22;
  double v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 *v31;
  uint64_t v32;
  int v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;

  v3 = 1;
  switch(((uint64_t)a2 - a1) >> 4)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v5 = a2[-1].n128_f64[0];
      v4 = a2 - 1;
      if (v5 < *(double *)a1)
      {
        v6 = *(__n128 *)a1;
        *(__n128 *)a1 = *v4;
        *v4 = v6;
      }
      return v3;
    case 3:
      v13 = (__n128 *)(a1 + 16);
      v14 = *(double *)(a1 + 16);
      v16 = a2[-1].n128_f64[0];
      v15 = a2 - 1;
      v17 = v16;
      if (v14 >= *(double *)a1)
      {
        if (v17 >= v14)
          return 1;
        v27 = *v13;
        *v13 = *v15;
        *v15 = v27;
        goto LABEL_45;
      }
      if (v17 >= v14)
      {
        v39 = *(__n128 *)a1;
        *(__n128 *)a1 = *v13;
        *v13 = v39;
        if (v15->n128_f64[0] >= *(double *)(a1 + 16))
          return 1;
        v18 = *v13;
        *v13 = *v15;
      }
      else
      {
        v18 = *(__n128 *)a1;
        *(__n128 *)a1 = *v15;
      }
      *v15 = v18;
      return 1;
    case 4:
      v13 = (__n128 *)(a1 + 16);
      v19 = *(double *)(a1 + 16);
      v20 = (__n128 *)(a1 + 32);
      v21 = *(double *)(a1 + 32);
      v22 = a2 - 1;
      v23 = *(double *)a1;
      if (v19 >= *(double *)a1)
      {
        if (v21 < v19)
        {
          v28 = *v13;
          *v13 = *v20;
          *v20 = v28;
          if (v13->n128_f64[0] < v23)
          {
            v29 = *(__n128 *)a1;
            *(__n128 *)a1 = *v13;
            *v13 = v29;
          }
        }
      }
      else
      {
        if (v21 >= v19)
        {
          v40 = *(__n128 *)a1;
          *(__n128 *)a1 = *v13;
          *v13 = v40;
          if (v21 >= *(double *)(a1 + 16))
            goto LABEL_42;
          v24 = *v13;
          *v13 = *v20;
        }
        else
        {
          v24 = *(__n128 *)a1;
          *(__n128 *)a1 = *v20;
        }
        *v20 = v24;
      }
LABEL_42:
      if (v22->n128_f64[0] < v20->n128_f64[0])
      {
        v41 = *v20;
        *v20 = *v22;
        *v22 = v41;
        if (v20->n128_f64[0] < v13->n128_f64[0])
        {
          v42 = *v13;
          *v13 = *v20;
          *v20 = v42;
LABEL_45:
          if (*(double *)(a1 + 16) < *(double *)a1)
          {
            v43 = *(__n128 *)a1;
            *(__n128 *)a1 = *v13;
            *v13 = v43;
          }
        }
      }
      return 1;
    case 5:
      _ZNSt3__17__sort5B8sn180100INS_17_ClassicAlgPolicyERZN7WebCore11VideoPreset19sortFrameRateRangesEvEUlRKT_RKT0_E_PNS2_14FrameRateRangeEEEvT1_SE_SE_SE_SE_S7_((__n128 *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (_OWORD *)(a1 + 48), a2[-1].n128_u64, a3);
      return 1;
    default:
      v7 = (__n128 *)(a1 + 32);
      v8 = *(double *)(a1 + 32);
      v9 = (__n128 *)(a1 + 16);
      v10 = *(double *)(a1 + 16);
      v11 = *(double *)a1;
      if (v10 >= *(double *)a1)
      {
        if (v8 < v10)
        {
          v25 = *v9;
          *v9 = *v7;
          *v7 = v25;
          if (v9->n128_f64[0] < v11)
          {
            v26 = *(__n128 *)a1;
            *(__n128 *)a1 = *v9;
            *v9 = v26;
          }
        }
      }
      else
      {
        if (v8 >= v10)
        {
          v30 = *(__n128 *)a1;
          *(__n128 *)a1 = *v9;
          *v9 = v30;
          if (v8 >= *(double *)(a1 + 16))
            goto LABEL_25;
          v12 = *v9;
          *v9 = *v7;
        }
        else
        {
          v12 = *(__n128 *)a1;
          *(__n128 *)a1 = *v7;
        }
        *v7 = v12;
      }
LABEL_25:
      v31 = (__n128 *)(a1 + 48);
      if ((__n128 *)(a1 + 48) == a2)
        return 1;
      v32 = 0;
      v33 = 0;
      break;
  }
  while (1)
  {
    v34 = v31->n128_f64[0];
    if (v31->n128_f64[0] < v7->n128_f64[0])
    {
      v35 = v31->n128_i64[1];
      v36 = v32;
      while (1)
      {
        *(_OWORD *)(a1 + v36 + 48) = *(_OWORD *)(a1 + v36 + 32);
        if (v36 == -32)
          break;
        v37 = *(double *)(a1 + v36 + 16);
        v36 -= 16;
        if (v34 >= v37)
        {
          v38 = a1 + v36 + 48;
          goto LABEL_33;
        }
      }
      v38 = a1;
LABEL_33:
      *(double *)v38 = v34;
      *(_QWORD *)(v38 + 8) = v35;
      if (++v33 == 8)
        return &v31[1] == a2;
    }
    v7 = v31;
    v32 += 16;
    if (++v31 == a2)
      return 1;
  }
}

__n128 _ZNSt3__17__sort5B8sn180100INS_17_ClassicAlgPolicyERZN7WebCore11VideoPreset19sortFrameRateRangesEvEUlRKT_RKT0_E_PNS2_14FrameRateRangeEEEvT1_SE_SE_SE_SE_S7_(__n128 *a1, double *a2, double *a3, _OWORD *a4, unint64_t *a5, __n128 result)
{
  double v6;
  double v7;

  v6 = *a2;
  v7 = *a3;
  if (*a2 >= a1->n128_f64[0])
  {
    if (v7 < v6)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < a1->n128_f64[0])
      {
        result = *a1;
        *a1 = *(__n128 *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *(__n128 *)a2;
    *(__n128 *)a2 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(double *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < a1->n128_f64[0])
      {
        result = *a1;
        *a1 = *(__n128 *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  result.n128_u64[0] = *a5;
  if (*(double *)a5 < *(double *)a4)
  {
    result = *(__n128 *)a4;
    *a4 = *(_OWORD *)a5;
    *(__n128 *)a5 = result;
    result.n128_u64[0] = *(_QWORD *)a4;
    if (*(double *)a4 < *a3)
    {
      result = *(__n128 *)a3;
      *(_OWORD *)a3 = *a4;
      *a4 = result;
      result.n128_f64[0] = *a3;
      if (*a3 < *a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        result.n128_f64[0] = *a2;
        if (*a2 < a1->n128_f64[0])
        {
          result = *a1;
          *a1 = *(__n128 *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

__n128 std::__optional_storage_base<WebCore::RealtimeVideoCaptureSource::CaptureSizeFrameRateAndZoom,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeVideoCaptureSource::CaptureSizeFrameRateAndZoom,false>>(uint64_t a1, uint64_t *a2)
{
  __n128 result;
  const void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  if (*(unsigned __int8 *)(a1 + 88) == *((unsigned __int8 *)a2 + 88))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      std::__optional_storage_base<WebCore::VideoPreset,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::VideoPreset,false>>(a1, a2);
      result = *((__n128 *)a2 + 4);
      *(_QWORD *)(a1 + 80) = a2[10];
      *(__n128 *)(a1 + 64) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v5 = *(const void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      if (v5)
        CFRelease(v5);
      v6 = *(WTF **)(a1 + 8);
      if (v6)
      {
        *(_QWORD *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 16) = 0;
        WTF::fastFree(v6, a2);
      }
    }
    *(_BYTE *)(a1 + 88) = 0;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 56) = 0;
    if (*((_BYTE *)a2 + 56))
    {
      v7 = *a2;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = v7;
      v8 = a2[1];
      a2[1] = 0;
      *(_QWORD *)(a1 + 8) = v8;
      LODWORD(v8) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      *(_DWORD *)(a1 + 16) = v8;
      LODWORD(v8) = *((_DWORD *)a2 + 5);
      *((_DWORD *)a2 + 5) = 0;
      *(_DWORD *)(a1 + 20) = v8;
      v9 = *(_OWORD *)(a2 + 3);
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *(_OWORD *)(a1 + 24) = v9;
      v10 = a2[6];
      a2[6] = 0;
      *(_QWORD *)(a1 + 48) = v10;
      *(_BYTE *)(a1 + 56) = 1;
    }
    result = *((__n128 *)a2 + 4);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(__n128 *)(a1 + 64) = result;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledIZN7WebCore26RealtimeVideoCaptureSource9takePhotoEONSD_13PhotoSettingsEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_S9_EEE_NS_3RefISB_NS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEJSV_EED1Ev(uint64_t a1, void *a2)
{
  const void *v3;
  WTF *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E3419238;
  if (*(_BYTE *)(a1 + 112) && *(_BYTE *)(a1 + 80))
  {
    v3 = *(const void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF **)(a1 + 32);
    if (v4)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v5 + 304));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledIZN7WebCore26RealtimeVideoCaptureSource9takePhotoEONSD_13PhotoSettingsEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_S9_EEE_NS_3RefISB_NS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEJSV_EED0Ev(WTF *this, void *a2)
{
  const void *v3;
  WTF *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E3419238;
  if (*((_BYTE *)this + 112) && *((_BYTE *)this + 80))
  {
    v3 = (const void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v3)
      CFRelease(v3);
    v4 = (WTF *)*((_QWORD *)this + 4);
    if (v4)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v5 + 304));
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledIZN7WebCore26RealtimeVideoCaptureSource9takePhotoEONSD_13PhotoSettingsEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_S9_EEE_NS_3RefISB_NS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEJSV_EE4callESV_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t result;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  char v27;
  int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  NSObject *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::Logger *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  int v65;
  uint64_t *v66;
  __int128 v67;
  __int128 v68;
  WTF::Lock *v69;
  char v70;
  WTF::Logger *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  __int128 buf;
  const char *v78;
  WTF::StringImpl *v79;
  int v80;
  WTF::StringImpl *v81[3];

  v81[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 112))
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = a1 + 24;
    std::__optional_storage_base<WebCore::VideoPreset,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::VideoPreset,false> const&>((uint64_t)(v6 + 39), a1 + 24);
    if (!*(_BYTE *)(a1 + 112)
      || !*(_BYTE *)(a1 + 80)
      || (v8 = *(_QWORD *)(a1 + 24),
          *(_QWORD *)&v67 = v8,
          (*(void (**)(_QWORD *))(*v6 + 328))(v6),
          !*(_BYTE *)(a1 + 112)))
    {
      __break(1u);
    }
    (*(void (**)(_QWORD *, uint64_t, double, double))(*v6 + 424))(v6, v7, *(double *)(a1 + 96), *(double *)(a1 + 104));
    if (*((_DWORD *)v6 + 54) != (_DWORD)v8 || *((_DWORD *)v6 + 55) != HIDWORD(v8))
    {
      v10 = v6[5];
      if (v10)
      {
        v11 = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
        v12 = (WTF::StringImpl *)v6[6];
        *(_QWORD *)&buf = v11;
        *((_QWORD *)&buf + 1) = v13;
        v78 = "setSize";
        v79 = v12;
        if (*(_BYTE *)(v10 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, (WebCore::IntSize *)&v67);
          v8 = v67;
        }
      }
      v6[27] = v8;
      WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers((uint64_t)v6, 3u);
    }
    (*(void (**)(_QWORD *))(*v6 + 336))(v6);
    if (*((_BYTE *)v6 + 432))
    {
      *((_BYTE *)v6 + 432) = 0;
      (*(void (**)(_QWORD *, _QWORD))(*v6 + 80))(v6, 0);
    }
  }
  v67 = 0uLL;
  *(_QWORD *)&v68 = "operator()";
  *((_QWORD *)&v68 + 1) = 0;
  v14 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)v14 = off_1E31F73A0;
  v15 = v68;
  *(_OWORD *)(v14 + 16) = v67;
  *(_OWORD *)(v14 + 32) = v15;
  *(_BYTE *)(v14 + 48) = 0;
  v16 = (unsigned __int8 *)(v14 + 48);
  *(_DWORD *)(v14 + 88) = 0;
  *(_QWORD *)(v14 + 96) = v14 + 112;
  *(_QWORD *)(v14 + 104) = 1;
  *(_QWORD *)(v14 + 120) = 0;
  *(_QWORD *)(v14 + 128) = 0;
  *(_WORD *)(v14 + 136) = 0;
  v17 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v14);
  if (*v17 && v17[16] >= 4u)
    v17 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v17, 4u, "creating ", v14);
  *a3 = v14;
  v69 = (WTF::Lock *)(v14 + 48);
  v70 = 1;
  if (__ldaxr(v16))
  {
    __clrex();
LABEL_21:
    v17 = (unsigned __int8 *)MEMORY[0x19AEA534C](v16);
    goto LABEL_22;
  }
  if (__stxr(1u, v16))
    goto LABEL_21;
LABEL_22:
  v19 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v17);
  if (!*v19)
    goto LABEL_107;
  v20 = v19;
  if (v19[16] < 4u)
    goto LABEL_107;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v67);
  WTF::String::String((WTF::String *)&v74, " settling ");
  result = WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(v14, &v73);
  if (v75)
  {
    v22 = *((_DWORD *)v75 + 1);
    if (v74)
      goto LABEL_26;
LABEL_131:
    v23 = 0;
    if (v73)
      goto LABEL_27;
LABEL_132:
    v24 = 0;
    goto LABEL_28;
  }
  v22 = 0;
  if (!v74)
    goto LABEL_131;
LABEL_26:
  v23 = *((_DWORD *)v74 + 1);
  if (!v73)
    goto LABEL_132;
LABEL_27:
  v24 = *((_DWORD *)v73 + 1);
LABEL_28:
  if ((v24 | v23) < 0
    || ((v25 = __OFADD__(v23, v24), v26 = v23 + v24, !v25) ? (v27 = 0) : (v27 = 1),
        v22 < 0 || (v27 & 1) != 0 || (result = (v22 + v26), __OFADD__(v22, v26))))
  {
LABEL_137:
    v76 = 0;
    goto LABEL_138;
  }
  if (!v75 || (*((_BYTE *)v75 + 16) & 4) != 0)
  {
    if (v74)
    {
      v29 = *((_DWORD *)v74 + 4);
      v28 = (v29 >> 2) & 1;
      if (!v73 || (v29 & 4) == 0)
        goto LABEL_42;
    }
    else if (!v73)
    {
      v28 = 1;
      goto LABEL_42;
    }
    v28 = (*((unsigned __int8 *)v73 + 16) >> 2) & 1;
  }
  else
  {
    v28 = 0;
  }
LABEL_42:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v28, v75, (uint64_t)v74, (uint64_t)v73, &v76);
  if (!v76)
  {
LABEL_138:
    __break(0xC471u);
    return result;
  }
  v31 = v73;
  v73 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v74;
  v74 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v30);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v75;
  v75 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v30);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = *((_QWORD *)v20 + 4);
  v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v35)
  {
    WTF::String::utf8();
    v37 = v71 ? (char *)v71 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v37;
    _os_log_impl(&dword_1940B8000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v35 = (uint64_t)v71;
    v71 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
        v35 = WTF::fastFree((WTF *)v35, v36);
      else
        --*(_DWORD *)v35;
    }
  }
  if (*v20 && v20[16] >= 4u)
  {
    v38 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v39 = *v38;
      if ((v39 & 1) != 0)
        break;
      v40 = __ldaxr(v38);
      if (v40 == v39)
      {
        if (!__stxr(v39 | 1, v38))
        {
          v66 = a2;
          v41 = WTF::Logger::observers((WTF::Logger *)v35);
          v42 = *(unsigned int *)(v41 + 12);
          if ((_DWORD)v42)
          {
            v43 = *(uint64_t **)v41;
            v44 = *(_QWORD *)v41 + 8 * v42;
            do
            {
              v45 = *v43;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v67);
              LODWORD(v78) = 0;
              WTF::String::String((WTF::String *)&v79, " settling ");
              v80 = 0;
              WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(v14, v81);
              v71 = 0;
              v72 = 0;
              v46 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v72) = 3;
              v71 = v46;
              v47 = HIDWORD(v72);
              *((_DWORD *)v46 + 4 * HIDWORD(v72)) = buf;
              v48 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v46 + 2 * v47 + 1) = v48;
              *((_DWORD *)v46 + 4 * (v47 + 1)) = (_DWORD)v78;
              v49 = v79;
              if (v79)
                *(_DWORD *)v79 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 1) + 1) = v49;
              *((_DWORD *)v46 + 4 * (v47 + 2)) = v80;
              v50 = v81[0];
              if (v81[0])
                *(_DWORD *)v81[0] += 2;
              *((_QWORD *)v46 + 2 * (v47 + 2) + 1) = v50;
              HIDWORD(v72) = v47 + 3;
              (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v45 + 16))(v45, v20, 4, &v71);
              v51 = v71;
              if (HIDWORD(v72))
              {
                v52 = 16 * HIDWORD(v72);
                v53 = (WTF::StringImpl **)((char *)v71 + 8);
                do
                {
                  v54 = *v53;
                  *v53 = 0;
                  if (v54)
                  {
                    if (*(_DWORD *)v54 == 2)
                      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v36);
                    else
                      *(_DWORD *)v54 -= 2;
                  }
                  v53 += 2;
                  v52 -= 16;
                }
                while (v52);
                v51 = v71;
              }
              if (v51)
              {
                v71 = 0;
                LODWORD(v72) = 0;
                WTF::fastFree(v51, v36);
              }
              v55 = v81[0];
              v81[0] = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v36);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = v79;
              v79 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v36);
                else
                  *(_DWORD *)v56 -= 2;
              }
              v57 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v36);
                else
                  *(_DWORD *)v57 -= 2;
              }
              ++v43;
            }
            while (v43 != (uint64_t *)v44);
          }
          v58 = __ldxr(v38);
          if (v58 == 1)
          {
            a2 = v66;
            if (!__stlxr(0, v38))
              break;
          }
          else
          {
            __clrex();
            a2 = v66;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v59 = v76;
  v76 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v36);
    else
      *(_DWORD *)v59 -= 2;
  }
LABEL_107:
  v60 = *((_DWORD *)a2 + 6);
  if (v60 != 1)
  {
    if (!v60)
    {
      v61 = *a2;
      v62 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      WTF::String::isolatedCopy();
      *(_QWORD *)&buf = v61;
      *((_QWORD *)&buf + 1) = v62;
      goto LABEL_111;
    }
    result = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_137;
  }
  WTF::String::isolatedCopy();
LABEL_111:
  LODWORD(v79) = v60;
  v63 = *(unsigned int *)(v14 + 88);
  if ((_DWORD)v63 == -1)
  {
    *(_DWORD *)(v14 + 80) = -1;
    v64 = (_DWORD *)(v14 + 80);
    *(_DWORD *)(v14 + 88) = -1;
    *(_BYTE *)(v14 + 56) = 0;
    goto LABEL_115;
  }
  ((void (*)(WTF::Logger **, uint64_t))off_1E3419250[v63])(&v71, v14 + 56);
  v60 = (int)v79;
  *(_DWORD *)(v14 + 80) = -1;
  v64 = (_DWORD *)(v14 + 80);
  *(_DWORD *)(v14 + 88) = -1;
  *(_BYTE *)(v14 + 56) = 0;
  if (v60 != -1)
  {
LABEL_115:
    ((void (*)(WTF::Logger **, uint64_t, __int128 *))off_1E3419278[v60])(&v71, v14 + 56, &buf);
    *v64 = v60;
  }
  *(_DWORD *)(v14 + 88) = 1;
  result = (uint64_t)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(v14, (unsigned __int8 **)&v69);
  if ((_DWORD)v79 != -1)
    result = ((uint64_t (*)(WTF::Logger **, __int128 *))off_1E3419268[v79])(&v71, &buf);
  if (v70)
  {
    result = (uint64_t)v69;
    v65 = __ldxr((unsigned __int8 *)v69);
    if (v65 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v69))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

WTF *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 88);
  v11 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E3419250[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 88) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E3419288[v11])(&v16);
LABEL_16:
  result = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF *)WTF::Lock::unlockSlow(result);
  return result;
}

_QWORD *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E34192B0;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E335FEF8;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E34192B0;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E335FEF8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  void *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t result;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD v24[4];
  unsigned __int8 *v25;

  v6 = *(_DWORD *)(a3 + 24);
  v24[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v24, "]");
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(unsigned __int8 **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(&v25, *(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v24[0] = 0;
    v24[1] = 0;
    v24[2] = "<chained completion promise>";
    v24[3] = 0;
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::chainTo(v25, (unint64_t)v12, (WTF::Logger::LogSiteIdentifier *)v24);
  }
  v15 = (unsigned int *)v25;
  v25 = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    if (*v12)
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(*v12);
      v20 = (unsigned int *)*v12;
      *v12 = 0;
      if (v20)
      {
        v21 = v20 + 2;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v20 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
        }
      }
    }
    else
    {
      *v12 = 0;
    }
    return WTF::fastFree((WTF *)v12, v14);
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::chainTo(unsigned __int8 *a1, unint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t result;
  int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int *v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;

  v5 = (uint64_t)a1;
  v6 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEA534C](a1 + 48);
LABEL_5:
  *(_BYTE *)(v5 + 136) = 1;
  v8 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    v9 = v8 + 2;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  LOBYTE(v37) = *(_DWORD *)(v5 + 88) == 0;
  v11 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v11)
    v12 = v11[16] >= 4u;
  else
    v12 = 0;
  if (v12)
    v11 = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [17],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [12],BOOL,char [2]>((uint64_t)v11, 4u, a3, " invoking chainTo() [", v5, " chainedPromise:", (uint64_t)v8, " isNothing:", (uint64_t)&v37, "]");
  if (v8)
  {
    v13 = v8 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v8 + 2);
      v11 = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  v16 = atomic_load((unsigned __int8 *)(v5 + 137));
  v17 = *(_QWORD *)a2;
  v18 = (unsigned __int8 *)(*(_QWORD *)a2 + 48);
  if (__ldaxr(v18))
  {
    __clrex();
LABEL_22:
    v11 = (unsigned __int8 *)MEMORY[0x19AEA534C](v18);
    goto LABEL_23;
  }
  if (__stxr(1u, v18))
    goto LABEL_22;
LABEL_23:
  result = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*(_BYTE *)result && *(unsigned __int8 *)(result + 16) >= 4u)
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(result, 4u, a3, " runSynchronouslyOnTarget ", v17);
  atomic_store(v16, (unsigned __int8 *)(v17 + 137));
  v21 = __ldxr(v18);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v18))
LABEL_30:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v18);
  if (*(_DWORD *)(v5 + 88))
  {
    v22 = *(unsigned int **)a2;
    *(_QWORD *)a2 = 0;
    if (v22)
    {
      v23 = v22 + 2;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      v37 = 0;
      v38 = 0;
      v39 = "<chained promise>";
      v40 = 0;
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage>((uint64_t)v22, v5 + 56, (WTF::Logger::LogSiteIdentifier *)&v37);
      do
      {
        v25 = __ldaxr(v23);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v23));
      if (!v26)
      {
        atomic_store(1u, v22 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
      }
      result = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead((uint64_t)v22);
      do
      {
        v27 = __ldaxr(v23);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v23));
      if (!v28)
      {
        atomic_store(1u, v22 + 2);
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
      }
    }
    else
    {
      v37 = 0;
      v38 = 0;
      v39 = "<chained promise>";
      v40 = 0;
      result = (uint64_t)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage>(0, v5 + 56, (WTF::Logger::LogSiteIdentifier *)&v37);
    }
  }
  else
  {
    v29 = *(unsigned int *)(v5 + 132);
    if ((_DWORD)v29 == *(_DWORD *)(v5 + 128))
    {
      result = WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 120, v29 + 1, a2);
      v30 = *(_QWORD *)(v5 + 120) + 40 * *(unsigned int *)(v5 + 132);
      v31 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v30 = v31;
      v32 = *(_OWORD *)(result + 24);
      *(_OWORD *)(v30 + 8) = *(_OWORD *)(result + 8);
      *(_OWORD *)(v30 + 24) = v32;
    }
    else
    {
      v33 = *(_QWORD *)(v5 + 120) + 40 * v29;
      v34 = *(unsigned int **)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v33 = v34;
      v35 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v33 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v33 + 8) = v35;
    }
    ++*(_DWORD *)(v5 + 132);
  }
  v36 = __ldxr(v6);
  if (v36 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [17],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [12],BOOL,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9, const char *a10)
{
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  WTF::Logger *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::Logger *v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  uint64_t v60;
  char *v62;
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94[3];

  v94[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v71, a4);
  WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a5, &v70);
  WTF::String::String((WTF::String *)&v69, a6);
  WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a7, &v68);
  v62 = (char *)a8;
  WTF::String::String((WTF::String *)&v67, a8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v66, a10);
  v64 = v71;
  v79 = v70;
  *(_QWORD *)&buf = v72;
  v77 = v68;
  v78 = v69;
  v75 = v16;
  v76 = v67;
  v74 = v66;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v64, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, &v73);
  if (!v73)
  {
    __break(0xC471u);
    return result;
  }
  v19 = v66;
  v66 = 0;
  if (!v19)
  {
LABEL_5:
    if (v16)
      goto LABEL_6;
    goto LABEL_8;
  }
  if (*(_DWORD *)v19 != 2)
  {
    *(_DWORD *)v19 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy(v19, v18);
  if (v16)
  {
LABEL_6:
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v18);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_8:
  v20 = v67;
  v67 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v68;
  v68 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v69;
  v69 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v18);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v70;
  v70 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v18);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v71;
  v71 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v18);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v72;
  v72 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v18);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = *(NSObject **)(a1 + 32);
  v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v27)
  {
    WTF::String::utf8();
    v29 = v64 ? (char *)v64 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v29;
    _os_log_impl(&dword_1940B8000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v27 = (uint64_t)v64;
    v64 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 1)
        v27 = WTF::fastFree((WTF *)v27, v28);
      else
        --*(_DWORD *)v27;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v30 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v31 = *v30;
      if ((v31 & 1) != 0)
        break;
      v32 = __ldaxr(v30);
      if (v32 == v31)
      {
        if (!__stxr(v31 | 1, v30))
        {
          v33 = WTF::Logger::observers((WTF::Logger *)v27);
          v34 = *(unsigned int *)(v33 + 12);
          if ((_DWORD)v34)
          {
            v35 = *(uint64_t **)v33;
            v60 = *(_QWORD *)v33 + 8 * v34;
            do
            {
              v36 = *v35;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v81 = 0;
              WTF::String::String((WTF::String *)&v82, a4);
              v83 = 0;
              WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a5, &v84);
              v85 = 0;
              WTF::String::String((WTF::String *)&v86, a6);
              v87 = 0;
              WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a7, &v88);
              v89 = 0;
              WTF::String::String((WTF::String *)&v90, v62);
              v91 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v92 = v64;
              v93 = 0;
              WTF::String::String((WTF::String *)v94, a10);
              v64 = 0;
              v65 = 0;
              v37 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v65) = 8;
              v64 = v37;
              v38 = HIDWORD(v65);
              *((_DWORD *)v37 + 4 * HIDWORD(v65)) = buf;
              v39 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v37 + 2 * v38 + 1) = v39;
              *((_DWORD *)v37 + 4 * (v38 + 1)) = v81;
              v40 = v82;
              if (v82)
                *(_DWORD *)v82 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 1) + 1) = v40;
              *((_DWORD *)v37 + 4 * (v38 + 2)) = v83;
              v41 = v84;
              if (v84)
                *(_DWORD *)v84 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 2) + 1) = v41;
              *((_DWORD *)v37 + 4 * (v38 + 3)) = v85;
              v42 = v86;
              if (v86)
                *(_DWORD *)v86 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 3) + 1) = v42;
              *((_DWORD *)v37 + 4 * (v38 + 4)) = v87;
              v43 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 4) + 1) = v43;
              *((_DWORD *)v37 + 4 * (v38 + 5)) = v89;
              v44 = v90;
              if (v90)
                *(_DWORD *)v90 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 5) + 1) = v44;
              *((_DWORD *)v37 + 4 * (v38 + 6)) = v91;
              v45 = v92;
              if (v92)
                *(_DWORD *)v92 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 6) + 1) = v45;
              *((_DWORD *)v37 + 4 * (v38 + 7)) = v93;
              v46 = v94[0];
              if (v94[0])
                *(_DWORD *)v94[0] += 2;
              *((_QWORD *)v37 + 2 * (v38 + 7) + 1) = v46;
              HIDWORD(v65) = v38 + 8;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v36 + 16))(v36, a1, a2, &v64);
              v47 = v64;
              if (HIDWORD(v65))
              {
                v48 = 16 * HIDWORD(v65);
                v49 = (WTF::StringImpl **)((char *)v64 + 8);
                do
                {
                  v50 = *v49;
                  *v49 = 0;
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 2)
                      WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v28);
                    else
                      *(_DWORD *)v50 -= 2;
                  }
                  v49 += 2;
                  v48 -= 16;
                }
                while (v48);
                v47 = v64;
              }
              if (v47)
              {
                v64 = 0;
                LODWORD(v65) = 0;
                WTF::fastFree(v47, v28);
              }
              v51 = v94[0];
              v94[0] = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v92;
              v92 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v90;
              v90 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = v88;
              v88 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v54 -= 2;
              }
              v55 = v86;
              v86 = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = v84;
              v84 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v56 -= 2;
              }
              v57 = v82;
              v82 = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v57 -= 2;
              }
              v58 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v58 -= 2;
              }
              ++v35;
            }
            while (v35 != (uint64_t *)v60);
          }
          v59 = __ldxr(v30);
          if (v59 == 1)
          {
            if (!__stlxr(0, v30))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v28);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  __int128 v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x6666667)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = v3;
      do
      {
        v10 = *(_QWORD *)v9;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)v8 = v10;
        v11 = *(_OWORD *)((char *)v9 + 8);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)((char *)v9 + 24);
        *(_OWORD *)(v8 + 8) = v11;
        if (*(_QWORD *)v9)
        {
          WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(*(_QWORD *)v9);
          v12 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
            }
          }
        }
        else
        {
          *(_QWORD *)v9 = 0;
        }
        v8 += 40;
        v9 = (WTF *)((char *)v9 + 40);
      }
      while (v9 != (WTF *)((char *)v3 + 40 * v4));
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeIncomingVideoSource::OnChanged(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34192E0;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingVideoSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 320));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeIncomingVideoSource::OnChanged(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34192E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingVideoSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 320));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeIncomingVideoSource::OnChanged(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 440) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 440));
  if ((_DWORD)result == 1)
    return WebCore::RealtimeMediaSource::end(*(_QWORD *)(a1 + 8), 0);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeIncomingVideoSource::notifyNewFrame(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3419308;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingVideoSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 320));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeIncomingVideoSource::notifyNewFrame(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3419308;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingVideoSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 320));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeIncomingVideoSource::notifyNewFrame(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  double v8;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(double *)(result + 16);
  v8 = v2;
  if (*(double *)(v1 + 232) != v2)
  {
    v3 = *(_QWORD *)(v1 + 40);
    if (v3)
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
      v5 = *(_QWORD *)(v1 + 48);
      v7[0] = v4;
      v7[1] = v6;
      v7[2] = "setFrameRate";
      v7[3] = v5;
      if (*(_BYTE *)(v3 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v7, &v8);
        v2 = v8;
      }
    }
    *(double *)(v1 + 232) = v2;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v1, 4u);
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::RealtimeMediaSource::VideoFrameObserver *,WTF::KeyValuePair<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  WTF *v30;
  uint64_t v31;
  const void *v32;
  const void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  const void *v39;
  const void *v40;
  const void *v41;
  uint64_t *result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (uint64_t *)(v5 + 16 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = (uint64_t *)(v20 + 16 * v27);
          v30 = (WTF *)v29[1];
          v29[1] = 0;
          if (v30)
          {
            v31 = *((_QWORD *)v30 + 4);
            *((_QWORD *)v30 + 4) = 0;
            if (v31)
            {
              v32 = *(const void **)(v31 + 40);
              *(_QWORD *)(v31 + 40) = 0;
              if (v32)
                CFRelease(v32);
              v33 = *(const void **)(v31 + 8);
              *(_QWORD *)(v31 + 8) = 0;
              if (v33)
                CFRelease(v33);
              v34 = *(const void **)v31;
              *(_QWORD *)v31 = 0;
              if (v34)
                CFRelease(v34);
              MEMORY[0x19AEA7644](v31, 0x10C0C404B4E061BLL);
            }
            WTF::fastFree(v30, v9);
          }
          *v29 = *v12;
          v35 = v5 + 16 * v10;
          v36 = *(_QWORD *)(v35 + 8);
          *(_QWORD *)(v35 + 8) = 0;
          v29[1] = v36;
          v37 = *(WTF **)(v35 + 8);
          *(_QWORD *)(v35 + 8) = 0;
          if (v37)
          {
            v38 = *((_QWORD *)v37 + 4);
            *((_QWORD *)v37 + 4) = 0;
            if (v38)
            {
              v39 = *(const void **)(v38 + 40);
              *(_QWORD *)(v38 + 40) = 0;
              if (v39)
                CFRelease(v39);
              v40 = *(const void **)(v38 + 8);
              *(_QWORD *)(v38 + 8) = 0;
              if (v40)
                CFRelease(v40);
              v41 = *(const void **)v38;
              *(_QWORD *)v38 = 0;
              if (v41)
                CFRelease(v41);
              MEMORY[0x19AEA7644](v38, 0x10C0C404B4E061BLL);
            }
            WTF::fastFree(v37, v9);
          }
          if (v12 == a3)
            v11 = v29;
        }
        else
        {
          v14 = v5 + 16 * v10;
          v15 = *(WTF **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            v16 = *((_QWORD *)v15 + 4);
            *((_QWORD *)v15 + 4) = 0;
            if (v16)
            {
              v17 = *(const void **)(v16 + 40);
              *(_QWORD *)(v16 + 40) = 0;
              if (v17)
                CFRelease(v17);
              v18 = *(const void **)(v16 + 8);
              *(_QWORD *)(v16 + 8) = 0;
              if (v18)
                CFRelease(v18);
              v19 = *(const void **)v16;
              *(_QWORD *)v16 = 0;
              if (v19)
                CFRelease(v19);
              MEMORY[0x19AEA7644](v16, 0x10C0C404B4E061BLL);
            }
            WTF::fastFree(v15, v9);
          }
        }
      }
      ++v10;
    }
    while (v10 != v6);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::notifyMutedObservers(void)::$_0,void,WebCore::RealtimeMediaSourceObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::OptionSet<WebCore::RealtimeMediaSourceSettings::Flag>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, int *a4)
{
  uint64_t result;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint8_t buf[4];
  _BYTE v45[12];
  int v46;
  WTF::StringImpl *v47[3];

  v47[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = (uint64_t)WebCore::RealtimeMediaSourceSettings::convertFlagsToString(&v41, *a4);
  v8 = v41;
  if (!v42)
  {
    v9 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v10 = 0;
    goto LABEL_4;
  }
  v9 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v10 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v10 | v9) < 0 || (result = (v9 + v10), __OFADD__(v9, v10)))
  {
    v43 = 0;
    goto LABEL_76;
  }
  if (v42)
  {
    v11 = *((_DWORD *)v42 + 4);
    v12 = (v11 >> 2) & 1;
    if (v41 && (v11 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v12 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v12 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, (uint64_t)v42, (uint64_t)v41, &v43);
  if (!v43)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v41 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v13);
    else
      *(_DWORD *)v8 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v45 = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v46 = 0;
              WebCore::RealtimeMediaSourceSettings::convertFlagsToString(v47, *a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = *(_DWORD *)buf;
              v29 = *(_QWORD *)&v45[4];
              if (*(_QWORD *)&v45[4])
                **(_DWORD **)&v45[4] += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v46;
              v30 = v47[0];
              if (v47[0])
                *(_DWORD *)v47[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v47[0];
              v47[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = *(WTF::StringImpl **)&v45[4];
              *(_QWORD *)&v45[4] = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(WTF::OptionSet<WebCore::RealtimeMediaSourceSettings::Flag>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v1 + 290) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3419380;
  v4 = v2;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 136))(v1);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v1 + 128), &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 144))(v1);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19RealtimeMediaSource32notifySettingsDidChangeObserversENS_9OptionSetINS2_27RealtimeMediaSourceSettings4FlagEEEENK3__0clEvEUlRT_E_vJRNS2_27RealtimeMediaSourceObserverEEE4callESD_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::updateHasStartedProducingData(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34193A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::updateHasStartedProducingData(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34193A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 144))(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::updateHasStartedProducingData(void)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = result[1];
  if (!*(_BYTE *)(v1 + 295))
  {
    *(_BYTE *)(v1 + 295) = 1;
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E34193D0;
    v3 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 136))(v1);
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v1 + 128), &v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 144))(v1);
    result = v3;
    v3 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19RealtimeMediaSource29updateHasStartedProducingDataEvENK3__0clEvEUlRT_E_vJRNS2_27RealtimeMediaSourceObserverEEE4callES9_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned int,char [17],double,char [9]>(WTF::Logger::LogSiteIdentifier *a1, unsigned int *a2, double *a3)
{
  WTF::String *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::String *v25;
  WTF::String *v26;
  double v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::Logger *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  unsigned int *v46;
  double *v47;
  WTF::Logger *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  __int128 buf;
  int v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67[3];

  v67[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  v46 = a2;
  WTF::String::number((WTF::String *)*a2);
  v5 = (WTF::String *)WTF::String::String((WTF::String *)&v52, " frames sent in ");
  v47 = a3;
  WTF::String::number(v5, *a3);
  WTF::String::String((WTF::String *)&v50, " seconds");
  v48 = v53;
  v58 = v52;
  *(_QWORD *)&buf = v54;
  v56 = v50;
  v57 = v51;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v48, (uint64_t *)&v58, (uint64_t *)&v57, (uint64_t *)&v56, &v55);
  if (v55)
  {
    v8 = v50;
    v50 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v51;
    v51 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v52;
    v52 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v53;
    v53 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v54;
    v54 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = qword_1ECE7CD60;
    v14 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v14)
    {
      WTF::String::utf8();
      v16 = v48 ? (char *)v48 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v16;
      _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v14 = (uint64_t)v48;
      v48 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
          v14 = WTF::fastFree((WTF *)v14, v15);
        else
          --*(_DWORD *)v14;
      }
    }
    if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
    {
      v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v18 = *v17;
        if ((v18 & 1) != 0)
          break;
        v19 = __ldaxr(v17);
        if (v19 == v18)
        {
          if (!__stxr(v18 | 1, v17))
          {
            v20 = WTF::Logger::observers((WTF::Logger *)v14);
            v21 = *(unsigned int *)(v20 + 12);
            if ((_DWORD)v21)
            {
              v22 = *(uint64_t **)v20;
              v23 = *(_QWORD *)v20 + 8 * v21;
              do
              {
                v24 = *v22;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(a1);
                v25 = (WTF::String *)*v46;
                v60 = 0;
                WTF::String::number(v25);
                v62 = 0;
                v26 = (WTF::String *)WTF::String::String((WTF::String *)&v63, " frames sent in ");
                v27 = *v47;
                v64 = 0;
                WTF::String::number(v26, v27);
                v66 = 0;
                WTF::String::String((WTF::String *)v67, " seconds");
                v48 = 0;
                v49 = 0;
                v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v49) = 5;
                v48 = v28;
                v29 = HIDWORD(v49);
                *((_DWORD *)v28 + 4 * HIDWORD(v49)) = buf;
                v30 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v28 + 2 * v29 + 1) = v30;
                *((_DWORD *)v28 + 4 * (v29 + 1)) = v60;
                v31 = v61;
                if (v61)
                  *(_DWORD *)v61 += 2;
                *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
                *((_DWORD *)v28 + 4 * (v29 + 2)) = v62;
                v32 = v63;
                if (v63)
                  *(_DWORD *)v63 += 2;
                *((_QWORD *)v28 + 2 * (v29 + 2) + 1) = v32;
                *((_DWORD *)v28 + 4 * (v29 + 3)) = v64;
                v33 = v65;
                if (v65)
                  *(_DWORD *)v65 += 2;
                *((_QWORD *)v28 + 2 * (v29 + 3) + 1) = v33;
                *((_DWORD *)v28 + 4 * (v29 + 4)) = v66;
                v34 = v67[0];
                if (v67[0])
                  *(_DWORD *)v67[0] += 2;
                *((_QWORD *)v28 + 2 * (v29 + 4) + 1) = v34;
                HIDWORD(v49) = v29 + 5;
                (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, &WebCore::LogWebRTC, 3, &v48);
                v35 = v48;
                if (HIDWORD(v49))
                {
                  v36 = 16 * HIDWORD(v49);
                  v37 = (WTF::StringImpl **)((char *)v48 + 8);
                  do
                  {
                    v38 = *v37;
                    *v37 = 0;
                    if (v38)
                    {
                      if (*(_DWORD *)v38 == 2)
                        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v38 -= 2;
                    }
                    v37 += 2;
                    v36 -= 16;
                  }
                  while (v36);
                  v35 = v48;
                }
                if (v35)
                {
                  v48 = 0;
                  LODWORD(v49) = 0;
                  WTF::fastFree(v35, v15);
                }
                v39 = v67[0];
                v67[0] = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v39 -= 2;
                }
                v40 = v65;
                v65 = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                v41 = v63;
                v63 = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                v42 = v61;
                v61 = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                ++v22;
              }
              while (v22 != (uint64_t *)v23);
            }
            v44 = __ldxr(v17);
            if (v44 == 1)
            {
              if (!__stlxr(0, v17))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v55;
    v55 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::start(void)::$_0,void,WebCore::RealtimeMediaSourceObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::requestToEnd(WebCore::RealtimeMediaSourceObserver &)::$_0,void,WebCore::RealtimeMediaSourceObserver &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if ((_DWORD)result)
    **(_BYTE **)(a1 + 8) = 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::end(WebCore::RealtimeMediaSourceObserver *)::$_0,void,WebCore::RealtimeMediaSourceObserver&>::call(uint64_t result, uint64_t a2)
{
  if (**(_QWORD **)(result + 8) != a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return result;
}

double WebCore::NumericConstraint<int>::fitnessDistance(uint64_t a1, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  double result;
  int v8;
  int v9;
  int v10;
  int v11;

  if (!*(_BYTE *)(a1 + 16) && !*(_BYTE *)(a1 + 24) && !*(_BYTE *)(a1 + 32) && !*(_BYTE *)(a1 + 40))
    return 0.0;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(_DWORD *)(a1 + 28);
    if (v3 < a2 && vabdd_f64((double)v3, (double)a2) > 0.00001)
      return INFINITY;
    if (v3 > a3 && vabdd_f64((double)v3, (double)a3) > 0.00001)
      return INFINITY;
  }
  if (*(_BYTE *)(a1 + 16) && (v4 = *(_DWORD *)(a1 + 12), v4 > a3) && vabdd_f64((double)v4, (double)a3) > 0.00001
    || *(_BYTE *)(a1 + 24) && (v5 = *(_DWORD *)(a1 + 20), v5 < a2) && vabdd_f64((double)v5, (double)a2) > 0.00001)
  {
    v6 = 0;
    if (!*(_BYTE *)(a1 + 32))
      goto LABEL_24;
  }
  else
  {
    v6 = 1;
    if (!*(_BYTE *)(a1 + 32))
      goto LABEL_24;
  }
  if (!v6
    || *(_BYTE *)(a1 + 16) && *(_DWORD *)(a1 + 28) < *(_DWORD *)(a1 + 12)
    || *(_BYTE *)(a1 + 24) && *(_DWORD *)(a1 + 28) > *(_DWORD *)(a1 + 20))
  {
    return INFINITY;
  }
LABEL_24:
  if (!*(_BYTE *)(a1 + 16))
  {
    if (((*(_BYTE *)(a1 + 24) != 0) & ~v6) == 0)
      goto LABEL_28;
    return INFINITY;
  }
  if (!v6 || *(_BYTE *)(a1 + 24) && *(_DWORD *)(a1 + 12) > *(_DWORD *)(a1 + 20))
    return INFINITY;
LABEL_28:
  result = 0.0;
  if (*(_BYTE *)(a1 + 40))
  {
    v8 = *(_DWORD *)(a1 + 36);
    if (v8 < a2 || v8 > a3)
    {
      if (a2 <= a3)
        v9 = a3;
      else
        v9 = a2;
      if (v8 <= v9)
        v10 = a2;
      else
        v10 = a3;
      v11 = v10 - v8;
      if (v10 - v8 < 0)
        v11 = v8 - v10;
      if (v10 < 0)
        v10 = -v10;
      if (v8 < 0)
        v8 = -v8;
      if (v10 > v8)
        v8 = v10;
      return (double)v11 / (double)v8;
    }
  }
  return result;
}

double WebCore::NumericConstraint<double>::fitnessDistance(uint64_t a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  int v6;
  double v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  if (!*(_BYTE *)(a1 + 24) && !*(_BYTE *)(a1 + 40) && !*(_BYTE *)(a1 + 56) && !*(_BYTE *)(a1 + 72))
    return 0.0;
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = *(double *)(a1 + 48);
    if (v3 < a2 && vabdd_f64(v3, a2) > 0.00001)
      return INFINITY;
    if (v3 > a3 && vabdd_f64(v3, a3) > 0.00001)
      return INFINITY;
  }
  if (*(_BYTE *)(a1 + 24) && (v4 = *(double *)(a1 + 16), v4 > a3) && vabdd_f64(v4, a3) > 0.00001
    || *(_BYTE *)(a1 + 40) && (v5 = *(double *)(a1 + 32), v5 < a2) && vabdd_f64(v5, a2) > 0.00001)
  {
    v6 = 0;
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_24;
  }
  else
  {
    v6 = 1;
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_24;
  }
  if (!v6
    || *(_BYTE *)(a1 + 24) && *(double *)(a1 + 48) < *(double *)(a1 + 16)
    || *(_BYTE *)(a1 + 40) && *(double *)(a1 + 48) > *(double *)(a1 + 32))
  {
    return INFINITY;
  }
LABEL_24:
  if (*(_BYTE *)(a1 + 24))
  {
    if (!v6 || *(_BYTE *)(a1 + 40) && *(double *)(a1 + 16) > *(double *)(a1 + 32))
      return INFINITY;
  }
  else if (((*(_BYTE *)(a1 + 40) != 0) & ~v6) != 0)
  {
    return INFINITY;
  }
  v7 = 0.0;
  if (*(_BYTE *)(a1 + 72))
  {
    v9 = *(double *)(a1 + 64);
    if (v9 < a2 || v9 > a3)
    {
      if (a2 >= a3)
        v10 = a2;
      else
        v10 = a3;
      if (v9 > v10)
        a2 = a3;
      v11 = vabdd_f64(a2, v9);
      v12 = fabs(a2);
      v13 = fabs(v9);
      if (v12 < v13)
        v12 = v13;
      return v11 / v12;
    }
  }
  return v7;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::applyConstraint(WebCore::MediaConstraintType,WebCore::MediaConstraint const&)::$_0,BOOL,WTF::String const&>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;

  *(_QWORD *)a1 = &off_1E3419470;
  v3 = *(WTF **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::applyConstraint(WebCore::MediaConstraintType,WebCore::MediaConstraint const&)::$_0,BOOL,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = &off_1E3419470;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::applyConstraint(WebCore::MediaConstraintType,WebCore::MediaConstraint const&)::$_0,BOOL,WTF::String const&>::call(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  _BOOL8 result;

  if ((MEMORY[0x19AEA53F4](*a2, "user", 4) & 1) != 0)
  {
    v4 = 1;
  }
  else if ((MEMORY[0x19AEA53F4](*a2, "environment", 11) & 1) != 0)
  {
    v4 = 2;
  }
  else if ((MEMORY[0x19AEA53F4](*a2, "left", 4) & 1) != 0)
  {
    v4 = 3;
  }
  else if (MEMORY[0x19AEA53F4](*a2, "right", 5))
  {
    v4 = 4;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v5)
    return 0;
  v6 = *(unsigned __int8 **)(a1 + 8);
  v7 = v5 - 1;
  do
  {
    v8 = *v6++;
    result = v4 == v8;
  }
  while (v4 != v8 && v7-- != 0);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::applyConstraint(WebCore::MediaConstraintType,WebCore::MediaConstraint const&)::$_1,BOOL,WTF::String const&>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;

  *(_QWORD *)a1 = &off_1E3419498;
  v3 = *(WTF **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::applyConstraint(WebCore::MediaConstraintType,WebCore::MediaConstraint const&)::$_1,BOOL,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = &off_1E3419498;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::applyConstraint(WebCore::MediaConstraintType,WebCore::MediaConstraint const&)::$_1,BOOL,WTF::String const&>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int8 *i;

  v3 = WebCore::parseEnumerationFromString<WebCore::MeteringMode>(a2);
  if (v3 < 0x100u)
    return 0;
  v4 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v4)
    return 0;
  for (i = *(unsigned __int8 **)(a1 + 8); *i != v3; ++i)
  {
    if (!--v4)
      return 0;
  }
  **(_WORD **)(a1 + 24) = v3 | 0x100;
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::selectSettings(WebCore::MediaConstraints const&,WebCore::MediaTrackConstraintSetMap &)::$_0,BOOL,WebCore::MediaConstraintType,WebCore::MediaConstraint const&>::call(uint64_t a1, WTF::StringImpl *a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t result;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  int v19;
  double *v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::Logger *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  _QWORD v52[4];
  WTF::Logger *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint8_t buf[4];
  _BYTE v60[12];
  int v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  result = WebCore::RealtimeMediaSource::supportsConstraint(v6, (int)a2);
  if ((_DWORD)result)
  {
    if (a2 <= 0x13 && ((1 << (char)a2) & 0x90016) != 0)
    {
LABEL_4:
      WebCore::MediaTrackConstraintSetMap::set(*(_QWORD *)(a1 + 16), a2, (uint64_t)a3);
      return 0;
    }
    v8 = WebCore::RealtimeMediaSource::fitnessDistance((_BYTE *)v6, (int)a2, a3);
    if (fabs(v8) != INFINITY)
    {
      v20 = *(double **)(a1 + 32);
      if (v8 >= *v20)
        v8 = *v20;
      *v20 = v8;
      goto LABEL_4;
    }
    v9 = *(_QWORD *)(v6 + 40);
    if (!v9
      || (v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6),
          v11 = *(_QWORD *)(v6 + 48),
          v52[0] = v10,
          v52[1] = v12,
          v52[2] = "operator()",
          v52[3] = v11,
          !*(_BYTE *)(v9 + 12)))
    {
LABEL_95:
      **(_WORD **)(a1 + 24) = (unsigned __int16)a2 | 0x100;
      return 1;
    }
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v52);
    WTF::String::String((WTF::String *)&v56, "RealtimeMediaSource::selectSettings failed constraint %d");
    result = WTF::String::number(a2);
    if (v57)
    {
      v13 = *((_DWORD *)v57 + 1);
      if (v56)
        goto LABEL_11;
    }
    else
    {
      v13 = 0;
      if (v56)
      {
LABEL_11:
        v14 = *((_DWORD *)v56 + 1);
        if (v55)
        {
LABEL_12:
          v15 = *((_DWORD *)v55 + 1);
LABEL_13:
          if ((v15 | v14) < 0
            || ((v16 = __OFADD__(v14, v15), v17 = v14 + v15, !v16) ? (v18 = 0) : (v18 = 1),
                v13 < 0 || (v18 & 1) != 0 || (result = (v13 + v17), __OFADD__(v13, v17))))
          {
            v58 = 0;
            goto LABEL_107;
          }
          if (v57 && (*((_BYTE *)v57 + 16) & 4) == 0)
          {
            v19 = 0;
            goto LABEL_30;
          }
          if (v56)
          {
            v21 = *((_DWORD *)v56 + 4);
            v19 = (v21 >> 2) & 1;
            if (v55 && (v21 & 4) != 0)
              goto LABEL_29;
          }
          else
          {
            if (v55)
            {
LABEL_29:
              v19 = (*((unsigned __int8 *)v55 + 16) >> 2) & 1;
              goto LABEL_30;
            }
            v19 = 1;
          }
LABEL_30:
          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v19, v57, (uint64_t)v56, (uint64_t)v55, &v58);
          if (v58)
          {
            v23 = v55;
            v55 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v22);
              else
                *(_DWORD *)v23 -= 2;
            }
            v24 = v56;
            v56 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v22);
              else
                *(_DWORD *)v24 -= 2;
            }
            v25 = v57;
            v57 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v22);
              else
                *(_DWORD *)v25 -= 2;
            }
            v26 = qword_1ECE7CD60;
            v27 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v27)
            {
              WTF::String::utf8();
              v29 = v53 ? (char *)v53 + 16 : 0;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)v60 = v29;
              _os_log_impl(&dword_1940B8000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              v27 = (uint64_t)v53;
              v53 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 1)
                  v27 = WTF::fastFree((WTF *)v27, v28);
                else
                  --*(_DWORD *)v27;
              }
            }
            if (WebCore::LogWebRTC && byte_1ECE7CD50)
            {
              v30 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v31 = *v30;
                if ((v31 & 1) != 0)
                  break;
                v32 = __ldaxr(v30);
                if (v32 == v31)
                {
                  if (!__stxr(v31 | 1, v30))
                  {
                    v33 = WTF::Logger::observers((WTF::Logger *)v27);
                    v34 = *(unsigned int *)(v33 + 12);
                    if ((_DWORD)v34)
                    {
                      v35 = *(uint64_t **)v33;
                      v36 = *(_QWORD *)v33 + 8 * v34;
                      do
                      {
                        v37 = *v35;
                        *(_DWORD *)buf = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v52);
                        v61 = 0;
                        WTF::String::String((WTF::String *)&v62, "RealtimeMediaSource::selectSettings failed constraint %d");
                        v63 = 0;
                        WTF::String::number(a2);
                        v53 = 0;
                        v54 = 0;
                        v38 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v54) = 3;
                        v53 = v38;
                        v39 = HIDWORD(v54);
                        *((_DWORD *)v38 + 4 * HIDWORD(v54)) = *(_DWORD *)buf;
                        v40 = *(_QWORD *)&v60[4];
                        if (*(_QWORD *)&v60[4])
                          **(_DWORD **)&v60[4] += 2;
                        *((_QWORD *)v38 + 2 * v39 + 1) = v40;
                        *((_DWORD *)v38 + 4 * (v39 + 1)) = v61;
                        v41 = v62;
                        if (v62)
                          *(_DWORD *)v62 += 2;
                        *((_QWORD *)v38 + 2 * (v39 + 1) + 1) = v41;
                        *((_DWORD *)v38 + 4 * (v39 + 2)) = v63;
                        v42 = v64;
                        if (v64)
                          *(_DWORD *)v64 += 2;
                        *((_QWORD *)v38 + 2 * (v39 + 2) + 1) = v42;
                        HIDWORD(v54) = v39 + 3;
                        (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v37 + 16))(v37, &WebCore::LogWebRTC, 1, &v53);
                        v43 = v53;
                        if (HIDWORD(v54))
                        {
                          v44 = 16 * HIDWORD(v54);
                          v45 = (WTF::StringImpl **)((char *)v53 + 8);
                          do
                          {
                            v46 = *v45;
                            *v45 = 0;
                            if (v46)
                            {
                              if (*(_DWORD *)v46 == 2)
                                WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v28);
                              else
                                *(_DWORD *)v46 -= 2;
                            }
                            v45 += 2;
                            v44 -= 16;
                          }
                          while (v44);
                          v43 = v53;
                        }
                        if (v43)
                        {
                          v53 = 0;
                          LODWORD(v54) = 0;
                          WTF::fastFree(v43, v28);
                        }
                        v47 = v64;
                        v64 = 0;
                        if (v47)
                        {
                          if (*(_DWORD *)v47 == 2)
                            WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v28);
                          else
                            *(_DWORD *)v47 -= 2;
                        }
                        v48 = v62;
                        v62 = 0;
                        if (v48)
                        {
                          if (*(_DWORD *)v48 == 2)
                            WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v28);
                          else
                            *(_DWORD *)v48 -= 2;
                        }
                        v49 = *(WTF::StringImpl **)&v60[4];
                        *(_QWORD *)&v60[4] = 0;
                        if (v49)
                        {
                          if (*(_DWORD *)v49 == 2)
                            WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v28);
                          else
                            *(_DWORD *)v49 -= 2;
                        }
                        ++v35;
                      }
                      while (v35 != (uint64_t *)v36);
                    }
                    v50 = __ldxr(v30);
                    if (v50 == 1)
                    {
                      if (!__stlxr(0, v30))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v51 = v58;
            v58 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v28);
              else
                *(_DWORD *)v51 -= 2;
            }
            goto LABEL_95;
          }
LABEL_107:
          __break(0xC471u);
          return result;
        }
LABEL_103:
        v15 = 0;
        goto LABEL_13;
      }
    }
    v14 = 0;
    if (v55)
      goto LABEL_12;
    goto LABEL_103;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::selectSettings(WebCore::MediaConstraints const&,WebCore::MediaTrackConstraintSetMap &)::$_1,void,WebCore::MediaConstraintType,WebCore::MediaConstraint const&>::call(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  double v4;
  double *v5;
  double *v6;

  if (a2 > 0x13 || ((1 << a2) & 0x90016) == 0)
  {
    v4 = WebCore::RealtimeMediaSource::fitnessDistance(*(_BYTE **)(a1 + 8), a2, a3);
    v5 = *(double **)(a1 + 16);
    v6 = *(double **)(a1 + 24);
    *v5 = v4;
    *v6 = v4 + *v6;
    if (fabs(*v5) != INFINITY)
      **(_BYTE **)(a1 + 32) = 1;
  }
}

unint64_t WTF::Vector<std::pair<double,WebCore::MediaTrackConstraintSetMap>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 952 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<double,WebCore::MediaTrackConstraintSetMap>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<double,WebCore::MediaTrackConstraintSetMap>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<double,WebCore::MediaTrackConstraintSetMap>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x44D721)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 952 * a2;
      result = WTF::fastMalloc((WTF *)(952 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x3B8;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 952 * v4;
        do
        {
          *(_QWORD *)(v7 + v8) = *(_QWORD *)((char *)v3 + v8);
          WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v7 + v8 + 8, (uint64_t)v3 + v8 + 8);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3 + v8 + 736, v10);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3 + v8 + 680, v11);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3 + v8 + 624, v12);
          result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3 + v8 + 568, v13);
          v8 += 952;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::VectorMover<false,std::pair<double,WebCore::MediaTrackConstraintSetMap>>::moveOverlapping(unint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v5 = result;
  if (result <= a3)
  {
    if (a2 != result)
    {
      v11 = 0;
      v12 = a3 + a2 - result;
      do
      {
        *(_QWORD *)(v12 + v11 - 952) = *(_QWORD *)(a2 + v11 - 952);
        WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v12 + v11 - 944, a2 + v11 - 944);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](a2 + v11 - 216, v13);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](a2 + v11 - 272, v14);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](a2 + v11 - 328, v15);
        result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](a2 + v11 - 384, v16);
        v11 -= 952;
      }
      while (a2 + v11 != v5);
    }
  }
  else if (result != a2)
  {
    v6 = 0;
    do
    {
      *(_QWORD *)(a3 + v6) = *(_QWORD *)(v5 + v6);
      WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a3 + v6 + 8, v5 + v6 + 8);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 736, v7);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 680, v8);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 624, v9);
      result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 568, v10);
      v6 += 952;
    }
    while (v5 + v6 != a2);
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::selectSettings(WebCore::MediaConstraints const&,WebCore::MediaTrackConstraintSetMap &)::$_3,void,WebCore::MediaConstraintType,WebCore::MediaConstraint const&>::call(uint64_t a1, int a2, WebCore::StringConstraint *a3)
{
  _BYTE *v3;

  v3 = *(_BYTE **)(a1 + 8);
  switch(*((_BYTE *)a3 + 8))
  {
    case 0:
      WebCore::MediaTrackConstraintSetMap::merge((uint64_t)v3, a2, (uint64_t)a3);
      break;
    case 1:
      WebCore::MediaTrackConstraintSetMap::merge((uint64_t)v3, a2, (uint64_t)a3);
      break;
    case 2:
      WebCore::MediaTrackConstraintSetMap::merge((uint64_t)v3, a2, a3);
      break;
    case 3:
      WebCore::MediaTrackConstraintSetMap::merge(v3, a2, a3);
      break;
    default:
      return;
  }
}

void WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::hasAnyInvalidConstraint(WebCore::MediaConstraints const&)::$_0,void,WebCore::MediaConstraintType,WebCore::MediaConstraint const&>::call(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v4;
  double v5;
  double v6;
  BOOL v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  double v12;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WebCore::RealtimeMediaSource::fitnessDistance((_BYTE *)v4, a2, a3);
  if (a2 <= 0x13)
  {
    v6 = v5;
    if (((1 << a2) & 0xFFBDF) != 0)
    {
      v7 = v5 == 0.0;
      v8 = 2.0;
    }
    else
    {
      if (a2 == 5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 312))(v4);
        v12 = 32.0;
        if (v6 != 0.0)
          v12 = 1.0;
        v10 = v12 + v11;
        v9 = (double *)(v4 + 264);
        v8 = *(double *)(v4 + 264);
        goto LABEL_7;
      }
      v7 = v5 == 0.0;
      v8 = 32.0;
    }
    if (!v7)
      v8 = 1.0;
    v9 = (double *)(v4 + 264);
    v10 = *(double *)(v4 + 264);
LABEL_7:
    *v9 = v10 + v8;
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::applyConstraints(WebCore::MediaTrackConstraintSetMap const&)::$_0,void,WebCore::MediaConstraintType,WebCore::MediaConstraint const&>::call(uint64_t result, WTF::String *a2, uint64_t a3)
{
  if (((_DWORD)a2 - 1) >= 4 && (_DWORD)a2 != 16)
    return WebCore::RealtimeMediaSource::applyConstraint(*(_QWORD *)(result + 8), a2, a3);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::setIntrinsicSize(WebCore::IntSize const&,BOOL)::$_0,void>::call(uint64_t a1)
{
  return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(*(_QWORD *)(a1 + 8), 3u);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::VideoFacingMode>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, unsigned __int8 *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::Logger *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  WTF::Logger *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  __int128 buf;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString(this);
  v9 = *a4;
  {
    WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_0::operator() const(void)::impl;
    unk_1EE2F8DC0 = &WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_1::operator() const(void)::impl;
    qword_1EE2F8DC8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_2::operator() const(void)::impl;
    unk_1EE2F8DD0 = &WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_3::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_4::operator() const(void)::impl += 2;
    qword_1EE2F8DD8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_4::operator() const(void)::impl;
  }
  v10 = WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::values[v9];
  if (v10)
    *(_DWORD *)v10 += 2;
  if (v46)
  {
    v11 = *((_DWORD *)v46 + 1);
    if (v10)
    {
LABEL_7:
      v12 = *(_DWORD *)(v10 + 4);
      goto LABEL_8;
    }
  }
  else
  {
    v11 = 0;
    if (v10)
      goto LABEL_7;
  }
  v12 = 0;
LABEL_8:
  if ((v12 | v11) < 0)
    goto LABEL_88;
  v13 = (v11 + v12);
  if (__OFADD__(v11, v12))
    goto LABEL_88;
  if (v46)
  {
    v14 = *((_DWORD *)v46 + 4);
    v15 = (v14 >> 2) & 1;
    if (!v10 || (v14 & 4) == 0)
    {
LABEL_14:
      result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v13, v15, (uint64_t)v46, v10, &v47);
      if (v47)
      {
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v10, v8);
          else
            *(_DWORD *)v10 -= 2;
        }
        goto LABEL_18;
      }
LABEL_89:
      __break(0xC471u);
      return result;
    }
LABEL_13:
    v15 = (*(unsigned __int8 *)(v10 + 16) >> 2) & 1;
    goto LABEL_14;
  }
  if (v10)
    goto LABEL_13;
  if (!(_DWORD)v13)
  {
    v42 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_86;
  }
  if ((v13 & 0x80000000) != 0
    || (result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v13 + 20)), (v42 = buf) == 0))
  {
LABEL_88:
    v47 = 0;
    goto LABEL_89;
  }
  *(_DWORD *)buf = 2;
  *(_DWORD *)(v42 + 4) = v13;
  *(_QWORD *)(v42 + 8) = v42 + 20;
  *(_DWORD *)(v42 + 16) = 4;
LABEL_86:
  v47 = (WTF::StringImpl *)v42;
LABEL_18:
  v16 = v46;
  v46 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v8);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(NSObject **)(a1 + 32);
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v18)
  {
    WTF::String::utf8();
    v20 = v44 ? (char *)v44 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v20;
    _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v18 = (uint64_t)v44;
    v44 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        v18 = WTF::fastFree((WTF *)v18, v19);
      else
        --*(_DWORD *)v18;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        break;
      v23 = __ldaxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 | 1, v21))
        {
          v24 = WTF::Logger::observers((WTF::Logger *)v18);
          v25 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v25)
          {
            v26 = *(uint64_t **)v24;
            v27 = *(_QWORD *)v24 + 8 * v25;
            do
            {
              v28 = *v26;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v29 = *a4;
              v49 = 0;
              {
                WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_0::operator() const(void)::impl;
                unk_1EE2F8DC0 = &WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_2::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_3::operator() const(void)::impl += 2;
                qword_1EE2F8DC8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_2::operator() const(void)::impl;
                unk_1EE2F8DD0 = &WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_3::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_4::operator() const(void)::impl += 2;
                qword_1EE2F8DD8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_4::operator() const(void)::impl;
              }
              v30 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::values[v29];
              if (v30)
                *(_DWORD *)v30 += 2;
              v50 = v30;
              v44 = 0;
              v45 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v45) = 2;
              v44 = v31;
              v32 = HIDWORD(v45);
              *((_DWORD *)v31 + 4 * HIDWORD(v45)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v49;
              v34 = v50;
              if (v50)
                *(_DWORD *)v50 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              HIDWORD(v45) = v32 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, a1, a2, &v44);
              v35 = v44;
              if (HIDWORD(v45))
              {
                v36 = 16 * HIDWORD(v45);
                v37 = (WTF::StringImpl **)((char *)v44 + 8);
                do
                {
                  v38 = *v37;
                  *v37 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                  v37 += 2;
                  v36 -= 16;
                }
                while (v36);
                v35 = v44;
              }
              if (v35)
              {
                v44 = 0;
                LODWORD(v45) = 0;
                WTF::fastFree(v35, v19);
              }
              v39 = v50;
              v50 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v40 -= 2;
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          v41 = __ldxr(v21);
          if (v41 == 1)
          {
            if (!__stlxr(0, v21))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MeteringMode>(WTF::Logger::LogSiteIdentifier *a1, unsigned __int8 *a2)
{
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::String *v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint8_t buf[4];
  _BYTE v42[12];
  int v43;
  WTF::StringImpl *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  result = WTF::String::number((WTF::String *)*a2);
  if (!v39)
  {
    v5 = 0;
    if (v38)
      goto LABEL_3;
LABEL_71:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = *((_DWORD *)v39 + 1);
  if (!v38)
    goto LABEL_71;
LABEL_3:
  v6 = *((_DWORD *)v38 + 1);
LABEL_4:
  if ((v6 | v5) < 0 || (result = (v5 + v6), __OFADD__(v5, v6)))
  {
    v40 = 0;
    goto LABEL_75;
  }
  if (v39)
  {
    v7 = *((_DWORD *)v39 + 4);
    v8 = (v7 >> 2) & 1;
    if (v38 && (v7 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v38)
    {
LABEL_9:
      v8 = (*((unsigned __int8 *)v38 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v8 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (uint64_t)v39, (uint64_t)v38, &v40);
  if (!v40)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v10 = v38;
  v38 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v39;
  v39 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = qword_1ECE7CD60;
  v13 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v36 ? (char *)v36 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v42 = v15;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v13 = (uint64_t)v36;
    v36 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = WTF::fastFree((WTF *)v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (WebCore::LogWebRTC)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v19 = WTF::Logger::observers((WTF::Logger *)v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v24 = (WTF::String *)*a2;
              v43 = 0;
              WTF::String::number(v24);
              v36 = 0;
              v37 = 0;
              v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v37) = 2;
              v36 = v25;
              v26 = HIDWORD(v37);
              *((_DWORD *)v25 + 4 * HIDWORD(v37)) = *(_DWORD *)buf;
              v27 = *(_QWORD *)&v42[4];
              if (*(_QWORD *)&v42[4])
                **(_DWORD **)&v42[4] += 2;
              *((_QWORD *)v25 + 2 * v26 + 1) = v27;
              *((_DWORD *)v25 + 4 * (v26 + 1)) = v43;
              v28 = v44;
              if (v44)
                *(_DWORD *)v44 += 2;
              *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
              HIDWORD(v37) = v26 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, &WebCore::LogWebRTC, 0, &v36);
              v29 = v36;
              if (HIDWORD(v37))
              {
                v30 = 16 * HIDWORD(v37);
                v31 = (WTF::StringImpl **)((char *)v36 + 8);
                do
                {
                  v32 = *v31;
                  *v31 = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                  v31 += 2;
                  v30 -= 16;
                }
                while (v30);
                v29 = v36;
              }
              if (v29)
              {
                v36 = 0;
                LODWORD(v37) = 0;
                WTF::fastFree(v29, v14);
              }
              v33 = v44;
              v44 = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v33 -= 2;
              }
              v34 = *(WTF::StringImpl **)&v42[4];
              *(_QWORD *)&v42[4] = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v34 -= 2;
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v35 = __ldxr(v16);
          if (v35 == 1)
          {
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v40;
  v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::scheduleDeferredTask(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34195B0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 144))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::scheduleDeferredTask(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34195B0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 144))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::scheduleDeferredTask(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSource::setType(WebCore::RealtimeMediaSource::Type)::$_0,void>::call(uint64_t a1)
{
  uint64_t **v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(uint64_t ***)(a1 + 8);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3419600;
  v4 = v2;
  ((void (*)(uint64_t **))(*v1)[17])(v1);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1 + 16, &v4);
  ((void (*)(uint64_t **))(*v1)[18])(v1);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19RealtimeMediaSource7setTypeENS3_4TypeEENK3__0clEvEUlRT_E_vJRNS2_27RealtimeMediaSourceObserverEEE4callESA_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::RealtimeMediaSource::Type,char [3],WTF::String,char [3],WTF::String,char [3],WTF::String>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, unsigned __int8 *a4, const char *a5, WTF::StringImpl **a6, const char *a7, WTF::StringImpl **a8, const char *a9, WTF::StringImpl **a10)
{
  uint64_t v12;
  uint64_t *v13;
  WTF::Logger *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::Logger *v50;
  uint64_t *v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  int v63;
  uint64_t v64;
  unsigned __int8 *v66;
  WTF::Logger *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  __int128 buf;
  int v86;
  WTF::StringImpl *v87;
  int v88;
  WTF::StringImpl *v89;
  int v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93;
  int v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v66 = a4;
  v12 = *a4;
  v13 = WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::values;
  {
    WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F8DA8 = &WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_1::operator() const(void)::impl;
  }
  v14 = (WTF::Logger *)WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::values[v12];
  if (v14)
    *(_DWORD *)v14 += 2;
  WTF::String::String((WTF::String *)&v76, a5);
  v15 = *a6;
  if (*a6)
    *(_DWORD *)v15 += 2;
  WTF::String::String((WTF::String *)&v75, a7);
  v16 = *a8;
  if (*a8)
    *(_DWORD *)v16 += 2;
  WTF::String::String((WTF::String *)&v74, a9);
  v17 = *a10;
  if (*a10)
    *(_DWORD *)v17 += 2;
  v72 = v14;
  v84 = v76;
  *(_QWORD *)&buf = v77;
  v82 = v75;
  v83 = v15;
  v80 = v74;
  v81 = v16;
  v79 = v17;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v72, (uint64_t *)&v84, (uint64_t *)&v83, (uint64_t *)&v82, (uint64_t *)&v81, (uint64_t *)&v80, (uint64_t *)&v79, &v78);
  if (!v78)
  {
    __break(0xC471u);
    return result;
  }
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v19);
    else
      *(_DWORD *)v17 -= 2;
  }
  v20 = v74;
  v74 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v19);
      if (!v16)
        goto LABEL_21;
      goto LABEL_19;
    }
    *(_DWORD *)v20 -= 2;
  }
  if (!v16)
    goto LABEL_21;
LABEL_19:
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy(v16, v19);
  else
    *(_DWORD *)v16 -= 2;
LABEL_21:
  v21 = v75;
  v75 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v19);
      if (!v15)
        goto LABEL_27;
      goto LABEL_25;
    }
    *(_DWORD *)v21 -= 2;
  }
  if (!v15)
    goto LABEL_27;
LABEL_25:
  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy(v15, v19);
  else
    *(_DWORD *)v15 -= 2;
LABEL_27:
  v22 = v76;
  v76 = 0;
  if (!v22)
    goto LABEL_30;
  if (*(_DWORD *)v22 != 2)
  {
    *(_DWORD *)v22 -= 2;
LABEL_30:
    if (v14)
      goto LABEL_31;
    goto LABEL_33;
  }
  WTF::StringImpl::destroy(v22, v19);
  if (v14)
  {
LABEL_31:
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v19);
    else
      *(_DWORD *)v14 -= 2;
  }
LABEL_33:
  v23 = v77;
  v77 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v19);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *(NSObject **)(a1 + 32);
  v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v25)
  {
    WTF::String::utf8();
    v27 = v72 ? (char *)v72 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v27;
    _os_log_impl(&dword_1940B8000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v25 = (uint64_t)v72;
    v72 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
        v25 = WTF::fastFree((WTF *)v25, v26);
      else
        --*(_DWORD *)v25;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v29 = *v28;
      if ((v29 & 1) != 0)
        break;
      v30 = __ldaxr(v28);
      if (v30 == v29)
      {
        if (!__stxr(v29 | 1, v28))
        {
          v31 = WTF::Logger::observers((WTF::Logger *)v25);
          v32 = *(unsigned int *)(v31 + 12);
          if ((_DWORD)v32)
          {
            v33 = *(uint64_t **)v31;
            v64 = *(_QWORD *)v31 + 8 * v32;
            do
            {
              v34 = *v33;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v35 = *v66;
              v86 = 0;
              {
                WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_1::operator() const(void)::impl += 2;
                *v13 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_0::operator() const(void)::impl;
                v13[1] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_1::operator() const(void)::impl;
              }
              v36 = (WTF::StringImpl *)v13[v35];
              if (v36)
                *(_DWORD *)v36 += 2;
              v87 = v36;
              v88 = 0;
              WTF::String::String((WTF::String *)&v89, a5);
              v90 = 0;
              v37 = *a6;
              if (*a6)
                *(_DWORD *)v37 += 2;
              v91 = v37;
              v92 = 0;
              WTF::String::String((WTF::String *)&v93, a7);
              v94 = 0;
              v38 = *a8;
              if (*a8)
                *(_DWORD *)v38 += 2;
              v95 = v38;
              v96 = 0;
              WTF::String::String((WTF::String *)&v97, a9);
              v98 = 0;
              v39 = *a10;
              if (*a10)
                *(_DWORD *)v39 += 2;
              v99 = v39;
              v72 = 0;
              v73 = 0;
              v40 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v73) = 8;
              v72 = v40;
              v41 = HIDWORD(v73);
              *((_DWORD *)v40 + 4 * HIDWORD(v73)) = buf;
              v42 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v40 + 2 * v41 + 1) = v42;
              *((_DWORD *)v40 + 4 * (v41 + 1)) = v86;
              v43 = v87;
              if (v87)
                *(_DWORD *)v87 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 1) + 1) = v43;
              *((_DWORD *)v40 + 4 * (v41 + 2)) = v88;
              v44 = v89;
              if (v89)
                *(_DWORD *)v89 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 2) + 1) = v44;
              *((_DWORD *)v40 + 4 * (v41 + 3)) = v90;
              v45 = v91;
              if (v91)
                *(_DWORD *)v91 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 3) + 1) = v45;
              *((_DWORD *)v40 + 4 * (v41 + 4)) = v92;
              v46 = v93;
              if (v93)
                *(_DWORD *)v93 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 4) + 1) = v46;
              *((_DWORD *)v40 + 4 * (v41 + 5)) = v94;
              v47 = v95;
              if (v95)
                *(_DWORD *)v95 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 5) + 1) = v47;
              *((_DWORD *)v40 + 4 * (v41 + 6)) = v96;
              v48 = v97;
              if (v97)
                *(_DWORD *)v97 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 6) + 1) = v48;
              *((_DWORD *)v40 + 4 * (v41 + 7)) = v98;
              v49 = v99;
              if (v99)
                *(_DWORD *)v99 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 7) + 1) = v49;
              HIDWORD(v73) = v41 + 8;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v34 + 16))(v34, a1, a2, &v72);
              v50 = v72;
              if (HIDWORD(v73))
              {
                v51 = v13;
                v52 = 16 * HIDWORD(v73);
                v53 = (WTF::StringImpl **)((char *)v72 + 8);
                do
                {
                  v54 = *v53;
                  *v53 = 0;
                  if (v54)
                  {
                    if (*(_DWORD *)v54 == 2)
                      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v26);
                    else
                      *(_DWORD *)v54 -= 2;
                  }
                  v53 += 2;
                  v52 -= 16;
                }
                while (v52);
                v50 = v72;
                v13 = v51;
              }
              if (v50)
              {
                v72 = 0;
                LODWORD(v73) = 0;
                WTF::fastFree(v50, v26);
              }
              v55 = v99;
              v99 = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = v97;
              v97 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v56 -= 2;
              }
              v57 = v95;
              v95 = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v57 -= 2;
              }
              v58 = v93;
              v93 = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v58 -= 2;
              }
              v59 = v91;
              v91 = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v59 -= 2;
              }
              v60 = v89;
              v89 = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v60 -= 2;
              }
              v61 = v87;
              v87 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v61 -= 2;
              }
              v62 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                  WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v62 -= 2;
              }
              ++v33;
            }
            while (v33 != (uint64_t *)v64);
          }
          v63 = __ldxr(v28);
          if (v63 == 1)
          {
            if (!__stlxr(0, v28))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v78;
  v78 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::RealtimeMediaSourceCenter::*&)(void),WebCore::RealtimeMediaSourceCenter*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::createMediaStream(WTF::Ref<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<WebCore::MediaStreamPrivate,WTF::RawPtrTraits<std::experimental::fundamentals_v3::expected>,WTF::DefaultRefDerefTraits<std::experimental::fundamentals_v3::expected>>,WebCore::CaptureSourceError> &&)> &&,WebCore::MediaDeviceHashSalts &&,WebCore::CaptureDevice &&,WebCore::MediaDeviceHashSalts,WebCore::MediaStreamRequest const&)::$_0,void,WTF::Ref<WebCore::MediaStreamPrivate,WTF::RawPtrTraits<std::experimental::fundamentals_v3::expected>,WTF::DefaultRefDerefTraits<std::experimental::fundamentals_v3::expected>>&&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = &off_1E3419680;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7);
  v8 = a1[1];
  a1[1] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 144))(v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::createMediaStream(WTF::Ref<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<WebCore::MediaStreamPrivate,WTF::RawPtrTraits<std::experimental::fundamentals_v3::expected>,WTF::DefaultRefDerefTraits<std::experimental::fundamentals_v3::expected>>,WebCore::CaptureSourceError> &&)> &&,WebCore::MediaDeviceHashSalts &&,WebCore::CaptureDevice &&,WebCore::MediaDeviceHashSalts,WebCore::MediaStreamRequest const&)::$_0,void,WTF::Ref<WebCore::MediaStreamPrivate,WTF::RawPtrTraits<std::experimental::fundamentals_v3::expected>,WTF::DefaultRefDerefTraits<std::experimental::fundamentals_v3::expected>>&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E3419680;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 144))(v8);
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 144))(v9);
  return WTF::fastFree(this, a2);
}

WebCore::MediaStreamPrivate *WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::createMediaStream(WTF::Ref<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<WebCore::MediaStreamPrivate,WTF::RawPtrTraits<std::experimental::fundamentals_v3::expected>,WTF::DefaultRefDerefTraits<std::experimental::fundamentals_v3::expected>>,WebCore::CaptureSourceError> &&)> &&,WebCore::MediaDeviceHashSalts &&,WebCore::CaptureDevice &&,WebCore::MediaDeviceHashSalts,WebCore::MediaStreamRequest const&)::$_0,void,WTF::Ref<WebCore::MediaStreamPrivate,WTF::RawPtrTraits<std::experimental::fundamentals_v3::expected>,WTF::DefaultRefDerefTraits<std::experimental::fundamentals_v3::expected>>&&>::call(uint64_t a1, uint64_t a2)
{
  WebCore::MediaStreamPrivate *v3;
  __int16 v4;
  WebCore::MediaStreamPrivate *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::MediaStreamPrivate *v9;
  void *v10;
  WTF *v11;
  void *v12;
  __int128 v13;
  WebCore::MediaStreamPrivate *v14;
  char v15;
  WebCore::MediaStreamPrivate *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(WebCore::MediaStreamPrivate **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v3 += 2;
    v4 = *(_WORD *)(a2 + 8);
    v16 = v3;
    v17 = v4;
    v18 = 1;
    result = (WebCore::MediaStreamPrivate *)(*(uint64_t (**)(_QWORD, WebCore::MediaStreamPrivate **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v16);
    if (v18 != -1)
      return (WebCore::MediaStreamPrivate *)((uint64_t (*)(WebCore::MediaStreamPrivate **, WebCore::MediaStreamPrivate **))off_1E3419218[v18])(&v14, &v16);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 136))(v6);
      v13 = *(_OWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v8 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v8 = &off_1E34196A8;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 16) = v6;
      *(_OWORD *)(v8 + 24) = v13;
      v16 = (WebCore::MediaStreamPrivate *)v8;
      (*(void (**)(_QWORD, WebCore::MediaStreamPrivate **))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), &v16);
      result = v16;
      v16 = 0;
      if (result)
        return (WebCore::MediaStreamPrivate *)(*(uint64_t (**)(WebCore::MediaStreamPrivate *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      WebCore::MediaStreamPrivate::create((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), (uint64_t *)&v14);
      v9 = v14;
      v14 = 0;
      v16 = v9;
      v18 = 0;
      (*(void (**)(_QWORD, WebCore::MediaStreamPrivate **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v16);
      if (v18 != -1)
        ((void (*)(char *, WebCore::MediaStreamPrivate **))off_1E3419218[v18])(&v15, &v16);
      v18 = -1;
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 4) == 1)
        {
          WebCore::MediaStreamPrivate::~MediaStreamPrivate(result, v10);
          return (WebCore::MediaStreamPrivate *)WTF::fastFree(v11, v12);
        }
        else
        {
          --*((_DWORD *)result + 4);
        }
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore25RealtimeMediaSourceCenter17createMediaStreamEONS_3RefIKNS_6LoggerENS_12RawPtrTraitsIS6_EENS_21DefaultRefDerefTraitsIS6_EEEEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS4_INS2_18MediaStreamPrivateENS7_ISH_EENS9_ISH_EEEENS2_18CaptureSourceErrorEEEEEEONS2_20MediaDeviceHashSaltsEONS2_13CaptureDeviceESU_RKNS2_18MediaStreamRequestEEN3__0clISL_EEDaOT_EUlS12_E_vJOSL_EED1Ev(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = &off_1E34196A8;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7);
  v8 = a1[1];
  a1[1] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 144))(v8);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore25RealtimeMediaSourceCenter17createMediaStreamEONS_3RefIKNS_6LoggerENS_12RawPtrTraitsIS6_EENS_21DefaultRefDerefTraitsIS6_EEEEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS4_INS2_18MediaStreamPrivateENS7_ISH_EENS9_ISH_EEEENS2_18CaptureSourceErrorEEEEEEONS2_20MediaDeviceHashSaltsEONS2_13CaptureDeviceESU_RKNS2_18MediaStreamRequestEEN3__0clISL_EEDaOT_EUlS12_E_vJOSL_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E34196A8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 144))(v8);
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 144))(v9);
  return WTF::fastFree(this, a2);
}

WebCore::MediaStreamPrivate *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore25RealtimeMediaSourceCenter17createMediaStreamEONS_3RefIKNS_6LoggerENS_12RawPtrTraitsIS6_EENS_21DefaultRefDerefTraitsIS6_EEEEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS4_INS2_18MediaStreamPrivateENS7_ISH_EENS9_ISH_EEEENS2_18CaptureSourceErrorEEEEEEONS2_20MediaDeviceHashSaltsEONS2_13CaptureDeviceESU_RKNS2_18MediaStreamRequestEEN3__0clISL_EEDaOT_EUlS12_E_vJOSL_EE4callES14_(uint64_t a1, uint64_t a2)
{
  WebCore::MediaStreamPrivate *v3;
  __int16 v4;
  WebCore::MediaStreamPrivate *result;
  WebCore::MediaStreamPrivate *v6;
  void *v7;
  WTF *v8;
  void *v9;
  WebCore::MediaStreamPrivate *v10;
  char v11;
  WebCore::MediaStreamPrivate *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(WebCore::MediaStreamPrivate **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v3 += 2;
    v4 = *(_WORD *)(a2 + 8);
    v12 = v3;
    v13 = v4;
    v14 = 1;
    result = (WebCore::MediaStreamPrivate *)(*(uint64_t (**)(_QWORD, WebCore::MediaStreamPrivate **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v12);
    if (v14 != -1)
      return (WebCore::MediaStreamPrivate *)((uint64_t (*)(WebCore::MediaStreamPrivate **, WebCore::MediaStreamPrivate **))off_1E3419218[v14])(&v10, &v12);
  }
  else
  {
    WebCore::MediaStreamPrivate::create((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), (uint64_t *)&v10);
    v6 = v10;
    v10 = 0;
    v12 = v6;
    v14 = 0;
    (*(void (**)(_QWORD, WebCore::MediaStreamPrivate **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v12);
    if (v14 != -1)
      ((void (*)(char *, WebCore::MediaStreamPrivate **))off_1E3419218[v14])(&v11, &v12);
    v14 = -1;
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
      {
        WebCore::MediaStreamPrivate::~MediaStreamPrivate(result, v7);
        return (WebCore::MediaStreamPrivate *)WTF::fastFree(v8, v9);
      }
      else
      {
        --*((_DWORD *)result + 4);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::getMediaStreamDevices(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34196D0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::getMediaStreamDevices(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34196D0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::getMediaStreamDevices(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t (***v4)(_QWORD);
  uint64_t v5;
  uint64_t *v6;
  uint64_t (***v7)(_QWORD);
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _QWORD v17[2];

  v2 = *(_QWORD **)(a1 + 8);
  v17[0] = 0;
  v17[1] = 0;
  v3 = (uint64_t *)v2[7];
  if (!v3)
    v3 = WebCore::CoreAudioCaptureSourceFactory::singleton(0);
  v4 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
  v5 = (**v4)(v4);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v17, *(_QWORD *)v5, *(_DWORD *)(v5 + 12));
  v6 = (uint64_t *)v2[8];
  if (!v6)
  {
    v6 = &WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory;
    {
      WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory = (uint64_t)&off_1E341BAE8;
    }
  }
  v7 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t *))(*v6 + 24))(v6);
  v8 = (**v7)(v7);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v17, *(_QWORD *)v8, *(_DWORD *)(v8 + 12));
  v9 = (uint64_t *)v2[7];
  if (!v9)
    v9 = WebCore::CoreAudioCaptureSourceFactory::singleton(0);
  v10 = (*(uint64_t (**)(uint64_t *))(*v9 + 32))(v9);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v17, *(_QWORD *)v10, *(_DWORD *)(v10 + 12));
  v11 = (uint64_t *)v2[9];
  if (!v11)
  {
    v11 = &WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory;
    {
      WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory = (uint64_t)&off_1E341BB18;
    }
  }
  v12 = (*(uint64_t (**)(uint64_t *))(*v11 + 24))(v11);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12))
  {
    v13 = (**(uint64_t (***)(uint64_t))v12)(v12);
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v17, *(_QWORD *)v13, *(_DWORD *)(v13 + 12));
  }
  v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 16))(v14, v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v17, v15);
}

uint64_t WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  if (!a3)
    return result;
  v4 = result;
  v7 = *(unsigned int *)(result + 8);
  v6 = *(unsigned int *)(result + 12);
  v8 = v6 + a3;
  if (v8 > v7)
  {
    v9 = v7 + (v7 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8)
      v10 = v6 + a3;
    if (v10 >= 0x6666667)
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x1962A8208);
    }
    v11 = *(WTF::StringImpl **)result;
    v12 = (WTF::StringImpl *)(*(_QWORD *)result + 40 * v6);
    v13 = 40 * v10;
    v14 = WTF::fastMalloc((WTF *)(40 * v10));
    *(_DWORD *)(v4 + 8) = (v13 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v4 = v14;
    result = (uint64_t)WTF::VectorMover<false,WebCore::CaptureDevice>::move(v11, v12, v14);
    if (v11)
    {
      if (*(WTF::StringImpl **)v4 == v11)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      result = WTF::fastFree(v11, v15);
    }
  }
  v16 = *(unsigned int *)(v4 + 12);
  if (v8 < v16)
    goto LABEL_24;
  v17 = *(_QWORD *)v4 + 40 * v16;
  v18 = a2 + 40 * a3;
  do
  {
    v19 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v19 += 2;
    *(_QWORD *)v17 = v19;
    *(_BYTE *)(v17 + 8) = *(_BYTE *)(a2 + 8);
    v20 = *(_DWORD **)(a2 + 16);
    if (v20)
      *v20 += 2;
    *(_QWORD *)(v17 + 16) = v20;
    v21 = *(_DWORD **)(a2 + 24);
    if (v21)
      *v21 += 2;
    *(_QWORD *)(v17 + 24) = v21;
    *(_DWORD *)(v17 + 32) = *(_DWORD *)(a2 + 32);
    a2 += 40;
    v17 += 40;
  }
  while (a2 != v18);
  *(_DWORD *)(v4 + 12) = v8;
  return result;
}

WebCore::RealtimeMediaSourceCenter *WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RealtimeMediaSourceCenter,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::RealtimeMediaSourceCenter *result;
  WTF *v3;
  void *v4;

  result = *(WebCore::RealtimeMediaSourceCenter **)(a1 + 8);
  if (result)
  {
    WebCore::RealtimeMediaSourceCenter::~RealtimeMediaSourceCenter(result, a2);
    return (WebCore::RealtimeMediaSourceCenter *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::captureDeviceWillBeRemoved(WTF::String const&)::$_0,void,WebCore::RealtimeMediaSourceCenterObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::triggerDevicesChangedObservers(void)::$_0,void,WebCore::RealtimeMediaSourceCenterObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

char *WTF::Vector<WebCore::RealtimeMediaSourceCenter::DeviceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x1962A8428);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12));
      v18 = 48 * v16;
      v19 = WTF::fastMalloc((WTF *)(48 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::RealtimeMediaSourceCenter::DeviceInfo>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x1962A8430);
      }
      v10 = 48 * v9;
      v11 = WTF::fastMalloc((WTF *)(48 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::RealtimeMediaSourceCenter::DeviceInfo>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::RealtimeMediaSourceCenter::DeviceInfo>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      v6 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v6;
      *(_BYTE *)(a3 + 16) = *((_BYTE *)v5 + 16);
      v7 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      *(_QWORD *)(a3 + 24) = v7;
      v8 = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      *(_QWORD *)(a3 + 32) = v8;
      *(_DWORD *)(a3 + 40) = *((_DWORD *)v5 + 10);
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::enumerateDevices(BOOL,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  *a1 = &off_1E3419770;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::enumerateDevices(BOOL,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3419770;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::enumerateDevices(BOOL,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  *a1 = &off_1E3419798;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::enumerateDevices(BOOL,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3419798;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::enumerateDevices(BOOL,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  *a1 = &off_1E34197C0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::enumerateDevices(BOOL,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34197C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::enumerateDevices(BOOL,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_3,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  *a1 = &off_1E34197E8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::enumerateDevices(BOOL,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34197E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::validateRequestConstraints(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_1E3419810;
  v3 = (WTF::StringImpl *)a1[250];
  a1[250] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[249];
  a1[249] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)(a1 + 126), a2);
  WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)(a1 + 5), v5);
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::validateRequestConstraints(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = off_1E3419810;
  v3 = (WTF::StringImpl *)a1[250];
  a1[250] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[249];
  a1[249] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)(a1 + 126), a2);
  WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)(a1 + 5), v5);
  v7 = a1[3];
  a1[3] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[2];
  a1[2] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return WTF::fastFree((WTF *)a1, v6);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::validateRequestConstraints(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0,void>::call(uint64_t a1)
{
  return WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(*(WebCore::RealtimeMediaSource **)(a1 + 8), (_QWORD *)(a1 + 16), (_QWORD *)(a1 + 24), (unsigned __int8 *)(a1 + 32), (WTF::StringImpl **)(a1 + 1992));
}

uint64_t WTF::Vector<WebCore::RealtimeMediaSourceCenter::DeviceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    v5 = *(_QWORD *)a1 + 24;
    do
    {
      v6 = *(WTF::StringImpl **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(WTF::StringImpl **)(v5 - 16);
      *(_QWORD *)(v5 - 16) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v5 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_3,void,WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &,WebCore::MediaConstraint const&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::MediaConstraint::log(a3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_4,void,WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &,WebCore::MediaConstraint const&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::MediaConstraint::log(a3);
}

void std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(uint64_t *a1, WTF::StringImpl *a2, unint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  unint64_t v8;
  unint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  double v18;
  double v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  char *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  double v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl **v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      if (*((double *)a2 - 6) > *(double *)a1)
        std::swap[abi:sn180100]<WebCore::RealtimeMediaSourceCenter::DeviceInfo>(a1, (WTF::StringImpl *)((char *)a2 - 48));
    }
    else
    {
      v8 = a3;
      if ((uint64_t)a3 <= 0)
      {
        if (a1 != (uint64_t *)a2)
        {
          v14 = a1 + 6;
          if (a1 + 6 != (uint64_t *)a2)
          {
            v15 = 0;
            v16 = a1;
            do
            {
              v17 = v14;
              v18 = *((double *)v16 + 6);
              v19 = *(double *)v16;
              if (v18 > *(double *)v16)
              {
                v78 = v16[7];
                v16[7] = 0;
                v20 = *((_BYTE *)v16 + 64);
                v22 = v16[9];
                v21 = v16[10];
                v16[9] = 0;
                v16[10] = 0;
                v23 = v15;
                v24 = *((_DWORD *)v16 + 22);
                while (1)
                {
                  v25 = (char *)a1 + v23;
                  *((double *)v25 + 6) = v19;
                  v26 = *(uint64_t *)((char *)a1 + v23 + 8);
                  *((_QWORD *)v25 + 1) = 0;
                  v27 = *(WTF::StringImpl **)((char *)a1 + v23 + 56);
                  *((_QWORD *)v25 + 7) = v26;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2)
                      WTF::StringImpl::destroy(v27, a2);
                    else
                      *(_DWORD *)v27 -= 2;
                  }
                  v25[64] = v25[16];
                  v28 = *((_QWORD *)v25 + 3);
                  *((_QWORD *)v25 + 3) = 0;
                  v29 = (WTF::StringImpl *)*((_QWORD *)v25 + 9);
                  *((_QWORD *)v25 + 9) = v28;
                  if (v29)
                  {
                    if (*(_DWORD *)v29 == 2)
                      WTF::StringImpl::destroy(v29, a2);
                    else
                      *(_DWORD *)v29 -= 2;
                  }
                  v30 = (char *)a1 + v23;
                  v31 = *(uint64_t *)((char *)a1 + v23 + 32);
                  *((_QWORD *)v30 + 4) = 0;
                  v32 = *(WTF::StringImpl **)((char *)a1 + v23 + 80);
                  *((_QWORD *)v30 + 10) = v31;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, a2);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                  *((_DWORD *)v30 + 22) = *((_DWORD *)v30 + 10);
                  if (!v23)
                    break;
                  v19 = *(double *)((char *)a1 + v23 - 48);
                  v23 -= 48;
                  if (v18 <= v19)
                  {
                    v33 = (uint64_t)a1 + v23 + 48;
                    goto LABEL_30;
                  }
                }
                v33 = (uint64_t)a1;
LABEL_30:
                *(double *)v33 = v18;
                v34 = *(WTF::StringImpl **)(v33 + 8);
                *(_QWORD *)(v33 + 8) = v78;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                    WTF::StringImpl::destroy(v34, a2);
                  else
                    *(_DWORD *)v34 -= 2;
                }
                *(_BYTE *)(v33 + 16) = v20;
                v35 = *(WTF::StringImpl **)(v33 + 24);
                *(_QWORD *)(v33 + 24) = v22;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2)
                    WTF::StringImpl::destroy(v35, a2);
                  else
                    *(_DWORD *)v35 -= 2;
                }
                v36 = *(WTF::StringImpl **)(v33 + 32);
                *(_QWORD *)(v33 + 32) = v21;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 2)
                    WTF::StringImpl::destroy(v36, a2);
                  else
                    *(_DWORD *)v36 -= 2;
                }
                *(_DWORD *)(v33 + 40) = v24;
              }
              v14 = v17 + 6;
              v15 += 48;
              v16 = v17;
            }
            while (v17 + 6 != (uint64_t *)a2);
          }
        }
      }
      else
      {
        v11 = a3 >> 1;
        v12 = (WTF::StringImpl *)&a1[6 * (a3 >> 1)];
        v13 = a3 >> 1;
        if ((uint64_t)v8 <= a5)
        {
          v37 = std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>((uint64_t)a1, v12, v13, a4, a6);
          v38 = a4 + 48 * v11;
          std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>((uint64_t)&a1[6 * (v8 >> 1)], a2, v8 - (v8 >> 1), v38, v37);
          v40 = a4 + 48 * v8;
          v41 = a1 + 5;
          v42 = v38;
          v43 = a4;
          while (v42 != v40)
          {
            if (*(double *)v42 <= *(double *)v43)
            {
              *((_QWORD *)v41 - 5) = *(_QWORD *)v43;
              v50 = *(_QWORD *)(v43 + 8);
              *(_QWORD *)(v43 + 8) = 0;
              v51 = (WTF::StringImpl *)*((_QWORD *)v41 - 4);
              *((_QWORD *)v41 - 4) = v50;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, v39);
                else
                  *(_DWORD *)v51 -= 2;
              }
              *((_BYTE *)v41 - 24) = *(_BYTE *)(v43 + 16);
              v52 = *(_QWORD *)(v43 + 24);
              *(_QWORD *)(v43 + 24) = 0;
              v53 = (WTF::StringImpl *)*((_QWORD *)v41 - 2);
              *((_QWORD *)v41 - 2) = v52;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, v39);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = *(_QWORD *)(v43 + 32);
              *(_QWORD *)(v43 + 32) = 0;
              v55 = (WTF::StringImpl *)*((_QWORD *)v41 - 1);
              *((_QWORD *)v41 - 1) = v54;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, v39);
                else
                  *(_DWORD *)v55 -= 2;
              }
              *v41 = *(_DWORD *)(v43 + 40);
              v43 += 48;
            }
            else
            {
              *((_QWORD *)v41 - 5) = *(_QWORD *)v42;
              v44 = *(_QWORD *)(v42 + 8);
              *(_QWORD *)(v42 + 8) = 0;
              v45 = (WTF::StringImpl *)*((_QWORD *)v41 - 4);
              *((_QWORD *)v41 - 4) = v44;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, v39);
                else
                  *(_DWORD *)v45 -= 2;
              }
              *((_BYTE *)v41 - 24) = *(_BYTE *)(v42 + 16);
              v46 = *(_QWORD *)(v42 + 24);
              *(_QWORD *)(v42 + 24) = 0;
              v47 = (WTF::StringImpl *)*((_QWORD *)v41 - 2);
              *((_QWORD *)v41 - 2) = v46;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, v39);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = *(_QWORD *)(v42 + 32);
              *(_QWORD *)(v42 + 32) = 0;
              v49 = (WTF::StringImpl *)*((_QWORD *)v41 - 1);
              *((_QWORD *)v41 - 1) = v48;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, v39);
                else
                  *(_DWORD *)v49 -= 2;
              }
              *v41 = *(_DWORD *)(v42 + 40);
              v42 += 48;
            }
            v41 += 12;
            if (v43 == v38)
            {
              if (v42 != v40)
              {
                v65 = 0;
                do
                {
                  v66 = v42 + v65 * 4;
                  v67 = &v41[v65];
                  *((_QWORD *)v67 - 5) = *(_QWORD *)(v42 + v65 * 4);
                  v68 = *(_QWORD *)(v42 + v65 * 4 + 8);
                  *(_QWORD *)(v42 + v65 * 4 + 8) = 0;
                  v69 = *(WTF::StringImpl **)&v41[v65 - 8];
                  *((_QWORD *)v67 - 4) = v68;
                  if (v69)
                  {
                    if (*(_DWORD *)v69 == 2)
                      WTF::StringImpl::destroy(v69, v39);
                    else
                      *(_DWORD *)v69 -= 2;
                  }
                  *((_BYTE *)v67 - 24) = *(_BYTE *)(v66 + 16);
                  v70 = *(_QWORD *)(v66 + 24);
                  *(_QWORD *)(v66 + 24) = 0;
                  v71 = (WTF::StringImpl *)*((_QWORD *)v67 - 2);
                  *((_QWORD *)v67 - 2) = v70;
                  if (v71)
                  {
                    if (*(_DWORD *)v71 == 2)
                      WTF::StringImpl::destroy(v71, v39);
                    else
                      *(_DWORD *)v71 -= 2;
                  }
                  v72 = *(_QWORD *)(v66 + 32);
                  *(_QWORD *)(v66 + 32) = 0;
                  v73 = *(WTF::StringImpl **)&v41[v65 - 2];
                  *(_QWORD *)&v41[v65 - 2] = v72;
                  if (v73)
                  {
                    if (*(_DWORD *)v73 == 2)
                      WTF::StringImpl::destroy(v73, v39);
                    else
                      *(_DWORD *)v73 -= 2;
                  }
                  v41[v65] = *(_DWORD *)(v66 + 40);
                  v65 += 12;
                }
                while (v66 + 48 != v40);
              }
              goto LABEL_108;
            }
          }
          if (v43 != v38)
          {
            v56 = 0;
            do
            {
              v57 = &v41[v56];
              v58 = v43 + v56 * 4;
              *((_QWORD *)v57 - 5) = *(_QWORD *)(v43 + v56 * 4);
              v59 = *(_QWORD *)(v43 + v56 * 4 + 8);
              *(_QWORD *)(v43 + v56 * 4 + 8) = 0;
              v60 = *(WTF::StringImpl **)&v41[v56 - 8];
              *((_QWORD *)v57 - 4) = v59;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, v39);
                else
                  *(_DWORD *)v60 -= 2;
              }
              *((_BYTE *)v57 - 24) = *(_BYTE *)(v58 + 16);
              v61 = *(_QWORD *)(v58 + 24);
              *(_QWORD *)(v58 + 24) = 0;
              v62 = (WTF::StringImpl *)*((_QWORD *)v57 - 2);
              *((_QWORD *)v57 - 2) = v61;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                  WTF::StringImpl::destroy(v62, v39);
                else
                  *(_DWORD *)v62 -= 2;
              }
              v63 = *(_QWORD *)(v58 + 32);
              *(_QWORD *)(v58 + 32) = 0;
              v64 = *(WTF::StringImpl **)&v41[v56 - 2];
              *(_QWORD *)&v41[v56 - 2] = v63;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2)
                  WTF::StringImpl::destroy(v64, v39);
                else
                  *(_DWORD *)v64 -= 2;
              }
              v41[v56] = *(_DWORD *)(v58 + 40);
              v56 += 12;
            }
            while (v58 + 48 != v38);
          }
LABEL_108:
          if (a4)
          {
            v74 = (WTF::StringImpl **)(a4 + 24);
            do
            {
              v75 = v74[1];
              v74[1] = 0;
              if (v75)
              {
                if (*(_DWORD *)v75 == 2)
                  WTF::StringImpl::destroy(v75, v39);
                else
                  *(_DWORD *)v75 -= 2;
              }
              v76 = *v74;
              *v74 = 0;
              if (v76)
              {
                if (*(_DWORD *)v76 == 2)
                  WTF::StringImpl::destroy(v76, v39);
                else
                  *(_DWORD *)v76 -= 2;
              }
              v77 = *(v74 - 2);
              *(v74 - 2) = 0;
              if (v77)
              {
                if (*(_DWORD *)v77 == 2)
                  WTF::StringImpl::destroy(v77, v39);
                else
                  *(_DWORD *)v77 -= 2;
              }
              v74 += 6;
              --v8;
            }
            while (v8);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(a1, v12, v13, a4, a5);
          std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(&a1[6 * (v8 >> 1)], a2, v8 - (v8 >> 1), a4, a5);
          std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>((WTF::StringImpl *)a1, (WTF::StringImpl *)&a1[6 * (v8 >> 1)], (uint64_t *)a2, v8 >> 1, v8 - (v8 >> 1), a4, a5);
        }
      }
    }
  }
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(uint64_t a1, WTF::StringImpl *a2, unint64_t a3, uint64_t a4, double result)
{
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  _DWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  _DWORD *v57;
  double *v58;
  double v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  double *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  double *v68;
  double *v69;
  double v70;
  double v71;
  double v72;
  unint64_t v73;
  double *v74;
  double *v75;
  double v76;
  double v77;
  double v78;

  if (a3)
  {
    v8 = (double *)a1;
    if (a3 == 2)
    {
      v13 = *((double *)a2 - 6);
      if (v13 <= *(double *)a1)
      {
        *(_QWORD *)a4 = *(_QWORD *)a1;
        v50 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a4 + 8) = v50;
        *(_BYTE *)(a4 + 16) = *(_BYTE *)(a1 + 16);
        v51 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a4 + 24) = v51;
        v52 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a4 + 32) = v52;
        *(_DWORD *)(a4 + 40) = *(_DWORD *)(a1 + 40);
        result = *((double *)a2 - 6);
        *(double *)(a4 + 48) = result;
        v53 = *((_QWORD *)a2 - 5);
        *((_QWORD *)a2 - 5) = 0;
        *(_QWORD *)(a4 + 56) = v53;
        *(_BYTE *)(a4 + 64) = *((_BYTE *)a2 - 32);
        v54 = *((_QWORD *)a2 - 3);
        *((_QWORD *)a2 - 3) = 0;
        *(_QWORD *)(a4 + 72) = v54;
        v55 = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = 0;
        *(_QWORD *)(a4 + 80) = v55;
        v12 = (_DWORD *)(a4 + 88);
        v20 = (_DWORD *)((char *)a2 - 8);
        goto LABEL_47;
      }
      *(double *)a4 = v13;
      v14 = *((_QWORD *)a2 - 5);
      *((_QWORD *)a2 - 5) = 0;
      *(_QWORD *)(a4 + 8) = v14;
      *(_BYTE *)(a4 + 16) = *((_BYTE *)a2 - 32);
      v15 = *((_QWORD *)a2 - 3);
      *((_QWORD *)a2 - 3) = 0;
      *(_QWORD *)(a4 + 24) = v15;
      v16 = *((_QWORD *)a2 - 2);
      *((_QWORD *)a2 - 2) = 0;
      *(_QWORD *)(a4 + 32) = v16;
      *(_DWORD *)(a4 + 40) = *((_DWORD *)a2 - 2);
      result = *(double *)a1;
      *(_QWORD *)(a4 + 48) = *(_QWORD *)a1;
      v17 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a4 + 56) = v17;
      *(_BYTE *)(a4 + 64) = *(_BYTE *)(a1 + 16);
      v18 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a4 + 72) = v18;
      v19 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a4 + 80) = v19;
      v12 = (_DWORD *)(a4 + 88);
LABEL_7:
      v20 = (_DWORD *)(a1 + 40);
LABEL_47:
      *v12 = *v20;
      return result;
    }
    if (a3 == 1)
    {
      result = *(double *)a1;
      *(_QWORD *)a4 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a4 + 8) = v9;
      *(_BYTE *)(a4 + 16) = *(_BYTE *)(a1 + 16);
      v10 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a4 + 24) = v10;
      v11 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a4 + 32) = v11;
      v12 = (_DWORD *)(a4 + 40);
      goto LABEL_7;
    }
    if ((uint64_t)a3 > 8)
    {
      v56 = (double *)(a1 + 48 * (a3 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(a1, v56, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(&v8[6 * (a3 >> 1)], a2, a3 - (a3 >> 1), a4 + 48 * (a3 >> 1), a3 - (a3 >> 1));
      v57 = (_DWORD *)(a4 + 40);
      v58 = &v8[6 * (a3 >> 1)];
      while (v58 != (double *)a2)
      {
        result = *v58;
        v59 = *v8;
        if (*v58 <= *v8)
        {
          v65 = *((_QWORD *)v8 + 1);
          v8[1] = 0.0;
          *((_QWORD *)v57 - 4) = v65;
          v61 = *((_BYTE *)v8 + 16);
          v66 = *((_QWORD *)v8 + 3);
          v8[3] = 0.0;
          *((_QWORD *)v57 - 2) = v66;
          v63 = *((_QWORD *)v8 + 4);
          v8[4] = 0.0;
          v64 = v8;
          v8 += 6;
          result = v59;
        }
        else
        {
          v60 = *((_QWORD *)v58 + 1);
          v58[1] = 0.0;
          *((_QWORD *)v57 - 4) = v60;
          v61 = *((_BYTE *)v58 + 16);
          v62 = *((_QWORD *)v58 + 3);
          v58[3] = 0.0;
          *((_QWORD *)v57 - 2) = v62;
          v63 = *((_QWORD *)v58 + 4);
          v58[4] = 0.0;
          v64 = v58;
          v58 += 6;
        }
        *((double *)v57 - 5) = result;
        *((_BYTE *)v57 - 24) = v61;
        *((_QWORD *)v57 - 1) = v63;
        *v57 = *((_DWORD *)v64 + 10);
        v57 += 12;
        if (v8 == v56)
        {
          if (v58 != (double *)a2)
          {
            v67 = 0;
            do
            {
              v68 = &v58[v67 / 8];
              v69 = (double *)&v57[v67 / 4];
              result = v58[v67 / 8];
              *(v69 - 5) = result;
              v70 = v58[v67 / 8 + 1];
              v68[1] = 0.0;
              *(v69 - 4) = v70;
              *((_BYTE *)v69 - 24) = LOBYTE(v58[v67 / 8 + 2]);
              v71 = v58[v67 / 8 + 3];
              v68[3] = 0.0;
              *(v69 - 2) = v71;
              v72 = v58[v67 / 8 + 4];
              v68[4] = 0.0;
              *(v69 - 1) = v72;
              *(_DWORD *)v69 = LODWORD(v58[v67 / 8 + 5]);
              v67 += 48;
            }
            while (v68 + 6 != (double *)a2);
          }
          return result;
        }
      }
      if (v8 != v56)
      {
        v73 = 0;
        do
        {
          v74 = (double *)&v57[v73 / 4];
          v75 = &v8[v73 / 8];
          result = v8[v73 / 8];
          *(v74 - 5) = result;
          v76 = v8[v73 / 8 + 1];
          v75[1] = 0.0;
          *(v74 - 4) = v76;
          *((_BYTE *)v74 - 24) = LOBYTE(v8[v73 / 8 + 2]);
          v77 = v8[v73 / 8 + 3];
          v75[3] = 0.0;
          *(v74 - 2) = v77;
          v78 = v8[v73 / 8 + 4];
          v75[4] = 0.0;
          *(v74 - 1) = v78;
          *(_DWORD *)v74 = LODWORD(v8[v73 / 8 + 5]);
          v73 += 48;
        }
        while (v75 + 6 != v56);
      }
    }
    else if ((WTF::StringImpl *)a1 != a2)
    {
      result = *(double *)a1;
      *(_QWORD *)a4 = *(_QWORD *)a1;
      v21 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a4 + 8) = v21;
      *(_BYTE *)(a4 + 16) = *(_BYTE *)(a1 + 16);
      v22 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a4 + 24) = v22;
      v23 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a4 + 32) = v23;
      *(_DWORD *)(a4 + 40) = *(_DWORD *)(a1 + 40);
      v24 = (double *)(a1 + 48);
      if ((WTF::StringImpl *)(a1 + 48) != a2)
      {
        v25 = 0;
        v26 = a4;
        do
        {
          v27 = v24;
          result = v8[6];
          v28 = (_DWORD *)(v26 + 88);
          if (result <= *(double *)v26)
          {
            *(double *)(v26 + 48) = result;
            v41 = *((_QWORD *)v8 + 7);
            v8[7] = 0.0;
            *(_QWORD *)(v26 + 56) = v41;
            *(_BYTE *)(v26 + 64) = *((_BYTE *)v8 + 64);
            v42 = *((_QWORD *)v8 + 9);
            v8[9] = 0.0;
            *(_QWORD *)(v26 + 72) = v42;
            v43 = *((_QWORD *)v8 + 10);
            v8[10] = 0.0;
            *(_QWORD *)(v26 + 80) = v43;
          }
          else
          {
            *(_QWORD *)(v26 + 48) = *(_QWORD *)v26;
            v29 = *(_QWORD *)(v26 + 8);
            *(_QWORD *)(v26 + 8) = 0;
            *(_QWORD *)(v26 + 56) = v29;
            *(_BYTE *)(v26 + 64) = *(_BYTE *)(v26 + 16);
            v30 = *(_OWORD *)(v26 + 24);
            *(_QWORD *)(v26 + 24) = 0;
            *(_QWORD *)(v26 + 32) = 0;
            *(_OWORD *)(v26 + 72) = v30;
            v31 = a4;
            *(_DWORD *)(v26 + 88) = *(_DWORD *)(v26 + 40);
            if (v26 != a4)
            {
              v32 = v25;
              while (1)
              {
                v31 = a4 + v32;
                v33 = *(double *)(a4 + v32 - 48);
                if (*v27 <= v33)
                  break;
                *(double *)v31 = v33;
                v34 = *(_QWORD *)(v31 - 40);
                *(_QWORD *)(v31 - 40) = 0;
                v35 = *(WTF::StringImpl **)(v31 + 8);
                *(_QWORD *)(v31 + 8) = v34;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2)
                    WTF::StringImpl::destroy(v35, a2);
                  else
                    *(_DWORD *)v35 -= 2;
                }
                v36 = a4 + v32;
                *(_BYTE *)(v36 + 16) = *(_BYTE *)(a4 + v32 - 32);
                v37 = *(_QWORD *)(a4 + v32 - 24);
                *(_QWORD *)(v36 - 24) = 0;
                v38 = *(WTF::StringImpl **)(a4 + v32 + 24);
                *(_QWORD *)(v36 + 24) = v37;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, a2);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                v39 = *(_QWORD *)(v36 - 16);
                *(_QWORD *)(v36 - 16) = 0;
                v40 = *(WTF::StringImpl **)(v36 + 32);
                *(_QWORD *)(v36 + 32) = v39;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, a2);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                *(_DWORD *)(a4 + v32 + 40) = *(_DWORD *)(a4 + v32 - 8);
                v32 -= 48;
                if (!v32)
                {
                  v31 = a4;
                  break;
                }
              }
            }
            result = *v27;
            *(double *)v31 = *v27;
            v44 = *((_QWORD *)v8 + 7);
            v8[7] = 0.0;
            v45 = *(WTF::StringImpl **)(v31 + 8);
            *(_QWORD *)(v31 + 8) = v44;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, a2);
              else
                *(_DWORD *)v45 -= 2;
            }
            *(_BYTE *)(v31 + 16) = *((_BYTE *)v8 + 64);
            v46 = *((_QWORD *)v8 + 9);
            v8[9] = 0.0;
            v47 = *(WTF::StringImpl **)(v31 + 24);
            *(_QWORD *)(v31 + 24) = v46;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, a2);
              else
                *(_DWORD *)v47 -= 2;
            }
            v48 = *((_QWORD *)v8 + 10);
            v8[10] = 0.0;
            v49 = *(WTF::StringImpl **)(v31 + 32);
            *(_QWORD *)(v31 + 32) = v48;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
                WTF::StringImpl::destroy(v49, a2);
              else
                *(_DWORD *)v49 -= 2;
            }
            v28 = (_DWORD *)(v31 + 40);
          }
          v26 += 48;
          *v28 = *((_DWORD *)v8 + 22);
          v24 = v27 + 6;
          v25 += 48;
          v8 = v27;
        }
        while (v27 + 6 != (double *)a2);
      }
    }
  }
  return result;
}

WTF::StringImpl *std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  char *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  char *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  double *v23;
  uint64_t *v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double *v29;
  double *v30;
  double v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  WTF::StringImpl *i;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  uint64_t *v56;
  char *v57;
  double v58;
  double v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  double *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl **v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;

  if (a5)
  {
    v7 = a5;
    v9 = (char *)a2;
    v10 = result;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = -a4;
      while (*(double *)v9 <= *(double *)((char *)v10 + v11))
      {
        v11 += 48;
        if (__CFADD__(v12++, 1))
          return result;
      }
      v14 = -v12;
      v15 = (uint64_t *)((char *)v10 + v11);
      if (-v12 >= v7)
      {
        if (v12 == -1)
          return std::swap[abi:sn180100]<WebCore::RealtimeMediaSourceCenter::DeviceInfo>((uint64_t *)((char *)v10 + v11), (WTF::StringImpl *)v9);
        if (v12 > 0)
          v14 = 1 - v12;
        v26 = v14 >> 1;
        v21 = (uint64_t *)((char *)v10 + 48 * (v14 >> 1) + v11);
        if (a3 == (uint64_t *)v9)
        {
          v18 = (double *)a3;
          v32 = a3;
        }
        else
        {
          v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - v9) >> 4);
          v18 = (double *)v9;
          do
          {
            v28 = v27 >> 1;
            v29 = &v18[6 * (v27 >> 1)];
            v31 = *v29;
            v30 = v29 + 6;
            v27 += ~(v27 >> 1);
            if (v31 > *(double *)v21)
              v18 = v30;
            else
              v27 = v28;
          }
          while (v27);
          v32 = (uint64_t *)v9;
        }
        v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v32) >> 4);
      }
      else
      {
        if (v7 >= 0)
          v16 = v7;
        else
          v16 = v7 + 1;
        v17 = v16 >> 1;
        v18 = (double *)&v9[48 * (v16 >> 1)];
        if (v15 == (uint64_t *)v9)
        {
          v21 = (uint64_t *)v9;
          v19 = v9;
        }
        else
        {
          v19 = (char *)v10 + v11;
          v20 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (char *)v10 - v11) >> 4);
          v21 = v15;
          do
          {
            v22 = v20 >> 1;
            v23 = (double *)&v21[6 * (v20 >> 1)];
            v25 = *v23;
            v24 = (uint64_t *)(v23 + 6);
            v20 += ~(v20 >> 1);
            if (v25 < *v18)
              v20 = v22;
            else
              v21 = v24;
          }
          while (v20);
        }
        v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - v19) >> 4);
      }
      v33 = (uint64_t *)v18;
      if (v21 != (uint64_t *)v9)
      {
        v33 = v21;
        if (v9 != (char *)v18)
        {
          v34 = v26;
          v134 = v15;
          v135 = a7;
          v136 = a3;
          v137 = a6;
          std::swap[abi:sn180100]<WebCore::RealtimeMediaSourceCenter::DeviceInfo>(v21, (WTF::StringImpl *)v9);
          v33 = v21 + 6;
          for (i = (WTF::StringImpl *)(v9 + 48); i != (WTF::StringImpl *)v18; i = (WTF::StringImpl *)((char *)i + 48))
          {
            if (v33 == (uint64_t *)v9)
              v9 = (char *)i;
            std::swap[abi:sn180100]<WebCore::RealtimeMediaSourceCenter::DeviceInfo>(v33, i);
            v33 += 6;
          }
          if (v33 == (uint64_t *)v9)
          {
            v33 = (uint64_t *)v9;
          }
          else
          {
            v36 = v33;
            v37 = (uint64_t *)v9;
            do
            {
              while (1)
              {
                std::swap[abi:sn180100]<WebCore::RealtimeMediaSourceCenter::DeviceInfo>(v36, (WTF::StringImpl *)v9);
                v36 += 6;
                v9 += 48;
                if (v9 == (char *)v18)
                  break;
                if (v36 == v37)
                  v37 = (uint64_t *)v9;
              }
              v9 = (char *)v37;
            }
            while (v36 != v37);
          }
          a3 = v136;
          a6 = v137;
          v15 = v134;
          a7 = v135;
          v26 = v34;
        }
      }
      a4 = -v26 - v12;
      v38 = v7 - v17;
      if (v26 + v17 >= v7 - (v26 + v17) - v12)
      {
        v44 = v15;
        v45 = v26;
        v46 = -v26 - v12;
        v47 = v17;
        v41 = a6;
        v42 = a7;
        result = (WTF::StringImpl *)std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(v33, v18, a3, v46, v38);
        v43 = v44;
        v18 = (double *)v21;
        v38 = v47;
        a4 = v45;
        a3 = v33;
      }
      else
      {
        v39 = a3;
        v40 = v17;
        v41 = a6;
        v42 = a7;
        result = (WTF::StringImpl *)std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::RealtimeMediaSourceCenter::validateRequestConstraintsAfterEnumeration(WTF::Function<void ()(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&,WTF::Function<void ()(WebCore::MediaConstraintType)> &&,WebCore::MediaStreamRequest const&,WebCore::MediaDeviceHashSalts &&)::$_0 &,WebCore::RealtimeMediaSourceCenter::DeviceInfo *>(v15, v21, v33, v26, v40);
        a3 = v39;
        v43 = v33;
      }
      v7 = v38;
      v10 = (WTF::StringImpl *)v43;
      v9 = (char *)v18;
      a6 = v41;
      a7 = v42;
      if (!v38)
        return result;
    }
    if (a4 <= v7)
    {
      if (v10 == (WTF::StringImpl *)v9)
        return result;
      v77 = 0;
      v49 = 0;
      do
      {
        v78 = a6 + v77;
        v79 = (_QWORD *)((char *)v10 + v77);
        *(_QWORD *)v78 = *(_QWORD *)((char *)v10 + v77);
        v80 = *(_QWORD *)((char *)v10 + v77 + 8);
        v79[1] = 0;
        *(_QWORD *)(v78 + 8) = v80;
        *(_BYTE *)(v78 + 16) = *((_BYTE *)v10 + v77 + 16);
        v81 = *(_QWORD *)((char *)v10 + v77 + 24);
        v79[3] = 0;
        *(_QWORD *)(v78 + 24) = v81;
        v82 = *(_QWORD *)((char *)v10 + v77 + 32);
        v79[4] = 0;
        *(_QWORD *)(v78 + 32) = v82;
        *(_DWORD *)(v78 + 40) = *(_DWORD *)((char *)v10 + v77 + 40);
        ++v49;
        v77 += 48;
      }
      while (v79 + 6 != (_QWORD *)v9);
      if (v77)
      {
        v83 = a6 + v77;
        v84 = a6 + v77 - 48;
        v85 = (_DWORD *)((char *)v10 + 40);
        v86 = a6;
        while (v9 != (char *)a3)
        {
          if (*(double *)v9 <= *(double *)v86)
          {
            *((_QWORD *)v85 - 5) = *(_QWORD *)v86;
            v92 = *(_QWORD *)(v86 + 8);
            *(_QWORD *)(v86 + 8) = 0;
            v93 = (WTF::StringImpl *)*((_QWORD *)v85 - 4);
            *((_QWORD *)v85 - 4) = v92;
            if (v93)
            {
              if (*(_DWORD *)v93 == 2)
              {
                v103 = a6;
                v104 = a3;
                WTF::StringImpl::destroy(v93, a2);
                a3 = v104;
                a6 = v103;
              }
              else
              {
                *(_DWORD *)v93 -= 2;
              }
            }
            *((_BYTE *)v85 - 24) = *(_BYTE *)(v86 + 16);
            v94 = *(_QWORD *)(v86 + 24);
            *(_QWORD *)(v86 + 24) = 0;
            v95 = (WTF::StringImpl *)*((_QWORD *)v85 - 2);
            *((_QWORD *)v85 - 2) = v94;
            if (v95)
            {
              if (*(_DWORD *)v95 == 2)
              {
                v105 = a6;
                v106 = a3;
                WTF::StringImpl::destroy(v95, a2);
                a3 = v106;
                a6 = v105;
              }
              else
              {
                *(_DWORD *)v95 -= 2;
              }
            }
            v96 = *(_QWORD *)(v86 + 32);
            *(_QWORD *)(v86 + 32) = 0;
            result = (WTF::StringImpl *)*((_QWORD *)v85 - 1);
            *((_QWORD *)v85 - 1) = v96;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                v107 = a6;
                v108 = a3;
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
                a3 = v108;
                a6 = v107;
              }
              else
              {
                *(_DWORD *)result -= 2;
              }
            }
            *v85 = *(_DWORD *)(v86 + 40);
            v86 += 48;
          }
          else
          {
            *((_QWORD *)v85 - 5) = *(_QWORD *)v9;
            v87 = *((_QWORD *)v9 + 1);
            *((_QWORD *)v9 + 1) = 0;
            v88 = (WTF::StringImpl *)*((_QWORD *)v85 - 4);
            *((_QWORD *)v85 - 4) = v87;
            if (v88)
            {
              if (*(_DWORD *)v88 == 2)
              {
                v97 = a6;
                v98 = a3;
                WTF::StringImpl::destroy(v88, a2);
                a3 = v98;
                a6 = v97;
              }
              else
              {
                *(_DWORD *)v88 -= 2;
              }
            }
            *((_BYTE *)v85 - 24) = v9[16];
            v89 = *((_QWORD *)v9 + 3);
            *((_QWORD *)v9 + 3) = 0;
            v90 = (WTF::StringImpl *)*((_QWORD *)v85 - 2);
            *((_QWORD *)v85 - 2) = v89;
            if (v90)
            {
              if (*(_DWORD *)v90 == 2)
              {
                v99 = a6;
                v100 = a3;
                WTF::StringImpl::destroy(v90, a2);
                a3 = v100;
                a6 = v99;
              }
              else
              {
                *(_DWORD *)v90 -= 2;
              }
            }
            v91 = *((_QWORD *)v9 + 4);
            *((_QWORD *)v9 + 4) = 0;
            result = (WTF::StringImpl *)*((_QWORD *)v85 - 1);
            *((_QWORD *)v85 - 1) = v91;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                v101 = a6;
                v102 = a3;
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
                a3 = v102;
                a6 = v101;
              }
              else
              {
                *(_DWORD *)result -= 2;
              }
            }
            *v85 = *((_DWORD *)v9 + 10);
            v9 += 48;
          }
          v85 += 12;
          if (v83 == v86)
            goto LABEL_162;
        }
        if (v83 != v86)
        {
          v120 = 0;
          do
          {
            v121 = &v85[v120];
            v122 = v86 + v120 * 4;
            *((_QWORD *)v121 - 5) = *(_QWORD *)(v86 + v120 * 4);
            v123 = *(_QWORD *)(v86 + v120 * 4 + 8);
            *(_QWORD *)(v86 + v120 * 4 + 8) = 0;
            v124 = *(WTF::StringImpl **)&v85[v120 - 8];
            *((_QWORD *)v121 - 4) = v123;
            if (v124)
            {
              if (*(_DWORD *)v124 == 2)
              {
                v128 = a6;
                WTF::StringImpl::destroy(v124, a2);
                a6 = v128;
              }
              else
              {
                *(_DWORD *)v124 -= 2;
              }
            }
            *((_BYTE *)v121 - 24) = *(_BYTE *)(v122 + 16);
            v125 = *(_QWORD *)(v122 + 24);
            *(_QWORD *)(v122 + 24) = 0;
            v126 = (WTF::StringImpl *)*((_QWORD *)v121 - 2);
            *((_QWORD *)v121 - 2) = v125;
            if (v126)
            {
              if (*(_DWORD *)v126 == 2)
              {
                v129 = a6;
                WTF::StringImpl::destroy(v126, a2);
                a6 = v129;
              }
              else
              {
                *(_DWORD *)v126 -= 2;
              }
            }
            v127 = *(_QWORD *)(v122 + 32);
            *(_QWORD *)(v122 + 32) = 0;
            result = *(WTF::StringImpl **)&v85[v120 - 2];
            *(_QWORD *)&v85[v120 - 2] = v127;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                v130 = a6;
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
                a6 = v130;
              }
              else
              {
                *(_DWORD *)result -= 2;
              }
            }
            v85[v120] = *(_DWORD *)(v122 + 40);
            v120 += 12;
          }
          while (v84 != v122);
        }
      }
    }
    else
    {
      if (v9 == (char *)a3)
        return result;
      v48 = 0;
      v49 = 0;
      do
      {
        v50 = a6 + v48;
        v51 = &v9[v48];
        *(_QWORD *)v50 = *(_QWORD *)&v9[v48];
        v52 = *(_QWORD *)&v9[v48 + 8];
        *((_QWORD *)v51 + 1) = 0;
        *(_QWORD *)(v50 + 8) = v52;
        *(_BYTE *)(v50 + 16) = v9[v48 + 16];
        v53 = *(_QWORD *)&v9[v48 + 24];
        *((_QWORD *)v51 + 3) = 0;
        *(_QWORD *)(v50 + 24) = v53;
        v54 = *(_QWORD *)&v9[v48 + 32];
        *((_QWORD *)v51 + 4) = 0;
        *(_QWORD *)(v50 + 32) = v54;
        *(_DWORD *)(v50 + 40) = *(_DWORD *)&v9[v48 + 40];
        ++v49;
        v48 += 48;
      }
      while (v51 + 48 != (char *)a3);
      if (v48)
      {
        v55 = (double *)(a6 + v48);
        v56 = a3 - 6;
        while (v9 != (char *)v10)
        {
          v57 = v9 - 48;
          v58 = *((double *)v9 - 6);
          v59 = *(v55 - 6);
          if (v59 <= v58)
          {
            *(double *)v56 = v59;
            v66 = *((_QWORD *)v55 - 5);
            *(v55 - 5) = 0.0;
            v67 = (WTF::StringImpl *)v56[1];
            v56[1] = v66;
            if (v67)
            {
              if (*(_DWORD *)v67 == 2)
              {
                v74 = a6;
                WTF::StringImpl::destroy(v67, a2);
                a6 = v74;
              }
              else
              {
                *(_DWORD *)v67 -= 2;
              }
            }
            *((_BYTE *)v56 + 16) = *((_BYTE *)v55 - 32);
            v68 = *((_QWORD *)v55 - 3);
            *(v55 - 3) = 0.0;
            v69 = (WTF::StringImpl *)v56[3];
            v56[3] = v68;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
              {
                v75 = a6;
                WTF::StringImpl::destroy(v69, a2);
                a6 = v75;
              }
              else
              {
                *(_DWORD *)v69 -= 2;
              }
            }
            v70 = *((_QWORD *)v55 - 2);
            *(v55 - 2) = 0.0;
            result = (WTF::StringImpl *)v56[4];
            v56[4] = v70;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                v76 = a6;
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
                a6 = v76;
              }
              else
              {
                *(_DWORD *)result -= 2;
              }
            }
            v65 = v55;
            v57 = v9;
            v55 -= 6;
          }
          else
          {
            *(double *)v56 = v58;
            v60 = *((_QWORD *)v9 - 5);
            *((_QWORD *)v9 - 5) = 0;
            v61 = (WTF::StringImpl *)v56[1];
            v56[1] = v60;
            if (v61)
            {
              if (*(_DWORD *)v61 == 2)
              {
                v71 = a6;
                WTF::StringImpl::destroy(v61, a2);
                a6 = v71;
              }
              else
              {
                *(_DWORD *)v61 -= 2;
              }
            }
            *((_BYTE *)v56 + 16) = *(v9 - 32);
            v62 = *((_QWORD *)v9 - 3);
            *((_QWORD *)v9 - 3) = 0;
            v63 = (WTF::StringImpl *)v56[3];
            v56[3] = v62;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2)
              {
                v72 = a6;
                WTF::StringImpl::destroy(v63, a2);
                a6 = v72;
              }
              else
              {
                *(_DWORD *)v63 -= 2;
              }
            }
            v64 = *((_QWORD *)v9 - 2);
            *((_QWORD *)v9 - 2) = 0;
            result = (WTF::StringImpl *)v56[4];
            v56[4] = v64;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                v73 = a6;
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
                a6 = v73;
              }
              else
              {
                *(_DWORD *)result -= 2;
              }
            }
            v65 = (double *)v9;
          }
          *((_DWORD *)v56 + 10) = *((_DWORD *)v65 - 2);
          v56 -= 6;
          v9 = v57;
          if (v55 == (double *)a6)
            goto LABEL_162;
        }
        if (v55 != (double *)a6)
        {
          v109 = 0;
          do
          {
            v110 = (char *)&v55[v109];
            v111 = &v56[v109];
            *v111 = *(_QWORD *)&v55[v109 - 6];
            v112 = *(_QWORD *)&v55[v109 - 5];
            v55[v109 - 5] = 0.0;
            v113 = (WTF::StringImpl *)v56[v109 + 1];
            v111[1] = v112;
            if (v113)
            {
              if (*(_DWORD *)v113 == 2)
              {
                v117 = a6;
                WTF::StringImpl::destroy(v113, a2);
                a6 = v117;
              }
              else
              {
                *(_DWORD *)v113 -= 2;
              }
            }
            *((_BYTE *)v111 + 16) = *(v110 - 32);
            v114 = *((_QWORD *)v110 - 3);
            *((_QWORD *)v110 - 3) = 0;
            v115 = (WTF::StringImpl *)v111[3];
            v111[3] = v114;
            if (v115)
            {
              if (*(_DWORD *)v115 == 2)
              {
                v118 = a6;
                WTF::StringImpl::destroy(v115, a2);
                a6 = v118;
              }
              else
              {
                *(_DWORD *)v115 -= 2;
              }
            }
            v116 = *(_QWORD *)&v55[v109 - 2];
            v55[v109 - 2] = 0.0;
            result = (WTF::StringImpl *)v56[v109 + 4];
            v56[v109 + 4] = v116;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                v119 = a6;
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
                a6 = v119;
              }
              else
              {
                *(_DWORD *)result -= 2;
              }
            }
            LODWORD(v56[v109 + 5]) = LODWORD(v55[v109 - 1]);
            v109 -= 6;
          }
          while (&v55[v109] != (double *)a6);
        }
      }
    }
LABEL_162:
    if (a6)
    {
      v131 = (WTF::StringImpl **)(a6 + 24);
      do
      {
        v132 = v131[1];
        v131[1] = 0;
        if (v132)
        {
          if (*(_DWORD *)v132 == 2)
            WTF::StringImpl::destroy(v132, a2);
          else
            *(_DWORD *)v132 -= 2;
        }
        v133 = *v131;
        *v131 = 0;
        if (v133)
        {
          if (*(_DWORD *)v133 == 2)
            WTF::StringImpl::destroy(v133, a2);
          else
            *(_DWORD *)v133 -= 2;
        }
        result = *(v131 - 2);
        *(v131 - 2) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v131 += 6;
        --v49;
      }
      while (v49);
    }
  }
  return result;
}

WTF::StringImpl *std::swap[abi:sn180100]<WebCore::RealtimeMediaSourceCenter::DeviceInfo>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;

  v4 = *a1;
  v5 = a1[1];
  a1[1] = 0;
  v6 = *((_BYTE *)a1 + 16);
  v8 = a1[3];
  v7 = a1[4];
  a1[3] = 0;
  a1[4] = 0;
  v9 = *((_DWORD *)a1 + 10);
  *a1 = *(_QWORD *)a2;
  v10 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v11 = (WTF::StringImpl *)a1[1];
  a1[1] = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v12 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  v13 = (WTF::StringImpl *)a1[3];
  a1[3] = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v15 = (WTF::StringImpl *)a1[4];
  a1[4] = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *(_QWORD *)a2 = v4;
  v16 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  *((_BYTE *)a2 + 16) = v6;
  v17 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *((_DWORD *)a2 + 10) = v9;
  return result;
}

uint64_t WTF::Logger::log<char [20],void const*>(uint64_t a1, unsigned int a2, char *a3)
{
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint8_t buf[4];
  _BYTE v43[12];
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v40, a3);
  result = WTF::LogArgument<void const*>::toString();
  if (!v40)
  {
    v6 = 0;
    if (v39)
      goto LABEL_3;
LABEL_72:
    v7 = 0;
    goto LABEL_4;
  }
  v6 = *((_DWORD *)v40 + 1);
  if (!v39)
    goto LABEL_72;
LABEL_3:
  v7 = *((_DWORD *)v39 + 1);
LABEL_4:
  if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
  {
    v41 = 0;
    goto LABEL_76;
  }
  if (v40)
  {
    v8 = *((_DWORD *)v40 + 4);
    v9 = (v8 >> 2) & 1;
    if (v39 && (v8 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v39)
    {
LABEL_9:
      v9 = (*((unsigned __int8 *)v39 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v9 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v40, (uint64_t)v39, &v41);
  if (!v41)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v11 = v39;
  v39 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v40;
  v40 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(NSObject **)(a1 + 32);
  v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v14)
  {
    WTF::String::utf8();
    v16 = v37 ? (char *)v37 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v43 = v16;
    _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v14 = (uint64_t)v37;
    v37 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        v14 = WTF::fastFree((WTF *)v14, v15);
      else
        --*(_DWORD *)v14;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v18 = *v17;
      if ((v18 & 1) != 0)
        break;
      v19 = __ldaxr(v17);
      if (v19 == v18)
      {
        if (!__stxr(v18 | 1, v17))
        {
          v20 = WTF::Logger::observers((WTF::Logger *)v14);
          v21 = *(unsigned int *)(v20 + 12);
          if ((_DWORD)v21)
          {
            v22 = *(uint64_t **)v20;
            v23 = *(_QWORD *)v20 + 8 * v21;
            do
            {
              v24 = *v22;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&v43[4], a3);
              v44 = 0;
              WTF::LogArgument<void const*>::toString();
              v37 = 0;
              v38 = 0;
              v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v38) = 2;
              v37 = v25;
              v26 = HIDWORD(v38);
              *((_DWORD *)v25 + 4 * HIDWORD(v38)) = *(_DWORD *)buf;
              v27 = *(_QWORD *)&v43[4];
              if (*(_QWORD *)&v43[4])
                **(_DWORD **)&v43[4] += 2;
              *((_QWORD *)v25 + 2 * v26 + 1) = v27;
              *((_DWORD *)v25 + 4 * (v26 + 1)) = v44;
              v28 = v45;
              if (v45)
                *(_DWORD *)v45 += 2;
              *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
              HIDWORD(v38) = v26 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, a1, a2, &v37);
              v29 = v37;
              if (HIDWORD(v38))
              {
                v30 = 16 * HIDWORD(v38);
                v31 = (WTF::StringImpl **)((char *)v37 + 8);
                do
                {
                  v32 = *v31;
                  *v31 = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                  v31 += 2;
                  v30 -= 16;
                }
                while (v30);
                v29 = v37;
              }
              if (v29)
              {
                v37 = 0;
                LODWORD(v38) = 0;
                WTF::fastFree(v29, v15);
              }
              v33 = v45;
              v45 = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                else
                  *(_DWORD *)v33 -= 2;
              }
              v34 = *(WTF::StringImpl **)&v43[4];
              *(_QWORD *)&v43[4] = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                else
                  *(_DWORD *)v34 -= 2;
              }
              ++v22;
            }
            while (v22 != (uint64_t *)v23);
          }
          v35 = __ldxr(v17);
          if (v35 == 1)
          {
            if (!__stlxr(0, v17))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [7],unsigned long>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::String **a5)
{
  uint64_t result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::String *v34;
  WTF::Logger *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  char *v48;
  WTF::String **v49;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint8_t buf[4];
  _BYTE v58[12];
  int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v48 = (char *)a4;
  WTF::String::String((WTF::String *)&v54, a4);
  v49 = a5;
  result = WTF::String::number(*a5);
  if (v55)
  {
    v10 = *((_DWORD *)v55 + 1);
    if (v54)
      goto LABEL_3;
LABEL_91:
    v11 = 0;
    if (v53)
      goto LABEL_4;
LABEL_92:
    v12 = 0;
    goto LABEL_5;
  }
  v10 = 0;
  if (!v54)
    goto LABEL_91;
LABEL_3:
  v11 = *((_DWORD *)v54 + 1);
  if (!v53)
    goto LABEL_92;
LABEL_4:
  v12 = *((_DWORD *)v53 + 1);
LABEL_5:
  if ((v12 | v11) < 0
    || ((v13 = __OFADD__(v11, v12), v14 = v11 + v12, !v13) ? (v15 = 0) : (v15 = 1),
        v10 < 0 || (v15 & 1) != 0 || (result = (v10 + v14), __OFADD__(v10, v14))))
  {
    v56 = 0;
    goto LABEL_96;
  }
  if (v55 && (*((_BYTE *)v55 + 16) & 4) == 0)
  {
    v16 = 0;
    goto LABEL_19;
  }
  if (v54)
  {
    v17 = *((_DWORD *)v54 + 4);
    v16 = (v17 >> 2) & 1;
    if (v53 && (v17 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v53)
    {
LABEL_18:
      v16 = (*((unsigned __int8 *)v53 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v16 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v16, v55, (uint64_t)v54, (uint64_t)v53, &v56);
  if (!v56)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v54;
  v54 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v55;
  v55 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(NSObject **)(a1 + 32);
  v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v25 = v51 ? (char *)v51 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v58 = v25;
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v23 = (uint64_t)v51;
    v51 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        v23 = WTF::fastFree((WTF *)v23, v24);
      else
        --*(_DWORD *)v23;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v27 = *v26;
      if ((v27 & 1) != 0)
        break;
      v28 = __ldaxr(v26);
      if (v28 == v27)
      {
        if (!__stxr(v27 | 1, v26))
        {
          v29 = WTF::Logger::observers((WTF::Logger *)v23);
          v30 = *(unsigned int *)(v29 + 12);
          if ((_DWORD)v30)
          {
            v31 = *(uint64_t **)v29;
            v32 = *(_QWORD *)v29 + 8 * v30;
            do
            {
              v33 = *v31;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v59 = 0;
              WTF::String::String((WTF::String *)&v60, v48);
              v34 = *v49;
              v61 = 0;
              WTF::String::number(v34);
              v51 = 0;
              v52 = 0;
              v35 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v52) = 3;
              v51 = v35;
              v36 = HIDWORD(v52);
              *((_DWORD *)v35 + 4 * HIDWORD(v52)) = *(_DWORD *)buf;
              v37 = *(_QWORD *)&v58[4];
              if (*(_QWORD *)&v58[4])
                **(_DWORD **)&v58[4] += 2;
              *((_QWORD *)v35 + 2 * v36 + 1) = v37;
              *((_DWORD *)v35 + 4 * (v36 + 1)) = v59;
              v38 = v60;
              if (v60)
                *(_DWORD *)v60 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 1) + 1) = v38;
              *((_DWORD *)v35 + 4 * (v36 + 2)) = v61;
              v39 = v62;
              if (v62)
                *(_DWORD *)v62 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 2) + 1) = v39;
              HIDWORD(v52) = v36 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v33 + 16))(v33, a1, a2, &v51);
              v40 = v51;
              if (HIDWORD(v52))
              {
                v41 = 16 * HIDWORD(v52);
                v42 = (WTF::StringImpl **)((char *)v51 + 8);
                do
                {
                  v43 = *v42;
                  *v42 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v24);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v42 += 2;
                  v41 -= 16;
                }
                while (v41);
                v40 = v51;
              }
              if (v40)
              {
                v51 = 0;
                LODWORD(v52) = 0;
                WTF::fastFree(v40, v24);
              }
              v44 = v62;
              v62 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = v60;
              v60 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = *(WTF::StringImpl **)&v58[4];
              *(_QWORD *)&v58[4] = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v46 -= 2;
              }
              ++v31;
            }
            while (v31 != (uint64_t *)v32);
          }
          v47 = __ldxr(v26);
          if (v47 == 1)
          {
            if (!__stlxr(0, v26))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v56;
  v56 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::RealtimeOutgoingVideoSource::*&)(void),WebCore::RealtimeOutgoingVideoSource*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [7],void const*>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  char *v45;
  WTF::Logger *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint8_t buf[4];
  _BYTE v54[12];
  int v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v45 = (char *)a4;
  WTF::String::String((WTF::String *)&v50, a4);
  result = WTF::LogArgument<void const*>::toString();
  if (v51)
  {
    v8 = *((_DWORD *)v51 + 1);
    if (v50)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v49)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v50)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v50 + 1);
  if (!v49)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v49 + 1);
LABEL_5:
  if ((v10 | v9) < 0
    || ((v11 = __OFADD__(v9, v10), v12 = v9 + v10, !v11) ? (v13 = 0) : (v13 = 1),
        v8 < 0 || (v13 & 1) != 0 || (result = (v8 + v12), __OFADD__(v8, v12))))
  {
    v52 = 0;
    goto LABEL_96;
  }
  if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v50)
  {
    v15 = *((_DWORD *)v50 + 4);
    v14 = (v15 >> 2) & 1;
    if (v49 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v49)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v49 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v51, (uint64_t)v50, (uint64_t)v49, &v52);
  if (!v52)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v17 = v49;
  v49 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v50;
  v50 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v51;
  v51 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v47 ? (char *)v47 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v54 = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v21 = (uint64_t)v47;
    v47 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v30 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v31 = *v29;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v55 = 0;
              WTF::String::String((WTF::String *)&v56, v45);
              v57 = 0;
              WTF::LogArgument<void const*>::toString();
              v47 = 0;
              v48 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v48) = 3;
              v47 = v32;
              v33 = HIDWORD(v48);
              *((_DWORD *)v32 + 4 * HIDWORD(v48)) = *(_DWORD *)buf;
              v34 = *(_QWORD *)&v54[4];
              if (*(_QWORD *)&v54[4])
                **(_DWORD **)&v54[4] += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v55;
              v35 = v56;
              if (v56)
                *(_DWORD *)v56 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              *((_DWORD *)v32 + 4 * (v33 + 2)) = v57;
              v36 = v58;
              if (v58)
                *(_DWORD *)v58 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
              HIDWORD(v48) = v33 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, a1, a2, &v47);
              v37 = v47;
              if (HIDWORD(v48))
              {
                v38 = 16 * HIDWORD(v48);
                v39 = (WTF::StringImpl **)((char *)v47 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v37 = v47;
              }
              if (v37)
              {
                v47 = 0;
                LODWORD(v48) = 0;
                WTF::fastFree(v37, v22);
              }
              v41 = v58;
              v58 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v56;
              v56 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = *(WTF::StringImpl **)&v54[4];
              *(_QWORD *)&v54[4] = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v30);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v52;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeOutgoingVideoSource::applyRotation(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E34198B0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E33638B0;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeOutgoingVideoSource::applyRotation(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E34198B0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 24);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E33638B0;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeOutgoingVideoSource::applyRotation(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v1 + 160))
  {
    *(_BYTE *)(v1 + 160) = 1;
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 40) + 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 296))(v2, 1);
    if ((result & 1) == 0)
      *(_BYTE *)(v1 + 64) = 1;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeOutgoingVideoSource::AddOrUpdateSink(rtc::VideoSinkInterface<webrtc::VideoFrame> *,rtc::VideoSinkWants const&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E34198D8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E33638B0;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeOutgoingVideoSource::AddOrUpdateSink(rtc::VideoSinkInterface<webrtc::VideoFrame> *,rtc::VideoSinkWants const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E34198D8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 24);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E33638B0;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeOutgoingVideoSource::AddOrUpdateSink(rtc::VideoSinkInterface<webrtc::VideoFrame> *,rtc::VideoSinkWants const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  double *v2;
  double *v3;
  int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;

  v1 = *(_QWORD *)(result + 8);
  v2 = (double *)(v1 + 176);
  v3 = (double *)(result + 24);
  v4 = *(unsigned __int8 *)(result + 32);
  if (*(_BYTE *)(v1 + 184))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(v1 + 184) != 0) != (v4 != 0))
      goto LABEL_17;
  }
  else if (*v2 != *v3)
  {
    goto LABEL_17;
  }
  v6 = *(unsigned __int8 *)(result + 48);
  if (*(_BYTE *)(v1 + 200))
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if ((*(_BYTE *)(v1 + 200) != 0) == (v6 != 0))
      return result;
  }
  else if (*(double *)(v1 + 192) == *(double *)(result + 40))
  {
    return result;
  }
LABEL_17:
  v8 = *v3;
  *(_BYTE *)(v1 + 184) = *(_BYTE *)(result + 32);
  *v2 = v8;
  v9 = *(_QWORD *)(result + 40);
  *(_BYTE *)(v1 + 200) = *(_BYTE *)(result + 48);
  *(_QWORD *)(v1 + 192) = v9;
  if (*(_BYTE *)(v1 + 217))
  {
    WebCore::RealtimeMediaSource::removeVideoFrameObserver(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 40) + 8), v1 + 48);
    *(_BYTE *)(v1 + 217) = 0;
    return WebCore::RealtimeOutgoingVideoSource::updateFramesSending(v1, v10, v11, v12);
  }
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E3419900;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::RealtimeVideoCaptureSource::bestSupportedSizeFrameRateAndZoom(WebCore::RealtimeMediaSource::VideoPresetConstraints const&,WebCore::RealtimeVideoCaptureSource::TryPreservingSize)::$_0,BOOL,WebCore::IntSize const&>::call(uint64_t a1, _DWORD *a2)
{
  return *a2 == **(_DWORD **)(a1 + 8) && a2[1] == *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeVideoCaptureSource::bestSupportedSizeFrameRateAndZoom(WebCore::RealtimeMediaSource::VideoPresetConstraints const&,WebCore::RealtimeVideoCaptureSource::TryPreservingSize)::$_1,BOOL,WebCore::IntSize const&>::call(uint64_t a1, int *a2)
{
  uint64_t result;

  if (vabdd_f64((double)**(int **)(a1 + 16) / (double)*(int *)(*(_QWORD *)(a1 + 16) + 4), (double)*a2 / (double)a2[1]) > 0.000001)return 0;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8));
  if ((_DWORD)result)
  {
    **(_QWORD **)(a1 + 24) = *(_QWORD *)a2;
    return 1;
  }
  return result;
}

