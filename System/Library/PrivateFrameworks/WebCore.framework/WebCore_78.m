WTF::StringImpl *WebCore::InspectorDOMAgent::flexOverlayConfigFromInspectorObject(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::JSONImpl::ObjectBase *v10;
  WTF::StringImpl *v11;
  unsigned int Boolean;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  char v21;
  WTF::StringImpl *v22;

  v3 = result;
  if (!*a3)
  {
LABEL_24:
    *(_BYTE *)v3 = 0;
    *((_BYTE *)v3 + 16) = 0;
    return result;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getObject(*a3, (const WTF::String *)&v19);
  WebCore::parseColor((WTF::StringImpl *)&v20, &v22);
  v7 = v22;
  v22 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v7;
  }
  v8 = v19;
  v19 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (!v21)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = *a2;
    *a2 = v22;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_24;
  }
  v9 = v20;
  if ((v20 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Boolean = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v10, (const WTF::String *)&v22);
  if (Boolean <= 0x100)
    LOBYTE(Boolean) = 0;
  v13 = Boolean != 0;
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)v3 = v9;
  *((_BYTE *)v3 + 8) = v13;
  *((_BYTE *)v3 + 16) = 1;
  if (v21 && (v20 & 0x8000000000000) != 0)
  {
    result = (WTF::StringImpl *)(v20 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr((unsigned int *)result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)result));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)result);
      return (WTF::StringImpl *)WTF::fastFree(result, v11);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::setInspectModeEnabled@<X0>(uint64_t a1@<X0>, int a2@<W1>, WTF::JSONImpl::ObjectBase **a3@<X2>, WTF::JSONImpl::ObjectBase **a4@<X3>, WTF::JSONImpl::ObjectBase **a5@<X4>, uint64_t a6@<X8>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  int v9;
  WTF::StringImpl *v10;

  v10 = 0;
  WebCore::InspectorDOMAgent::setSearchingForNode(a1, &v10, a2, a3, a4, a5);
  result = v10;
  if (v10)
  {
    v9 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    *(_QWORD *)a6 = result;
    *(_BYTE *)(a6 + 8) = 1;
    if (v9)
      *(_DWORD *)result = v9;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  }
  else
  {
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 8) = 0;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::setInspectModeEnabled@<X0>(uint64_t a1@<X0>, int a2@<W1>, WTF::JSONImpl::ObjectBase **a3@<X2>, WTF::JSONImpl::ObjectBase **a4@<X3>, WTF::JSONImpl::ObjectBase **a5@<X4>, uint64_t a6@<X8>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  int v9;
  WTF::StringImpl *v10;

  v10 = 0;
  WebCore::InspectorDOMAgent::setSearchingForNode(a1 - 32, &v10, a2, a3, a4, a5);
  result = v10;
  if (v10)
  {
    v9 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    *(_QWORD *)a6 = result;
    *(_BYTE *)(a6 + 8) = 1;
    if (v9)
      *(_DWORD *)result = v9;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  }
  else
  {
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 8) = 0;
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::highlightRect@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, WTF::JSONImpl::ObjectBase **a6@<X5>, WTF::JSONImpl::ObjectBase **a7@<X6>, _BYTE *a8@<X7>, _BYTE *a9@<X8>)
{
  float v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  void *v19;
  uint64_t result;
  WTF *v21;

  v14 = (float)a2;
  v15 = (float)a3;
  v16 = (float)a4;
  v17 = (float)a5;
  v18 = (float *)WTF::fastMalloc((WTF *)0x20);
  *v18 = v14;
  v18[1] = v15;
  v18[2] = v14 + v16;
  v18[3] = v15;
  v18[4] = v14 + v16;
  v18[5] = v15 + v17;
  v18[6] = v14;
  v18[7] = v15 + v17;
  v21 = (WTF *)v18;
  WebCore::InspectorDOMAgent::innerHighlightQuad(a1, &v21, a6, a7, a8);
  result = (uint64_t)v21;
  if (v21)
    result = WTF::fastFree(v21, v19);
  *a9 = 0;
  a9[8] = 0;
  return result;
}

uint64_t WebCore::InspectorDOMAgent::innerHighlightQuad(uint64_t a1, WTF **a2, WTF::JSONImpl::ObjectBase **a3, WTF::JSONImpl::ObjectBase **a4, _BYTE *a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  WTF *v24;
  void *v25;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  BOOL v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  _BOOL4 v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  _BOOL4 v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  WTF *v49;
  unint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;

  v10 = WTF::fastMalloc((WTF *)0x30);
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  WebCore::parseColor((WTF::StringImpl *)&v50, a3);
  if (v51)
  {
    v12 = v50;
    v50 = 0;
  }
  else
  {
    v12 = 0x1104000000000000;
  }
  v13 = *(_QWORD *)v10;
  if ((*(_QWORD *)v10 & 0x8000000000000) == 0)
  {
    if (v13 == v12 && (v12 & 0x8000000000000) == 0)
      goto LABEL_11;
    goto LABEL_9;
  }
  if ((v12 & 0x8000000000000) == 0)
  {
LABEL_9:
    if ((v13 & 0x8000000000000) != 0)
    {
      v27 = v12;
      v28 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
      do
      {
        v29 = __ldaxr(v28);
        v30 = --v29 == 0;
      }
      while (__stlxr(v29, v28));
      v12 = v27;
      if (v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v11);
        v12 = v27;
      }
    }
    *(_QWORD *)v10 = v12;
    goto LABEL_11;
  }
  v53 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 4);
  v48 = v12;
  v40 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
  v52 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFLL) + 4);
  v41 = WebCore::operator==<float,4ul>((float *)&v53, (float *)&v52);
  v13 = *(_QWORD *)v10;
  if (!v41 || HIBYTE(v13) != HIBYTE(v48))
  {
    v12 = v48;
    goto LABEL_9;
  }
  v12 = v48;
  if (BYTE6(v13) != BYTE6(v48))
    goto LABEL_9;
  do
  {
    v42 = __ldaxr(v40);
    v43 = v42 - 1;
  }
  while (__stlxr(v43, v40));
  if (!v43)
  {
    atomic_store(1u, v40);
    WTF::fastFree((WTF *)v40, v11);
  }
LABEL_11:
  if (v51)
  {
    if ((v50 & 0x8000000000000) != 0)
    {
      v34 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFLL);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, v11);
      }
    }
  }
  WebCore::parseColor((WTF::StringImpl *)&v50, a4);
  if (v51)
  {
    v16 = v50;
    v50 = 0;
  }
  else
  {
    v16 = 0x1104000000000000;
  }
  v17 = *(_QWORD *)(v10 + 8);
  if ((v17 & 0x8000000000000) == 0)
  {
    if (v17 == v16 && (v16 & 0x8000000000000) == 0)
      goto LABEL_21;
    goto LABEL_19;
  }
  if ((v16 & 0x8000000000000) == 0
    || (v53 = *(_OWORD *)((v17 & 0xFFFFFFFFFFFFLL) + 4),
        v44 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL),
        v52 = *(_OWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 4),
        v45 = WebCore::operator==<float,4ul>((float *)&v53, (float *)&v52),
        v17 = *(_QWORD *)(v10 + 8),
        !v45)
    || HIBYTE(v17) != HIBYTE(v16)
    || BYTE6(v17) != BYTE6(v16))
  {
LABEL_19:
    if ((v17 & 0x8000000000000) != 0)
    {
      v31 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v15);
      }
    }
    *(_QWORD *)(v10 + 8) = v16;
    goto LABEL_21;
  }
  do
  {
    v46 = __ldaxr(v44);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, v44));
  if (!v47)
  {
    atomic_store(1u, v44);
    WTF::fastFree((WTF *)(v16 & 0xFFFFFFFFFFFFLL), v15);
  }
LABEL_21:
  if (v51)
  {
    if ((v50 & 0x8000000000000) != 0)
    {
      v37 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFLL);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v15);
      }
    }
  }
  if (a5[1])
    v18 = *a5 == 0;
  else
    v18 = 1;
  v19 = !v18;
  *(_BYTE *)(v10 + 41) = v19;
  v20 = *(_QWORD *)(a1 + 72);
  v21 = *a2;
  *a2 = 0;
  v49 = v21;
  WebCore::InspectorOverlay::highlightQuad(v20, (float32x4_t **)&v49, (uint64_t *)v10);
  v23 = v49;
  v49 = 0;
  if (v23)
    WTF::fastFree(v23, v22);
  WebCore::InspectorOverlayHighlight::Config::~Config((WebCore::InspectorOverlayHighlight::Config *)v10, v22);
  return WTF::fastFree(v24, v25);
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::highlightRect@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, WTF::JSONImpl::ObjectBase **a6@<X5>, WTF::JSONImpl::ObjectBase **a7@<X6>, _BYTE *a8@<X7>, _BYTE *a9@<X8>)
{
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float *v18;
  void *v19;
  uint64_t result;
  WTF *v21;

  v13 = (float)a2;
  v14 = (float)a3;
  v15 = a1 - 32;
  v16 = (float)a4;
  v17 = (float)a5;
  v18 = (float *)WTF::fastMalloc((WTF *)0x20);
  *v18 = v13;
  v18[1] = v14;
  v18[2] = v13 + v16;
  v18[3] = v14;
  v18[4] = v13 + v16;
  v18[5] = v14 + v17;
  v18[6] = v13;
  v18[7] = v14 + v17;
  v21 = (WTF *)v18;
  WebCore::InspectorDOMAgent::innerHighlightQuad(v15, &v21, a6, a7, a8);
  result = (uint64_t)v21;
  if (v21)
    result = WTF::fastFree(v21, v19);
  *a9 = 0;
  a9[8] = 0;
  return result;
}

uint64_t WebCore::InspectorDOMAgent::highlightQuad@<X0>(uint64_t a1@<X0>, WTF::JSONImpl::ArrayBase **a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, WTF::JSONImpl::ObjectBase **a4@<X3>, _BYTE *a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v12;
  double v13;
  char v14;
  char v15;
  WTF::JSONImpl::Value *v16;
  double v17;
  char v18;
  char v19;
  WTF::JSONImpl::Value *v20;
  char v21;
  char v22;
  WTF::JSONImpl::Value *v23;
  char v24;
  char v25;
  WTF::JSONImpl::Value *v26;
  char v27;
  char v28;
  WTF::JSONImpl::Value *v29;
  char v30;
  char v31;
  WTF::JSONImpl::Value *v32;
  uint64_t v33;
  char v34;
  char v35;
  WTF::JSONImpl::Value *v36;
  double v37;
  char v38;
  char v39;
  WTF::JSONImpl::Value *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  void *v49;
  uint64_t result;
  void *v51;
  double v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  WTF *v58;
  WTF::JSONImpl::Value *v59;

  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  if (*((_DWORD *)*a2 + 7) != 8)
    goto LABEL_37;
  WTF::JSONImpl::ArrayBase::get(*a2);
  v13 = COERCE_DOUBLE(WTF::JSONImpl::Value::asDouble(v59));
  v15 = v14;
  v16 = v59;
  v59 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v16;
  }
  if (!v15)
    goto LABEL_37;
  WTF::JSONImpl::ArrayBase::get(*a2);
  v17 = COERCE_DOUBLE(WTF::JSONImpl::Value::asDouble(v59));
  v19 = v18;
  v20 = v59;
  v59 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v20;
  }
  if (!v19)
    goto LABEL_37;
  WTF::JSONImpl::ArrayBase::get(*a2);
  v57 = COERCE_DOUBLE(WTF::JSONImpl::Value::asDouble(v59));
  v22 = v21;
  v23 = v59;
  v59 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v23;
  }
  if (!v22)
    goto LABEL_37;
  WTF::JSONImpl::ArrayBase::get(*a2);
  v56 = COERCE_DOUBLE(WTF::JSONImpl::Value::asDouble(v59));
  v25 = v24;
  v26 = v59;
  v59 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v26;
  }
  if (!v25)
    goto LABEL_37;
  WTF::JSONImpl::ArrayBase::get(*a2);
  v55 = COERCE_DOUBLE(WTF::JSONImpl::Value::asDouble(v59));
  v28 = v27;
  v29 = v59;
  v59 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v29;
  }
  if (!v28)
    goto LABEL_37;
  WTF::JSONImpl::ArrayBase::get(*a2);
  v54 = COERCE_DOUBLE(WTF::JSONImpl::Value::asDouble(v59));
  v31 = v30;
  v32 = v59;
  v59 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v32;
  }
  if (!v31)
    goto LABEL_37;
  WTF::JSONImpl::ArrayBase::get(*a2);
  v33 = WTF::JSONImpl::Value::asDouble(v59);
  v35 = v34;
  v36 = v59;
  v59 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
    {
      v53 = v33;
      WTF::JSONImpl::Value::operator delete();
      v33 = v53;
    }
    else
    {
      --*(_DWORD *)v36;
    }
  }
  if (!v35)
    goto LABEL_37;
  v52 = *(double *)&v33;
  WTF::JSONImpl::ArrayBase::get(*a2);
  v37 = COERCE_DOUBLE(WTF::JSONImpl::Value::asDouble(v59));
  v39 = v38;
  v40 = v59;
  v59 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v40;
  }
  if (v39)
  {
    v41 = v13;
    v42 = v17;
    *(float *)v12 = v41;
    *(float *)(v12 + 4) = v42;
    v43 = v57;
    v44 = v56;
    *(float *)(v12 + 8) = v43;
    *(float *)(v12 + 12) = v44;
    v45 = v55;
    v46 = v54;
    *(float *)(v12 + 16) = v45;
    *(float *)(v12 + 20) = v46;
    v47 = v52;
    v48 = v37;
    *(float *)(v12 + 24) = v47;
    *(float *)(v12 + 28) = v48;
    v58 = (WTF *)v12;
    WebCore::InspectorDOMAgent::innerHighlightQuad(a1, &v58, a3, a4, a5);
    result = (uint64_t)v58;
    if (v58)
      result = WTF::fastFree(v58, v49);
    *a6 = 0;
    a6[8] = 0;
  }
  else
  {
LABEL_37:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    a6[8] = 1;
    return WTF::fastFree((WTF *)v12, v51);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::highlightQuad@<X0>(uint64_t a1@<X0>, WTF::JSONImpl::ArrayBase **a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, WTF::JSONImpl::ObjectBase **a4@<X3>, _BYTE *a5@<X4>, _BYTE *a6@<X8>)
{
  return WebCore::InspectorDOMAgent::highlightQuad(a1 - 32, a2, a3, a4, a5, a6);
}

WTF::StringImpl *WebCore::parseColor(WTF::StringImpl *result, WTF::JSONImpl::ObjectBase **a2)
{
  WTF::StringImpl *v2;
  WTF::JSONImpl::ObjectBase *v3;
  WTF::StringImpl *v5;
  uint64_t Integer;
  WTF::StringImpl *v7;
  WTF::JSONImpl::ObjectBase *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::JSONImpl::ObjectBase *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::JSONImpl::ObjectBase *v15;
  WTF::StringImpl *v16;
  double v17;
  char v18;
  float v19;
  uint64_t v20;
  int v21;
  int v22;
  uint32x2_t v23;
  unsigned int v24;
  char v25;
  int v26;
  uint32x2_t v27;
  WTF::StringImpl *v28;

  v2 = result;
  v3 = *a2;
  if (!*a2)
    goto LABEL_24;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Integer = WTF::JSONImpl::ObjectBase::getInteger(v3, (const WTF::String *)&v28);
  v7 = v28;
  v28 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = WTF::JSONImpl::ObjectBase::getInteger(v8, (const WTF::String *)&v28);
  v11 = v28;
  v28 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = WTF::JSONImpl::ObjectBase::getInteger(v12, (const WTF::String *)&v28);
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  if ((Integer & 0xFF00000000) != 0 && (v10 & 0xFF00000000) != 0 && (v14 & 0xFF00000000) != 0)
  {
    v15 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v17 = COERCE_DOUBLE(WTF::JSONImpl::ObjectBase::getDouble(v15, (const WTF::String *)&v28));
    v18 = (char)v16;
    result = v28;
    v28 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
    if (v18)
    {
      v19 = v17;
      v20 = llroundf(v19 * 255.0);
      if (v20 >= 255)
        v20 = 255;
      v21 = v20 & ~(v20 >> 63);
      if ((int)Integer >= 255)
        v22 = 255;
      else
        v22 = Integer;
      v23 = vshl_u32((uint32x2_t)vmax_s32(vmin_s32((int32x2_t)__PAIR64__(v10, v14), (int32x2_t)0xFF000000FFLL), 0), (uint32x2_t)0x800000010);
      v24 = v23.i32[0] | (v21 << 24) | v23.i32[1] | v22 & ~(v22 >> 31);
    }
    else
    {
      if ((int)Integer >= 255)
        v26 = 255;
      else
        v26 = Integer;
      v27 = vshl_u32((uint32x2_t)vmax_s32(vmin_s32((int32x2_t)__PAIR64__(v10, v14), (int32x2_t)0xFF000000FFLL), 0), (uint32x2_t)0x800000010);
      v24 = v26 & ~(v26 >> 31) | v27.i32[0] | v27.i32[1] | 0xFF000000;
    }
    *(_QWORD *)v2 = bswap32(v24) | 0x1104000000000000;
    v25 = 1;
  }
  else
  {
LABEL_24:
    v25 = 0;
    *(_BYTE *)v2 = 0;
  }
  *((_BYTE *)v2 + 8) = v25;
  return result;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::highlightSelector@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return WebCore::InspectorDOMAgent::highlightSelector(a2, a1);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::highlightSelector(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  WTF::JSONImpl::ObjectBase **v5;
  WTF::JSONImpl::ObjectBase **v6;
  WTF::JSONImpl::ObjectBase **v7;
  WTF::JSONImpl::ObjectBase **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  unsigned int **v11;
  unsigned int **v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  void *v18;
  uint64_t (*v19)();
  uint64_t (*v20)();
  BOOL v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WebCore::InspectorPageAgent *v25;
  uint64_t v26;
  WebCore::Node *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  char v32;
  unsigned int v33;
  int v34;
  WTF::StringImpl *v35;
  int8x8_t v36;
  int16x8_t v37;
  WTF::StringImpl *v38;
  void *v39;
  __n128 v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  void *v44;
  WTF *v45;
  char *v46;
  WTF *v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  const WebCore::CSSSelector *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  WebCore::Node *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  WebCore::Node *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  WTF *v77;
  size_t v78;
  WTF *v79;
  WTF *v80;
  int v81;
  uint64_t v82;
  int v83;
  WebCore::Node *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  WTF *v89;
  size_t v90;
  WTF *v91;
  WTF *v92;
  int v93;
  int v94;
  int v95;
  WebCore::Node *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  void *v101;
  WTF *v102;
  WTF::StringImpl *v103;
  int v104;
  int v105;
  int v106;
  _BOOL4 v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  char *v112;
  WTF *v113;
  WTF *v115;
  WTF *v117;
  WTF *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  WTF *v122;
  WTF *v124;
  _BYTE *v126;
  _QWORD **v127;
  uint64_t v128;
  BOOL v129;
  char v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF *v137;
  void *v138;
  WTF::StringImpl *result;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  WTF *v146;
  WebCore::Node *v147;
  _BYTE *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  _BYTE *v151;
  _QWORD *v152;
  uint64_t v153;
  void *__src;
  WTF *v155;
  int v156;
  WebCore::Node *v157;
  _BYTE v158[16];
  unsigned __int8 v159;
  char v160[4];
  int v161;
  WTF::StringImpl *v162;
  char v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  __int16 v167;
  uint64_t v168;
  WTF *v169;
  uint64_t v170;
  _BYTE v171[128];
  unsigned int v172;
  char v173;
  _BYTE v174[5];
  char v175;
  BOOL v176;
  BOOL v177;
  WTF *v178;
  uint64_t v179;
  _QWORD v180[3];
  _DWORD v181[66];
  uint64_t v182;
  _DWORD *v183;
  uint64_t v184;
  _DWORD v185[66];
  uint64_t v186;
  WTF::StringImpl *v187;
  WTF *v188;
  int v189;
  unsigned int v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  _BYTE v193[10];
  unsigned int v194;
  uint64_t *v195;
  _BYTE v196[2];
  void *v197;
  char v198;
  _QWORD v199[2];
  char v200;
  _QWORD v201[2];
  char v202;
  WebCore::InspectorOverlayHighlight::Config *v203;
  WTF::StringImpl *v204[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = v2;
  v204[0] = 0;
  v17 = *v16;
  *v16 = 0;
  v187 = v17;
  WebCore::InspectorDOMAgent::highlightConfigFromInspectorObject((uint64_t *)&v203, v204, &v187);
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v17;
  }
  if (v203)
  {
    v151 = v4;
    v152 = v14;
    v19 = WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>::unspecifiedBoolTypeInstance;
    if (*v8)
      v20 = WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>::unspecifiedBoolTypeInstance;
    else
      v20 = 0;
    WebCore::InspectorDOMAgent::gridOverlayConfigFromInspectorObject((WTF::StringImpl *)v201, v204, v8);
    if (v20)
      v21 = v202 == 0;
    else
      v21 = 0;
    if (v21)
    {
      v24 = v204[0];
      if (v204[0])
        *(_DWORD *)v204[0] += 2;
      *(_QWORD *)v15 = v24;
      *(_BYTE *)(v15 + 8) = 1;
      goto LABEL_271;
    }
    if (!*v6)
      v19 = 0;
    WebCore::InspectorDOMAgent::flexOverlayConfigFromInspectorObject((WTF::StringImpl *)v199, v204, v6);
    if (v19 && !v200)
      goto LABEL_16;
    if (*v10)
    {
      v25 = *(WebCore::InspectorPageAgent **)(v152[2] + 200);
      if (!v25)
        goto LABEL_257;
      v26 = WebCore::InspectorPageAgent::assertFrame(v25, v204, v10);
      if (!v26)
      {
LABEL_16:
        v22 = v204[0];
        if (v204[0])
          *(_DWORD *)v204[0] += 2;
        *(_QWORD *)v15 = v22;
        goto LABEL_19;
      }
      v27 = *(WebCore::Node **)(v26 + 296);
      if (!v27)
      {
LABEL_257:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_19:
        *(_BYTE *)(v15 + 8) = 1;
LABEL_267:
        if (v200)
        {
          if ((v199[0] & 0x8000000000000) != 0)
          {
            v140 = (unsigned int *)(v199[0] & 0xFFFFFFFFFFFFLL);
            do
            {
              v141 = __ldaxr(v140);
              v142 = v141 - 1;
            }
            while (__stlxr(v142, v140));
            if (!v142)
            {
              atomic_store(1u, v140);
              WTF::fastFree((WTF *)v140, v18);
            }
          }
        }
        if (v202)
        {
          if ((v201[0] & 0x8000000000000) != 0)
          {
            v143 = (unsigned int *)(v201[0] & 0xFFFFFFFFFFFFLL);
            do
            {
              v144 = __ldaxr(v143);
              v145 = v144 - 1;
            }
            while (__stlxr(v145, v143));
            if (!v145)
            {
              atomic_store(1u, v143);
              WTF::fastFree((WTF *)v143, v18);
            }
          }
        }
LABEL_271:
        if (v203)
        {
          WebCore::InspectorOverlayHighlight::Config::~Config(v203, v18);
          WTF::fastFree(v137, v138);
        }
        goto LABEL_273;
      }
    }
    else
    {
      v27 = (WebCore::Node *)v152[15];
      if (!v27)
        goto LABEL_257;
    }
    *((_DWORD *)v27 + 6) += 2;
    WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v187, v27);
    v29 = v187;
    if (v187)
      *(_DWORD *)v187 += 2;
    v30 = v192;
    v149 = v192;
    v150 = v29;
    if (v192)
    {
      v31 = *(_DWORD *)v192;
      *(_DWORD *)v192 += 2;
      v32 = v193[0];
      v33 = *(unsigned __int16 *)&v193[3] | (v193[5] << 16);
      v34 = *(_DWORD *)&v193[6];
      v192 = 0;
      if (!v31)
      {
        WTF::StringImpl::destroy(v30, v28);
        v35 = v187;
LABEL_39:
        v36 = (int8x8_t)vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&vdupq_n_s32(v33) & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), (uint32x4_t)xmmword_1969ED9E0));
        v187 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v28);
          else
            *(_DWORD *)v35 -= 2;
        }
        WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)&v187, v12, 0, 0);
        v174[0] = v32;
        *(int8x8_t *)v37.i8 = vand_s8(v36, (int8x8_t)0x1000100010001);
        *(_DWORD *)&v174[1] = vmovn_s16(v37).u32[0];
        v175 = BYTE2(v33) & 1;
        v176 = (v33 & 0x400000) != 0;
        v177 = (v34 & 0x20000000) != 0;
        LOBYTE(v178) = 0;
        WebCore::parseCSSSelectorList(*(uint64_t *)v193, *(_QWORD *)v193 + 24 * v194, v174, 0, 0, (uint64_t)&v197);
        WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)&v187, v38);
        if (!v198)
        {
          *(_BYTE *)v15 = 0;
          *(_BYTE *)(v15 + 8) = 0;
          goto LABEL_259;
        }
        v147 = v27;
        v148 = (_BYTE *)v15;
        v196[0] = *((_BYTE *)v27 + 3384) != 2;
        v196[1] = *((_BYTE *)v27 + 3358) & 1;
        v195 = 0;
        WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)&v187, (uint64_t)v27);
        *(_WORD *)v174 = 0;
        v146 = (WTF *)v180;
        v178 = (WTF *)v180;
        v180[0] = 0;
        v180[1] = v181;
        v180[2] = 16;
        v181[64] = 0;
        v182 = 0;
        v183 = v185;
        v184 = 16;
        v185[64] = 0;
        v186 = -1;
        v40.n128_u64[0] = 0x100000008;
        v179 = 0x100000008;
        v41 = v190;
        if (v190)
        {
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = (WTF *)v171;
          v155 = (WTF *)v171;
          while (HIDWORD(v179))
          {
            v46 = (char *)v188 + 584 * v41 - 584;
            v47 = v178;
            v48 = *(_QWORD *)v46;
            if (*(_QWORD *)v46 == *((_QWORD *)v178 + 73 * HIDWORD(v179) - 73)
              || !*((_DWORD *)v46 + 70) && !*((_DWORD *)v178 + 146 * HIDWORD(v179) - 76))
            {
              v108 = v44;
              v109 = 0;
              v110 = 584 * HIDWORD(v179);
              v111 = v148;
              do
              {
                v112 = (char *)v47 + v109;
                v113 = *(WTF **)((char *)v47 + v109 + 296);
                if ((WTF *)((char *)v47 + v109 + 312) != v113 && v113 != 0)
                {
                  *((_QWORD *)v112 + 37) = 0;
                  *((_DWORD *)v112 + 76) = 0;
                  WTF::fastFree(v113, v39);
                }
                v115 = (WTF *)*((_QWORD *)v112 + 1);
                if (v112 + 24 != (char *)v115 && v115 != 0)
                {
                  *((_QWORD *)v112 + 1) = 0;
                  *(_DWORD *)((char *)v47 + v109 + 16) = 0;
                  WTF::fastFree(v115, v39);
                }
                v109 += 584;
              }
              while (v110 != v109);
              v117 = v178;
              if (v146 != v178 && v178)
              {
                v178 = 0;
                LODWORD(v179) = 0;
                WTF::fastFree(v117, v39);
              }
              v118 = v188;
              if (v190)
              {
                v119 = 0;
                v120 = 584 * v190;
                do
                {
                  v121 = (char *)v118 + v119;
                  v122 = *(WTF **)((char *)v118 + v119 + 296);
                  if ((WTF *)((char *)v118 + v119 + 312) != v122 && v122 != 0)
                  {
                    *((_QWORD *)v121 + 37) = 0;
                    *((_DWORD *)v121 + 76) = 0;
                    WTF::fastFree(v122, v39);
                  }
                  v124 = (WTF *)*((_QWORD *)v121 + 1);
                  if (v121 + 24 != (char *)v124 && v124 != 0)
                  {
                    *((_QWORD *)v121 + 1) = 0;
                    *(_DWORD *)((char *)v118 + v119 + 16) = 0;
                    WTF::fastFree(v124, v39);
                  }
                  v119 += 584;
                }
                while (v120 != v119);
                v118 = v188;
              }
              v126 = v151;
              if (&v191 != (uint64_t *)v118 && v118)
              {
                v188 = 0;
                v189 = 0;
                WTF::fastFree(v118, v39);
              }
              v127 = (_QWORD **)v152[9];
              v128 = bmalloc::api::isoAllocate();
              *(_DWORD *)(v128 + 16) = 1;
              *(_QWORD *)v128 = &unk_1E33A84B8;
              *(_QWORD *)(v128 + 8) = 0;
              *(_QWORD *)(v128 + 24) = v108;
              *(_DWORD *)(v128 + 32) = v43;
              *(_DWORD *)(v128 + 36) = v42;
              v187 = (WTF::StringImpl *)v128;
              if (v126[1])
                v129 = *v126 == 0;
              else
                v129 = 1;
              v130 = !v129;
              WebCore::InspectorOverlay::highlightNodeList(v127, &v187, (uint64_t)v203, (uint64_t)v201, (uint64_t)v199, v130);
              v131 = v187;
              v187 = 0;
              v27 = v147;
              if (v131)
              {
                if (*((_DWORD *)v131 + 4) == 1)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v131 + 8))(v131);
                else
                  --*((_DWORD *)v131 + 4);
              }
              *v111 = 0;
              v111[8] = 0;
              v132 = (uint64_t)v195;
              if (v195)
              {
                v133 = *((unsigned int *)v195 - 1);
                if ((_DWORD)v133)
                {
                  v134 = v195;
                  do
                  {
                    v135 = *v134;
                    if (*v134 != -1)
                    {
                      *v134 = 0;
                      if (v135)
                      {
                        if (*(_DWORD *)(v135 + 24) == 2)
                        {
                          if ((*(_WORD *)(v135 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v135, v18);
                        }
                        else
                        {
                          *(_DWORD *)(v135 + 24) -= 2;
                        }
                      }
                    }
                    ++v134;
                    --v133;
                  }
                  while (v133);
                }
                WTF::fastFree((WTF *)(v132 - 16), v18);
              }
              if (v198)
              {
                v18 = v197;
                v197 = 0;
                if (v18)
                  WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v197, (WTF::StringImpl *)v18);
              }
LABEL_259:
              v136 = v150;
              if (v149)
              {
                if (*(_DWORD *)v149 == 2)
                {
                  WTF::StringImpl::destroy(v149, (WTF::StringImpl *)v18);
                  v136 = v150;
                  if (!v150)
                    goto LABEL_265;
                  goto LABEL_263;
                }
                *(_DWORD *)v149 -= 2;
              }
              if (!v136)
                goto LABEL_265;
LABEL_263:
              if (*(_DWORD *)v136 == 2)
                WTF::StringImpl::destroy(v136, (WTF::StringImpl *)v18);
              else
                *(_DWORD *)v136 -= 2;
LABEL_265:
              if (*((_DWORD *)v27 + 6) == 2)
              {
                if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v27, v18);
              }
              else
              {
                *((_DWORD *)v27 + 6) -= 2;
              }
              goto LABEL_267;
            }
            v49 = *(unsigned __int16 *)(v48 + 28);
            if (v48)
              v50 = (v49 & 8) == 0;
            else
              v50 = 1;
            if (!v50)
            {
              *(_DWORD *)(v48 + 24) += 2;
              v51 = **(_QWORD **)(v48 + 40);
              if (v51)
                v52 = (*(_WORD *)(v51 + 28) & 0x80) == 0;
              else
                v52 = 1;
              v107 = !v52 && *(unsigned __int8 *)(v51 + 193) == 0;
              if ((~v49 & 0x408) != 0)
                v156 = 0;
              else
                v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 368))(v48);
              if (!v198)
                goto LABEL_296;
              v53 = (const WebCore::CSSSelector *)v197;
              if (v197)
              {
                while (1)
                {
                  if (!v107)
                  {
LABEL_81:
                    v160[0] = 0;
                    v162 = 0;
                    v163 = 0;
                    v164 = 0;
                    v165 = 0;
                    v166 = 0;
                    v167 = 0;
                    v168 = 0;
                    v169 = v45;
                    v170 = 8;
                    v172 = 0;
                    v173 = 0;
                    v161 = v156;
                    if (WebCore::SelectorChecker::match((WebCore::SelectorChecker *)v196, v53, (const WebCore::Element *)v48, (WebCore::SelectorChecker::CheckingContext *)v160, v40))
                    {
                      *(_DWORD *)(v48 + 24) += 2;
                      v157 = (WebCore::Node *)v48;
                      WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v195, (uint64_t *)&v157, (uint64_t)v158);
                      v61 = v159;
                      v62 = v157;
                      v157 = 0;
                      if (v62)
                      {
                        if (*((_DWORD *)v62 + 6) == 2)
                        {
                          if ((*((_WORD *)v62 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v62, v39);
                        }
                        else
                        {
                          *((_DWORD *)v62 + 6) -= 2;
                        }
                      }
                      if (v61)
                      {
                        v63 = v42;
                        if (v42 == (_DWORD)v43)
                        {
                          v64 = v42 + ((unint64_t)v42 >> 2);
                          if (v64 >= 0x10)
                            v65 = v64 + 1;
                          else
                            v65 = 16;
                          if (v65 <= (unint64_t)v42 + 1)
                            v43 = v42 + 1;
                          else
                            v43 = v65;
                          if (v43 >> 29)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x195E2611CLL);
                          }
                          v66 = v44;
                          v44 = (void *)WTF::fastMalloc((WTF *)(8 * v43));
                          memcpy(v44, v66, 8 * v42);
                          if (v66)
                          {
                            if (v44 == v66)
                            {
                              v44 = 0;
                              v43 = 0;
                            }
                            else
                            {
                              v43 = v43;
                            }
                            WTF::fastFree((WTF *)v66, v39);
                          }
                        }
                        ++v42;
                        *(_DWORD *)(v48 + 24) += 2;
                        *((_QWORD *)v44 + v63) = v48;
                        v45 = v155;
                      }
                    }
                    v67 = v172;
                    if (v172)
                    {
                      if ((v172 & 0x40) != 0
                        && (v67 = v172 & 0xFFFFFFBF, (v68 = *(_QWORD *)(v48 + 72) & 0xFFFFFFFFFFFFLL) != 0))
                      {
                        __src = v44;
                        v82 = *(_QWORD *)(v68 + 168);
                        if (v82)
                        {
                          *(_DWORD *)(v82 + 24) += 4;
                          v157 = (WebCore::Node *)v82;
                          WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v195, (uint64_t *)&v157, (uint64_t)v158);
                          v83 = v159;
                          v84 = v157;
                          v157 = 0;
                          if (v84)
                          {
                            if (*((_DWORD *)v84 + 6) == 2)
                            {
                              if ((*((_WORD *)v84 + 15) & 0x400) == 0)
                                WebCore::Node::removedLastRef(v84, v39);
                            }
                            else
                            {
                              *((_DWORD *)v84 + 6) -= 2;
                            }
                          }
                          if (v83)
                          {
                            v85 = v42;
                            if (v42 == (_DWORD)v43)
                            {
                              v86 = ((unint64_t)v43 >> 2) + v43;
                              if (v86 >= 0x10)
                                v87 = v86 + 1;
                              else
                                v87 = 16;
                              if (v87 <= (unint64_t)v42 + 1)
                                v88 = v42 + 1;
                              else
                                v88 = v87;
                              if (v88 >> 29)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x195E2612CLL);
                              }
                              v89 = (WTF *)WTF::fastMalloc((WTF *)(8 * v88));
                              v153 = v85;
                              v90 = 8 * v85;
                              v91 = (WTF *)__src;
                              memcpy(v89, __src, v90);
                              if (v91)
                              {
                                if (v89 == v91)
                                {
                                  v89 = 0;
                                  v88 = 0;
                                }
                                else
                                {
                                  v88 = v88;
                                }
                                WTF::fastFree(v91, v39);
                              }
                              v92 = v89;
                              v42 = v43 + 1;
                              v93 = *(_DWORD *)(v82 + 24) + 2;
                              *(_DWORD *)(v82 + 24) = v93;
                              __src = v92;
                              *((_QWORD *)v92 + v153) = v82;
                              v43 = v88;
                            }
                            else
                            {
                              ++v42;
                              v93 = *(_DWORD *)(v82 + 24) + 2;
                              *(_DWORD *)(v82 + 24) = v93;
                              *((_QWORD *)__src + v85) = v82;
                            }
                          }
                          else
                          {
                            v93 = *(_DWORD *)(v82 + 24);
                          }
                          v94 = v93 - 2;
                          if (v94)
                          {
                            *(_DWORD *)(v82 + 24) = v94;
                          }
                          else if ((*(_WORD *)(v82 + 30) & 0x400) == 0)
                          {
                            WebCore::Node::removedLastRef((WebCore::Node *)v82, v39);
                          }
                        }
                        v44 = __src;
                        v45 = v155;
                        if ((v67 & 0x80) == 0)
                          goto LABEL_149;
LABEL_104:
                        v67 &= ~0x80u;
                        v69 = *(_QWORD *)(v48 + 72) & 0xFFFFFFFFFFFFLL;
                        if (!v69)
                          goto LABEL_149;
                        __src = v44;
                        v70 = *(_QWORD *)(v69 + 176);
                        if (v70)
                        {
                          *(_DWORD *)(v70 + 24) += 4;
                          v157 = (WebCore::Node *)v70;
                          WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v195, (uint64_t *)&v157, (uint64_t)v158);
                          v71 = v159;
                          v72 = v157;
                          v157 = 0;
                          if (v72)
                          {
                            if (*((_DWORD *)v72 + 6) == 2)
                            {
                              if ((*((_WORD *)v72 + 15) & 0x400) == 0)
                                WebCore::Node::removedLastRef(v72, v39);
                            }
                            else
                            {
                              *((_DWORD *)v72 + 6) -= 2;
                            }
                          }
                          if (v71)
                          {
                            v73 = v42;
                            if (v42 == (_DWORD)v43)
                            {
                              v74 = ((unint64_t)v43 >> 2) + v43;
                              if (v74 >= 0x10)
                                v75 = v74 + 1;
                              else
                                v75 = 16;
                              if (v75 <= (unint64_t)v42 + 1)
                                v76 = v42 + 1;
                              else
                                v76 = v75;
                              if (v76 >> 29)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x195E26124);
                              }
                              v77 = (WTF *)WTF::fastMalloc((WTF *)(8 * v76));
                              v153 = v73;
                              v78 = 8 * v73;
                              v79 = (WTF *)__src;
                              memcpy(v77, __src, v78);
                              if (v79)
                              {
                                if (v77 == v79)
                                {
                                  v77 = 0;
                                  v76 = 0;
                                }
                                else
                                {
                                  v76 = v76;
                                }
                                WTF::fastFree(v79, v39);
                              }
                              v80 = v77;
                              v42 = v43 + 1;
                              v81 = *(_DWORD *)(v70 + 24) + 2;
                              *(_DWORD *)(v70 + 24) = v81;
                              __src = v80;
                              *((_QWORD *)v80 + v153) = v70;
                              v43 = v76;
                            }
                            else
                            {
                              ++v42;
                              v81 = *(_DWORD *)(v70 + 24) + 2;
                              *(_DWORD *)(v70 + 24) = v81;
                              *((_QWORD *)__src + v73) = v70;
                            }
                          }
                          else
                          {
                            v81 = *(_DWORD *)(v70 + 24);
                          }
                          v106 = v81 - 2;
                          if (v106)
                          {
                            *(_DWORD *)(v70 + 24) = v106;
                          }
                          else if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
                          {
                            WebCore::Node::removedLastRef((WebCore::Node *)v70, v39);
                          }
                        }
                        v44 = __src;
                        v45 = v155;
                        if (v67)
                        {
LABEL_150:
                          *(_DWORD *)(v48 + 24) += 2;
                          v157 = (WebCore::Node *)v48;
                          WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v195, (uint64_t *)&v157, (uint64_t)v158);
                          v95 = v159;
                          v96 = v157;
                          v157 = 0;
                          if (v96)
                          {
                            if (*((_DWORD *)v96 + 6) == 2)
                            {
                              if ((*((_WORD *)v96 + 15) & 0x400) == 0)
                                WebCore::Node::removedLastRef(v96, v39);
                            }
                            else
                            {
                              *((_DWORD *)v96 + 6) -= 2;
                            }
                          }
                          if (v95)
                          {
                            v97 = v42;
                            if (v42 == (_DWORD)v43)
                            {
                              v98 = ((unint64_t)v43 >> 2) + v43;
                              if (v98 >= 0x10)
                                v99 = v98 + 1;
                              else
                                v99 = 16;
                              if (v99 <= (unint64_t)v42 + 1)
                                v100 = v42 + 1;
                              else
                                v100 = v99;
                              if (v100 >> 29)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x195E26134);
                              }
                              v101 = v44;
                              v44 = (void *)WTF::fastMalloc((WTF *)(8 * v100));
                              memcpy(v44, v101, 8 * v97);
                              if (v101)
                              {
                                if (v44 == v101)
                                {
                                  v44 = 0;
                                  v100 = 0;
                                }
                                else
                                {
                                  v100 = v100;
                                }
                                WTF::fastFree((WTF *)v101, v39);
                              }
                              v42 = v43;
                            }
                            else
                            {
                              v100 = v43;
                            }
                            ++v42;
                            *(_DWORD *)(v48 + 24) += 2;
                            *((_QWORD *)v44 + v97) = v48;
                            v43 = v100;
                          }
                          v45 = v155;
                        }
                      }
                      else
                      {
                        if ((v67 & 0x80) != 0)
                          goto LABEL_104;
LABEL_149:
                        if (v67)
                          goto LABEL_150;
                      }
                    }
                    v102 = v169;
                    if (v45 != v169 && v169)
                    {
                      v169 = 0;
                      LODWORD(v170) = 0;
                      WTF::fastFree(v102, v39);
                    }
                    v103 = v162;
                    v162 = 0;
                    if (v103)
                    {
                      if (*(_DWORD *)v103 == 2)
                        WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v39);
                      else
                        *(_DWORD *)v103 -= 2;
                    }
                    goto LABEL_175;
                  }
                  if ((*(_DWORD *)v53 & 0x1F0) == 0x90)
                    break;
                  do
                  {
LABEL_175:
                    v105 = *(_DWORD *)v53;
                    v53 = (const WebCore::CSSSelector *)((char *)v53 + 16);
                    v104 = v105;
                  }
                  while ((v105 & 0x80000) == 0);
                  if ((v104 & 0x20000) != 0)
                    goto LABEL_198;
                }
                v54 = (_QWORD *)((char *)v53 + 8);
                if ((*(_DWORD *)v53 & 0x100000) != 0)
                  v54 = (_QWORD *)(*v54 + 8);
                v55 = *(_QWORD *)(v48 + 104);
                if (v55)
                {
                  v56 = *(unsigned int *)(v55 + 4);
                  if ((v56 & 1) != 0)
                  {
                    v57 = *(_QWORD *)(v55 + 40);
                    v58 = *(unsigned int *)(v55 + 52);
                    if (!v58)
                      goto LABEL_79;
                  }
                  else
                  {
                    v57 = v55 + 32;
                    v58 = v56 >> 5;
                    if (!(v56 >> 5))
                      goto LABEL_79;
                  }
                  v59 = (_QWORD *)(v57 + 8);
                  while (1)
                  {
                    v60 = *(v59 - 1);
                    if (v60 == WebCore::HTMLNames::useragentpartAttr
                      || *(_QWORD *)(v60 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
                      && *(_QWORD *)(v60 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
                    {
                      break;
                    }
                    v59 += 2;
                    if (!--v58)
                      goto LABEL_79;
                  }
                }
                else
                {
LABEL_79:
                  v59 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                }
                if (*v54 == *v59)
                  goto LABEL_81;
                goto LABEL_175;
              }
LABEL_198:
              if (*(_DWORD *)(v48 + 24) == 2)
              {
                if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v48, v39);
              }
              else
              {
                *(_DWORD *)(v48 + 24) -= 2;
              }
            }
            WebCore::ComposedTreeIterator::operator++((uint64_t)&v187, (WebCore::ShadowRoot *)v39);
            v41 = v190;
            if (!v190)
              goto LABEL_297;
          }
          __break(0xC471u);
LABEL_296:
          __break(1u);
        }
LABEL_297:
        __break(0xC471u);
        JUMPOUT(0x195E26144);
      }
      *(_DWORD *)v30 = v31;
    }
    else
    {
      v32 = v193[0];
      v33 = *(unsigned __int16 *)&v193[3] | (v193[5] << 16);
      v34 = *(_DWORD *)&v193[6];
      v192 = 0;
    }
    v35 = v29;
    goto LABEL_39;
  }
  v23 = v204[0];
  if (v204[0])
    *(_DWORD *)v204[0] += 2;
  *(_QWORD *)v15 = v23;
  *(_BYTE *)(v15 + 8) = 1;
LABEL_273:
  result = v204[0];
  if (v204[0])
  {
    if (*(_DWORD *)v204[0] == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v204[0], (WTF::StringImpl *)v18);
    else
      *(_DWORD *)v204[0] -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::highlightSelector@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return WebCore::InspectorDOMAgent::highlightSelector(a2, a1 - 32);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::highlightNode@<X0>(WebCore::InspectorDOMAgent **a1@<X0>, unsigned int *a2@<X1>, WTF::String *a3@<X2>, WTF::JSONImpl::ObjectBase **a4@<X3>, WTF::JSONImpl::ObjectBase **a5@<X4>, WTF::JSONImpl::ObjectBase **a6@<X5>, uint64_t a7@<X8>)
{
  __int16 v8;

  v8 = 0;
  return WebCore::InspectorDOMAgent::highlightNode(a7, a1, (void *)*a2, *((_BYTE *)a2 + 4), a3, a4, a5, a6, &v8);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::highlightNode(uint64_t a1, WebCore::InspectorDOMAgent **this, void *a3, char a4, WTF::String *a5, WTF::JSONImpl::ObjectBase **a6, WTF::JSONImpl::ObjectBase **a7, WTF::JSONImpl::ObjectBase **a8, _BYTE *a9)
{
  uint64_t v14;
  void *v15;
  _DWORD *v16;
  int v17;
  WTF::JSONImpl::ObjectBase *v18;
  void *v19;
  WebCore::InspectorOverlayHighlight::Config *v20;
  uint64_t (*v21)();
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t (*v24)();
  WTF::StringImpl *v25;
  BOOL v26;
  char v27;
  WTF *v28;
  void *v29;
  WTF::StringImpl *result;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD v37[2];
  char v38;
  WTF::JSONImpl::ObjectBase *v39[2];
  char v40;
  WebCore::InspectorOverlayHighlight::Config *v41;
  WTF::StringImpl *v42;

  v42 = 0;
  if (a4)
  {
    v14 = WebCore::InspectorDOMAgent::nodeForId((WebCore::InspectorDOMAgent *)this, a3);
    if (v14)
    {
      v16 = (_DWORD *)v14;
      v17 = *(_DWORD *)(v14 + 24);
      *(_DWORD *)(v14 + 24) = v17 + 2;
      if (v17)
      {
        *(_DWORD *)(v14 + 24) = v17;
      }
      else if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
      }
      goto LABEL_5;
    }
LABEL_32:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v23 = v39[0];
    v42 = v39[0];
    if (!v39[0])
      goto LABEL_23;
    goto LABEL_22;
  }
  if (!*(_QWORD *)a5)
    goto LABEL_32;
  v16 = (_DWORD *)WebCore::InspectorDOMAgent::nodeForObjectId(this[5], a5);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = v39[0];
  v42 = v39[0];
  if (!v16)
  {
LABEL_21:
    if (!v23)
    {
LABEL_23:
      *(_QWORD *)a1 = v23;
      *(_BYTE *)(a1 + 8) = 1;
      goto LABEL_46;
    }
LABEL_22:
    *(_DWORD *)v23 += 2;
    goto LABEL_23;
  }
LABEL_5:
  v18 = *a6;
  *a6 = 0;
  v39[0] = v18;
  WebCore::InspectorDOMAgent::highlightConfigFromInspectorObject((uint64_t *)&v41, &v42, v39);
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v18;
  }
  v20 = v41;
  if (!v41)
  {
    v23 = v42;
    goto LABEL_21;
  }
  if (*a7)
    v21 = WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>::unspecifiedBoolTypeInstance;
  else
    v21 = 0;
  WebCore::InspectorDOMAgent::gridOverlayConfigFromInspectorObject((WTF::StringImpl *)v39, &v42, a7);
  if (!v21 || v40)
  {
    if (*a8)
      v24 = WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>::unspecifiedBoolTypeInstance;
    else
      v24 = 0;
    WebCore::InspectorDOMAgent::flexOverlayConfigFromInspectorObject((WTF::StringImpl *)v37, &v42, a8);
    if (!v24 || v38)
    {
      if (a9[1])
        v26 = *a9 == 0;
      else
        v26 = 1;
      v27 = !v26;
      WebCore::InspectorOverlay::highlightNode((_QWORD **)this[9], v16, (uint64_t)v20, (uint64_t)v39, (uint64_t)v37, v27);
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
      if (v38)
      {
        if ((v37[0] & 0x8000000000000) != 0)
        {
          v34 = (unsigned int *)(v37[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v19);
          }
        }
      }
    }
    else
    {
      v25 = v42;
      if (v42)
        *(_DWORD *)v42 += 2;
      *(_QWORD *)a1 = v25;
      *(_BYTE *)(a1 + 8) = 1;
    }
    if (v40)
    {
      if (((unint64_t)v39[0] & 0x8000000000000) != 0)
      {
        v31 = (unsigned int *)((unint64_t)v39[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          WTF::fastFree((WTF *)v31, v19);
        }
      }
    }
  }
  else
  {
    v22 = v42;
    if (v42)
      *(_DWORD *)v42 += 2;
    *(_QWORD *)a1 = v22;
    *(_BYTE *)(a1 + 8) = 1;
  }
  if (v41)
  {
    WebCore::InspectorOverlayHighlight::Config::~Config(v41, v19);
    WTF::fastFree(v28, v29);
  }
LABEL_46:
  result = v42;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)v42 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::highlightNode@<X0>(WTF::String *a1@<X2>, uint64_t a2@<X0>, unsigned int *a3@<X1>, WTF::JSONImpl::ObjectBase **a4@<X3>, WTF::JSONImpl::ObjectBase **a5@<X4>, WTF::JSONImpl::ObjectBase **a6@<X5>, uint64_t a7@<X8>)
{
  __int16 v8;

  v8 = 0;
  return WebCore::InspectorDOMAgent::highlightNode(a7, (WebCore::InspectorDOMAgent **)(a2 - 32), (void *)*a3, *((_BYTE *)a3 + 4), a1, a4, a5, a6, &v8);
}

uint64_t WebCore::InspectorDOMAgent::nodeForObjectId(WebCore::InspectorDOMAgent *this, const WTF::String *a2)
{
  uint64_t ObjectById;
  uint64_t v4;
  JSC::JSCell *v5;
  uint64_t Object;
  _BYTE v8[24];
  _QWORD *v9;

  Inspector::InjectedScriptManager::injectedScriptForObjectId(this, a2);
  if (!v9 || !*v9)
    goto LABEL_9;
  ObjectById = Inspector::InjectedScript::findObjectById((Inspector::InjectedScript *)v8, a2);
  v4 = 0;
  if (ObjectById)
  {
    v5 = (JSC::JSCell *)ObjectById;
    if ((ObjectById & 0xFFFE000000000002) == 0)
    {
      if (*(unsigned __int8 *)(ObjectById + 5) >= 0x17u)
      {
        JSC::JSCell::getObject((JSC::JSCell *)ObjectById);
        Object = JSC::JSCell::getObject(v5);
        if ((Object & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(Object + 5) >= 0xF0u)
        {
          v4 = *(_QWORD *)(Object + 24);
          goto LABEL_10;
        }
      }
LABEL_9:
      v4 = 0;
    }
  }
LABEL_10:
  Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)v8);
  return v4;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::highlightNodeList@<X0>(WebCore::InspectorDOMAgent *a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X2>, WTF::JSONImpl::ObjectBase **a4@<X3>, WTF::JSONImpl::ObjectBase **a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v7;

  v7 = 0;
  return WebCore::InspectorDOMAgent::highlightNodeList(a6, a1, *(WTF::JSONImpl::Value ***)(*(_QWORD *)a2 + 16), *(_DWORD *)(*(_QWORD *)a2 + 28), a3, a4, a5, &v7);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::highlightNodeList(uint64_t a1, WebCore::InspectorDOMAgent *a2, WTF::JSONImpl::Value **a3, unsigned int a4, WTF::StringImpl **a5, WTF::JSONImpl::ObjectBase **a6, WTF::JSONImpl::ObjectBase **a7, _BYTE *a8)
{
  void *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  void *v27;
  WebCore::InspectorOverlayHighlight::Config *v28;
  uint64_t (*v29)();
  uint64_t (*v30)();
  BOOL v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _QWORD **v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  _DWORD *v39;
  WTF *v40;
  void *v41;
  WTF::StringImpl *result;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  _DWORD *v56;
  _QWORD v57[2];
  char v58;
  WTF::StringImpl *v59[2];
  char v60;
  WebCore::InspectorOverlayHighlight::Config *v61;
  WTF::StringImpl *v62;

  v62 = 0;
  if (a4)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 8 * a4;
    while (1)
    {
      v14 = WTF::JSONImpl::Value::asInteger(*a3);
      if ((v14 & 0xFF00000000) == 0)
        break;
      v15 = WebCore::InspectorDOMAgent::nodeForId(a2, (void *)v14);
      if (v15)
      {
        v17 = v15;
        v18 = *(_DWORD *)(v15 + 24);
        *(_DWORD *)(v15 + 24) = v18 + 2;
        if (v18)
        {
          *(_DWORD *)(v15 + 24) = v18;
        }
        else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
        }
        v19 = v12;
        if (v12 == v11)
        {
          v20 = ((unint64_t)v11 >> 2) + v11;
          if (v20 >= 0x10)
            v21 = v20 + 1;
          else
            v21 = 16;
          if (v21 <= (unint64_t)v12 + 1)
            v22 = v12 + 1;
          else
            v22 = v21;
          if (v22 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195E26A90);
          }
          v23 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
          memcpy(v23, v10, 8 * v12);
          if (v10)
          {
            if (v23 == v10)
            {
              LODWORD(v22) = 0;
              v23 = 0;
            }
            WTF::fastFree((WTF *)v10, v24);
          }
          v10 = v23;
          v12 = v11 + 1;
          *(_DWORD *)(v17 + 24) += 2;
          *((_QWORD *)v23 + v19) = v17;
          v11 = v22;
        }
        else
        {
          ++v12;
          *(_DWORD *)(v17 + 24) += 2;
          *((_QWORD *)v10 + v19) = v17;
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        if (v59[0])
        {
          if (*(_DWORD *)v59[0] == 2)
            WTF::StringImpl::destroy(v59[0], v25);
          else
            *(_DWORD *)v59[0] -= 2;
        }
      }
      ++a3;
      v13 -= 8;
      if (!v13)
        goto LABEL_30;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    v12 = 0;
    v11 = 0;
    v10 = 0;
LABEL_30:
    v26 = *a5;
    *a5 = 0;
    v59[0] = v26;
    WebCore::InspectorDOMAgent::highlightConfigFromInspectorObject((uint64_t *)&v61, &v62, v59);
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v26;
    }
    v28 = v61;
    if (v61)
    {
      v29 = WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>::unspecifiedBoolTypeInstance;
      if (*a6)
        v30 = WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>::unspecifiedBoolTypeInstance;
      else
        v30 = 0;
      WebCore::InspectorDOMAgent::gridOverlayConfigFromInspectorObject((WTF::StringImpl *)v59, &v62, a6);
      if (v30)
        v31 = v60 == 0;
      else
        v31 = 0;
      if (v31)
      {
        v34 = v62;
        if (v62)
          *(_DWORD *)v62 += 2;
        *(_QWORD *)a1 = v34;
        *(_BYTE *)(a1 + 8) = 1;
      }
      else
      {
        if (!*a7)
          v29 = 0;
        WebCore::InspectorDOMAgent::flexOverlayConfigFromInspectorObject((WTF::StringImpl *)v57, &v62, a7);
        if (!v29 || v58)
        {
          v35 = (_QWORD **)*((_QWORD *)a2 + 9);
          v36 = bmalloc::api::isoAllocate();
          *(_DWORD *)(v36 + 16) = 1;
          *(_QWORD *)v36 = &unk_1E33A84B8;
          *(_QWORD *)(v36 + 8) = 0;
          *(_QWORD *)(v36 + 24) = v10;
          *(_DWORD *)(v36 + 32) = v11;
          *(_DWORD *)(v36 + 36) = v12;
          v56 = (_DWORD *)v36;
          if (a8[1])
            v37 = *a8 == 0;
          else
            v37 = 1;
          v38 = !v37;
          WebCore::InspectorOverlay::highlightNodeList(v35, &v56, (uint64_t)v28, (uint64_t)v59, (uint64_t)v57, v38);
          v39 = v56;
          v56 = 0;
          if (v39)
          {
            if (v39[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
            else
              --v39[4];
          }
          *(_BYTE *)a1 = 0;
          *(_BYTE *)(a1 + 8) = 0;
          if (v58)
          {
            if ((v57[0] & 0x8000000000000) != 0)
            {
              v49 = (unsigned int *)(v57[0] & 0xFFFFFFFFFFFFLL);
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (v50 == 1)
              {
                atomic_store(1u, v49);
                WTF::fastFree((WTF *)v49, v27);
              }
            }
          }
          v10 = 0;
          v12 = 0;
        }
        else
        {
          v32 = v62;
          if (v62)
            *(_DWORD *)v62 += 2;
          *(_QWORD *)a1 = v32;
          *(_BYTE *)(a1 + 8) = 1;
        }
        if (v60)
        {
          if (((unint64_t)v59[0] & 0x8000000000000) != 0)
          {
            v46 = (unsigned int *)((unint64_t)v59[0] & 0xFFFFFFFFFFFFLL);
            do
            {
              v47 = __ldaxr(v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v46));
            if (!v48)
            {
              atomic_store(1u, v46);
              WTF::fastFree((WTF *)v46, v27);
            }
          }
        }
      }
      if (v61)
      {
        WebCore::InspectorOverlayHighlight::Config::~Config(v61, v27);
        WTF::fastFree(v40, v41);
      }
    }
    else
    {
      v33 = v62;
      if (v62)
        *(_DWORD *)v62 += 2;
      *(_QWORD *)a1 = v33;
      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  if (v12)
  {
    v43 = 8 * v12;
    v44 = (uint64_t *)v10;
    do
    {
      v45 = *v44;
      *v44 = 0;
      if (v45)
      {
        if (*(_DWORD *)(v45 + 24) == 2)
        {
          if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v45, v27);
        }
        else
        {
          *(_DWORD *)(v45 + 24) -= 2;
        }
      }
      ++v44;
      v43 -= 8;
    }
    while (v43);
  }
  if (v10)
    WTF::fastFree((WTF *)v10, v27);
  result = v62;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v62 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::highlightNodeList@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X2>, WTF::JSONImpl::ObjectBase **a4@<X3>, WTF::JSONImpl::ObjectBase **a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v7;

  v7 = 0;
  return WebCore::InspectorDOMAgent::highlightNodeList(a6, (WebCore::InspectorDOMAgent *)(a1 - 32), *(WTF::JSONImpl::Value ***)(*(_QWORD *)a2 + 16), *(_DWORD *)(*(_QWORD *)a2 + 28), a3, a4, a5, &v7);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::highlightFrame@<X0>(WTF::StringImpl **a1@<X1>, uint64_t a2@<X0>, WTF::JSONImpl::ObjectBase **a3@<X2>, WTF::JSONImpl::ObjectBase **a4@<X3>, uint64_t a5@<X8>)
{
  WebCore::InspectorPageAgent *v7;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF::StringImpl *result;
  char v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD **v23;
  uint64_t v24;
  _DWORD *v25;
  void *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  BOOL v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  _BOOL4 v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  _BOOL4 v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  __int128 v57;
  char v58;
  __int128 v59;
  char v60;
  unint64_t v61;
  char v62;
  WTF::StringImpl *v63;

  v63 = 0;
  v7 = *(WebCore::InspectorPageAgent **)(*(_QWORD *)(a2 + 16) + 200);
  if (!v7)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a5 + 8) = 1;
    return result;
  }
  v10 = WebCore::InspectorPageAgent::assertFrame(v7, &v63, a1);
  if (!v10)
  {
    result = v63;
    if (v63)
      *(_DWORD *)v63 += 2;
    *(_QWORD *)a5 = result;
    v18 = 1;
    goto LABEL_37;
  }
  v12 = v10;
  v13 = *(_QWORD *)(v10 + 120);
  if (v13 && *(_QWORD *)(v13 + 8))
  {
    v14 = WTF::fastMalloc((WTF *)0x30);
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)v14 = 0u;
    *(_BYTE *)(v14 + 40) = 1;
    WebCore::parseColor((WTF::StringImpl *)&v61, a3);
    if (v62)
    {
      v16 = v61;
      v61 = 0;
    }
    else
    {
      v16 = 0x1104000000000000;
    }
    v19 = *(_QWORD *)v14;
    if ((*(_QWORD *)v14 & 0x8000000000000) != 0)
    {
      if ((v16 & 0x8000000000000) != 0)
      {
        v59 = *(_OWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 4);
        v56 = v16;
        v48 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
        v57 = *(_OWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 4);
        v49 = WebCore::operator==<float,4ul>((float *)&v59, (float *)&v57);
        v19 = *(_QWORD *)v14;
        if (v49 && HIBYTE(v19) == HIBYTE(v56))
        {
          v16 = v56;
          if (BYTE6(v19) == BYTE6(v56))
          {
            do
            {
              v50 = __ldaxr(v48);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, v48));
            if (!v51)
            {
              atomic_store(1u, v48);
              WTF::fastFree((WTF *)v48, v15);
            }
LABEL_17:
            if (v62)
            {
              if ((v61 & 0x8000000000000) != 0)
              {
                v36 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v37 = __ldaxr(v36);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, v36));
                if (!v38)
                {
                  atomic_store(1u, v36);
                  WTF::fastFree((WTF *)v36, v15);
                }
              }
            }
            WebCore::parseColor((WTF::StringImpl *)&v61, a4);
            if (v62)
            {
              v21 = v61;
              v61 = 0;
            }
            else
            {
              v21 = 0x1104000000000000;
            }
            v22 = *(_QWORD *)(v14 + 8);
            if ((v22 & 0x8000000000000) != 0)
            {
              if ((v21 & 0x8000000000000) != 0)
              {
                v59 = *(_OWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
                v52 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
                v57 = *(_OWORD *)((v21 & 0xFFFFFFFFFFFFLL) + 4);
                v53 = WebCore::operator==<float,4ul>((float *)&v59, (float *)&v57);
                v22 = *(_QWORD *)(v14 + 8);
                if (v53 && HIBYTE(v22) == HIBYTE(v21) && BYTE6(v22) == BYTE6(v21))
                {
                  do
                  {
                    v54 = __ldaxr(v52);
                    v55 = v54 - 1;
                  }
                  while (__stlxr(v55, v52));
                  if (!v55)
                  {
                    atomic_store(1u, v52);
                    WTF::fastFree((WTF *)(v21 & 0xFFFFFFFFFFFFLL), v20);
                  }
                  goto LABEL_27;
                }
              }
            }
            else if (v22 == v21 && (v21 & 0x8000000000000) == 0)
            {
LABEL_27:
              if (v62)
              {
                if ((v61 & 0x8000000000000) != 0)
                {
                  v39 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v40 = __ldaxr(v39);
                    v41 = v40 - 1;
                  }
                  while (__stlxr(v41, v39));
                  if (!v41)
                  {
                    atomic_store(1u, v39);
                    WTF::fastFree((WTF *)v39, v20);
                  }
                }
              }
              v23 = *(_QWORD ***)(a2 + 72);
              v24 = *(_QWORD *)(v12 + 120);
              if (v24)
                v25 = *(_DWORD **)(v24 + 8);
              else
                v25 = 0;
              LOBYTE(v59) = 0;
              v60 = 0;
              LOBYTE(v57) = 0;
              v58 = 0;
              WebCore::InspectorOverlay::highlightNode(v23, v25, v14, (uint64_t)&v59, (uint64_t)&v57, 0);
              if (v58)
              {
                if ((v57 & 0x8000000000000) != 0)
                {
                  v42 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v43 = __ldaxr(v42);
                    v44 = v43 - 1;
                  }
                  while (__stlxr(v44, v42));
                  if (!v44)
                  {
                    atomic_store(1u, v42);
                    WTF::fastFree((WTF *)v42, v26);
                  }
                }
              }
              if (v60)
              {
                if ((v59 & 0x8000000000000) != 0)
                {
                  v45 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v46 = __ldaxr(v45);
                    v47 = v46 - 1;
                  }
                  while (__stlxr(v47, v45));
                  if (!v47)
                  {
                    atomic_store(1u, v45);
                    WTF::fastFree((WTF *)v45, v26);
                  }
                }
              }
              WebCore::InspectorOverlayHighlight::Config::~Config((WebCore::InspectorOverlayHighlight::Config *)v14, v26);
              WTF::fastFree(v27, v28);
              goto LABEL_36;
            }
            if ((v22 & 0x8000000000000) != 0)
            {
              v33 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
              do
              {
                v34 = __ldaxr(v33);
                v35 = v34 - 1;
              }
              while (__stlxr(v35, v33));
              if (!v35)
              {
                atomic_store(1u, v33);
                WTF::fastFree((WTF *)v33, v20);
              }
            }
            *(_QWORD *)(v14 + 8) = v21;
            goto LABEL_27;
          }
        }
        else
        {
          v16 = v56;
        }
      }
    }
    else if (v19 == v16 && (v16 & 0x8000000000000) == 0)
    {
      goto LABEL_17;
    }
    if ((v19 & 0x8000000000000) != 0)
    {
      v29 = v16;
      v30 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
      do
      {
        v31 = __ldaxr(v30);
        v32 = --v31 == 0;
      }
      while (__stlxr(v31, v30));
      v16 = v29;
      if (v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v15);
        v16 = v29;
      }
    }
    *(_QWORD *)v14 = v16;
    goto LABEL_17;
  }
LABEL_36:
  v18 = 0;
  *(_BYTE *)a5 = 0;
  result = v63;
LABEL_37:
  *(_BYTE *)(a5 + 8) = v18;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::highlightFrame@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, WTF::JSONImpl::ObjectBase **a4@<X3>, uint64_t a5@<X8>)
{
  return WebCore::InspectorDOMAgent::highlightFrame(a2, a1 - 32, a3, a4, a5);
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::hideHighlight@<X0>(WebCore::InspectorOverlay **this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = WebCore::InspectorOverlay::hideHighlight(this[5], a2);
  *a3 = 0;
  a3[8] = 0;
  return result;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::showGridOverlay@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  void *v8;
  WebCore::Node *v9;
  int v10;
  WTF::JSONImpl::ObjectBase *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  char v20;
  WTF::JSONImpl::ObjectBase *v21;
  uint64_t v22[2];
  char v23;
  WTF::StringImpl *v24;

  v24 = 0;
  v7 = WebCore::InspectorDOMAgent::nodeForId((WebCore::InspectorDOMAgent *)a1, a2);
  if (v7)
  {
    v9 = (WebCore::Node *)v7;
    v10 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v10 + 2;
    if (v10)
    {
      *(_DWORD *)(v7 + 24) = v10;
    }
    else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
    }
    v11 = *a3;
    *a3 = 0;
    v21 = v11;
    WebCore::InspectorDOMAgent::gridOverlayConfigFromInspectorObject((WTF::StringImpl *)v22, &v24, &v21);
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v11;
    }
    if (v23)
    {
      WebCore::InspectorOverlay::setGridOverlayForNode(a1[9], v9, v22, &v19);
      if (v20)
      {
        v13 = v19;
        v19 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      *a4 = 0;
      a4[8] = 0;
      if (v23)
      {
        if ((v22[0] & 0x8000000000000) != 0)
        {
          v14 = (unsigned int *)(v22[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, v12);
          }
        }
      }
    }
    else
    {
      v17 = v24;
      if (v24)
        *(_DWORD *)v24 += 2;
      *(_QWORD *)a4 = v17;
      a4[8] = 1;
    }
    result = v24;
    if (v24)
    {
LABEL_22:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (WTF::StringImpl *)v22[0];
    if (v22[0])
      *(_DWORD *)v22[0] += 2;
    *(_QWORD *)a4 = result;
    a4[8] = 1;
    if (result)
      goto LABEL_22;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::showGridOverlay@<X0>(uint64_t a1@<X0>, void *a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorDOMAgent::showGridOverlay((uint64_t *)(a1 - 32), a2, a3, a4);
}

uint64_t WebCore::InspectorDOMAgent::hideGridOverlay@<X0>(WebCore::InspectorOverlay **this@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  WebCore::Node *v7;
  int v8;
  WebCore::InspectorOverlay *v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;

  if (!a2[4])
  {
    result = WebCore::InspectorOverlay::clearAllGridOverlays(this[9], a2);
    *a3 = 0;
    a3[8] = 0;
    return result;
  }
  v5 = WebCore::InspectorDOMAgent::nodeForId((WebCore::InspectorDOMAgent *)this, (void *)*(unsigned int *)a2);
  if (v5)
  {
    v7 = (WebCore::Node *)v5;
    v8 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v8 + 2;
    if (v8)
    {
      *(_DWORD *)(v5 + 24) = v8;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    v9 = this[9];
    if (WebCore::InspectorOverlay::removeGridOverlayForNode(v9, v7))
    {
      if (*((_QWORD *)v9 + 2)
        || *((_QWORD *)v9 + 3)
        || *((_QWORD *)v9 + 16)
        || *((_DWORD *)v9 + 71)
        || *((_DWORD *)v9 + 75)
        || *((_BYTE *)v9 + 304)
        || *((_BYTE *)v9 + 305)
        || *((_BYTE *)v9 + 306))
      {
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v9 + 160) + 56))(*(_QWORD *)(*(_QWORD *)v9 + 160));
        if (!result)
        {
LABEL_17:
          v12 = 0;
          *a3 = 0;
LABEL_21:
          a3[8] = v12;
          return result;
        }
        v11 = 7;
      }
      else
      {
        v11 = 8;
      }
      result = (*(uint64_t (**)(void))(**((_QWORD **)v9 + 1) + 8 * v11))();
      goto LABEL_17;
    }
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_20:
    v12 = 1;
    goto LABEL_21;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = (uint64_t)v15;
  if (!v15)
  {
    *(_QWORD *)a3 = 0;
    goto LABEL_20;
  }
  v14 = *(_DWORD *)v15;
  *(_DWORD *)v15 += 2;
  *(_QWORD *)a3 = v15;
  a3[8] = 1;
  if (!v14)
    return WTF::StringImpl::destroy(v15, v13);
  *(_DWORD *)v15 = v14;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::hideGridOverlay@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  return WebCore::InspectorDOMAgent::hideGridOverlay((WebCore::InspectorOverlay **)(a1 - 32), a2, a3);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::showFlexOverlay@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  void *v8;
  WebCore::Node *v9;
  int v10;
  WTF::JSONImpl::ObjectBase *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  char v20;
  WTF::JSONImpl::ObjectBase *v21;
  uint64_t v22[2];
  char v23;
  WTF::StringImpl *v24;

  v24 = 0;
  v7 = WebCore::InspectorDOMAgent::nodeForId((WebCore::InspectorDOMAgent *)a1, a2);
  if (v7)
  {
    v9 = (WebCore::Node *)v7;
    v10 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v10 + 2;
    if (v10)
    {
      *(_DWORD *)(v7 + 24) = v10;
    }
    else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
    }
    v11 = *a3;
    *a3 = 0;
    v21 = v11;
    WebCore::InspectorDOMAgent::flexOverlayConfigFromInspectorObject((WTF::StringImpl *)v22, &v24, &v21);
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v11;
    }
    if (v23)
    {
      WebCore::InspectorOverlay::setFlexOverlayForNode(a1[9], v9, v22, &v19);
      if (v20)
      {
        v13 = v19;
        v19 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      *a4 = 0;
      a4[8] = 0;
      if (v23)
      {
        if ((v22[0] & 0x8000000000000) != 0)
        {
          v14 = (unsigned int *)(v22[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, v12);
          }
        }
      }
    }
    else
    {
      v17 = v24;
      if (v24)
        *(_DWORD *)v24 += 2;
      *(_QWORD *)a4 = v17;
      a4[8] = 1;
    }
    result = v24;
    if (v24)
    {
LABEL_22:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (WTF::StringImpl *)v22[0];
    if (v22[0])
      *(_DWORD *)v22[0] += 2;
    *(_QWORD *)a4 = result;
    a4[8] = 1;
    if (result)
      goto LABEL_22;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::showFlexOverlay@<X0>(uint64_t a1@<X0>, void *a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorDOMAgent::showFlexOverlay((uint64_t *)(a1 - 32), a2, a3, a4);
}

uint64_t WebCore::InspectorDOMAgent::hideFlexOverlay@<X0>(WebCore::InspectorOverlay **this@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  WebCore::Node *v7;
  int v8;
  WebCore::InspectorOverlay *v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;

  if (!a2[4])
  {
    result = WebCore::InspectorOverlay::clearAllFlexOverlays(this[9], a2);
    *a3 = 0;
    a3[8] = 0;
    return result;
  }
  v5 = WebCore::InspectorDOMAgent::nodeForId((WebCore::InspectorDOMAgent *)this, (void *)*(unsigned int *)a2);
  if (v5)
  {
    v7 = (WebCore::Node *)v5;
    v8 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v8 + 2;
    if (v8)
    {
      *(_DWORD *)(v5 + 24) = v8;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    v9 = this[9];
    if (WebCore::InspectorOverlay::removeFlexOverlayForNode(v9, v7))
    {
      if (*((_QWORD *)v9 + 2)
        || *((_QWORD *)v9 + 3)
        || *((_QWORD *)v9 + 16)
        || *((_DWORD *)v9 + 71)
        || *((_DWORD *)v9 + 75)
        || *((_BYTE *)v9 + 304)
        || *((_BYTE *)v9 + 305)
        || *((_BYTE *)v9 + 306))
      {
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v9 + 160) + 56))(*(_QWORD *)(*(_QWORD *)v9 + 160));
        if (!result)
        {
LABEL_17:
          v12 = 0;
          *a3 = 0;
LABEL_21:
          a3[8] = v12;
          return result;
        }
        v11 = 7;
      }
      else
      {
        v11 = 8;
      }
      result = (*(uint64_t (**)(void))(**((_QWORD **)v9 + 1) + 8 * v11))();
      goto LABEL_17;
    }
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_20:
    v12 = 1;
    goto LABEL_21;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = (uint64_t)v15;
  if (!v15)
  {
    *(_QWORD *)a3 = 0;
    goto LABEL_20;
  }
  v14 = *(_DWORD *)v15;
  *(_DWORD *)v15 += 2;
  *(_QWORD *)a3 = v15;
  a3[8] = 1;
  if (!v14)
    return WTF::StringImpl::destroy(v15, v13);
  *(_DWORD *)v15 = v14;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::hideFlexOverlay@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  return WebCore::InspectorDOMAgent::hideFlexOverlay((WebCore::InspectorOverlay **)(a1 - 32), a2, a3);
}

WebCore::Node *WebCore::InspectorDOMAgent::moveTo@<X0>(WebCore::InspectorDOMAgent *a1@<X0>, void *a2@<X1>, void *a3@<X2>, unsigned int *a4@<X3>, _DWORD *a5@<X8>)
{
  WebCore::Node *result;
  void *v10;
  WebCore::Node *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  BOOL v17;
  WTF::StringImpl *v18;
  WebCore::Node *v19;
  WTF::StringImpl *v20;

  v20 = 0;
  result = (WebCore::Node *)WebCore::InspectorDOMAgent::assertEditableNode(a1, &v20, a2);
  if (!result)
    goto LABEL_8;
  v11 = result;
  result = (WebCore::Node *)WebCore::InspectorDOMAgent::assertEditableElement(a1, &v20, a3);
  if (!result)
    goto LABEL_8;
  v12 = (uint64_t)result;
  if (!*((_BYTE *)a4 + 4) || (v13 = (void *)*a4, !(_DWORD)v13))
  {
    v14 = 0;
    goto LABEL_17;
  }
  result = (WebCore::Node *)WebCore::InspectorDOMAgent::assertEditableNode(a1, &v20, v13);
  if (!result)
  {
LABEL_8:
    v15 = v20;
    goto LABEL_9;
  }
  v14 = (uint64_t)result;
  if (*((_QWORD *)result + 4) != v12)
  {
    result = (WebCore::Node *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    a5[2] = 1;
    v15 = v20;
    goto LABEL_12;
  }
LABEL_17:
  v16 = (uint64_t *)*((_QWORD *)a1 + 29);
  *((_DWORD *)v11 + 6) += 2;
  v19 = v11;
  v17 = WebCore::DOMEditor::insertBefore(v16, v12, (uint64_t *)&v19, v14, &v20);
  result = v19;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(v19, v10);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  v15 = v20;
  if (v17)
  {
    if (v20)
      *(_DWORD *)v20 += 2;
    v18 = v15;
    *a5 = WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)a1, (WebCore::Node *)&v18, v11);
    a5[2] = 0;
    result = v18;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        result = (WebCore::Node *)WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v18 -= 2;
    }
    goto LABEL_12;
  }
LABEL_9:
  if (v15)
    *(_DWORD *)v15 += 2;
  *(_QWORD *)a5 = v15;
  a5[2] = 1;
LABEL_12:
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      return (WebCore::Node *)WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v15 -= 2;
  }
  return result;
}

WebCore::Node *`non-virtual thunk to'WebCore::InspectorDOMAgent::moveTo@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, unsigned int *a4@<X3>, _DWORD *a5@<X8>)
{
  return WebCore::InspectorDOMAgent::moveTo((WebCore::InspectorDOMAgent *)(a1 - 32), a2, a3, a4, a5);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::undo@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v11;
  uint64_t v12;

  result = (WTF::StringImpl *)WebCore::InspectorHistory::undo(this[28], &v9);
  if (v11)
  {
    v5 = v10;
    v10 = 0;
    if (v9 >= 0x20u)
      v6 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v6 = &(&WebCore::descriptions)[5 * v9];
    v7 = v6[1];
    if (v7)
    {
      v4 = (WTF::StringImpl *)(v7 - 1);
      if (v7 == (char *)1)
      {
        v8 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v8 = v12;
      }
    }
    else
    {
      v8 = 0;
    }
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  if (v11)
  {
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::undo@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::InspectorDOMAgent::undo(this - 4, a2);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::redo@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v11;
  uint64_t v12;

  result = (WTF::StringImpl *)WebCore::InspectorHistory::redo(this[28], &v9);
  if (v11)
  {
    v5 = v10;
    v10 = 0;
    if (v9 >= 0x20u)
      v6 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v6 = &(&WebCore::descriptions)[5 * v9];
    v7 = v6[1];
    if (v7)
    {
      v4 = (WTF::StringImpl *)(v7 - 1);
      if (v7 == (char *)1)
      {
        v8 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v8 = v12;
      }
    }
    else
    {
      v8 = 0;
    }
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  if (v11)
  {
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::redo@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::InspectorDOMAgent::redo(this - 4, a2);
}

uint64_t WebCore::InspectorDOMAgent::markUndoableState@<X0>(WebCore::InspectorDOMAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[8];
  WTF::StringImpl *v9;
  char v10;

  v3 = *((_QWORD *)this + 28);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E33EE700;
  v4[1] = 0;
  v7 = (uint64_t)v4;
  WebCore::InspectorHistory::perform(v3, (char *)&v7, (uint64_t)v8);
  if (v10 && v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *a2 = 0;
  a2[8] = 0;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::markUndoableState@<X0>(WebCore::InspectorDOMAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[8];
  WTF::StringImpl *v9;
  char v10;

  v3 = *((_QWORD *)this + 24);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E33EE700;
  v4[1] = 0;
  v7 = (uint64_t)v4;
  WebCore::InspectorHistory::perform(v3, (char *)&v7, (uint64_t)v8);
  if (v10 && v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *a2 = 0;
  a2[8] = 0;
  return result;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::focus@<X0>(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  int v10;
  __int16 v11;
  WTF::StringImpl *v12;

  v12 = 0;
  v4 = WebCore::InspectorDOMAgent::assertElement(this, &v12, a2);
  if (v4)
  {
    v6 = v4;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 552))(v4) & 1) != 0)
    {
      v11 = 0;
      v10 = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 656))(v6, &v10);
      v7 = 0;
      *a3 = 0;
      goto LABEL_9;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    v8 = v12;
    if (v12)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)a3 = v8;
  }
  v7 = 1;
LABEL_9:
  a3[8] = v7;
  result = v12;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::focus@<X0>(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  int v10;
  __int16 v11;
  WTF::StringImpl *v12;

  v12 = 0;
  v4 = WebCore::InspectorDOMAgent::assertElement((WebCore::InspectorDOMAgent *)((char *)this - 32), &v12, a2);
  if (v4)
  {
    v6 = v4;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 552))(v4) & 1) != 0)
    {
      v11 = 0;
      v10 = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 656))(v6, &v10);
      v7 = 0;
      *a3 = 0;
      goto LABEL_9;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    v8 = v12;
    if (v12)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)a3 = v8;
  }
  v7 = 1;
LABEL_9:
  a3[8] = v7;
  result = v12;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::setInspectedNode@<X0>(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;

  v5 = WebCore::InspectorDOMAgent::nodeForId(this, a2);
  if (v5)
  {
    v7 = v5;
    v8 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v8 + 2;
    if (v8)
    {
      *(_DWORD *)(v5 + 24) = v8;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    v9 = **(_QWORD **)(v7 + 40);
    if (v9)
      v10 = (*(_WORD *)(v9 + 28) & 0x80) == 0;
    else
      v10 = 1;
    if (!v10 && !*(_BYTE *)(v9 + 193) && !*((_BYTE *)this + 441))
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_24:
      a3[8] = 1;
      return result;
    }
    *(_DWORD *)(v7 + 24) += 2;
    result = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v7;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 5) + 48);
    if (v12)
    {
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)(v7 + 24) += 2;
      *v13 = &off_1E33EF990;
      v13[1] = v7;
      result = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(v12 + 16) = v13;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    }
    *((_BYTE *)this + 439) = 0;
    *a3 = 0;
    a3[8] = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (uint64_t)v16;
    if (!v16)
    {
      *(_QWORD *)a3 = 0;
      goto LABEL_24;
    }
    v15 = *(_DWORD *)v16;
    *(_DWORD *)v16 += 2;
    *(_QWORD *)a3 = v16;
    a3[8] = 1;
    if (v15)
      *(_DWORD *)v16 = v15;
    else
      return WTF::StringImpl::destroy(v16, v14);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::setInspectedNode@<X0>(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  return WebCore::InspectorDOMAgent::setInspectedNode((WebCore::InspectorDOMAgent *)((char *)this - 32), a2, a3);
}

void WebCore::InspectorDOMAgent::resolveNode(Inspector::InjectedScriptManager **this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  JSC::JSGlobalObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::WindowProxy *v14;
  WebCore::DOMWrapperWorld *v15;
  JSC::JSGlobalObject *v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  WebCore::WindowProxy *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  _QWORD *v25;

  v6 = WebCore::InspectorDOMAgent::nodeForId((WebCore::InspectorDOMAgent *)this, a2);
  if (v6)
  {
    v8 = (JSC::JSGlobalObject *)v6;
    v9 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v9 + 2;
    if (v9)
    {
      *(_DWORD *)(v6 + 24) = v9;
    }
    else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    }
    v10 = *(_QWORD *)(*((_QWORD *)v8 + 5) + 8);
    v11 = *(_QWORD *)(v10 + 2632);
    if (v11)
      v11 = *(_QWORD *)(v11 + 8);
    if (v11)
      v10 = v11;
    v12 = *(_QWORD *)(v10 + 528);
    if (!v12)
      goto LABEL_19;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      goto LABEL_19;
    v14 = *(WebCore::WindowProxy **)(v13 + 112);
    {
      v15 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    }
    else
    {
      v22 = *(WebCore::WindowProxy **)(v13 + 112);
      v21 = WebCore::g_commonVMOrNull;
      if (!WebCore::g_commonVMOrNull)
        v21 = WebCore::commonVMSlow(0);
      v15 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v21 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v15;
      v14 = v22;
    }
    v16 = (JSC::JSGlobalObject *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(v14, v15) + 2);
    Inspector::InjectedScriptManager::injectedScriptFor(this[5], v16);
    if (v25 && *v25)
    {
      WebCore::InspectorDOMAgent::nodeAsScriptValue(v16, v8, v17);
      Inspector::InjectedScript::wrapObject();
    }
    else
    {
      v23 = 0;
    }
    Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)&v24);
    if (v23)
    {
      *(_QWORD *)a3 = v23;
      *(_DWORD *)(a3 + 8) = 0;
    }
    else
    {
LABEL_19:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_DWORD *)(a3 + 8) = 1;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = v24;
    if (v24)
    {
      v20 = *(_DWORD *)v24;
      *(_DWORD *)v24 += 2;
      *(_QWORD *)a3 = v19;
      *(_DWORD *)(a3 + 8) = 1;
      if (v20)
        *(_DWORD *)v19 = v20;
      else
        WTF::StringImpl::destroy(v19, v18);
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 1;
    }
  }
}

void `non-virtual thunk to'WebCore::InspectorDOMAgent::resolveNode(Inspector::InjectedScriptManager **this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorDOMAgent::resolveNode(this - 4, a2, a3);
}

WTF::StringImpl *WebCore::InspectorDOMAgent::getAttributes@<X0>(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, WebCore::InspectorDOMAgent *a3@<X8>)
{
  WebCore::Element *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  v7 = 0;
  v4 = (WebCore::Element *)WebCore::InspectorDOMAgent::assertElement(this, &v7, a2);
  if (v4)
  {
    WebCore::InspectorDOMAgent::buildArrayForElementAttributes(a3, v4);
    *((_DWORD *)a3 + 2) = 0;
    result = v7;
    if (!v7)
      return result;
    goto LABEL_7;
  }
  result = v7;
  if (v7)
    *(_DWORD *)v7 += 2;
  *(_QWORD *)a3 = result;
  *((_DWORD *)a3 + 2) = 1;
  if (result)
  {
LABEL_7:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::buildArrayForElementAttributes(WebCore::InspectorDOMAgent *this, WebCore::Element *a2)
{
  WTF::JSONImpl::ArrayBase *v4;
  uint64_t result;
  unsigned __int8 *v6;
  uint64_t v7;
  WTF::String *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  BOOL v40;
  WTF::StringImpl *v41;
  uint64_t v42;

  v4 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  result = WTF::JSONImpl::ArrayBase::ArrayBase(v4);
  *(_QWORD *)this = result;
  v10 = *((_QWORD *)a2 + 13);
  if (!v10)
    return result;
  if ((*(_BYTE *)(v10 + 4) & 8) != 0)
    result = (uint64_t)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(a2, v6, v9, v7, v8);
  if ((*((_WORD *)a2 + 14) & 0x20) != 0)
    result = (uint64_t)WebCore::SVGElement::synchronizeAllAttributes(a2);
  v11 = *((_QWORD *)a2 + 13);
  if (!v11)
    return result;
  v12 = *(_DWORD *)(v11 + 4);
  if ((v12 & 1) != 0)
  {
    v14 = *(_DWORD *)(v11 + 52);
    if (!v14)
      return result;
    v13 = *(_QWORD *)(v11 + 40);
  }
  else
  {
    if (v12 < 0x20)
      return result;
    v13 = v11 + 32;
    v14 = v12 >> 5;
    if (!(v12 >> 5))
      return result;
  }
  v15 = 0;
  while (1)
  {
    v16 = *(_QWORD *)this;
    v17 = *(_QWORD *)(v13 + 16 * v15);
    v18 = *(WTF::StringImpl **)(v17 + 16);
    if (!v18)
    {
      v19 = *(WTF::StringImpl **)(v17 + 24);
      if (v19)
        *(_DWORD *)v19 += 2;
      v41 = v19;
      goto LABEL_18;
    }
    *(_DWORD *)v18 += 2;
    v33 = *(_QWORD *)(v17 + 24);
    if (v33)
    {
      v34 = *(_DWORD *)(v33 + 4);
      *(_DWORD *)v33 += 2;
      if (v34 < 0)
        break;
    }
    else
    {
      v34 = 0;
    }
    v35 = *((_DWORD *)v18 + 1);
    v36 = __OFADD__(v34, 1);
    v37 = v34 + 1;
    v38 = v36;
    if (v35 < 0)
      break;
    if (v38)
      break;
    result = (v35 + v37);
    if (__OFADD__(v35, v37))
      break;
    v39 = *((_DWORD *)v18 + 4);
    if (v33)
      v40 = (*((_DWORD *)v18 + 4) & 4) == 0;
    else
      v40 = 1;
    if (!v40)
      v39 = *(unsigned __int8 *)(v33 + 16);
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, (v39 >> 2) & 1, (uint64_t)v18, 58, v33, &v41);
    if (!v41)
      goto LABEL_62;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v33, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v33 -= 2;
    }
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v18 -= 2;
LABEL_18:
    v20 = (uint64_t *)(v16 + 16);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v41, (const WTF::String *)v6);
    v22 = *(unsigned int *)(v16 + 28);
    if ((_DWORD)v22 == *(_DWORD *)(v16 + 24))
    {
      v23 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v16 + 16), v22 + 1, (unint64_t)&v42);
      v22 = *(unsigned int *)(v16 + 28);
      v24 = *(_QWORD *)(v16 + 16);
      v25 = *(_QWORD *)v23;
      *(_QWORD *)v23 = 0;
    }
    else
    {
      v24 = *v20;
      v25 = v42;
      v42 = 0;
    }
    *(_QWORD *)(v24 + 8 * v22) = v25;
    *(_DWORD *)(v16 + 28) = v22 + 1;
    v26 = (_DWORD *)v42;
    v42 = 0;
    if (v26)
    {
      if (*v26 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v26;
    }
    v27 = v41;
    v41 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v21);
      else
        *(_DWORD *)v27 -= 2;
    }
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v13 + 16 * v15 + 8), v21);
    v28 = *(unsigned int *)(v16 + 28);
    if ((_DWORD)v28 == *(_DWORD *)(v16 + 24))
    {
      v29 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v16 + 16), v28 + 1, (unint64_t)&v42);
      v28 = *(unsigned int *)(v16 + 28);
      v30 = *(_QWORD *)(v16 + 16);
      v31 = *(_QWORD *)v29;
      *(_QWORD *)v29 = 0;
    }
    else
    {
      v30 = *v20;
      v31 = v42;
      v42 = 0;
    }
    *(_QWORD *)(v30 + 8 * v28) = v31;
    *(_DWORD *)(v16 + 28) = v28 + 1;
    result = v42;
    v42 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
    v32 = v15 + 1;
    v15 = (v15 + 1);
    if (v14 == v32)
      return result;
  }
  v41 = 0;
LABEL_62:
  __break(0xC471u);
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::getAttributes@<X0>(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, WebCore::InspectorDOMAgent *a3@<X8>)
{
  WebCore::Element *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  v7 = 0;
  v4 = (WebCore::Element *)WebCore::InspectorDOMAgent::assertElement((WebCore::InspectorDOMAgent *)((char *)this - 32), &v7, a2);
  if (v4)
  {
    WebCore::InspectorDOMAgent::buildArrayForElementAttributes(a3, v4);
    *((_DWORD *)a3 + 2) = 0;
    result = v7;
    if (!v7)
      return result;
    goto LABEL_7;
  }
  result = v7;
  if (v7)
    *(_DWORD *)v7 += 2;
  *(_QWORD *)a3 = result;
  *((_DWORD *)a3 + 2) = 1;
  if (result)
  {
LABEL_7:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::requestNode@<X0>(WebCore::InspectorDOMAgent **this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorDOMAgent *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t result;
  WTF::StringImpl *v9;

  v5 = (WebCore::InspectorDOMAgent *)WebCore::InspectorDOMAgent::nodeForObjectId(this[5], a2);
  if (v5)
  {
    v9 = 0;
    v7 = WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)this, (WebCore::Node *)&v9, v5);
    result = (uint64_t)v9;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        result = WTF::StringImpl::destroy(v9, v6);
        if (v7)
          goto LABEL_6;
LABEL_9:
        *(_QWORD *)a3 = 0;
        goto LABEL_10;
      }
      *(_DWORD *)v9 -= 2;
    }
    if (v7)
    {
LABEL_6:
      *(_DWORD *)a3 = v7;
      *(_DWORD *)(a3 + 8) = 0;
      return result;
    }
    goto LABEL_9;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_10:
  *(_DWORD *)(a3 + 8) = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::requestNode@<X0>(WebCore::InspectorDOMAgent **this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorDOMAgent *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t result;
  WTF::StringImpl *v9;

  v5 = (WebCore::InspectorDOMAgent *)WebCore::InspectorDOMAgent::nodeForObjectId(this[1], a2);
  if (v5)
  {
    v9 = 0;
    v7 = WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)(this - 4), (WebCore::Node *)&v9, v5);
    result = (uint64_t)v9;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        result = WTF::StringImpl::destroy(v9, v6);
        if (v7)
          goto LABEL_6;
LABEL_9:
        *(_QWORD *)a3 = 0;
        goto LABEL_10;
      }
      *(_DWORD *)v9 -= 2;
    }
    if (v7)
    {
LABEL_6:
      *(_DWORD *)a3 = v7;
      *(_DWORD *)(a3 + 8) = 0;
      return result;
    }
    goto LABEL_9;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_10:
  *(_DWORD *)(a3 + 8) = 1;
  return result;
}

WTF::StringImpl *Inspector::Protocol::DOM::Node::setFrameId(Inspector::Protocol::DOM::Node *this, const WTF::String *a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _BYTE v17[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, &v15, (const WTF::StringImpl *)&v16, (uint64_t)v17);
  if (v17[16])
  {
    v6 = (uint64_t *)((char *)this + 24);
    v7 = *((unsigned int *)this + 9);
    if ((_DWORD)v7 == *((_DWORD *)this + 8))
    {
      v12 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v15);
      v7 = *((unsigned int *)this + 9);
      v13 = *((_QWORD *)this + 3);
      v14 = *v12;
      if (*v12)
        *v14 += 2;
      *(_QWORD *)(v13 + 8 * v7) = v14;
    }
    else
    {
      v8 = *v6;
      v9 = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)this + 9) = v7 + 1;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::processAccessibilityChildren(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  WebCore::InspectorDOMAgent *v9;
  WTF::StringImpl *v10;
  WTF::JSONImpl::Value *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 1896))(a2, 1);
  v6 = *(unsigned int *)(result + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      v9 = (WebCore::InspectorDOMAgent *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 840))(*v7);
      if (v9)
      {
        v16 = 0;
        v11 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodePathToFrontend(a1, (WebCore::Node *)&v16, v9);
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v10);
          else
            *(_DWORD *)v16 -= 2;
        }
        WTF::JSONImpl::Value::create(v11);
        v12 = *(unsigned int *)(a3 + 28);
        if ((_DWORD)v12 == *(_DWORD *)(a3 + 24))
        {
          v13 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 16), v12 + 1, (unint64_t)&v16);
          v12 = *(unsigned int *)(a3 + 28);
          v14 = *(_QWORD *)(a3 + 16);
          v15 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
        }
        else
        {
          v14 = *(_QWORD *)(a3 + 16);
          v15 = v16;
          v16 = 0;
        }
        *(_QWORD *)(v14 + 8 * v12) = v15;
        *(_DWORD *)(a3 + 28) = v12 + 1;
        result = (uint64_t)v16;
        v16 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)result;
        }
      }
      else
      {
        result = WebCore::InspectorDOMAgent::processAccessibilityChildren(a1, *v7, a3);
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::didCommitLoad(WebCore::InspectorDOMAgent *this, WebCore::Document *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int i;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int j;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  int k;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;

  v4 = *((_QWORD *)this + 18);
  if (v4 && *(WebCore::Document **)(*(_QWORD *)(v4 + 40) + 8) == a2)
  {
    *((_QWORD *)this + 18) = 0;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 19);
  if (v5 && *(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8) == a2)
  {
    *((_QWORD *)this + 19) = 0;
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 20);
  if (result && *(WebCore::Document **)(*((_QWORD *)result + 5) + 8) == a2)
  {
    *((_QWORD *)this + 20) = 0;
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  v7 = *((_QWORD *)a2 + 66);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 120);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_DWORD *)(v10 + 24);
          v12 = v11 + 2;
          *(_DWORD *)(v10 + 24) = v11 + 2;
          ++*((_DWORD *)this + 22);
          v13 = *(_QWORD *)(v10 + 16);
          v14 = v13 & 0xFFFFFFFFFFFFLL;
          if ((v13 & 0xFFFFFFFFFFFFLL) == 0)
            goto LABEL_87;
          if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 8))
            goto LABEL_87;
          v15 = *((_QWORD *)this + 10);
          if (!v15)
            goto LABEL_87;
          v16 = *(_DWORD *)(v15 - 8);
          v17 = (v14 + ~(v13 << 32)) ^ ((unint64_t)(v14 + ~(v13 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          for (i = 1; ; v20 = (v22 + i++) & v16)
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            if (v23 != -1)
            {
              if (!v23)
                goto LABEL_87;
              if (v23 == v14)
                break;
            }
          }
          if (!*(_DWORD *)(v15 + 16 * v22 + 8))
            goto LABEL_87;
          v24 = *(_WORD *)(v10 + 28);
          if ((v24 & 0xF000) == 0x9000)
          {
            *(_DWORD *)(v10 + 24) = v11 + 4;
            v25 = *(_QWORD *)(v10 + 528);
            if (v25 && (v26 = *(_QWORD *)(v25 + 8)) != 0 && (v27 = *(_QWORD *)(v26 + 120)) != 0)
            {
              v28 = *(_QWORD *)(v27 + 8);
              if (v12)
                goto LABEL_31;
            }
            else
            {
              v28 = 0;
              if (v12)
                goto LABEL_31;
            }
          }
          else
          {
            if ((v24 & 0x80) == 0)
            {
              v28 = *(_QWORD *)(v10 + 32);
LABEL_32:
              if (v28)
              {
                ++*((_DWORD *)this + 22);
                v29 = *(_QWORD *)(v28 + 16);
                v30 = v29 & 0xFFFFFFFFFFFFLL;
                if ((v29 & 0xFFFFFFFFFFFFLL) != 0)
                {
                  if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 8))
                  {
                    v31 = *((_QWORD *)this + 10);
                    if (v31)
                    {
                      v32 = *(_DWORD *)(v31 - 8);
                      v33 = (v30 + ~(v29 << 32)) ^ ((unint64_t)(v30 + ~(v29 << 32)) >> 22);
                      v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
                      v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
                      v36 = v32 & ((v35 >> 31) ^ v35);
                      for (j = 1; ; ++j)
                      {
                        v38 = v36;
                        v39 = *(_QWORD *)(v31 + 16 * v36);
                        if (v39 != -1 && (!v39 || v39 == v30))
                          break;
                        v36 = (v38 + j) & v32;
                      }
                    }
                  }
                }
              }
              Inspector::DOMFrontendDispatcher::childNodeRemoved(*((Inspector::DOMFrontendDispatcher **)this + 6));
              WebCore::InspectorDOMAgent::unbind(this, (WebCore::Node *)v10);
              WebCore::InspectorDOMAgent::buildObjectForNode(&v65, this, (WebCore::Node *)v10, 0);
              v40 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFLL;
              if (v40)
              {
                while ((*(_WORD *)(v40 + 28) & 2) != 0)
                {
                  v41 = *(_WORD *)(v40 + 30);
                  if ((v41 & 0x100) != 0)
                  {
                    if ((v41 & 0x80) == 0)
                      break;
                  }
                  else
                  {
                    v42 = *(_QWORD *)(v40 + 80);
                    if (v42)
                    {
                      v43 = *(unsigned __int8 **)(v42 + 8);
                      v44 = *(unsigned int *)(v42 + 4);
                      if ((*(_BYTE *)(v42 + 16) & 4) != 0)
                      {
                        if ((_DWORD)v44)
                        {
                          while (1)
                          {
                            v45 = *v43;
                            v46 = v45 > 0x20;
                            v47 = (1 << v45) & 0x100003600;
                            if (v46 || v47 == 0)
                              break;
                            ++v43;
                            if (!--v44)
                              goto LABEL_63;
                          }
LABEL_74:
                          *(_WORD *)(v40 + 30) = v41 & 0xFE7F | 0x100;
                          break;
                        }
                      }
                      else if ((_DWORD)v44)
                      {
                        v49 = 2 * v44;
                        do
                        {
                          v50 = *(unsigned __int16 *)v43;
                          v46 = v50 > 0x20;
                          v51 = (1 << v50) & 0x100003600;
                          if (v46 || v51 == 0)
                            goto LABEL_74;
                          v43 += 2;
                          v49 -= 2;
                        }
                        while (v49);
                      }
                    }
LABEL_63:
                    *(_WORD *)(v40 + 30) = v41 | 0x180;
                  }
                  v40 = *(_QWORD *)(v40 + 48) & 0xFFFFFFFFFFFFLL;
                  if (!v40)
                    goto LABEL_83;
                }
                ++*((_DWORD *)this + 22);
                v53 = *(_QWORD *)(v40 + 16);
                v54 = v53 & 0xFFFFFFFFFFFFLL;
                if ((v53 & 0xFFFFFFFFFFFFLL) != 0)
                {
                  if (*(_QWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 8))
                  {
                    v55 = *((_QWORD *)this + 10);
                    if (v55)
                    {
                      v56 = *(_DWORD *)(v55 - 8);
                      v57 = (v54 + ~(v53 << 32)) ^ ((unint64_t)(v54 + ~(v53 << 32)) >> 22);
                      v58 = 9 * ((v57 + ~(v57 << 13)) ^ ((v57 + ~(v57 << 13)) >> 8));
                      v59 = (v58 ^ (v58 >> 15)) + ~((v58 ^ (v58 >> 15)) << 27);
                      v60 = v56 & ((v59 >> 31) ^ v59);
                      for (k = 1; ; ++k)
                      {
                        v62 = v60;
                        v63 = *(_QWORD *)(v55 + 16 * v60);
                        if (v63 != -1 && (!v63 || v63 == v54))
                          break;
                        v60 = (v62 + k) & v56;
                      }
                    }
                  }
                }
              }
LABEL_83:
              Inspector::DOMFrontendDispatcher::childNodeInserted();
              result = v65;
              v65 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 1)
                  result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)result;
              }
              v11 = *(_DWORD *)(v10 + 24) - 2;
LABEL_87:
              if (v11)
              {
                *(_DWORD *)(v10 + 24) = v11;
              }
              else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              {
                return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v10);
              }
              return result;
            }
            *(_DWORD *)(v10 + 24) = v11 + 4;
            v64 = *(_QWORD *)(v10 + 200);
            if (v64)
              v28 = *(_QWORD *)(v64 + 8);
            else
              v28 = 0;
            if (v12)
            {
LABEL_31:
              *(_DWORD *)(v10 + 24) = v12;
              goto LABEL_32;
            }
          }
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10);
          goto LABEL_32;
        }
      }
    }
  }
  return result;
}

uint64_t *WebCore::InspectorDOMAgent::didInsertDOMNode(uint64_t *this, WebCore::Node *a2)
{
  uint64_t *v3;
  __int16 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  Inspector::DOMFrontendDispatcher *v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  int j;
  unsigned int v84;
  uint64_t v85;
  uint64_t *v86;

  v3 = this;
  if ((*((_WORD *)a2 + 14) & 2) == 0)
    goto LABEL_4;
  v4 = *((_WORD *)a2 + 15);
  if ((v4 & 0x100) == 0)
  {
    v18 = *((_QWORD *)a2 + 10);
    if (v18)
    {
      v19 = *(unsigned __int8 **)(v18 + 8);
      v20 = *(unsigned int *)(v18 + 4);
      if ((*(_BYTE *)(v18 + 16) & 4) != 0)
      {
        if ((_DWORD)v20)
        {
          while (1)
          {
            v21 = *v19;
            v22 = v21 > 0x20;
            v23 = (1 << v21) & 0x100003600;
            if (v22 || v23 == 0)
              break;
            ++v19;
            if (!--v20)
              goto LABEL_83;
          }
LABEL_85:
          *((_WORD *)a2 + 15) = v4 & 0xFE7F | 0x100;
          goto LABEL_4;
        }
      }
      else if ((_DWORD)v20)
      {
        v58 = 2 * v20;
        do
        {
          v59 = *(unsigned __int16 *)v19;
          v22 = v59 > 0x20;
          v60 = (1 << v59) & 0x100003600;
          if (v22 || v60 == 0)
            goto LABEL_85;
          v19 += 2;
          v58 -= 2;
        }
        while (v58);
      }
    }
LABEL_83:
    *((_WORD *)a2 + 15) = v4 | 0x180;
    return this;
  }
  if ((v4 & 0x80) != 0)
    return this;
LABEL_4:
  this = WebCore::InspectorDOMAgent::unbind((WebCore::InspectorDOMAgent *)this, a2);
  v5 = *((_QWORD *)a2 + 4);
  if (v5)
  {
    v6 = *((_DWORD *)v3 + 22);
    *((_DWORD *)v3 + 22) = v6 + 1;
    v7 = *(_QWORD *)(v5 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFLL;
    if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 8))
      {
        v9 = v3[10];
        if (v9)
        {
          v10 = *(_DWORD *)(v9 - 8);
          v11 = (v8 + ~(v7 << 32)) ^ ((unint64_t)(v8 + ~(v7 << 32)) >> 22);
          v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
          v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
          v14 = v10 & ((v13 >> 31) ^ v13);
          for (i = 1; ; ++i)
          {
            v16 = v14;
            v17 = *(_QWORD *)(v9 + 16 * v14);
            if (v17 != -1)
            {
              if (!v17)
                return this;
              if (v17 == v8)
                break;
            }
            v14 = (v16 + i) & v10;
          }
          v25 = *(_DWORD *)(v9 + 16 * v16 + 8);
          if (v25)
          {
            v26 = v3[13];
            if (v26)
            {
              v27 = *(_DWORD *)(v26 - 8);
              v28 = 9 * ((v25 + ~(v25 << 15)) ^ ((v25 + ~(v25 << 15)) >> 10));
              v29 = (v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11);
              v30 = v27 & (v29 ^ HIWORD(v29));
              v31 = *(_DWORD *)(v26 + 4 * v30);
              if (v31 == v25)
              {
LABEL_28:
                v33 = *((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL;
                if (v33)
                {
                  while ((*(_WORD *)(v33 + 28) & 2) != 0)
                  {
                    v34 = *(_WORD *)(v33 + 30);
                    if ((v34 & 0x100) != 0)
                    {
                      if ((v34 & 0x80) == 0)
                        break;
                    }
                    else
                    {
                      v35 = *(_QWORD *)(v33 + 80);
                      if (v35)
                      {
                        v36 = *(unsigned __int8 **)(v35 + 8);
                        v37 = *(unsigned int *)(v35 + 4);
                        if ((*(_BYTE *)(v35 + 16) & 4) != 0)
                        {
                          if ((_DWORD)v37)
                          {
                            while (1)
                            {
                              v38 = *v36;
                              v22 = v38 > 0x20;
                              v39 = (1 << v38) & 0x100003600;
                              if (v22 || v39 == 0)
                                break;
                              ++v36;
                              if (!--v37)
                                goto LABEL_50;
                            }
LABEL_114:
                            *(_WORD *)(v33 + 30) = v34 & 0xFE7F | 0x100;
                            break;
                          }
                        }
                        else if ((_DWORD)v37)
                        {
                          v41 = 2 * v37;
                          do
                          {
                            v42 = *(unsigned __int16 *)v36;
                            v22 = v42 > 0x20;
                            v43 = (1 << v42) & 0x100003600;
                            if (v22 || v43 == 0)
                              goto LABEL_114;
                            v36 += 2;
                            v41 -= 2;
                          }
                          while (v41);
                        }
                      }
LABEL_50:
                      *(_WORD *)(v33 + 30) = v34 | 0x180;
                    }
                    v33 = *(_QWORD *)(v33 + 48) & 0xFFFFFFFFFFFFLL;
                    if (!v33)
                      goto LABEL_123;
                  }
                  *((_DWORD *)v3 + 22) = v6 + 2;
                  v75 = *(_QWORD *)(v33 + 16);
                  v76 = v75 & 0xFFFFFFFFFFFFLL;
                  if ((v75 & 0xFFFFFFFFFFFFLL) != 0)
                  {
                    if (*(_QWORD *)((v75 & 0xFFFFFFFFFFFFLL) + 8))
                    {
                      v77 = v3[10];
                      if (v77)
                      {
                        v78 = *(_DWORD *)(v77 - 8);
                        v79 = (v76 + ~(v75 << 32)) ^ ((unint64_t)(v76 + ~(v75 << 32)) >> 22);
                        v80 = 9 * ((v79 + ~(v79 << 13)) ^ ((v79 + ~(v79 << 13)) >> 8));
                        v81 = (v80 ^ (v80 >> 15)) + ~((v80 ^ (v80 >> 15)) << 27);
                        v82 = v78 & ((v81 >> 31) ^ v81);
                        for (j = 1; ; ++j)
                        {
                          v84 = v82;
                          v85 = *(_QWORD *)(v77 + 16 * v82);
                          if (v85 != -1 && (!v85 || v85 == v76))
                            break;
                          v82 = (v84 + j) & v78;
                        }
                      }
                    }
                  }
                }
LABEL_123:
                WebCore::InspectorDOMAgent::buildObjectForNode((uint64_t *)&v86, (WebCore::InspectorDOMAgent *)v3, a2, 0);
                Inspector::DOMFrontendDispatcher::childNodeInserted();
                this = v86;
                v86 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 1)
                    return (uint64_t *)WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)this;
                }
                return this;
              }
              v32 = 1;
              while (v31)
              {
                v30 = (v30 + v32) & v27;
                v31 = *(_DWORD *)(v26 + 4 * v30);
                ++v32;
                if (v31 == v25)
                  goto LABEL_28;
              }
            }
            v45 = (Inspector::DOMFrontendDispatcher *)v3[6];
            if ((*(_WORD *)(v5 + 28) & 4) != 0)
            {
              v46 = *(_QWORD *)(v5 + 80);
              if (v46)
              {
                while ((*(_WORD *)(v46 + 28) & 2) != 0)
                {
                  v47 = *(_WORD *)(v46 + 30);
                  if ((v47 & 0x100) != 0)
                  {
                    if ((v47 & 0x80) == 0)
                      break;
                  }
                  else
                  {
                    v48 = *(_QWORD *)(v46 + 80);
                    if (v48)
                    {
                      v49 = *(unsigned __int8 **)(v48 + 8);
                      v50 = *(unsigned int *)(v48 + 4);
                      if ((*(_BYTE *)(v48 + 16) & 4) != 0)
                      {
                        if ((_DWORD)v50)
                        {
                          while (1)
                          {
                            v51 = *v49;
                            v22 = v51 > 0x20;
                            v52 = (1 << v51) & 0x100003600;
                            if (v22 || v52 == 0)
                              break;
                            ++v49;
                            if (!--v50)
                              goto LABEL_74;
                          }
LABEL_86:
                          *(_WORD *)(v46 + 30) = v47 & 0xFE7F | 0x100;
                          break;
                        }
                      }
                      else if ((_DWORD)v50)
                      {
                        v54 = 2 * v50;
                        do
                        {
                          v55 = *(unsigned __int16 *)v49;
                          v22 = v55 > 0x20;
                          v56 = (1 << v55) & 0x100003600;
                          if (v22 || v56 == 0)
                            goto LABEL_86;
                          v49 += 2;
                          v54 -= 2;
                        }
                        while (v54);
                      }
                    }
LABEL_74:
                    *(_WORD *)(v46 + 30) = v47 | 0x180;
                  }
                  v46 = *(_QWORD *)(v46 + 56);
                  if (!v46)
                    return (uint64_t *)Inspector::DOMFrontendDispatcher::childNodeCountUpdated(v45);
                }
                v62 = *(_QWORD *)(v46 + 56);
                if (v62)
                {
                  v63 = 1;
                  do
                  {
                    if ((*(_WORD *)(v62 + 28) & 2) == 0)
                      goto LABEL_112;
                    v64 = *(_WORD *)(v62 + 30);
                    if ((v64 & 0x100) != 0)
                    {
                      if ((v64 & 0x80) == 0)
                        goto LABEL_112;
                    }
                    else
                    {
                      v65 = *(_QWORD *)(v62 + 80);
                      if (v65)
                      {
                        v66 = *(unsigned __int8 **)(v65 + 8);
                        v67 = *(unsigned int *)(v65 + 4);
                        if ((*(_BYTE *)(v65 + 16) & 4) != 0)
                        {
                          if ((_DWORD)v67)
                          {
                            while (1)
                            {
                              v68 = *v66;
                              v22 = v68 > 0x20;
                              v69 = (1 << v68) & 0x100003600;
                              if (v22 || v69 == 0)
                                break;
                              ++v66;
                              if (!--v67)
                                goto LABEL_110;
                            }
LABEL_111:
                            *(_WORD *)(v62 + 30) = v64 & 0xFE7F | 0x100;
LABEL_112:
                            ++v63;
                            goto LABEL_92;
                          }
                        }
                        else if ((_DWORD)v67)
                        {
                          v71 = 2 * v67;
                          do
                          {
                            v72 = *(unsigned __int16 *)v66;
                            v22 = v72 > 0x20;
                            v73 = (1 << v72) & 0x100003600;
                            if (v22 || v73 == 0)
                              goto LABEL_111;
                            v66 += 2;
                            v71 -= 2;
                          }
                          while (v71);
                        }
                      }
LABEL_110:
                      *(_WORD *)(v62 + 30) = v64 | 0x180;
                    }
LABEL_92:
                    v62 = *(_QWORD *)(v62 + 56);
                  }
                  while (v62);
                }
              }
            }
            return (uint64_t *)Inspector::DOMFrontendDispatcher::childNodeCountUpdated(v45);
          }
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::InspectorDOMAgent::didRemoveDOMNode(uint64_t *this, WebCore::Node *a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  Inspector::DOMFrontendDispatcher *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int j;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;

  v3 = (uint64_t)this;
  if ((*((_WORD *)a2 + 14) & 2) == 0)
    goto LABEL_4;
  v4 = *((_WORD *)a2 + 15);
  if ((v4 & 0x100) != 0)
  {
    if ((v4 & 0x80) != 0)
      return this;
    goto LABEL_4;
  }
  v18 = *((_QWORD *)a2 + 10);
  if (!v18)
    goto LABEL_66;
  v19 = *(unsigned __int16 **)(v18 + 8);
  v20 = *(unsigned int *)(v18 + 4);
  if ((*(_BYTE *)(v18 + 16) & 4) == 0)
  {
    if ((_DWORD)v20)
    {
      v56 = 2 * v20;
      do
      {
        v57 = *v19;
        v22 = v57 > 0x20;
        v58 = (1 << v57) & 0x100003600;
        if (v22 || v58 == 0)
          goto LABEL_70;
        ++v19;
        v56 -= 2;
      }
      while (v56);
    }
LABEL_66:
    *((_WORD *)a2 + 15) = v4 | 0x180;
    return this;
  }
  if (!(_DWORD)v20)
    goto LABEL_66;
  while (1)
  {
    v21 = *(unsigned __int8 *)v19;
    v22 = v21 > 0x20;
    v23 = (1 << v21) & 0x100003600;
    if (v22 || v23 == 0)
      break;
    v19 = (unsigned __int16 *)((char *)v19 + 1);
    if (!--v20)
      goto LABEL_66;
  }
LABEL_70:
  *((_WORD *)a2 + 15) = v4 & 0xFE7F | 0x100;
LABEL_4:
  v5 = *((_QWORD *)a2 + 4);
  if (v5)
  {
    v6 = *((_DWORD *)this + 22);
    *((_DWORD *)this + 22) = v6 + 1;
    v7 = *(_QWORD *)(v5 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFLL;
    if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 8))
      {
        v9 = this[10];
        if (v9)
        {
          v10 = *(_DWORD *)(v9 - 8);
          v11 = (v8 + ~(v7 << 32)) ^ ((unint64_t)(v8 + ~(v7 << 32)) >> 22);
          v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
          v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
          v14 = v10 & ((v13 >> 31) ^ v13);
          for (i = 1; ; ++i)
          {
            v16 = v14;
            v17 = *(_QWORD *)(v9 + 16 * v14);
            if (v17 != -1)
            {
              if (!v17)
                return this;
              if (v17 == v8)
                break;
            }
            v14 = (v16 + i) & v10;
          }
          v25 = *(_DWORD *)(v9 + 16 * v16 + 8);
          if (v25)
          {
            v26 = this[13];
            if (v26)
            {
              v27 = *(_DWORD *)(v26 - 8);
              v28 = 9 * ((v25 + ~(v25 << 15)) ^ ((v25 + ~(v25 << 15)) >> 10));
              v29 = (v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11);
              v30 = v27 & (v29 ^ HIWORD(v29));
              v31 = *(_DWORD *)(v26 + 4 * v30);
              if (v31 == v25)
              {
LABEL_28:
                v33 = (Inspector::DOMFrontendDispatcher *)this[6];
                *(_DWORD *)(v3 + 88) = v6 + 2;
                v34 = *((_QWORD *)a2 + 2);
                v35 = v34 & 0xFFFFFFFFFFFFLL;
                if ((v34 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v34 & 0xFFFFFFFFFFFFLL) + 8))
                {
                  v36 = *(_DWORD *)(v9 - 8);
                  v37 = (v35 + ~(v34 << 32)) ^ ((unint64_t)(v35 + ~(v34 << 32)) >> 22);
                  v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
                  v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
                  v40 = v36 & ((v39 >> 31) ^ v39);
                  for (j = 1; ; ++j)
                  {
                    v42 = v40;
                    v43 = *(_QWORD *)(v9 + 16 * v40);
                    if (v43 != -1 && (!v43 || v43 == v35))
                      break;
                    v40 = (v42 + j) & v36;
                  }
                }
                Inspector::DOMFrontendDispatcher::childNodeRemoved(v33);
                return WebCore::InspectorDOMAgent::unbind((WebCore::InspectorDOMAgent *)v3, a2);
              }
              v32 = 1;
              while (v31)
              {
                v30 = (v30 + v32) & v27;
                v31 = *(_DWORD *)(v26 + 4 * v30);
                ++v32;
                if (v31 == v25)
                  goto LABEL_28;
              }
            }
            if ((*(_WORD *)(v5 + 28) & 4) != 0)
            {
              v44 = *(_QWORD *)(v5 + 80);
              if (v44)
              {
                while ((*(_WORD *)(v44 + 28) & 2) != 0)
                {
                  v45 = *(_WORD *)(v44 + 30);
                  if ((v45 & 0x100) != 0)
                  {
                    if ((v45 & 0x80) == 0)
                      break;
                  }
                  else
                  {
                    v46 = *(_QWORD *)(v44 + 80);
                    if (v46)
                    {
                      v47 = *(unsigned __int8 **)(v46 + 8);
                      v48 = *(unsigned int *)(v46 + 4);
                      if ((*(_BYTE *)(v46 + 16) & 4) != 0)
                      {
                        if ((_DWORD)v48)
                        {
                          while (1)
                          {
                            v49 = *v47;
                            v22 = v49 > 0x20;
                            v50 = (1 << v49) & 0x100003600;
                            if (v22 || v50 == 0)
                              break;
                            ++v47;
                            if (!--v48)
                              goto LABEL_58;
                          }
LABEL_72:
                          *(_WORD *)(v44 + 30) = v45 & 0xFE7F | 0x100;
                          break;
                        }
                      }
                      else if ((_DWORD)v48)
                      {
                        v52 = 2 * v48;
                        do
                        {
                          v53 = *(unsigned __int16 *)v47;
                          v22 = v53 > 0x20;
                          v54 = (1 << v53) & 0x100003600;
                          if (v22 || v54 == 0)
                            goto LABEL_72;
                          v47 += 2;
                          v52 -= 2;
                        }
                        while (v52);
                      }
                    }
LABEL_58:
                    *(_WORD *)(v44 + 30) = v45 | 0x180;
                  }
                  v44 = *(_QWORD *)(v44 + 56);
                  if (!v44)
                    return WebCore::InspectorDOMAgent::unbind((WebCore::InspectorDOMAgent *)v3, a2);
                }
                v60 = *(_QWORD *)(v44 + 56);
                if (!v60)
                  goto LABEL_101;
                v61 = 0;
                v62 = 1;
                do
                {
                  v63 = v61;
                  v61 = v62;
                  while ((*(_WORD *)(v60 + 28) & 2) != 0)
                  {
                    v64 = *(_WORD *)(v60 + 30);
                    if ((v64 & 0x100) != 0)
                    {
                      if ((v64 & 0x80) == 0)
                        break;
                    }
                    else
                    {
                      v65 = *(_QWORD *)(v60 + 80);
                      if (v65)
                      {
                        v66 = *(unsigned __int8 **)(v65 + 8);
                        v67 = *(unsigned int *)(v65 + 4);
                        if ((*(_BYTE *)(v65 + 16) & 4) != 0)
                        {
                          if ((_DWORD)v67)
                          {
                            while (1)
                            {
                              v68 = *v66;
                              v22 = v68 > 0x20;
                              v69 = (1 << v68) & 0x100003600;
                              if (v22 || v69 == 0)
                                break;
                              ++v66;
                              if (!--v67)
                                goto LABEL_97;
                            }
LABEL_98:
                            *(_WORD *)(v60 + 30) = v64 & 0xFE7F | 0x100;
                            break;
                          }
                        }
                        else if ((_DWORD)v67)
                        {
                          v71 = 2 * v67;
                          do
                          {
                            v72 = *(unsigned __int16 *)v66;
                            v22 = v72 > 0x20;
                            v73 = (1 << v72) & 0x100003600;
                            if (v22 || v73 == 0)
                              goto LABEL_98;
                            v66 += 2;
                            v71 -= 2;
                          }
                          while (v71);
                        }
                      }
LABEL_97:
                      *(_WORD *)(v60 + 30) = v64 | 0x180;
                    }
                    v60 = *(_QWORD *)(v60 + 56);
                    if (!v60)
                    {
                      v61 = v63;
                      goto LABEL_100;
                    }
                  }
                  v62 = v61 + 1;
                  v60 = *(_QWORD *)(v60 + 56);
                }
                while (v60);
LABEL_100:
                if (!v61)
LABEL_101:
                  Inspector::DOMFrontendDispatcher::childNodeCountUpdated(*(Inspector::DOMFrontendDispatcher **)(v3 + 48));
              }
            }
            return WebCore::InspectorDOMAgent::unbind((WebCore::InspectorDOMAgent *)v3, a2);
          }
        }
      }
    }
  }
  return this;
}

double WebCore::InspectorDOMAgent::willDestroyDOMNode(WebCore::InspectorDOMAgent *this, WebCore::Node *a2)
{
  __int16 v4;
  uint64_t *v5;
  uint64_t v6;
  double result;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  WebCore::InspectorCSSAgent *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v58;
  int v59;

  if ((*((_WORD *)a2 + 14) & 2) != 0)
  {
    v4 = *((_WORD *)a2 + 15);
    if ((v4 & 0x100) != 0)
    {
      if ((v4 & 0x80) != 0)
        return result;
      goto LABEL_4;
    }
    v42 = *((_QWORD *)a2 + 10);
    if (v42)
    {
      v43 = *(unsigned __int8 **)(v42 + 8);
      v44 = *(unsigned int *)(v42 + 4);
      if ((*(_BYTE *)(v42 + 16) & 4) != 0)
      {
        if ((_DWORD)v44)
        {
          while (1)
          {
            v45 = *v43;
            v46 = v45 > 0x20;
            v47 = (1 << v45) & 0x100003600;
            if (v46 || v47 == 0)
              break;
            ++v43;
            if (!--v44)
              goto LABEL_69;
          }
LABEL_70:
          *((_WORD *)a2 + 15) = v4 & 0xFE7F | 0x100;
          goto LABEL_4;
        }
      }
      else if ((_DWORD)v44)
      {
        v54 = 2 * v44;
        do
        {
          v55 = *(unsigned __int16 *)v43;
          v46 = v55 > 0x20;
          v56 = (1 << v55) & 0x100003600;
          if (v46 || v56 == 0)
            goto LABEL_70;
          v43 += 2;
          v54 -= 2;
        }
        while (v54);
      }
    }
LABEL_69:
    *((_WORD *)a2 + 15) = v4 | 0x180;
    return result;
  }
LABEL_4:
  v5 = (uint64_t *)((char *)this + 80);
  v6 = WTF::WeakHashMap<WebCore::Node,int,WebCore::WeakPtrImplWithEventTargetData>::take((uint64_t)this + 80, a2);
  v59 = v6;
  if ((_DWORD)v6)
  {
    v8 = (void *)v6;
    v9 = *((_QWORD *)this + 12);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v11 = 9 * ((v6 + ~((_DWORD)v6 << 15)) ^ ((v6 + ~((_DWORD)v6 << 15)) >> 10));
      v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
      v13 = v10 & (v12 ^ HIWORD(v12));
      v14 = *(_DWORD *)(v9 + 16 * v13);
      if (v14 != (_DWORD)v6)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v10;
          v14 = *(_DWORD *)(v9 + 16 * v13);
          ++v15;
          if (v14 == (_DWORD)v6)
            goto LABEL_12;
        }
        v13 = *(unsigned int *)(v9 - 4);
      }
LABEL_12:
      if (v13 != *(_DWORD *)(v9 - 4))
        WTF::HashTable<int,WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::remove((uint64_t *)this + 12, (_QWORD *)(v9 + 16 * v13));
    }
    v16 = (uint64_t *)((char *)this + 104);
    v17 = *((_QWORD *)this + 13);
    if (v17)
    {
      v18 = *(_DWORD *)(v17 - 8);
      v19 = 9 * (((_DWORD)v8 + ~((_DWORD)v8 << 15)) ^ (((_DWORD)v8 + ~((_DWORD)v8 << 15)) >> 10));
      v20 = v18 & (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6))
                                                                        + ~((v19 ^ (v19 >> 6)) << 11)) >> 16));
      v21 = *(_DWORD *)(v17 + 4 * v20);
      if (v21 != (_DWORD)v8)
      {
        v22 = 1;
        while (v21)
        {
          v20 = ((_DWORD)v20 + v22) & v18;
          v21 = *(_DWORD *)(v17 + 4 * v20);
          ++v22;
          if (v21 == (_DWORD)v8)
            goto LABEL_21;
        }
        v20 = *(unsigned int *)(v17 - 4);
      }
LABEL_21:
      if (v20 != *(_DWORD *)(v17 - 4))
      {
        v23 = -1;
        *(_DWORD *)(v17 + 4 * v20) = -1;
        ++*(_DWORD *)(*v16 - 16);
        v24 = *v16;
        if (*v16)
          v23 = *(_DWORD *)(v24 - 12) - 1;
        *(_DWORD *)(v24 - 12) = v23;
        v25 = *v16;
        if (*v16)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
            WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(v16, v27 >> 1, 0);
        }
      }
    }
    v29 = *(WebCore::InspectorCSSAgent **)(*((_QWORD *)this + 2) + 112);
    if (v29)
      v29 = (WebCore::InspectorCSSAgent *)WebCore::InspectorCSSAgent::didRemoveDOMNode(v29, a2, v8);
    v30 = *((_QWORD *)a2 + 4);
    if (!v30)
      goto LABEL_55;
    ++*((_DWORD *)this + 22);
    v31 = *(_QWORD *)(v30 + 16);
    v32 = v31 & 0xFFFFFFFFFFFFLL;
    if ((v31 & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_55;
    if (!*(_QWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 8))
      goto LABEL_55;
    v33 = *v5;
    if (!*v5)
      goto LABEL_55;
    v34 = *(_DWORD *)(v33 - 8);
    v35 = (v32 + ~(v31 << 32)) ^ ((unint64_t)(v32 + ~(v31 << 32)) >> 22);
    v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
    v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
    v38 = v34 & ((v37 >> 31) ^ v37);
    for (i = 1; ; v38 = (v40 + i++) & v34)
    {
      v40 = v38;
      v41 = *(_QWORD *)(v33 + 16 * v38);
      if (v41 != -1)
      {
        if (!v41)
          goto LABEL_55;
        if (v41 == v32)
          break;
      }
    }
    if (*(_DWORD *)(v33 + 16 * v40 + 8))
    {
      v29 = (WebCore::InspectorDOMAgent *)((char *)this + 272);
      LODWORD(v58) = *(_DWORD *)(v33 + 16 * v40 + 8);
      HIDWORD(v58) = (_DWORD)v8;
      v49 = *((unsigned int *)this + 71);
      if ((_DWORD)v49 == *((_DWORD *)this + 70))
      {
        v29 = (WebCore::InspectorCSSAgent *)WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v49 + 1, (unint64_t)&v58);
        v49 = *((unsigned int *)this + 71);
        v50 = *((_QWORD *)this + 34);
        v51 = *(_QWORD *)v29;
      }
      else
      {
        v50 = *(_QWORD *)v29;
        v51 = v58;
      }
      *(_QWORD *)(v50 + 8 * v49) = v51;
      ++*((_DWORD *)this + 71);
    }
    else
    {
LABEL_55:
      v52 = *((unsigned int *)this + 67);
      if ((_DWORD)v52 == *((_DWORD *)this + 66))
      {
        v29 = (WebCore::InspectorCSSAgent *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 32, v52 + 1, (unint64_t)&v59);
        *(_DWORD *)(*((_QWORD *)this + 32) + 4 * *((unsigned int *)this + 67)) = *(_DWORD *)v29;
      }
      else
      {
        *(_DWORD *)(*((_QWORD *)this + 32) + 4 * v52) = (_DWORD)v8;
      }
      ++*((_DWORD *)this + 67);
    }
    if ((*((_QWORD *)this + 40) & 0xFFFFFFFFFFFFLL) == 0
      || (result = *(double *)((*((_QWORD *)this + 40) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
    {
      *((_QWORD *)this + 39) = 0;
      WTF::MonotonicTime::now(v29);
      WebCore::TimerBase::setNextFireTime((uint64_t)this + 288, v53 + 0.0);
    }
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::didModifyDOMAttr(uint64_t this, WebCore::Element *a2, const WTF::AtomString *a3, const WTF::AtomString *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WebCore::Element *v27;
  int v28;
  WebCore::InspectorStyleSheetForInlineStyle *v29;

  v4 = *(unsigned __int8 *)(this + 438);
  *(_BYTE *)(this + 438) = 0;
  if (!v4)
  {
    v5 = this;
    ++*(_DWORD *)(this + 88);
    v6 = *((_QWORD *)a2 + 2);
    v7 = v6 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 8))
      {
        v8 = *(_QWORD *)(this + 80);
        if (v8)
        {
          v11 = *(_DWORD *)(v8 - 8);
          v12 = (v7 + ~(v6 << 32)) ^ ((unint64_t)(v7 + ~(v6 << 32)) >> 22);
          v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
          v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
          v15 = v11 & ((v14 >> 31) ^ v14);
          for (i = 1; ; ++i)
          {
            v17 = v15;
            v18 = *(_QWORD *)(v8 + 16 * v15);
            if (v18 != -1)
            {
              if (!v18)
                return this;
              if (v18 == v7)
                break;
            }
            v15 = (v17 + i) & v11;
          }
          v19 = *(unsigned int *)(v8 + 16 * v17 + 8);
          if ((_DWORD)v19)
          {
            v20 = *(_QWORD *)(*(_QWORD *)(this + 16) + 112);
            if (v20)
            {
              v21 = *(_QWORD *)(v20 + 88);
              if (v21)
              {
                v22 = *(_DWORD *)(v21 - 8);
                v23 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
                v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
                v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
                v26 = v22 & ((v25 >> 31) ^ v25);
                v27 = *(WebCore::Element **)(v21 + 16 * v26);
                if (v27 == a2)
                {
LABEL_18:
                  v29 = *(WebCore::InspectorStyleSheetForInlineStyle **)(v21 + 16 * v26 + 8);
                  if (v29)
                    WebCore::InspectorStyleSheetForInlineStyle::didModifyElementAttribute(v29, a2);
                }
                else
                {
                  v28 = 1;
                  while (v27)
                  {
                    v26 = ((_DWORD)v26 + v28) & v22;
                    v27 = *(WebCore::Element **)(v21 + 16 * v26);
                    ++v28;
                    if (v27 == a2)
                      goto LABEL_18;
                  }
                }
              }
            }
            return Inspector::DOMFrontendDispatcher::attributeModified(*(Inspector::DOMFrontendDispatcher **)(v5 + 48), v19, a3, a4);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::InspectorDOMAgent::didRemoveDOMAttr(uint64_t this, WebCore::Element *a2, const WTF::AtomString *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  WebCore::Element *v24;
  int v25;
  WebCore::InspectorStyleSheetForInlineStyle *v26;

  ++*(_DWORD *)(this + 88);
  v3 = *((_QWORD *)a2 + 2);
  v4 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v5 = this;
      v6 = *(_QWORD *)(this + 80);
      if (v6)
      {
        v8 = *(_DWORD *)(v6 - 8);
        v9 = (v4 + ~(v3 << 32)) ^ ((unint64_t)(v4 + ~(v3 << 32)) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        for (i = 1; ; ++i)
        {
          v14 = v12;
          v15 = *(_QWORD *)(v6 + 16 * v12);
          if (v15 != -1)
          {
            if (!v15)
              return this;
            if (v15 == v4)
              break;
          }
          v12 = (v14 + i) & v8;
        }
        v16 = *(unsigned int *)(v6 + 16 * v14 + 8);
        if ((_DWORD)v16)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(this + 16) + 112);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 88);
            if (v18)
            {
              v19 = *(_DWORD *)(v18 - 8);
              v20 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
              v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
              v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
              v23 = v19 & ((v22 >> 31) ^ v22);
              v24 = *(WebCore::Element **)(v18 + 16 * v23);
              if (v24 == a2)
              {
LABEL_16:
                v26 = *(WebCore::InspectorStyleSheetForInlineStyle **)(v18 + 16 * v23 + 8);
                if (v26)
                  WebCore::InspectorStyleSheetForInlineStyle::didModifyElementAttribute(v26, a2);
              }
              else
              {
                v25 = 1;
                while (v24)
                {
                  v23 = ((_DWORD)v23 + v25) & v19;
                  v24 = *(WebCore::Element **)(v18 + 16 * v23);
                  ++v25;
                  if (v24 == a2)
                    goto LABEL_16;
                }
              }
            }
          }
          return Inspector::DOMFrontendDispatcher::attributeRemoved(*(Inspector::DOMFrontendDispatcher **)(v5 + 48), v16, a3);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::InspectorDOMAgent::characterDataModified(WebCore::InspectorDOMAgent *this, WebCore::CharacterData *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;

  ++*((_DWORD *)this + 22);
  v2 = *((_QWORD *)a2 + 2);
  v3 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) == 0)
    return WebCore::InspectorDOMAgent::didInsertDOMNode((uint64_t *)this, a2);
  if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 8))
    return WebCore::InspectorDOMAgent::didInsertDOMNode((uint64_t *)this, a2);
  v4 = *((_QWORD *)this + 10);
  if (!v4)
    return WebCore::InspectorDOMAgent::didInsertDOMNode((uint64_t *)this, a2);
  v5 = *(_DWORD *)(v4 - 8);
  v6 = (v3 + ~(v2 << 32)) ^ ((unint64_t)(v3 + ~(v2 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  for (i = 1; ; v9 = (v11 + i++) & v5)
  {
    v11 = v9;
    v12 = *(_QWORD *)(v4 + 16 * v9);
    if (v12 != -1)
    {
      if (!v12)
        return WebCore::InspectorDOMAgent::didInsertDOMNode((uint64_t *)this, a2);
      if (v12 == v3)
        break;
    }
  }
  if (*(_DWORD *)(v4 + 16 * v11 + 8))
    return (uint64_t *)Inspector::DOMFrontendDispatcher::characterDataModified(*((Inspector::DOMFrontendDispatcher **)this + 6), *(unsigned int *)(v4 + 16 * v11 + 8), (WebCore::CharacterData *)((char *)a2 + 80));
  else
    return WebCore::InspectorDOMAgent::didInsertDOMNode((uint64_t *)this, a2);
}

double WebCore::InspectorDOMAgent::didInvalidateStyleAttr(WebCore::InspectorDOMAgent *this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t StatusReg;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  WTF::MonotonicTime *Ref;
  double v23;
  double result;
  uint64_t v25;
  WTF::MonotonicTime *v26;

  ++*((_DWORD *)this + 22);
  v2 = *((_QWORD *)a2 + 2);
  v3 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v5 = *((_QWORD *)this + 10);
      if (v5)
      {
        v7 = *(_DWORD *)(v5 - 8);
        v8 = (v3 + ~(v2 << 32)) ^ ((unint64_t)(v3 + ~(v2 << 32)) >> 22);
        v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        v11 = v7 & ((v10 >> 31) ^ v10);
        for (i = 1; ; ++i)
        {
          v13 = v11;
          v14 = *(_QWORD *)(v5 + 16 * v11);
          if (v14 != -1)
          {
            if (!v14)
              return result;
            if (v14 == v3)
              break;
          }
          v11 = (v13 + i) & v7;
        }
        if (*(_DWORD *)(v5 + 16 * v13 + 8))
        {
          v15 = *((_QWORD *)this + 17);
          if (!v15)
          {
            v15 = WTF::fastMalloc((WTF *)0x48);
            *(_QWORD *)v15 = this;
            *(_QWORD *)(v15 + 8) = off_1E3407128;
            StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            *(_OWORD *)(v15 + 16) = 0u;
            *(_OWORD *)(v15 + 32) = 0u;
            v17 = *(unsigned int **)(StatusReg + 736);
            if (!v17)
              v17 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 + 1, v17));
            *(_QWORD *)(v15 + 48) = v17;
            *(_QWORD *)(v15 + 8) = off_1E31F7378;
            v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            *v19 = off_1E33EFBA8;
            v19[1] = WebCore::RevalidateStyleAttributeTask::timerFired;
            v19[2] = 0;
            v19[3] = v15;
            *(_QWORD *)(v15 + 56) = v19;
            *(_QWORD *)(v15 + 64) = 0;
            v21 = (_QWORD *)*((_QWORD *)this + 17);
            *((_QWORD *)this + 17) = v15;
            if (v21)
            {
              std::default_delete<WebCore::RevalidateStyleAttributeTask>::operator()[abi:sn180100](v21, v20);
              v15 = *((_QWORD *)this + 17);
            }
          }
          *((_DWORD *)a2 + 6) += 2;
          v26 = a2;
          WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add((uint64_t *)(v15 + 64), (uint64_t *)&v26, (uint64_t)&v25);
          Ref = v26;
          v26 = 0;
          if (Ref)
          {
            if (*((_DWORD *)Ref + 6) == 2)
            {
              if ((*((_WORD *)Ref + 15) & 0x400) == 0)
                Ref = (WTF::MonotonicTime *)WebCore::Node::removedLastRef(Ref);
            }
            else
            {
              *((_DWORD *)Ref + 6) -= 2;
            }
          }
          if ((*(_QWORD *)(v15 + 40) & 0xFFFFFFFFFFFFLL) == 0
            || (result = *(double *)((*(_QWORD *)(v15 + 40) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
          {
            *(_QWORD *)(v15 + 32) = 0;
            WTF::MonotonicTime::now(Ref);
            WebCore::TimerBase::setNextFireTime(v15 + 8, v23 + 0.0);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorDOMAgent::didPushShadowRoot(uint64_t this, WebCore::Element *a2, WebCore::ShadowRoot *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  ++*(_DWORD *)(this + 88);
  v3 = *((_QWORD *)a2 + 2);
  v4 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v5 = *(_QWORD *)(this + 80);
      if (v5)
      {
        v6 = *(_DWORD *)(v5 - 8);
        v7 = (v4 + ~(v3 << 32)) ^ ((unint64_t)(v4 + ~(v3 << 32)) >> 22);
        v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
        v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
        v10 = v6 & ((v9 >> 31) ^ v9);
        for (i = 1; ; ++i)
        {
          v12 = v10;
          v13 = *(_QWORD *)(v5 + 16 * v10);
          if (v13 != -1)
          {
            if (!v13)
              return this;
            if (v13 == v4)
              break;
          }
          v10 = (v12 + i) & v6;
        }
        if (*(_DWORD *)(v5 + 16 * v12 + 8))
        {
          WebCore::InspectorDOMAgent::buildObjectForNode(&v14, (WebCore::InspectorDOMAgent *)this, a3, 0);
          Inspector::DOMFrontendDispatcher::shadowRootPushed();
          this = v14;
          v14 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 1)
              return WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)this;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::InspectorDOMAgent::willPopShadowRoot(uint64_t this, WebCore::Element *a2, WebCore::ShadowRoot *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int j;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_DWORD *)(this + 88);
  *(_DWORD *)(this + 88) = v3 + 1;
  v4 = *((_QWORD *)a2 + 2);
  v5 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 8) && (v6 = *(_QWORD *)(this + 80)) != 0)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = (v5 + ~(v4 << 32)) ^ ((unint64_t)(v5 + ~(v4 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (i = 1; ; ++i)
    {
      v13 = v11;
      v14 = *(_QWORD *)(v6 + 16 * v11);
      if (v14 != -1)
      {
        if (!v14)
          goto LABEL_9;
        if (v14 == v5)
          break;
      }
      v11 = (v13 + i) & v7;
    }
    v15 = *(_DWORD *)(v6 + 16 * v13 + 8);
  }
  else
  {
LABEL_9:
    v15 = 0;
  }
  *(_DWORD *)(this + 88) = v3 + 2;
  v16 = *((_QWORD *)a3 + 2);
  v17 = v16 & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v18 = *(_QWORD *)(this + 80);
      if (v18)
      {
        v19 = *(_DWORD *)(v18 - 8);
        v20 = (v17 + ~(v16 << 32)) ^ ((unint64_t)(v17 + ~(v16 << 32)) >> 22);
        v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
        v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
        v23 = v19 & ((v22 >> 31) ^ v22);
        for (j = 1; ; ++j)
        {
          v25 = v23;
          v26 = *(_QWORD *)(v18 + 16 * v23);
          if (v26 != -1)
          {
            if (!v26)
              return this;
            if (v26 == v17)
              break;
          }
          v23 = (v25 + j) & v19;
        }
        if (v15)
        {
          if (*(_DWORD *)(v18 + 16 * v25 + 8))
            return Inspector::DOMFrontendDispatcher::shadowRootPopped(*(Inspector::DOMFrontendDispatcher **)(this + 48));
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::InspectorDOMAgent::didChangeCustomElementState(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;

  ++*(_DWORD *)(this + 88);
  v2 = *((_QWORD *)a2 + 2);
  v3 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v4 = *(_QWORD *)(this + 80);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 - 8);
        v6 = (v3 + ~(v2 << 32)) ^ ((unint64_t)(v3 + ~(v2 << 32)) >> 22);
        v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
        v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
        v9 = v5 & ((v8 >> 31) ^ v8);
        for (i = 1; ; ++i)
        {
          v11 = v9;
          v12 = *(_QWORD *)(v4 + 16 * v9);
          if (v12 != -1)
          {
            if (!v12)
              return this;
            if (v12 == v3)
              break;
          }
          v9 = (v11 + i) & v5;
        }
        if (*(_DWORD *)(v4 + 16 * v11 + 8))
          return Inspector::DOMFrontendDispatcher::customElementStateChanged();
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::pseudoElementCreated(WTF::StringImpl *this, WebCore::PseudoElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::InspectorDOMAgent *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  v2 = *((_QWORD *)a2 + 14);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = this;
      ++*((_DWORD *)this + 22);
      v5 = *(_QWORD *)(v3 + 16);
      v6 = v5 & 0xFFFFFFFFFFFFLL;
      if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 8))
        {
          v7 = *((_QWORD *)this + 10);
          if (v7)
          {
            v9 = *(_DWORD *)(v7 - 8);
            v10 = (v6 + ~(v5 << 32)) ^ ((unint64_t)(v6 + ~(v5 << 32)) >> 22);
            v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
            v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
            v13 = v9 & ((v12 >> 31) ^ v12);
            for (i = 1; ; ++i)
            {
              v15 = v13;
              v16 = *(_QWORD *)(v7 + 16 * v13);
              if (v16 != -1)
              {
                if (!v16)
                  return this;
                if (v16 == v6)
                  break;
              }
              v13 = (v15 + i) & v9;
            }
            v17 = v7 + 16 * v15;
            if (*(_DWORD *)(v17 + 8))
            {
              WebCore::InspectorDOMAgent::pushChildNodesToFrontend(this, (void *)*(unsigned int *)(v17 + 8), 1);
              WebCore::InspectorDOMAgent::buildObjectForNode(&v18, v4, a2, 0);
              Inspector::DOMFrontendDispatcher::pseudoElementAdded();
              this = v18;
              v18 = 0;
              if (this)
              {
                if (*(_DWORD *)this == 1)
                  return (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)this;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::InspectorDOMAgent::pseudoElementDestroyed(uint64_t this, WebCore::PseudoElement *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int j;
  unsigned int v25;
  uint64_t v26;

  v2 = *(_DWORD *)(this + 88);
  *(_DWORD *)(this + 88) = v2 + 1;
  v3 = *((_QWORD *)a2 + 2);
  v4 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v5 = this;
      v6 = *(_QWORD *)(this + 80);
      if (v6)
      {
        v7 = *(_DWORD *)(v6 - 8);
        v8 = (v4 + ~(v3 << 32)) ^ ((unint64_t)(v4 + ~(v3 << 32)) >> 22);
        v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        v11 = v7 & ((v10 >> 31) ^ v10);
        for (i = 1; ; ++i)
        {
          v13 = v11;
          v14 = *(_QWORD *)(v6 + 16 * v11);
          if (v14 != -1)
          {
            if (!v14)
              return this;
            if (v14 == v4)
              break;
          }
          v11 = (v13 + i) & v7;
        }
        if (*(_DWORD *)(v6 + 16 * v13 + 8))
        {
          v15 = *((_QWORD *)a2 + 14);
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 8);
            if (v16)
            {
              *(_DWORD *)(this + 88) = v2 + 2;
              v17 = *(_QWORD *)(v16 + 16);
              v18 = v17 & 0xFFFFFFFFFFFFLL;
              if ((v17 & 0xFFFFFFFFFFFFLL) != 0)
              {
                if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFLL) + 8))
                {
                  v19 = *(_DWORD *)(v6 - 8);
                  v20 = (v18 + ~(v17 << 32)) ^ ((unint64_t)(v18 + ~(v17 << 32)) >> 22);
                  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
                  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
                  v23 = v19 & ((v22 >> 31) ^ v22);
                  for (j = 1; ; ++j)
                  {
                    v25 = v23;
                    v26 = *(_QWORD *)(v6 + 16 * v23);
                    if (v26 != -1 && (!v26 || v26 == v18))
                      break;
                    v23 = (v25 + j) & v19;
                  }
                }
              }
            }
          }
          WebCore::InspectorDOMAgent::unbind((WebCore::InspectorDOMAgent *)this, a2);
          return Inspector::DOMFrontendDispatcher::pseudoElementRemoved(*(Inspector::DOMFrontendDispatcher **)(v5 + 48));
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::InspectorDOMAgent::didAddEventListener(uint64_t this, WebCore::EventTarget *a2)
{
  unint64_t v2;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  uint64_t v17;

  v2 = *((_QWORD *)a2 + 2);
  if ((v2 & 0x2000000000000) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v4 + 2;
    v5 = *(_QWORD *)(this + 160);
    if (v5)
    {
      if ((WebCore::EventTarget *)v5 == a2)
        goto LABEL_14;
      v6 = *((_WORD *)a2 + 14);
      if ((v6 & 0xF000) == 0x9000)
      {
        if (**(WebCore::EventTarget ***)(v5 + 40) == a2
          && (*(_WORD *)(v5 + 28) & 0xF000) != 0x9000
          && (*(_BYTE *)(v5 + 22) & 8) != 0)
        {
          goto LABEL_14;
        }
      }
      else if ((v6 & 4) != 0
             && *((_QWORD *)a2 + 10)
             && ((v2 >> 51) & 1) == (*(_BYTE *)(v5 + 22) & 8) >> 3)
      {
        do
          v5 = *(_QWORD *)(v5 + 32);
        while ((WebCore::EventTarget *)v5 != a2 && v5 != 0);
        if (v5)
        {
LABEL_14:
          ++*(_DWORD *)(this + 88);
          v8 = v2 & 0xFFFFFFFFFFFFLL;
          if ((v2 & 0xFFFFFFFFFFFFLL) != 0)
          {
            if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 8))
            {
              v9 = *(_QWORD *)(this + 80);
              if (v9)
              {
                v10 = *(_DWORD *)(v9 - 8);
                v11 = (v8 + ~(v2 << 32)) ^ ((v8 + ~(v2 << 32)) >> 22);
                v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
                v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
                v14 = v10 & ((v13 >> 31) ^ v13);
                for (i = 1; ; ++i)
                {
                  v16 = v14;
                  v17 = *(_QWORD *)(v9 + 16 * v14);
                  if (v17 != -1)
                  {
                    if (!v17)
                      goto LABEL_25;
                    if (v17 == v8)
                      break;
                  }
                  v14 = (v16 + i) & v10;
                }
                if (*(_DWORD *)(v9 + 16 * v16 + 8) && !*(_BYTE *)(this + 439))
                {
                  *(_BYTE *)(this + 439) = 1;
                  this = Inspector::DOMFrontendDispatcher::didAddEventListener(*(Inspector::DOMFrontendDispatcher **)(this + 48));
                  v4 = *((_DWORD *)a2 + 6) - 2;
                }
              }
            }
          }
        }
      }
    }
LABEL_25:
    if (v4)
    {
      *((_DWORD *)a2 + 6) = v4;
    }
    else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef(a2);
    }
  }
  return this;
}

uint64_t *WebCore::InspectorDOMAgent::willRemoveEventListener(uint64_t *this, WebCore::EventTarget *a2, WTF::StringImpl **a3, WebCore::EventListener *a4, int a5)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int16 v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  WebCore::EventListener *v35;
  _DWORD **v36;
  WebCore::EventListener *v37;
  WebCore::Node **v38;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _DWORD *v47;
  WebCore::Node *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  double v58;
  double v59;
  double v60;
  unsigned int v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;

  v5 = *((_QWORD *)a2 + 2);
  if ((v5 & 0x2000000000000) != 0)
  {
    v7 = (uint64_t)this;
    *((_DWORD *)a2 + 6) += 2;
    v8 = this[20];
    if (!v8)
      goto LABEL_86;
    if ((WebCore::EventTarget *)v8 != a2)
    {
      v12 = *((_WORD *)a2 + 14);
      if ((v12 & 0xF000) == 0x9000)
      {
        if (**(WebCore::EventTarget ***)(v8 + 40) != a2
          || (*(_WORD *)(v8 + 28) & 0xF000) == 0x9000
          || (*(_BYTE *)(v8 + 22) & 8) == 0)
        {
          goto LABEL_86;
        }
      }
      else
      {
        if ((v12 & 4) == 0
          || !*((_QWORD *)a2 + 10)
          || ((v5 >> 51) & 1) != (*(_BYTE *)(v8 + 22) & 8) >> 3)
        {
          goto LABEL_86;
        }
        do
          v8 = *(_QWORD *)(v8 + 32);
        while ((WebCore::EventTarget *)v8 != a2 && v8 != 0);
        if (!v8)
          goto LABEL_86;
      }
    }
    ++*((_DWORD *)this + 22);
    v14 = v5 & 0xFFFFFFFFFFFFLL;
    if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 8))
      {
        v15 = this[10];
        if (v15)
        {
          this = (uint64_t *)((unint64_t)a2 & ((uint64_t)(v5 << 14) >> 63));
          v16 = *(_DWORD *)(v15 - 8);
          v17 = (v14 + ~(v5 << 32)) ^ ((v14 + ~(v5 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          for (i = 1; ; ++i)
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            if (v23 != -1)
            {
              if (!v23)
                goto LABEL_86;
              if (v23 == v14)
                break;
            }
            v20 = (v22 + i) & v16;
          }
          if (*(_DWORD *)(v15 + 16 * v22 + 8))
          {
            this = WebCore::EventTarget::eventListeners((uint64_t)this, a3);
            v24 = *((unsigned int *)this + 3);
            if ((_DWORD)v24)
            {
              v25 = *this;
              v26 = 8 * v24;
              while (1)
              {
                this = (uint64_t *)(*(uint64_t (**)(_QWORD, WebCore::EventListener *))(**(_QWORD **)(*(_QWORD *)v25 + 8)
                                                                                              + 16))(*(_QWORD *)(*(_QWORD *)v25 + 8), a4);
                if ((_DWORD)this)
                {
                  if (((((*(_BYTE *)(*(_QWORD *)v25 + 4) & 1) == 0) ^ a5) & 1) != 0)
                    break;
                }
                v25 += 8;
                v26 -= 8;
                if (!v26)
                  goto LABEL_86;
              }
              v28 = *(_QWORD *)(v7 + 424);
              if (!v28)
                goto LABEL_84;
              v29 = *(_DWORD *)(v28 - 4);
              if (!v29)
                goto LABEL_84;
              v30 = 0;
              v62 = (uint64_t *)(v7 + 424);
              v63 = *(_QWORD *)(v7 + 424);
              v31 = v29 - 1;
              while (1)
              {
                v32 = v31;
                v33 = (_DWORD *)(v28 + 56 * v31);
                if ((*v33 + 1) < 2)
                  goto LABEL_53;
                v34 = v28 + 56 * v31;
                v37 = *(WebCore::EventListener **)(v34 + 24);
                v36 = (_DWORD **)(v34 + 24);
                v35 = v37;
                v38 = (WebCore::Node **)(v36 - 1);
                if (*(v36 - 1) != (_DWORD *)a2 || v35 != a4)
                  goto LABEL_53;
                v40 = v28 + 56 * v31;
                v43 = *(WTF::StringImpl **)(v40 + 32);
                v42 = (WTF::StringImpl **)(v40 + 32);
                v41 = v43;
                if (v43 != *a3 || *(unsigned __int8 *)(v28 + 56 * v31 + 40) != a5)
                  goto LABEL_53;
                v64 = v30;
                *v33 = -1;
                v44 = v28 + 56 * v31;
                v45 = *(_QWORD *)(v44 + 48);
                *(_QWORD *)(v44 + 48) = 0;
                if (v45)
                {
                  WTF::RefCounted<JSC::Breakpoint>::deref(v45, v27);
                  v41 = *v42;
                }
                *v42 = 0;
                v46 = v64;
                v28 = v63;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                  {
                    WTF::StringImpl::destroy(v41, v27);
                    v28 = v63;
                    v46 = v64;
                  }
                  else
                  {
                    *(_DWORD *)v41 -= 2;
                  }
                }
                v47 = *v36;
                *v36 = 0;
                if (v47)
                {
                  if (v47[4] == 1)
                  {
                    (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
                    v28 = v63;
                    v46 = v64;
                  }
                  else
                  {
                    --v47[4];
                  }
                }
                v48 = *v38;
                *v38 = 0;
                if (v48)
                {
                  if ((*((_BYTE *)v48 + 22) & 2) == 0)
                  {
                    (*(void (**)(WebCore::Node *))(*(_QWORD *)v48 + 96))(v48);
                    goto LABEL_59;
                  }
                  if (*((_DWORD *)v48 + 6) == 2)
                  {
                    if ((*((_WORD *)v48 + 15) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef(v48);
LABEL_59:
                      v28 = v63;
                      v46 = v64;
                    }
                  }
                  else
                  {
                    *((_DWORD *)v48 + 6) -= 2;
                  }
                }
                v30 = v46 + 1;
LABEL_53:
                --v31;
                if (!v32)
                {
                  this = (uint64_t *)(v7 + 424);
                  v49 = *v62;
                  if (v30)
                  {
                    *(_DWORD *)(v49 - 16) += v30;
                    v50 = *v62;
                    if (*v62)
                      v51 = *(_DWORD *)(v50 - 12);
                    else
                      v51 = 0;
                    *(_DWORD *)(v50 - 12) = v51 - v30;
                    v49 = *v62;
                  }
                  if (v49)
                  {
                    v52 = *(_DWORD *)(v49 - 4);
                    v53 = *(unsigned int *)(v49 - 12);
                    if (v52 >= 9 && 6 * (int)v53 < v52)
                    {
                      v55 = (v53 - 1) | ((v53 - 1) >> 1) | ((((_DWORD)v53 - 1) | ((v53 - 1) >> 1)) >> 2);
                      v56 = v55 | (v55 >> 4) | ((v55 | (v55 >> 4)) >> 8);
                      v57 = (v56 | HIWORD(v56)) + 1;
                      if (v57 > 0x400)
                      {
                        if (v57 <= 2 * v53)
                        {
LABEL_74:
                          LODWORD(v57) = 2 * v57;
                          if (v57 <= 0x400)
                            goto LABEL_75;
                        }
                        v58 = (double)v53;
                        v59 = (double)v57;
                        v60 = 0.416666667;
                      }
                      else
                      {
                        if (3 * v57 <= 4 * v53)
                          goto LABEL_74;
LABEL_75:
                        v58 = (double)v53;
                        v59 = (double)v57;
                        v60 = 0.604166667;
                      }
                      if (v59 * v60 <= v58)
                        LODWORD(v57) = 2 * v57;
                      if (v57 <= 8)
                        v61 = 8;
                      else
                        v61 = v57;
                      this = (uint64_t *)WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::InspectorDOMAgent::InspectorEventListener,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v62, v61, 0);
                    }
                  }
LABEL_84:
                  if (!*(_BYTE *)(v7 + 439))
                  {
                    *(_BYTE *)(v7 + 439) = 1;
                    this = (uint64_t *)Inspector::DOMFrontendDispatcher::willRemoveEventListener(*(Inspector::DOMFrontendDispatcher **)(v7 + 48));
                  }
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_86:
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        return (uint64_t *)WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  return this;
}

uint64_t *WebCore::InspectorDOMAgent::eventDidResetAfterDispatch(uint64_t *this, const WebCore::Event *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const WebCore::Event *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v2 = this[52];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(const WebCore::Event **)(v2 + 8 * v7);
    if (v8 != a2)
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(const WebCore::Event **)(v2 + 8 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_8;
      }
      v7 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v7 != *(_DWORD *)(v2 - 4))
    {
      *(_QWORD *)(v2 + 8 * v7) = -1;
      this += 52;
      ++*(_DWORD *)(*this - 16);
      v10 = *this;
      v11 = *this ? *(_DWORD *)(v10 - 12) - 1 : -1;
      *(_DWORD *)(v10 - 12) = v11;
      v12 = *this;
      if (*this)
      {
        v13 = 6 * *(_DWORD *)(v12 - 12);
        v14 = *(_DWORD *)(v12 - 4);
        if (v13 < v14 && v14 >= 9)
          return WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(this, v14 >> 1, 0);
      }
    }
  }
  return this;
}

uint64_t WTF::WeakHashMap<WebCore::RenderObject,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::remove(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 > v5)
    WTF::WeakHashMap<WebCore::RenderObject,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t *)a1, a2);
  v6 = (WTF *)a2[1];
  if (!v6)
    return 0;
  if (!*((_QWORD *)v6 + 1))
    return 0;
  v7 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  for (i = 1; ; v12 = (v12 + i++) & v8)
  {
    v14 = v7 + 24 * v12;
    v15 = *(WTF **)v14;
    if (*(_QWORD *)v14 != -1)
    {
      if (!v15)
      {
        v16 = *(_DWORD *)(v7 - 4);
        v14 = v7 + 24 * v16;
        goto LABEL_13;
      }
      if (v15 == v6)
        break;
    }
  }
  v16 = *(_DWORD *)(v7 - 4);
LABEL_13:
  if (v7 + 24 * v16 == v14)
    return 0;
  v17 = *(WTF **)v14;
  *(_QWORD *)v14 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
      WTF::fastFree(v17, a2);
    else
      --*(_DWORD *)v17;
  }
  *(_QWORD *)v14 = -1;
  v18 = *(WTF **)(v14 + 8);
  if (v18)
  {
    *(_QWORD *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 16) = 0;
    WTF::fastFree(v18, a2);
  }
  ++*(_DWORD *)(*(_QWORD *)a1 - 16);
  v19 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v20 = *(_DWORD *)(v19 - 12) - 1;
  else
    v20 = -1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v23 = 6 * *(_DWORD *)(v22 - 12);
    v24 = *(_DWORD *)(v22 - 4);
    if (v23 < v24 && v24 >= 9)
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v24 >> 1, 0);
  }
  return 1;
}

_QWORD *WebCore::InspectorDOMAgent::flexibleBoxRendererWrappedToNextLine(WebCore::InspectorDOMAgent *this, const WebCore::RenderObject *a2, uint64_t a3)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  WTF **v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *result;
  uint64_t v38;
  uint64_t v39;

  v39 = a3;
  v5 = (uint64_t *)((char *)this + 240);
  v6 = *((_DWORD *)this + 62);
  v7 = *((_DWORD *)this + 63);
  *((_DWORD *)this + 62) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::RenderObject,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t *)this + 30, a2);
  v8 = *((_QWORD *)a2 + 1);
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a2;
    v34 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v8;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
      {
        WTF::fastFree(v34, a2);
        v8 = *((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)v34;
      }
    }
  }
  v9 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 2;
  v10 = __CFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    WTF::fastFree((WTF *)v8, a2);
  else
    *(_DWORD *)v8 = v11;
  v12 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v5, 8u, 0), (v12 = *v5) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = 0;
  v16 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = (v18 >> 31) ^ v18;
  for (i = 1; ; ++i)
  {
    v21 = v19 & v14;
    v22 = v12 + 24 * v21;
    v23 = *(_QWORD *)v22;
    if (*(_QWORD *)v22 != -1)
      break;
    v15 = (WTF **)(v12 + 24 * v21);
LABEL_15:
    v19 = i + v21;
  }
  if (!v23)
  {
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(_DWORD *)(*v5 - 16);
      *v15 = (WTF *)v8;
    }
    else
    {
      *(_QWORD *)v22 = v8;
      v15 = (WTF **)(v12 + 24 * v21);
    }
    v26 = v15[1];
    if (v26)
    {
      v15[1] = 0;
      *((_DWORD *)v15 + 4) = 0;
      WTF::fastFree(v26, a2);
    }
    v15[1] = 0;
    v15[2] = 0;
    v27 = *v5;
    if (*v5)
      v28 = *(_DWORD *)(v27 - 12) + 1;
    else
      v28 = 1;
    *(_DWORD *)(v27 - 12) = v28;
    v29 = *v5;
    if (*v5)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    v31 = (*(_DWORD *)(v29 - 16) + v30);
    v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 <= 2 * v31)
        goto LABEL_35;
    }
    else if (3 * v32 <= 4 * v31)
    {
      if (!(_DWORD)v32)
      {
        v33 = 8;
LABEL_38:
        v15 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v5, v33, v15);
        v29 = *v5;
        if (*v5)
          LODWORD(v32) = *(_DWORD *)(v29 - 4);
        else
          LODWORD(v32) = 0;
        goto LABEL_45;
      }
LABEL_35:
      v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
      goto LABEL_38;
    }
LABEL_45:
    v25 = v29 + 24 * v32;
    v22 = (uint64_t)v15;
    goto LABEL_46;
  }
  if (v23 != v8)
    goto LABEL_15;
  if ((v13 & 1) != 0)
    v24 = 0;
  else
    v24 = *(_DWORD *)(v12 - 4);
  v25 = v12 + 24 * v24;
  if (*(_DWORD *)v8 == 1)
    WTF::fastFree((WTF *)v8, a2);
  else
    --*(_DWORD *)v8;
LABEL_46:
  v35 = *v5;
  if (*v5)
    v35 += 24 * *(unsigned int *)(v35 - 4);
  if (v22 != v35)
  {
    while (!*(_QWORD *)(*(_QWORD *)v22 + 8))
    {
      v36 = v22 + 24;
      v22 = v25;
      if (v36 != v25)
      {
        v22 = v36;
        while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
        {
          v22 += 24;
          if (v22 == v25)
          {
            v22 = v25;
            break;
          }
        }
      }
      if (v22 == v35)
      {
        v22 = v35;
        break;
      }
    }
  }
  result = (_QWORD *)(v22 + 8);
  v38 = *(unsigned int *)(v22 + 20);
  if ((_DWORD)v38 == *(_DWORD *)(v22 + 16))
  {
    result = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v38 + 1, (unint64_t)&v39);
    v38 = *(unsigned int *)(v22 + 20);
    *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v38) = *result;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v38) = a3;
  }
  *(_DWORD *)(v22 + 20) = v38 + 1;
  return result;
}

WebCore::InspectorDOMAgent *WebCore::InspectorDOMAgent::nodeForPath(WebCore::InspectorDOMAgent *this, const WTF::String *a2)
{
  WebCore::InspectorDOMAgent *v2;
  uint64_t v3;
  unint64_t v4;
  WebCore::InspectorDOMAgent *result;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v33;
  unsigned int v34;
  __int16 v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  __int16 v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int8 *v73;
  unint64_t v74;
  unsigned __int8 *v75;
  unint64_t v76;
  WTF::StringImpl *v77;
  _BOOL4 v78;
  WTF::StringImpl *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  WebCore::InspectorDOMAgent *v83;
  WTF::StringImpl *v84;
  const char **v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  uint64_t v89;
  unint64_t v90;
  __int16 v91;
  char v92;

  v2 = this;
  if (!this)
    return v2;
  if (a2)
  {
    v3 = *((_QWORD *)a2 + 1);
    v4 = *((unsigned int *)a2 + 1) | ((unint64_t)((*((_DWORD *)a2 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  v89 = v3;
  v90 = v4;
  v91 = 44;
  v92 = 0;
  v85 = (const char **)&v89;
  v86 = 0;
  v88 = (_DWORD)v4 == 0;
  result = (WebCore::InspectorDOMAgent *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v85);
  v6 = v86;
  if (v86 == (_DWORD)v90 && v88)
    return 0;
  while (1)
  {
    v8 = *((unsigned int *)v85 + 2);
    if (v8 <= v6)
    {
      v11 = 0x100000000;
      v13 = "";
    }
    else
    {
      v9 = v87;
      if (v8 - v6 <= v87)
      {
        if (!v6)
        {
          v13 = *v85;
          v11 = (uint64_t)v85[1];
          goto LABEL_18;
        }
        v9 = v8 - v6;
      }
      v10 = v6;
      v11 = v9;
      v12 = v8 - v6;
      if (*((_BYTE *)v85 + 12))
      {
        if (v12 < v9)
          goto LABEL_175;
        v13 = &(*v85)[v10];
        v11 = v9 | 0x100000000;
      }
      else
      {
        if (v12 < v9)
          goto LABEL_175;
        v13 = &(*v85)[2 * v10];
      }
    }
LABEL_18:
    v14 = WTF::StringView::SplitResult::Iterator::operator++();
    if (*(_DWORD *)(v14 + 8) == (_DWORD)v90 && *(_BYTE *)(v14 + 16) != 0)
      return v2;
    if ((v11 & 0xFF00000000) != 0)
      v16 = WTF::parseInteger<unsigned int,unsigned char>((uint64_t)v13, v11, 10, 1);
    else
      v16 = WTF::parseInteger<unsigned int,char16_t>((uint64_t)v13, v11, 10, 1);
    v17 = v16;
    if ((v16 & 0xFF00000000) == 0)
      return 0;
    result = (WebCore::InspectorDOMAgent *)(*(uint64_t (**)(WebCore::InspectorDOMAgent *))(*(_QWORD *)v2 + 192))(v2);
    if ((result & 1) != 0)
    {
      v80 = *((_DWORD *)v2 + 6);
      *((_DWORD *)v2 + 6) = v80 + 2;
      v81 = *((_QWORD *)v2 + 14);
      if (v81 && (v82 = *(_QWORD *)(v81 + 8)) != 0 && !*(_BYTE *)(v82 + 144))
      {
        v83 = *(WebCore::InspectorDOMAgent **)(v82 + 296);
        if (v80)
          goto LABEL_164;
      }
      else
      {
        v83 = 0;
        if (v80)
        {
LABEL_164:
          *((_DWORD *)v2 + 6) = v80;
LABEL_165:
          v2 = v83;
          goto LABEL_136;
        }
      }
      if ((*((_WORD *)v2 + 15) & 0x400) == 0)
        result = (WebCore::InspectorDOMAgent *)WebCore::Node::removedLastRef(v2, v18);
      goto LABEL_165;
    }
    if ((*((_WORD *)v2 + 14) & 4) == 0)
      return 0;
    v19 = *((_QWORD *)v2 + 10);
    if (!v19)
      return 0;
    v20 = *((_QWORD *)v2 + 10);
    while ((*(_WORD *)(v20 + 28) & 2) != 0)
    {
      v21 = *(_WORD *)(v20 + 30);
      if ((v21 & 0x100) != 0)
      {
        if ((v21 & 0x80) == 0)
          break;
      }
      else
      {
        v22 = *(_QWORD *)(v20 + 80);
        if (v22)
        {
          v23 = *(unsigned __int8 **)(v22 + 8);
          v24 = *(unsigned int *)(v22 + 4);
          if ((*(_BYTE *)(v22 + 16) & 4) != 0)
          {
            if ((_DWORD)v24)
            {
              while (1)
              {
                v25 = *v23;
                v26 = v25 > 0x20;
                v27 = (1 << v25) & 0x100003600;
                if (v26 || v27 == 0)
                  break;
                ++v23;
                if (!--v24)
                  goto LABEL_52;
              }
LABEL_54:
              *(_WORD *)(v20 + 30) = v21 & 0xFE7F | 0x100;
              break;
            }
          }
          else if ((_DWORD)v24)
          {
            v29 = 2 * v24;
            do
            {
              v30 = *(unsigned __int16 *)v23;
              v26 = v30 > 0x20;
              v31 = (1 << v30) & 0x100003600;
              if (v26 || v31 == 0)
                goto LABEL_54;
              v23 += 2;
              v29 -= 2;
            }
            while (v29);
          }
        }
LABEL_52:
        *(_WORD *)(v20 + 30) = v21 | 0x180;
      }
      v2 = 0;
      v20 = *(_QWORD *)(v20 + 56);
      if (!v20)
        return v2;
    }
    v33 = *(_QWORD *)(v20 + 56);
    if (v33)
    {
      v34 = 1;
      while (1)
      {
        if ((*(_WORD *)(v33 + 28) & 2) == 0)
          goto LABEL_80;
        v35 = *(_WORD *)(v33 + 30);
        if ((v35 & 0x100) != 0)
        {
          if ((v35 & 0x80) == 0)
            goto LABEL_80;
        }
        else
        {
          v36 = *(_QWORD *)(v33 + 80);
          if (v36)
          {
            v37 = *(unsigned __int8 **)(v36 + 8);
            v38 = *(unsigned int *)(v36 + 4);
            if ((*(_BYTE *)(v36 + 16) & 4) != 0)
            {
              if ((_DWORD)v38)
              {
                while (1)
                {
                  v39 = *v37;
                  v26 = v39 > 0x20;
                  v40 = (1 << v39) & 0x100003600;
                  if (v26 || v40 == 0)
                    break;
                  ++v37;
                  if (!--v38)
                    goto LABEL_78;
                }
LABEL_79:
                *(_WORD *)(v33 + 30) = v35 & 0xFE7F | 0x100;
LABEL_80:
                ++v34;
                goto LABEL_60;
              }
            }
            else if ((_DWORD)v38)
            {
              v42 = 2 * v38;
              do
              {
                v43 = *(unsigned __int16 *)v37;
                v26 = v43 > 0x20;
                v44 = (1 << v43) & 0x100003600;
                if (v26 || v44 == 0)
                  goto LABEL_79;
                v37 += 2;
                v42 -= 2;
              }
              while (v42);
            }
          }
LABEL_78:
          *(_WORD *)(v33 + 30) = v35 | 0x180;
        }
LABEL_60:
        v33 = *(_QWORD *)(v33 + 56);
        if (!v33)
          goto LABEL_82;
      }
    }
    v34 = 1;
LABEL_82:
    if (v34 <= v17)
      return 0;
    while ((*(_WORD *)(v19 + 28) & 2) != 0)
    {
      v46 = *(_WORD *)(v19 + 30);
      if ((v46 & 0x100) != 0)
      {
        if ((v46 & 0x80) == 0)
          break;
      }
      else
      {
        v47 = *(_QWORD *)(v19 + 80);
        if (v47)
        {
          v48 = *(unsigned __int8 **)(v47 + 8);
          v49 = *(unsigned int *)(v47 + 4);
          if ((*(_BYTE *)(v47 + 16) & 4) != 0)
          {
            if ((_DWORD)v49)
            {
              while (1)
              {
                v50 = *v48;
                v26 = v50 > 0x20;
                v51 = (1 << v50) & 0x100003600;
                if (v26 || v51 == 0)
                  break;
                ++v48;
                if (!--v49)
                  goto LABEL_104;
              }
LABEL_106:
              *(_WORD *)(v19 + 30) = v46 & 0xFE7F | 0x100;
              break;
            }
          }
          else if ((_DWORD)v49)
          {
            v53 = 2 * v49;
            do
            {
              v54 = *(unsigned __int16 *)v48;
              v26 = v54 > 0x20;
              v55 = (1 << v54) & 0x100003600;
              if (v26 || v55 == 0)
                goto LABEL_106;
              v48 += 2;
              v53 -= 2;
            }
            while (v53);
          }
        }
LABEL_104:
        *(_WORD *)(v19 + 30) = v46 | 0x180;
      }
      v19 = *(_QWORD *)(v19 + 56);
      if (!v19)
        goto LABEL_135;
    }
    if (v17)
    {
      v57 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(v19 + 56);
        if (!v19)
          break;
        while ((*(_WORD *)(v19 + 28) & 2) != 0)
        {
          v58 = *(_WORD *)(v19 + 30);
          if ((v58 & 0x100) != 0)
          {
            if ((v58 & 0x80) == 0)
              break;
          }
          else
          {
            v59 = *(_QWORD *)(v19 + 80);
            if (v59)
            {
              v60 = *(unsigned __int8 **)(v59 + 8);
              v61 = *(unsigned int *)(v59 + 4);
              if ((*(_BYTE *)(v59 + 16) & 4) != 0)
              {
                if ((_DWORD)v61)
                {
                  while (1)
                  {
                    v62 = *v60;
                    v26 = v62 > 0x20;
                    v63 = (1 << v62) & 0x100003600;
                    if (v26 || v63 == 0)
                      break;
                    ++v60;
                    if (!--v61)
                      goto LABEL_131;
                  }
LABEL_132:
                  *(_WORD *)(v19 + 30) = v58 & 0xFE7F | 0x100;
                  break;
                }
              }
              else if ((_DWORD)v61)
              {
                v65 = 2 * v61;
                do
                {
                  v66 = *(unsigned __int16 *)v60;
                  v26 = v66 > 0x20;
                  v67 = (1 << v66) & 0x100003600;
                  if (v26 || v67 == 0)
                    goto LABEL_132;
                  v60 += 2;
                  v65 -= 2;
                }
                while (v65);
              }
            }
LABEL_131:
            *(_WORD *)(v19 + 30) = v58 | 0x180;
          }
          v2 = 0;
          v19 = *(_QWORD *)(v19 + 56);
          if (!v19)
            goto LABEL_136;
        }
        ++v57;
        v2 = (WebCore::InspectorDOMAgent *)v19;
        if (v57 == v17)
          goto LABEL_136;
      }
LABEL_135:
      v2 = 0;
      goto LABEL_136;
    }
    v2 = (WebCore::InspectorDOMAgent *)v19;
LABEL_136:
    v69 = *((unsigned int *)v85 + 2);
    if (v69 <= v86)
    {
      v71 = 0x100000000;
      v73 = "";
      if (!v2)
        return v2;
      goto LABEL_147;
    }
    v70 = v87;
    if (v69 - v86 <= v87)
    {
      if (!v86)
      {
        v73 = (unsigned __int8 *)*v85;
        v71 = (uint64_t)v85[1];
        if (!v2)
          return v2;
        goto LABEL_147;
      }
      v70 = v69 - v86;
    }
    v71 = v70;
    v72 = v69 - v86;
    if (!*((_BYTE *)v85 + 12))
      break;
    if (v72 < v70)
      goto LABEL_175;
    v73 = (unsigned __int8 *)&(*v85)[v86];
    v71 = v70 | 0x100000000;
    if (!v2)
      return v2;
LABEL_147:
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InspectorDOMAgent *))(*(_QWORD *)v2 + 104))(&v84, v2);
    v74 = (unint64_t)v84;
    if (v84)
    {
      v75 = (unsigned __int8 *)*((_QWORD *)v84 + 1);
      v74 = *((unsigned int *)v84 + 1);
      v76 = ((unint64_t)*((unsigned int *)v84 + 4) >> 2) & 1;
    }
    else
    {
      v75 = 0;
      v76 = 1;
    }
    v78 = WTF::operator==(v75, v74 | (v76 << 32), v73, v71);
    v79 = v84;
    v84 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
      {
        WTF::StringImpl::destroy(v79, v77);
        if (!v78)
          return 0;
        goto LABEL_153;
      }
      *(_DWORD *)v79 -= 2;
    }
    if (!v78)
      return 0;
LABEL_153:
    result = (WebCore::InspectorDOMAgent *)WTF::StringView::SplitResult::Iterator::operator++();
    v6 = v86;
    if (v86 == (_DWORD)v90 && v88)
      return v2;
  }
  if (v72 >= v70)
  {
    v73 = (unsigned __int8 *)&(*v85)[2 * v86];
    if (!v2)
      return v2;
    goto LABEL_147;
  }
LABEL_175:
  __break(1u);
  return result;
}

uint64_t WebCore::InspectorDOMAgent::pushNodeByPathToFrontend@<X0>(WebCore::InspectorDOMAgent **this@<X0>, const WTF::String **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorDOMAgent *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t result;
  WTF::StringImpl *v9;

  v5 = WebCore::InspectorDOMAgent::nodeForPath(this[15], *a2);
  if (v5)
  {
    v9 = 0;
    v7 = WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)this, (WebCore::Node *)&v9, v5);
    result = (uint64_t)v9;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        result = WTF::StringImpl::destroy(v9, v6);
        if (v7)
          goto LABEL_6;
LABEL_9:
        *(_QWORD *)a3 = 0;
        goto LABEL_10;
      }
      *(_DWORD *)v9 -= 2;
    }
    if (v7)
    {
LABEL_6:
      *(_DWORD *)a3 = v7;
      *(_DWORD *)(a3 + 8) = 0;
      return result;
    }
    goto LABEL_9;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_10:
  *(_DWORD *)(a3 + 8) = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::pushNodeByPathToFrontend@<X0>(WebCore::InspectorDOMAgent **this@<X0>, const WTF::String **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::InspectorDOMAgent *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t result;
  WTF::StringImpl *v9;

  v5 = WebCore::InspectorDOMAgent::nodeForPath(this[11], *a2);
  if (v5)
  {
    v9 = 0;
    v7 = WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)(this - 4), (WebCore::Node *)&v9, v5);
    result = (uint64_t)v9;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        result = WTF::StringImpl::destroy(v9, v6);
        if (v7)
          goto LABEL_6;
LABEL_9:
        *(_QWORD *)a3 = 0;
        goto LABEL_10;
      }
      *(_DWORD *)v9 -= 2;
    }
    if (v7)
    {
LABEL_6:
      *(_DWORD *)a3 = v7;
      *(_DWORD *)(a3 + 8) = 0;
      return result;
    }
    goto LABEL_9;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_10:
  *(_DWORD *)(a3 + 8) = 1;
  return result;
}

uint64_t WebCore::InspectorDOMAgent::setAllowEditingUserAgentShadowTrees@<X0>(uint64_t this@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  *(_BYTE *)(this + 441) = a2;
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMAgent::setAllowEditingUserAgentShadowTrees@<X0>(uint64_t this@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  *(_BYTE *)(this + 409) = a2;
  *a3 = 0;
  a3[8] = 0;
  return this;
}

WTF::StringImpl *WebCore::InspectorDOMAgent::getMediaStats@<X0>(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WebCore::HTMLMediaElement *v6;
  WTF::JSONImpl::Object *v7;
  uint64_t v8;
  WTF::JSONImpl::Object *VideoPlaybackQuality;
  unsigned int *v10;
  uint64_t v11;
  WTF::JSONImpl::Value *v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::JSONImpl::Value *v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::JSONImpl::Value *v28;
  WTF::StringImpl *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::JSONImpl::Object *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  WTF::JSONImpl::Value *v58;
  WTF::StringImpl *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::JSONImpl::Value *v67;
  WTF::StringImpl *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WebCore::LocalDOMWindow *v81;
  double v82;
  WTF::JSONImpl::Value *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  WTF *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  _BOOL8 v93;
  WTF::StringImpl *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  unsigned int v100;
  WTF::StringImpl *v101;
  const WTF::String *v102;
  WTF::StringImpl *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  const WTF::String *v110;
  WTF::StringImpl *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  const WTF::String *v118;
  WTF::StringImpl *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  WTF::JSONImpl::Value *v127;
  WTF::StringImpl *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  const WTF::String *v136;
  WTF::StringImpl *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  const WTF::String *v145;
  WTF::StringImpl *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  double v160;
  WTF::JSONImpl::Value *v161;
  WTF::StringImpl *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::JSONImpl::Value *v169;
  WTF::StringImpl *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::JSONImpl::Value *v177;
  WTF::StringImpl *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  uint64_t v193;
  uint64_t v194;
  WTF::JSONImpl::Value *v195;
  WTF::StringImpl *v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  const WTF::String *v204;
  WTF::StringImpl *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  const WTF::String *v213;
  WTF::StringImpl *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::JSONImpl::Value *v221;
  WTF::StringImpl *v222;
  unint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  double v230;
  WTF::JSONImpl::Value *v231;
  WTF::StringImpl *v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *result;
  const WTF::String *v251;
  WTF::StringImpl *v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  _DWORD **v259;
  uint64_t v260;
  _DWORD *v261;
  _DWORD **v262;
  uint64_t v263;
  _DWORD *v264;
  _DWORD **v265;
  uint64_t v266;
  _DWORD *v267;
  _DWORD **v268;
  uint64_t v269;
  _DWORD *v270;
  _DWORD **v271;
  uint64_t v272;
  _DWORD *v273;
  _DWORD **v274;
  uint64_t v275;
  _DWORD *v276;
  _DWORD **v277;
  uint64_t v278;
  _DWORD *v279;
  _DWORD **v280;
  uint64_t v281;
  _DWORD *v282;
  _DWORD **v283;
  uint64_t v284;
  _DWORD *v285;
  _DWORD **v286;
  uint64_t v287;
  _DWORD *v288;
  _DWORD **v289;
  uint64_t v290;
  _DWORD *v291;
  _DWORD **v292;
  uint64_t v293;
  _DWORD *v294;
  _DWORD **v295;
  uint64_t v296;
  _DWORD *v297;
  _DWORD **v298;
  uint64_t v299;
  _DWORD *v300;
  _DWORD **v301;
  uint64_t v302;
  _DWORD *v303;
  _DWORD **v304;
  uint64_t v305;
  _DWORD *v306;
  _DWORD **v307;
  uint64_t v308;
  _DWORD *v309;
  _DWORD **v310;
  uint64_t v311;
  _DWORD *v312;
  _DWORD **v313;
  uint64_t v314;
  _DWORD *v315;
  _DWORD **v316;
  uint64_t v317;
  _DWORD *v318;
  _DWORD **v319;
  uint64_t v320;
  _DWORD *v321;
  _DWORD **v322;
  uint64_t v323;
  _DWORD *v324;
  _DWORD **v325;
  uint64_t v326;
  _DWORD *v327;
  _DWORD **v328;
  uint64_t v329;
  _DWORD *v330;
  _DWORD **v331;
  uint64_t v332;
  _DWORD *v333;
  _DWORD **v334;
  uint64_t v335;
  _DWORD *v336;
  _DWORD **v337;
  uint64_t v338;
  _DWORD *v339;
  WTF::StringImpl *v340;
  WTF::StringImpl *v341;
  WTF::StringImpl *v342;
  WTF::StringImpl *v343;
  WTF::StringImpl *v344;
  WTF::StringImpl *v345;
  WTF::StringImpl *v346;
  _QWORD v347[2];
  char v348;

  v344 = 0;
  v4 = WebCore::InspectorDOMAgent::assertElement(this, &v344, a2);
  if (!v4)
  {
    v249 = v344;
    if (v344)
      *(_DWORD *)v344 += 2;
    *(_QWORD *)a3 = v249;
    goto LABEL_388;
  }
  v6 = (WebCore::HTMLMediaElement *)v4;
  v7 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 824))(v4);
  if ((v7 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_388:
    *(_DWORD *)(a3 + 8) = 1;
    goto LABEL_389;
  }
  WTF::JSONImpl::Object::create(v7);
  v8 = v347[0];
  VideoPlaybackQuality = (WTF::JSONImpl::Object *)WebCore::HTMLMediaElement::getVideoPlaybackQuality(v6, &v343);
  v10 = (unsigned int *)v343;
  if (v343)
  {
    WTF::JSONImpl::Object::create(VideoPlaybackQuality);
    v11 = v347[0];
    v12 = (WTF::JSONImpl::Value *)v10[4];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v12);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v11 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v14 = (uint64_t *)(v11 + 24);
      v15 = *(unsigned int *)(v11 + 36);
      if ((_DWORD)v15 == *(_DWORD *)(v11 + 32))
      {
        v268 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v15 + 1, (unint64_t)&v345);
        v15 = *(unsigned int *)(v11 + 36);
        v269 = *(_QWORD *)(v11 + 24);
        v270 = *v268;
        if (*v268)
          *v270 += 2;
        *(_QWORD *)(v269 + 8 * v15) = v270;
      }
      else
      {
        v16 = *v14;
        v17 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v16 + 8 * v15) = v17;
      }
      *(_DWORD *)(v11 + 36) = v15 + 1;
    }
    v18 = v346;
    v346 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v18;
    }
    v19 = v345;
    v345 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v13);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = (WTF::JSONImpl::Value *)v10[5];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v20);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v11 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v22 = (uint64_t *)(v11 + 24);
      v23 = *(unsigned int *)(v11 + 36);
      if ((_DWORD)v23 == *(_DWORD *)(v11 + 32))
      {
        v271 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v345);
        v23 = *(unsigned int *)(v11 + 36);
        v272 = *(_QWORD *)(v11 + 24);
        v273 = *v271;
        if (*v271)
          *v273 += 2;
        *(_QWORD *)(v272 + 8 * v23) = v273;
      }
      else
      {
        v24 = *v22;
        v25 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v24 + 8 * v23) = v25;
      }
      *(_DWORD *)(v11 + 36) = v23 + 1;
    }
    v26 = v346;
    v346 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v26;
    }
    v27 = v345;
    v345 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v21);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = (WTF::JSONImpl::Value *)v10[7];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v28);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v11 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v30 = (uint64_t *)(v11 + 24);
      v31 = *(unsigned int *)(v11 + 36);
      if ((_DWORD)v31 == *(_DWORD *)(v11 + 32))
      {
        v274 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)&v345);
        v31 = *(unsigned int *)(v11 + 36);
        v275 = *(_QWORD *)(v11 + 24);
        v276 = *v274;
        if (*v274)
          *v276 += 2;
        *(_QWORD *)(v275 + 8 * v31) = v276;
      }
      else
      {
        v32 = *v30;
        v33 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v32 + 8 * v31) = v33;
      }
      *(_DWORD *)(v11 + 36) = v31 + 1;
    }
    v34 = v346;
    v346 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v34;
    }
    v35 = v345;
    v345 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v29);
      else
        *(_DWORD *)v35 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v345 = (WTF::StringImpl *)v11;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v346, (const WTF::StringImpl *)&v345, (uint64_t)v347);
    if (v348)
    {
      v37 = (uint64_t *)(v8 + 24);
      v38 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v38 == *(_DWORD *)(v8 + 32))
      {
        v277 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v346);
        v38 = *(unsigned int *)(v8 + 36);
        v278 = *(_QWORD *)(v8 + 24);
        v279 = *v277;
        if (*v277)
          *v279 += 2;
        *(_QWORD *)(v278 + 8 * v38) = v279;
      }
      else
      {
        v39 = *v37;
        v40 = v346;
        if (v346)
          *(_DWORD *)v346 += 2;
        *(_QWORD *)(v39 + 8 * v38) = v40;
      }
      *(_DWORD *)(v8 + 36) = v38 + 1;
    }
    v41 = v345;
    v345 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v41;
    }
    v42 = v346;
    v346 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v36);
      else
        *(_DWORD *)v42 -= 2;
    }
    if (*v10 == 1)
      WTF::fastFree((WTF *)v10, v36);
    else
      --*v10;
  }
  WebCore::HTMLMediaElement::localizedSourceType(v6, &v343);
  if (v343 && *((_DWORD *)v343 + 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v343, v251);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v253 = (uint64_t *)(v8 + 24);
      v254 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v254 == *(_DWORD *)(v8 + 32))
      {
        v337 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v253, v254 + 1, (unint64_t)&v345);
        v254 = *(unsigned int *)(v8 + 36);
        v338 = *(_QWORD *)(v8 + 24);
        v339 = *v337;
        if (*v337)
          *v339 += 2;
        *(_QWORD *)(v338 + 8 * v254) = v339;
      }
      else
      {
        v255 = *v253;
        v256 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v255 + 8 * v254) = v256;
      }
      *(_DWORD *)(v8 + 36) = v254 + 1;
    }
    v257 = v346;
    v346 = 0;
    if (v257)
    {
      if (*(_DWORD *)v257 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v257;
    }
    v258 = v345;
    v345 = 0;
    if (v258)
    {
      if (*(_DWORD *)v258 == 2)
        WTF::StringImpl::destroy(v258, v252);
      else
        *(_DWORD *)v258 -= 2;
    }
  }
  v43 = *((_QWORD *)v6 + 170);
  if (v43 && (v44 = *(unsigned int *)(v43 + 68), (_DWORD)v44))
  {
    v45 = 0;
    v46 = *(_QWORD *)(v43 + 56);
    while (1)
    {
      v47 = *(_QWORD *)(v46 + 8 * v45);
      if (*(_DWORD *)(v47 + 40) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x195E2D3B0);
      }
      if (*(_BYTE *)(v47 + 184))
        break;
      if (v44 == ++v45)
        goto LABEL_61;
    }
    v48 = 0;
    if ((v45 & 0x80000000) == 0 && v44 > v45)
    {
      v48 = *(_QWORD *)(v46 + 8 * v45);
      if (v48)
      {
        if (*(_DWORD *)(v48 + 40) != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x195E2D0B0);
        }
      }
    }
  }
  else
  {
LABEL_61:
    v48 = 0;
  }
  v49 = *((_QWORD *)v6 + 168);
  if (v49 && (v50 = *(unsigned int *)(v49 + 68), (_DWORD)v50))
  {
    v51 = *(_QWORD **)(v49 + 56);
    v52 = 8 * v50;
    while (!*v51 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v51 + 48))(*v51))
    {
      ++v51;
      v52 -= 8;
      if (!v52)
        goto LABEL_68;
    }
    v53 = *v51;
    if (*v51 && *(_DWORD *)(v53 + 40) != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x195E2D0E4);
    }
  }
  else
  {
LABEL_68:
    v53 = 0;
  }
  v54 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v6 + 2248))(v6);
  v56 = v55;
  WTF::JSONImpl::Object::create(v54);
  v57 = v347[0];
  v58 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v58, (double)(int)v56 * 0.015625);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v57 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
  if (v348)
  {
    v60 = (uint64_t *)(v57 + 24);
    v61 = *(unsigned int *)(v57 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v57 + 32))
    {
      v259 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v345);
      v61 = *(unsigned int *)(v57 + 36);
      v260 = *(_QWORD *)(v57 + 24);
      v261 = *v259;
      if (*v259)
        *v261 += 2;
      *(_QWORD *)(v260 + 8 * v61) = v261;
    }
    else
    {
      v62 = *v60;
      v63 = v345;
      if (v345)
        *(_DWORD *)v345 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v57 + 36) = v61 + 1;
  }
  v64 = HIDWORD(v56);
  v65 = v346;
  v346 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v65;
  }
  v66 = v345;
  v345 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v59);
    else
      *(_DWORD *)v66 -= 2;
  }
  v67 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v67, (double)(int)v64 * 0.015625);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v57 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
  if (v348)
  {
    v69 = (uint64_t *)(v57 + 24);
    v70 = *(unsigned int *)(v57 + 36);
    if ((_DWORD)v70 == *(_DWORD *)(v57 + 32))
    {
      v262 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v345);
      v70 = *(unsigned int *)(v57 + 36);
      v263 = *(_QWORD *)(v57 + 24);
      v264 = *v262;
      if (*v262)
        *v264 += 2;
      *(_QWORD *)(v263 + 8 * v70) = v264;
    }
    else
    {
      v71 = *v69;
      v72 = v345;
      if (v345)
        *(_DWORD *)v345 += 2;
      *(_QWORD *)(v71 + 8 * v70) = v72;
    }
    *(_DWORD *)(v57 + 36) = v70 + 1;
  }
  v73 = v346;
  v346 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v73;
  }
  v74 = v345;
  v345 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v68);
    else
      *(_DWORD *)v74 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v345 = (WTF::StringImpl *)v57;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v346, (const WTF::StringImpl *)&v345, (uint64_t)v347);
  if (v348)
  {
    v75 = (uint64_t *)(v8 + 24);
    v76 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v76 == *(_DWORD *)(v8 + 32))
    {
      v265 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v75, v76 + 1, (unint64_t)&v346);
      v76 = *(unsigned int *)(v8 + 36);
      v266 = *(_QWORD *)(v8 + 24);
      v267 = *v265;
      if (*v265)
        *v267 += 2;
      *(_QWORD *)(v266 + 8 * v76) = v267;
    }
    else
    {
      v77 = *v75;
      v78 = v346;
      if (v346)
        *(_DWORD *)v346 += 2;
      *(_QWORD *)(v77 + 8 * v76) = v78;
    }
    *(_DWORD *)(v8 + 36) = v76 + 1;
  }
  v79 = v345;
  v345 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v79;
  }
  v80 = v346;
  v346 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v5);
    else
      *(_DWORD *)v80 -= 2;
  }
  v81 = *(WebCore::LocalDOMWindow **)(*(_QWORD *)(*((_QWORD *)v6 + 5) + 8) + 696);
  if (v81)
  {
    v82 = WebCore::LocalDOMWindow::devicePixelRatio(v81);
    v83 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v83, v82);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v84 = (uint64_t *)(v8 + 24);
      v85 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v85 == *(_DWORD *)(v8 + 32))
      {
        v280 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v345);
        v85 = *(unsigned int *)(v8 + 36);
        v281 = *(_QWORD *)(v8 + 24);
        v282 = *v280;
        if (*v280)
          *v282 += 2;
        *(_QWORD *)(v281 + 8 * v85) = v282;
      }
      else
      {
        v86 = *v84;
        v87 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v86 + 8 * v85) = v87;
      }
      *(_DWORD *)(v8 + 36) = v85 + 1;
    }
    v88 = v346;
    v346 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v88;
    }
    v81 = v345;
    v345 = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
      {
        v81 = (WebCore::LocalDOMWindow *)WTF::StringImpl::destroy(v81, v5);
        if (v48)
          goto LABEL_119;
        goto LABEL_295;
      }
      *(_DWORD *)v81 -= 2;
    }
  }
  if (v48)
  {
LABEL_119:
    v89 = *(_QWORD *)(v48 + 176);
    v90 = *(WTF **)(v89 + 48);
    ++*(_DWORD *)v90;
    v91 = (WTF::StringImpl *)WTF::JSONImpl::Object::create(v81);
    v92 = v347[0];
    if (*((unsigned __int16 *)v90 + 5) >= 0x100u)
    {
      v93 = *((_WORD *)v90 + 5) != 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v93);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v92 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
      if (v348)
      {
        v95 = (uint64_t *)(v92 + 24);
        v96 = *(unsigned int *)(v92 + 36);
        if ((_DWORD)v96 == *(_DWORD *)(v92 + 32))
        {
          v325 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v95, v96 + 1, (unint64_t)&v345);
          v96 = *(unsigned int *)(v92 + 36);
          v326 = *(_QWORD *)(v92 + 24);
          v327 = *v325;
          if (*v325)
            *v327 += 2;
          *(_QWORD *)(v326 + 8 * v96) = v327;
        }
        else
        {
          v97 = *v95;
          v98 = v345;
          if (v345)
            *(_DWORD *)v345 += 2;
          *(_QWORD *)(v97 + 8 * v96) = v98;
        }
        *(_DWORD *)(v92 + 36) = v96 + 1;
      }
      v99 = v346;
      v346 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v99;
      }
      v91 = v345;
      v345 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
          v91 = (WTF::StringImpl *)WTF::StringImpl::destroy(v91, v94);
        else
          *(_DWORD *)v91 -= 2;
      }
    }
    v100 = *((unsigned __int16 *)v90 + 4);
    if (v100 >= 0x100)
    {
      {
        WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_0::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_1::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_2::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_3::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_4::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_5::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_0::operator() const(void)::impl;
        *(_QWORD *)algn_1EE2F4D48 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_1::operator() const(void)::impl;
        qword_1EE2F4D50 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_2::operator() const(void)::impl;
        unk_1EE2F4D58 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_3::operator() const(void)::impl;
        qword_1EE2F4D60 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_4::operator() const(void)::impl;
        unk_1EE2F4D68 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_5::operator() const(void)::impl;
        WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_6::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_7::operator() const(void)::impl += 2;
        qword_1EE2F4D70 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_6::operator() const(void)::impl;
        unk_1EE2F4D78 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_7::operator() const(void)::impl;
        WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_8::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_9::operator() const(void)::impl += 2;
        qword_1EE2F4D80 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_8::operator() const(void)::impl;
        unk_1EE2F4D88 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_9::operator() const(void)::impl;
      }
      v101 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::values[v100];
      if (v101)
        *(_DWORD *)v101 += 2;
      v342 = v101;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v342, v102);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v92 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
      if (v348)
      {
        v104 = (uint64_t *)(v92 + 24);
        v105 = *(unsigned int *)(v92 + 36);
        if ((_DWORD)v105 == *(_DWORD *)(v92 + 32))
        {
          v328 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v104, v105 + 1, (unint64_t)&v345);
          v105 = *(unsigned int *)(v92 + 36);
          v329 = *(_QWORD *)(v92 + 24);
          v330 = *v328;
          if (*v328)
            *v330 += 2;
          *(_QWORD *)(v329 + 8 * v105) = v330;
        }
        else
        {
          v106 = *v104;
          v107 = v345;
          if (v345)
            *(_DWORD *)v345 += 2;
          *(_QWORD *)(v106 + 8 * v105) = v107;
        }
        *(_DWORD *)(v92 + 36) = v105 + 1;
      }
      v108 = v346;
      v346 = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v108;
      }
      v109 = v345;
      v345 = 0;
      if (v109)
      {
        if (*(_DWORD *)v109 == 2)
          WTF::StringImpl::destroy(v109, v103);
        else
          *(_DWORD *)v109 -= 2;
      }
      v91 = v342;
      v342 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
          v91 = (WTF::StringImpl *)WTF::StringImpl::destroy(v91, v103);
        else
          *(_DWORD *)v91 -= 2;
      }
    }
    if (*((unsigned __int16 *)v90 + 2) >= 0x100u)
    {
      WebCore::convertEnumerationToString(*((_WORD *)v90 + 2), &v342);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v342, v110);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v92 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
      if (v348)
      {
        v112 = (uint64_t *)(v92 + 24);
        v113 = *(unsigned int *)(v92 + 36);
        if ((_DWORD)v113 == *(_DWORD *)(v92 + 32))
        {
          v331 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, v113 + 1, (unint64_t)&v345);
          v113 = *(unsigned int *)(v92 + 36);
          v332 = *(_QWORD *)(v92 + 24);
          v333 = *v331;
          if (*v331)
            *v333 += 2;
          *(_QWORD *)(v332 + 8 * v113) = v333;
        }
        else
        {
          v114 = *v112;
          v115 = v345;
          if (v345)
            *(_DWORD *)v345 += 2;
          *(_QWORD *)(v114 + 8 * v113) = v115;
        }
        *(_DWORD *)(v92 + 36) = v113 + 1;
      }
      v116 = v346;
      v346 = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v116;
      }
      v117 = v345;
      v345 = 0;
      if (v117)
      {
        if (*(_DWORD *)v117 == 2)
          WTF::StringImpl::destroy(v117, v111);
        else
          *(_DWORD *)v117 -= 2;
      }
      v91 = v342;
      v342 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
          v91 = (WTF::StringImpl *)WTF::StringImpl::destroy(v91, v111);
        else
          *(_DWORD *)v91 -= 2;
      }
    }
    if (*((unsigned __int16 *)v90 + 3) >= 0x100u)
    {
      WebCore::convertEnumerationToString(*((_WORD *)v90 + 3), &v342);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v342, v118);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v92 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
      if (v348)
      {
        v120 = (uint64_t *)(v92 + 24);
        v121 = *(unsigned int *)(v92 + 36);
        if ((_DWORD)v121 == *(_DWORD *)(v92 + 32))
        {
          v334 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v120, v121 + 1, (unint64_t)&v345);
          v121 = *(unsigned int *)(v92 + 36);
          v335 = *(_QWORD *)(v92 + 24);
          v336 = *v334;
          if (*v334)
            *v336 += 2;
          *(_QWORD *)(v335 + 8 * v121) = v336;
        }
        else
        {
          v122 = *v120;
          v123 = v345;
          if (v345)
            *(_DWORD *)v345 += 2;
          *(_QWORD *)(v122 + 8 * v121) = v123;
        }
        *(_DWORD *)(v92 + 36) = v121 + 1;
      }
      v124 = v346;
      v346 = 0;
      if (v124)
      {
        if (*(_DWORD *)v124 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v124;
      }
      v125 = v345;
      v345 = 0;
      if (v125)
      {
        if (*(_DWORD *)v125 == 2)
          WTF::StringImpl::destroy(v125, v119);
        else
          *(_DWORD *)v125 -= 2;
      }
      v91 = v342;
      v342 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
          v91 = (WTF::StringImpl *)WTF::StringImpl::destroy(v91, v119);
        else
          *(_DWORD *)v91 -= 2;
      }
    }
    WTF::JSONImpl::Object::create(v91);
    v126 = v347[0];
    v127 = (WTF::JSONImpl::Value *)*(unsigned int *)(v89 + 40);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v127);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v126 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v129 = (uint64_t *)(v126 + 24);
      v130 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v130 == *(_DWORD *)(v126 + 32))
      {
        v283 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v129, v130 + 1, (unint64_t)&v345);
        v130 = *(unsigned int *)(v126 + 36);
        v284 = *(_QWORD *)(v126 + 24);
        v285 = *v283;
        if (*v283)
          *v285 += 2;
        *(_QWORD *)(v284 + 8 * v130) = v285;
      }
      else
      {
        v131 = *v129;
        v132 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v131 + 8 * v130) = v132;
      }
      *(_DWORD *)(v126 + 36) = v130 + 1;
    }
    v133 = v346;
    v346 = 0;
    if (v133)
    {
      if (*(_DWORD *)v133 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v133;
    }
    v134 = v345;
    v345 = 0;
    if (v134)
    {
      if (*(_DWORD *)v134 == 2)
        WTF::StringImpl::destroy(v134, v128);
      else
        *(_DWORD *)v134 -= 2;
    }
    v135 = *(WTF::StringImpl **)(v89 + 8);
    if (v135)
      *(_DWORD *)v135 += 2;
    v342 = v135;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v342, v136);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v126 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v138 = (uint64_t *)(v126 + 24);
      v139 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v139 == *(_DWORD *)(v126 + 32))
      {
        v286 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v138, v139 + 1, (unint64_t)&v345);
        v139 = *(unsigned int *)(v126 + 36);
        v287 = *(_QWORD *)(v126 + 24);
        v288 = *v286;
        if (*v286)
          *v288 += 2;
        *(_QWORD *)(v287 + 8 * v139) = v288;
      }
      else
      {
        v140 = *v138;
        v141 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v140 + 8 * v139) = v141;
      }
      *(_DWORD *)(v126 + 36) = v139 + 1;
    }
    v142 = v346;
    v346 = 0;
    if (v142)
    {
      if (*(_DWORD *)v142 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v142;
    }
    v143 = v345;
    v345 = 0;
    if (v143)
    {
      if (*(_DWORD *)v143 == 2)
        WTF::StringImpl::destroy(v143, v137);
      else
        *(_DWORD *)v143 -= 2;
    }
    v144 = *(WTF::StringImpl **)(v89 + 8);
    if (v144)
      *(_DWORD *)v144 += 2;
    v340 = v144;
    WebCore::humanReadableStringFromCodecString(&v340, &v341);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v341, v145);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v126 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v147 = (uint64_t *)(v126 + 24);
      v148 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v148 == *(_DWORD *)(v126 + 32))
      {
        v289 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v147, v148 + 1, (unint64_t)&v345);
        v148 = *(unsigned int *)(v126 + 36);
        v290 = *(_QWORD *)(v126 + 24);
        v291 = *v289;
        if (*v289)
          *v291 += 2;
        *(_QWORD *)(v290 + 8 * v148) = v291;
      }
      else
      {
        v149 = *v147;
        v150 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v149 + 8 * v148) = v150;
      }
      *(_DWORD *)(v126 + 36) = v148 + 1;
    }
    v151 = v346;
    v346 = 0;
    if (v151)
    {
      if (*(_DWORD *)v151 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v151;
    }
    v152 = v345;
    v345 = 0;
    if (v152)
    {
      if (*(_DWORD *)v152 == 2)
        WTF::StringImpl::destroy(v152, v146);
      else
        *(_DWORD *)v152 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v345 = (WTF::StringImpl *)v92;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v126 + 16), &v346, (const WTF::StringImpl *)&v345, (uint64_t)v347);
    if (v348)
    {
      v154 = (uint64_t *)(v126 + 24);
      v155 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v155 == *(_DWORD *)(v126 + 32))
      {
        v292 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v154, v155 + 1, (unint64_t)&v346);
        v155 = *(unsigned int *)(v126 + 36);
        v293 = *(_QWORD *)(v126 + 24);
        v294 = *v292;
        if (*v292)
          *v294 += 2;
        *(_QWORD *)(v293 + 8 * v155) = v294;
      }
      else
      {
        v156 = *v154;
        v157 = v346;
        if (v346)
          *(_DWORD *)v346 += 2;
        *(_QWORD *)(v156 + 8 * v155) = v157;
      }
      *(_DWORD *)(v126 + 36) = v155 + 1;
    }
    v158 = v345;
    v345 = 0;
    if (v158)
    {
      if (*(_DWORD *)v158 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v158;
    }
    v159 = v346;
    v346 = 0;
    if (v159)
    {
      if (*(_DWORD *)v159 == 2)
        WTF::StringImpl::destroy(v159, v153);
      else
        *(_DWORD *)v159 -= 2;
    }
    v160 = *(double *)(v89 + 32);
    v161 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v161, v160);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v126 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v163 = (uint64_t *)(v126 + 24);
      v164 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v164 == *(_DWORD *)(v126 + 32))
      {
        v295 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v163, v164 + 1, (unint64_t)&v345);
        v164 = *(unsigned int *)(v126 + 36);
        v296 = *(_QWORD *)(v126 + 24);
        v297 = *v295;
        if (*v295)
          *v297 += 2;
        *(_QWORD *)(v296 + 8 * v164) = v297;
      }
      else
      {
        v165 = *v163;
        v166 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v165 + 8 * v164) = v166;
      }
      *(_DWORD *)(v126 + 36) = v164 + 1;
    }
    v167 = v346;
    v346 = 0;
    if (v167)
    {
      if (*(_DWORD *)v167 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v167;
    }
    v168 = v345;
    v345 = 0;
    if (v168)
    {
      if (*(_DWORD *)v168 == 2)
        WTF::StringImpl::destroy(v168, v162);
      else
        *(_DWORD *)v168 -= 2;
    }
    v169 = (WTF::JSONImpl::Value *)*(unsigned int *)(v89 + 20);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v169);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v126 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v171 = (uint64_t *)(v126 + 24);
      v172 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v172 == *(_DWORD *)(v126 + 32))
      {
        v298 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v171, v172 + 1, (unint64_t)&v345);
        v172 = *(unsigned int *)(v126 + 36);
        v299 = *(_QWORD *)(v126 + 24);
        v300 = *v298;
        if (*v298)
          *v300 += 2;
        *(_QWORD *)(v299 + 8 * v172) = v300;
      }
      else
      {
        v173 = *v171;
        v174 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v173 + 8 * v172) = v174;
      }
      *(_DWORD *)(v126 + 36) = v172 + 1;
    }
    v175 = v346;
    v346 = 0;
    if (v175)
    {
      if (*(_DWORD *)v175 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v175;
    }
    v176 = v345;
    v345 = 0;
    if (v176)
    {
      if (*(_DWORD *)v176 == 2)
        WTF::StringImpl::destroy(v176, v170);
      else
        *(_DWORD *)v176 -= 2;
    }
    v177 = (WTF::JSONImpl::Value *)*(unsigned int *)(v89 + 16);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v177);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v126 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v179 = (uint64_t *)(v126 + 24);
      v180 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v180 == *(_DWORD *)(v126 + 32))
      {
        v301 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v179, v180 + 1, (unint64_t)&v345);
        v180 = *(unsigned int *)(v126 + 36);
        v302 = *(_QWORD *)(v126 + 24);
        v303 = *v301;
        if (*v301)
          *v303 += 2;
        *(_QWORD *)(v302 + 8 * v180) = v303;
      }
      else
      {
        v181 = *v179;
        v182 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v181 + 8 * v180) = v182;
      }
      *(_DWORD *)(v126 + 36) = v180 + 1;
    }
    v183 = v346;
    v346 = 0;
    if (v183)
    {
      if (*(_DWORD *)v183 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v183;
    }
    v184 = v345;
    v345 = 0;
    if (v184)
    {
      if (*(_DWORD *)v184 == 2)
        WTF::StringImpl::destroy(v184, v178);
      else
        *(_DWORD *)v184 -= 2;
    }
    v185 = v341;
    v341 = 0;
    if (v185)
    {
      if (*(_DWORD *)v185 == 2)
        WTF::StringImpl::destroy(v185, v178);
      else
        *(_DWORD *)v185 -= 2;
    }
    v186 = v340;
    v340 = 0;
    if (v186)
    {
      if (*(_DWORD *)v186 == 2)
        WTF::StringImpl::destroy(v186, v178);
      else
        *(_DWORD *)v186 -= 2;
    }
    v187 = v342;
    v342 = 0;
    if (v187)
    {
      if (*(_DWORD *)v187 == 2)
        WTF::StringImpl::destroy(v187, v178);
      else
        *(_DWORD *)v187 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v345 = (WTF::StringImpl *)v126;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v346, (const WTF::StringImpl *)&v345, (uint64_t)v347);
    if (v348)
    {
      v188 = (uint64_t *)(v8 + 24);
      v189 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v189 == *(_DWORD *)(v8 + 32))
      {
        v304 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v188, v189 + 1, (unint64_t)&v346);
        v189 = *(unsigned int *)(v8 + 36);
        v305 = *(_QWORD *)(v8 + 24);
        v306 = *v304;
        if (*v304)
          *v306 += 2;
        *(_QWORD *)(v305 + 8 * v189) = v306;
      }
      else
      {
        v190 = *v188;
        v191 = v346;
        if (v346)
          *(_DWORD *)v346 += 2;
        *(_QWORD *)(v190 + 8 * v189) = v191;
      }
      *(_DWORD *)(v8 + 36) = v189 + 1;
    }
    v192 = v345;
    v345 = 0;
    if (v192)
    {
      if (*(_DWORD *)v192 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v192;
    }
    v81 = v346;
    v346 = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
        v81 = (WebCore::LocalDOMWindow *)WTF::StringImpl::destroy(v81, v5);
      else
        *(_DWORD *)v81 -= 2;
    }
    if (*(_DWORD *)v90 == 1)
      v81 = (WebCore::LocalDOMWindow *)WTF::fastFree(v90, v5);
    else
      --*(_DWORD *)v90;
  }
LABEL_295:
  if (v53)
  {
    v193 = *(_QWORD *)(v53 + 184);
    WTF::JSONImpl::Object::create(v81);
    v194 = v347[0];
    v195 = (WTF::JSONImpl::Value *)*(unsigned int *)(v193 + 24);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v195);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v194 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v197 = (uint64_t *)(v194 + 24);
      v198 = *(unsigned int *)(v194 + 36);
      if ((_DWORD)v198 == *(_DWORD *)(v194 + 32))
      {
        v307 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v197, v198 + 1, (unint64_t)&v345);
        v198 = *(unsigned int *)(v194 + 36);
        v308 = *(_QWORD *)(v194 + 24);
        v309 = *v307;
        if (*v307)
          *v309 += 2;
        *(_QWORD *)(v308 + 8 * v198) = v309;
      }
      else
      {
        v199 = *v197;
        v200 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v199 + 8 * v198) = v200;
      }
      *(_DWORD *)(v194 + 36) = v198 + 1;
    }
    v201 = v346;
    v346 = 0;
    if (v201)
    {
      if (*(_DWORD *)v201 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v201;
    }
    v202 = v345;
    v345 = 0;
    if (v202)
    {
      if (*(_DWORD *)v202 == 2)
        WTF::StringImpl::destroy(v202, v196);
      else
        *(_DWORD *)v202 -= 2;
    }
    v203 = *(WTF::StringImpl **)(v193 + 8);
    if (v203)
      *(_DWORD *)v203 += 2;
    v342 = v203;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v342, v204);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v194 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v206 = (uint64_t *)(v194 + 24);
      v207 = *(unsigned int *)(v194 + 36);
      if ((_DWORD)v207 == *(_DWORD *)(v194 + 32))
      {
        v310 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v206, v207 + 1, (unint64_t)&v345);
        v207 = *(unsigned int *)(v194 + 36);
        v311 = *(_QWORD *)(v194 + 24);
        v312 = *v310;
        if (*v310)
          *v312 += 2;
        *(_QWORD *)(v311 + 8 * v207) = v312;
      }
      else
      {
        v208 = *v206;
        v209 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v208 + 8 * v207) = v209;
      }
      *(_DWORD *)(v194 + 36) = v207 + 1;
    }
    v210 = v346;
    v346 = 0;
    if (v210)
    {
      if (*(_DWORD *)v210 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v210;
    }
    v211 = v345;
    v345 = 0;
    if (v211)
    {
      if (*(_DWORD *)v211 == 2)
        WTF::StringImpl::destroy(v211, v205);
      else
        *(_DWORD *)v211 -= 2;
    }
    v212 = *(WTF::StringImpl **)(v193 + 8);
    if (v212)
      *(_DWORD *)v212 += 2;
    v340 = v212;
    WebCore::humanReadableStringFromCodecString(&v340, &v341);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v341, v213);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v194 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v215 = (uint64_t *)(v194 + 24);
      v216 = *(unsigned int *)(v194 + 36);
      if ((_DWORD)v216 == *(_DWORD *)(v194 + 32))
      {
        v313 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v215, v216 + 1, (unint64_t)&v345);
        v216 = *(unsigned int *)(v194 + 36);
        v314 = *(_QWORD *)(v194 + 24);
        v315 = *v313;
        if (*v313)
          *v315 += 2;
        *(_QWORD *)(v314 + 8 * v216) = v315;
      }
      else
      {
        v217 = *v215;
        v218 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v217 + 8 * v216) = v218;
      }
      *(_DWORD *)(v194 + 36) = v216 + 1;
    }
    v219 = v346;
    v346 = 0;
    if (v219)
    {
      if (*(_DWORD *)v219 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v219;
    }
    v220 = v345;
    v345 = 0;
    if (v220)
    {
      if (*(_DWORD *)v220 == 2)
        WTF::StringImpl::destroy(v220, v214);
      else
        *(_DWORD *)v220 -= 2;
    }
    v221 = (WTF::JSONImpl::Value *)*(unsigned int *)(v193 + 20);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v221);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v194 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v224 = (uint64_t *)(v194 + 24);
      v225 = *(unsigned int *)(v194 + 36);
      if ((_DWORD)v225 == *(_DWORD *)(v194 + 32))
      {
        v316 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v224, v225 + 1, (unint64_t)&v345);
        v225 = *(unsigned int *)(v194 + 36);
        v317 = *(_QWORD *)(v194 + 24);
        v318 = *v316;
        if (*v316)
          *v318 += 2;
        *(_QWORD *)(v317 + 8 * v225) = v318;
      }
      else
      {
        v226 = *v224;
        v227 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v226 + 8 * v225) = v227;
      }
      *(_DWORD *)(v194 + 36) = v225 + 1;
    }
    v228 = v346;
    v346 = 0;
    if (v228)
    {
      if (*(_DWORD *)v228 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v228;
    }
    v229 = v345;
    v345 = 0;
    if (v229)
    {
      if (*(_DWORD *)v229 == 2)
        WTF::StringImpl::destroy(v229, v222);
      else
        *(_DWORD *)v229 -= 2;
    }
    LODWORD(v223) = *(_DWORD *)(v193 + 16);
    v230 = (double)v223;
    v231 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v231, v230);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v194 + 16), &v345, (const WTF::StringImpl *)&v346, (uint64_t)v347);
    if (v348)
    {
      v233 = (uint64_t *)(v194 + 24);
      v234 = *(unsigned int *)(v194 + 36);
      if ((_DWORD)v234 == *(_DWORD *)(v194 + 32))
      {
        v319 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v233, v234 + 1, (unint64_t)&v345);
        v234 = *(unsigned int *)(v194 + 36);
        v320 = *(_QWORD *)(v194 + 24);
        v321 = *v319;
        if (*v319)
          *v321 += 2;
        *(_QWORD *)(v320 + 8 * v234) = v321;
      }
      else
      {
        v235 = *v233;
        v236 = v345;
        if (v345)
          *(_DWORD *)v345 += 2;
        *(_QWORD *)(v235 + 8 * v234) = v236;
      }
      *(_DWORD *)(v194 + 36) = v234 + 1;
    }
    v237 = v346;
    v346 = 0;
    if (v237)
    {
      if (*(_DWORD *)v237 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v237;
    }
    v238 = v345;
    v345 = 0;
    if (v238)
    {
      if (*(_DWORD *)v238 == 2)
        WTF::StringImpl::destroy(v238, v232);
      else
        *(_DWORD *)v238 -= 2;
    }
    v239 = v341;
    v341 = 0;
    if (v239)
    {
      if (*(_DWORD *)v239 == 2)
        WTF::StringImpl::destroy(v239, v232);
      else
        *(_DWORD *)v239 -= 2;
    }
    v240 = v340;
    v340 = 0;
    if (v240)
    {
      if (*(_DWORD *)v240 == 2)
        WTF::StringImpl::destroy(v240, v232);
      else
        *(_DWORD *)v240 -= 2;
    }
    v241 = v342;
    v342 = 0;
    if (v241)
    {
      if (*(_DWORD *)v241 == 2)
        WTF::StringImpl::destroy(v241, v232);
      else
        *(_DWORD *)v241 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v345 = (WTF::StringImpl *)v194;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v346, (const WTF::StringImpl *)&v345, (uint64_t)v347);
    if (v348)
    {
      v242 = (uint64_t *)(v8 + 24);
      v243 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v243 == *(_DWORD *)(v8 + 32))
      {
        v322 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v242, v243 + 1, (unint64_t)&v346);
        v243 = *(unsigned int *)(v8 + 36);
        v323 = *(_QWORD *)(v8 + 24);
        v324 = *v322;
        if (*v322)
          *v324 += 2;
        *(_QWORD *)(v323 + 8 * v243) = v324;
      }
      else
      {
        v244 = *v242;
        v245 = v346;
        if (v346)
          *(_DWORD *)v346 += 2;
        *(_QWORD *)(v244 + 8 * v243) = v245;
      }
      *(_DWORD *)(v8 + 36) = v243 + 1;
    }
    v246 = v345;
    v345 = 0;
    if (v246)
    {
      if (*(_DWORD *)v246 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v246;
    }
    v247 = v346;
    v346 = 0;
    if (v247)
    {
      if (*(_DWORD *)v247 == 2)
        WTF::StringImpl::destroy(v247, v5);
      else
        *(_DWORD *)v247 -= 2;
    }
  }
  *(_QWORD *)a3 = v8;
  *(_DWORD *)(a3 + 8) = 0;
  v248 = v343;
  v343 = 0;
  if (v248)
  {
    if (*(_DWORD *)v248 == 2)
      WTF::StringImpl::destroy(v248, v5);
    else
      *(_DWORD *)v248 -= 2;
  }
LABEL_389:
  result = v344;
  if (v344)
  {
    if (*(_DWORD *)v344 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v344, v5);
    else
      *(_DWORD *)v344 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMAgent::getMediaStats@<X0>(WebCore::InspectorDOMAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorDOMAgent::getMediaStats((WebCore::InspectorDOMAgent *)((char *)this - 32), a2, a3);
}

uint64_t WebCore::InspectorDOMDebuggerAgent::InspectorDOMDebuggerAgent(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t *v9;
  WTF::StringImpl *v11;
  uint64_t v12;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v11;
  if (v11)
  {
    v8 = *(_DWORD *)v11;
    *(_DWORD *)v11 += 2;
    *(_QWORD *)a1 = off_1E33EFBF8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
    if (v8)
      *(_DWORD *)v7 = v8;
    else
      WTF::StringImpl::destroy(v7, v6);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
  }
  *(_QWORD *)a1 = off_1E33EF628;
  *(_QWORD *)(a1 + 32) = &unk_1E33EF6C0;
  *(_QWORD *)(a1 + 40) = &unk_1E33EF710;
  *(_QWORD *)(a1 + 48) = a3;
  Inspector::DOMDebuggerBackendDispatcher::create();
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = a2[1];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 149) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 117) = 0u;
  v9 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 96);
  v12 = a1 + 40;
  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(v9, &v12, (uint64_t)&v11);
  return a1;
}

void WebCore::InspectorDOMDebuggerAgent::~InspectorDOMDebuggerAgent(WebCore::InspectorDOMDebuggerAgent *this, WTF::StringImpl *a2)
{
  Inspector::DOMDebuggerBackendDispatcherHandler *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  *(_QWORD *)this = off_1E33EF628;
  *((_QWORD *)this + 4) = &unk_1E33EF6C0;
  v3 = (WebCore::InspectorDOMDebuggerAgent *)((char *)this + 32);
  *((_QWORD *)this + 5) = &unk_1E33EF710;
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
    WTF::RefCounted<JSC::Breakpoint>::deref(v4, a2);
  v5 = (WTF *)*((_QWORD *)this + 17);
  if (v5)
  {
    v6 = *((unsigned int *)this + 36);
    if ((_DWORD)v6)
    {
      v7 = (uint64_t *)((char *)v5 + 8);
      do
      {
        v8 = *v7;
        *v7 = 0;
        if (v8)
          WTF::RefCounted<JSC::Breakpoint>::deref(v8, a2);
        v9 = (WTF::StringImpl *)*(v7 - 1);
        *(v7 - 1) = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, a2);
          else
            *(_DWORD *)v9 -= 2;
        }
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree(v5, a2);
  }
  v10 = (WTF *)*((_QWORD *)this + 14);
  if (v10)
  {
    v11 = *((unsigned int *)this + 30);
    if ((_DWORD)v11)
    {
      v12 = (uint64_t *)((char *)v10 + 8);
      do
      {
        v13 = *v12;
        *v12 = 0;
        if (v13)
          WTF::RefCounted<JSC::Breakpoint>::deref(v13, a2);
        v14 = (WTF::StringImpl *)*(v12 - 1);
        *(v12 - 1) = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, a2);
          else
            *(_DWORD *)v14 -= 2;
        }
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree(v10, a2);
  }
  v15 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v15)
    WTF::RefCounted<JSC::Breakpoint>::deref(v15, a2);
  v16 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v16)
    WTF::RefCounted<JSC::Breakpoint>::deref(v16, a2);
  v17 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v17)
    WTF::RefCounted<JSC::Breakpoint>::deref(v17, a2);
  v18 = *((unsigned int *)this + 21);
  if ((_DWORD)v18)
  {
    v19 = 48 * v18;
    v20 = *((_QWORD *)this + 9) + 24;
    do
    {
      v21 = *(WTF::StringImpl ***)(v20 + 16);
      if (v21)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v21, a2);
      if (*(_BYTE *)(v20 + 8))
        JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v20);
      v22 = *(_QWORD *)(v20 - 8);
      *(_QWORD *)(v20 - 8) = 0;
      if (v22)
        WTF::RefCounted<JSC::Breakpoint>::deref(v22, a2);
      v23 = *(WTF::StringImpl **)(v20 - 24);
      *(_QWORD *)(v20 - 24) = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, a2);
        else
          *(_DWORD *)v23 -= 2;
      }
      v20 += 48;
      v19 -= 48;
    }
    while (v19);
  }
  v24 = (WTF *)*((_QWORD *)this + 9);
  if (v24)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v24, a2);
  }
  v25 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v25)
  {
    if (v25[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
    else
      --v25[2];
  }
  Inspector::DOMDebuggerBackendDispatcherHandler::~DOMDebuggerBackendDispatcherHandler(v3);
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
}

BOOL WebCore::InspectorDOMDebuggerAgent::enabled(WebCore::InspectorDOMDebuggerAgent *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 144) == (_QWORD)this;
}

uint64_t WebCore::InspectorDOMDebuggerAgent::enable(uint64_t this)
{
  *(_QWORD *)(*(_QWORD *)(this + 16) + 144) = this;
  return this;
}

uint64_t WebCore::InspectorDOMDebuggerAgent::disable(WebCore::InspectorDOMDebuggerAgent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t result;

  *(_QWORD *)(*((_QWORD *)this + 2) + 144) = 0;
  if (*((_DWORD *)this + 20))
  {
    v3 = *((unsigned int *)this + 21);
    if ((_DWORD)v3)
    {
      v4 = 48 * v3;
      v5 = *((_QWORD *)this + 9) + 24;
      do
      {
        v6 = *(WTF::StringImpl ***)(v5 + 16);
        if (v6)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
        if (*(_BYTE *)(v5 + 8))
          JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v5);
        v7 = *(_QWORD *)(v5 - 8);
        *(_QWORD *)(v5 - 8) = 0;
        if (v7)
          WTF::RefCounted<JSC::Breakpoint>::deref(v7, a2);
        v8 = *(WTF::StringImpl **)(v5 - 24);
        *(_QWORD *)(v5 - 24) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        v5 += 48;
        v4 -= 48;
      }
      while (v4);
      *((_DWORD *)this + 21) = 0;
    }
    v9 = (WTF *)*((_QWORD *)this + 9);
    if (v9)
    {
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
      WTF::fastFree(v9, a2);
    }
  }
  v10 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
    WTF::RefCounted<JSC::Breakpoint>::deref(v10, a2);
  v11 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v11)
    WTF::RefCounted<JSC::Breakpoint>::deref(v11, a2);
  v12 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v12)
    WTF::RefCounted<JSC::Breakpoint>::deref(v12, a2);
  v13 = (WTF *)*((_QWORD *)this + 14);
  if (v13)
  {
    v14 = *((unsigned int *)this + 30);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
    *(_QWORD *)((char *)this + 125) = 0;
    if ((_DWORD)v14)
    {
      v15 = (uint64_t *)((char *)v13 + 8);
      do
      {
        v16 = *v15;
        *v15 = 0;
        if (v16)
          WTF::RefCounted<JSC::Breakpoint>::deref(v16, a2);
        v17 = (WTF::StringImpl *)*(v15 - 1);
        *(v15 - 1) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, a2);
          else
            *(_DWORD *)v17 -= 2;
        }
        v15 += 2;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree(v13, a2);
  }
  v18 = (WTF *)*((_QWORD *)this + 17);
  if (v18)
  {
    v19 = *((unsigned int *)this + 36);
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
    *(_QWORD *)((char *)this + 149) = 0;
    if ((_DWORD)v19)
    {
      v20 = (uint64_t *)((char *)v18 + 8);
      do
      {
        v21 = *v20;
        *v20 = 0;
        if (v21)
          WTF::RefCounted<JSC::Breakpoint>::deref(v21, a2);
        v22 = (WTF::StringImpl *)*(v20 - 1);
        *(v20 - 1) = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, a2);
          else
            *(_DWORD *)v22 -= 2;
        }
        v20 += 2;
        --v19;
      }
      while (v19);
    }
    WTF::fastFree(v18, a2);
  }
  result = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (result)
    return WTF::RefCounted<JSC::Breakpoint>::deref(result, a2);
  return result;
}

uint64_t WebCore::InspectorDOMDebuggerAgent::debuggerWasEnabled(WebCore::InspectorDOMDebuggerAgent *this)
{
  return (*(uint64_t (**)(WebCore::InspectorDOMDebuggerAgent *))(*(_QWORD *)this + 112))(this);
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMDebuggerAgent::debuggerWasEnabled(WebCore::InspectorDOMDebuggerAgent *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 5) + 112))((char *)this - 40);
}

uint64_t WebCore::InspectorDOMDebuggerAgent::debuggerWasDisabled(WebCore::InspectorDOMDebuggerAgent *this)
{
  return (*(uint64_t (**)(WebCore::InspectorDOMDebuggerAgent *))(*(_QWORD *)this + 120))(this);
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMDebuggerAgent::debuggerWasDisabled(WebCore::InspectorDOMDebuggerAgent *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 5) + 120))((char *)this - 40);
}

uint64_t WebCore::InspectorDOMDebuggerAgent::willDestroyFrontendAndBackend(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

uint64_t *WebCore::InspectorDOMDebuggerAgent::discardAgent(WebCore::InspectorDOMDebuggerAgent *this)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::InspectorDOMDebuggerAgent *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *((_QWORD *)this + 6);
  v5 = *(_QWORD *)(v2 + 96);
  result = (uint64_t *)(v2 + 96);
  v4 = v5;
  if (v5)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v7 = (unint64_t)this + ~(((_QWORD)this + 40) << 32) + 40;
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ ((_DWORD)v9 + ~((_DWORD)v9 << 27)));
    v11 = *(WebCore::InspectorDOMDebuggerAgent **)(v4 + 8 * v10);
    if (v11 != (WebCore::InspectorDOMDebuggerAgent *)((char *)this + 40))
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WebCore::InspectorDOMDebuggerAgent **)(v4 + 8 * v10);
        ++v12;
        if (v11 == (WebCore::InspectorDOMDebuggerAgent *)((char *)this + 40))
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      *(_QWORD *)(v4 + 8 * v10) = -1;
      ++*(_DWORD *)(*result - 16);
      v13 = *result;
      v14 = *result ? *(_DWORD *)(v13 - 12) - 1 : -1;
      *(_DWORD *)(v13 - 12) = v14;
      v15 = *result;
      if (*result)
      {
        v16 = 6 * *(_DWORD *)(v15 - 12);
        v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
          result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(result, v17 >> 1, 0);
      }
    }
  }
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t WebCore::InspectorDOMDebuggerAgent::mainFrameNavigated(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(this + 84);
  if ((_DWORD)v1)
  {
    v2 = 48 * v1;
    v3 = (uint64_t *)(*(_QWORD *)(this + 72) + 16);
    do
    {
      v4 = *v3;
      v3 += 6;
      *(_QWORD *)(v4 + 72) = 0;
      v2 -= 48;
    }
    while (v2);
  }
  v5 = *(_QWORD *)(this + 88);
  if (v5)
    *(_QWORD *)(v5 + 72) = 0;
  v6 = *(_QWORD *)(this + 96);
  if (v6)
    *(_QWORD *)(v6 + 72) = 0;
  v7 = *(_QWORD *)(this + 104);
  if (v7)
    *(_QWORD *)(v7 + 72) = 0;
  return this;
}

WTF::StringImpl *WebCore::InspectorDOMDebuggerAgent::setEventBreakpoint@<X0>(uint64_t a1@<X0>, int a2@<W1>, WTF::StringImpl **a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  _DWORD *v22;
  WTF::StringImpl ***v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  _BYTE *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF **v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  WTF::StringImpl *v38;
  WTF **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  WTF::StringImpl *result;
  char v45;
  WTF::StringImpl *v46;
  __int16 v47;
  WTF *v48;
  _BYTE v49[8];
  char v50;
  WTF::StringImpl **v51;
  WTF *v52;
  WTF::StringImpl *v53;

  v53 = 0;
  Inspector::InspectorDebuggerAgent::debuggerBreakpointFromPayload();
  v14 = v52;
  if (!v52)
  {
LABEL_28:
    v30 = v53;
    if (v53)
      *(_DWORD *)v53 += 2;
    *(_QWORD *)a6 = v30;
    goto LABEL_54;
  }
  v15 = *a3;
  if (*a3 && *((_DWORD *)v15 + 1))
  {
    if (a2 == 148)
    {
      v47 = 1;
      v49[0] = 0;
      v50 = 0;
      v51 = 0;
      *(_DWORD *)v15 += 2;
      v46 = v15;
      if (a4[1])
        LOBYTE(v47) = *a4;
      if (a5[1])
        HIBYTE(v47) = *a5;
      v52 = 0;
      v48 = v14;
      v16 = (uint64_t *)(a1 + 72);
      LODWORD(v14) = *(_DWORD *)(a1 + 84);
      if ((_DWORD)v14)
      {
        v17 = 0;
        v18 = 0;
        while (1)
        {
          v19 = *v16;
          if (WTF::equal(*(WTF **)(*v16 + v17), v46, v13))
          {
            if (__PAIR64__(*(unsigned __int8 *)(v19 + v17 + 9), *(unsigned __int8 *)(v19 + v17 + 8)) == __PAIR64__(HIBYTE(v47), v47))
              break;
          }
          ++v18;
          v14 = (WTF *)*(unsigned int *)(a1 + 84);
          v17 += 48;
          if (v18 >= (unint64_t)v14)
            goto LABEL_18;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v45 = 1;
        goto LABEL_39;
      }
LABEL_18:
      v20 = v14;
      if ((_DWORD)v14 == *(_DWORD *)(a1 + 80))
      {
        v21 = WTF::Vector<WebCore::InspectorDOMDebuggerAgent::EventBreakpoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 72, v14 + 1, (unint64_t)&v46);
        v23 = (WTF::StringImpl ***)(v21 + 40);
        v22 = *(_DWORD **)v21;
        v20 = *(_DWORD *)(a1 + 84);
        v24 = *(_QWORD *)(a1 + 72);
        if (*(_QWORD *)v21)
          *v22 += 2;
        *(_QWORD *)(v24 + 48 * v20) = v22;
        v25 = v24 + 48 * v20;
        *(_WORD *)(v25 + 8) = *((_WORD *)v21 + 4);
        v26 = (_QWORD *)(v25 + 16);
        v27 = (_DWORD *)*((_QWORD *)v21 + 2);
        if (v27)
          ++*v27;
        *v26 = v27;
        v28 = v24 + 48 * v20;
        *(_BYTE *)(v28 + 24) = 0;
        v28 += 24;
        *(_BYTE *)(v28 + 8) = 0;
        v29 = (_BYTE *)(v28 + 8);
        if (!v21[32])
          goto LABEL_38;
      }
      else
      {
        v24 = *v16;
        v31 = (WTF::StringImpl **)(*v16 + 48 * v14);
        v32 = v46;
        if (v46)
          *(_DWORD *)v46 += 2;
        *v31 = v32;
        v33 = v24 + 48 * v14;
        *(_WORD *)(v33 + 8) = v47;
        v34 = (WTF **)(v33 + 16);
        v35 = v48;
        if (v48)
          ++*(_DWORD *)v48;
        v23 = &v51;
        *v34 = v35;
        v36 = v24 + 48 * v14;
        *(_BYTE *)(v36 + 24) = 0;
        v36 += 24;
        *(_BYTE *)(v36 + 8) = 0;
        v29 = (_BYTE *)(v36 + 8);
        if (!v50)
          goto LABEL_38;
      }
      JSC::Yarr::RegularExpression::RegularExpression();
      *v29 = 1;
LABEL_38:
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v24 + 48 * v20 + 40), v23);
      v45 = 0;
      ++*(_DWORD *)(a1 + 84);
      *(_BYTE *)a6 = 0;
LABEL_39:
      *(_BYTE *)(a6 + 8) = v45;
      if (v51)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v51, v12);
      if (v50)
        JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v49);
      v37 = v48;
      v48 = 0;
      if (v37)
        WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v37, v12);
      v38 = v46;
      v46 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v12);
        else
          *(_DWORD *)v38 -= 2;
      }
      goto LABEL_55;
    }
    goto LABEL_53;
  }
  if (a4[1] || a5[1])
  {
LABEL_53:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_54:
    *(_BYTE *)(a6 + 8) = 1;
LABEL_55:
    v43 = v52;
    v52 = 0;
    if (v43)
      WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v43, v12);
    goto LABEL_57;
  }
  switch(a2)
  {
    case 146:
      if (((*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF **))(*(_QWORD *)a1 + 128))(a1, &v53, &v52) & 1) == 0)
        goto LABEL_28;
      *(_BYTE *)a6 = 0;
      *(_BYTE *)(a6 + 8) = 0;
      goto LABEL_55;
    case 147:
      v40 = *(_QWORD *)(a1 + 88);
      v39 = (WTF **)(a1 + 88);
      if (v40)
        goto LABEL_53;
      goto LABEL_62;
    case 148:
      v41 = *(_QWORD *)(a1 + 96);
      v39 = (WTF **)(a1 + 96);
      if (v41)
        goto LABEL_53;
      goto LABEL_62;
    case 149:
      v42 = *(_QWORD *)(a1 + 104);
      v39 = (WTF **)(a1 + 104);
      if (v42)
        goto LABEL_53;
LABEL_62:
      *v39 = v52;
      *(_BYTE *)a6 = 0;
      *(_BYTE *)(a6 + 8) = 0;
      break;
    default:
      goto LABEL_53;
  }
LABEL_57:
  result = v53;
  v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMDebuggerAgent::setEventBreakpoint@<X0>(uint64_t a1@<X0>, int a2@<W1>, WTF::StringImpl **a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  return WebCore::InspectorDOMDebuggerAgent::setEventBreakpoint(a1 - 32, a2, a3, a4, a5, a6);
}

WTF::StringImpl *WebCore::InspectorDOMDebuggerAgent::removeEventBreakpoint@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, _BYTE *a6@<X8>)
{
  const WTF::StringImpl *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  WTF *v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  int v29;
  char v30;
  uint64_t v31;
  WTF::StringImpl *result;
  unsigned __int8 v33;
  unsigned __int8 v34;
  int v35;
  WTF *v36;
  WTF::StringImpl *v37;

  v37 = 0;
  v8 = *(const WTF::StringImpl **)a3;
  if (*(_QWORD *)a3 && *((_DWORD *)v8 + 1))
  {
    if ((_DWORD)a2 == 148)
    {
      *(_DWORD *)v8 += 2;
      if (a4[1])
        v9 = *a4;
      else
        v9 = 1;
      if (a5[1])
        v10 = *a5;
      else
        v10 = 0;
      v34 = v10;
      v11 = *(_QWORD *)(a1 + 72);
      v12 = *(_DWORD *)(a1 + 84);
      v13 = v11 + 48 * v12;
      if (v12)
      {
        v14 = 0;
        v35 = 0;
        v15 = (WTF::StringImpl *)(v11 + 48 * v12);
        v16 = (unint64_t)v15;
        v33 = v9;
        do
        {
          v17 = (unsigned __int8 *)(v11 + v14);
          if (WTF::equal(*(WTF **)(v11 + v14), v8, a3)
            && v17[8] == v9
            && *(unsigned __int8 *)(v11 + v14 + 9) == v34)
          {
            v19 = v11 + v14;
            if (v16 != *(_QWORD *)(a1 + 72) + 48 * *(unsigned int *)(a1 + 84))
            {
              if (v17 == (unsigned __int8 *)v15)
              {
                v19 = v16;
              }
              else
              {
                WTF::VectorMover<false,WebCore::InspectorDOMDebuggerAgent::EventBreakpoint>::moveOverlapping(v15, (WTF::StringImpl *)(v11 + v14), v16);
                v19 = v16 + v11 + v14 - (_QWORD)v15;
              }
            }
            v20 = v11 + v14;
            v21 = *(WTF::StringImpl ***)(v11 + v14 + 40);
            if (v21)
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v21, v18);
            if (*(_BYTE *)(v20 + 32))
              JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)(v11 + v14 + 24));
            v22 = *(_QWORD *)(v11 + v14 + 16);
            *(_QWORD *)(v11 + v14 + 16) = 0;
            if (v22)
              WTF::RefCounted<JSC::Breakpoint>::deref(v22, v18);
            v23 = *(WTF::StringImpl **)v17;
            *(_QWORD *)v17 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v18);
              else
                *(_DWORD *)v23 -= 2;
            }
            v15 = (WTF::StringImpl *)(v20 + 48);
            ++v35;
            v16 = v19;
            v9 = v33;
          }
          v14 += 48;
        }
        while (v11 + v14 < v13);
        v11 = *(_QWORD *)(a1 + 72);
        v28 = *(_DWORD *)(a1 + 84);
        v12 = v28;
        v13 = v16;
        v29 = v35;
      }
      else
      {
        v28 = 0;
        v29 = 0;
        v15 = *(WTF::StringImpl **)(a1 + 72);
      }
      v24 = (WTF::StringImpl *)(v11 + 48 * v28);
      if (v15 != v24)
      {
        WTF::VectorMover<false,WebCore::InspectorDOMDebuggerAgent::EventBreakpoint>::moveOverlapping(v15, v24, v13);
        v12 = *(_DWORD *)(a1 + 84);
      }
      *(_DWORD *)(a1 + 84) = v12 - v29;
      if (v29)
      {
        v30 = 0;
        *a6 = 0;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v30 = 1;
      }
      a6[8] = v30;
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v24);
      else
        *(_DWORD *)v8 -= 2;
      goto LABEL_61;
    }
  }
  else if (!a4[1] && !a5[1])
  {
    switch((int)a2)
    {
      case 146:
        v36 = 0;
        v25 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF **))(*(_QWORD *)a1 + 128))(a1, &v37, &v36);
        v26 = v36;
        v36 = 0;
        if (v26)
          WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v26, v24);
        if ((v25 & 1) != 0)
          goto LABEL_58;
        v27 = v37;
        if (v37)
          *(_DWORD *)v37 += 2;
        *(_QWORD *)a6 = v27;
        goto LABEL_60;
      case 147:
        v31 = *(_QWORD *)(a1 + 88);
        if (!v31)
          break;
        *(_QWORD *)(a1 + 88) = 0;
        goto LABEL_57;
      case 148:
        v31 = *(_QWORD *)(a1 + 96);
        if (!v31)
          break;
        *(_QWORD *)(a1 + 96) = 0;
        goto LABEL_57;
      case 149:
        v31 = *(_QWORD *)(a1 + 104);
        if (!v31)
          break;
        *(_QWORD *)(a1 + 104) = 0;
LABEL_57:
        WTF::RefCounted<JSC::Breakpoint>::deref(v31, a2);
LABEL_58:
        *a6 = 0;
        a6[8] = 0;
        goto LABEL_61;
      default:
        break;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_60:
  a6[8] = 1;
LABEL_61:
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMDebuggerAgent::removeEventBreakpoint@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, _BYTE *a6@<X8>)
{
  return WebCore::InspectorDOMDebuggerAgent::removeEventBreakpoint(a1 - 32, a2, a3, a4, a5, a6);
}

void WebCore::InspectorDOMDebuggerAgent::willHandleEvent(uint64_t a1, WebCore::ScriptExecutionContext *this, uint64_t a3, uint64_t a4)
{
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  _DWORD *v11;
  JSValue v12;
  WTF::JSONImpl::Object *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  _BOOL4 v17;
  uint64_t v18;
  const WTF::String *v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  _DWORD *v36;
  WTF::JSONImpl::Value *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  _DWORD **v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  WebCore::InspectorDOMDebuggerAgent::EventBreakpoint *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD **v58;
  uint64_t v59;
  _DWORD *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  _BYTE v63[24];
  _QWORD *v64;
  _DWORD *v65;
  _QWORD v66[2];
  char v67;

  v7 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject(this);
  Inspector::InjectedScriptManager::injectedScriptFor(*(Inspector::InjectedScriptManager **)(a1 + 64), v7);
  if (!v64 || !*v64)
    goto LABEL_56;
  JSC::JSLockHolder::JSLockHolder();
  v8 = *((_QWORD *)v7 + 415);
  if (*(_DWORD *)(v8 + 48))
  {
    v66[0] = a3;
    v10 = (objc_class *)WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(v8 + 32), v66);
    if (v10)
      goto LABEL_10;
  }
  else
  {
    v9 = *(_QWORD *)(a3 + 8);
    if (v9)
    {
      if ((*(_BYTE *)(v9 + 8) & 3) == 0)
      {
        v10 = *(objc_class **)v9;
        if (*(_QWORD *)v9)
          goto LABEL_10;
      }
    }
  }
  ++*(_DWORD *)(a3 + 16);
  v66[0] = a3;
  v10 = (objc_class *)WebCore::toJSNewlyCreated((int)v7, v7, (WebCore::JSDOMGlobalObject *)v66);
  v11 = (_DWORD *)v66[0];
  v66[0] = 0;
  if (v11)
  {
    if (v11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[4];
  }
LABEL_10:
  v12.super.isa = v10;
  Inspector::InjectedScript::setEventValue((Inspector::InjectedScript *)v63, v12);
  MEMORY[0x19AEA32A0](&v65);
  v13 = (WTF::JSONImpl::Object *)Inspector::InspectorDebuggerAgent::breakpointsActive(*(Inspector::InspectorDebuggerAgent **)(a1 + 48));
  if (!(_DWORD)v13)
    goto LABEL_56;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v16 = *(_DWORD **)(a1 + 96);
  if (v16)
    goto LABEL_12;
  v49 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v49)
  {
    v50 = *(WebCore::InspectorDOMDebuggerAgent::EventBreakpoint **)(a1 + 72);
    v51 = 48 * v49;
    while (1)
    {
      v13 = (WTF::JSONImpl::Object *)WebCore::InspectorDOMDebuggerAgent::EventBreakpoint::matches(v50, (const WTF::StringImpl **)(a3 + 24), v14);
      if ((_DWORD)v13)
        break;
      v50 = (WebCore::InspectorDOMDebuggerAgent::EventBreakpoint *)((char *)v50 + 48);
      v51 -= 48;
      if (!v51)
        goto LABEL_87;
    }
    v16 = (_DWORD *)*((_QWORD *)v50 + 2);
    if (v16)
    {
LABEL_12:
      ++*v16;
      v17 = v15 != 0;
      goto LABEL_13;
    }
  }
LABEL_87:
  if (!v15)
    goto LABEL_56;
  v52 = *(_QWORD *)(v15 + 424);
  if (!v52)
  {
    v55 = 0;
    LODWORD(v53) = 0;
LABEL_99:
    v54 = v52 + 56 * v53;
    goto LABEL_100;
  }
  v53 = *(unsigned int *)(v52 - 4);
  v54 = v52 + 56 * v53;
  if (!*(_DWORD *)(v52 - 12))
  {
    v55 = v52 + 56 * v53;
    goto LABEL_99;
  }
  v55 = *(_QWORD *)(v15 + 424);
  if ((_DWORD)v53)
  {
    v56 = 56 * v53;
    v55 = *(_QWORD *)(v15 + 424);
    while ((*(_DWORD *)v55 + 1) <= 1)
    {
      v55 += 56;
      v56 -= 56;
      if (!v56)
      {
        v55 = v54;
        break;
      }
    }
  }
LABEL_100:
  if (v52)
    v52 += 56 * *(unsigned int *)(v52 - 4);
  if (v52 != v55)
  {
    while (*(_QWORD *)(v55 + 16) != *(_QWORD *)(a3 + 32)
         || *(_QWORD *)(v55 + 24) != *(_QWORD *)(a4 + 8)
         || *(_QWORD *)(v55 + 32) != *(_QWORD *)(a3 + 24)
         || *(_BYTE *)(v55 + 40) != (*(_BYTE *)(a4 + 4) & 1))
    {
      v57 = v55 + 56;
      v55 = v54;
      if (v57 != v54)
      {
        v55 = v57;
        while ((*(_DWORD *)v55 + 1) <= 1)
        {
          v55 += 56;
          if (v55 == v54)
          {
            v55 = v54;
            break;
          }
        }
      }
      if (v55 == v52)
        goto LABEL_56;
    }
    v16 = *(_DWORD **)(v55 + 48);
    if (v16)
    {
      ++*v16;
      v17 = 1;
LABEL_13:
      WTF::JSONImpl::Object::create(v13);
      v18 = v62;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v61 = (WTF::StringImpl *)v66[0];
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(a3 + 24), v19);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v62 + 16), &v61, (const WTF::StringImpl *)&v65, (uint64_t)v66);
      if (v67)
      {
        v21 = (uint64_t *)(v18 + 24);
        v22 = *(unsigned int *)(v18 + 36);
        if ((_DWORD)v22 == *(_DWORD *)(v18 + 32))
        {
          v46 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v61);
          v22 = *(unsigned int *)(v18 + 36);
          v47 = *(_QWORD *)(v18 + 24);
          v48 = *v46;
          if (*v46)
            *v48 += 2;
          *(_QWORD *)(v47 + 8 * v22) = v48;
        }
        else
        {
          v23 = *v21;
          v24 = v61;
          if (v61)
            *(_DWORD *)v61 += 2;
          *(_QWORD *)(v23 + 8 * v22) = v24;
        }
        *(_DWORD *)(v18 + 36) = v22 + 1;
      }
      v25 = v65;
      v65 = 0;
      if (v25)
      {
        if (*v25 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v25;
      }
      v26 = v61;
      v61 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::destroy(v26, v20);
          if (v17)
          {
LABEL_26:
            v27 = *(_QWORD *)(v15 + 424);
            if (v27)
            {
              v28 = *(unsigned int *)(v27 - 4);
              v29 = v27 + 56 * v28;
              if (*(_DWORD *)(v27 - 12))
              {
                v30 = *(_QWORD *)(v15 + 424);
                if ((_DWORD)v28)
                {
                  v31 = 56 * v28;
                  v30 = *(_QWORD *)(v15 + 424);
                  while ((*(_DWORD *)v30 + 1) <= 1)
                  {
                    v30 += 56;
                    v31 -= 56;
                    if (!v31)
                    {
                      v30 = v29;
                      goto LABEL_36;
                    }
                  }
                }
                goto LABEL_36;
              }
              v30 = v27 + 56 * v28;
            }
            else
            {
              v30 = 0;
              LODWORD(v28) = 0;
            }
            v29 = v27 + 56 * v28;
LABEL_36:
            if (v27)
              v27 += 56 * *(unsigned int *)(v27 - 4);
            if (v27 != v30)
            {
              while (*(_QWORD *)(v30 + 16) != *(_QWORD *)(a3 + 32)
                   || *(_QWORD *)(v30 + 24) != *(_QWORD *)(a4 + 8)
                   || *(_QWORD *)(v30 + 32) != *(_QWORD *)(a3 + 24)
                   || *(_BYTE *)(v30 + 40) != (*(_BYTE *)(a4 + 4) & 1))
              {
                v32 = v30 + 56;
                v30 = v29;
                if (v32 != v29)
                {
                  v30 = v32;
                  while ((*(_DWORD *)v30 + 1) <= 1)
                  {
                    v30 += 56;
                    if (v30 == v29)
                    {
                      v30 = v29;
                      break;
                    }
                  }
                }
                if (v30 == v27)
                  goto LABEL_49;
              }
              v37 = (WTF::JSONImpl::Value *)*(unsigned int *)(v30 + 8);
              if ((_DWORD)v37)
              {
                v38 = v62;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::JSONImpl::Value::create(v37);
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v38 + 16), &v61, (const WTF::StringImpl *)&v65, (uint64_t)v66);
                if (v67)
                {
                  v40 = (uint64_t *)(v38 + 24);
                  v41 = *(unsigned int *)(v38 + 36);
                  if ((_DWORD)v41 == *(_DWORD *)(v38 + 32))
                  {
                    v58 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v61);
                    v41 = *(unsigned int *)(v38 + 36);
                    v59 = *(_QWORD *)(v38 + 24);
                    v60 = *v58;
                    if (*v58)
                      *v60 += 2;
                    *(_QWORD *)(v59 + 8 * v41) = v60;
                  }
                  else
                  {
                    v42 = *v40;
                    v43 = v61;
                    if (v61)
                      *(_DWORD *)v61 += 2;
                    *(_QWORD *)(v42 + 8 * v41) = v43;
                  }
                  *(_DWORD *)(v38 + 36) = v41 + 1;
                }
                v44 = v65;
                v65 = 0;
                if (v44)
                {
                  if (*v44 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v44;
                }
                v45 = v61;
                v61 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, v39);
                  else
                    *(_DWORD *)v45 -= 2;
                }
              }
            }
          }
LABEL_49:
          v33 = v62;
          v62 = 0;
          v66[0] = v33;
          Inspector::InspectorDebuggerAgent::schedulePauseForSpecialBreakpoint();
          v35 = (_DWORD *)v66[0];
          v66[0] = 0;
          if (v35)
          {
            if (*v35 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v35;
          }
          v36 = (_DWORD *)v62;
          v62 = 0;
          if (v36)
          {
            if (*v36 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v36;
          }
          WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v16, v34);
          goto LABEL_56;
        }
        *(_DWORD *)v26 -= 2;
      }
      if (v17)
        goto LABEL_26;
      goto LABEL_49;
    }
  }
LABEL_56:
  Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)v63);
}

uint64_t WebCore::InspectorDOMDebuggerAgent::EventBreakpoint::matches(WebCore::InspectorDOMDebuggerAgent::EventBreakpoint *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  int v11;
  WTF *v12;
  const WTF::StringImpl *v13;
  _BYTE v14[24];

  result = (uint64_t)*a2;
  if (*a2)
  {
    if (!*(_DWORD *)(result + 4))
      return 0;
    v6 = *((_QWORD *)this + 5);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 - 8);
      v8 = *(_DWORD *)(result + 16);
      if (v8 < 0x100)
        v9 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        v9 = v8 >> 8;
      for (i = 0; ; v9 = i + v11)
      {
        v11 = v9 & v7;
        v12 = *(WTF **)(v6 + 8 * (v9 & v7));
        if (!v12)
          break;
        if (v12 != (WTF *)-1 && (WTF::equal(v12, *a2, a3) & 1) != 0)
          return 1;
        ++i;
      }
    }
    if (!*((_BYTE *)this + 32))
    {
      Inspector::ContentSearchUtilities::createRegularExpressionForSearchString();
      if (*((_BYTE *)this + 32))
      {
        JSC::Yarr::RegularExpression::operator=();
      }
      else
      {
        JSC::Yarr::RegularExpression::RegularExpression();
        *((_BYTE *)this + 32) = 1;
      }
      JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v14);
      result = (uint64_t)this + 24;
      if (!*((_BYTE *)this + 32))
      {
        __break(1u);
        return result;
      }
    }
    if (JSC::Yarr::RegularExpression::match() == -1)
      return 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 5, a2, v13, (uint64_t)v14);
    return 1;
  }
  return result;
}

void WebCore::InspectorDOMDebuggerAgent::didHandleEvent(uint64_t a1, WebCore::ScriptExecutionContext *this, uint64_t a3, uint64_t a4)
{
  JSC::JSGlobalObject *v7;
  const WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WebCore::InspectorDOMDebuggerAgent::EventBreakpoint *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  _QWORD *v23;

  v7 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject(this);
  Inspector::InjectedScriptManager::injectedScriptFor(*(Inspector::InjectedScriptManager **)(a1 + 64), v7);
  if (!v23)
    goto LABEL_6;
  if (!*v23)
    goto LABEL_6;
  JSC::JSLockHolder::JSLockHolder();
  Inspector::InjectedScript::clearEventValue((Inspector::InjectedScript *)v22);
  MEMORY[0x19AEA32A0](&v21);
  if (!Inspector::InspectorDebuggerAgent::breakpointsActive(*(Inspector::InspectorDebuggerAgent **)(a1 + 48)))
    goto LABEL_6;
  v9 = *(_DWORD **)(a1 + 96);
  if (v9)
    goto LABEL_5;
  v11 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v11)
  {
    v12 = *(WebCore::InspectorDOMDebuggerAgent::EventBreakpoint **)(a1 + 72);
    v13 = 48 * v11;
    while (!WebCore::InspectorDOMDebuggerAgent::EventBreakpoint::matches(v12, (const WTF::StringImpl **)(a3 + 24), v8))
    {
      v12 = (WebCore::InspectorDOMDebuggerAgent::EventBreakpoint *)((char *)v12 + 48);
      v13 -= 48;
      if (!v13)
        goto LABEL_11;
    }
    v9 = (_DWORD *)*((_QWORD *)v12 + 2);
    if (v9)
    {
LABEL_5:
      ++*v9;
      Inspector::InspectorDebuggerAgent::cancelPauseForSpecialBreakpoint();
      WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v9, v10);
      goto LABEL_6;
    }
  }
LABEL_11:
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  if (!v14)
    goto LABEL_6;
  v15 = *(_QWORD *)(v14 + 424);
  if (!v15)
  {
    v18 = 0;
    LODWORD(v16) = 0;
LABEL_23:
    v17 = v15 + 56 * v16;
    goto LABEL_24;
  }
  v16 = *(unsigned int *)(v15 - 4);
  v17 = v15 + 56 * v16;
  if (!*(_DWORD *)(v15 - 12))
  {
    v18 = v15 + 56 * v16;
    goto LABEL_23;
  }
  v18 = v15;
  if ((_DWORD)v16)
  {
    v19 = 56 * v16;
    v18 = v15;
    while ((*(_DWORD *)v18 + 1) <= 1)
    {
      v18 += 56;
      v19 -= 56;
      if (!v19)
      {
        v18 = v17;
        break;
      }
    }
  }
LABEL_24:
  if (v15)
    v15 += 56 * *(unsigned int *)(v15 - 4);
  if (v15 != v18)
  {
    while (*(_QWORD *)(v18 + 16) != *(_QWORD *)(a3 + 32)
         || *(_QWORD *)(v18 + 24) != *(_QWORD *)(a4 + 8)
         || *(_QWORD *)(v18 + 32) != *(_QWORD *)(a3 + 24)
         || *(_BYTE *)(v18 + 40) != (*(_BYTE *)(a4 + 4) & 1))
    {
      v20 = v18 + 56;
      v18 = v17;
      if (v20 != v17)
      {
        v18 = v20;
        while ((*(_DWORD *)v18 + 1) <= 1)
        {
          v18 += 56;
          if (v18 == v17)
          {
            v18 = v17;
            break;
          }
        }
      }
      if (v18 == v15)
        goto LABEL_6;
    }
    v9 = *(_DWORD **)(v18 + 48);
    if (v9)
      goto LABEL_5;
  }
LABEL_6:
  Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)v22);
}

WTF::JSONImpl::Object *WebCore::InspectorDOMDebuggerAgent::breakOnURLIfNeeded(Inspector::InspectorDebuggerAgent **this, const WTF::String *a2)
{
  WTF::JSONImpl::Object *result;
  WTF::StringImpl *v5;
  BOOL v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  const WTF::String *v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  const WTF::String *v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  WTF *v30;
  _DWORD **v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  Inspector::InspectorDebuggerAgent *v39;
  Inspector::InspectorDebuggerAgent *i;
  Inspector::InspectorDebuggerAgent *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  Inspector::InspectorDebuggerAgent *v45;
  Inspector::InspectorDebuggerAgent *j;
  WTF *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF *v55;
  WTF::StringImpl *v56;
  _DWORD *v57;
  _QWORD v58[2];
  char v59;

  result = (WTF::JSONImpl::Object *)Inspector::InspectorDebuggerAgent::breakpointsActive(this[6]);
  if ((_DWORD)result)
  {
    v6 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 0;
    if (!v6
      || (result = (WTF::JSONImpl::Object *)WTF::isMainThread(result), !(_DWORD)result)
      || !WebCore::ScriptDisallowedScope::s_count)
    {
      v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v7 += 2;
      v56 = v7;
      v8 = this[20];
      if (v8)
      {
        ++*(_DWORD *)v8;
        v55 = v8;
LABEL_13:
        WTF::JSONImpl::Object::create(result);
        v9 = v54;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v53 = (WTF::StringImpl *)v58[0];
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v56, v10);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v54 + 16), &v53, (const WTF::StringImpl *)&v57, (uint64_t)v58);
        if (v59)
        {
          v12 = (uint64_t *)(v9 + 24);
          v13 = *(unsigned int *)(v9 + 36);
          if ((_DWORD)v13 == *(_DWORD *)(v9 + 32))
          {
            v31 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v53);
            v13 = *(unsigned int *)(v9 + 36);
            v32 = *(_QWORD *)(v9 + 24);
            v33 = *v31;
            if (*v31)
              *v33 += 2;
            *(_QWORD *)(v32 + 8 * v13) = v33;
          }
          else
          {
            v14 = *v12;
            v15 = v53;
            if (v53)
              *(_DWORD *)v53 += 2;
            *(_QWORD *)(v14 + 8 * v13) = v15;
          }
          *(_DWORD *)(v9 + 36) = v13 + 1;
        }
        v16 = v57;
        v57 = 0;
        if (v16)
        {
          if (*v16 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v16;
        }
        v17 = v53;
        v53 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v11);
          else
            *(_DWORD *)v17 -= 2;
        }
        v18 = v54;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v53 = (WTF::StringImpl *)v58[0];
        WTF::JSONImpl::Value::create(a2, v19);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v18 + 16), &v53, (const WTF::StringImpl *)&v57, (uint64_t)v58);
        if (v59)
        {
          v21 = (uint64_t *)(v18 + 24);
          v22 = *(unsigned int *)(v18 + 36);
          if ((_DWORD)v22 == *(_DWORD *)(v18 + 32))
          {
            v34 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v53);
            v22 = *(unsigned int *)(v18 + 36);
            v35 = *(_QWORD *)(v18 + 24);
            v36 = *v34;
            if (*v34)
              *v36 += 2;
            *(_QWORD *)(v35 + 8 * v22) = v36;
          }
          else
          {
            v23 = *v21;
            v24 = v53;
            if (v53)
              *(_DWORD *)v53 += 2;
            *(_QWORD *)(v23 + 8 * v22) = v24;
          }
          *(_DWORD *)(v18 + 36) = v22 + 1;
        }
        v25 = v57;
        v57 = 0;
        if (v25)
        {
          if (*v25 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v25;
        }
        v26 = v53;
        v53 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v20);
          else
            *(_DWORD *)v26 -= 2;
        }
        v27 = v54;
        v54 = 0;
        v58[0] = v27;
        Inspector::InspectorDebuggerAgent::breakProgram();
        v28 = (_DWORD *)v58[0];
        v58[0] = 0;
        if (v28)
        {
          if (*v28 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v28;
        }
        v29 = (_DWORD *)v54;
        v54 = 0;
        if (v29)
        {
          if (*v29 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v29;
        }
        v30 = v55;
        v55 = 0;
        if (v30)
          WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v30, v5);
LABEL_45:
        result = v56;
        v56 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(result, v5);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
      v55 = 0;
      if (*((_DWORD *)this + 31))
      {
        v37 = *((unsigned int *)this + 30);
        if ((_DWORD)v37)
        {
          v38 = 16 * v37;
          v39 = this[14];
          while (!*(_QWORD *)v39)
          {
            v39 = (Inspector::InspectorDebuggerAgent *)((char *)v39 + 16);
            v38 -= 16;
            if (!v38)
              goto LABEL_77;
          }
          i = v39;
        }
        else
        {
          i = this[14];
        }
        v51 = (uint64_t)this[14] + 16 * v37;
        if (i != (Inspector::InspectorDebuggerAgent *)v51)
        {
LABEL_71:
          v41 = i;
          Inspector::ContentSearchUtilities::createRegularExpressionForSearchString();
          if (JSC::Yarr::RegularExpression::match() != -1)
          {
LABEL_93:
            v47 = (WTF *)*((_QWORD *)v41 + 1);
            ++*(_DWORD *)v47;
            v48 = v55;
            v55 = v47;
            if (v48)
              WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v48, v42);
            v49 = *(WTF::StringImpl **)v41;
            if (*(_QWORD *)v41)
              *(_DWORD *)v49 += 2;
            v50 = v56;
            v56 = v49;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, v42);
              else
                *(_DWORD *)v50 -= 2;
            }
            JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v58);
            goto LABEL_13;
          }
          JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v58);
          for (i = (Inspector::InspectorDebuggerAgent *)((char *)v41 + 16);
                i != (Inspector::InspectorDebuggerAgent *)v51;
                i = (Inspector::InspectorDebuggerAgent *)((char *)i + 16))
          {
            if (*(_QWORD *)i)
            {
              if (i != (Inspector::InspectorDebuggerAgent *)v51)
                goto LABEL_71;
              break;
            }
          }
        }
      }
LABEL_77:
      if (!*((_DWORD *)this + 37))
        goto LABEL_45;
      v43 = *((unsigned int *)this + 36);
      if ((_DWORD)v43)
      {
        v44 = 16 * v43;
        v45 = this[17];
        while (!*(_QWORD *)v45)
        {
          v45 = (Inspector::InspectorDebuggerAgent *)((char *)v45 + 16);
          v44 -= 16;
          if (!v44)
            goto LABEL_45;
        }
        j = v45;
      }
      else
      {
        j = this[17];
      }
      v52 = (uint64_t)this[17] + 16 * v43;
      if (j == (Inspector::InspectorDebuggerAgent *)v52)
        goto LABEL_45;
LABEL_86:
      v41 = j;
      Inspector::ContentSearchUtilities::createRegularExpressionForSearchString();
      if (JSC::Yarr::RegularExpression::match() == -1)
      {
        JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v58);
        for (j = (Inspector::InspectorDebuggerAgent *)((char *)v41 + 16);
              j != (Inspector::InspectorDebuggerAgent *)v52;
              j = (Inspector::InspectorDebuggerAgent *)((char *)j + 16))
        {
          if (*(_QWORD *)j)
          {
            if (j != (Inspector::InspectorDebuggerAgent *)v52)
              goto LABEL_86;
            goto LABEL_45;
          }
        }
        goto LABEL_45;
      }
      goto LABEL_93;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorDOMDebuggerAgent::setURLBreakpoint@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v8;
  char v9;
  WTF *v10;
  WTF::StringImpl *result;
  int v12;
  int v13;
  WTF *v14;
  _BYTE v15[16];
  unsigned __int8 v16;
  WTF *v17;
  WTF::StringImpl *v18;

  v18 = 0;
  Inspector::InspectorDebuggerAgent::debuggerBreakpointFromPayload();
  if (!v17)
  {
    *(_QWORD *)a4 = v18;
    goto LABEL_6;
  }
  if (!*a2 || !*((_DWORD *)*a2 + 1))
  {
    if (!*(_QWORD *)(a1 + 160))
    {
      *(_QWORD *)(a1 + 160) = v17;
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 8) = 0;
      goto LABEL_9;
    }
    goto LABEL_4;
  }
  if (a3[1] && *a3)
  {
    v14 = v17;
    v17 = 0;
    WTF::HashMap<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>((uint64_t)v15, a1 + 136, a2, (uint64_t *)&v14);
    v12 = v16;
    if (v14)
      WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v14, v8);
    if (!v12)
    {
LABEL_4:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_6:
      v9 = 1;
      goto LABEL_7;
    }
  }
  else
  {
    v14 = v17;
    v17 = 0;
    WTF::HashMap<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>((uint64_t)v15, a1 + 112, a2, (uint64_t *)&v14);
    v13 = v16;
    if (v14)
      WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v14, v8);
    if (!v13)
      goto LABEL_4;
  }
  v9 = 0;
  *(_BYTE *)a4 = 0;
LABEL_7:
  *(_BYTE *)(a4 + 8) = v9;
  v10 = v17;
  v17 = 0;
  if (v10)
    WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v10, v8);
LABEL_9:
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t result;
  uint64_t *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF **v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int v52;

  v4 = a2;
  v7 = *(unsigned int *)(a2 + 8);
  v6 = *(unsigned int *)(a2 + 12);
  if (10 * v6 >= (unint64_t)(9 * v7)
    || (v7 <= 2 * (int)v6 ? (v8 = *(_BYTE *)(a2 + 20) == 0) : (v8 = 1), !v8))
  {
    if ((_DWORD)v7)
      v9 = 2 * v7;
    else
      v9 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t *)v4, v9);
    LODWORD(v7) = *(_DWORD *)(v4 + 8);
  }
  v10 = v7 - 1;
  v11 = *(unsigned int *)(v4 + 16);
  v12 = *((_DWORD *)*a3 + 4);
  if (v12 < 0x100)
    v13 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v13 = v12 >> 8;
  v14 = (v13 ^ v11) & v10;
  v15 = *(_QWORD *)v4;
  v16 = *(_QWORD *)v4 + 16 * v14;
  v17 = *(WTF **)v16;
  if (*(_QWORD *)v16)
  {
    v51 = a1;
    v18 = 0;
    while (1)
    {
      v19 = *((_DWORD *)v17 + 4);
      v20 = v19 < 0x100 ? WTF::StringImpl::hashSlowCase(v17) : v19 >> 8;
      v21 = (v14 + v7 - ((v20 ^ v11) & v10)) & v10;
      if (v18 > v21)
        break;
      if (v20 == v13)
      {
        result = WTF::equal(*(WTF **)v16, *a3, (const WTF::StringImpl *)a3);
        v15 = *(_QWORD *)v4;
        if ((result & 1) != 0)
        {
          v50 = 0;
          a1 = v51;
          goto LABEL_33;
        }
      }
      else
      {
        v15 = *(_QWORD *)v4;
      }
      v14 = ((_DWORD)v14 + 1) & v10;
      ++v18;
      v16 = v15 + 16 * v14;
      v17 = *(WTF **)v16;
      if (!*(_QWORD *)v16)
      {
        v23 = a4;
        if (v18 >= 0x80)
          *(_BYTE *)(v4 + 20) = 1;
        a1 = v51;
        goto LABEL_28;
      }
    }
    if (v18 >= 0x80)
      *(_BYTE *)(v4 + 20) = 1;
    v28 = *(WTF **)v16;
    *(_QWORD *)v16 = 0;
    v29 = v15 + 16 * v14;
    v32 = *(_QWORD *)(v29 + 8);
    v30 = (uint64_t *)(v29 + 8);
    v31 = v32;
    *v30 = 0;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0;
    v33 = *a3;
    if (*a3)
      *(_DWORD *)v33 += 2;
    *(_QWORD *)v16 = v33;
    v34 = *a4;
    *a4 = 0;
    v35 = *v30;
    *v30 = v34;
    if (v35)
    {
      v36 = v31;
      WTF::RefCounted<JSC::Breakpoint>::deref(v35, (WTF::StringImpl *)a2);
      v31 = v36;
    }
    v37 = ((_DWORD)v14 + 1) & v10;
    v38 = *(_QWORD *)v4;
    v39 = (WTF **)(*(_QWORD *)v4 + 16 * v37);
    v40 = *v39;
    if (*v39)
    {
      v52 = v7;
      do
      {
        v41 = *((_DWORD *)v40 + 4);
        if (v41 < 0x100)
        {
          v7 = v4;
          v43 = v11;
          v44 = v28;
          v45 = v31;
          v42 = WTF::StringImpl::hashSlowCase(v40);
          v31 = v45;
          v28 = v44;
          v11 = v43;
          v4 = v7;
          LODWORD(v7) = v52;
        }
        else
        {
          v42 = v41 >> 8;
        }
        if (++v21 > (((_DWORD)v37 + (_DWORD)v7 - ((v42 ^ v11) & v10)) & v10))
        {
          v46 = *v39;
          *v39 = 0;
          v47 = v38 + 16 * v37;
          v48 = *(_QWORD *)(v47 + 8);
          *v39 = v28;
          *(_QWORD *)(v47 + 8) = v31;
          v31 = v48;
          v28 = v46;
          v21 = (v37 + v7 - ((v42 ^ v11) & v10)) & v10;
        }
        v37 = ((_DWORD)v37 + 1) & v10;
        v38 = *(_QWORD *)v4;
        v39 = (WTF **)(*(_QWORD *)v4 + 16 * v37);
        v40 = *v39;
      }
      while (*v39);
    }
    *v39 = v28;
    v49 = v38 + 16 * v37;
    result = *(_QWORD *)(v49 + 8);
    *(_QWORD *)(v49 + 8) = v31;
    a1 = v51;
    if (!result)
      goto LABEL_32;
LABEL_31:
    result = WTF::RefCounted<JSC::Breakpoint>::deref(result, (WTF::StringImpl *)a2);
    goto LABEL_32;
  }
  v23 = a4;
LABEL_28:
  v24 = *a3;
  if (*a3)
    *(_DWORD *)v24 += 2;
  *(_QWORD *)v16 = v24;
  v25 = v15 + 16 * v14;
  v26 = *v23;
  *v23 = 0;
  result = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(v25 + 8) = v26;
  if (result)
    goto LABEL_31;
LABEL_32:
  ++*(_DWORD *)(v4 + 12);
  v15 = *(_QWORD *)v4;
  v50 = 1;
LABEL_33:
  v27 = v15 + 16 * *(unsigned int *)(v4 + 8);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v27;
  *(_BYTE *)(a1 + 16) = v50;
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMDebuggerAgent::setURLBreakpoint@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorDOMDebuggerAgent::setURLBreakpoint(a1 - 32, a2, a3, a4);
}

uint64_t WebCore::InspectorDOMDebuggerAgent::removeURLBreakpoint@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  WTF::StringImpl **v10;

  if (*a2 && *((_DWORD *)*a2 + 1))
  {
    if (*((_BYTE *)a3 + 1))
      v8 = *(_BYTE *)a3 == 0;
    else
      v8 = 1;
    if (v8)
    {
      v9 = a1 + 112;
      v10 = (WTF::StringImpl **)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 112), a2, a3);
      if ((WTF::StringImpl **)(*(_QWORD *)(a1 + 112) + 16 * *(unsigned int *)(a1 + 120)) != v10)
      {
LABEL_15:
        result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(v9, v10);
        goto LABEL_4;
      }
    }
    else
    {
      v9 = a1 + 136;
      v10 = (WTF::StringImpl **)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 136), a2, a3);
      if ((WTF::StringImpl **)(*(_QWORD *)(a1 + 136) + 16 * *(unsigned int *)(a1 + 144)) != v10)
        goto LABEL_15;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 160);
    if (v6)
    {
      *(_QWORD *)(a1 + 160) = 0;
      result = WTF::RefCounted<JSC::Breakpoint>::deref(v6, (WTF::StringImpl *)a2);
LABEL_4:
      *a4 = 0;
      a4[8] = 0;
      return result;
    }
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  a4[8] = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMDebuggerAgent::removeURLBreakpoint@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorDOMDebuggerAgent::removeURLBreakpoint(a1 - 32, a2, a3, a4);
}

uint64_t WTF::HashTable<WebCore::StyleOriginatedAnimation *,WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashMap<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v10;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          v6 = *(WTF::StringImpl **)(v5 + 56);
          *(_QWORD *)(v5 + 56) = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
          v7 = *(unsigned int *)(v5 + 16);
          if ((_DWORD)v7 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v7])(&v10, v5 + 8);
          *(_DWORD *)(v5 + 16) = -1;
          v8 = *(WTF::StringImpl **)v5;
          *(_QWORD *)v5 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
          WTF::fastFree((WTF *)v5, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (uint64_t *)(a1 + 16 * i);
      v6 = *v5;
      if (*v5 != -1)
      {
        v7 = (_DWORD *)v5[1];
        v5[1] = 0;
        if (v7)
        {
          if (*v7 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            v6 = *v5;
          }
          else
          {
            --*v7;
          }
        }
        *v5 = 0;
        if (v6)
        {
          do
          {
            v8 = __ldaxr((unsigned int *)v6);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, (unsigned int *)v6));
          if (!v9)
          {
            atomic_store(1u, (unsigned int *)v6);
            v10 = *(unsigned int *)(v6 + 28);
            if ((_DWORD)v10)
            {
              v13 = v6;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v10));
              v6 = v13;
            }
            v11 = *(WTF **)(v6 + 16);
            if (v11)
            {
              *(_QWORD *)(v6 + 16) = 0;
              *(_DWORD *)(v6 + 24) = 0;
              v12 = v6;
              WTF::fastFree(v11, a2);
              v6 = v12;
            }
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *Inspector::Protocol::Animation::Keyframe::Builder<0>::setOffset(uint64_t *a1, double a2)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v5, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

WTF::StringImpl *Inspector::Protocol::Animation::Keyframe::setEasing(Inspector::Protocol::Animation::Keyframe *this, const WTF::String *a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _BYTE v17[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, &v15, (const WTF::StringImpl *)&v16, (uint64_t)v17);
  if (v17[16])
  {
    v6 = (uint64_t *)((char *)this + 24);
    v7 = *((unsigned int *)this + 9);
    if ((_DWORD)v7 == *((_DWORD *)this + 8))
    {
      v12 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v15);
      v7 = *((unsigned int *)this + 9);
      v13 = *((_QWORD *)this + 3);
      v14 = *v12;
      if (*v12)
        *v14 += 2;
      *(_QWORD *)(v13 + 8 * v7) = v14;
    }
    else
    {
      v8 = *v6;
      v9 = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)this + 9) = v7 + 1;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::Protocol::Animation::Keyframe::setStyle(Inspector::Protocol::Animation::Keyframe *this, const WTF::String *a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _BYTE v17[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, &v15, (const WTF::StringImpl *)&v16, (uint64_t)v17);
  if (v17[16])
  {
    v6 = (uint64_t *)((char *)this + 24);
    v7 = *((unsigned int *)this + 9);
    if ((_DWORD)v7 == *((_DWORD *)this + 8))
    {
      v12 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v15);
      v7 = *((unsigned int *)this + 9);
      v13 = *((_QWORD *)this + 3);
      v14 = *v12;
      if (*v12)
        *v14 += 2;
      *(_QWORD *)(v13 + 8 * v7) = v14;
    }
    else
    {
      v8 = *v6;
      v9 = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)this + 9) = v7 + 1;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

int8x16_t *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::buildObjectForKeyframes(WebCore::KeyframeEffect &)::$_0,WebCore::buildObjectForKeyframes(WebCore::KeyframeEffect &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &>(WTF::StringBuilder ***a1, unsigned __int16 *a2)
{
  WTF::StringBuilder **v2;
  uint64_t v3;
  WTF::StringBuilder *v4;
  int8x16_t *result;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  __n128 v8;
  WTF::StringBuilder *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int8x16_t *v14;
  int v15;
  WTF::StringImpl *v16;

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  v16 = (WTF::StringImpl *)*WebCore::nameString(*a2);
  v14 = (int8x16_t *)": ";
  v15 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, (uint64_t *)&v16, &v14);
  result = (int8x16_t *)WebCore::ComputedStyleExtractor::valueForPropertyInStyle(v2[1], v2[2], v3, *(_QWORD *)v2[3], 0);
  if (!v14)
    return result;
  v9 = *v2;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v16, (uint64_t)v14, v6, v7, v8);
  if (*((_DWORD *)v9 + 4) || *((_QWORD *)v9 + 1))
  {
    if (v16 && (*((_BYTE *)v16 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    goto LABEL_12;
  }
  v11 = v16;
  if (v16)
    *(_DWORD *)v16 += 2;
  v12 = *(WTF::StringImpl **)v9;
  *(_QWORD *)v9 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v10);
      v11 = v16;
      if (!v16)
        goto LABEL_11;
      goto LABEL_10;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (v11)
LABEL_10:
    LODWORD(v11) = *((_DWORD *)v11 + 1);
LABEL_11:
  *((_DWORD *)v9 + 4) = (_DWORD)v11;
LABEL_12:
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (result->i32[0] == 2)
      return (int8x16_t *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v10);
    else
      result->i32[0] -= 2;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::buildObjectForKeyframes(WebCore::KeyframeEffect &)::$_0,WebCore::buildObjectForKeyframes(WebCore::KeyframeEffect &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &>(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  WTF::StringBuilder *v4;
  const WTF::StringImpl *v5;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  __n128 v8;
  int8x16_t *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int8x16_t *v15;
  int v16;
  WTF::StringImpl *v17;

  v3 = *a1;
  v4 = *(WTF::StringBuilder **)(*a1 + 32);
  v17 = *a2;
  v15 = (int8x16_t *)": ";
  v16 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, (uint64_t *)&v17, &v15);
  v8.n128_f64[0] = WebCore::ComputedStyleExtractor::customPropertyValue(*(WebCore::ComputedStyleExtractor **)(v3 + 40), (const WTF::AtomString *)a2, v5, &v15);
  v9 = v15;
  if (!v15)
    return;
  v10 = *(_QWORD *)(v3 + 32);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v17, (uint64_t)v15, v6, v7, v8);
  if (!*(_DWORD *)(v10 + 16) && !*(_QWORD *)(v10 + 8))
  {
    v12 = v17;
    if (v17)
      *(_DWORD *)v17 += 2;
    v13 = *(WTF::StringImpl **)v10;
    *(_QWORD *)v10 = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        v12 = v17;
        if (!v17)
          goto LABEL_11;
        goto LABEL_10;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (!v12)
    {
LABEL_11:
      *(_DWORD *)(v10 + 16) = (_DWORD)v12;
      goto LABEL_12;
    }
LABEL_10:
    LODWORD(v12) = *((_DWORD *)v12 + 1);
    goto LABEL_11;
  }
  if (v17 && (*((_BYTE *)v17 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_12:
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v9->i32[0] == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v11);
  else
    v9->i32[0] -= 2;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v13;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (uint64_t *)(a1 + 24 * i);
      if (*v5 != -1)
      {
        v6 = a1 + 24 * i;
        v7 = (WTF **)(v6 + 8);
        v8 = *(unsigned int *)(v6 + 20);
        if ((_DWORD)v8)
        {
          v9 = *v7;
          v10 = 8 * v8;
          do
          {
            v11 = *(_DWORD **)v9;
            *(_QWORD *)v9 = 0;
            if (v11)
            {
              if (v11[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
              else
                --v11[2];
            }
            v9 = (WTF *)((char *)v9 + 8);
            v10 -= 8;
          }
          while (v10);
        }
        v12 = *v7;
        if (*v7)
        {
          *v7 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          WTF::fastFree(v12, a2);
        }
        v13 = *v5;
        *v5 = 0;
        if (v13)
        {
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::InspectorCSSAgent::SetStyleSheetTextAction::~SetStyleSheetTextAction(WebCore::InspectorCSSAgent::SetStyleSheetTextAction *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E33EF800;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E33EF800;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::InspectorCSSAgent::SetStyleSheetTextAction::mergeId@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = *(WTF::StringImpl **)(*(_QWORD *)(this + 16) + 24);
  if (!v3)
  {
    this = WTF::tryFastCompactMalloc((WTF *)0x26);
    if (v6)
    {
      *(_QWORD *)v6 = 0x1200000002;
      *(_QWORD *)(v6 + 8) = v6 + 20;
      *(_DWORD *)(v6 + 16) = 4;
      *(_WORD *)(v6 + 36) = 8308;
      *(_OWORD *)(v6 + 20) = *(_OWORD *)"SetStyleSheetText ";
      *a2 = v6;
      return this;
    }
    goto LABEL_11;
  }
  v4 = *((_DWORD *)v3 + 1);
  *(_DWORD *)v3 += 2;
  if (v4 < 0 || (this = (v4 + 18), __OFADD__(v4, 18)))
  {
LABEL_11:
    *a2 = 0;
    goto LABEL_12;
  }
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, (*((_DWORD *)v3 + 4) >> 2) & 1, (int8x16_t *)"SetStyleSheetText ", 0x12u, (uint64_t)v3, a2);
  if (!*a2)
  {
LABEL_12:
    __break(0xC471u);
    return this;
  }
  if (*(_DWORD *)v3 == 2)
    return WTF::StringImpl::destroy(v3, v5);
  *(_DWORD *)v3 -= 2;
  return this;
}

WTF::StringImpl *WebCore::InspectorCSSAgent::SetStyleSheetTextAction::merge(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  if (v3)
    *v3 += 2;
  result = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::InspectorCSSAgent::SetStyleSheetTextAction::perform(WebCore::InspectorCSSAgent::SetStyleSheetTextAction *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;
  WebCore::InspectorCSSAgent::SetStyleSheetTextAction *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[2];
  char v15;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 2) + 24))(&v11);
  if (v13)
  {
    if (v13 != 1)
    {
      v10 = (WebCore::InspectorCSSAgent::SetStyleSheetTextAction *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::InspectorCSSAgent::SetStyleSheetTextAction::undo(v10);
      return;
    }
    v5 = v12;
    v12 = 0;
    *(_BYTE *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v5;
    v6 = 1;
    *(_BYTE *)(a2 + 16) = 1;
    goto LABEL_11;
  }
  v7 = v11;
  v11 = 0;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebCore::InspectorStyleSheet::setText(*((_QWORD **)this + 2), (WebCore::InspectorCSSAgent::SetStyleSheetTextAction *)((char *)this + 24), v14);
  if (v15)
  {
    v9 = v14[0];
    *(_QWORD *)(a2 + 8) = v14[1];
    *(_BYTE *)a2 = v9;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    WebCore::InspectorStyleSheet::reparseStyleSheet(*((WebCore::InspectorStyleSheet **)this + 2), (WebCore::InspectorCSSAgent::SetStyleSheetTextAction *)((char *)this + 24));
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  v6 = v13;
  if (v13 != -1)
LABEL_11:
    ((void (*)(_QWORD *, uint64_t *))off_1E33EF790[v6])(v14, &v11);
}

void WebCore::InspectorCSSAgent::SetStyleSheetTextAction::undo(WebCore::InspectorCSSAgent::SetStyleSheetTextAction *this@<X0>, uint64_t a2@<X8>)
{
  char v4;
  _QWORD v5[2];
  char v6;

  WebCore::InspectorStyleSheet::setText(*((_QWORD **)this + 2), (WebCore::InspectorCSSAgent::SetStyleSheetTextAction *)((char *)this + 32), v5);
  if (v6)
  {
    v4 = v5[0];
    *(_QWORD *)(a2 + 8) = v5[1];
    *(_BYTE *)a2 = v4;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    WebCore::InspectorStyleSheet::reparseStyleSheet(*((WebCore::InspectorStyleSheet **)this + 2), (WebCore::InspectorCSSAgent::SetStyleSheetTextAction *)((char *)this + 32));
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
}

void WebCore::InspectorCSSAgent::SetStyleSheetTextAction::redo(WebCore::InspectorCSSAgent::SetStyleSheetTextAction *this@<X0>, uint64_t a2@<X8>)
{
  char v4;
  _QWORD v5[2];
  char v6;

  WebCore::InspectorStyleSheet::setText(*((_QWORD **)this + 2), (WebCore::InspectorCSSAgent::SetStyleSheetTextAction *)((char *)this + 24), v5);
  if (v6)
  {
    v4 = v5[0];
    *(_QWORD *)(a2 + 8) = v5[1];
    *(_BYTE *)a2 = v4;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    WebCore::InspectorStyleSheet::reparseStyleSheet(*((WebCore::InspectorStyleSheet **)this + 2), (WebCore::InspectorCSSAgent::SetStyleSheetTextAction *)((char *)this + 24));
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
}

WebCore::InspectorCSSId *WebCore::InspectorCSSId::InspectorCSSId(WebCore::InspectorCSSId *this, const WTF::JSONImpl::Object *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t Integer;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString(a2, (const WTF::String *)&v11);
  v5 = v11;
  v11 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  *((_DWORD *)this + 2) = 0;
  if (*(_QWORD *)this)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Integer = WTF::JSONImpl::ObjectBase::getInteger(a2, (const WTF::String *)&v11);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    if ((Integer & 0xFF00000000) != 0)
    {
      *((_DWORD *)this + 2) = Integer;
    }
    else
    {
      v9 = *(WTF::StringImpl **)this;
      *(_QWORD *)this = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v6);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  return this;
}

void WebCore::InspectorCSSAgent::SetStyleTextAction::~SetStyleTextAction(WebCore::InspectorCSSAgent::SetStyleTextAction *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::InspectorCSSAgent::SetStyleTextAction::~SetStyleTextAction(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)this = off_1E33EF800;
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

uint64_t WebCore::InspectorCSSAgent::SetStyleTextAction::mergeId@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(this + 16) + 24);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 4);
    *(_DWORD *)v3 += 2;
  }
  else
  {
    v4 = 0;
  }
  v5 = 0;
  v6 = *(_DWORD *)(this + 32);
  v7 = v6;
  do
  {
    ++v5;
    v8 = v7 > 9;
    v7 /= 0xAu;
  }
  while (v8);
  if (v5 < 0)
    goto LABEL_28;
  v9 = __OFADD__(v5, 1);
  v10 = v5 + 1;
  v11 = v9;
  if (v4 < 0)
    goto LABEL_28;
  if (v11)
    goto LABEL_28;
  v9 = __OFADD__(v4, v10);
  v12 = v4 + v10;
  if (v9)
    goto LABEL_28;
  v13 = (v12 + 13);
  if (__OFADD__(v12, 13))
    goto LABEL_28;
  if (v3)
  {
    this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)a2, v13, (*(_BYTE *)(v3 + 16) & 4) != 0, v3, v6);
    if (*a2)
    {
      if (*(_DWORD *)v3 == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)v3, v14);
      *(_DWORD *)v3 -= 2;
      return this;
    }
LABEL_29:
    __break(0xC471u);
    return this;
  }
  if (v12 == -13)
  {
    v17 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    *a2 = v17;
    return this;
  }
  if ((v13 & 0x80000000) != 0 || (this = WTF::tryFastCompactMalloc((WTF *)(v13 + 20)), (v15 = v18[0]) == 0))
  {
LABEL_28:
    *a2 = 0;
    goto LABEL_29;
  }
  v16 = 0;
  *(_DWORD *)v18[0] = 2;
  *(_DWORD *)(v15 + 4) = v13;
  qmemcpy((void *)(v15 + 20), "SetStyleText :", 14);
  *(_QWORD *)(v15 + 8) = v15 + 20;
  *(_DWORD *)(v15 + 16) = 4;
  do
  {
    *((_BYTE *)&v18[1] + v16-- + 4) = (v6 % 0xA) | 0x30;
    v8 = v6 > 9;
    v6 /= 0xAu;
  }
  while (v8);
  if (v16 + 14 <= 13)
    this = (uint64_t)memcpy((void *)(v15 + 34), (char *)&v18[1] + v16 + 5, -v16);
  *a2 = v15;
  return this;
}

WTF::StringImpl *WebCore::InspectorCSSAgent::SetStyleTextAction::merge(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 40);
  if (v3)
    *v3 += 2;
  result = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorCSSAgent::SetStyleTextAction::perform(WebCore::InspectorCSSAgent::SetStyleTextAction *this)
{
  return (*(uint64_t (**)(_QWORD, char *, char *, char *, _QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), (char *)this + 24, (char *)this + 40, (char *)this + 48, 0);
}

uint64_t WebCore::InspectorCSSAgent::SetStyleTextAction::undo(WebCore::InspectorCSSAgent::SetStyleTextAction *this)
{
  return (*(uint64_t (**)(_QWORD, char *, char *, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), (char *)this + 24, (char *)this + 48, 0, 1);
}

uint64_t WebCore::InspectorCSSAgent::SetStyleTextAction::redo(WebCore::InspectorCSSAgent::SetStyleTextAction *this)
{
  return (*(uint64_t (**)(_QWORD, char *, char *, char *, _QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), (char *)this + 24, (char *)this + 40, (char *)this + 48, 0);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  BOOL v16;
  _WORD *v17;
  int8x16_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  _WORD *v33;
  unsigned __int128 *v35;
  unsigned __int128 *v36;
  unsigned __int128 v37;
  char v38;
  _QWORD v39[3];
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;

  v8 = (_QWORD *)result;
  v39[2] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
        v9 = v39[0];
        if (v39[0])
        {
          *(_DWORD *)v39[0] = 2;
          *(_DWORD *)(v9 + 4) = a2;
          qmemcpy((void *)(v9 + 20), "SetStyleText ", 13);
          *(_QWORD *)(v9 + 8) = v9 + 20;
          *(_DWORD *)(v9 + 16) = 4;
          v10 = (_BYTE *)(v9 + 33);
          if (a4)
          {
            v11 = *(_BYTE **)(a4 + 8);
            v12 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v12)
              {
                if ((_DWORD)v12 == 1)
                  *v10 = *v11;
                else
                  result = (uint64_t)memcpy((void *)(v9 + 33), v11, v12);
              }
            }
            else
            {
              if (v12 < 0x10)
              {
                v35 = (unsigned __int128 *)(v9 + 33);
              }
              else
              {
                v35 = (unsigned __int128 *)&v10[v12 & 0xFFFFFFF0];
                v36 = (unsigned __int128 *)(v9 + 33);
                do
                {
                  v37 = (unsigned __int128)vld2q_s8(v11);
                  v11 += 32;
                  *v36++ = v37;
                }
                while (v36 != v35);
              }
              while (v35 != (unsigned __int128 *)&v10[v12])
              {
                v38 = *v11;
                v11 += 2;
                *(_BYTE *)v35 = v38;
                v35 = (unsigned __int128 *)((char *)v35 + 1);
              }
            }
            v13 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v13 = 0;
          }
          v14 = 0;
          v15 = &v10[v13];
          *v15 = 58;
          do
          {
            *((_BYTE *)&v39[1] + v14-- + 4) = (a5 % 0xA) | 0x30;
            v16 = a5 > 9;
            a5 /= 0xAu;
          }
          while (v16);
          if (v14 + 14 <= 13)
            result = (uint64_t)memcpy(v15 + 1, (char *)&v39[1] + v14 + 5, -v14);
        }
        goto LABEL_41;
      }
LABEL_43:
      v9 = 0;
      goto LABEL_41;
    }
LABEL_42:
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_41;
  }
  if (!a2)
    goto LABEL_42;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_43;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v9 = v39[0];
  if (v39[0])
  {
    *(_DWORD *)v39[0] = 2;
    *(_DWORD *)(v9 + 4) = a2;
    *(_OWORD *)(v9 + 20) = xmmword_1969F2270;
    *(_QWORD *)(v9 + 8) = v9 + 20;
    *(_DWORD *)(v9 + 16) = 0;
    v17 = (_WORD *)(v9 + 46);
    *(_QWORD *)(v9 + 36) = 0x74007800650054;
    *(_WORD *)(v9 + 44) = 32;
    if (a4)
    {
      v18 = *(int8x16_t **)(a4 + 8);
      v19 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        v20 = (char *)&v17[v19];
        if (v19 >= 0x40)
        {
          v21 = (char *)&v17[v19 & 0xFFFFFFC0];
          v23 = 0uLL;
          v24 = (char *)(v9 + 46);
          do
          {
            v40.val[0] = *v18;
            v25 = v18[1];
            v41.val[0] = v18[2];
            v26 = v18[3];
            v18 += 4;
            v27 = v26;
            v41.val[1] = 0uLL;
            v42.val[0] = v25;
            v40.val[1] = 0uLL;
            v28 = v24;
            vst2q_s8(v28, v40);
            v28 += 32;
            v42.val[1] = 0uLL;
            vst2q_s8(v28, v42);
            v29 = v24 + 64;
            vst2q_s8(v29, v41);
            v30 = v24 + 96;
            vst2q_s8(v30, *(int8x16x2_t *)(&v23 - 1));
            v24 += 128;
          }
          while (v24 != v21);
        }
        else
        {
          v21 = (char *)(v9 + 46);
        }
        while (v21 != v20)
        {
          v31 = v18->u8[0];
          v18 = (int8x16_t *)((char *)v18 + 1);
          *(_WORD *)v21 = v31;
          v21 += 2;
        }
      }
      else if ((_DWORD)v19 == 1)
      {
        *v17 = v18->i16[0];
      }
      else if ((_DWORD)v19)
      {
        result = (uint64_t)memcpy((void *)(v9 + 46), v18, 2 * v19);
      }
      v22 = *(unsigned int *)(a4 + 4);
    }
    else
    {
      v22 = 0;
    }
    v32 = 0;
    v17[v22] = 58;
    do
    {
      *((_BYTE *)&v39[1] + v32-- + 4) = (a5 % 0xA) | 0x30;
      v16 = a5 > 9;
      a5 /= 0xAu;
    }
    while (v16);
    if (v32 + 14 <= 13)
    {
      v33 = (_WORD *)(v9 + 2 * v22 + 48);
      do
        *v33++ = *((unsigned __int8 *)&v39[1] + v32 + 5);
      while (!__CFADD__(v32++, 1));
    }
  }
LABEL_41:
  *v8 = v9;
  return result;
}

void WebCore::InspectorCSSAgent::SetRuleHeaderTextAction::~SetRuleHeaderTextAction(WebCore::InspectorCSSAgent::SetRuleHeaderTextAction *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::InspectorCSSAgent::SetStyleTextAction::~SetStyleTextAction(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::InspectorCSSAgent::SetRuleHeaderTextAction::perform@<X0>(WTF::StringImpl **this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t result;
  WebCore::InspectorCSSAgent::SetRuleHeaderTextAction *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  char v14;

  WebCore::InspectorStyleSheet::ruleHeaderText(this[2], (const WebCore::InspectorCSSId *)(this + 3), (uint64_t)&v11);
  if (v13)
  {
    if (v13 != 1)
    {
      v10 = (WebCore::InspectorCSSAgent::SetRuleHeaderTextAction *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::InspectorCSSAgent::SetRuleHeaderTextAction::undo(v10);
    }
    v5 = v12;
    v12 = 0;
    *(_BYTE *)a2 = (_BYTE)v11;
    *(_QWORD *)(a2 + 8) = v5;
    v6 = 1;
    *(_BYTE *)(a2 + 16) = 1;
    return ((uint64_t (*)(char *, WTF::StringImpl **))off_1E33EF790[v6])(&v14, &v11);
  }
  v7 = v11;
  v11 = 0;
  v8 = this[6];
  this[6] = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = WebCore::InspectorStyleSheet::setRuleHeaderText((uint64_t)this[2], (const WebCore::InspectorCSSId *)(this + 3), (const WTF::String *)(this + 5), a2);
  v6 = v13;
  if (v13 != -1)
    return ((uint64_t (*)(char *, WTF::StringImpl **))off_1E33EF790[v6])(&v14, &v11);
  return result;
}

uint64_t WebCore::InspectorCSSAgent::SetRuleHeaderTextAction::undo@<X0>(WebCore::InspectorCSSAgent::SetRuleHeaderTextAction *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::InspectorStyleSheet::setRuleHeaderText(*((_QWORD *)this + 2), (WebCore::InspectorCSSAgent::SetRuleHeaderTextAction *)((char *)this + 24), (WebCore::InspectorCSSAgent::SetRuleHeaderTextAction *)((char *)this + 48), a2);
}

uint64_t WebCore::InspectorCSSAgent::SetRuleHeaderTextAction::redo@<X0>(WebCore::InspectorCSSAgent::SetRuleHeaderTextAction *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::InspectorStyleSheet::setRuleHeaderText(*((_QWORD *)this + 2), (WebCore::InspectorCSSAgent::SetRuleHeaderTextAction *)((char *)this + 24), (WebCore::InspectorCSSAgent::SetRuleHeaderTextAction *)((char *)this + 40), a2);
}

void WebCore::InspectorCSSAgent::AddRuleAction::~AddRuleAction(WebCore::InspectorCSSAgent::AddRuleAction *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::InspectorCSSAgent::SetStyleTextAction::~SetStyleTextAction(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::InspectorCSSAgent::AddRuleAction::undo@<X0>(WebCore::InspectorCSSAgent::AddRuleAction *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::InspectorStyleSheet::deleteRule(*((_QWORD *)this + 2), (WebCore::InspectorCSSAgent::AddRuleAction *)((char *)this + 24), a2);
}

WTF::StringImpl *WebCore::InspectorCSSAgent::AddRuleAction::redo@<X0>(WebCore::InspectorStyleSheet **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  WebCore::InspectorStyleSheet *v6;
  int v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  int v12;
  WTF::StringImpl *result;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;

  WebCore::InspectorStyleSheet::addRule(this[2], (const WTF::String *)(this + 5), (uint64_t)&v14);
  if (v16)
  {
    if (v16 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x195E31624);
    }
    v4 = v15;
    v15 = 0;
    *(_BYTE *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v4;
    v5 = 1;
    *(_BYTE *)(a2 + 16) = 1;
    return (WTF::StringImpl *)off_1E33EF930[v5](&v17, &v14);
  }
  v6 = this[2];
  v7 = (*(uint64_t (**)(WebCore::InspectorStyleSheet *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 64))(v6, v14, 1, 0);
  if (v7 == -1)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = v7;
    v10 = (WTF::StringImpl *)*((_QWORD *)v6 + 3);
    if (v10)
    {
      v11 = *(_DWORD *)v10;
      *(_DWORD *)v10 += 4;
      v12 = v11 + 2;
      if (v12)
        *(_DWORD *)v10 = v12;
      else
        WTF::StringImpl::destroy(v10, v8);
    }
  }
  result = this[3];
  this[3] = v10;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  *((_DWORD *)this + 8) = v9;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v5 = v16;
  if (v16 != -1)
    return (WTF::StringImpl *)off_1E33EF930[v5](&v17, &v14);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore12CSSStyleRuleENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = (WTF **)((char *)this + 8);
    do
    {
      v5 = *v4;
      *v4 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
        {
          v7 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
          *((_QWORD *)v5 + 1) = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
          WTF::fastFree(v5, a2);
        }
        else
        {
          --*(_DWORD *)v5;
        }
      }
      v6 = *(v4 - 1);
      *(v4 - 1) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::InspectorDOMAgent::InspectorEventListener,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 24;
    do
    {
      if (*(_DWORD *)(v4 - 24) != -1)
      {
        v5 = *(_QWORD *)(v4 + 24);
        *(_QWORD *)(v4 + 24) = 0;
        if (v5)
          WTF::RefCounted<JSC::Breakpoint>::deref(v5, a2);
        v6 = *(WTF::StringImpl **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v7 = *(_DWORD **)v4;
        *(_QWORD *)v4 = 0;
        if (v7)
        {
          if (v7[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
          else
            --v7[4];
        }
        v8 = *(_QWORD *)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v8)
        {
          if ((*(_BYTE *)(v8 + 22) & 2) != 0)
          {
            if (*(_DWORD *)(v8 + 24) == 2)
            {
              if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v8);
            }
            else
            {
              *(_DWORD *)(v8 + 24) -= 2;
            }
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
          }
        }
      }
      v4 += 56;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::default_delete<WebCore::RevalidateStyleAttributeTask>::operator()[abi:sn180100](_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v3 = a1[8];
  if (v3)
  {
    v7 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v7)
    {
      v8 = (uint64_t *)a1[8];
      do
      {
        v9 = *v8;
        if (*v8 != -1)
        {
          *v8 = 0;
          if (v9)
          {
            if (*(_DWORD *)(v9 + 24) == 2)
            {
              if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v9);
            }
            else
            {
              *(_DWORD *)(v9 + 24) -= 2;
            }
          }
        }
        ++v8;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  a1[1] = off_1E31F7378;
  v4 = a1[7];
  a1[7] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(a1 + 1));
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl *v13;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF::StringImpl **)(a1 + 24 * i);
      if (*v5 != (WTF::StringImpl *)-1)
      {
        v6 = a1 + 24 * i;
        v7 = (WTF **)(v6 + 8);
        v8 = *(unsigned int *)(v6 + 20);
        if ((_DWORD)v8)
        {
          v9 = *v7;
          v10 = 8 * v8;
          do
          {
            v11 = *(_QWORD *)v9;
            *(_QWORD *)v9 = 0;
            if (v11)
            {
              if (*(_DWORD *)(v11 + 24) == 2)
              {
                if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v11);
              }
              else
              {
                *(_DWORD *)(v11 + 24) -= 2;
              }
            }
            v9 = (WTF *)((char *)v9 + 8);
            v10 -= 8;
          }
          while (v10);
        }
        v12 = *v7;
        if (*v7)
        {
          *v7 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          WTF::fastFree(v12, a2);
        }
        v13 = *v5;
        *v5 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_DWORD *)(a1 + 16 * i) != -1)
      {
        v5 = a1 + 16 * i;
        v6 = *(_QWORD *)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr((unsigned int *)v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, (unsigned int *)v6));
          if (!v8)
          {
            atomic_store(1u, (unsigned int *)v6);
            v9 = *(unsigned int *)(v6 + 28);
            if ((_DWORD)v9)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
            v10 = *(WTF **)(v6 + 16);
            if (v10)
            {
              *(_QWORD *)(v6 + 16) = 0;
              *(_DWORD *)(v6 + 24) = 0;
              WTF::fastFree(v10, a2);
            }
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::InspectorDOMAgent::InspectorEventListener>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::InspectorDOMAgent::InspectorEventListener,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::InspectorDOMAgent::InspectorEventListener>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _QWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  _DWORD *v36;
  _QWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _DWORD **v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v60;
  _DWORD *v61;
  _DWORD *v62;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = result + 32;
    do
    {
      *(_DWORD *)(v10 - 16) = 0;
      *(_DWORD *)(v10 - 8) = 1;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)v10 = 0;
      *(_WORD *)(v10 + 24) = 0;
      v10 += 56;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v11 = 0;
    v12 = 0;
    v5 = v5;
    v56 = v5;
    v57 = v4;
    do
    {
      v13 = *(_DWORD *)(v4 + 56 * v11);
      if (v13 != -1)
      {
        if (v13)
        {
          v22 = *a1;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = 0;
          v25 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
          v26 = ((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) ^ (((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) >> 16);
          do
          {
            v27 = v26 & v23;
            v28 = (_DWORD *)(v22 + 56 * (v26 & v23));
            v26 = ++v24 + (v26 & v23);
          }
          while (*v28);
          v29 = v22 + 56 * v27;
          v30 = *(_QWORD *)(v29 + 48);
          v60 = (_QWORD *)(v29 + 48);
          *(_QWORD *)(v29 + 48) = 0;
          if (v30)
            WTF::RefCounted<JSC::Breakpoint>::deref(v30, v8);
          v31 = v22 + 56 * v27;
          v34 = *(WTF::StringImpl **)(v31 + 32);
          v33 = (_QWORD *)(v31 + 32);
          v32 = v34;
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v8);
            else
              *(_DWORD *)v32 -= 2;
          }
          v61 = (_DWORD *)(v4 + 56 * v11);
          v35 = v22 + 56 * v27;
          v38 = *(_DWORD **)(v35 + 24);
          v37 = (_QWORD *)(v35 + 24);
          v36 = v38;
          *v37 = 0;
          if (v38)
          {
            if (v36[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
            else
              --v36[4];
          }
          v39 = v22 + 56 * v27;
          v42 = *(_QWORD *)(v39 + 16);
          v41 = (_QWORD *)(v39 + 16);
          v40 = v42;
          *v41 = 0;
          if (v42)
          {
            if ((*(_BYTE *)(v40 + 22) & 2) != 0)
            {
              if (*(_DWORD *)(v40 + 24) == 2)
              {
                if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v40);
              }
              else
              {
                *(_DWORD *)(v40 + 24) -= 2;
              }
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v40 + 96))(v40);
            }
          }
          v62 = v12;
          v43 = (_QWORD *)(v4 + 56 * v11);
          v45 = v43 + 2;
          v44 = v43[2];
          v43[2] = 0;
          *v41 = v44;
          v47 = (_DWORD **)(v43 + 3);
          v46 = v43[3];
          v43[3] = 0;
          *v37 = v46;
          *v28 = *v61;
          v49 = v43[4];
          v48 = v43 + 4;
          v50 = v22 + 56 * v27;
          *(_DWORD *)(v50 + 8) = *((_DWORD *)v48 - 6);
          *v48 = 0;
          *v33 = v49;
          *(_WORD *)(v50 + 40) = *((_WORD *)v48 + 4);
          v51 = v48[2];
          v48[2] = 0;
          *v60 = v51;
          v52 = v48[2];
          v48[2] = 0;
          if (v52)
            WTF::RefCounted<JSC::Breakpoint>::deref(v52, v8);
          v53 = (WTF::StringImpl *)*v48;
          *v48 = 0;
          v5 = v56;
          v4 = v57;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v8);
            else
              *(_DWORD *)v53 -= 2;
          }
          v54 = *v47;
          *v47 = 0;
          if (v54)
          {
            if (v54[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
            else
              --v54[4];
          }
          v55 = *v45;
          *v45 = 0;
          v12 = v62;
          if (v55)
          {
            if ((*(_BYTE *)(v55 + 22) & 2) != 0)
            {
              if (*(_DWORD *)(v55 + 24) == 2)
              {
                if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v55);
              }
              else
              {
                *(_DWORD *)(v55 + 24) -= 2;
              }
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v55 + 96))(v55);
            }
          }
          if (v61 == a3)
            v12 = v28;
        }
        else
        {
          v14 = v4 + 56 * v11;
          v15 = *(_QWORD *)(v14 + 48);
          *(_QWORD *)(v14 + 48) = 0;
          if (v15)
            WTF::RefCounted<JSC::Breakpoint>::deref(v15, v8);
          v16 = v4 + 56 * v11;
          v17 = *(WTF::StringImpl **)(v16 + 32);
          *(_QWORD *)(v16 + 32) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v8);
            else
              *(_DWORD *)v17 -= 2;
          }
          v18 = v4 + 56 * v11;
          v19 = *(_DWORD **)(v18 + 24);
          *(_QWORD *)(v18 + 24) = 0;
          if (v19)
          {
            if (v19[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
            else
              --v19[4];
          }
          v20 = v4 + 56 * v11;
          v21 = *(_QWORD *)(v20 + 16);
          *(_QWORD *)(v20 + 16) = 0;
          if (v21)
          {
            if ((*(_BYTE *)(v21 + 22) & 2) != 0)
            {
              if (*(_DWORD *)(v21 + 24) == 2)
              {
                if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v21);
              }
              else
              {
                *(_DWORD *)(v21 + 24) -= 2;
              }
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 96))(v21);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unint64_t WebCore::InspectableNode::get(JSC::JSGlobalObject **this, JSC::JSGlobalObject *a2, WebCore::Node *a3)
{
  return WebCore::InspectorDOMAgent::nodeAsScriptValue(a2, this[1], a3);
}

void WebCore::InspectableNode::~InspectableNode(WebCore::InspectableNode *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::Base64Specification>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  size_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_BYTE **)result;
  v4 = *(_QWORD *)(result + 8);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_3;
  }
  v6 = v4 - 1;
  if (!((unint64_t)(v4 - 1) >> 31))
  {
LABEL_3:
    v7 = *(_QWORD *)(a2 + 8);
    if ((v7 + 1115575925) >= 0x427E5676)
    {
      if ((*(_DWORD *)(a2 + 16) & 2) != 0)
      {
        v8 = ((4 * (_DWORD)v7) | 2u) / 3;
      }
      else
      {
        v9 = (2863311531u * (unint64_t)(v7 + 2)) >> 32;
        v8 = (2 * v9) & 0xFFFFFFFC;
        if (((v9 & 0x40000000) != 0) != __OFSUB__(v7 + 1115575925, 1115575926))
          goto LABEL_8;
      }
    }
    else
    {
      v8 = 0;
    }
    v11 = v6 + v8;
    if (!__OFADD__((_DWORD)v6, v8))
    {
      if (!(_DWORD)v11)
      {
        v10 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        goto LABEL_18;
      }
      if ((v11 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
        v10 = v12;
        if (v12)
        {
          *(_DWORD *)v12 = 2;
          *(_DWORD *)(v12 + 4) = v11;
          *(_QWORD *)(v12 + 8) = v12 + 20;
          *(_DWORD *)(v12 + 16) = 4;
          if ((_DWORD)v6)
          {
            if ((_DWORD)v6 == 1)
              *(_BYTE *)(v12 + 20) = *v5;
            else
              memcpy((void *)(v12 + 20), v5, v6);
          }
          result = WTF::base64Encode();
        }
        goto LABEL_18;
      }
    }
LABEL_8:
    v10 = 0;
LABEL_18:
    *a3 = v10;
    return result;
  }
  result = 124;
  __break(0xC471u);
  return result;
}

void WebCore::EventFiredCallback::~EventFiredCallback(WebCore::EventFiredCallback *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 0;
    v3 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::EventFiredCallback *v6;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 0;
    v3 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
    {
      v6 = this;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
        this = v6;
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

unsigned int *WebCore::EventFiredCallback::handleEvent(unsigned int *this, WebCore::ScriptExecutionContext *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  WebCore::Event *v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  WebCore::Event *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  WebCore *v33;
  WTF::StringImpl *v34;
  unint64_t StatusReg;
  uint64_t v36;
  WebCore *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  _DWORD *v53;
  WTF::StringImpl *v54;
  WTF::MonotonicTime *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  _DWORD **v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  void *v64;
  WebCore::FullscreenManager *v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  WTF::StringImpl *v71;
  _DWORD *v72;
  WTF::StringImpl *v73[2];
  char v74;

  v3 = *(_QWORD *)(a3 + 48);
  if (v3 && (*(_QWORD *)(v3 + 16) & 0x2000000000000) != 0)
  {
    v5 = this;
    *(_DWORD *)(v3 + 24) += 2;
    this = (unsigned int *)*((_QWORD *)this + 3);
    v6 = *((_QWORD *)this + 52);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 - 8);
      v8 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = *(WebCore::Event **)(v6 + 8 * v11);
      if (v12 == (WebCore::Event *)a3)
        goto LABEL_77;
      v13 = 1;
      while (v12)
      {
        v11 = (v11 + v13) & v7;
        v12 = *(WebCore::Event **)(v6 + 8 * v11);
        ++v13;
        if (v12 == (WebCore::Event *)a3)
          goto LABEL_77;
      }
    }
    v73[0] = 0;
    v14 = WebCore::InspectorDOMAgent::pushNodePathToFrontend((uint64_t)this, (WebCore::Node *)v73, (WebCore::InspectorDOMAgent *)v3);
    this = (unsigned int *)v73[0];
    if (v73[0])
    {
      if (*(_DWORD *)v73[0] == 2)
      {
        this = (unsigned int *)WTF::StringImpl::destroy(v73[0], a2);
        if (!v14)
          goto LABEL_77;
LABEL_14:
        v15 = (uint64_t *)(*((_QWORD *)v5 + 3) + 416);
        v16 = *v15;
        if (*v15
          || (this = (unsigned int *)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(*((_QWORD *)v5 + 3) + 416), 8u, 0), (v16 = *v15) != 0))
        {
          v17 = *(_DWORD *)(v16 - 8);
        }
        else
        {
          v17 = 0;
        }
        v18 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = (uint64_t *)(v16 + 8 * v21);
        v23 = (WebCore::Event *)*v22;
        if (*v22)
        {
          v24 = 0;
          v25 = 1;
          while (v23 != (WebCore::Event *)a3)
          {
            if (v23 == (WebCore::Event *)-1)
              v24 = v22;
            v21 = (v21 + v25) & v17;
            v22 = (uint64_t *)(v16 + 8 * v21);
            v23 = (WebCore::Event *)*v22;
            ++v25;
            if (!*v22)
            {
              if (v24)
              {
                *v24 = 0;
                --*(_DWORD *)(*v15 - 16);
                v22 = v24;
              }
              goto LABEL_25;
            }
          }
LABEL_40:
          v33 = (WebCore *)WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)this);
          v34 = v73[0];
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          v36 = *(_QWORD *)(StatusReg + 736);
          if (!v36 || (v37 = *(WebCore **)(v36 + 96)) == 0)
          {
            v33 = (WebCore *)WebCore::threadGlobalDataSlow(v33);
            v37 = v33;
          }
          v38 = (_QWORD *)(a3 + 24);
          v39 = *((_QWORD *)v37 + 5);
          if (!v39)
          {
            v33 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v37);
            v39 = *((_QWORD *)v37 + 5);
          }
          if (*v38 == *(_QWORD *)(v39 + 2376))
            goto LABEL_52;
          v40 = *(_QWORD *)(StatusReg + 736);
          if (!v40 || (v41 = *(_QWORD *)(v40 + 96)) == 0)
            v41 = WebCore::threadGlobalDataSlow(v33);
          v42 = *(_QWORD *)(v41 + 40);
          if (!v42)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v41);
            v42 = *(_QWORD *)(v41 + 40);
          }
          if (*v38 == *(_QWORD *)(v42 + 848))
          {
LABEL_52:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v71 = v73[0];
            v43 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
            v44 = *(_QWORD *)(v43 + 1992);
            if (!v44)
            {
              v61 = WTF::fastMalloc((WTF *)0x90);
              *(_QWORD *)v61 = 0;
              *(_DWORD *)(v61 + 8) = 0;
              v62 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v43);
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 + 1, v62));
              *(_QWORD *)(v61 + 24) = 0;
              *(_QWORD *)(v61 + 32) = 0;
              *(_QWORD *)(v61 + 16) = v62;
              *(_BYTE *)(v61 + 40) = 0;
              *(_OWORD *)(v61 + 48) = 0u;
              *(_OWORD *)(v61 + 64) = 0u;
              *(_OWORD *)(v61 + 80) = 0u;
              *(_OWORD *)(v61 + 96) = 0u;
              *(_OWORD *)(v61 + 112) = 0u;
              *(_DWORD *)(v61 + 127) = 0;
              *(_QWORD *)(v61 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
              v65 = *(WebCore::FullscreenManager **)(v43 + 1992);
              *(_QWORD *)(v43 + 1992) = v61;
              if (v65)
              {
                WebCore::FullscreenManager::~FullscreenManager(v65, v64);
                if (*(_DWORD *)(v66 + 8))
                {
                  *(_OWORD *)(v66 + 112) = 0u;
                  *(_OWORD *)(v66 + 128) = 0u;
                  *(_OWORD *)(v66 + 80) = 0u;
                  *(_OWORD *)(v66 + 96) = 0u;
                  *(_OWORD *)(v66 + 48) = 0u;
                  *(_OWORD *)(v66 + 64) = 0u;
                  *(_OWORD *)(v66 + 16) = 0u;
                  *(_OWORD *)(v66 + 32) = 0u;
                  *(_OWORD *)v66 = 0u;
                }
                else
                {
                  WTF::fastFree((WTF *)v66, v67);
                }
              }
              v44 = *(_QWORD *)(v43 + 1992);
            }
            v45 = *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8);
            v46 = *(_QWORD **)(v45 + 3096);
            if (v46)
            {
              v68 = 0;
              v69 = (_QWORD *)(v45 + 3104);
              do
              {
                if (v68)
                  v70 = v68 + 1;
                else
                  v70 = v69;
                v68 = (_QWORD *)*v70;
                v47 = *v68;
                if ((*(_BYTE *)(*v68 + 54) & 0x40) != 0)
                  break;
                v47 = 0;
              }
              while (v68 != v46);
            }
            else
            {
              v47 = 0;
            }
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v47 != 0));
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v34 + 2, &v71, (const WTF::StringImpl *)&v72, (uint64_t)v73);
            if (v74)
            {
              v49 = (uint64_t *)((char *)v34 + 24);
              v50 = *((unsigned int *)v34 + 9);
              if ((_DWORD)v50 == *((_DWORD *)v34 + 8))
              {
                v58 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)&v71);
                v50 = *((unsigned int *)v34 + 9);
                v59 = *((_QWORD *)v34 + 3);
                v60 = *v58;
                if (*v58)
                  *v60 += 2;
                *(_QWORD *)(v59 + 8 * v50) = v60;
              }
              else
              {
                v51 = *v49;
                v52 = v71;
                if (v71)
                  *(_DWORD *)v71 += 2;
                *(_QWORD *)(v51 + 8 * v50) = v52;
              }
              *((_DWORD *)v34 + 9) = v50 + 1;
            }
            v53 = v72;
            v72 = 0;
            if (v53)
            {
              if (*v53 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v53;
            }
            v54 = v71;
            v71 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2)
                WTF::StringImpl::destroy(v54, v48);
              else
                *(_DWORD *)v54 -= 2;
            }
          }
          v55 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v5 + 3) + 24)
                                                                        + 56))(*(_QWORD *)(*((_QWORD *)v5 + 3) + 24));
          WTF::MonotonicTime::now(v55);
          v56 = *((_QWORD *)v34 + 2);
          if (v56 && *(_DWORD *)(v56 - 12))
          {
            v57 = v34;
            v34 = 0;
          }
          else
          {
            v57 = 0;
          }
          v73[0] = v57;
          Inspector::DOMFrontendDispatcher::didFireEvent();
          this = (unsigned int *)v73[0];
          v73[0] = 0;
          if (this)
          {
            if (*this == 1)
            {
              this = (unsigned int *)WTF::JSONImpl::Value::operator delete();
              if (v34)
              {
LABEL_75:
                if (*(_DWORD *)v34 == 1)
                  this = (unsigned int *)WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v34;
              }
LABEL_77:
              if (*(_DWORD *)(v3 + 24) == 2)
              {
                if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
                  return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
              }
              else
              {
                *(_DWORD *)(v3 + 24) -= 2;
              }
              return this;
            }
            --*this;
          }
          if (v34)
            goto LABEL_75;
          goto LABEL_77;
        }
LABEL_25:
        *v22 = a3;
        v26 = *v15;
        if (*v15)
          v27 = *(_DWORD *)(v26 - 12) + 1;
        else
          v27 = 1;
        *(_DWORD *)(v26 - 12) = v27;
        v28 = *v15;
        if (*v15)
          v29 = *(_DWORD *)(v28 - 12);
        else
          v29 = 0;
        v30 = (*(_DWORD *)(v28 - 16) + v29);
        v31 = *(unsigned int *)(v28 - 4);
        if (v31 > 0x400)
        {
          if (v31 > 2 * v30)
            goto LABEL_40;
        }
        else
        {
          if (3 * v31 > 4 * v30)
            goto LABEL_40;
          if (!(_DWORD)v31)
          {
            v32 = 8;
            goto LABEL_39;
          }
        }
        v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_39:
        this = (unsigned int *)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v15, v32, v22);
        goto LABEL_40;
      }
      *(_DWORD *)v73[0] -= 2;
    }
    if (!v14)
      goto LABEL_77;
    goto LABEL_14;
  }
  return this;
}

uint64_t WTF::RefCounted<JSC::Breakpoint>::deref(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(unsigned int *)(this + 52);
    if ((_DWORD)v3)
    {
      v4 = 24 * v3;
      v5 = (WTF::StringImpl **)(*(_QWORD *)(this + 40) + 8);
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v5 += 3;
        v4 -= 24;
      }
      while (v4);
    }
    v7 = *(WTF **)(v2 + 40);
    if (v7)
    {
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 48) = 0;
      WTF::fastFree(v7, a2);
    }
    v8 = *(WTF::StringImpl **)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::InspectorAnimationAgent::*&)(void),WebCore::InspectorAnimationAgent*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t *WTF::HashTable<WebCore::StyleOriginatedAnimation *,WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashMap<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t *result;
  char v42;
  char v43;
  char v44;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (uint64_t *)(v5 + 16 * v10);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = (uint64_t *)(v20 + 16 * v27);
          v30 = v29[1];
          v29[1] = 0;
          if (v30)
          {
            v31 = *(WTF::StringImpl **)(v30 + 56);
            *(_QWORD *)(v30 + 56) = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v9);
              else
                *(_DWORD *)v31 -= 2;
            }
            v32 = *(unsigned int *)(v30 + 16);
            if ((_DWORD)v32 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v32])(&v44, v30 + 8);
            *(_DWORD *)(v30 + 16) = -1;
            v33 = *(WTF::StringImpl **)v30;
            *(_QWORD *)v30 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2)
                WTF::StringImpl::destroy(v33, v9);
              else
                *(_DWORD *)v33 -= 2;
            }
            WTF::fastFree((WTF *)v30, v9);
          }
          *v29 = *v13;
          v34 = v5 + 16 * v10;
          v35 = *(_QWORD *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          v29[1] = v35;
          v36 = *(_QWORD *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          if (v36)
          {
            v37 = *(WTF::StringImpl **)(v36 + 56);
            *(_QWORD *)(v36 + 56) = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v9);
              else
                *(_DWORD *)v37 -= 2;
            }
            v38 = *(unsigned int *)(v36 + 16);
            if ((_DWORD)v38 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v38])(&v43, v36 + 8);
            *(_DWORD *)(v36 + 16) = -1;
            v39 = *(WTF::StringImpl **)v36;
            *(_QWORD *)v36 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
                WTF::StringImpl::destroy(v39, v9);
              else
                *(_DWORD *)v39 -= 2;
            }
            WTF::fastFree((WTF *)v36, v9);
          }
          if (v13 == a3)
            v11 = v29;
        }
        else
        {
          v15 = v5 + 16 * v10;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            v17 = *(WTF::StringImpl **)(v16 + 56);
            *(_QWORD *)(v16 + 56) = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v9);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = *(unsigned int *)(v16 + 16);
            if ((_DWORD)v18 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v18])(&v42, v16 + 8);
            *(_DWORD *)(v16 + 16) = -1;
            v19 = *(WTF::StringImpl **)v16;
            *(_QWORD *)v16 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, v9);
              else
                *(_DWORD *)v19 -= 2;
            }
            WTF::fastFree((WTF *)v16, v9);
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WTF::WeakHashMap<WebCore::WebAnimation,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_32;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * --v4);
      result = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
      {
        *v6 = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          v10 = *(unsigned int *)(result + 28);
          if ((_DWORD)v10)
          {
            v27 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v10));
            result = v27;
          }
          v11 = *(WTF **)(result + 16);
          if (v11)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v26 = result;
            WTF::fastFree(v11, a2);
            result = v26;
          }
          WTF::fastFree((WTF *)result, a2);
        }
        *v6 = -1;
        v9 = v3 + 16 * v4;
        result = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)result;
        }
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v12 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v13 = *(_DWORD *)(v12 - 12);
      else
        v13 = 0;
      *(_DWORD *)(v12 - 12) = v13 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v14 = *(_DWORD *)(v3 - 4);
      v15 = *(unsigned int *)(v3 - 12);
      if (v14 >= 9 && 6 * (int)v15 < v14)
      {
        v19 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
        v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
        v21 = (v20 | HIWORD(v20)) + 1;
        if (v21 > 0x400)
        {
          if (v21 > 2 * v15)
            goto LABEL_43;
        }
        else if (3 * v21 > 4 * v15)
        {
LABEL_41:
          v22 = (double)v15;
          v23 = (double)v21;
          v24 = 0.604166667;
          goto LABEL_44;
        }
        LODWORD(v21) = 2 * v21;
        if (v21 <= 0x400)
          goto LABEL_41;
LABEL_43:
        v22 = (double)v15;
        v23 = (double)v21;
        v24 = 0.416666667;
LABEL_44:
        if (v23 * v24 <= v22)
          LODWORD(v21) = 2 * v21;
        if (v21 <= 8)
          v25 = 8;
        else
          v25 = v21;
        result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)v2, v25);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v17 = 0;
          goto LABEL_36;
        }
LABEL_33:
        v17 = *(_DWORD *)(v3 - 12);
        v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
          goto LABEL_37;
        goto LABEL_36;
      }
LABEL_32:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_33;
    }
  }
  v17 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_36:
  v18 = v17;
LABEL_37:
  *(_DWORD *)(v2 + 12) = 2 * v18;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<Inspector::Protocol::Console::StackTrace,WTF::RawPtrTraits<Inspector::Protocol::Console::StackTrace>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Console::StackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = (uint64_t *)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11 != -1)
        break;
LABEL_34:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    if (!v12)
    {
      v13 = v4 + 16 * v9;
      v14 = *(_DWORD **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v14)
      {
        if (*v14 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v12 = *v11;
        }
        else
        {
          --*v14;
        }
      }
      *v11 = 0;
      if (!v12)
        goto LABEL_34;
      do
      {
        v15 = __ldaxr((unsigned int *)v12);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)v12));
      if (v16)
        goto LABEL_34;
      atomic_store(1u, (unsigned int *)v12);
      v17 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v17)
      {
        v45 = v12;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v17));
        v12 = v45;
      }
      v18 = *(WTF **)(v12 + 16);
      if (v18)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        v43 = v12;
        WTF::fastFree(v18, v8);
        v12 = v43;
      }
      goto LABEL_18;
    }
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 8);
    else
      v20 = 0;
    v21 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = 1;
    do
    {
      v26 = v24;
      v27 = *(_QWORD *)(v19 + 16 * v24);
      v24 = (v24 + v25++) & v20;
    }
    while (v27);
    v28 = (uint64_t *)(v19 + 16 * v26);
    v29 = (_DWORD *)v28[1];
    v28[1] = 0;
    if (v29)
    {
      if (*v29 == 1)
      {
        WTF::JSONImpl::Value::operator delete();
        v36 = *v28;
        *v28 = 0;
        if (v36)
        {
          do
          {
            v37 = __ldaxr((unsigned int *)v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, (unsigned int *)v36));
          if (!v38)
          {
            atomic_store(1u, (unsigned int *)v36);
            v39 = *(unsigned int *)(v36 + 28);
            if ((_DWORD)v39)
            {
              v48 = v36;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v36 + 16), (WTF::StringImpl *)(*(_QWORD *)(v36 + 16) + 32 * v39));
              v36 = v48;
            }
            v40 = *(WTF **)(v36 + 16);
            if (v40)
            {
              *(_QWORD *)(v36 + 16) = 0;
              *(_DWORD *)(v36 + 24) = 0;
              v47 = v36;
              WTF::fastFree(v40, v8);
              v36 = v47;
            }
            WTF::fastFree((WTF *)v36, v8);
          }
        }
        goto LABEL_28;
      }
      --*v29;
    }
    *v28 = 0;
LABEL_28:
    v30 = *v11;
    *v11 = 0;
    *v28 = v30;
    v31 = v4 + 16 * v9;
    v32 = *(_QWORD *)(v31 + 8);
    *(_QWORD *)(v31 + 8) = 0;
    v28[1] = v32;
    v33 = *(_DWORD **)(v31 + 8);
    *(_QWORD *)(v31 + 8) = 0;
    if (v33)
    {
      if (*v33 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v33;
    }
    v12 = *v11;
    *v11 = 0;
    if (!v12)
      goto LABEL_34;
    do
    {
      v34 = __ldaxr((unsigned int *)v12);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)v12));
    if (v35)
      goto LABEL_34;
    atomic_store(1u, (unsigned int *)v12);
    v41 = *(unsigned int *)(v12 + 28);
    if ((_DWORD)v41)
    {
      v46 = v12;
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v41));
      v12 = v46;
    }
    v42 = *(WTF **)(v12 + 16);
    if (v42)
    {
      *(_QWORD *)(v12 + 16) = 0;
      *(_DWORD *)(v12 + 24) = 0;
      v44 = v12;
      WTF::fastFree(v42, v8);
      v12 = v44;
    }
LABEL_18:
    WTF::fastFree((WTF *)v12, v8);
    goto LABEL_34;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::WebAnimation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::WebAnimation *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::WebAnimation *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::WebAnimation *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  uint64_t *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;

  v4 = *((unsigned int *)a1 + 2);
  v5 = (WTF *)*a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *a1 = result;
  *((_DWORD *)a1 + 2) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *((_DWORD *)a1 + 4) = (v10 >> 31) ^ v10;
  *((_BYTE *)a1 + 20) = 0;
  v41 = v4;
  if ((_DWORD)v4)
  {
    v11 = a1;
    v12 = 0;
    v40 = v5;
    v43 = a1;
    do
    {
      v13 = (WTF::StringImpl **)((char *)v5 + 16 * v12);
      v14 = *v13;
      if (*v13)
      {
        v15 = *((_DWORD *)v11 + 2);
        v16 = *((_DWORD *)v11 + 4);
        v17 = *((_DWORD *)v14 + 4);
        v44 = v15;
        if (v17 < 0x100)
        {
          v18 = WTF::StringImpl::hashSlowCase(v14);
          v15 = v44;
          v11 = v43;
        }
        else
        {
          v18 = v17 >> 8;
        }
        v19 = v15 - 1;
        v20 = (v18 ^ v16) & (v15 - 1);
        v21 = *v11;
        v22 = (WTF::StringImpl **)(*v11 + 16 * v20);
        v23 = *v22;
        v42 = v12;
        if (*v22)
        {
          v24 = 0;
          v25 = (uint64_t *)((char *)v5 + 16 * v12 + 8);
          do
          {
            v26 = *((_DWORD *)v23 + 4);
            if (v26 < 0x100)
            {
              v27 = WTF::StringImpl::hashSlowCase(v23);
              v15 = v44;
              v11 = v43;
            }
            else
            {
              v27 = v26 >> 8;
            }
            v28 = (v20 + v15 - ((v27 ^ v16) & v19)) & v19;
            if (v24 > v28)
            {
              v29 = *v13;
              *v13 = 0;
              v30 = *v25;
              v31 = *v22;
              *v22 = 0;
              v32 = *v13;
              *v13 = v31;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                {
                  WTF::StringImpl::destroy(v32, v7);
                  v15 = v44;
                  v11 = v43;
                }
                else
                {
                  *(_DWORD *)v32 -= 2;
                }
              }
              v33 = v21 + 16 * v20;
              v35 = *(_QWORD *)(v33 + 8);
              v34 = (_QWORD *)(v33 + 8);
              *v25 = v35;
              v36 = *v22;
              *v22 = v29;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                {
                  WTF::StringImpl::destroy(v36, v7);
                  v15 = v44;
                  v11 = v43;
                }
                else
                {
                  *(_DWORD *)v36 -= 2;
                }
              }
              *v34 = v30;
              v24 = v28;
            }
            v20 = ((_DWORD)v20 + 1) & v19;
            ++v24;
            v21 = *v11;
            v22 = (WTF::StringImpl **)(*v11 + 16 * v20);
            v23 = *v22;
          }
          while (*v22);
        }
        v37 = *v13;
        *v13 = 0;
        v38 = *v22;
        *v22 = v37;
        v5 = v40;
        v12 = v42;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::destroy(v38, v7);
            v11 = v43;
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
        }
        *(_QWORD *)(v21 + 16 * v20 + 8) = *((_QWORD *)v40 + 2 * v42 + 1);
        v39 = *v13;
        *v13 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
          {
            WTF::StringImpl::destroy(v39, v7);
            v11 = v43;
          }
          else
          {
            *(_DWORD *)v39 -= 2;
          }
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v12;
    }
    while (v12 != v41);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::WebAnimation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::WebAnimation *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::WebAnimation *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::WebAnimation *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *a2 = 0;
  a2[1] = 0;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v6;
  v7 = v5 - 1;
  v8 = *(_QWORD *)a1;
  v9 = (unint64_t)a2 - *(_QWORD *)a1;
  v10 = (v9 >> 4) + 1;
  v11 = v10 & (v5 - 1);
  v12 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
  result = *v12;
  if (*v12)
  {
    v14 = *(_DWORD *)(a1 + 16);
    v15 = (v9 >> 4);
    v16 = v10 & v7;
    v17 = (WTF::StringImpl **)(v8 + 16 * v15);
    do
    {
      v18 = *(_DWORD *)(result + 16);
      if (v18 < 0x100)
        result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        result = v18 >> 8;
      if (((v16 + v5 - ((result ^ v14) & v7)) & v7) == 0)
        break;
      v19 = (WTF::StringImpl *)*v12;
      *v12 = 0;
      v20 = *v17;
      *v17 = v19;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      *(_QWORD *)(v8 + 16 * v15 + 8) = *(_QWORD *)(v8 + 16 * v11 + 8);
      v21 = (WTF::StringImpl *)*v12;
      *v12 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      *v12 = 0;
      v12[1] = 0;
      v11 = (v16 + 1) & v7;
      v8 = *(_QWORD *)a1;
      v15 = v16;
      v17 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v16);
      v12 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
      result = *v12;
      v16 = (v16 + 1) & v7;
    }
    while (*v12);
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
  }
  if (v5 >= 9 && 6 * v6 < v5)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::WebAnimation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::WebAnimation *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::WebAnimation *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::WebAnimation *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t *)a1, v5 >> 1);
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::InspectorApplicationCacheAgent::getFramesWithManifests(void)::$_0,void,WebCore::LocalFrame &>::call(uint64_t a1, WebCore::Frame *a2)
{
  uint64_t v2;
  WebCore::ApplicationCacheHost *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  const WTF::String *v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  const WTF::String *v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t **v47;
  WTF::StringImpl *v48;
  uint64_t *v49;
  _DWORD **v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD **v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD **v56;
  uint64_t v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  uint64_t *v60;
  WTF::StringImpl *v61[2];
  char v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  _DWORD *v65;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 35) + 88);
  if (!v2)
    return;
  v5 = *(WebCore::ApplicationCacheHost **)(v2 + 2872);
  WebCore::ApplicationCacheHost::applicationCacheInfo(v5, (uint64_t)v61);
  v8 = v61[0];
  if (!v61[0])
    return;
  v9 = *(_DWORD *)v61[0];
  *(_DWORD *)v61[0] += 2;
  v63 = v8;
  v61[0] = 0;
  if (v9)
    *(_DWORD *)v8 = v9;
  else
    v6 = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(v8, v7);
  if (!*((_DWORD *)v8 + 1))
  {
    v63 = 0;
LABEL_79:
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
    return;
  }
  v10 = **(_QWORD **)(a1 + 8);
  WTF::JSONImpl::Object::create(v6);
  WebCore::InspectorPageAgent::frameId(**(unsigned int ***)(a1 + 16), a2, &v59);
  v11 = v60;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v59, v12);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v11 + 2, &v64, (const WTF::StringImpl *)&v65, (uint64_t)v61);
  if (v62)
  {
    v14 = v11 + 3;
    v15 = *((unsigned int *)v11 + 9);
    if ((_DWORD)v15 == *((_DWORD *)v11 + 8))
    {
      v50 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v15 + 1, (unint64_t)&v64);
      v15 = *((unsigned int *)v11 + 9);
      v51 = v11[3];
      v52 = *v50;
      if (*v50)
        *v52 += 2;
      *(_QWORD *)(v51 + 8 * v15) = v52;
    }
    else
    {
      v16 = *v14;
      v17 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *(_QWORD *)(v16 + 8 * v15) = v17;
    }
    *((_DWORD *)v11 + 9) = v15 + 1;
  }
  v18 = v65;
  v65 = 0;
  if (v18)
  {
    if (*v18 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v18;
  }
  v19 = v64;
  v64 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v13);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v60;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v63, v21);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v20 + 2, &v64, (const WTF::StringImpl *)&v65, (uint64_t)v61);
  if (v62)
  {
    v23 = v20 + 3;
    v24 = *((unsigned int *)v20 + 9);
    if ((_DWORD)v24 == *((_DWORD *)v20 + 8))
    {
      v53 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v64);
      v24 = *((unsigned int *)v20 + 9);
      v54 = v20[3];
      v55 = *v53;
      if (*v53)
        *v55 += 2;
      *(_QWORD *)(v54 + 8 * v24) = v55;
    }
    else
    {
      v25 = *v23;
      v26 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *(_QWORD *)(v25 + 8 * v24) = v26;
    }
    *((_DWORD *)v20 + 9) = v24 + 1;
  }
  v27 = v65;
  v65 = 0;
  if (v27)
  {
    if (*v27 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v27;
  }
  v28 = v64;
  v64 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v22);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = *((_QWORD *)v5 + 5);
  if (!v29)
  {
LABEL_36:
    v32 = 0;
    goto LABEL_46;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8);
  v31 = *(_DWORD *)(v30 + 72);
  if (v31)
  {
    if (v31 != 1)
    {
      if (v31 == 2)
      {
        v32 = 3;
        goto LABEL_46;
      }
      goto LABEL_36;
    }
    v32 = 2;
  }
  else if (*(_BYTE *)(v30 + 156))
  {
    v32 = 5;
  }
  else if (v29 == *(_QWORD *)(v30 + 80))
  {
    v32 = 1;
  }
  else
  {
    v32 = 4;
  }
LABEL_46:
  v33 = v60;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v32);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33 + 2, &v64, (const WTF::StringImpl *)&v65, (uint64_t)v61);
  if (v62)
  {
    v34 = v33 + 3;
    v35 = *((unsigned int *)v33 + 9);
    if ((_DWORD)v35 == *((_DWORD *)v33 + 8))
    {
      v56 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)&v64);
      v35 = *((unsigned int *)v33 + 9);
      v57 = v33[3];
      v58 = *v56;
      if (*v56)
        *v58 += 2;
      *(_QWORD *)(v57 + 8 * v35) = v58;
    }
    else
    {
      v36 = *v34;
      v37 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *(_QWORD *)(v36 + 8 * v35) = v37;
    }
    *((_DWORD *)v33 + 9) = v35 + 1;
  }
  v38 = v65;
  v65 = 0;
  if (v38)
  {
    if (*v38 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v38;
  }
  v39 = v64;
  v64 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v7);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v60;
  v60 = 0;
  v41 = *(unsigned int *)(v10 + 28);
  if ((_DWORD)v41 == *(_DWORD *)(v10 + 24))
  {
    v42 = v41 + (v41 >> 2);
    if (v42 >= 0x10)
      v43 = v42 + 1;
    else
      v43 = 16;
    if (v43 <= v41 + 1)
      v44 = v41 + 1;
    else
      v44 = v43;
    if (v44 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v45 = *(void **)(v10 + 16);
    v46 = (void *)WTF::fastMalloc((WTF *)(8 * v44));
    *(_DWORD *)(v10 + 24) = v44;
    *(_QWORD *)(v10 + 16) = v46;
    memcpy(v46, v45, 8 * v41);
    if (v45)
    {
      if (*(void **)(v10 + 16) == v45)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
      }
      WTF::fastFree((WTF *)v45, v7);
    }
    v41 = *(unsigned int *)(v10 + 28);
    v47 = (uint64_t **)(*(_QWORD *)(v10 + 16) + 8 * v41);
  }
  else
  {
    v47 = (uint64_t **)(*(_QWORD *)(v10 + 16) + 8 * v41);
  }
  *v47 = v40;
  *(_DWORD *)(v10 + 28) = v41 + 1;
  v48 = v59;
  v59 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v7);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = v60;
  v60 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v49;
  }
  v8 = v63;
  v63 = 0;
  if (v8)
    goto LABEL_79;
}

void std::__function::__func<WebCore::InspectorCPUProfilerAgent::startTracking(void)::$_0,std::allocator<WebCore::InspectorCPUProfilerAgent::startTracking(void)::$_0>,void ()(WebCore::ResourceUsageData const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::InspectorCPUProfilerAgent::startTracking(void)::$_0,std::allocator<WebCore::InspectorCPUProfilerAgent::startTracking(void)::$_0>,void ()(WebCore::ResourceUsageData const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E33EFA80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::InspectorCPUProfilerAgent::startTracking(void)::$_0,std::allocator<WebCore::InspectorCPUProfilerAgent::startTracking(void)::$_0>,void ()(WebCore::ResourceUsageData const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E33EFA80;
  a2[1] = v2;
  return result;
}

WTF::JSONImpl::Object *std::__function::__func<WebCore::InspectorCPUProfilerAgent::startTracking(void)::$_0,std::allocator<WebCore::InspectorCPUProfilerAgent::startTracking(void)::$_0>,void ()(WebCore::ResourceUsageData const&)>::operator()(WTF::JSONImpl::Object *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  WTF::StringImpl *v6;
  WTF::JSONImpl::Value *v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  double v15;
  WTF::StringImpl *v16;
  WTF::JSONImpl::Value *v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::JSONImpl::Object *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  const WTF::String *v32;
  WTF::StringImpl *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  double v40;
  WTF::StringImpl *v41;
  WTF::JSONImpl::Value *v42;
  WTF::StringImpl *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  const WTF::String *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  WTF::StringImpl **v68;
  const WTF::String *v69;
  WTF::StringImpl *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  _DWORD **v76;
  uint64_t v77;
  _DWORD *v78;
  _DWORD **v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD **v82;
  uint64_t v83;
  _DWORD *v84;
  _DWORD **v85;
  uint64_t v86;
  _DWORD *v87;
  WTF::StringImpl *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  _DWORD **v95;
  uint64_t v96;
  _DWORD *v97;
  _DWORD **v98;
  uint64_t v99;
  _DWORD *v100;
  _DWORD **v101;
  uint64_t v102;
  _DWORD *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  _BYTE v108[16];
  char v109;

  v3 = *((_QWORD *)a1 + 1);
  WTF::JSONImpl::Object::create(a1);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 56))(*(_QWORD *)(v3 + 24));
  v5 = *(double *)(v4 + 8) + *(double *)(a2 + 360) - *(double *)(v4 + 16);
  v6 = v105;
  v7 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v7, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v105 + 2, &v106, (const WTF::StringImpl *)&v107, (uint64_t)v108);
  if (v109)
  {
    v9 = (uint64_t *)((char *)v105 + 24);
    v10 = *((unsigned int *)v105 + 9);
    if ((_DWORD)v10 == *((_DWORD *)v105 + 8))
    {
      v95 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1, (unint64_t)&v106);
      v10 = *((unsigned int *)v105 + 9);
      v96 = *((_QWORD *)v105 + 3);
      v97 = *v95;
      if (*v95)
        *v97 += 2;
      *(_QWORD *)(v96 + 8 * v10) = v97;
    }
    else
    {
      v11 = *v9;
      v12 = v106;
      if (v106)
        *(_DWORD *)v106 += 2;
      *(_QWORD *)(v11 + 8 * v10) = v12;
    }
    *((_DWORD *)v6 + 9) = v10 + 1;
  }
  v13 = v107;
  v107 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v13;
  }
  v14 = v106;
  v106 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(float *)(a2 + 4);
  v16 = v105;
  v17 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v17, v15);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v105 + 2, &v106, (const WTF::StringImpl *)&v107, (uint64_t)v108);
  if (v109)
  {
    v19 = (uint64_t *)((char *)v105 + 24);
    v20 = *((unsigned int *)v105 + 9);
    if ((_DWORD)v20 == *((_DWORD *)v105 + 8))
    {
      v98 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v106);
      v20 = *((unsigned int *)v105 + 9);
      v99 = *((_QWORD *)v105 + 3);
      v100 = *v98;
      if (*v98)
        *v100 += 2;
      *(_QWORD *)(v99 + 8 * v20) = v100;
    }
    else
    {
      v21 = *v19;
      v22 = v106;
      if (v106)
        *(_DWORD *)v106 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *((_DWORD *)v16 + 9) = v20 + 1;
  }
  v23 = v107;
  v107 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v23;
  }
  v24 = v106;
  v106 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v18);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v105;
  v104 = v105;
  if (*(_DWORD *)(a2 + 20))
  {
    v26 = WTF::fastMalloc((WTF *)0x20);
    result = (WTF::JSONImpl::Object *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v26);
    v28 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v28)
    {
      v29 = *(_QWORD *)(a2 + 8);
      v30 = 24 * v28;
      while (1)
      {
        WTF::JSONImpl::Object::create(result);
        v31 = v105;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v29, v32);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v31 + 2, &v106, (const WTF::StringImpl *)&v107, (uint64_t)v108);
        if (v109)
        {
          v34 = (uint64_t *)((char *)v31 + 24);
          v35 = *((unsigned int *)v31 + 9);
          if ((_DWORD)v35 == *((_DWORD *)v31 + 8))
          {
            v76 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)&v106);
            v35 = *((unsigned int *)v31 + 9);
            v77 = *((_QWORD *)v31 + 3);
            v78 = *v76;
            if (*v76)
              *v78 += 2;
            *(_QWORD *)(v77 + 8 * v35) = v78;
          }
          else
          {
            v36 = *v34;
            v37 = v106;
            if (v106)
              *(_DWORD *)v106 += 2;
            *(_QWORD *)(v36 + 8 * v35) = v37;
          }
          *((_DWORD *)v31 + 9) = v35 + 1;
        }
        v38 = v107;
        v107 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v38;
        }
        v39 = v106;
        v106 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v33);
          else
            *(_DWORD *)v39 -= 2;
        }
        v40 = *(float *)(v29 + 16);
        v41 = v105;
        v42 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create(v42, v40);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v41 + 2, &v106, (const WTF::StringImpl *)&v107, (uint64_t)v108);
        if (v109)
        {
          v44 = (uint64_t *)((char *)v41 + 24);
          v45 = *((unsigned int *)v41 + 9);
          if ((_DWORD)v45 == *((_DWORD *)v41 + 8))
          {
            v79 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v106);
            v45 = *((unsigned int *)v41 + 9);
            v80 = *((_QWORD *)v41 + 3);
            v81 = *v79;
            if (*v79)
              *v81 += 2;
            *(_QWORD *)(v80 + 8 * v45) = v81;
          }
          else
          {
            v46 = *v44;
            v47 = v106;
            if (v106)
              *(_DWORD *)v106 += 2;
            *(_QWORD *)(v46 + 8 * v45) = v47;
          }
          *((_DWORD *)v41 + 9) = v45 + 1;
        }
        v48 = v107;
        v107 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v48;
        }
        result = v106;
        v106 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(result, v43);
          else
            *(_DWORD *)result -= 2;
        }
        v49 = v105;
        v50 = *(unsigned __int8 *)(v29 + 20);
        if (v50 == 1)
        {
          v51 = 14;
        }
        else
        {
          if (v50 != 2)
            goto LABEL_71;
          v51 = 15;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v51);
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v105, v52);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v49 + 2, &v106, (const WTF::StringImpl *)&v107, (uint64_t)v108);
        if (v109)
        {
          v54 = (uint64_t *)((char *)v49 + 24);
          v55 = *((unsigned int *)v49 + 9);
          if ((_DWORD)v55 == *((_DWORD *)v49 + 8))
          {
            v82 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, v55 + 1, (unint64_t)&v106);
            v55 = *((unsigned int *)v49 + 9);
            v83 = *((_QWORD *)v49 + 3);
            v84 = *v82;
            if (*v82)
              *v84 += 2;
            *(_QWORD *)(v83 + 8 * v55) = v84;
          }
          else
          {
            v56 = *v54;
            v57 = v106;
            if (v106)
              *(_DWORD *)v106 += 2;
            *(_QWORD *)(v56 + 8 * v55) = v57;
          }
          *((_DWORD *)v49 + 9) = v55 + 1;
        }
        v58 = v107;
        v107 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v58;
        }
        v59 = v105;
        v105 = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
            WTF::StringImpl::destroy(v59, v53);
          else
            *(_DWORD *)v59 -= 2;
        }
        result = v106;
        v106 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(result, v53);
          else
            *(_DWORD *)result -= 2;
        }
LABEL_71:
        v60 = *(_QWORD *)(v29 + 8);
        if (v60 && *(_DWORD *)(v60 + 4))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v29 + 8), v69);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v49 + 2, &v106, (const WTF::StringImpl *)&v107, (uint64_t)v108);
          if (v109)
          {
            v71 = (uint64_t *)((char *)v49 + 24);
            v72 = *((unsigned int *)v49 + 9);
            if ((_DWORD)v72 == *((_DWORD *)v49 + 8))
            {
              v85 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v71, v72 + 1, (unint64_t)&v106);
              v72 = *((unsigned int *)v49 + 9);
              v86 = *((_QWORD *)v49 + 3);
              v87 = *v85;
              if (*v85)
                *v87 += 2;
              *(_QWORD *)(v86 + 8 * v72) = v87;
            }
            else
            {
              v73 = *v71;
              v74 = v106;
              if (v106)
                *(_DWORD *)v106 += 2;
              *(_QWORD *)(v73 + 8 * v72) = v74;
            }
            *((_DWORD *)v49 + 9) = v72 + 1;
          }
          v75 = v107;
          v107 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v75;
          }
          result = v106;
          v106 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(result, v70);
            else
              *(_DWORD *)result -= 2;
          }
        }
        v61 = *(unsigned int *)(v26 + 28);
        if ((_DWORD)v61 == *(_DWORD *)(v26 + 24))
        {
          v62 = v61 + (v61 >> 2);
          if (v62 >= 0x10)
            v63 = v62 + 1;
          else
            v63 = 16;
          if (v63 <= v61 + 1)
            v64 = v61 + 1;
          else
            v64 = v63;
          if (v64 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v65 = *(void **)(v26 + 16);
          v66 = (void *)WTF::fastMalloc((WTF *)(8 * v64));
          *(_DWORD *)(v26 + 24) = v64;
          *(_QWORD *)(v26 + 16) = v66;
          result = (WTF::JSONImpl::Object *)memcpy(v66, v65, 8 * v61);
          if (v65)
          {
            if (*(void **)(v26 + 16) == v65)
            {
              *(_QWORD *)(v26 + 16) = 0;
              *(_DWORD *)(v26 + 24) = 0;
            }
            result = (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)v65, v67);
          }
          v61 = *(unsigned int *)(v26 + 28);
          v68 = (WTF::StringImpl **)(*(_QWORD *)(v26 + 16) + 8 * v61);
        }
        else
        {
          v68 = (WTF::StringImpl **)(*(_QWORD *)(v26 + 16) + 8 * v61);
        }
        *v68 = v49;
        *(_DWORD *)(v26 + 28) = v61 + 1;
        v29 += 24;
        v30 -= 24;
        if (!v30)
        {
          v25 = v104;
          break;
        }
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v106 = (WTF::StringImpl *)v26;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, &v107, (const WTF::StringImpl *)&v106, (uint64_t)v108);
    if (v109)
    {
      v89 = (uint64_t *)((char *)v25 + 24);
      v90 = *((unsigned int *)v25 + 9);
      if ((_DWORD)v90 == *((_DWORD *)v25 + 8))
      {
        v101 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&v107);
        v90 = *((unsigned int *)v25 + 9);
        v102 = *((_QWORD *)v25 + 3);
        v103 = *v101;
        if (*v101)
          *v103 += 2;
        *(_QWORD *)(v102 + 8 * v90) = v103;
      }
      else
      {
        v91 = *v89;
        v92 = v107;
        if (v107)
          *(_DWORD *)v107 += 2;
        *(_QWORD *)(v91 + 8 * v90) = v92;
      }
      *((_DWORD *)v25 + 9) = v90 + 1;
    }
    v93 = v106;
    v106 = 0;
    if (v93)
    {
      if (*(_DWORD *)v93 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v93;
    }
    v94 = v107;
    v107 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 2)
        WTF::StringImpl::destroy(v94, v88);
      else
        *(_DWORD *)v94 -= 2;
    }
  }
  Inspector::CPUProfilerFrontendDispatcher::trackingUpdate();
  result = v104;
  if (v104)
  {
    if (*(_DWORD *)v104 == 1)
      return (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v104;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::InspectorCSSAgent::*&)(void),WebCore::InspectorCSSAgent*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::HashTable<WebCore::Document *,WTF::KeyValuePair<WebCore::Document *,WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Document *,WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Document *>,WTF::HashMap<WebCore::Document *,WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Document *>,WTF::HashTraits<WebCore::Document *>,WTF::HashTraits<WTF::HashSet<WebCore::CSSStyleSheet *,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Document *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (_QWORD *)(v19 + 16 * v26);
          v30 = v28 + 1;
          v29 = v28[1];
          if (v29)
          {
            WTF::fastFree((WTF *)(v29 - 16), v10);
            v17 = *v16;
          }
          *v28 = v17;
          v31 = v6 + 16 * v13;
          *v30 = 0;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          *v30 = v32;
          v33 = *(_QWORD *)(v31 + 8);
          if (v33)
            WTF::fastFree((WTF *)(v33 - 16), v10);
          if (v16 == a3)
            v14 = v28;
        }
        else
        {
          v18 = *(_QWORD *)(v6 + 16 * v13 + 8);
          if (v18)
            WTF::fastFree((WTF *)(v18 - 16), v10);
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  WTF **v36;
  WTF *v37;
  uint64_t v38;
  _DWORD *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  _DWORD **v47;
  uint64_t v48;
  _DWORD *v49;
  WTF *v50;
  uint64_t v51;
  _QWORD *result;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v57;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v53 = v5;
    v54 = v4;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v57 = v10;
          v24 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
          v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
          v27 = v21 & ((v26 >> 31) ^ v26);
          v28 = 1;
          do
          {
            v29 = v27;
            v30 = (_QWORD *)(v20 + 24 * v27);
            v27 = (v27 + v28++) & v21;
          }
          while (*v30);
          v31 = v29;
          v32 = v20 + 24 * v29;
          v35 = *(_DWORD *)(v32 + 20);
          v34 = (_DWORD *)(v32 + 20);
          v33 = v35;
          v36 = (WTF **)(v34 - 3);
          if (v35)
          {
            v37 = *v36;
            v38 = 8 * v33;
            do
            {
              v39 = *(_DWORD **)v37;
              *(_QWORD *)v37 = 0;
              if (v39)
              {
                if (v39[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
                else
                  --v39[2];
              }
              v37 = (WTF *)((char *)v37 + 8);
              v38 -= 8;
            }
            while (v38);
          }
          v40 = *v36;
          if (*v36)
          {
            *v36 = 0;
            *(_DWORD *)(v20 + 24 * v31 + 16) = 0;
            WTF::fastFree(v40, v8);
          }
          v41 = *v30;
          *v30 = 0;
          v4 = v54;
          if (v41)
          {
            if (*(_DWORD *)(v41 + 24) == 2)
            {
              if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v41);
            }
            else
            {
              *(_DWORD *)(v41 + 24) -= 2;
            }
          }
          v42 = *v12;
          *v12 = 0;
          *v30 = v42;
          v43 = v54 + 24 * v9;
          *v36 = 0;
          *(_QWORD *)(v34 - 1) = 0;
          v45 = *(WTF **)(v43 + 8);
          v44 = v43 + 8;
          *(_QWORD *)v44 = 0;
          *v36 = v45;
          LODWORD(v42) = *(_DWORD *)(v44 + 8);
          *(_DWORD *)(v44 + 8) = 0;
          *(_DWORD *)(v20 + 24 * v31 + 16) = v42;
          LODWORD(v42) = *(_DWORD *)(v44 + 12);
          *(_DWORD *)(v44 + 12) = 0;
          *v34 = v42;
          v46 = *(unsigned int *)(v44 + 12);
          v10 = v57;
          if ((_DWORD)v46)
          {
            v47 = *(_DWORD ***)v44;
            v48 = 8 * v46;
            do
            {
              v49 = *v47;
              *v47 = 0;
              if (v49)
              {
                if (v49[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
                else
                  --v49[2];
              }
              ++v47;
              v48 -= 8;
            }
            while (v48);
          }
          v50 = *(WTF **)v44;
          if (*(_QWORD *)v44)
          {
            *(_QWORD *)v44 = 0;
            *(_DWORD *)(v44 + 8) = 0;
            WTF::fastFree(v50, v8);
          }
          v51 = *v12;
          *v12 = 0;
          v11 = v53;
          if (v51)
          {
            if (*(_DWORD *)(v51 + 24) == 2)
            {
              if ((*(_WORD *)(v51 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v51);
            }
            else
            {
              *(_DWORD *)(v51 + 24) -= 2;
            }
          }
          if (v12 == a3)
            v10 = v30;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v15 = (WTF **)(v14 + 8);
          v16 = *(unsigned int *)(v14 + 20);
          if ((_DWORD)v16)
          {
            v17 = *v15;
            v18 = 8 * v16;
            do
            {
              v19 = *(_DWORD **)v17;
              *(_QWORD *)v17 = 0;
              if (v19)
              {
                if (v19[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
                else
                  --v19[2];
              }
              v17 = (WTF *)((char *)v17 + 8);
              v18 -= 8;
            }
            while (v18);
          }
          v22 = *v15;
          if (*v15)
          {
            *v15 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v22, v8);
          }
          v23 = *v12;
          *v12 = 0;
          if (v23)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::HashSet<WebCore::CSSSelectorPseudoClass,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(result + 24);
    do
    {
      *((_DWORD *)v10 - 2) = 0;
      *v10 = 0;
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (int *)(v4 + 16 * v11);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = 0;
          v18 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
          v19 = ((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) ^ (((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) >> 16);
          do
          {
            v20 = v19 & v16;
            v19 = ++v17 + v20;
          }
          while (*(_DWORD *)(v15 + 16 * v20));
          v21 = v15 + 16 * v20;
          v23 = (_QWORD *)(v21 + 8);
          v22 = *(_QWORD *)(v21 + 8);
          if (v22)
          {
            WTF::fastFree((WTF *)(v22 - 16), v8);
            v13 = *v12;
          }
          *(_DWORD *)v21 = v13;
          v24 = v4 + 16 * v11;
          *v23 = 0;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *v23 = v25;
          v14 = *(_QWORD *)(v24 + 8);
          if (!v14)
            goto LABEL_22;
LABEL_21:
          WTF::fastFree((WTF *)(v14 - 16), v8);
          goto LABEL_22;
        }
        v14 = *(_QWORD *)(v4 + 16 * v11 + 8);
        if (v14)
          goto LABEL_21;
      }
LABEL_22:
      if (++v11 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Node,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_28;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * --v4);
      result = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
      {
        *v6 = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          v9 = *(unsigned int *)(result + 28);
          if ((_DWORD)v9)
          {
            v26 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v9));
            result = v26;
          }
          v10 = *(WTF **)(result + 16);
          if (v10)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v25 = result;
            WTF::fastFree(v10, a2);
            result = v25;
          }
          result = WTF::fastFree((WTF *)result, a2);
        }
        *v6 = -1;
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v11 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v12 = *(_DWORD *)(v11 - 12);
      else
        v12 = 0;
      *(_DWORD *)(v11 - 12) = v12 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v13 = *(_DWORD *)(v3 - 4);
      v14 = *(unsigned int *)(v3 - 12);
      if (v13 >= 9 && 6 * (int)v14 < v13)
      {
        v18 = (v14 - 1) | ((v14 - 1) >> 1) | ((((_DWORD)v14 - 1) | ((v14 - 1) >> 1)) >> 2);
        v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v14)
            goto LABEL_39;
        }
        else if (3 * v20 > 4 * v14)
        {
LABEL_37:
          v21 = (double)v14;
          v22 = (double)v20;
          v23 = 0.604166667;
          goto LABEL_40;
        }
        LODWORD(v20) = 2 * v20;
        if (v20 <= 0x400)
          goto LABEL_37;
LABEL_39:
        v21 = (double)v14;
        v22 = (double)v20;
        v23 = 0.416666667;
LABEL_40:
        if (v22 * v23 <= v21)
          LODWORD(v20) = 2 * v20;
        if (v20 <= 8)
          v24 = 8;
        else
          v24 = v20;
        result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)v2, v24);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v16 = 0;
          goto LABEL_32;
        }
LABEL_29:
        v16 = *(_DWORD *)(v3 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
          goto LABEL_33;
        goto LABEL_32;
      }
LABEL_28:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_29;
    }
  }
  v16 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_32:
  v17 = v16;
LABEL_33:
  *(_DWORD *)(v2 + 12) = 2 * v17;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::OptionSet<WebCore::InspectorCSSAgent::LayoutFlag>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_BYTE *)(result + 24);
    do
    {
      *((_QWORD *)v10 - 1) = 0;
      *v10 = 0;
      v10 += 16;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (uint64_t *)(v4 + 16 * i);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = v14 + 16 * v21;
          *(_QWORD *)v23 = 0;
          v24 = *v12;
          *v12 = 0;
          *(_QWORD *)v23 = v24;
          *(_BYTE *)(v23 + 8) = *(_BYTE *)(v4 + 16 * i + 8);
          v25 = *v12;
          *v12 = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr((unsigned int *)v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, (unsigned int *)v25));
            if (!v27)
            {
              atomic_store(1u, (unsigned int *)v25);
              v28 = *(unsigned int *)(v25 + 28);
              if ((_DWORD)v28)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v25 + 16), (WTF::StringImpl *)(*(_QWORD *)(v25 + 16) + 32 * v28));
              v29 = *(WTF **)(v25 + 16);
              if (v29)
              {
                *(_QWORD *)(v25 + 16) = 0;
                *(_DWORD *)(v25 + 24) = 0;
                WTF::fastFree(v29, v8);
              }
              WTF::fastFree((WTF *)v25, v8);
            }
          }
        }
        else
        {
          *v12 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (_DWORD *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (v27[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
            else
              --v27[2];
          }
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_DWORD **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            if (v30[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
            else
              --v30[2];
          }
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_DWORD **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (v16[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            else
              --v16[2];
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 == (WTF::StringImpl *)-1)
        goto LABEL_32;
      if (v11)
        break;
      v12 = v4 + 16 * v9;
      v13 = *(_DWORD **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v13)
      {
        if (v13[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          v11 = *v10;
        }
        else
        {
          --v13[2];
        }
      }
      *v10 = 0;
      if (!v11)
        goto LABEL_32;
      if (*(_DWORD *)v11 == 2)
      {
LABEL_39:
        WTF::StringImpl::destroy(v11, v8);
        goto LABEL_32;
      }
      *(_DWORD *)v11 -= 2;
LABEL_32:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v14 = *a1;
    if (*a1)
      v15 = *(_DWORD *)(v14 - 8);
    else
      v15 = 0;
    v16 = *((_DWORD *)v11 + 4);
    if (v16 < 0x100)
      v17 = WTF::StringImpl::hashSlowCase(v11);
    else
      v17 = v16 >> 8;
    v18 = 0;
    do
    {
      v19 = v17 & v15;
      v17 = ++v18 + v19;
    }
    while (*(_QWORD *)(v14 + 16 * v19));
    v20 = v14 + 16 * v19;
    v21 = *(_DWORD **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = 0;
    if (v21)
    {
      if (v21[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        v26 = *(WTF::StringImpl **)v20;
        *(_QWORD *)v20 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v8);
          else
            *(_DWORD *)v26 -= 2;
        }
        goto LABEL_26;
      }
      --v21[2];
    }
    *(_QWORD *)v20 = 0;
LABEL_26:
    v22 = *v10;
    *v10 = 0;
    *(_QWORD *)v20 = v22;
    v23 = v4 + 16 * v9;
    v24 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    *(_QWORD *)(v20 + 8) = v24;
    v25 = *(_DWORD **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    if (v25)
    {
      if (v25[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
      else
        --v25[2];
    }
    v11 = *v10;
    *v10 = 0;
    if (!v11)
      goto LABEL_32;
    if (*(_DWORD *)v11 == 2)
      goto LABEL_39;
    *(_DWORD *)v11 -= 2;
    goto LABEL_32;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WTF::StringImpl *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = a2[1];
  a2[1] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v10 >> 1);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::CSSStyleSheet *,WTF::KeyValuePair<WebCore::CSSStyleSheet *,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleSheet *,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>>,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashMap<WebCore::CSSStyleSheet *,WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>,WTF::DefaultHash<WebCore::CSSStyleSheet *>,WTF::HashTraits<WebCore::CSSStyleSheet *>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorStyleSheet,WTF::RawPtrTraits<WebCore::InspectorStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleSheet *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (_DWORD *)v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (v24[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
            else
              --v24[2];
          }
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(_DWORD **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_22;
          if (v13[2] == 1)
          {
LABEL_24:
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
            goto LABEL_22;
          }
          --v13[2];
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(_DWORD **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            if (v13[2] == 1)
              goto LABEL_24;
            --v13[2];
          }
        }
      }
LABEL_22:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::InspectorCanvasAgent::*&)(void),WebCore::InspectorCanvasAgent*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WebCore::InspectorCanvas::~InspectorCanvas(WebCore::InspectorCanvas *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  char v17;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 19);
  v5 = (unsigned int *)*((_QWORD *)this + 8);
  if ((_DWORD)v4)
  {
    v6 = 48 * v4;
    do
    {
      v7 = v5[10];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))off_1E33EFB08[v7])(&v17, v5);
      v5[10] = -1;
      v5 += 12;
      v6 -= 48;
    }
    while (v6);
    v5 = (unsigned int *)*((_QWORD *)this + 8);
  }
  if (v5)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree((WTF *)v5, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (*v8 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v8;
  }
  v9 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v9;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorShaderProgram,WTF::RawPtrTraits<WebCore::InspectorShaderProgram>,WTF::DefaultRefDerefTraits<WebCore::InspectorShaderProgram>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  WTF **v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF *v33;
  WTF *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;

  v4 = *((unsigned int *)a1 + 2);
  v5 = (WTF *)*a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *a1 = result;
  *((_DWORD *)a1 + 2) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *((_DWORD *)a1 + 4) = (v10 >> 31) ^ v10;
  *((_BYTE *)a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v11 = a1;
    v12 = 0;
    v52 = v11;
    v49 = v4;
    v50 = v5;
    while (1)
    {
      v13 = (char *)v5 + 16 * v12;
      v14 = *(WTF::StringImpl **)v13;
      if (*(_QWORD *)v13)
      {
        v15 = *((_DWORD *)v11 + 2);
        v16 = *((_DWORD *)v11 + 4);
        v17 = *((_DWORD *)v14 + 4);
        v53 = v15;
        v51 = v12;
        if (v17 < 0x100)
        {
          v18 = WTF::StringImpl::hashSlowCase(v14);
          v15 = v53;
          v11 = v52;
        }
        else
        {
          v18 = v17 >> 8;
        }
        v19 = v15 - 1;
        v20 = (v18 ^ v16) & (v15 - 1);
        v21 = *v11;
        v22 = *v11 + 16 * v20;
        v23 = *(WTF::StringImpl **)v22;
        if (*(_QWORD *)v22)
        {
          v24 = 0;
          v25 = (WTF **)((char *)v5 + 16 * v51 + 8);
          while (1)
          {
            v26 = *((_DWORD *)v23 + 4);
            if (v26 < 0x100)
            {
              v27 = WTF::StringImpl::hashSlowCase(v23);
              v15 = v53;
              v11 = v52;
            }
            else
            {
              v27 = v26 >> 8;
            }
            v28 = (v20 + v15 - ((v27 ^ v16) & v19)) & v19;
            if (v24 > v28)
            {
              v29 = *(WTF::StringImpl **)v13;
              v30 = *v25;
              *(_QWORD *)v13 = 0;
              *((_QWORD *)v13 + 1) = 0;
              v31 = *(WTF::StringImpl **)v22;
              *(_QWORD *)v22 = 0;
              v32 = *(WTF::StringImpl **)v13;
              *(_QWORD *)v13 = v31;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                {
                  WTF::StringImpl::destroy(v32, v7);
                  v15 = v53;
                  v11 = v52;
                }
                else
                {
                  *(_DWORD *)v32 -= 2;
                }
              }
              v33 = *(WTF **)(v22 + 8);
              *(_QWORD *)(v22 + 8) = 0;
              v34 = *v25;
              *v25 = v33;
              if (v34)
              {
                if (*(_DWORD *)v34 == 1)
                {
                  v37 = (WTF::StringImpl *)*((_QWORD *)v34 + 1);
                  *((_QWORD *)v34 + 1) = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, v7);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  WTF::fastFree(v34, v7);
                  v11 = v52;
                  v15 = v53;
                }
                else
                {
                  --*(_DWORD *)v34;
                }
              }
              v35 = *(WTF::StringImpl **)v22;
              *(_QWORD *)v22 = v29;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                {
                  WTF::StringImpl::destroy(v35, v7);
                  v15 = v53;
                  v11 = v52;
                }
                else
                {
                  *(_DWORD *)v35 -= 2;
                }
              }
              v36 = *(WTF **)(v22 + 8);
              *(_QWORD *)(v22 + 8) = v30;
              if (v36)
              {
                if (*(_DWORD *)v36 == 1)
                {
                  v38 = (WTF::StringImpl *)*((_QWORD *)v36 + 1);
                  *((_QWORD *)v36 + 1) = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, v7);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                  WTF::fastFree(v36, v7);
                  v24 = v28;
                  v11 = v52;
                  v15 = v53;
                  goto LABEL_26;
                }
                --*(_DWORD *)v36;
              }
              v24 = v28;
            }
LABEL_26:
            v20 = ((_DWORD)v20 + 1) & v19;
            ++v24;
            v21 = *v11;
            v22 = *v11 + 16 * v20;
            v23 = *(WTF::StringImpl **)v22;
            if (!*(_QWORD *)v22)
            {
              v4 = v49;
              v5 = v50;
              break;
            }
          }
        }
        v39 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        v40 = *(WTF::StringImpl **)v22;
        *(_QWORD *)v22 = v39;
        v12 = v51;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
          {
            WTF::StringImpl::destroy(v40, v7);
            v11 = v52;
          }
          else
          {
            *(_DWORD *)v40 -= 2;
          }
        }
        v41 = v21 + 16 * v20;
        v42 = (char *)v5 + 16 * v51;
        v43 = *((_QWORD *)v42 + 1);
        *((_QWORD *)v42 + 1) = 0;
        v44 = *(WTF **)(v41 + 8);
        *(_QWORD *)(v41 + 8) = v43;
        if (v44)
        {
          if (*(_DWORD *)v44 == 1)
          {
            v48 = (WTF::StringImpl *)*((_QWORD *)v44 + 1);
            *((_QWORD *)v44 + 1) = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2)
                WTF::StringImpl::destroy(v48, v7);
              else
                *(_DWORD *)v48 -= 2;
            }
            WTF::fastFree(v44, v7);
            v11 = v52;
          }
          else
          {
            --*(_DWORD *)v44;
          }
        }
      }
      v45 = (WTF *)*((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 1)
        {
          v47 = (WTF::StringImpl *)*((_QWORD *)v45 + 1);
          *((_QWORD *)v45 + 1) = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, v7);
            else
              *(_DWORD *)v47 -= 2;
          }
          WTF::fastFree(v45, v7);
          v11 = v52;
        }
        else
        {
          --*(_DWORD *)v45;
        }
      }
      v46 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::destroy(v46, v7);
          v11 = v52;
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
      if (++v12 == v4)
        return WTF::fastFree(v5, v7);
    }
  }
  if (v5)
    return WTF::fastFree(v5, v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::InspectorCanvasAgent::recordAction(WebCore::CanvasRenderingContext &,WTF::String &&,std::initializer_list<std::optional<WebCore::InspectorCanvasCallTracer::ProcessedArgument>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33EFB80;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InspectorCanvasAgent::recordAction(WebCore::CanvasRenderingContext &,WTF::String &&,std::initializer_list<std::optional<WebCore::InspectorCanvasCallTracer::ProcessedArgument>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33EFB80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InspectorCanvasAgent::recordAction(WebCore::CanvasRenderingContext &,WTF::String &&,std::initializer_list<std::optional<WebCore::InspectorCanvasCallTracer::ProcessedArgument>> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  WebCore::CanvasRenderingContext *v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (uint64_t *)(v2 + 232);
      v12 = 0;
      v13 = 0;
      WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits> const&,void>::map((uint64_t)&v12, v2 + 232);
      if (HIDWORD(v13))
      {
        v6 = (WTF::StringImpl **)v12;
        v7 = 8 * HIDWORD(v13);
        do
        {
          v8 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v2 + 24), v6, v5);
          if (v8)
          {
            v4 = *(WebCore::CanvasRenderingContext **)(*((_QWORD *)v8 + 2) + 8);
            if (*((_BYTE *)v4 + 25))
              WebCore::InspectorCanvasAgent::didFinishRecordingCanvasFrame(v2 - 40, v4, 0);
          }
          ++v6;
          v7 -= 8;
        }
        while (v7);
      }
      result = *v3;
      if (*v3)
      {
        v10 = (WTF::StringImpl *)*(unsigned int *)(v2 + 240);
        *v3 = 0;
        *(_QWORD *)(v2 + 240) = 0;
        *(_QWORD *)(v2 + 245) = 0;
        result = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable((WTF::StringImpl **)result, v10);
      }
      v9 = v12;
      if (!HIDWORD(v13))
      {
        if (!v12)
          return result;
LABEL_22:
        v12 = 0;
        LODWORD(v13) = 0;
        return WTF::fastFree(v9, v4);
      }
      v11 = 8 * HIDWORD(v13);
      do
      {
        result = *(_QWORD *)v9;
        *(_QWORD *)v9 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
          else
            *(_DWORD *)result -= 2;
        }
        v9 = (WTF *)((char *)v9 + 8);
        v11 -= 8;
      }
      while (v11);
      v9 = v12;
      if (v12)
        goto LABEL_22;
    }
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorCanvas,WTF::RawPtrTraits<WebCore::InspectorCanvas>,WTF::DefaultRefDerefTraits<WebCore::InspectorCanvas>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorCanvas,WTF::RawPtrTraits<WebCore::InspectorCanvas>,WTF::DefaultRefDerefTraits<WebCore::InspectorCanvas>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorCanvas,WTF::RawPtrTraits<WebCore::InspectorCanvas>,WTF::DefaultRefDerefTraits<WebCore::InspectorCanvas>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorCanvas,WTF::RawPtrTraits<WebCore::InspectorCanvas>,WTF::DefaultRefDerefTraits<WebCore::InspectorCanvas>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  WebCore::InspectorCanvas **v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WebCore::InspectorCanvas *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebCore::InspectorCanvas *v34;
  WebCore::InspectorCanvas *v35;
  WTF::StringImpl *v36;
  WebCore::InspectorCanvas *v37;
  WTF *v38;
  void *v39;
  WTF *v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  WebCore::InspectorCanvas *v47;
  WebCore::InspectorCanvas *v48;
  WTF::StringImpl *v49;
  WTF *v50;
  void *v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t *v57;

  v4 = *((unsigned int *)a1 + 2);
  v5 = (WTF *)*a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *a1 = result;
  *((_DWORD *)a1 + 2) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *((_DWORD *)a1 + 4) = (v10 >> 31) ^ v10;
  *((_BYTE *)a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v11 = a1;
    v12 = 0;
    v57 = a1;
    v54 = v4;
    v55 = v5;
    do
    {
      v13 = (WTF::StringImpl **)((char *)v5 + 16 * v12);
      v14 = *v13;
      if (*v13)
      {
        v15 = *((_DWORD *)v11 + 2);
        v16 = *((_DWORD *)v11 + 4);
        v17 = *((_DWORD *)v14 + 4);
        if (v17 < 0x100)
        {
          v18 = WTF::StringImpl::hashSlowCase(v14);
          v11 = v57;
        }
        else
        {
          v18 = v17 >> 8;
        }
        v19 = v15 - 1;
        v20 = (v18 ^ v16) & (v15 - 1);
        v21 = *v11;
        v22 = *v11 + 16 * v20;
        v23 = *(WTF::StringImpl **)v22;
        if (*(_QWORD *)v22)
        {
          v24 = v12;
          v25 = 0;
          v56 = v24;
          v26 = (WebCore::InspectorCanvas **)((char *)v5 + 16 * v24 + 8);
          do
          {
            v27 = *((_DWORD *)v23 + 4);
            if (v27 < 0x100)
            {
              v28 = WTF::StringImpl::hashSlowCase(v23);
              v11 = v57;
            }
            else
            {
              v28 = v27 >> 8;
            }
            v29 = (v20 + v15 - ((v28 ^ v16) & v19)) & v19;
            if (v25 > v29)
            {
              v30 = *v13;
              v31 = *v26;
              *v13 = 0;
              v13[1] = 0;
              v32 = *(WTF::StringImpl **)v22;
              *(_QWORD *)v22 = 0;
              v33 = *v13;
              *v13 = v32;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                {
                  WTF::StringImpl::destroy(v33, v7);
                  v11 = v57;
                }
                else
                {
                  *(_DWORD *)v33 -= 2;
                }
              }
              v34 = *(WebCore::InspectorCanvas **)(v22 + 8);
              *(_QWORD *)(v22 + 8) = 0;
              v35 = *v26;
              *v26 = v34;
              if (v35)
              {
                if (*(_DWORD *)v35 == 1)
                {
                  WebCore::InspectorCanvas::~InspectorCanvas(v35, v7);
                  WTF::fastFree(v38, v39);
                  v11 = v57;
                }
                else
                {
                  --*(_DWORD *)v35;
                }
              }
              v36 = *(WTF::StringImpl **)v22;
              *(_QWORD *)v22 = v30;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                {
                  WTF::StringImpl::destroy(v36, v7);
                  v11 = v57;
                }
                else
                {
                  *(_DWORD *)v36 -= 2;
                }
              }
              v37 = *(WebCore::InspectorCanvas **)(v22 + 8);
              *(_QWORD *)(v22 + 8) = v31;
              if (v37)
              {
                if (*(_DWORD *)v37 == 1)
                {
                  WebCore::InspectorCanvas::~InspectorCanvas(v37, v7);
                  WTF::fastFree(v40, v41);
                  v11 = v57;
                }
                else
                {
                  --*(_DWORD *)v37;
                }
              }
              v25 = v29;
            }
            v20 = ((_DWORD)v20 + 1) & v19;
            ++v25;
            v21 = *v11;
            v22 = *v11 + 16 * v20;
            v23 = *(WTF::StringImpl **)v22;
          }
          while (*(_QWORD *)v22);
          v4 = v54;
          v5 = v55;
          v12 = v56;
        }
        v42 = *v13;
        *v13 = 0;
        v43 = *(WTF::StringImpl **)v22;
        *(_QWORD *)v22 = v42;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
          {
            WTF::StringImpl::destroy(v43, v7);
            v11 = v57;
          }
          else
          {
            *(_DWORD *)v43 -= 2;
          }
        }
        v44 = v21 + 16 * v20;
        v45 = (char *)v5 + 16 * v12;
        v46 = *((_QWORD *)v45 + 1);
        *((_QWORD *)v45 + 1) = 0;
        v47 = *(WebCore::InspectorCanvas **)(v44 + 8);
        *(_QWORD *)(v44 + 8) = v46;
        if (v47)
        {
          if (*(_DWORD *)v47 == 1)
          {
            WebCore::InspectorCanvas::~InspectorCanvas(v47, v7);
            WTF::fastFree(v52, v53);
            v11 = v57;
          }
          else
          {
            --*(_DWORD *)v47;
          }
        }
      }
      v48 = v13[1];
      v13[1] = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 1)
        {
          WebCore::InspectorCanvas::~InspectorCanvas(v48, v7);
          WTF::fastFree(v50, v51);
          v11 = v57;
        }
        else
        {
          --*(_DWORD *)v48;
        }
      }
      v49 = *v13;
      *v13 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
        {
          WTF::StringImpl::destroy(v49, v7);
          v11 = v57;
        }
        else
        {
          *(_DWORD *)v49 -= 2;
        }
      }
      ++v12;
    }
    while (v12 != v4);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::RevalidateStyleAttributeTask::*&)(void),WebCore::RevalidateStyleAttributeTask*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v21 = 0;
        v22 = v6 + 8 * v20;
        goto LABEL_33;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *a2 = 0;
  result = (uint64_t *)*v14;
  *v14 = v9;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v23 = *v4;
  if (*v4)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_27;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_30:
      result = WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(v4, v27, v14);
      v14 = result;
      v23 = *v4;
      if (*v4)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_32;
    }
LABEL_27:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_30;
  }
LABEL_32:
  v22 = v23 + 8 * v26;
  v21 = 1;
LABEL_33:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v21;
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)(v26 + 24) == 2)
            {
              if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v26);
            }
            else
            {
              *(_DWORD *)(v26 + 24) -= 2;
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::InspectorDOMAgent::*&)(void),WebCore::InspectorDOMAgent*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::WeakHashMap<WebCore::Node,int,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_28;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * --v4);
      result = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
      {
        *v6 = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          v9 = *(unsigned int *)(result + 28);
          if ((_DWORD)v9)
          {
            v26 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v9));
            result = v26;
          }
          v10 = *(WTF **)(result + 16);
          if (v10)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v25 = result;
            WTF::fastFree(v10, a2);
            result = v25;
          }
          result = WTF::fastFree((WTF *)result, a2);
        }
        *v6 = -1;
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v11 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v12 = *(_DWORD *)(v11 - 12);
      else
        v12 = 0;
      *(_DWORD *)(v11 - 12) = v12 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v13 = *(_DWORD *)(v3 - 4);
      v14 = *(unsigned int *)(v3 - 12);
      if (v13 >= 9 && 6 * (int)v14 < v13)
      {
        v18 = (v14 - 1) | ((v14 - 1) >> 1) | ((((_DWORD)v14 - 1) | ((v14 - 1) >> 1)) >> 2);
        v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v14)
            goto LABEL_39;
        }
        else if (3 * v20 > 4 * v14)
        {
LABEL_37:
          v21 = (double)v14;
          v22 = (double)v20;
          v23 = 0.604166667;
          goto LABEL_40;
        }
        LODWORD(v20) = 2 * v20;
        if (v20 <= 0x400)
          goto LABEL_37;
LABEL_39:
        v21 = (double)v14;
        v22 = (double)v20;
        v23 = 0.416666667;
LABEL_40:
        if (v22 * v23 <= v21)
          LODWORD(v20) = 2 * v20;
        if (v20 <= 8)
          v24 = 8;
        else
          v24 = v20;
        result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)v2, v24, 0);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v16 = 0;
          goto LABEL_32;
        }
LABEL_29:
        v16 = *(_DWORD *)(v3 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
          goto LABEL_33;
        goto LABEL_32;
      }
LABEL_28:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_29;
    }
  }
  v16 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_32:
  v17 = v16;
LABEL_33:
  *(_DWORD *)(v2 + 12) = 2 * v17;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,int,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = v15 + 16 * v22;
          *(_QWORD *)v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *(_QWORD *)v24 = v25;
          *(_DWORD *)(v24 + 8) = *(_DWORD *)(v6 + 16 * v11 + 8);
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr((unsigned int *)v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, (unsigned int *)v26));
            if (!v28)
            {
              atomic_store(1u, (unsigned int *)v26);
              v29 = *(unsigned int *)(v26 + 28);
              if ((_DWORD)v29)
              {
                v33 = v26;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v29));
                v26 = v33;
              }
              v30 = *(WTF **)(v26 + 16);
              if (v30)
              {
                *(_QWORD *)(v26 + 16) = 0;
                *(_DWORD *)(v26 + 24) = 0;
                v32 = v26;
                WTF::fastFree(v30, v10);
                v26 = v32;
              }
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(result + 24);
    do
    {
      *((_DWORD *)v10 - 2) = 0;
      *v10 = 0;
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (int *)(v4 + 16 * v11);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = 0;
          v23 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
          v24 = ((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) ^ (((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) >> 16);
          do
          {
            v25 = v24 & v21;
            v24 = ++v22 + v25;
          }
          while (*(_DWORD *)(v20 + 16 * v25));
          v26 = v20 + 16 * v25;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr((unsigned int *)v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, (unsigned int *)v27));
            if (!v29)
            {
              atomic_store(1u, (unsigned int *)v27);
              v34 = *(unsigned int *)(v27 + 28);
              if ((_DWORD)v34)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v34));
              v35 = *(WTF **)(v27 + 16);
              if (v35)
              {
                *(_QWORD *)(v27 + 16) = 0;
                *(_DWORD *)(v27 + 24) = 0;
                WTF::fastFree(v35, v8);
              }
              WTF::fastFree((WTF *)v27, v8);
            }
          }
          *(_DWORD *)v26 = *v12;
          v30 = v4 + 16 * v11;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          *(_QWORD *)(v26 + 8) = v31;
          v15 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (!v15)
            goto LABEL_30;
          do
          {
            v32 = __ldaxr((unsigned int *)v15);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, (unsigned int *)v15));
          if (v33)
            goto LABEL_30;
          atomic_store(1u, (unsigned int *)v15);
          v36 = *(unsigned int *)(v15 + 28);
          if ((_DWORD)v36)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v36));
          v37 = *(WTF **)(v15 + 16);
          if (v37)
          {
            *(_QWORD *)(v15 + 16) = 0;
            *(_DWORD *)(v15 + 24) = 0;
            WTF::fastFree(v37, v8);
          }
        }
        else
        {
          v14 = v4 + 16 * v11;
          v15 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (!v15)
            goto LABEL_30;
          do
          {
            v16 = __ldaxr((unsigned int *)v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, (unsigned int *)v15));
          if (v17)
            goto LABEL_30;
          atomic_store(1u, (unsigned int *)v15);
          v18 = *(unsigned int *)(v15 + 28);
          if ((_DWORD)v18)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v18));
          v19 = *(WTF **)(v15 + 16);
          if (v19)
          {
            *(_QWORD *)(v15 + 16) = 0;
            *(_DWORD *)(v15 + 24) = 0;
            WTF::fastFree(v19, v8);
          }
        }
        WTF::fastFree((WTF *)v15, v8);
      }
LABEL_30:
      if (++v11 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)a2 = -1;
  result = a2[1];
  a2[1] = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v12 = *(unsigned int *)(result + 28);
      if ((_DWORD)v12)
      {
        v15 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v12));
        result = v15;
      }
      v13 = *(WTF **)(result + 16);
      if (v13)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v14 = result;
        WTF::fastFree(v13, a2);
        result = v14;
      }
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<int,WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(a1, v10 >> 1);
  }
  return result;
}

char *WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 2)
        v9 = v8 + 1;
      else
        v9 = 2;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 2)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 1;
        goto LABEL_13;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_13:
        memcpy(v11, v5, 8 * v6);
        v13 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x195E36E40);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 2)
    v16 = v15 + 1;
  else
    v16 = 2;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    v18 = *((unsigned int *)a1 + 3);
    if (v17 < 2)
    {
      v19 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 1;
    }
    else
    {
      if (v17 >> 29)
        goto LABEL_38;
      v19 = (char *)WTF::fastMalloc((WTF *)(8 * v17));
      *((_DWORD *)a1 + 2) = v17;
      *a1 = v19;
    }
    memcpy(v19, v5, 8 * v18);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

unint64_t WTF::Vector<WebCore::InspectorDOMAgent::getEventListenersForNode(int,std::optional<BOOL> &&)::EventListenerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::InspectorDOMAgent::getEventListenersForNode(int,std::optional<BOOL> &&)::EventListenerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::InspectorDOMAgent::getEventListenersForNode(int,std::optional<BOOL> &&)::EventListenerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::InspectorDOMAgent::getEventListenersForNode(int,std::optional<BOOL> &&)::EventListenerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  int v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x6666667)
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x195E37038);
    }
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(_DWORD *)(result + 12);
    v8 = 40 * v4;
    result = WTF::fastMalloc((WTF *)(40 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v5 = result;
    if (v7)
    {
      v10 = result;
      v11 = (WTF *)((char *)v6 + 40 * v7);
      v12 = v6;
      do
      {
        v13 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)v10 = v13;
        v14 = (_DWORD *)*((_QWORD *)v12 + 1);
        if (v14)
          *v14 += 2;
        v15 = *((unsigned int *)v12 + 7);
        v16 = (_QWORD *)(v10 + 32);
        *(_QWORD *)(v10 + 8) = v14;
        *(_QWORD *)(v10 + 16) = v10 + 32;
        *(_DWORD *)(v10 + 24) = 1;
        *(_DWORD *)(v10 + 28) = v15;
        if (v15 >= 2)
        {
          if (v15 >> 29)
            goto LABEL_26;
          v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v15));
          *(_DWORD *)(v10 + 24) = v15;
          *(_QWORD *)(v10 + 16) = v16;
        }
        v17 = *((unsigned int *)v12 + 7);
        if ((_DWORD)v17)
        {
          v18 = (_DWORD **)*((_QWORD *)v12 + 2);
          v19 = 8 * v17;
          do
          {
            v20 = *v18;
            if (*v18)
              ++*v20;
            *v16++ = v20;
            ++v18;
            v19 -= 8;
          }
          while (v19);
        }
        result = (uint64_t)WebCore::InspectorDOMAgent::getEventListenersForNode(int,std::optional<BOOL> &&)::EventListenerInfo::~EventListenerInfo((uint64_t *)v12, v9);
        v10 += 40;
        v12 = (WTF *)((char *)v12 + 40);
      }
      while (v12 != v11);
    }
    if (v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      return WTF::fastFree(v6, v9);
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  WTF *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  WTF **v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl **result;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl **v54;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v50 = v5;
    v51 = v4;
    do
    {
      v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v24 = *((_DWORD *)v13 + 4);
          v54 = v10;
          if (v24 < 0x100)
            v25 = WTF::StringImpl::hashSlowCase(v13);
          else
            v25 = v24 >> 8;
          v26 = 0;
          do
          {
            v27 = v25 & v21;
            v28 = (WTF::StringImpl **)(v20 + 24 * (v25 & v21));
            v25 = ++v26 + (v25 & v21);
          }
          while (*v28);
          v29 = v20 + 24 * v27;
          v32 = *(_DWORD *)(v29 + 20);
          v31 = (_DWORD *)(v29 + 20);
          v30 = v32;
          v33 = (WTF **)(v31 - 3);
          if (v32)
          {
            v34 = *v33;
            v35 = 8 * v30;
            do
            {
              v36 = *(_QWORD *)v34;
              *(_QWORD *)v34 = 0;
              if (v36)
              {
                if (*(_DWORD *)(v36 + 24) == 2)
                {
                  if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v36, v8);
                }
                else
                {
                  *(_DWORD *)(v36 + 24) -= 2;
                }
              }
              v34 = (WTF *)((char *)v34 + 8);
              v35 -= 8;
            }
            while (v35);
          }
          v37 = *v33;
          if (*v33)
          {
            *v33 = 0;
            *(_DWORD *)(v20 + 24 * v27 + 16) = 0;
            WTF::fastFree(v37, v8);
          }
          v38 = *v28;
          *v28 = 0;
          v4 = v51;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v38 -= 2;
          }
          v39 = *v12;
          *v12 = 0;
          *v28 = v39;
          v40 = v51 + 24 * v9;
          *v33 = 0;
          *(_QWORD *)(v31 - 1) = 0;
          v42 = *(WTF **)(v40 + 8);
          v41 = v40 + 8;
          *(_QWORD *)v41 = 0;
          *v33 = v42;
          LODWORD(v39) = *(_DWORD *)(v41 + 8);
          *(_DWORD *)(v41 + 8) = 0;
          *(_DWORD *)(v20 + 24 * v27 + 16) = (_DWORD)v39;
          LODWORD(v39) = *(_DWORD *)(v41 + 12);
          *(_DWORD *)(v41 + 12) = 0;
          *v31 = (_DWORD)v39;
          v43 = *(unsigned int *)(v41 + 12);
          if ((_DWORD)v43)
          {
            v44 = *(uint64_t **)v41;
            v45 = 8 * v43;
            do
            {
              v46 = *v44;
              *v44 = 0;
              if (v46)
              {
                if (*(_DWORD *)(v46 + 24) == 2)
                {
                  if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v46, v8);
                }
                else
                {
                  *(_DWORD *)(v46 + 24) -= 2;
                }
              }
              ++v44;
              v45 -= 8;
            }
            while (v45);
          }
          v47 = *(WTF **)v41;
          if (*(_QWORD *)v41)
          {
            *(_QWORD *)v41 = 0;
            *(_DWORD *)(v41 + 8) = 0;
            WTF::fastFree(v47, v8);
          }
          v48 = *v12;
          *v12 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v48 -= 2;
          }
          v10 = v54;
          if (v12 == a3)
            v10 = v28;
          v11 = v50;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v15 = (WTF **)(v14 + 8);
          v16 = *(unsigned int *)(v14 + 20);
          if ((_DWORD)v16)
          {
            v17 = *v15;
            v18 = 8 * v16;
            do
            {
              v19 = *(_QWORD *)v17;
              *(_QWORD *)v17 = 0;
              if (v19)
              {
                if (*(_DWORD *)(v19 + 24) == 2)
                {
                  if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v19, v8);
                }
                else
                {
                  *(_DWORD *)(v19 + 24) -= 2;
                }
              }
              v17 = (WTF *)((char *)v17 + 8);
              v18 -= 8;
            }
            while (v18);
          }
          v22 = *v15;
          if (*v15)
          {
            *v15 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v22, v8);
          }
          v23 = *v12;
          *v12 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

int *WTF::HashTable<int,int,WTF::IdentityExtractor,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<int>>::add(int *result, uint64_t *a2, int *a3)
{
  int *v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (int *)(v6 + 4 * v12);
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v19 = 0;
        else
          v19 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v26 = v6 + 4 * v19;
        goto LABEL_33;
      }
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (int *)(v6 + 4 * v12);
      v14 = *v13;
      ++v16;
    }
    while (*v13);
    if (v15)
    {
      *v15 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v13 = v15;
    }
  }
  *v13 = v9;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_28;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_29:
    result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(a2, v24, v13);
    v13 = result;
    v20 = *a2;
    if (*a2)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
  }
  v26 = v20 + 4 * v23;
  v25 = 1;
LABEL_33:
  *(_QWORD *)v5 = v13;
  *((_QWORD *)v5 + 1) = v26;
  *((_BYTE *)v5 + 16) = v25;
  return result;
}

uint64_t *WTF::WeakHashMap<WebCore::RenderObject,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t *result, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;

  v2 = result;
  v3 = *result;
  if (*result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_25;
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      v7 = v6;
      v8 = (uint64_t **)(v3 + 24 * v6);
      result = *v8;
      if ((unint64_t)*v8 + 1 >= 2 && !result[1])
      {
        *v8 = 0;
        if (*(_DWORD *)result == 1)
          WTF::fastFree((WTF *)result, a2);
        else
          --*(_DWORD *)result;
        *v8 = (uint64_t *)-1;
        v9 = v3 + 24 * v6;
        v11 = *(uint64_t **)(v9 + 8);
        v10 = (_QWORD *)(v9 + 8);
        result = v11;
        if (v11)
        {
          *v10 = 0;
          *(_DWORD *)(v3 + 24 * v6 + 16) = 0;
          result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        }
        ++v5;
      }
      --v6;
    }
    while (v7);
    v3 = *v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v12 = *v2;
      if (*v2)
        v13 = *(_DWORD *)(v12 - 12);
      else
        v13 = 0;
      *(_DWORD *)(v12 - 12) = v13 - v5;
      v3 = *v2;
    }
    if (v3)
    {
      v14 = *(_DWORD *)(v3 - 4);
      v15 = *(unsigned int *)(v3 - 12);
      if (v14 >= 9 && 6 * (int)v15 < v14)
      {
        v19 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
        v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
        v21 = (v20 | HIWORD(v20)) + 1;
        if (v21 > 0x400)
        {
          if (v21 > 2 * v15)
            goto LABEL_36;
        }
        else if (3 * v21 > 4 * v15)
        {
LABEL_34:
          v22 = (double)v15;
          v23 = (double)v21;
          v24 = 0.604166667;
          goto LABEL_37;
        }
        LODWORD(v21) = 2 * v21;
        if (v21 <= 0x400)
          goto LABEL_34;
LABEL_36:
        v22 = (double)v15;
        v23 = (double)v21;
        v24 = 0.416666667;
LABEL_37:
        if (v23 * v24 <= v22)
          LODWORD(v21) = 2 * v21;
        if (v21 <= 8)
          v25 = 8;
        else
          v25 = v21;
        result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v2, v25, 0);
        v3 = *v2;
        *((_DWORD *)v2 + 2) = 0;
        if (!v3)
        {
          v17 = 0;
          goto LABEL_29;
        }
LABEL_26:
        v17 = *(_DWORD *)(v3 - 12);
        v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
          goto LABEL_30;
        goto LABEL_29;
      }
LABEL_25:
      *((_DWORD *)v2 + 2) = 0;
      goto LABEL_26;
    }
  }
  v17 = 0;
  *((_DWORD *)v2 + 2) = 0;
LABEL_29:
  v18 = v17;
LABEL_30:
  *((_DWORD *)v2 + 3) = 2 * v18;
  return result;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  WTF **v13;
  WTF **v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  _QWORD *v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  WTF **v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  _QWORD *v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  WTF **result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  v9 = a1;
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    v12 = v5;
    v13 = a3;
    do
    {
      v14 = (WTF **)(v4 + 24 * v10);
      v15 = *v14;
      if (*v14 != (WTF *)-1)
      {
        if (v15)
        {
          v20 = *v9;
          if (*v9)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = ((unint64_t)v15 + ~((_QWORD)v15 << 32)) ^ (((unint64_t)v15 + ~((_QWORD)v15 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = (WTF **)(v20 + 24 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (*v28);
          v29 = v27;
          v30 = v20 + 24 * v27;
          v33 = *(WTF **)(v30 + 8);
          v32 = (_QWORD *)(v30 + 8);
          v31 = v33;
          if (v33)
          {
            *v32 = 0;
            *(_DWORD *)(v20 + 24 * v27 + 16) = 0;
            WTF::fastFree(v31, v8);
            v13 = a3;
            v9 = a1;
            v43 = *v28;
            *v28 = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 1)
              {
                WTF::fastFree(v43, v8);
                v13 = a3;
                v9 = a1;
              }
              else
              {
                --*(_DWORD *)v43;
              }
            }
          }
          else
          {
            *v28 = 0;
          }
          v34 = *v14;
          *v14 = 0;
          *v28 = v34;
          v35 = v4 + 24 * v10;
          *v32 = 0;
          v32[1] = 0;
          v37 = *(_QWORD *)(v35 + 8);
          v36 = v35 + 8;
          *(_QWORD *)v36 = 0;
          *v32 = v37;
          v38 = *(_DWORD *)(v36 + 8);
          *(_DWORD *)(v36 + 8) = 0;
          v39 = v20 + 24 * v29;
          *(_DWORD *)(v39 + 16) = v38;
          v40 = *(_DWORD *)(v36 + 12);
          *(_DWORD *)(v36 + 12) = 0;
          *(_DWORD *)(v39 + 20) = v40;
          v41 = *(WTF **)v36;
          if (*(_QWORD *)v36)
          {
            *(_QWORD *)v36 = 0;
            *(_DWORD *)(v36 + 8) = 0;
            WTF::fastFree(v41, v8);
            v13 = a3;
            v9 = a1;
          }
          v42 = *v14;
          *v14 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 1)
            {
              WTF::fastFree(v42, v8);
              v13 = a3;
              v9 = a1;
            }
            else
            {
              --*(_DWORD *)v42;
            }
          }
          if (v14 == v13)
            v11 = v28;
        }
        else
        {
          v16 = v4 + 24 * v10;
          v19 = *(WTF **)(v16 + 8);
          v18 = (_QWORD *)(v16 + 8);
          v17 = v19;
          if (v19)
          {
            *v18 = 0;
            *(_DWORD *)(v4 + 24 * v10 + 16) = 0;
            WTF::fastFree(v17, v8);
            v13 = a3;
            v9 = a1;
            v15 = *v14;
          }
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
            {
              WTF::fastFree(v15, v8);
              v13 = a3;
              v9 = a1;
            }
            else
            {
              --*(_DWORD *)v15;
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v11;
}

void WTF::WeakHashMap<WebCore::HTMLMediaElement,WebCore::InspectorDOMAgent::MediaMetrics,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_23;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * --v4);
      v7 = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(v7 + 8))
      {
        *v6 = 0;
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v7);
          WTF::fastFree((WTF *)v7, a2);
        }
        *v6 = -1;
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)a1;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v11 = *(_DWORD *)(v10 - 12);
      else
        v11 = 0;
      *(_DWORD *)(v10 - 12) = v11 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v12 = *(_DWORD *)(v3 - 4);
      v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        v17 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
        v19 = (v18 | HIWORD(v18)) + 1;
        if (v19 > 0x400)
        {
          if (v19 > 2 * v13)
            goto LABEL_34;
        }
        else if (3 * v19 > 4 * v13)
        {
LABEL_32:
          v20 = (double)v13;
          v21 = (double)v19;
          v22 = 0.604166667;
          goto LABEL_35;
        }
        LODWORD(v19) = 2 * v19;
        if (v19 <= 0x400)
          goto LABEL_32;
LABEL_34:
        v20 = (double)v13;
        v21 = (double)v19;
        v22 = 0.416666667;
LABEL_35:
        if (v21 * v22 <= v20)
          LODWORD(v19) = 2 * v19;
        if (v19 <= 8)
          v23 = 8;
        else
          v23 = v19;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v23);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v15 = 0;
          goto LABEL_27;
        }
LABEL_24:
        v15 = *(_DWORD *)(v3 - 12);
        v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
          goto LABEL_28;
        goto LABEL_27;
      }
LABEL_23:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_24;
    }
  }
  v15 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_27:
  v16 = v15;
LABEL_28:
  *(_DWORD *)(a1 + 12) = 2 * v16;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::InspectorDOMDebuggerAgent::EventBreakpoint>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;

  if (result != a2)
  {
    v4 = (char *)result + 24;
    v5 = a3 + 24;
    do
    {
      v7 = (WTF::StringImpl **)(v4 - 24);
      v6 = *((_QWORD *)v4 - 3);
      *v7 = 0;
      *(_QWORD *)(v5 - 24) = v6;
      *(_WORD *)(v5 - 16) = *((_WORD *)v4 - 8);
      v8 = *((_QWORD *)v4 - 1);
      v7[2] = 0;
      *(_QWORD *)(v5 - 8) = v8;
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 8) = 0;
      if (v4[8])
      {
        JSC::Yarr::RegularExpression::RegularExpression();
        *(_BYTE *)(v5 + 8) = 1;
      }
      *(_QWORD *)(v5 + 16) = 0;
      v9 = *((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 2) = 0;
      *(_QWORD *)(v5 + 16) = v9;
      v10 = (WTF::StringImpl **)*((_QWORD *)v4 + 2);
      if (v10)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, a2);
      if (v4[8])
        JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v4);
      v11 = *((_QWORD *)v4 - 1);
      *((_QWORD *)v4 - 1) = 0;
      if (v11)
        WTF::RefCounted<JSC::Breakpoint>::deref(v11, a2);
      result = *v7;
      *v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v4 += 48;
      v5 += 48;
    }
    while (v7 + 6 != (WTF::StringImpl **)a2);
  }
  return result;
}

char *WTF::Vector<WebCore::InspectorDOMDebuggerAgent::EventBreakpoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (WTF::StringImpl *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v13 = *(WTF::StringImpl **)a1;
        return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
      if (v9 < 0x5555556)
      {
        v10 = 48 * v9;
        v11 = WTF::fastMalloc((WTF *)(48 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,WebCore::InspectorDOMDebuggerAgent::EventBreakpoint>::move(v5, v6, v11);
        v13 = *(WTF::StringImpl **)a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v13 = *(WTF::StringImpl **)a1;
        }
        return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x195E37E4CLL);
    }
  }
  v14 = *(unsigned int *)(a1 + 8);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v16 = a2;
  if (v16 > v14)
  {
    if (v16 >= 0x5555556)
      goto LABEL_28;
    v17 = (WTF::StringImpl *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12));
    v18 = 48 * v16;
    v19 = WTF::fastMalloc((WTF *)(48 * v16));
    *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)a1 = v19;
    WTF::VectorMover<false,WebCore::InspectorDOMDebuggerAgent::EventBreakpoint>::move(v5, v17, v19);
    if (v5)
    {
      if (*(WTF::StringImpl **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v20);
    }
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::InspectorDOMDebuggerAgent::EventBreakpoint>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;

  v4 = result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,WebCore::InspectorDOMDebuggerAgent::EventBreakpoint>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = 0;
    v6 = a3 + a2 - result;
    do
    {
      v7 = (char *)a2 + v5;
      v8 = v6 + v5;
      v9 = *(_QWORD *)((char *)a2 + v5 - 48);
      *((_QWORD *)v7 - 6) = 0;
      *(_QWORD *)(v8 - 48) = v9;
      *(_WORD *)(v8 - 40) = *(_WORD *)((char *)a2 + v5 - 40);
      v10 = *(_QWORD *)((char *)a2 + v5 - 32);
      *((_QWORD *)v7 - 4) = 0;
      *(_QWORD *)(v8 - 32) = v10;
      *(_BYTE *)(v6 + v5 - 24) = 0;
      *(_BYTE *)(v8 - 16) = 0;
      if (*((_BYTE *)a2 + v5 - 16))
      {
        JSC::Yarr::RegularExpression::RegularExpression();
        *(_BYTE *)(v8 - 16) = 1;
      }
      *(_QWORD *)(v8 - 8) = 0;
      v11 = *((_QWORD *)v7 - 1);
      *((_QWORD *)v7 - 1) = 0;
      *(_QWORD *)(v8 - 8) = v11;
      v12 = (WTF::StringImpl **)*((_QWORD *)v7 - 1);
      if (v12)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, a2);
      if (*(v7 - 16))
        JSC::Yarr::RegularExpression::~RegularExpression((WTF::StringImpl *)((char *)a2 + v5 - 24));
      v13 = *((_QWORD *)v7 - 4);
      *((_QWORD *)v7 - 4) = 0;
      if (v13)
        WTF::RefCounted<JSC::Breakpoint>::deref(v13, a2);
      result = (WTF::StringImpl *)*((_QWORD *)v7 - 6);
      *((_QWORD *)v7 - 6) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 -= 48;
    }
    while ((WTF::StringImpl *)((char *)a2 + v5) != v4);
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  _QWORD *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF *v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  int v63;
  int v64;
  uint64_t *v65;

  v3 = a1;
  v4 = *((unsigned int *)a1 + 2);
  v5 = (WTF *)*a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *v3 = result;
  *((_DWORD *)v3 + 2) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *((_DWORD *)v3 + 4) = (v10 >> 31) ^ v10;
  *((_BYTE *)v3 + 20) = 0;
  v60 = v4;
  if ((_DWORD)v4)
  {
    v11 = 0;
    v59 = v5;
    v65 = v3;
    while (1)
    {
      v12 = (char *)v5 + 16 * v11;
      v13 = *(WTF::StringImpl **)v12;
      if (*(_QWORD *)v12)
      {
        v14 = *((_DWORD *)v3 + 2);
        v15 = *((_DWORD *)v3 + 4);
        v16 = *((_DWORD *)v13 + 4);
        v63 = v15;
        v64 = v14;
        if (v16 < 0x100)
        {
          v17 = WTF::StringImpl::hashSlowCase(v13);
          v15 = v63;
          v14 = v64;
        }
        else
        {
          v17 = v16 >> 8;
        }
        v18 = v14 - 1;
        v19 = (v17 ^ v15) & (v14 - 1);
        v20 = *v3;
        v21 = (WTF::StringImpl **)(*v3 + 16 * v19);
        v22 = *v21;
        v61 = v11;
        if (*v21)
        {
          v23 = 0;
          v24 = (_QWORD *)((char *)v5 + 16 * v11 + 8);
          v62 = v24;
          do
          {
            v25 = *((_DWORD *)v22 + 4);
            if (v25 < 0x100)
            {
              v26 = WTF::StringImpl::hashSlowCase(v22);
              v24 = v62;
              v15 = v63;
              v14 = v64;
            }
            else
            {
              v26 = v25 >> 8;
            }
            v27 = (v19 + v14 - ((v26 ^ v15) & v18)) & v18;
            if (v23 > v27)
            {
              v28 = *(WTF::StringImpl **)v12;
              v29 = *v24;
              *(_QWORD *)v12 = 0;
              *((_QWORD *)v12 + 1) = 0;
              v30 = *v21;
              *v21 = 0;
              v31 = *(WTF::StringImpl **)v12;
              *(_QWORD *)v12 = v30;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                {
                  WTF::StringImpl::destroy(v31, v7);
                  v24 = v62;
                  v15 = v63;
                  v14 = v64;
                }
                else
                {
                  *(_DWORD *)v31 -= 2;
                }
              }
              v32 = v20 + 16 * v19;
              v34 = *(_QWORD *)(v32 + 8);
              v33 = (uint64_t *)(v32 + 8);
              *v33 = 0;
              v35 = *v24;
              *v24 = v34;
              if (v35)
              {
                if (*(_DWORD *)v35 == 1)
                {
                  v58 = v29;
                  v38 = *(unsigned int *)(v35 + 52);
                  if ((_DWORD)v38)
                  {
                    v39 = 24 * v38;
                    v40 = (WTF::StringImpl **)(*(_QWORD *)(v35 + 40) + 8);
                    do
                    {
                      v41 = *v40;
                      *v40 = 0;
                      if (v41)
                      {
                        if (*(_DWORD *)v41 == 2)
                          WTF::StringImpl::destroy(v41, v7);
                        else
                          *(_DWORD *)v41 -= 2;
                      }
                      v40 += 3;
                      v39 -= 24;
                    }
                    while (v39);
                  }
                  v46 = *(WTF **)(v35 + 40);
                  if (v46)
                  {
                    *(_QWORD *)(v35 + 40) = 0;
                    *(_DWORD *)(v35 + 48) = 0;
                    WTF::fastFree(v46, v7);
                  }
                  v47 = *(WTF::StringImpl **)(v35 + 32);
                  *(_QWORD *)(v35 + 32) = 0;
                  v29 = v58;
                  v5 = v59;
                  if (v47)
                  {
                    if (*(_DWORD *)v47 == 2)
                      WTF::StringImpl::destroy(v47, v7);
                    else
                      *(_DWORD *)v47 -= 2;
                  }
                  WTF::fastFree((WTF *)v35, v7);
                  v15 = v63;
                  v14 = v64;
                  v24 = v62;
                }
                else
                {
                  --*(_DWORD *)v35;
                }
              }
              v36 = *v21;
              *v21 = v28;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                {
                  WTF::StringImpl::destroy(v36, v7);
                  v24 = v62;
                  v15 = v63;
                  v14 = v64;
                }
                else
                {
                  *(_DWORD *)v36 -= 2;
                }
              }
              v37 = *v33;
              *v33 = v29;
              if (v37)
              {
                if (*(_DWORD *)v37 == 1)
                {
                  v42 = *(unsigned int *)(v37 + 52);
                  v3 = v65;
                  if ((_DWORD)v42)
                  {
                    v43 = 24 * v42;
                    v44 = (WTF::StringImpl **)(*(_QWORD *)(v37 + 40) + 8);
                    do
                    {
                      v45 = *v44;
                      *v44 = 0;
                      if (v45)
                      {
                        if (*(_DWORD *)v45 == 2)
                          WTF::StringImpl::destroy(v45, v7);
                        else
                          *(_DWORD *)v45 -= 2;
                      }
                      v44 += 3;
                      v43 -= 24;
                    }
                    while (v43);
                  }
                  v48 = *(WTF **)(v37 + 40);
                  if (v48)
                  {
                    *(_QWORD *)(v37 + 40) = 0;
                    *(_DWORD *)(v37 + 48) = 0;
                    WTF::fastFree(v48, v7);
                  }
                  v49 = *(WTF::StringImpl **)(v37 + 32);
                  *(_QWORD *)(v37 + 32) = 0;
                  v5 = v59;
                  if (v49)
                  {
                    if (*(_DWORD *)v49 == 2)
                      WTF::StringImpl::destroy(v49, v7);
                    else
                      *(_DWORD *)v49 -= 2;
                  }
                  WTF::fastFree((WTF *)v37, v7);
                  v23 = v27;
                  v15 = v63;
                  v14 = v64;
                  v24 = v62;
                  goto LABEL_26;
                }
                --*(_DWORD *)v37;
              }
              v23 = v27;
              v3 = v65;
            }
LABEL_26:
            v19 = ((_DWORD)v19 + 1) & v18;
            ++v23;
            v20 = *v3;
            v21 = (WTF::StringImpl **)(*v3 + 16 * v19);
            v22 = *v21;
          }
          while (*v21);
        }
        v50 = *(WTF::StringImpl **)v12;
        *(_QWORD *)v12 = 0;
        v51 = *v21;
        *v21 = v50;
        v11 = v61;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v7);
          else
            *(_DWORD *)v51 -= 2;
        }
        v52 = v20 + 16 * v19;
        v53 = (char *)v5 + 16 * v61;
        v54 = *((_QWORD *)v53 + 1);
        *((_QWORD *)v53 + 1) = 0;
        v55 = *(_QWORD *)(v52 + 8);
        *(_QWORD *)(v52 + 8) = v54;
        if (v55)
          WTF::RefCounted<JSC::Breakpoint>::deref(v55, v7);
      }
      v56 = *((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = 0;
      if (v56)
        WTF::RefCounted<JSC::Breakpoint>::deref(v56, v7);
      v57 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v7);
        else
          *(_DWORD *)v57 -= 2;
      }
      if (++v11 == v60)
        return WTF::fastFree(v5, v7);
    }
  }
  if (v5)
    return WTF::fastFree(v5, v7);
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  unsigned int v17;
  WTF::StringImpl **v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (uint64_t)a2[1];
  a2[1] = 0;
  if (v5)
    WTF::RefCounted<JSC::Breakpoint>::deref(v5, (WTF::StringImpl *)a2);
  *a2 = 0;
  a2[1] = 0;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = v6 - 1;
  v9 = *(_QWORD *)a1;
  v10 = (unint64_t)a2 - *(_QWORD *)a1;
  v11 = (v10 >> 4) + 1;
  v12 = v11 & (v6 - 1);
  v13 = (uint64_t *)(*(_QWORD *)a1 + 16 * v12);
  result = *v13;
  if (*v13)
  {
    v15 = *(_DWORD *)(a1 + 16);
    v16 = (v10 >> 4);
    v17 = v11 & v8;
    v18 = (WTF::StringImpl **)(v9 + 16 * v16);
    do
    {
      v19 = *(_DWORD *)(result + 16);
      if (v19 < 0x100)
        result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        result = v19 >> 8;
      if (((v17 + v6 - ((result ^ v15) & v8)) & v8) == 0)
        break;
      v20 = (WTF::StringImpl *)*v13;
      *v13 = 0;
      v21 = *v18;
      *v18 = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = v9 + 16 * v16;
      v23 = v9 + 16 * v12;
      v25 = *(_QWORD *)(v23 + 8);
      v24 = (uint64_t *)(v23 + 8);
      *v24 = 0;
      v26 = *(_QWORD *)(v22 + 8);
      *(_QWORD *)(v22 + 8) = v25;
      if (v26)
        WTF::RefCounted<JSC::Breakpoint>::deref(v26, (WTF::StringImpl *)a2);
      v27 = *v24;
      *v24 = 0;
      if (v27)
        WTF::RefCounted<JSC::Breakpoint>::deref(v27, (WTF::StringImpl *)a2);
      v28 = (WTF::StringImpl *)*v13;
      *v13 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v28 -= 2;
      }
      *v13 = 0;
      v13[1] = 0;
      v12 = (v17 + 1) & v8;
      v9 = *(_QWORD *)a1;
      v16 = v17;
      v18 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v17);
      v13 = (uint64_t *)(*(_QWORD *)a1 + 16 * v12);
      result = *v13;
      v17 = (v17 + 1) & v8;
    }
    while (*v13);
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
  }
  if (v6 >= 9 && 6 * v7 < v6)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t *)a1, v6 >> 1);
  return result;
}

void WebCore::InspectorDOMStorageAgent::~InspectorDOMStorageAgent(WebCore::InspectorDOMStorageAgent *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::DOMStorageBackendDispatcherHandler::~DOMStorageBackendDispatcherHandler((WebCore::InspectorDOMStorageAgent *)((char *)this + 32));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::DOMStorageBackendDispatcherHandler::~DOMStorageBackendDispatcherHandler((WebCore::InspectorDOMStorageAgent *)((char *)this + 32));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, v5);
}

void `non-virtual thunk to'WebCore::InspectorDOMStorageAgent::~InspectorDOMStorageAgent(WebCore::InspectorDOMStorageAgent *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::DOMStorageBackendDispatcherHandler::~DOMStorageBackendDispatcherHandler(this);
  v6 = (WTF::StringImpl *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 4) = off_1E33EFC38;
  *((_QWORD *)this - 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::DOMStorageBackendDispatcherHandler::~DOMStorageBackendDispatcherHandler(this);
  v6 = (WTF::StringImpl *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 4) = off_1E33EFC38;
  *((_QWORD *)this - 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree((WebCore::InspectorDOMStorageAgent *)((char *)this - 32), v5);
}

uint64_t WebCore::InspectorDOMStorageAgent::willDestroyFrontendAndBackend(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  v1 = *(_QWORD *)(result + 16);
  if (*(_QWORD *)(v1 + 160) == result)
  {
    *(_QWORD *)(v1 + 160) = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (uint64_t)v3;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        return WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::InspectorDOMStorageAgent::disable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(this + 16);
  if (*(_QWORD *)(v3 + 160) == this)
  {
    v4 = 0;
    *(_QWORD *)(v3 + 160) = 0;
    *a2 = 0;
  }
  else
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
  }
  a2[8] = v4;
  return this;
}

uint64_t WebCore::InspectorDOMStorageAgent::enable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(this + 16);
  if (*(_QWORD *)(v3 + 160) == this)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_QWORD *)(v3 + 160) = this;
    *a2 = 0;
  }
  a2[8] = v4;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMStorageAgent::enable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(this - 16);
  if (*(_QWORD *)(v3 + 160) == this - 32)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_QWORD *)(v3 + 160) = this - 32;
    *a2 = 0;
  }
  a2[8] = v4;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorDOMStorageAgent::disable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(this - 16);
  if (*(_QWORD *)(v3 + 160) == this - 32)
  {
    v4 = 0;
    *(_QWORD *)(v3 + 160) = 0;
    *a2 = 0;
  }
  else
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
  }
  a2[8] = v4;
  return this;
}

_DWORD *WebCore::InspectorDOMStorageAgent::getDOMStorageItems@<X0>(uint64_t a1@<X0>, WTF::JSONImpl::ObjectBase **a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  const WTF::String *v10;
  const WTF::String *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _DWORD *v15;
  _DWORD *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _DWORD *v21;
  _DWORD *result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  uint64_t *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WebCore::InspectorPageAgent *v36;
  WTF::StringImpl *v37;
  _DWORD *v38;

  v37 = 0;
  WebCore::InspectorDOMStorageAgent::findStorageArea(&v35, a1, &v37, a2, &v36);
  v5 = v35;
  if (v35)
  {
    v6 = WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v6);
    if ((*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 16))(v5))
    {
      v7 = 0;
      do
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *, uint64_t))(*(_QWORD *)v5 + 24))(&v34, v5, v7);
        (*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v5 + 32))(&v33, v5, &v34);
        v8 = WTF::fastMalloc((WTF *)0x20);
        v9 = (char **)(WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v8) + 16);
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v34, v10);
        v12 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v12 == *(_DWORD *)(v8 + 24))
        {
          v13 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v12 + 1, (unint64_t)&v38);
          v12 = *(unsigned int *)(v8 + 28);
          v14 = *(char **)(v8 + 16);
          v15 = *(_DWORD **)v13;
          *(_QWORD *)v13 = 0;
        }
        else
        {
          v14 = *v9;
          v15 = v38;
          v38 = 0;
        }
        *(_QWORD *)&v14[8 * v12] = v15;
        *(_DWORD *)(v8 + 28) = v12 + 1;
        v16 = v38;
        v38 = 0;
        if (v16)
        {
          if (*v16 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v16;
        }
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v33, v11);
        v18 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v18 == *(_DWORD *)(v8 + 24))
        {
          v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v18 + 1, (unint64_t)&v38);
          v18 = *(unsigned int *)(v8 + 28);
          v20 = *(char **)(v8 + 16);
          v21 = *(_DWORD **)v19;
          *(_QWORD *)v19 = 0;
        }
        else
        {
          v20 = *v9;
          v21 = v38;
          v38 = 0;
        }
        *(_QWORD *)&v20[8 * v18] = v21;
        *(_DWORD *)(v8 + 28) = v18 + 1;
        result = v38;
        v38 = 0;
        if (result)
        {
          if (*result == 1)
            result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
          else
            --*result;
        }
        v23 = *(unsigned int *)(v6 + 28);
        if ((_DWORD)v23 == *(_DWORD *)(v6 + 24))
        {
          v24 = v23 + (v23 >> 2);
          if (v24 >= 0x10)
            v25 = v24 + 1;
          else
            v25 = 16;
          if (v25 <= v23 + 1)
            v26 = v23 + 1;
          else
            v26 = v25;
          if (v26 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v27 = *(void **)(v6 + 16);
          v28 = (void *)WTF::fastMalloc((WTF *)(8 * v26));
          *(_DWORD *)(v6 + 24) = v26;
          *(_QWORD *)(v6 + 16) = v28;
          memcpy(v28, v27, 8 * v23);
          if (v27)
          {
            if (*(void **)(v6 + 16) == v27)
            {
              *(_QWORD *)(v6 + 16) = 0;
              *(_DWORD *)(v6 + 24) = 0;
            }
            WTF::fastFree((WTF *)v27, v17);
          }
          v23 = *(unsigned int *)(v6 + 28);
          v29 = (uint64_t *)(*(_QWORD *)(v6 + 16) + 8 * v23);
        }
        else
        {
          v29 = (uint64_t *)(*(_QWORD *)(v6 + 16) + 8 * v23);
        }
        *v29 = v8;
        *(_DWORD *)(v6 + 28) = v23 + 1;
        v30 = v33;
        v33 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v17);
          else
            *(_DWORD *)v30 -= 2;
        }
        v31 = v34;
        v34 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v17);
          else
            *(_DWORD *)v31 -= 2;
        }
        v7 = (v7 + 1);
      }
      while (v7 < (*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 16))(v5));
    }
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(a3 + 8) = 0;
    if (*((_DWORD *)v5 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 8))(v5);
    else
      --*((_DWORD *)v5 + 2);
  }
  else
  {
    v32 = v37;
    if (v37)
      *(_DWORD *)v37 += 2;
    *(_QWORD *)a3 = v32;
    *(_DWORD *)(a3 + 8) = 1;
  }
  result = v37;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      return (_DWORD *)WTF::StringImpl::destroy(v37, v4);
    else
      *(_DWORD *)v37 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorDOMStorageAgent::findStorageArea(WTF::StringImpl **a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4, WebCore::InspectorPageAgent **a5)
{
  WTF::JSONImpl::ObjectBase *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::JSONImpl::ObjectBase *v13;
  WTF::StringImpl *v14;
  const WTF::String *v15;
  unsigned __int16 Boolean;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WebCore::InspectorPageAgent *FrameWithSecurityOrigin;
  WTF::StringImpl *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  v10 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString(v10, (const WTF::String *)&v33);
  v12 = v33;
  v33 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (!v32)
    goto LABEL_9;
  v13 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Boolean = WTF::JSONImpl::ObjectBase::getBoolean(v13, (const WTF::String *)&v33);
  v17 = v33;
  v33 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (Boolean > 0xFFu
    && (FrameWithSecurityOrigin = WebCore::InspectorPageAgent::findFrameWithSecurityOrigin(*(WebCore::InspectorPageAgent **)(*(_QWORD *)(a2 + 56) + 160), (WebCore::Page *)&v32, v15), (*a5 = FrameWithSecurityOrigin) != 0))
  {
    v23 = (_QWORD *)*((_QWORD *)FrameWithSecurityOrigin + 37);
    if ((_BYTE)Boolean)
    {
      WebCore::StorageNamespaceProvider::localStorageArea((uint64_t *)&v33, *(WebCore::StorageNamespaceProvider **)(*(_QWORD *)(a2 + 56) + 928), (WebCore::Document *)v23);
      v24 = v33;
    }
    else
    {
      v25 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 928);
      WebCore::Document::topOrigin(*((WebCore::Document **)FrameWithSecurityOrigin + 37), v22);
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 16))(&v33, v25, v26, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23[66] + 8) + 24) + 8), 1);
      v27 = v33;
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v23 + 24), v28);
      (*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *, uint64_t))(*(_QWORD *)v27 + 16))(&v31, v27, v29);
      v30 = v33;
      v33 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
        else
          --*((_DWORD *)v30 + 2);
      }
      v24 = v31;
    }
    *a1 = v24;
  }
  else
  {
LABEL_9:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = *a3;
    *a3 = v33;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    *a1 = 0;
  }
  result = v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *`non-virtual thunk to'WebCore::InspectorDOMStorageAgent::getDOMStorageItems@<X0>(uint64_t a1@<X0>, WTF::JSONImpl::ObjectBase **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorDOMStorageAgent::getDOMStorageItems(a1 - 32, a2, a3);
}

WTF::StringImpl *WebCore::InspectorDOMStorageAgent::setDOMStorageItem@<X0>(uint64_t a1@<X0>, WTF::JSONImpl::ObjectBase **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  char v13;
  WTF::StringImpl *v14;
  WebCore::InspectorPageAgent *v15;
  WTF::StringImpl *v16;

  v15 = 0;
  v16 = 0;
  WebCore::InspectorDOMStorageAgent::findStorageArea(&v14, a1, &v16, a2, &v15);
  v9 = v14;
  if (v14)
  {
    v13 = 0;
    (*(void (**)(WTF::StringImpl *, WebCore::InspectorPageAgent *, uint64_t, uint64_t, char *))(*(_QWORD *)v14 + 40))(v14, v15, a3, a4, &v13);
    v10 = v13;
    if (v13)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v10 = 1;
    }
    else
    {
      *a5 = 0;
    }
    a5[8] = v10;
    if (*((_DWORD *)v9 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 8))(v9);
    else
      --*((_DWORD *)v9 + 2);
  }
  else
  {
    v11 = v16;
    if (v16)
      *(_DWORD *)v16 += 2;
    *(_QWORD *)a5 = v11;
    a5[8] = 1;
  }
  result = v16;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v16, v8);
    else
      *(_DWORD *)v16 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMStorageAgent::setDOMStorageItem@<X0>(uint64_t a1@<X0>, WTF::JSONImpl::ObjectBase **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  return WebCore::InspectorDOMStorageAgent::setDOMStorageItem(a1 - 32, a2, a3, a4, a5);
}

WTF::StringImpl *WebCore::InspectorDOMStorageAgent::removeDOMStorageItem@<X0>(uint64_t a1@<X0>, WTF::JSONImpl::ObjectBase **a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WebCore::InspectorPageAgent *v11;
  WTF::StringImpl *v12;

  v11 = 0;
  v12 = 0;
  WebCore::InspectorDOMStorageAgent::findStorageArea(&v10, a1, &v12, a2, &v11);
  v7 = v10;
  if (v10)
  {
    (*(void (**)(WTF::StringImpl *, WebCore::InspectorPageAgent *, uint64_t))(*(_QWORD *)v10 + 48))(v10, v11, a3);
    *a4 = 0;
    a4[8] = 0;
    if (*((_DWORD *)v7 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v7 + 8))(v7);
    else
      --*((_DWORD *)v7 + 2);
  }
  else
  {
    v8 = v12;
    if (v12)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)a4 = v8;
    a4[8] = 1;
  }
  result = v12;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMStorageAgent::removeDOMStorageItem@<X0>(uint64_t a1@<X0>, WTF::JSONImpl::ObjectBase **a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorDOMStorageAgent::removeDOMStorageItem(a1 - 32, a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorDOMStorageAgent::clearDOMStorageItems@<X0>(uint64_t a1@<X0>, WTF::JSONImpl::ObjectBase **a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WebCore::InspectorPageAgent *v9;
  WTF::StringImpl *v10;

  v9 = 0;
  v10 = 0;
  WebCore::InspectorDOMStorageAgent::findStorageArea(&v8, a1, &v10, a2, &v9);
  v5 = v8;
  if (v8)
  {
    (*(void (**)(WTF::StringImpl *, WebCore::InspectorPageAgent *))(*(_QWORD *)v8 + 56))(v8, v9);
    *a3 = 0;
    a3[8] = 0;
    if (*((_DWORD *)v5 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 8))(v5);
    else
      --*((_DWORD *)v5 + 2);
  }
  else
  {
    v6 = v10;
    if (v10)
      *(_DWORD *)v10 += 2;
    *(_QWORD *)a3 = v6;
    a3[8] = 1;
  }
  result = v10;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v4);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDOMStorageAgent::clearDOMStorageItems@<X0>(uint64_t a1@<X0>, WTF::JSONImpl::ObjectBase **a2@<X1>, _BYTE *a3@<X8>)
{
  return WebCore::InspectorDOMStorageAgent::clearDOMStorageItems(a1 - 32, a2, a3);
}

uint64_t WebCore::InspectorDOMStorageAgent::storageId(WebCore::InspectorDOMStorageAgent *this, WebCore::Storage *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  WTF::JSONImpl::Value *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::JSONImpl::Value *v17;
  char v18;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 72) + 8);
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195E39314);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 240) + 8) + 296);
  v5 = *(_QWORD *)(v4 + 696);
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 + 192), a2);
  v7 = v6;
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 + 1, v6));
  WebCore::InspectorDOMStorageAgent::storageId((WebCore::InspectorDOMStorageAgent *)v6, (const WebCore::SecurityOrigin *)(*(_QWORD *)(v5 + 256) == (_QWORD)this), (uint64_t *)&v17);
  v9 = v17;
  result = WTF::JSONImpl::Value::toJSONString(v17);
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      result = WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v9;
  }
  do
  {
    v12 = __ldaxr(v7);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v7));
  if (!v13)
  {
    atomic_store(1u, v7);
    v14 = (WTF::StringImpl *)*((_QWORD *)v7 + 6);
    *((_QWORD *)v7 + 6) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = (WTF::StringImpl *)*((_QWORD *)v7 + 5);
    *((_QWORD *)v7 + 5) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v7[8];
    if ((_DWORD)v16 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_10[v16])(&v18, v7 + 2);
    v7[8] = -1;
    return WTF::fastFree((WTF *)v7, v11);
  }
  return result;
}

_DWORD *WebCore::InspectorDOMStorageAgent::storageId@<X0>(WebCore::InspectorDOMStorageAgent *this@<X0>, const WebCore::SecurityOrigin *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *result;
  WTF::StringImpl *v12;
  _DWORD *v13;

  WTF::JSONImpl::Object::create(this);
  WebCore::SecurityOriginData::toString((WebCore::InspectorDOMStorageAgent *)((char *)this + 8), &v12);
  v6 = Inspector::Protocol::DOMStorage::StorageId::Builder<0>::setSecurityOrigin((uint64_t *)&v13, (WTF::JSONImpl::Value *)&v12);
  v7 = Inspector::Protocol::DOMStorage::StorageId::Builder<1>::setIsLocalStorage(v6, a2);
  v9 = *v7;
  *v7 = 0;
  *a3 = v9;
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t *Inspector::Protocol::DOMStorage::StorageId::Builder<0>::setSecurityOrigin(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::DOMStorage::StorageId::Builder<1>::setIsLocalStorage(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _BYTE v18[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v16, (const WTF::StringImpl *)&v17, (uint64_t)v18);
  if (v18[16])
  {
    v6 = (uint64_t *)(v4 + 24);
    v7 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v4 + 32))
    {
      v13 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v16);
      v7 = *(unsigned int *)(v4 + 36);
      v14 = *(_QWORD *)(v4 + 24);
      v15 = *v13;
      if (*v13)
        *v15 += 2;
      *(_QWORD *)(v14 + 8 * v7) = v15;
    }
    else
    {
      v8 = *v6;
      v9 = v16;
      if (v16)
        *(_DWORD *)v16 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(v4 + 36) = v7 + 1;
  }
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  return a1;
}

_DWORD *WebCore::InspectorDOMStorageAgent::didDispatchDOMStorageEvent(int a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, int a5, WebCore::InspectorDOMStorageAgent *this)
{
  _DWORD *result;
  _DWORD *v10;

  WebCore::InspectorDOMStorageAgent::storageId(this, (const WebCore::SecurityOrigin *)(a5 == 1), (uint64_t *)&v10);
  if (*a2)
  {
    if (*a4)
    {
      if (*a3)
        Inspector::DOMStorageFrontendDispatcher::domStorageItemUpdated();
      else
        Inspector::DOMStorageFrontendDispatcher::domStorageItemAdded();
    }
    else
    {
      Inspector::DOMStorageFrontendDispatcher::domStorageItemRemoved();
    }
  }
  else
  {
    Inspector::DOMStorageFrontendDispatcher::domStorageItemsCleared();
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

WebCore::InspectorPageAgent *WebCore::InspectorPageAgent::findFrameWithSecurityOrigin(WebCore::InspectorPageAgent *this, WebCore::Page *a2, const WTF::String *a3)
{
  WebCore::InspectorPageAgent *v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  char v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v12;

  if (this)
  {
    while (1)
    {
LABEL_2:
      v4 = this;
      if (!*((_BYTE *)this + 144))
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*((_QWORD *)this + 37) + 192), a2);
        WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v5 + 8), &v12);
        v7 = WTF::equal(v12, *(const WTF::StringImpl **)a2, v6);
        v8 = v12;
        v12 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
          {
            WTF::StringImpl::destroy(v8, a2);
            if ((v7 & 1) != 0)
              return v4;
            goto LABEL_7;
          }
          *(_DWORD *)v8 -= 2;
        }
        if ((v7 & 1) != 0)
          return v4;
      }
LABEL_7:
      this = (WebCore::InspectorPageAgent *)*((_QWORD *)v4 + 11);
      if (!this)
      {
        v9 = *(_QWORD *)(*((_QWORD *)v4 + 6) + 8);
        if (!v9)
          return 0;
        this = (WebCore::InspectorPageAgent *)*((_QWORD *)v4 + 9);
        if (!this)
        {
          while (1)
          {
            v10 = *(_QWORD *)(v9 + 56);
            if (!v10)
              return 0;
            v9 = *(_QWORD *)(v10 + 8);
            if (!v9)
              return 0;
            this = *(WebCore::InspectorPageAgent **)(v9 + 72);
            if (this)
              goto LABEL_2;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::InspectorDatabaseAgent::didCommitLoad(WebCore::InspectorDatabaseAgent *this, WTF::StringImpl *a2)
{
  return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::clear((uint64_t)this + 56, a2);
}

uint64_t WebCore::InspectorDatabaseAgent::didOpenDatabase(WebCore::InspectorDatabaseAgent *this, WebCore::Database *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD **v24;
  uint64_t v25;
  unsigned int v26;
  WTF::StringImpl **v27;
  WTF::String *v28;
  WTF::StringImpl *v29;
  const WTF::StringImpl *v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  WebCore::InspectorDatabaseAgent *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  unsigned int v59;
  WebCore::InspectorDatabaseResource **v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  WTF::StringImpl *v64;
  WebCore::InspectorDatabaseResource *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WebCore::InspectorDatabaseResource *v68;
  WebCore::InspectorDatabaseResource *v69;
  WTF::StringImpl *v70;
  WebCore::InspectorDatabaseResource *v71;
  WTF *v72;
  void *v73;
  WTF *v74;
  void *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  WebCore::InspectorDatabaseResource *v81;
  WebCore::InspectorDatabaseResource *v82;
  WTF::StringImpl *v83;
  WTF *v84;
  void *v85;
  WTF *v86;
  void *v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  char v101;
  _DWORD *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WebCore::InspectorDatabaseResource *v105;
  unsigned int v106;
  WTF *v107;
  uint64_t v108;
  WebCore::InspectorDatabaseResource **v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WebCore::InspectorDatabaseResource *v113;
  int i;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  unsigned int v119;
  int v120;
  WTF *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  WTF *v125;
  void *v126;
  WTF *v127;
  void *v128;
  _QWORD *v129;
  WTF *v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  uint64_t v133;
  WebCore::InspectorDatabaseAgent *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137[3];
  int v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  WTF::String::isolatedCopy();
  v134 = this;
  if (*((_DWORD *)this + 17))
  {
    v5 = *((unsigned int *)this + 16);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      v7 = (_QWORD *)*((_QWORD *)this + 7);
      while (!*v7)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_19;
      }
    }
    else
    {
      v7 = (_QWORD *)*((_QWORD *)this + 7);
    }
    v8 = *((_QWORD *)this + 7) + 16 * v5;
    if (v7 != (_QWORD *)v8)
    {
LABEL_9:
      WTF::String::isolatedCopy();
      v10 = WTF::equal(v137[0], v136, v9);
      v11 = v137[0];
      v137[0] = 0;
      if (!v11)
        goto LABEL_12;
      if (*(_DWORD *)v11 != 2)
      {
        *(_DWORD *)v11 -= 2;
LABEL_12:
        if (!v10)
          goto LABEL_13;
        goto LABEL_18;
      }
      WTF::StringImpl::destroy(v11, v4);
      if (v10)
      {
LABEL_18:
        v12 = v7[1];
        goto LABEL_20;
      }
LABEL_13:
      while (1)
      {
        v7 += 2;
        if (v7 == (_QWORD *)v8)
          break;
        if (*v7)
        {
          v12 = 0;
          if (v7 != (_QWORD *)v8)
            goto LABEL_9;
          goto LABEL_20;
        }
      }
    }
  }
LABEL_19:
  v12 = 0;
LABEL_20:
  v13 = v136;
  v136 = 0;
  if (!v13)
    goto LABEL_23;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_23:
    if (v12)
      goto LABEL_24;
    goto LABEL_30;
  }
  v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v4);
  if (v12)
  {
    do
LABEL_24:
      v14 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v14 + 1, (unsigned int *)a2));
    result = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(v12 + 8) = a2;
    if (result)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)result));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)result);
        WebCore::Database::~Database((WebCore::Database *)result);
        return WTF::fastFree(v18, v19);
      }
    }
    return result;
  }
LABEL_30:
  if (WTF::isMainThread(v13))
  {
    v20 = *((_QWORD *)a2 + 2);
    LOBYTE(v137[0]) = 0;
    v138 = -1;
    v21 = *(unsigned int *)(v20 + 32);
    if ((_DWORD)v21 != -1)
      goto LABEL_37;
    goto LABEL_163;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 32) + 8);
  v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v23)
    v23 = WTF::Thread::initializeCurrentTLS(0);
  if (v22 != v23)
    goto LABEL_164;
  v20 = *((_QWORD *)a2 + 3);
  LOBYTE(v137[0]) = 0;
  v138 = -1;
  v21 = *(unsigned int *)(v20 + 32);
  if ((_DWORD)v21 == -1)
  {
LABEL_163:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_164:
    result = 777;
    __break(0xC471u);
    return result;
  }
LABEL_37:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v21])(&v136, v137, v20 + 8);
  v138 = v21;
  v136 = (WTF::StringImpl *)&v135;
  v24 = (_DWORD **)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33F0460[v21])(&v136, v137);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v25 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)v25 = 1;
  do
    v26 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v26 + 1, (unsigned int *)a2));
  *(_QWORD *)(v25 + 8) = a2;
  v129 = (_QWORD *)v25;
  v27 = (WTF::StringImpl **)(v25 + 16);
  v28 = (WTF::String *)WebCore::nextUnusedId++;
  WTF::String::number(v28);
  v31 = *v24;
  if (*v24)
    *v31 += 2;
  v129[3] = v31;
  v32 = v136;
  v33 = v134;
  if (v136)
    *(_DWORD *)v136 += 2;
  v129[4] = v32;
  v34 = v135;
  if (v135)
  {
    v35 = *(_DWORD *)v135;
    *(_DWORD *)v135 += 2;
    v129[5] = v34;
    v135 = 0;
    if (v35)
    {
      *(_DWORD *)v34 = v35;
    }
    else
    {
      WTF::StringImpl::destroy(v34, v29);
      v33 = v134;
    }
  }
  else
  {
    v129[5] = 0;
  }
  v36 = v136;
  v136 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::destroy(v36, v29);
      v33 = v134;
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  if (v138 != -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_10[v138])(&v136, v137);
    v33 = v134;
  }
  v37 = *v27;
  if (*v27)
    *(_DWORD *)v37 += 2;
  v39 = *((_DWORD *)v33 + 16);
  v38 = *((unsigned int *)v33 + 17);
  v131 = v37;
  if (10 * v38 >= 9 * (unint64_t)v39 || v39 <= 2 * (int)v38 && *((_BYTE *)v33 + 76))
  {
    v132 = *((unsigned int *)v33 + 16);
    if (v39)
      v40 = 2 * v39;
    else
      v40 = 8;
    v41 = (WTF *)*((_QWORD *)v33 + 7);
    v42 = WTF::fastZeroedMalloc((WTF *)(16 * v40));
    v33 = v134;
    *((_QWORD *)v134 + 7) = v42;
    *((_DWORD *)v134 + 16) = v40;
    v43 = v132;
    v44 = (~(v42 << 32) + v42) ^ ((unint64_t)(~(v42 << 32) + v42) >> 22);
    v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
    v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
    *((_DWORD *)v134 + 18) = (v46 >> 31) ^ v46;
    *((_BYTE *)v134 + 76) = 0;
    if ((_DWORD)v132)
    {
      v47 = 0;
      v130 = v41;
      do
      {
        v48 = (WTF::StringImpl **)((char *)v41 + 16 * v47);
        v49 = *v48;
        if (*v48)
        {
          v50 = *((_DWORD *)v33 + 16);
          v51 = *((_DWORD *)v33 + 18);
          v52 = *((_DWORD *)v49 + 4);
          v133 = v47;
          if (v52 < 0x100)
          {
            v53 = WTF::StringImpl::hashSlowCase(v49);
            v33 = v134;
          }
          else
          {
            v53 = v52 >> 8;
          }
          v54 = v50 - 1;
          v55 = (v53 ^ v51) & (v50 - 1);
          v56 = *((_QWORD *)v33 + 7);
          v57 = (WTF::StringImpl **)(v56 + 16 * v55);
          v58 = *v57;
          if (*v57)
          {
            v59 = 0;
            v60 = (WebCore::InspectorDatabaseResource **)((char *)v41 + 16 * v133 + 8);
            do
            {
              v61 = *((_DWORD *)v58 + 4);
              if (v61 < 0x100)
              {
                v62 = WTF::StringImpl::hashSlowCase(v58);
                v33 = v134;
              }
              else
              {
                v62 = v61 >> 8;
              }
              v63 = (v55 + v50 - ((v62 ^ v51) & v54)) & v54;
              if (v59 > v63)
              {
                v64 = *v48;
                v65 = *v60;
                *v48 = 0;
                v48[1] = 0;
                v66 = *v57;
                *v57 = 0;
                v67 = *v48;
                *v48 = v66;
                if (v67)
                {
                  if (*(_DWORD *)v67 == 2)
                  {
                    WTF::StringImpl::destroy(v67, v29);
                    v33 = v134;
                  }
                  else
                  {
                    *(_DWORD *)v67 -= 2;
                  }
                }
                v68 = v57[1];
                v57[1] = 0;
                v69 = *v60;
                *v60 = v68;
                if (v69)
                {
                  if (*(_DWORD *)v69 == 1)
                  {
                    WebCore::InspectorDatabaseResource::~InspectorDatabaseResource(v69, v29);
                    WTF::fastFree(v72, v73);
                    v33 = v134;
                  }
                  else
                  {
                    --*(_DWORD *)v69;
                  }
                }
                v70 = *v57;
                *v57 = v64;
                if (v70)
                {
                  if (*(_DWORD *)v70 == 2)
                  {
                    WTF::StringImpl::destroy(v70, v29);
                    v33 = v134;
                  }
                  else
                  {
                    *(_DWORD *)v70 -= 2;
                  }
                }
                v71 = v57[1];
                v57[1] = v65;
                if (v71)
                {
                  if (*(_DWORD *)v71 == 1)
                  {
                    WebCore::InspectorDatabaseResource::~InspectorDatabaseResource(v71, v29);
                    WTF::fastFree(v74, v75);
                    v33 = v134;
                  }
                  else
                  {
                    --*(_DWORD *)v71;
                  }
                }
                v59 = v63;
              }
              v55 = ((_DWORD)v55 + 1) & v54;
              ++v59;
              v56 = *((_QWORD *)v33 + 7);
              v57 = (WTF::StringImpl **)(v56 + 16 * v55);
              v58 = *v57;
            }
            while (*v57);
            v43 = v132;
            v41 = v130;
          }
          v76 = *v48;
          *v48 = 0;
          v77 = *v57;
          *v57 = v76;
          v47 = v133;
          if (v77)
          {
            if (*(_DWORD *)v77 == 2)
            {
              WTF::StringImpl::destroy(v77, v29);
              v33 = v134;
            }
            else
            {
              *(_DWORD *)v77 -= 2;
            }
          }
          v78 = v56 + 16 * v55;
          v79 = (char *)v41 + 16 * v133;
          v80 = *((_QWORD *)v79 + 1);
          *((_QWORD *)v79 + 1) = 0;
          v81 = *(WebCore::InspectorDatabaseResource **)(v78 + 8);
          *(_QWORD *)(v78 + 8) = v80;
          if (v81)
          {
            if (*(_DWORD *)v81 == 1)
            {
              WebCore::InspectorDatabaseResource::~InspectorDatabaseResource(v81, v29);
              WTF::fastFree(v86, v87);
              v33 = v134;
            }
            else
            {
              --*(_DWORD *)v81;
            }
          }
        }
        v82 = v48[1];
        v48[1] = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 1)
          {
            WebCore::InspectorDatabaseResource::~InspectorDatabaseResource(v82, v29);
            WTF::fastFree(v84, v85);
            v33 = v134;
          }
          else
          {
            --*(_DWORD *)v82;
          }
        }
        v83 = *v48;
        *v48 = 0;
        if (v83)
        {
          if (*(_DWORD *)v83 == 2)
          {
            WTF::StringImpl::destroy(v83, v29);
            v33 = v134;
          }
          else
          {
            *(_DWORD *)v83 -= 2;
          }
        }
        ++v47;
      }
      while (v47 != v43);
    }
    else if (!v41)
    {
      v39 = 8;
      goto LABEL_110;
    }
    WTF::fastFree(v41, v29);
    v33 = v134;
    v39 = *((_DWORD *)v134 + 16);
LABEL_110:
    v37 = v131;
  }
  v88 = v39 - 1;
  v89 = *((_DWORD *)v33 + 18);
  v90 = *((_DWORD *)v37 + 4);
  if (v90 < 0x100)
  {
    v92 = WTF::StringImpl::hashSlowCase(v37);
    v33 = v134;
    v91 = v92;
  }
  else
  {
    v91 = v90 >> 8;
  }
  v93 = (v91 ^ v89) & v88;
  v94 = *((_QWORD *)v33 + 7);
  v95 = v94 + 16 * v93;
  v96 = *(WTF **)v95;
  if (*(_QWORD *)v95)
  {
    v97 = 0;
    while (1)
    {
      v98 = *((_DWORD *)v96 + 4);
      if (v98 < 0x100)
      {
        v99 = WTF::StringImpl::hashSlowCase(v96);
        v33 = v134;
      }
      else
      {
        v99 = v98 >> 8;
      }
      v100 = (v93 + v39 - ((v99 ^ v89) & v88)) & v88;
      if (v97 > v100)
        break;
      if (v99 == v91)
      {
        v101 = WTF::equal(*(WTF **)v95, v131, v30);
        v33 = v134;
        if ((v101 & 1) != 0)
        {
          if (*(_DWORD *)v131 == 2)
            WTF::StringImpl::destroy(v131, v29);
          else
            *(_DWORD *)v131 -= 2;
          goto LABEL_148;
        }
      }
      v94 = *((_QWORD *)v33 + 7);
      v93 = ((_DWORD)v93 + 1) & v88;
      ++v97;
      v95 = v94 + 16 * v93;
      v96 = *(WTF **)v95;
      if (!*(_QWORD *)v95)
      {
        v102 = v129;
        v103 = v131;
        if (v97 >= 0x80)
          *((_BYTE *)v33 + 76) = 1;
        goto LABEL_126;
      }
    }
    v106 = v39;
    if (v97 >= 0x80)
      *((_BYTE *)v33 + 76) = 1;
    v107 = *(WTF **)v95;
    *(_QWORD *)v95 = 0;
    v108 = v94 + 16 * v93;
    v111 = *(_QWORD *)(v108 + 8);
    v109 = (WebCore::InspectorDatabaseResource **)(v108 + 8);
    v110 = v111;
    *v109 = 0;
    v112 = *(WTF::StringImpl **)v95;
    *(_QWORD *)v95 = 0;
    if (v112)
    {
      if (*(_DWORD *)v112 == 2)
      {
        WTF::StringImpl::destroy(v112, v29);
        v33 = v134;
      }
      else
      {
        *(_DWORD *)v112 -= 2;
      }
    }
    *(_QWORD *)v95 = v131;
    *(_QWORD *)(v95 + 8) = 0;
    ++*(_DWORD *)v129;
    v113 = *v109;
    *v109 = (WebCore::InspectorDatabaseResource *)v129;
    if (v113)
    {
      if (*(_DWORD *)v113 == 1)
      {
        WebCore::InspectorDatabaseResource::~InspectorDatabaseResource(v113, v29);
        WTF::fastFree(v127, v128);
        v33 = v134;
      }
      else
      {
        --*(_DWORD *)v113;
      }
    }
    for (i = v93 + 1; ; i = v115 + 1)
    {
      v115 = i & v88;
      v116 = *((_QWORD *)v33 + 7);
      v117 = v116 + 16 * v115;
      v118 = *(WTF::StringImpl **)v117;
      if (!*(_QWORD *)v117)
        break;
      v119 = *((_DWORD *)v118 + 4);
      if (v119 < 0x100)
      {
        v120 = WTF::StringImpl::hashSlowCase(v118);
        v33 = v134;
      }
      else
      {
        v120 = v119 >> 8;
      }
      if (++v100 > (((_DWORD)v115 + v106 - ((v120 ^ v89) & v88)) & v88))
      {
        v121 = *(WTF **)v117;
        v122 = *(_QWORD *)(v117 + 8);
        *(_QWORD *)v117 = v107;
        *(_QWORD *)(v117 + 8) = v110;
        v110 = v122;
        v107 = v121;
        v100 = (v115 + v106 - ((v120 ^ v89) & v88)) & v88;
      }
    }
    *(_QWORD *)v117 = v107;
    v123 = v116 + 16 * v115;
    v105 = *(WebCore::InspectorDatabaseResource **)(v123 + 8);
    *(_QWORD *)(v123 + 8) = v110;
    if (!v105)
      goto LABEL_147;
  }
  else
  {
    v102 = v129;
    v103 = v131;
LABEL_126:
    *(_QWORD *)v95 = v103;
    v104 = v94 + 16 * v93;
    ++*v102;
    v105 = *(WebCore::InspectorDatabaseResource **)(v104 + 8);
    *(_QWORD *)(v104 + 8) = v102;
    if (!v105)
      goto LABEL_147;
  }
  if (*(_DWORD *)v105 == 1)
  {
    WebCore::InspectorDatabaseResource::~InspectorDatabaseResource(v105, v29);
    WTF::fastFree(v125, v126);
    v33 = v134;
  }
  else
  {
    --*(_DWORD *)v105;
  }
LABEL_147:
  ++*((_DWORD *)v33 + 17);
LABEL_148:
  result = (uint64_t)WebCore::InspectorDatabaseResource::bind((uint64_t)v129);
  if (*(_DWORD *)v129 == 1)
  {
    WebCore::InspectorDatabaseResource::~InspectorDatabaseResource((WebCore::InspectorDatabaseResource *)v129, v124);
    return WTF::fastFree(v18, v19);
  }
  --*(_DWORD *)v129;
  return result;
}

void WebCore::InspectorDatabaseAgent::~InspectorDatabaseAgent(WebCore::InspectorDatabaseAgent *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  WebCore::InspectorDatabaseResource **v5;
  WebCore::InspectorDatabaseResource *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  void *v9;
  _DWORD *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = (WTF *)*((_QWORD *)this + 7);
  if (v3)
  {
    v4 = *((unsigned int *)this + 16);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::InspectorDatabaseResource **)((char *)v3 + 8);
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 1)
          {
            WebCore::InspectorDatabaseResource::~InspectorDatabaseResource(v6, a2);
            WTF::fastFree(v8, v9);
          }
          else
          {
            --*(_DWORD *)v6;
          }
        }
        v7 = *(v5 - 1);
        *(v5 - 1) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree(v3, a2);
  }
  v10 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
    WTF::fastFree(v11, a2);
  Inspector::DatabaseBackendDispatcherHandler::~DatabaseBackendDispatcherHandler((WebCore::InspectorDatabaseAgent *)((char *)this + 32));
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorDatabaseAgent::~InspectorDatabaseAgent(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::InspectorDatabaseAgent::~InspectorDatabaseAgent(WebCore::InspectorDatabaseAgent *this, WTF::StringImpl *a2)
{
  WebCore::InspectorDatabaseAgent::~InspectorDatabaseAgent((WebCore::InspectorDatabaseAgent *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorDatabaseAgent::~InspectorDatabaseAgent((WebCore::InspectorDatabaseAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::InspectorDatabaseAgent::willDestroyFrontendAndBackend(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v2 + 120) == a1)
  {
    *(_QWORD *)(v2 + 120) = 0;
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::clear(a1 + 56, a2);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (uint64_t)v5;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        return WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::InspectorDatabaseAgent::disable@<X0>(WebCore::InspectorDatabaseAgent *this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *((_QWORD *)this + 2);
  if (*(WebCore::InspectorDatabaseAgent **)(v4 + 120) == this)
  {
    *(_QWORD *)(v4 + 120) = 0;
    result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::clear((uint64_t)this + 56, a2);
    v6 = 0;
    *a3 = 0;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 1;
  }
  a3[8] = v6;
  return result;
}

unsigned int *WebCore::InspectorDatabaseAgent::enable@<X0>(WebCore::InspectorDatabaseAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int *result;
  void *v7;
  WTF *v8;
  uint64_t v9;
  unsigned int *v10;
  WTF *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  void *v15;
  char v16;
  WTF *v17;
  int v18;
  unsigned int v19;

  v3 = *((_QWORD *)this + 2);
  if (*(WebCore::InspectorDatabaseAgent **)(v3 + 120) == this)
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16 = 1;
  }
  else
  {
    *(_QWORD *)(v3 + 120) = this;
    v5 = WebCore::staticTracker;
    if (!WebCore::staticTracker)
    {
      v5 = WTF::fastMalloc((WTF *)0x88);
      *(_BYTE *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      *(_DWORD *)(v5 + 40) = -1;
      *(_WORD *)(v5 + 44) = 0;
      *(_BYTE *)(v5 + 46) = 0;
      *(_QWORD *)(v5 + 48) = 0;
      *(_BYTE *)(v5 + 56) = 0;
      *(_QWORD *)(v5 + 64) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_DWORD *)(v5 + 76) = 1;
      *(_QWORD *)(v5 + 80) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      WTF::String::isolatedCopy();
      *(_OWORD *)(v5 + 120) = 0u;
      *(_OWORD *)(v5 + 104) = 0u;
      WebCore::staticTracker = v5;
    }
    result = (unsigned int *)WebCore::DatabaseTracker::openDatabases(v5, (uint64_t)&v17);
    v8 = v17;
    if (v19)
    {
      v9 = 8 * v19;
      do
      {
        v10 = *(unsigned int **)v8;
        v8 = (WTF *)((char *)v8 + 8);
        result = (unsigned int *)WebCore::InspectorDatabaseAgent::didOpenDatabase(this, (WebCore::Database *)v10);
        v9 -= 8;
      }
      while (v9);
      v8 = v17;
      if (v19)
      {
        v11 = (WTF *)((char *)v17 + 8 * v19);
        do
        {
          result = *(unsigned int **)v8;
          *(_QWORD *)v8 = 0;
          if (result)
          {
            do
            {
              v12 = __ldaxr(result);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, result));
            if (!v13)
            {
              atomic_store(1u, result);
              WebCore::Database::~Database((WebCore::Database *)result);
              result = (unsigned int *)WTF::fastFree(v14, v15);
            }
          }
          v8 = (WTF *)((char *)v8 + 8);
        }
        while (v8 != v11);
        v8 = v17;
      }
    }
    if (v8)
    {
      v17 = 0;
      v18 = 0;
      result = (unsigned int *)WTF::fastFree(v8, v7);
    }
    v16 = 0;
    *a2 = 0;
  }
  a2[8] = v16;
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::InspectorDatabaseAgent::enable@<X0>(WebCore::InspectorDatabaseAgent *this@<X0>, _BYTE *a2@<X8>)
{
  return WebCore::InspectorDatabaseAgent::enable((WebCore::InspectorDatabaseAgent *)((char *)this - 32), a2);
}

uint64_t `non-virtual thunk to'WebCore::InspectorDatabaseAgent::disable@<X0>(WebCore::InspectorDatabaseAgent *this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *((_QWORD *)this - 2);
  if (*(WebCore::InspectorDatabaseAgent **)(v4 + 120) == (WebCore::InspectorDatabaseAgent *)((char *)this - 32))
  {
    *(_QWORD *)(v4 + 120) = 0;
    result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::clear((uint64_t)this + 24, a2);
    v6 = 0;
    *a3 = 0;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 1;
  }
  a3[8] = v6;
  return result;
}

WTF::StringImpl *WebCore::InspectorDatabaseAgent::getDatabaseTableNames@<X0>(WebCore::InspectorDatabaseAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  int v5;
  uint64_t v8;
  const WTF::StringImpl *v9;
  const WTF::String *v10;
  WTF::JSONImpl::Value *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  WTF::JSONImpl::Value *v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;

  if (*(WebCore::InspectorDatabaseAgent **)(*((_QWORD *)this + 2) + 120) == this)
  {
    v8 = WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v8);
    result = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 7, a2, v9);
    if (!result)
      goto LABEL_18;
    result = (WTF::StringImpl *)*((_QWORD *)result + 1);
    if (!result)
      goto LABEL_18;
    result = (WTF::StringImpl *)WebCore::Database::tableNames(result, &v18);
    v11 = v18;
    if (!v20)
      goto LABEL_17;
    v12 = 8 * v20;
    do
    {
      WTF::JSONImpl::Value::create(v11, v10);
      v13 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v13 == *(_DWORD *)(v8 + 24))
      {
        v14 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 16), v13 + 1, (unint64_t)&v21);
        v13 = *(unsigned int *)(v8 + 28);
        v15 = *(_QWORD *)(v8 + 16);
        v16 = *(_QWORD **)v14;
        *(_QWORD *)v14 = 0;
      }
      else
      {
        v15 = *(_QWORD *)(v8 + 16);
        v16 = v21;
        v21 = 0;
      }
      *(_QWORD *)(v15 + 8 * v13) = v16;
      *(_DWORD *)(v8 + 28) = v13 + 1;
      result = (WTF::StringImpl *)v21;
      v21 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)result;
      }
      v11 = (WTF::JSONImpl::Value *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
    v11 = v18;
    if (v20)
    {
      v17 = 8 * v20;
      do
      {
        result = *(WTF::StringImpl **)v11;
        *(_QWORD *)v11 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
          else
            *(_DWORD *)result -= 2;
        }
        v11 = (WTF::JSONImpl::Value *)((char *)v11 + 8);
        v17 -= 8;
      }
      while (v17);
      v11 = v18;
      if (!v18)
        goto LABEL_18;
    }
    else
    {
LABEL_17:
      if (!v11)
      {
LABEL_18:
        v5 = 0;
        *(_QWORD *)a3 = v8;
        goto LABEL_19;
      }
    }
    v18 = 0;
    v19 = 0;
    result = (WTF::StringImpl *)WTF::fastFree(v11, v10);
    goto LABEL_18;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = 1;
LABEL_19:
  *(_DWORD *)(a3 + 8) = v5;
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorDatabaseAgent::getDatabaseTableNames@<X0>(WebCore::InspectorDatabaseAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorDatabaseAgent::getDatabaseTableNames((WebCore::InspectorDatabaseAgent *)((char *)this - 32), a2, a3);
}

unsigned int *WebCore::InspectorDatabaseAgent::executeSQL(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  Inspector::BackendDispatcher::CallbackBase *v5;
  WTF *v7;
  uint64_t v8;
  WebCore::ScriptExecutionContext *v9;
  Inspector::BackendDispatcher::CallbackBase *v10;
  uint64_t v11;
  _DWORD *v12;
  WebCore::ScriptExecutionContext *v13;
  Inspector::BackendDispatcher::CallbackBase *v14;
  uint64_t v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *result;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  unsigned int *v29;
  WTF::StringImpl *v30;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 120) != a1)
  {
    v5 = *a4;
    goto LABEL_21;
  }
  v7 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 56), a2, a3);
  if (!v7 || (v8 = *((_QWORD *)v7 + 1)) == 0)
  {
    v5 = *a4;
LABEL_21:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v5, (const WTF::String *)&v30);
    result = (unsigned int *)v30;
    v30 = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v27);
      else
        *result -= 2;
    }
    return result;
  }
  v9 = (WebCore::ScriptExecutionContext *)(*(_QWORD *)(v8 + 8) + 192);
  v10 = *a4;
  ++*((_DWORD *)*a4 + 2);
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v11 + 16) = 1;
  *(_QWORD *)v11 = &off_1E33A18C0;
  *(_QWORD *)(v11 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v11, v9);
  *(_QWORD *)v11 = &off_1E33F0490;
  v12 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v12 += 2;
  *(_QWORD *)(v11 + 24) = v12;
  *(_QWORD *)(v11 + 32) = v10;
  v30 = (WTF::StringImpl *)v11;
  v13 = (WebCore::ScriptExecutionContext *)(*(_QWORD *)(v8 + 8) + 192);
  v14 = *a4;
  ++*((_DWORD *)*a4 + 2);
  v15 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v15 + 16) = 1;
  *(_QWORD *)v15 = &off_1E33A18C0;
  *(_QWORD *)(v15 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v15, v13);
  *(_QWORD *)v15 = &off_1E33F0598;
  *(_QWORD *)(v15 + 24) = v14;
  v29 = (unsigned int *)v15;
  v16 = (WebCore::ScriptExecutionContext *)(*(_QWORD *)(v8 + 8) + 192);
  v17 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v17 + 16) = 1;
  *(_QWORD *)v17 = &off_1E33A18C0;
  *(_QWORD *)(v17 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v17, v16);
  *(_QWORD *)v17 = &off_1E33F05E0;
  v28 = (_DWORD *)v17;
  WebCore::Database::transaction(v8, (uint64_t *)&v30, (uint64_t *)&v29, (uint64_t *)&v28);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (v18[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
    else
      --v18[4];
  }
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    v20 = v19 + 4;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
    }
  }
  result = (unsigned int *)v30;
  v30 = 0;
  if (result)
  {
    v24 = result + 4;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, result + 4);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::InspectorDatabaseAgent::executeSQL(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  return WebCore::InspectorDatabaseAgent::executeSQL(a1 - 32, a2, a3, a4);
}

void WebCore::InspectorIndexedDBAgent::~InspectorIndexedDBAgent(WebCore::InspectorIndexedDBAgent *this)
{
  _DWORD *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v2 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  Inspector::IndexedDBBackendDispatcherHandler::~IndexedDBBackendDispatcherHandler((WebCore::InspectorIndexedDBAgent *)((char *)this + 32));
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  _DWORD *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v2 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  Inspector::IndexedDBBackendDispatcherHandler::~IndexedDBBackendDispatcherHandler((WebCore::InspectorIndexedDBAgent *)((char *)this + 32));
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, v3);
}

void `non-virtual thunk to'WebCore::InspectorIndexedDBAgent::~InspectorIndexedDBAgent(WebCore::InspectorIndexedDBAgent *this)
{
  _DWORD *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  Inspector::IndexedDBBackendDispatcherHandler::~IndexedDBBackendDispatcherHandler(this);
  v4 = (WTF::StringImpl *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 4) = off_1E33EFC38;
  *((_QWORD *)this - 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = (WebCore::InspectorIndexedDBAgent *)((char *)this - 32);
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  Inspector::IndexedDBBackendDispatcherHandler::~IndexedDBBackendDispatcherHandler(this);
  v5 = (WTF::StringImpl *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 4) = off_1E33EFC38;
  *((_QWORD *)this - 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(v2, v4);
}

void WebCore::InspectorIndexedDBAgent::disable(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void WebCore::InspectorIndexedDBAgent::enable(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void `non-virtual thunk to'WebCore::InspectorIndexedDBAgent::enable(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void `non-virtual thunk to'WebCore::InspectorIndexedDBAgent::disable(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

uint64_t WebCore::InspectorIndexedDBAgent::requestDatabaseNames(uint64_t a1, WebCore::Page *a2, const WTF::String *a3)
{
  WebCore *FrameWithSecurityOrigin;
  Inspector::BackendDispatcher::CallbackBase *v5;
  uint64_t result;
  WebCore::Document *v7;
  WebCore::SecurityContext *v8;
  WebCore::IDBFactory **v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  WebCore::Document *v13;
  uint64_t v14;
  _QWORD *v15;

  FrameWithSecurityOrigin = WebCore::InspectorPageAgent::findFrameWithSecurityOrigin(*(WebCore::InspectorPageAgent **)(*(_QWORD *)(a1 + 56) + 160), a2, a3);
  v13 = 0;
  v14 = 0;
  result = WebCore::getDocumentAndIDBFactoryFromFrameOrSendFailure(FrameWithSecurityOrigin, (WebCore::LocalFrame *)&v14, &v13, *(WebCore::IDBFactory ***)a3, v5);
  if ((_DWORD)result)
  {
    v7 = v13;
    v8 = (WebCore::SecurityContext *)(v14 + 192);
    v9 = *(WebCore::IDBFactory ***)a3;
    *(_QWORD *)a3 = 0;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E33F09D8;
    v10[1] = v9;
    v11 = *((_QWORD *)v7 + 1);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = &off_1E33578E0;
    v12[1] = v10;
    v15 = v12;
    WebCore::IDBClient::IDBConnectionProxy::getAllDatabaseNamesAndVersions(v11, v8, (uint64_t *)&v15);
    result = (uint64_t)v15;
    v15 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL WebCore::getDocumentAndIDBFactoryFromFrameOrSendFailure(WebCore *this, WebCore::LocalFrame *a2, WebCore::Document **a3, WebCore::IDBFactory **a4, Inspector::BackendDispatcher::CallbackBase *a5)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  WebCore::DOMWindowIndexedDatabase *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;

  if (!this || (v6 = *((_QWORD *)this + 37)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = 1;
    Inspector::BackendDispatcher::CallbackBase::sendFailure((Inspector::BackendDispatcher::CallbackBase *)a4, (const WTF::String *)&v17);
    v8 = 0;
    goto LABEL_11;
  }
  v17 = *((_QWORD *)this + 37);
  v18 = 0;
  v7 = *(_QWORD *)(v6 + 696);
  v8 = v7 != 0;
  if (v7)
  {
    if (*(_BYTE *)(v7 + 56))
    {
      v12 = 0;
    }
    else
    {
      ++*(_DWORD *)(v7 + 24);
      v11 = (WebCore::DOMWindowIndexedDatabase *)WebCore::DOMWindowIndexedDatabase::from((WebCore::DOMWindowIndexedDatabase *)v7, a2);
      v12 = WebCore::DOMWindowIndexedDatabase::indexedDB(v11);
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      else
        --*(_DWORD *)(v7 + 24);
    }
    v13 = 0;
    v15 = v12;
    v16 = 0;
    *(_QWORD *)a2 = v6;
    *a3 = (WebCore::Document *)v12;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16 = 1;
    Inspector::BackendDispatcher::CallbackBase::sendFailure((Inspector::BackendDispatcher::CallbackBase *)a4, (const WTF::String *)&v15);
    v13 = v16;
    if (v16 == -1)
      goto LABEL_11;
  }
  ((void (*)(char *, uint64_t **))off_1E33F0618[v13])(&v19, &v15);
LABEL_11:
  if (v18 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E33F0628[v18])(&v15, &v17);
  return v8;
}

uint64_t `non-virtual thunk to'WebCore::InspectorIndexedDBAgent::requestDatabaseNames(uint64_t a1, WebCore::Page *a2, const WTF::String *a3)
{
  WebCore *FrameWithSecurityOrigin;
  Inspector::BackendDispatcher::CallbackBase *v5;
  uint64_t result;
  WebCore::Document *v7;
  WebCore::SecurityContext *v8;
  WebCore::IDBFactory **v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  WebCore::Document *v13;
  uint64_t v14;
  _QWORD *v15;

  FrameWithSecurityOrigin = WebCore::InspectorPageAgent::findFrameWithSecurityOrigin(*(WebCore::InspectorPageAgent **)(*(_QWORD *)(a1 + 24) + 160), a2, a3);
  v13 = 0;
  v14 = 0;
  result = WebCore::getDocumentAndIDBFactoryFromFrameOrSendFailure(FrameWithSecurityOrigin, (WebCore::LocalFrame *)&v14, &v13, *(WebCore::IDBFactory ***)a3, v5);
  if ((_DWORD)result)
  {
    v7 = v13;
    v8 = (WebCore::SecurityContext *)(v14 + 192);
    v9 = *(WebCore::IDBFactory ***)a3;
    *(_QWORD *)a3 = 0;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E33F09D8;
    v10[1] = v9;
    v11 = *((_QWORD *)v7 + 1);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = &off_1E33578E0;
    v12[1] = v10;
    v15 = v12;
    WebCore::IDBClient::IDBConnectionProxy::getAllDatabaseNamesAndVersions(v11, v8, (uint64_t *)&v15);
    result = (uint64_t)v15;
    v15 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorIndexedDBAgent::requestDatabase(uint64_t a1, WebCore::Page *a2, const WTF::String *a3, WebCore::IDBFactory ***a4)
{
  WebCore *FrameWithSecurityOrigin;
  Inspector::BackendDispatcher::CallbackBase *v7;
  WTF::StringImpl *result;
  WebCore::SecurityContext *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::IDBFactory **v12;
  WebCore::IDBClient::IDBConnectionProxy **v13;
  WTF::StringImpl *v14;
  const WTF::String *v15;
  WebCore::IDBClient::IDBConnectionProxy **v16;
  uint64_t v17;

  FrameWithSecurityOrigin = WebCore::InspectorPageAgent::findFrameWithSecurityOrigin(*(WebCore::InspectorPageAgent **)(*(_QWORD *)(a1 + 56) + 160), a2, a3);
  v16 = 0;
  v17 = 0;
  result = (WTF::StringImpl *)WebCore::getDocumentAndIDBFactoryFromFrameOrSendFailure(FrameWithSecurityOrigin, (WebCore::LocalFrame *)&v17, (WebCore::Document **)&v16, *a4, v7);
  if ((_DWORD)result)
  {
    v9 = (WebCore::SecurityContext *)(v17 + 192);
    if (v17)
      v10 = v17 + 192;
    else
      v10 = 0;
    v11 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v11 + 8) = 1;
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)v11 = off_1E33F0648;
    v12 = *a4;
    *a4 = 0;
    *(_QWORD *)(v11 + 24) = v12;
    v13 = v16;
    WebCore::SecurityContext::securityOrigin(v9, v14);
    if (*(_DWORD *)(v11 + 8) == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    else
      --*(_DWORD *)(v11 + 8);
  }
  return result;
}

WTF::StringImpl *WebCore::`anonymous namespace'::ExecutableWithDatabase::start(WebCore::_anonymous_namespace_::ExecutableWithDatabase *this, WebCore::IDBClient::IDBConnectionProxy **a2, WTF::StringImpl **a3, const WTF::String *a4)
{
  WebCore::ScriptExecutionContext *v5;
  WTF::StringImpl *v6;
  Inspector::BackendDispatcher::CallbackBase *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  Inspector::BackendDispatcher::CallbackBase *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  void *v17;
  WebCore::AbortSignal *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  bmalloc::api *v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebCore::AbortSignal *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[2];
  int v29;

  v5 = (WebCore::ScriptExecutionContext *)*((_QWORD *)this + 2);
  if (v5)
  {
    v6 = WebCore::IDBFactory::openInternal(a2, v5, a3, 0, (uint64_t)v28);
    if (v29)
    {
      v7 = (Inspector::BackendDispatcher::CallbackBase *)(*(uint64_t (**)(WebCore::_anonymous_namespace_::ExecutableWithDatabase *))(*(_QWORD *)this + 24))(this);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v7, (const WTF::String *)&v25);
      result = v25;
      v25 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      goto LABEL_25;
    }
    v12 = (unsigned int *)v28[0];
    v28[0] = 0;
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v13 || (v6 = *(WTF::StringImpl **)(v13 + 96)) == 0)
      v6 = (WTF::StringImpl *)WebCore::threadGlobalDataSlow(v6);
    v14 = *((_QWORD *)v6 + 5);
    if (!v14)
    {
      v24 = v6;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
      v14 = *((_QWORD *)v24 + 5);
    }
    v15 = (WTF::StringImpl **)(v14 + 2016);
    v16 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v16 + 16) = 1;
    *(_BYTE *)(v16 + 20) = 3;
    *(_QWORD *)v16 = off_1E33F06A8;
    *(_QWORD *)(v16 + 8) = 0;
    ++*((_DWORD *)this + 2);
    *(_QWORD *)(v16 + 24) = this;
    v26 = 0;
    v27 = (WTF::StringImpl *)v16;
    LOBYTE(v25) = 0;
    *(_WORD *)((char *)&v25 + 1) = 0;
    BYTE3(v25) = 0;
    WebCore::EventTarget::addEventListener((WebCore *)v12, v15, (uint64_t *)&v27, (unsigned __int8 *)&v25);
    v18 = v26;
    v26 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(v18, v17);
        bmalloc::api::isoDeallocate(v22, v23);
      }
      else
      {
        --*((_DWORD *)v18 + 6);
      }
    }
    result = v27;
    v27 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
      {
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        if (v12)
          goto LABEL_21;
        goto LABEL_25;
      }
      --*((_DWORD *)result + 4);
    }
    if (v12)
    {
LABEL_21:
      v19 = v12 + 15;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v12 + 15);
        result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v12 + 72))(v12);
      }
    }
LABEL_25:
    if (v29 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33F07C8[v29])(&v25, v28);
    return result;
  }
  v10 = (Inspector::BackendDispatcher::CallbackBase *)(*(uint64_t (**)(WebCore::_anonymous_namespace_::ExecutableWithDatabase *, WebCore::IDBClient::IDBConnectionProxy **, WTF::StringImpl **, const WTF::String *))(*(_QWORD *)this + 24))(this, a2, a3, a4);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)v28);
  result = v28[0];
  v28[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorIndexedDBAgent::requestDatabase(uint64_t a1, WebCore::Page *a2, const WTF::String *a3, WebCore::IDBFactory ***a4)
{
  return WebCore::InspectorIndexedDBAgent::requestDatabase(a1 - 32, a2, a3, a4);
}

void WebCore::InspectorIndexedDBAgent::requestData(uint64_t a1, WebCore::Page *a2, const WTF::String *a3, _DWORD **a4, _DWORD **a5, int a6, int a7, uint64_t *a8, WebCore::IDBFactory ***a9)
{
  WTF::StringImpl **v14;
  WebCore::InspectorPageAgent *FrameWithSecurityOrigin;
  Inspector::BackendDispatcher::CallbackBase *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unsigned int *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  WTF::StringImpl *v29;
  unsigned __int16 Boolean;
  WTF::StringImpl *v31;
  unsigned __int16 v32;
  WTF::StringImpl *v33;
  WebCore::IDBFactory **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl **v37;
  BOOL v38;
  Inspector::InjectedScriptManager *v39;
  WebCore::WindowProxy *v40;
  WebCore::DOMWrapperWorld *v41;
  WebCore::JSWindowProxy *v42;
  WebCore::SecurityContext *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WebCore::IDBFactory **v48;
  uint64_t v49;
  _DWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  JSC::HandleSet *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _DWORD *v60;
  _DWORD *v61;
  WebCore::IDBClient::IDBConnectionProxy **v62;
  const WTF::String *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  _DWORD **v71;
  WTF::StringImpl *v72;
  _DWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  WebCore::Document *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;

  v14 = (WTF::StringImpl **)a3;
  FrameWithSecurityOrigin = WebCore::InspectorPageAgent::findFrameWithSecurityOrigin(*(WebCore::InspectorPageAgent **)(*(_QWORD *)(a1 + 56) + 160), a2, a3);
  v77 = 0;
  v78 = 0;
  if (!WebCore::getDocumentAndIDBFactoryFromFrameOrSendFailure(FrameWithSecurityOrigin, (WebCore::LocalFrame *)&v78, &v77, *a9, v17))return;
  v18 = *a8;
  if (*a8)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::ObjectBase::getObject((WTF::JSONImpl::ObjectBase *)v18, (const WTF::String *)&v80);
    v20 = v80;
    v80 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v71 = a5;
    v21 = v72;
    if (v72)
    {
      v79 = v72;
      v72 = 0;
      v22 = (unsigned int *)v80;
      if (*(_DWORD *)v21 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v21;
      v23 = v72;
      v72 = 0;
      if (!v22)
      {
        if (v23)
        {
          if (*(_DWORD *)v23 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v23;
        }
        goto LABEL_45;
      }
      if (v23)
      {
        if (*(_DWORD *)v23 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v23;
      }
    }
    else
    {
      v22 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v79 = v72;
    WTF::JSONImpl::ObjectBase::getObject((WTF::JSONImpl::ObjectBase *)v18, (const WTF::String *)&v79);
    v25 = v79;
    v79 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    v70 = a6;
    v26 = v80;
    if (v80)
    {
      v79 = v80;
      v80 = 0;
      v28 = (unsigned int *)v72;
      if (*(_DWORD *)v26 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v26;
      v29 = v80;
      v80 = 0;
      if (!v28)
      {
        if (v29)
        {
          if (*(_DWORD *)v29 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v29;
        }
        goto LABEL_42;
      }
      if (v29)
      {
        if (*(_DWORD *)v29 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v29;
      }
    }
    else
    {
      v28 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Boolean = WTF::JSONImpl::ObjectBase::getBoolean((WTF::JSONImpl::ObjectBase *)v18, (const WTF::String *)&v72);
    v31 = v72;
    v72 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v27);
      else
        *(_DWORD *)v31 -= 2;
    }
    if (Boolean < 0x100u)
      goto LABEL_33;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v32 = WTF::JSONImpl::ObjectBase::getBoolean((WTF::JSONImpl::ObjectBase *)v18, (const WTF::String *)&v72);
    v33 = v72;
    v72 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v27);
      else
        *(_DWORD *)v33 -= 2;
    }
    if (v32 <= 0xFFu)
    {
LABEL_33:
      if (v28)
      {
        if (*v28 == 1)
        {
          v65 = v28[6];
          if ((_DWORD)v65 != -1)
            ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v65])(&v72, v28 + 2);
          v28[6] = -1;
          bmalloc::api::isoDeallocate((bmalloc::api *)v28, v27);
        }
        else
        {
          --*v28;
        }
      }
LABEL_42:
      if (v22)
      {
        if (*v22 == 1)
        {
          v64 = v22[6];
          if ((_DWORD)v64 != -1)
            ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v64])(&v72, v22 + 2);
          v22[6] = -1;
          bmalloc::api::isoDeallocate((bmalloc::api *)v22, v27);
        }
        else
        {
          --*v22;
        }
      }
LABEL_45:
      v34 = *a9;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::BackendDispatcher::CallbackBase::sendFailure((Inspector::BackendDispatcher::CallbackBase *)v34, (const WTF::String *)&v72);
      v36 = v72;
      v72 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v35);
        else
          *(_DWORD *)v36 -= 2;
      }
      return;
    }
    v69 = a7;
    v37 = v14;
    v38 = v32 != 0;
    v18 = bmalloc::api::isoAllocate();
    *(_QWORD *)v18 = 0;
    *(_DWORD *)(v18 + 8) = 1;
    *(_QWORD *)(v18 + 16) = v22;
    *(_QWORD *)(v18 + 24) = v28;
    *(_BYTE *)(v18 + 32) = Boolean != 0;
    *(_BYTE *)(v18 + 33) = v38;
    v14 = v37;
    a7 = v69;
    a6 = v70;
    a5 = v71;
  }
  v39 = *(Inspector::InjectedScriptManager **)(a1 + 40);
  v40 = (WebCore::WindowProxy *)*((_QWORD *)FrameWithSecurityOrigin + 14);
  {
    v41 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  }
  else
  {
    v68 = WebCore::g_commonVMOrNull;
    if (!WebCore::g_commonVMOrNull)
      v68 = WebCore::commonVMSlow(0);
    v41 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v68 + 41456) + 16);
    WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v41;
  }
  v42 = WebCore::WindowProxy::jsWindowProxy(v40, v41);
  Inspector::InjectedScriptManager::injectedScriptFor(v39, *((JSC::JSGlobalObject **)v42 + 2));
  v43 = (WebCore::SecurityContext *)(v78 + 192);
  if (v78)
    v44 = v78 + 192;
  else
    v44 = 0;
  v45 = WTF::fastMalloc((WTF *)0x68);
  v47 = v45;
  *(_DWORD *)(v45 + 8) = 1;
  *(_QWORD *)(v45 + 16) = v44;
  *(_QWORD *)v45 = off_1E33F07E8;
  v48 = *a9;
  *a9 = 0;
  v49 = MEMORY[0x1E0CC10E0] + 16;
  *(_QWORD *)(v45 + 24) = v48;
  *(_QWORD *)(v45 + 32) = v49;
  v50 = v73;
  if (v73)
    *v73 += 2;
  v52 = v74;
  v51 = v75;
  *(_QWORD *)(v45 + 40) = v50;
  *(_QWORD *)(v45 + 48) = v52;
  *(_QWORD *)(v45 + 56) = 0;
  if (v51)
  {
    v53 = *(JSC::HandleSet **)(((unint64_t)(v51 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v54 = (_QWORD *)*((_QWORD *)v53 + 5);
    if (!v54)
    {
      JSC::HandleSet::grow(v53);
      v54 = (_QWORD *)*((_QWORD *)v53 + 5);
    }
    *((_QWORD *)v53 + 5) = *v54;
    v54[2] = 0;
    v55 = v54 + 2;
    *v54 = 0;
    v54[1] = 0;
    *(_QWORD *)(v47 + 56) = v54 + 2;
    v56 = v75;
    if (v75)
      v56 = (_QWORD *)*v75;
    v57 = (unint64_t)(v55 - 2);
    if ((v56 != 0) != (*v55 != 0))
    {
      if (v56)
      {
        v58 = *(unint64_t **)((v57 & 0xFFFFFFFFFFFFF000) + 0x10);
        v59 = v58[3];
        v58 += 3;
        *(_QWORD *)v57 = v59;
        *(v55 - 1) = v58;
        *v58 = v57;
        *(_QWORD *)(v59 + 8) = v57;
      }
      else
      {
        v67 = *(_QWORD *)v57;
        v66 = (_QWORD *)*(v55 - 1);
        *v66 = *(_QWORD *)v57;
        *(_QWORD *)(v67 + 8) = v66;
        *(_QWORD *)v57 = 0;
        *(_QWORD *)(v57 + 8) = 0;
        v55 = *(_QWORD **)(v47 + 56);
      }
    }
    *v55 = v56;
  }
  *(_QWORD *)(v47 + 64) = v76;
  *(_QWORD *)(v47 + 32) = MEMORY[0x1E0CC10D8] + 16;
  v60 = *a4;
  if (*a4)
    *v60 += 2;
  *(_QWORD *)(v47 + 72) = v60;
  v61 = *a5;
  if (*a5)
    *v61 += 2;
  *(_QWORD *)(v47 + 80) = v61;
  *(_QWORD *)(v47 + 88) = v18;
  *(_DWORD *)(v47 + 96) = a6;
  *(_DWORD *)(v47 + 100) = a7;
  v62 = (WebCore::IDBClient::IDBConnectionProxy **)v77;
  WebCore::SecurityContext::securityOrigin(v43, v46);
  if (*(_DWORD *)(v47 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  else
    --*(_DWORD *)(v47 + 8);
  Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)&v72);
}

void `non-virtual thunk to'WebCore::InspectorIndexedDBAgent::requestData(uint64_t a1, WebCore::Page *a2, const WTF::String *a3, _DWORD **a4, _DWORD **a5, int a6, int a7, uint64_t *a8, WebCore::IDBFactory ***a9)
{
  WebCore::InspectorIndexedDBAgent::requestData(a1 - 32, a2, a3, a4, a5, a6, a7, a8, a9);
}

WTF::StringImpl *WebCore::InspectorIndexedDBAgent::clearObjectStore(uint64_t a1, WebCore::Page *a2, const WTF::String *a3, _DWORD **a4, WebCore::IDBFactory ***a5)
{
  WebCore *FrameWithSecurityOrigin;
  Inspector::BackendDispatcher::CallbackBase *v9;
  WTF::StringImpl *result;
  WebCore::SecurityContext *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebCore::_anonymous_namespace_::ExecutableWithDatabase *v15;
  _DWORD *v16;
  WebCore::IDBFactory **v17;
  WebCore::IDBClient::IDBConnectionProxy **v18;
  const WTF::String *v19;
  WebCore::IDBClient::IDBConnectionProxy **v20;
  uint64_t v21;

  FrameWithSecurityOrigin = WebCore::InspectorPageAgent::findFrameWithSecurityOrigin(*(WebCore::InspectorPageAgent **)(*(_QWORD *)(a1 + 56) + 160), a2, a3);
  v20 = 0;
  v21 = 0;
  result = (WTF::StringImpl *)WebCore::getDocumentAndIDBFactoryFromFrameOrSendFailure(FrameWithSecurityOrigin, (WebCore::LocalFrame *)&v21, (WebCore::Document **)&v20, *a5, v9);
  if ((_DWORD)result)
  {
    v11 = (WebCore::SecurityContext *)(v21 + 192);
    if (v21)
      v12 = v21 + 192;
    else
      v12 = 0;
    v13 = WTF::fastMalloc((WTF *)0x28);
    v15 = (WebCore::_anonymous_namespace_::ExecutableWithDatabase *)v13;
    *(_DWORD *)(v13 + 8) = 1;
    *(_QWORD *)(v13 + 16) = v12;
    *(_QWORD *)v13 = off_1E33F08B0;
    v16 = *a4;
    if (*a4)
      *v16 += 2;
    *(_QWORD *)(v13 + 24) = v16;
    v17 = *a5;
    *a5 = 0;
    *(_QWORD *)(v13 + 32) = v17;
    v18 = v20;
    WebCore::SecurityContext::securityOrigin(v11, v14);
    if (*((_DWORD *)v15 + 2) == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::_anonymous_namespace_::ExecutableWithDatabase *))(*(_QWORD *)v15 + 8))(v15);
    else
      --*((_DWORD *)v15 + 2);
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorIndexedDBAgent::clearObjectStore(uint64_t a1, WebCore::Page *a2, const WTF::String *a3, _DWORD **a4, WebCore::IDBFactory ***a5)
{
  return WebCore::InspectorIndexedDBAgent::clearObjectStore(a1 - 32, a2, a3, a4, a5);
}

void WebCore::InspectorLayerTreeAgent::~InspectorLayerTreeAgent(WebCore::InspectorLayerTreeAgent *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v3 = *((_QWORD *)this + 11);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 9);
  if (v4)
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v4, (WTF::StringImpl *)a2);
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = (WTF::StringImpl **)*((_QWORD *)this + 8);
      do
      {
        v8 = *v7;
        if (*v7 != (WTF::StringImpl *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = (WTF::StringImpl **)(v9 + 8);
      do
      {
        if (*(v11 - 1) != (WTF::StringImpl *)-1)
        {
          v12 = *v11;
          *v11 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  v13 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  v14 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
    WTF::fastFree(v14, a2);
  Inspector::LayerTreeBackendDispatcherHandler::~LayerTreeBackendDispatcherHandler((WebCore::InspectorLayerTreeAgent *)((char *)this + 32));
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorLayerTreeAgent::~InspectorLayerTreeAgent(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::InspectorLayerTreeAgent::~InspectorLayerTreeAgent(WebCore::InspectorLayerTreeAgent *this, void *a2)
{
  WebCore::InspectorLayerTreeAgent::~InspectorLayerTreeAgent((WebCore::InspectorLayerTreeAgent *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorLayerTreeAgent::~InspectorLayerTreeAgent((WebCore::InspectorLayerTreeAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::InspectorLayerTreeAgent::willDestroyFrontendAndBackend(WebCore::InspectorLayerTreeAgent *this, WTF::StringImpl *a2)
{
  *(_QWORD *)(*((_QWORD *)this + 2) + 176) = 0;
  return WebCore::InspectorLayerTreeAgent::reset(this, a2);
}

uint64_t WebCore::InspectorLayerTreeAgent::disable@<X0>(WebCore::InspectorLayerTreeAgent *this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  *(_QWORD *)(*((_QWORD *)this + 2) + 176) = 0;
  result = WebCore::InspectorLayerTreeAgent::reset(this, a2);
  *a3 = 0;
  a3[8] = 0;
  return result;
}

uint64_t WebCore::InspectorLayerTreeAgent::reset(WebCore::InspectorLayerTreeAgent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 7) = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WTF::StringImpl *)-1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = (WTF::StringImpl **)*((_QWORD *)this + 8);
  if (v7)
  {
    *((_QWORD *)this + 8) = 0;
    v8 = *((unsigned int *)v7 - 1);
    if ((_DWORD)v8)
    {
      v9 = v7;
      do
      {
        v10 = *v9;
        if (*v9 != (WTF::StringImpl *)-1)
        {
          *v9 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 2), a2);
  }
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    *((_QWORD *)this + 9) = 0;
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v11, a2);
    v12 = *((_QWORD *)this + 9);
    *((_DWORD *)this + 20) = 0;
    if (v12)
    {
      LODWORD(v12) = *(_DWORD *)(v12 - 12);
      if (v12 > 0x7FFFFFFE)
        LODWORD(v12) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v12) = 0;
    *((_DWORD *)this + 20) = 0;
  }
  *((_DWORD *)this + 21) = 2 * v12;
  result = *((_QWORD *)this + 11);
  if (result)
  {
    *((_QWORD *)this + 11) = 0;
    result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  *((_BYTE *)this + 96) = 0;
  return result;
}

uint64_t WebCore::InspectorLayerTreeAgent::enable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  *(_QWORD *)(*(_QWORD *)(this + 16) + 176) = this;
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorLayerTreeAgent::enable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  *(_QWORD *)(*(_QWORD *)(this - 16) + 176) = this - 32;
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorLayerTreeAgent::disable@<X0>(WebCore::InspectorLayerTreeAgent *this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  *(_QWORD *)(*((_QWORD *)this - 2) + 176) = 0;
  result = WebCore::InspectorLayerTreeAgent::reset((WebCore::InspectorLayerTreeAgent *)((char *)this - 32), a2);
  *a3 = 0;
  a3[8] = 0;
  return result;
}

void WebCore::InspectorLayerTreeAgent::unbindPseudoElement(WebCore::InspectorLayerTreeAgent *this, WebCore::PseudoElement *a2, const WTF::StringImpl *a3)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int j;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v44;
  WTF *v45;

  if (a2)
  {
    v5 = (uint64_t *)((char *)this + 72);
    v6 = *((_DWORD *)this + 20);
    v7 = *((_DWORD *)this + 21);
    *((_DWORD *)this + 20) = v6 + 1;
    if (v6 > v7)
      WTF::WeakHashMap<WebCore::Element,WTF::String,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)this + 72, a2);
    v8 = *((_QWORD *)a2 + 2);
    v9 = v8 & 0xFFFFFFFFFFFFLL;
    if ((v8 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 8))
      {
        v10 = *v5;
        if (*v5)
        {
          v11 = *(_DWORD *)(v10 - 8);
          v12 = (v9 + ~(v8 << 32)) ^ ((unint64_t)(v9 + ~(v8 << 32)) >> 22);
          v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
          v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
          v15 = v11 & ((v14 >> 31) ^ v14);
          for (i = 1; ; ++i)
          {
            v17 = v15;
            v18 = *(_QWORD *)(v10 + 16 * v15);
            if (v18 != -1)
            {
              if (!v18)
                return;
              if (v18 == v9)
                break;
            }
            v15 = (v17 + i) & v11;
          }
          if ((_DWORD)v17 != *(_DWORD *)(v10 - 4))
          {
            v19 = (WTF::StringImpl *)(v10 + 16 * v17);
            v20 = (WTF::StringImpl *)*((_QWORD *)v19 + 1);
            *((_QWORD *)v19 + 1) = 0;
            v21 = (WTF::StringImpl *)*v5;
            if (!*v5 || (v21 = (WTF::StringImpl *)((char *)v21 + 16 * *((unsigned int *)v21 - 1)), v21 != v19))
            {
              if (v21 != v19)
                WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove(v5, v19);
            }
            if (v20)
            {
              v24 = *((_QWORD *)this + 11);
              v22 = (uint64_t *)((char *)this + 88);
              v23 = v24;
              if (v24)
              {
                v25 = *(_DWORD *)(v23 - 8);
                v26 = *((_DWORD *)v20 + 4);
                if (v26 < 0x100)
                  v27 = WTF::StringImpl::hashSlowCase(v20);
                else
                  v27 = v26 >> 8;
                for (j = 0; ; v27 = j + v29)
                {
                  v29 = v27 & v25;
                  v30 = *(WTF **)(v23 + 16 * v29);
                  if (v30 != (WTF *)-1)
                  {
                    if (!v30)
                    {
                      v31 = *v22;
                      if (!*v22)
                        goto LABEL_49;
                      v32 = *(unsigned int *)(v31 - 4);
                      v33 = v31 + 16 * v32;
                      goto LABEL_31;
                    }
                    if ((WTF::equal(v30, v20, a3) & 1) != 0)
                      break;
                  }
                  ++j;
                }
                v33 = v23 + 16 * v29;
                v31 = *v22;
                if (!*v22)
                  goto LABEL_32;
                v32 = *(unsigned int *)(v31 - 4);
LABEL_31:
                v31 += 16 * v32;
                if (v31 == v33)
                  goto LABEL_49;
LABEL_32:
                if (v31 != v33)
                {
                  v34 = *(WTF::StringImpl **)v33;
                  *(_QWORD *)v33 = -1;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, v19);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v35 = *(_QWORD *)(v33 + 8);
                  *(_QWORD *)(v33 + 8) = 0;
                  if (v35)
                  {
                    do
                    {
                      v36 = __ldaxr((unsigned int *)v35);
                      v37 = v36 - 1;
                    }
                    while (__stlxr(v37, (unsigned int *)v35));
                    if (!v37)
                    {
                      atomic_store(1u, (unsigned int *)v35);
                      v44 = *(unsigned int *)(v35 + 28);
                      if ((_DWORD)v44)
                        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v35 + 16), (WTF::StringImpl *)(*(_QWORD *)(v35 + 16) + 32 * v44));
                      v45 = *(WTF **)(v35 + 16);
                      if (v45)
                      {
                        *(_QWORD *)(v35 + 16) = 0;
                        *(_DWORD *)(v35 + 24) = 0;
                        WTF::fastFree(v45, v19);
                      }
                      WTF::fastFree((WTF *)v35, v19);
                    }
                  }
                  ++*(_DWORD *)(*v22 - 16);
                  v38 = *v22;
                  if (*v22)
                    v39 = *(_DWORD *)(v38 - 12) - 1;
                  else
                    v39 = -1;
                  *(_DWORD *)(v38 - 12) = v39;
                  v40 = *v22;
                  if (*v22)
                  {
                    v41 = 6 * *(_DWORD *)(v40 - 12);
                    v42 = *(_DWORD *)(v40 - 4);
                    if (v41 < v42 && v42 >= 9)
                      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v22, v42 >> 1);
                  }
                }
              }
LABEL_49:
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v19);
              else
                *(_DWORD *)v20 -= 2;
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::InspectorLayerTreeAgent::layersForNode@<X0>(WebCore::InspectorLayerTreeAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::JSONImpl::ArrayBase *v7;
  uint64_t result;
  int v9;

  v5 = WebCore::InspectorDOMAgent::nodeForId(*(WebCore::InspectorDOMAgent **)(*((_QWORD *)this + 2) + 40), a2);
  if (!v5
    || (v6 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) == 0
    || (*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 1;
    goto LABEL_7;
  }
  v7 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase(v7);
  if ((*(_BYTE *)(v6 + 45) & 2) == 0)
  {
    result = WebCore::InspectorLayerTreeAgent::gatherLayersUsingRenderObjectHierarchy((uint64_t)this, v6, (uint64_t)v7);
    v9 = 0;
    *((_BYTE *)this + 96) = 0;
    *(_QWORD *)a3 = v7;
LABEL_7:
    *(_DWORD *)(a3 + 8) = v9;
    return result;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::InspectorLayerTreeAgent::gatherLayersUsingRenderObjectHierarchy(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = result;
  if ((*(_BYTE *)(a2 + 21) & 0x80) != 0)
  {
    if ((*(_BYTE *)(a2 + 45) & 0x10) != 0)
    {
      return (uint64_t)WebCore::InspectorLayerTreeAgent::gatherLayersUsingRenderLayerHierarchy((WTF::JSONImpl::Object *)result, *(_QWORD *)(a2 + 144), a3);
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a2 + 68);
    for (i = *(unsigned int *)(a2 + 64); ; i = *(unsigned int *)(v8 + 47))
    {
      v7 = i | (v5 << 32);
      if (!v7)
        break;
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8)
        break;
      if ((*(_BYTE *)(v8 + 45) & 2) == 0)
      {
LABEL_9:
        result = WebCore::InspectorLayerTreeAgent::gatherLayersUsingRenderObjectHierarchy(v4, v8, a3);
        while (1)
        {
          v9 = *(unsigned int *)(v8 + 47);
          if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)))
            return result;
          v8 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
          if (!v8)
            return result;
          if ((*(_BYTE *)(v8 + 45) & 2) == 0)
            goto LABEL_9;
        }
      }
      v5 = *(unsigned __int8 *)(v8 + 51);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorLayerTreeAgent::layersForNode@<X0>(WebCore::InspectorLayerTreeAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorLayerTreeAgent::layersForNode((WebCore::InspectorLayerTreeAgent *)((char *)this - 32), a2, a3);
}

WTF::JSONImpl::Object *WebCore::InspectorLayerTreeAgent::gatherLayersUsingRenderLayerHierarchy(WTF::JSONImpl::Object *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WTF::JSONImpl::Object *v5;
  WebCore::RenderLayerBacking *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  char v20;
  uint64_t v21;
  Inspector::IdentifiersFactory *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  WTF::StringImpl *v35;
  const WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  WTF::StringImpl **v42;
  int i;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  WTF::StringImpl *v65;
  const WTF::String *v66;
  WTF::StringImpl *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  int j;
  uint64_t v84;
  uint64_t v85;
  WTF::JSONImpl::Value *v86;
  WTF::StringImpl *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  unint64_t v94;
  WTF::JSONImpl::Value *v95;
  WTF::JSONImpl::Value *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::JSONImpl::Value *v105;
  WTF::StringImpl *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  unint64_t v114;
  WTF::JSONImpl::Value *v115;
  uint64_t v116;
  unsigned int v117;
  signed int v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  WTF::JSONImpl::Value *v122;
  WTF::JSONImpl::Value *v123;
  WTF::StringImpl *v124;
  uint64_t *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::JSONImpl::Value *v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  const WTF::String *v167;
  WTF::StringImpl *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  uint64_t v191;
  char v192;
  int v193;
  uint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unsigned int v198;
  int v199;
  unsigned int v200;
  uint64_t *v201;
  uint64_t v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  uint64_t v210;
  WTF::StringImpl *v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  void *v216;
  void *v217;
  void *v218;
  WTF::StringImpl **v219;
  uint64_t k;
  uint64_t v221;
  WTF::StringImpl *v222;
  uint64_t *v223;
  unsigned int v224;
  unsigned int v225;
  const WTF::StringImpl *v226;
  uint64_t *v227;
  uint64_t v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  WTF::StringImpl **v232;
  int v233;
  uint64_t v234;
  WTF::StringImpl **v235;
  WTF *v236;
  WTF::StringImpl *v237;
  unsigned int *v238;
  unsigned int v239;
  WTF::StringImpl *v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  int v244;
  unsigned int *v245;
  void *v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  WTF *v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  unint64_t v257;
  unsigned int v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  int v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  unint64_t v267;
  unsigned int v268;
  uint64_t *v269;
  uint64_t *v270;
  WTF::StringImpl *v271;
  _DWORD **v272;
  uint64_t v273;
  _DWORD *v274;
  _DWORD **v275;
  uint64_t v276;
  _DWORD *v277;
  _DWORD **v278;
  uint64_t v279;
  _DWORD *v280;
  _DWORD **v281;
  uint64_t v282;
  _DWORD *v283;
  _DWORD **v284;
  uint64_t v285;
  _DWORD *v286;
  _DWORD **v287;
  uint64_t v288;
  _DWORD *v289;
  _DWORD **v290;
  uint64_t v291;
  _DWORD *v292;
  _DWORD **v293;
  uint64_t v294;
  _DWORD *v295;
  _DWORD **v296;
  uint64_t v297;
  _DWORD *v298;
  _DWORD **v299;
  uint64_t v300;
  _DWORD *v301;
  _DWORD **v302;
  uint64_t v303;
  _DWORD *v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  WTF *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  WTF *v313;
  uint64_t v314;
  WTF *v315;
  uint64_t v316;
  WTF *v317;
  WTF::JSONImpl::Object *v318;
  WTF::JSONImpl::Object *v319;
  uint64_t v320;
  uint64_t v321;
  WebCore::RenderLayerBacking *v322;
  int v323;
  BOOL v324;
  char v325;
  uint64_t v326;
  WTF::StringImpl *v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t *v330;
  WTF::StringImpl *v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334[2];
  char v335;

  v4 = a2;
  v5 = result;
  v6 = *(WebCore::RenderLayerBacking **)(a2 + 256);
  if (!v6)
    goto LABEL_344;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(v7 + 45);
  if ((v8 & 1) != 0)
    v9 = 0;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
  v10 = *(unsigned __int8 *)(v7 + 46);
  v11 = *(_QWORD *)(a2 + 32);
  if (v10 == 30)
  {
    v11 = *(_QWORD *)(v7 + 32);
    if (v11)
      v11 = *(_QWORD *)(v11 + 8);
  }
  v12 = (*(_BYTE *)(v11 + 45) & 2) == 0 && (*(_QWORD *)(v11 + 96) & 0xF00000000000) == 0x300000000000;
  v325 = *(_BYTE *)(v7 + 45);
  if (v10 == 49)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40);
LABEL_11:
    v14 = (uint64_t *)(v13 + 8);
LABEL_12:
    v9 = *v14;
    goto LABEL_42;
  }
  if (v10 != 30 || !v12)
  {
    if (v12)
    {
      v20 = *(_BYTE *)(v7 + 45);
      if ((v20 & 1) == 0)
      {
        result = *(WTF::JSONImpl::Object **)(*(_QWORD *)(v7 + 24) + 8);
        v20 = *(_BYTE *)(v7 + 45);
        if (result)
        {
          v20 = *(_BYTE *)(v7 + 45);
          if ((~*((unsigned __int16 *)result + 14) & 0x408) == 0)
          {
            result = (WTF::JSONImpl::Object *)(*(uint64_t (**)(WTF::JSONImpl::Object *))(*(_QWORD *)result
                                                                                                 + 368))(result);
            v20 = *(_BYTE *)(v7 + 45);
            if ((_DWORD)result)
            {
              v305 = v10;
              if ((*(_BYTE *)(v7 + 45) & 1) != 0)
                v309 = 0;
              else
                v309 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
              if ((~*(unsigned __int16 *)(v309 + 28) & 0x408) != 0
                || (result = (WTF::JSONImpl::Object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v309 + 368))(v309),
                    !(_DWORD)result))
              {
                __break(0xC471u);
                JUMPOUT(0x195E3DC60);
              }
              v311 = *(_QWORD *)(v309 + 112);
              if (v311)
              {
                v14 = (uint64_t *)(v311 + 8);
                v10 = v305;
                goto LABEL_12;
              }
LABEL_527:
              v9 = 0;
              v8 = v325;
              v10 = v305;
              goto LABEL_42;
            }
          }
        }
      }
      if ((v20 & 1) == 0)
      {
        v13 = *(_QWORD *)(v7 + 24);
        goto LABEL_11;
      }
    }
    else
    {
      if ((*(_BYTE *)(v7 + 45) & 1) == 0 && v10 != 30)
        goto LABEL_42;
      v21 = *(_QWORD *)(v7 + 32);
      if (v21)
        v21 = *(_QWORD *)(v21 + 8);
      if ((*(_BYTE *)(v21 + 45) & 1) == 0)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v21 + 24) + 8);
        if (v9 && (*(_WORD *)(v9 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195E3DCA8);
        }
        goto LABEL_42;
      }
    }
    v9 = 0;
    goto LABEL_42;
  }
  v16 = *(_QWORD *)(v7 + 32);
  if (v16)
    v17 = *(_QWORD *)(v16 + 8);
  else
    v17 = 0;
  v18 = *(_BYTE *)(v17 + 45);
  if ((v18 & 1) == 0)
  {
    result = *(WTF::JSONImpl::Object **)(*(_QWORD *)(v17 + 24) + 8);
    if (result)
    {
      if ((~*((unsigned __int16 *)result + 14) & 0x408) == 0)
      {
        result = (WTF::JSONImpl::Object *)(*(uint64_t (**)(WTF::JSONImpl::Object *))(*(_QWORD *)result + 368))(result);
        v18 = *(_BYTE *)(v17 + 45);
        if ((_DWORD)result)
        {
          v305 = v10;
          if ((*(_BYTE *)(v17 + 45) & 1) != 0)
            v306 = 0;
          else
            v306 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8);
          if ((~*(unsigned __int16 *)(v306 + 28) & 0x408) != 0
            || (result = (WTF::JSONImpl::Object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v306 + 368))(v306),
                !(_DWORD)result))
          {
            __break(0xC471u);
            JUMPOUT(0x195E3DBF4);
          }
          v310 = *(_QWORD *)(v306 + 112);
          if (v310)
          {
            v19 = (uint64_t *)(v310 + 8);
            v10 = v305;
            goto LABEL_25;
          }
          goto LABEL_527;
        }
      }
    }
  }
  if ((v18 & 1) == 0)
  {
    v19 = (uint64_t *)(*(_QWORD *)(v17 + 24) + 8);
LABEL_25:
    v9 = *v19;
    v8 = v325;
    if (*v19 && (*(_WORD *)(v9 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195E3C2DCLL);
    }
    goto LABEL_42;
  }
  v9 = 0;
  v8 = v325;
LABEL_42:
  v328 = v9;
  v22 = (Inspector::IdentifiersFactory *)WTF::JSONImpl::Object::create(result);
  v23 = v334[0];
  v25 = (uint64_t *)((char *)v5 + 56);
  v24 = *((_QWORD *)v5 + 7);
  v323 = v10;
  v324 = v12;
  v322 = v6;
  if (v24
    || (v22 = (Inspector::IdentifiersFactory *)WTF::HashTable<WebCore::CSSStyleRule const*,WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleRule const*>>::rehash((uint64_t *)v5 + 7, 8u, 0), (v24 = *v25) != 0))
  {
    v26 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v26 = 0;
  }
  v27 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
  v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
  v30 = v26 & ((v29 >> 31) ^ v29);
  v31 = (uint64_t *)(v24 + 16 * v30);
  v32 = *v31;
  v326 = v4;
  v327 = v334[0];
  if (*v31)
  {
    v33 = 0;
    v34 = 1;
    do
    {
      if (v32 == v4)
        goto LABEL_100;
      if (v32 == -1)
        v33 = v31;
      v30 = (v30 + v34) & v26;
      v31 = (uint64_t *)(v24 + 16 * v30);
      v32 = *v31;
      ++v34;
    }
    while (*v31);
    v320 = v7;
    if (v33)
    {
      *v33 = 0;
      v33[1] = 0;
      --*(_DWORD *)(*v25 - 16);
      v31 = v33;
    }
  }
  else
  {
    v320 = v7;
  }
  *v31 = v4;
  Inspector::IdentifiersFactory::createIdentifier(v22);
  v318 = v5;
  v38 = (uint64_t *)((char *)v5 + 64);
  v37 = *((_QWORD *)v5 + 8);
  if (v37
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)v5 + 8, 8u), (v37 = *v38) != 0))
  {
    v39 = *(_DWORD *)(v37 - 8);
  }
  else
  {
    v39 = 0;
  }
  v40 = *((_DWORD *)v334[0] + 4);
  if (v40 < 0x100)
    v41 = WTF::StringImpl::hashSlowCase(v334[0]);
  else
    v41 = v40 >> 8;
  v42 = 0;
  for (i = 1; ; ++i)
  {
    v44 = v41 & v39;
    v45 = (WTF::StringImpl **)(v37 + 16 * v44);
    v46 = *v45;
    if (*v45 == (WTF::StringImpl *)-1)
    {
      v42 = (WTF::StringImpl **)(v37 + 16 * v44);
      goto LABEL_66;
    }
    if (!v46)
      break;
    if (WTF::equal(v46, v334[0], v36))
    {
      *(_QWORD *)(v37 + 16 * v44 + 8) = v326;
      v5 = v318;
      v7 = v320;
      v8 = v325;
      goto LABEL_85;
    }
LABEL_66:
    v41 = i + v44;
  }
  if (v42)
  {
    *v42 = 0;
    v42[1] = 0;
    --*(_DWORD *)(*v38 - 16);
    v45 = v42;
  }
  v47 = v334[0];
  v5 = v318;
  v7 = v320;
  if (v334[0])
    *(_DWORD *)v334[0] += 2;
  *v45 = v47;
  v8 = v325;
  v45[1] = (WTF::StringImpl *)v326;
  v48 = *v38;
  if (*v38)
    v49 = *(_DWORD *)(v48 - 12) + 1;
  else
    v49 = 1;
  *(_DWORD *)(v48 - 12) = v49;
  v50 = *v38;
  if (*v38)
    v51 = *(_DWORD *)(v50 - 12);
  else
    v51 = 0;
  v52 = (*(_DWORD *)(v50 - 16) + v51);
  v53 = *(unsigned int *)(v50 - 4);
  if (v53 > 0x400)
  {
    if (v53 <= 2 * v52)
    {
LABEL_81:
      v54 = (_DWORD)v53 << (6 * *(_DWORD *)(v50 - 12) >= (2 * v53));
      goto LABEL_84;
    }
  }
  else if (3 * v53 <= 4 * v52)
  {
    if ((_DWORD)v53)
      goto LABEL_81;
    v54 = 8;
LABEL_84:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v38, v54);
  }
LABEL_85:
  v55 = v334[0];
  v334[0] = 0;
  v56 = (WTF::StringImpl *)v31[1];
  v31[1] = (uint64_t)v55;
  v23 = v327;
  if (v56)
  {
    v57 = *(_DWORD *)v56 - 2;
    if (*(_DWORD *)v56 != 2)
      goto LABEL_87;
    WTF::StringImpl::destroy(v56, v35);
    v56 = v334[0];
    v334[0] = 0;
    if (v56)
    {
      v57 = *(_DWORD *)v56 - 2;
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v222);
      else
LABEL_87:
        *(_DWORD *)v56 = v57;
    }
  }
  v58 = *v25;
  if (*v25)
    v59 = *(_DWORD *)(v58 - 12) + 1;
  else
    v59 = 1;
  *(_DWORD *)(v58 - 12) = v59;
  v60 = *v25;
  if (*v25)
    v61 = *(_DWORD *)(v60 - 12);
  else
    v61 = 0;
  v62 = (*(_DWORD *)(v60 - 16) + v61);
  v63 = *(unsigned int *)(v60 - 4);
  if (v63 > 0x400)
  {
    if (v63 <= 2 * v62)
    {
LABEL_97:
      v64 = (_DWORD)v63 << (6 * *(_DWORD *)(v60 - 12) >= (2 * v63));
      goto LABEL_99;
    }
  }
  else if (3 * v63 <= 4 * v62)
  {
    if ((_DWORD)v63)
      goto LABEL_97;
    v64 = 8;
LABEL_99:
    v31 = WTF::HashTable<WebCore::CSSStyleRule const*,WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleRule const*>>::rehash(v25, v64, v31);
  }
LABEL_100:
  v65 = (WTF::StringImpl *)v31[1];
  if (v65)
    *(_DWORD *)v65 += 2;
  v331 = v65;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v331, v66);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v23 + 2, &v332, (const WTF::StringImpl *)&v333, (uint64_t)v334);
  if (v335)
  {
    v68 = (uint64_t *)((char *)v23 + 24);
    v69 = *((unsigned int *)v23 + 9);
    if ((_DWORD)v69 == *((_DWORD *)v23 + 8))
    {
      v272 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)&v332);
      v69 = *((unsigned int *)v23 + 9);
      v273 = *((_QWORD *)v23 + 3);
      v274 = *v272;
      if (*v272)
        *v274 += 2;
      *(_QWORD *)(v273 + 8 * v69) = v274;
    }
    else
    {
      v70 = *v68;
      v71 = v332;
      if (v332)
        *(_DWORD *)v332 += 2;
      *(_QWORD *)(v70 + 8 * v69) = v71;
    }
    *((_DWORD *)v23 + 9) = v69 + 1;
  }
  v72 = v333;
  v333 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v72;
  }
  v73 = v332;
  v332 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 != 2)
    {
      *(_DWORD *)v73 -= 2;
      goto LABEL_114;
    }
    WTF::StringImpl::destroy(v73, v67);
    if (!v328)
    {
LABEL_128:
      v86 = 0;
      goto LABEL_129;
    }
  }
  else
  {
LABEL_114:
    if (!v328)
      goto LABEL_128;
  }
  v74 = *(_QWORD *)(*((_QWORD *)v5 + 2) + 40);
  ++*(_DWORD *)(v74 + 88);
  v75 = *(_QWORD *)(v328 + 16);
  v76 = v75 & 0xFFFFFFFFFFFFLL;
  if ((v75 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_126;
  if (!*(_QWORD *)((v75 & 0xFFFFFFFFFFFFLL) + 8))
    goto LABEL_126;
  v77 = *(_QWORD *)(v74 + 80);
  if (!v77)
    goto LABEL_126;
  v78 = *(_DWORD *)(v77 - 8);
  v79 = (v76 + ~(v75 << 32)) ^ ((unint64_t)(v76 + ~(v75 << 32)) >> 22);
  v80 = 9 * ((v79 + ~(v79 << 13)) ^ ((v79 + ~(v79 << 13)) >> 8));
  v81 = (v80 ^ (v80 >> 15)) + ~((v80 ^ (v80 >> 15)) << 27);
  v82 = v78 & ((v81 >> 31) ^ v81);
  for (j = 1; ; v82 = (v84 + j++) & v78)
  {
    v84 = v82;
    v85 = *(_QWORD *)(v77 + 16 * v82);
    if (v85 != -1)
    {
      if (!v85)
        goto LABEL_126;
      if (v85 == v76)
        break;
    }
  }
  v86 = (WTF::JSONImpl::Value *)*(unsigned int *)(v77 + 16 * v84 + 8);
  if (!(_DWORD)v86)
LABEL_126:
    v86 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodeToFrontend((WebCore::InspectorDOMAgent *)v74, (WebCore::Node *)v328);
LABEL_129:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v86);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v23 + 2, &v332, (const WTF::StringImpl *)&v333, (uint64_t)v334);
  if (v335)
  {
    v88 = (uint64_t *)((char *)v23 + 24);
    v89 = *((unsigned int *)v23 + 9);
    if ((_DWORD)v89 == *((_DWORD *)v23 + 8))
    {
      v275 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v332);
      v89 = *((unsigned int *)v23 + 9);
      v276 = *((_QWORD *)v23 + 3);
      v277 = *v275;
      if (*v275)
        *v277 += 2;
      *(_QWORD *)(v276 + 8 * v89) = v277;
    }
    else
    {
      v90 = *v88;
      v91 = v332;
      if (v332)
        *(_DWORD *)v332 += 2;
      *(_QWORD *)(v90 + 8 * v89) = v91;
    }
    *((_DWORD *)v23 + 9) = v89 + 1;
  }
  v92 = v333;
  v333 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v92;
  }
  v330 = (uint64_t *)((char *)v23 + 16);
  v93 = v332;
  v332 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
      WTF::StringImpl::destroy(v93, v87);
    else
      *(_DWORD *)v93 -= 2;
  }
  v94 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v7, 1, 0);
  v96 = v95;
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v94);
  Inspector::Protocol::LayerTree::IntRect::Builder<0>::setX((uint64_t *)v334, (WTF::JSONImpl::Value *)v94);
  Inspector::Protocol::LayerTree::IntRect::Builder<1>::setY((uint64_t *)v334, (WTF::JSONImpl::Value *)HIDWORD(v94));
  Inspector::Protocol::LayerTree::IntRect::Builder<3>::setWidth((uint64_t *)v334, v96);
  Inspector::Protocol::LayerTree::IntRect::Builder<7>::setHeight((uint64_t *)v334, (WTF::JSONImpl::Value *)((unint64_t)v96 >> 32));
  v97 = v334[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v332 = v97;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v330, &v333, (const WTF::StringImpl *)&v332, (uint64_t)v334);
  if (v335)
  {
    v99 = (uint64_t *)((char *)v23 + 24);
    v100 = *((unsigned int *)v23 + 9);
    if ((_DWORD)v100 == *((_DWORD *)v23 + 8))
    {
      v278 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, v100 + 1, (unint64_t)&v333);
      v100 = *((unsigned int *)v23 + 9);
      v279 = *((_QWORD *)v23 + 3);
      v280 = *v278;
      if (*v278)
        *v280 += 2;
      *(_QWORD *)(v279 + 8 * v100) = v280;
    }
    else
    {
      v101 = *v99;
      v102 = v333;
      if (v333)
        *(_DWORD *)v333 += 2;
      *(_QWORD *)(v101 + 8 * v100) = v102;
    }
    *((_DWORD *)v23 + 9) = v100 + 1;
  }
  v103 = v332;
  v332 = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v103;
  }
  v104 = v333;
  v333 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
      WTF::StringImpl::destroy(v104, v98);
    else
      *(_DWORD *)v104 -= 2;
  }
  v105 = (WTF::JSONImpl::Value *)(int)WebCore::RenderLayerBacking::backingStoreMemoryEstimate(v322);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v105);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v330, &v332, (const WTF::StringImpl *)&v333, (uint64_t)v334);
  if (v335)
  {
    v107 = (uint64_t *)((char *)v23 + 24);
    v108 = *((unsigned int *)v23 + 9);
    if ((_DWORD)v108 == *((_DWORD *)v23 + 8))
    {
      v281 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, v108 + 1, (unint64_t)&v332);
      v108 = *((unsigned int *)v23 + 9);
      v282 = *((_QWORD *)v23 + 3);
      v283 = *v281;
      if (*v281)
        *v283 += 2;
      *(_QWORD *)(v282 + 8 * v108) = v283;
    }
    else
    {
      v109 = *v107;
      v110 = v332;
      if (v332)
        *(_DWORD *)v332 += 2;
      *(_QWORD *)(v109 + 8 * v108) = v110;
    }
    *((_DWORD *)v23 + 9) = v108 + 1;
  }
  v111 = v333;
  v333 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v111;
  }
  v112 = v332;
  v332 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
      v112 = (WTF::StringImpl *)WTF::StringImpl::destroy(v112, v106);
    else
      *(_DWORD *)v112 -= 2;
  }
  v113 = *((_QWORD *)v322 + 22);
  v114 = *((_QWORD *)v322 + 23);
  v115 = (WTF::JSONImpl::Value *)((int)v113 >> 6);
  v116 = v113 >> 38;
  v117 = (int)v113 >> 6;
  if ((_DWORD)v114)
  {
    v118 = v113 + v114;
    if (__OFADD__((_DWORD)v113, (_DWORD)v114))
      v118 = (v113 >> 31) + 0x7FFFFFFF;
    if (v118 > 2147483583)
    {
      v117 = 0x1FFFFFF;
    }
    else if (v118 < 0)
    {
      v117 = -(-v118 >> 6);
    }
    else
    {
      v117 = (v118 + 63) >> 6;
    }
  }
  v119 = HIDWORD(v114);
  v120 = v113 >> 38;
  if ((_DWORD)v119)
  {
    v121 = HIDWORD(v113);
    LODWORD(v113) = HIDWORD(v113) + v119;
    if (__OFADD__(HIDWORD(v113), (_DWORD)v119))
      LODWORD(v113) = (v121 >> 31) + 0x7FFFFFFF;
    if ((int)v113 > 2147483583)
    {
      LODWORD(v120) = 0x1FFFFFF;
    }
    else if ((v113 & 0x80000000) != 0)
    {
      LODWORD(v120) = -(-(int)v113 >> 6);
    }
    else
    {
      LODWORD(v120) = (v113 + 63) >> 6;
    }
  }
  v122 = (WTF::JSONImpl::Value *)(v117 - v115);
  v123 = (WTF::JSONImpl::Value *)(v120 - v116);
  WTF::JSONImpl::Object::create(v112);
  Inspector::Protocol::LayerTree::IntRect::Builder<0>::setX((uint64_t *)v334, v115);
  Inspector::Protocol::LayerTree::IntRect::Builder<1>::setY((uint64_t *)v334, (WTF::JSONImpl::Value *)v116);
  Inspector::Protocol::LayerTree::IntRect::Builder<3>::setWidth((uint64_t *)v334, v122);
  Inspector::Protocol::LayerTree::IntRect::Builder<7>::setHeight((uint64_t *)v334, v123);
  v124 = v334[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v332 = v124;
  v125 = v330;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v330, &v333, (const WTF::StringImpl *)&v332, (uint64_t)v334);
  v127 = v327;
  if (v335)
  {
    v128 = (uint64_t *)((char *)v327 + 24);
    v129 = *((unsigned int *)v327 + 9);
    if ((_DWORD)v129 == *((_DWORD *)v327 + 8))
    {
      v284 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v128, v129 + 1, (unint64_t)&v333);
      v129 = *((unsigned int *)v327 + 9);
      v285 = *((_QWORD *)v327 + 3);
      v286 = *v284;
      if (*v284)
        *v286 += 2;
      *(_QWORD *)(v285 + 8 * v129) = v286;
    }
    else
    {
      v130 = *v128;
      v131 = v333;
      if (v333)
        *(_DWORD *)v333 += 2;
      *(_QWORD *)(v130 + 8 * v129) = v131;
    }
    *((_DWORD *)v327 + 9) = v129 + 1;
  }
  v132 = v332;
  v332 = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v132;
  }
  v133 = v333;
  v333 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
      WTF::StringImpl::destroy(v133, v126);
    else
      *(_DWORD *)v133 -= 2;
  }
  v134 = (WTF::JSONImpl::Value *)*(unsigned int *)(*((_QWORD *)v322 + 9) + 180);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v134);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v330, &v332, (const WTF::StringImpl *)&v333, (uint64_t)v334);
  v136 = v7;
  v4 = v326;
  if (v335)
  {
    v137 = (uint64_t *)((char *)v327 + 24);
    v138 = *((unsigned int *)v327 + 9);
    if ((_DWORD)v138 == *((_DWORD *)v327 + 8))
    {
      v287 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v137, v138 + 1, (unint64_t)&v332);
      v138 = *((unsigned int *)v327 + 9);
      v288 = *((_QWORD *)v327 + 3);
      v289 = *v287;
      if (*v287)
        *v289 += 2;
      *(_QWORD *)(v288 + 8 * v138) = v289;
    }
    else
    {
      v139 = *v137;
      v140 = v332;
      if (v332)
        *(_DWORD *)v332 += 2;
      *(_QWORD *)(v139 + 8 * v138) = v140;
    }
    *((_DWORD *)v327 + 9) = v138 + 1;
  }
  v141 = v333;
  v333 = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v141;
  }
  v142 = v332;
  v332 = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
      WTF::StringImpl::destroy(v142, v135);
    else
      *(_DWORD *)v142 -= 2;
  }
  result = v331;
  v331 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(result, v135);
    else
      *(_DWORD *)result -= 2;
  }
  if (v328)
  {
    v143 = **(_QWORD **)(v328 + 40);
    if (v143)
    {
      if ((*(_WORD *)(v143 + 28) & 0x80) != 0)
      {
        v144 = *(_QWORD *)(v143 + 200);
        if (v144)
        {
          if (*(_QWORD *)(v144 + 8))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v330, &v332, (const WTF::StringImpl *)&v333, (uint64_t)v334);
            if (v335)
            {
              v146 = (uint64_t *)((char *)v327 + 24);
              v147 = *((unsigned int *)v327 + 9);
              if ((_DWORD)v147 == *((_DWORD *)v327 + 8))
              {
                v302 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v146, v147 + 1, (unint64_t)&v332);
                v147 = *((unsigned int *)v327 + 9);
                v303 = *((_QWORD *)v327 + 3);
                v304 = *v302;
                if (*v302)
                  *v304 += 2;
                *(_QWORD *)(v303 + 8 * v147) = v304;
              }
              else
              {
                v148 = *v146;
                v149 = v332;
                if (v332)
                  *(_DWORD *)v332 += 2;
                *(_QWORD *)(v148 + 8 * v147) = v149;
              }
              *((_DWORD *)v327 + 9) = v147 + 1;
            }
            v150 = v333;
            v333 = 0;
            if (v150)
            {
              if (*(_DWORD *)v150 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v150;
            }
            result = v332;
            v332 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(result, v145);
              else
                *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
  }
  if (v323 == 30)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v330, &v332, (const WTF::StringImpl *)&v333, (uint64_t)v334);
    if (v335)
    {
      v152 = (uint64_t *)((char *)v327 + 24);
      v153 = *((unsigned int *)v327 + 9);
      if ((_DWORD)v153 == *((_DWORD *)v327 + 8))
      {
        v290 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v152, v153 + 1, (unint64_t)&v332);
        v153 = *((unsigned int *)v327 + 9);
        v291 = *((_QWORD *)v327 + 3);
        v292 = *v290;
        if (*v290)
          *v292 += 2;
        *(_QWORD *)(v291 + 8 * v153) = v292;
      }
      else
      {
        v154 = *v152;
        v155 = v332;
        if (v332)
          *(_DWORD *)v332 += 2;
        *(_QWORD *)(v154 + 8 * v153) = v155;
      }
      *((_DWORD *)v327 + 9) = v153 + 1;
    }
    v156 = v333;
    v333 = 0;
    if (v156)
    {
      if (*(_DWORD *)v156 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v156;
    }
    result = v332;
    v332 = 0;
    if (!result)
      goto LABEL_234;
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(result, v151);
      if (!v324)
        goto LABEL_301;
    }
    else
    {
      *(_DWORD *)result -= 2;
LABEL_234:
      if (!v324)
        goto LABEL_301;
    }
    v157 = *(_QWORD *)(v7 + 32);
    if (v157)
      v136 = *(_QWORD *)(v157 + 8);
    else
      v136 = 0;
  }
  else if (!v324)
  {
    goto LABEL_301;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v330, &v332, (const WTF::StringImpl *)&v333, (uint64_t)v334);
  if (v335)
  {
    v159 = (uint64_t *)((char *)v327 + 24);
    v160 = *((unsigned int *)v327 + 9);
    if ((_DWORD)v160 == *((_DWORD *)v327 + 8))
    {
      v293 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v159, v160 + 1, (unint64_t)&v332);
      v160 = *((unsigned int *)v327 + 9);
      v294 = *((_QWORD *)v327 + 3);
      v295 = *v293;
      if (*v293)
        *v295 += 2;
      *(_QWORD *)(v294 + 8 * v160) = v295;
    }
    else
    {
      v161 = *v159;
      v162 = v332;
      if (v332)
        *(_DWORD *)v332 += 2;
      *(_QWORD *)(v161 + 8 * v160) = v162;
    }
    *((_DWORD *)v327 + 9) = v160 + 1;
  }
  v163 = v333;
  v333 = 0;
  if (v163)
  {
    if (*(_DWORD *)v163 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v163;
  }
  v164 = v332;
  v332 = 0;
  if (v164)
  {
    if (*(_DWORD *)v164 == 2)
      WTF::StringImpl::destroy(v164, v158);
    else
      *(_DWORD *)v164 -= 2;
  }
  if ((*(_BYTE *)(v136 + 45) & 1) != 0 || (v165 = *(_QWORD *)(*(_QWORD *)(v136 + 24) + 8)) == 0)
  {
    v166 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
      goto LABEL_256;
    goto LABEL_255;
  }
  if ((~*(unsigned __int16 *)(v165 + 28) & 0x408) != 0
    || (v176 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v165 + 368))(v165), !(_DWORD)v176))
  {
    __break(0xC471u);
    JUMPOUT(0x195E3CF44);
  }
  v178 = (uint64_t *)((char *)v5 + 72);
  v179 = *((_DWORD *)v5 + 20);
  v180 = *((_DWORD *)v5 + 21);
  *((_DWORD *)v5 + 20) = v179 + 1;
  v329 = (uint64_t *)((char *)v5 + 72);
  if (v179 > v180)
  {
    v176 = WTF::WeakHashMap<WebCore::Element,WTF::String,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)v329, v177);
    v178 = (uint64_t *)((char *)v5 + 72);
  }
  v321 = v136;
  if ((*(_QWORD *)(v165 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v176 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v176 = 1;
    *(_QWORD *)(v176 + 16) = 0;
    *(_QWORD *)(v176 + 24) = 0;
    *(_QWORD *)(v176 + 8) = v165;
    *(_BYTE *)(v176 + 32) = 0;
    v181 = *(_QWORD *)(v165 + 16);
    v178 = (uint64_t *)((char *)v5 + 72);
    *(_QWORD *)(v165 + 16) = v181 & 0xFFFF000000000000 | v176;
    v182 = v181 & 0xFFFFFFFFFFFFLL;
    if ((v181 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v183 = __ldaxr((unsigned int *)v182);
        v184 = v183 - 1;
      }
      while (__stlxr(v184, (unsigned int *)v182));
      if (!v184)
      {
        atomic_store(1u, (unsigned int *)v182);
        v312 = *(unsigned int *)(v182 + 28);
        if ((_DWORD)v312)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v182 + 16), (WTF::StringImpl *)(*(_QWORD *)(v182 + 16) + 32 * v312));
        v313 = *(WTF **)(v182 + 16);
        if (v313)
        {
          *(_QWORD *)(v182 + 16) = 0;
          *(_DWORD *)(v182 + 24) = 0;
          WTF::fastFree(v313, v177);
        }
        v176 = WTF::fastFree((WTF *)v182, v177);
        v8 = v325;
        v178 = (uint64_t *)((char *)v5 + 72);
        v125 = v330;
      }
    }
  }
  v185 = *(_QWORD *)(v165 + 16);
  v186 = v185 & 0xFFFFFFFFFFFFLL;
  do
    v187 = __ldaxr((unsigned int *)v186);
  while (__stlxr(v187 + 1, (unsigned int *)v186));
  do
    v188 = __ldaxr((unsigned int *)v186);
  while (__stlxr(v188 + 1, (unsigned int *)v186));
  if (v186)
  {
    do
    {
      v189 = __ldaxr((unsigned int *)v186);
      v190 = v189 - 1;
    }
    while (__stlxr(v190, (unsigned int *)v186));
    if (!v190)
    {
      atomic_store(1u, (unsigned int *)v186);
      v307 = *(unsigned int *)((v185 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v307)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v185 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v185 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v307));
      v308 = *(WTF **)((v185 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v308)
      {
        *(_QWORD *)((v185 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v185 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v308, v177);
      }
      v176 = WTF::fastFree((WTF *)(v185 & 0xFFFFFFFFFFFFLL), v177);
      v8 = v325;
      v178 = (uint64_t *)((char *)v5 + 72);
      v125 = v330;
    }
  }
  v191 = *v178;
  if (*v178
    || (v176 = (uint64_t)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v329, 8u, 0), v178 = (uint64_t *)((char *)v5 + 72), (v191 = *v329) != 0))
  {
    v192 = 0;
    v193 = *(_DWORD *)(v191 - 8);
  }
  else
  {
    v193 = 0;
    v192 = 1;
  }
  v194 = 0;
  v195 = (v186 + ~(v185 << 32)) ^ ((unint64_t)(v186 + ~(v185 << 32)) >> 22);
  v196 = 9 * ((v195 + ~(v195 << 13)) ^ ((v195 + ~(v195 << 13)) >> 8));
  v197 = (v196 ^ (v196 >> 15)) + ~((v196 ^ (v196 >> 15)) << 27);
  v198 = (v197 >> 31) ^ v197;
  v199 = 1;
  while (2)
  {
    v200 = v198 & v193;
    v201 = (uint64_t *)(v191 + 16 * v200);
    v202 = *v201;
    if (*v201 == -1)
    {
      v194 = (uint64_t *)(v191 + 16 * v200);
LABEL_297:
      v198 = v199 + v200;
      ++v199;
      continue;
    }
    break;
  }
  if (v202)
  {
    if (v202 == v186)
    {
      if ((v192 & 1) != 0)
        v221 = 0;
      else
        v221 = *(unsigned int *)(v191 - 4);
      v223 = (uint64_t *)(v191 + 16 * v221);
      if (!v186)
        goto LABEL_369;
      do
      {
        v224 = __ldaxr((unsigned int *)v186);
        v225 = v224 - 1;
      }
      while (__stlxr(v225, (unsigned int *)v186));
      if (!v225)
      {
        atomic_store(1u, (unsigned int *)v186);
        v316 = *(unsigned int *)(v186 + 28);
        if ((_DWORD)v316)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v186 + 16), (WTF::StringImpl *)(*(_QWORD *)(v186 + 16) + 32 * v316));
        v317 = *(WTF **)(v186 + 16);
        if (v317)
        {
          *(_QWORD *)(v186 + 16) = 0;
          *(_DWORD *)(v186 + 24) = 0;
          WTF::fastFree(v317, v177);
        }
        WTF::fastFree((WTF *)v186, v177);
        v8 = v325;
        v127 = v327;
        v178 = (uint64_t *)((char *)v5 + 72);
        v125 = v330;
      }
      else
      {
LABEL_369:
        v127 = v327;
      }
      goto LABEL_448;
    }
    goto LABEL_297;
  }
  if (v194)
  {
    *v194 = 0;
    v194[1] = 0;
    --*(_DWORD *)(*v178 - 16);
    *v194 = v186;
    v201 = v194;
  }
  else
  {
    *v201 = v186;
  }
  Inspector::IdentifiersFactory::createIdentifier((Inspector::IdentifiersFactory *)v176);
  v227 = (uint64_t *)((char *)v5 + 88);
  v228 = *((_QWORD *)v5 + 11);
  if (v228
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)v5 + 11, 8u), (v228 = *v227) != 0))
  {
    v229 = *(_DWORD *)(v228 - 8);
  }
  else
  {
    v229 = 0;
  }
  v230 = *((_DWORD *)v334[0] + 4);
  if (v230 < 0x100)
    v231 = WTF::StringImpl::hashSlowCase(v334[0]);
  else
    v231 = v230 >> 8;
  v319 = v5;
  v232 = 0;
  v233 = 1;
  while (2)
  {
    v234 = v231 & v229;
    v235 = (WTF::StringImpl **)(v228 + 16 * v234);
    v236 = *v235;
    if (*v235 == (WTF::StringImpl *)-1)
    {
      v232 = (WTF::StringImpl **)(v228 + 16 * v234);
      goto LABEL_390;
    }
    if (!v236)
    {
      if (v232)
      {
        *v232 = 0;
        v232[1] = 0;
        --*(_DWORD *)(*v227 - 16);
        v235 = v232;
      }
      v237 = v334[0];
      v127 = v327;
      if (v334[0])
        *(_DWORD *)v334[0] += 2;
      *v235 = v237;
      v8 = v325;
      v238 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v165);
      if (v238)
      {
        do
          v239 = __ldaxr(v238);
        while (__stlxr(v239 + 1, v238));
      }
      v240 = v235[1];
      v235[1] = (WTF::StringImpl *)v238;
      if (v240)
      {
        do
        {
          v241 = __ldaxr((unsigned int *)v240);
          v242 = v241 - 1;
        }
        while (__stlxr(v242, (unsigned int *)v240));
        if (!v242)
        {
          atomic_store(1u, (unsigned int *)v240);
          v314 = *((unsigned int *)v240 + 7);
          if ((_DWORD)v314)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v240 + 2), (WTF::StringImpl *)(*((_QWORD *)v240 + 2) + 32 * v314));
          v315 = (WTF *)*((_QWORD *)v240 + 2);
          if (v315)
          {
            *((_QWORD *)v240 + 2) = 0;
            *((_DWORD *)v240 + 6) = 0;
            WTF::fastFree(v315, v246);
          }
          WTF::fastFree(v240, v246);
          v8 = v325;
          v127 = v327;
        }
      }
      v243 = *v227;
      if (*v227)
        v244 = *(_DWORD *)(v243 - 12) + 1;
      else
        v244 = 1;
      *(_DWORD *)(v243 - 12) = v244;
      v254 = *v227;
      if (*v227)
        v255 = *(_DWORD *)(v254 - 12);
      else
        v255 = 0;
      v256 = (*(_DWORD *)(v254 - 16) + v255);
      v257 = *(unsigned int *)(v254 - 4);
      if (v257 > 0x400)
      {
        if (v257 > 2 * v256)
          goto LABEL_429;
      }
      else
      {
        if (3 * v257 > 4 * v256)
          goto LABEL_429;
        if (!(_DWORD)v257)
        {
          v258 = 8;
          goto LABEL_428;
        }
      }
      v258 = (_DWORD)v257 << (6 * *(_DWORD *)(v254 - 12) >= (2 * v257));
LABEL_428:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v227, v258);
      goto LABEL_429;
    }
    if (!WTF::equal(v236, v334[0], v226))
    {
LABEL_390:
      v231 = v233 + v234;
      ++v233;
      continue;
    }
    break;
  }
  v245 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v165);
  if (v245)
  {
    do
      v247 = __ldaxr(v245);
    while (__stlxr(v247 + 1, v245));
  }
  v248 = v228 + 16 * v234;
  v249 = *(_QWORD *)(v248 + 8);
  *(_QWORD *)(v248 + 8) = v245;
  v8 = v325;
  v127 = v327;
  if (v249)
  {
    do
    {
      v250 = __ldaxr((unsigned int *)v249);
      v251 = v250 - 1;
    }
    while (__stlxr(v251, (unsigned int *)v249));
    if (!v251)
    {
      atomic_store(1u, (unsigned int *)v249);
      v252 = *(unsigned int *)(v249 + 28);
      if ((_DWORD)v252)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v249 + 16), (WTF::StringImpl *)(*(_QWORD *)(v249 + 16) + 32 * v252));
      v253 = *(WTF **)(v249 + 16);
      if (v253)
      {
        *(_QWORD *)(v249 + 16) = 0;
        *(_DWORD *)(v249 + 24) = 0;
        WTF::fastFree(v253, v246);
      }
      WTF::fastFree((WTF *)v249, v246);
      v8 = v325;
      v127 = v327;
    }
  }
LABEL_429:
  v259 = v334[0];
  v334[0] = 0;
  v260 = (WTF::StringImpl *)v201[1];
  v201[1] = (uint64_t)v259;
  v5 = v319;
  v4 = v326;
  v125 = v330;
  if (v260)
  {
    v261 = *(_DWORD *)v260 - 2;
    if (*(_DWORD *)v260 != 2)
      goto LABEL_431;
    WTF::StringImpl::destroy(v260, (WTF::StringImpl *)v246);
    v260 = v334[0];
    v334[0] = 0;
    if (v260)
    {
      v261 = *(_DWORD *)v260 - 2;
      if (*(_DWORD *)v260 == 2)
        WTF::StringImpl::destroy(v260, v271);
      else
LABEL_431:
        *(_DWORD *)v260 = v261;
    }
  }
  v178 = v329;
  v262 = *v329;
  if (*v329)
    v263 = *(_DWORD *)(v262 - 12) + 1;
  else
    v263 = 1;
  *(_DWORD *)(v262 - 12) = v263;
  v264 = *v329;
  if (*v329)
    v265 = *(_DWORD *)(v264 - 12);
  else
    v265 = 0;
  v266 = (*(_DWORD *)(v264 - 16) + v265);
  v267 = *(unsigned int *)(v264 - 4);
  if (v267 > 0x400)
  {
    if (v267 <= 2 * v266)
    {
LABEL_441:
      v268 = (_DWORD)v267 << (6 * *(_DWORD *)(v264 - 12) >= (2 * v267));
      goto LABEL_443;
    }
  }
  else if (3 * v267 <= 4 * v266)
  {
    if ((_DWORD)v267)
      goto LABEL_441;
    v268 = 8;
LABEL_443:
    v201 = (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v329, v268, v201);
    v178 = v329;
    v264 = *v329;
    if (*v329)
      v267 = *(unsigned int *)(v264 - 4);
    else
      v267 = 0;
  }
  v223 = (uint64_t *)(v264 + 16 * v267);
LABEL_448:
  v269 = (uint64_t *)*v178;
  if (*v178)
    v269 += 2 * *((unsigned int *)v269 - 1);
  if (v201 != v269)
  {
    while (!*(_QWORD *)(*v201 + 8))
    {
      v270 = v201 + 2;
      v201 = v223;
      if (v270 != v223)
      {
        v201 = v270;
        while ((unint64_t)(*v201 + 1) <= 1)
        {
          v201 += 2;
          if (v201 == v223)
          {
            v201 = v223;
            break;
          }
        }
      }
      if (v201 == v269)
      {
        v201 = v269;
        break;
      }
    }
  }
  v166 = (WTF::StringImpl *)v201[1];
  v136 = v321;
  if (v166)
LABEL_255:
    *(_DWORD *)v166 += 2;
LABEL_256:
  v331 = v166;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v331, v167);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v125, &v332, (const WTF::StringImpl *)&v333, (uint64_t)v334);
  if (v335)
  {
    v169 = (uint64_t *)((char *)v127 + 24);
    v170 = *((unsigned int *)v127 + 9);
    if ((_DWORD)v170 == *((_DWORD *)v127 + 8))
    {
      v296 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v169, v170 + 1, (unint64_t)&v332);
      v170 = *((unsigned int *)v127 + 9);
      v297 = *((_QWORD *)v127 + 3);
      v298 = *v296;
      if (*v296)
        *v298 += 2;
      *(_QWORD *)(v297 + 8 * v170) = v298;
    }
    else
    {
      v171 = *v169;
      v172 = v332;
      if (v332)
        *(_DWORD *)v332 += 2;
      *(_QWORD *)(v171 + 8 * v170) = v172;
    }
    *((_DWORD *)v127 + 9) = v170 + 1;
  }
  v173 = v333;
  v333 = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v173;
  }
  v174 = v332;
  v332 = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
      WTF::StringImpl::destroy(v174, v168);
    else
      *(_DWORD *)v174 -= 2;
  }
  result = v331;
  v331 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(result, v168);
    else
      *(_DWORD *)result -= 2;
  }
  if ((*(_BYTE *)(v136 + 45) & 2) == 0)
  {
    v175 = *(_QWORD *)(v136 + 96) & 0xF80000000000;
    if (v175 == 0x380000000000 || v175 == 0x300000000000)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::Protocol::LayerTree::Layer::setPseudoElement(v127, (const WTF::String *)v334);
      result = v334[0];
      v334[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(result, v203);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_301:
  if ((v8 & 1) != 0 && *(_BYTE *)(v136 + 46) != 49)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v125, &v332, (const WTF::StringImpl *)&v333, (uint64_t)v334);
    if (v335)
    {
      v205 = (uint64_t *)((char *)v127 + 24);
      v206 = *((unsigned int *)v127 + 9);
      if ((_DWORD)v206 == *((_DWORD *)v127 + 8))
      {
        v299 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v205, v206 + 1, (unint64_t)&v332);
        v206 = *((unsigned int *)v127 + 9);
        v300 = *((_QWORD *)v127 + 3);
        v301 = *v299;
        if (*v299)
          *v301 += 2;
        *(_QWORD *)(v300 + 8 * v206) = v301;
      }
      else
      {
        v207 = *v205;
        v208 = v332;
        if (v332)
          *(_DWORD *)v332 += 2;
        *(_QWORD *)(v207 + 8 * v206) = v208;
      }
      *((_DWORD *)v127 + 9) = v206 + 1;
    }
    v209 = v333;
    v333 = 0;
    if (v209)
    {
      if (*(_DWORD *)v209 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v209;
    }
    result = v332;
    v332 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(result, v204);
      else
        *(_DWORD *)result -= 2;
    }
    if ((*(_BYTE *)(v136 + 45) & 2) != 0)
      v136 = *(_QWORD *)(*(_QWORD *)(v136 + 32) + 8);
    v210 = (*(_QWORD *)(v136 + 96) >> 43) & 0x1FLL;
    if ((_DWORD)v210 == 1 || (_DWORD)v210 == 2)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::Protocol::LayerTree::Layer::setPseudoElement(v127, (const WTF::String *)v334);
      result = v334[0];
      v334[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(result, v211);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  v212 = *(unsigned int *)(a3 + 28);
  if ((_DWORD)v212 == *(_DWORD *)(a3 + 24))
  {
    v213 = v212 + (v212 >> 2);
    if (v213 >= 0x10)
      v214 = v213 + 1;
    else
      v214 = 16;
    if (v214 <= v212 + 1)
      v215 = v212 + 1;
    else
      v215 = v214;
    if (v215 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195E3DE20);
    }
    v216 = *(void **)(a3 + 16);
    v217 = (void *)WTF::fastMalloc((WTF *)(8 * v215));
    *(_DWORD *)(a3 + 24) = v215;
    *(_QWORD *)(a3 + 16) = v217;
    result = (WTF::JSONImpl::Object *)memcpy(v217, v216, 8 * v212);
    if (v216)
    {
      if (*(void **)(a3 + 16) == v216)
      {
        *(_QWORD *)(a3 + 16) = 0;
        *(_DWORD *)(a3 + 24) = 0;
      }
      result = (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)v216, v218);
    }
    v212 = *(unsigned int *)(a3 + 28);
    v219 = (WTF::StringImpl **)(*(_QWORD *)(a3 + 16) + 8 * v212);
  }
  else
  {
    v219 = (WTF::StringImpl **)(*(_QWORD *)(a3 + 16) + 8 * v212);
  }
  *v219 = v127;
  *(_DWORD *)(a3 + 28) = v212 + 1;
LABEL_344:
  for (k = *(_QWORD *)(v4 + 64); k; k = *(_QWORD *)(k + 56))
    result = (WTF::JSONImpl::Object *)WebCore::InspectorLayerTreeAgent::gatherLayersUsingRenderLayerHierarchy(v5, k, a3);
  return result;
}

WTF::StringImpl *Inspector::Protocol::LayerTree::Layer::setPseudoElement(Inspector::Protocol::LayerTree::Layer *this, const WTF::String *a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _BYTE v17[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, &v15, (const WTF::StringImpl *)&v16, (uint64_t)v17);
  if (v17[16])
  {
    v6 = (uint64_t *)((char *)this + 24);
    v7 = *((unsigned int *)this + 9);
    if ((_DWORD)v7 == *((_DWORD *)this + 8))
    {
      v12 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v15);
      v7 = *((unsigned int *)this + 9);
      v13 = *((_QWORD *)this + 3);
      v14 = *v12;
      if (*v12)
        *v14 += 2;
      *(_QWORD *)(v13 + 8 * v7) = v14;
    }
    else
    {
      v8 = *v6;
      v9 = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)this + 9) = v7 + 1;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *Inspector::Protocol::LayerTree::IntRect::Builder<0>::setX(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _BYTE v18[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v16, (const WTF::StringImpl *)&v17, (uint64_t)v18);
  if (v18[16])
  {
    v6 = (uint64_t *)(v4 + 24);
    v7 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v4 + 32))
    {
      v13 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v16);
      v7 = *(unsigned int *)(v4 + 36);
      v14 = *(_QWORD *)(v4 + 24);
      v15 = *v13;
      if (*v13)
        *v15 += 2;
      *(_QWORD *)(v14 + 8 * v7) = v15;
    }
    else
    {
      v8 = *v6;
      v9 = v16;
      if (v16)
        *(_DWORD *)v16 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(v4 + 36) = v7 + 1;
  }
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::LayerTree::IntRect::Builder<1>::setY(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _BYTE v18[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v16, (const WTF::StringImpl *)&v17, (uint64_t)v18);
  if (v18[16])
  {
    v6 = (uint64_t *)(v4 + 24);
    v7 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v4 + 32))
    {
      v13 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v16);
      v7 = *(unsigned int *)(v4 + 36);
      v14 = *(_QWORD *)(v4 + 24);
      v15 = *v13;
      if (*v13)
        *v15 += 2;
      *(_QWORD *)(v14 + 8 * v7) = v15;
    }
    else
    {
      v8 = *v6;
      v9 = v16;
      if (v16)
        *(_DWORD *)v16 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(v4 + 36) = v7 + 1;
  }
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::LayerTree::IntRect::Builder<3>::setWidth(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _BYTE v18[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v16, (const WTF::StringImpl *)&v17, (uint64_t)v18);
  if (v18[16])
  {
    v6 = (uint64_t *)(v4 + 24);
    v7 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v4 + 32))
    {
      v13 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v16);
      v7 = *(unsigned int *)(v4 + 36);
      v14 = *(_QWORD *)(v4 + 24);
      v15 = *v13;
      if (*v13)
        *v15 += 2;
      *(_QWORD *)(v14 + 8 * v7) = v15;
    }
    else
    {
      v8 = *v6;
      v9 = v16;
      if (v16)
        *(_DWORD *)v16 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(v4 + 36) = v7 + 1;
  }
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::LayerTree::IntRect::Builder<7>::setHeight(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _BYTE v18[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v16, (const WTF::StringImpl *)&v17, (uint64_t)v18);
  if (v18[16])
  {
    v6 = (uint64_t *)(v4 + 24);
    v7 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v4 + 32))
    {
      v13 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v16);
      v7 = *(unsigned int *)(v4 + 36);
      v14 = *(_QWORD *)(v4 + 24);
      v15 = *v13;
      if (*v13)
        *v15 += 2;
      *(_QWORD *)(v14 + 8 * v7) = v15;
    }
    else
    {
      v8 = *v6;
      v9 = v16;
      if (v16)
        *(_DWORD *)v16 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(v4 + 36) = v7 + 1;
  }
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  return a1;
}

WTF::StringImpl *WebCore::InspectorLayerTreeAgent::reasonsForCompositingLayer@<X0>(WebCore::InspectorLayerTreeAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  WTF *v12;
  const WebCore::RenderLayer *v13;
  WebCore::RenderView *v14;
  WebCore::RenderLayerCompositor *v15;
  WTF::JSONImpl::Object *v16;
  int v17;
  WTF::StringImpl *result;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  _DWORD *v56;
  WTF::StringImpl *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  _DWORD *v62;
  WTF::StringImpl *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  _DWORD *v74;
  WTF::StringImpl *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  _DWORD *v80;
  WTF::StringImpl *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  _DWORD *v86;
  WTF::StringImpl *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  _DWORD *v92;
  WTF::StringImpl *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  _DWORD *v98;
  WTF::StringImpl *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  _DWORD *v104;
  WTF::StringImpl *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  _DWORD *v110;
  WTF::StringImpl *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  _DWORD *v116;
  WTF::StringImpl *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  _DWORD *v122;
  WTF::StringImpl *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  _DWORD *v128;
  WTF::StringImpl *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  _DWORD *v134;
  WTF::StringImpl *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  _DWORD *v140;
  WTF::StringImpl *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  _DWORD *v146;
  WTF::StringImpl *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  _DWORD *v152;
  WTF::StringImpl *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  _DWORD *v158;
  WTF::StringImpl *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  _DWORD *v164;
  _DWORD **v165;
  uint64_t v166;
  _DWORD *v167;
  _DWORD **v168;
  uint64_t v169;
  _DWORD *v170;
  _DWORD **v171;
  uint64_t v172;
  _DWORD *v173;
  _DWORD **v174;
  uint64_t v175;
  _DWORD *v176;
  _DWORD **v177;
  uint64_t v178;
  _DWORD *v179;
  _DWORD **v180;
  uint64_t v181;
  _DWORD *v182;
  _DWORD **v183;
  uint64_t v184;
  _DWORD *v185;
  _DWORD **v186;
  uint64_t v187;
  _DWORD *v188;
  _DWORD **v189;
  uint64_t v190;
  _DWORD *v191;
  _DWORD **v192;
  uint64_t v193;
  _DWORD *v194;
  _DWORD **v195;
  uint64_t v196;
  _DWORD *v197;
  _DWORD **v198;
  uint64_t v199;
  _DWORD *v200;
  _DWORD **v201;
  uint64_t v202;
  _DWORD *v203;
  _DWORD **v204;
  uint64_t v205;
  _DWORD *v206;
  _DWORD **v207;
  uint64_t v208;
  _DWORD *v209;
  _DWORD **v210;
  uint64_t v211;
  _DWORD *v212;
  _DWORD **v213;
  uint64_t v214;
  _DWORD *v215;
  _DWORD **v216;
  uint64_t v217;
  _DWORD *v218;
  _DWORD **v219;
  uint64_t v220;
  _DWORD *v221;
  _DWORD **v222;
  uint64_t v223;
  _DWORD *v224;
  _DWORD **v225;
  uint64_t v226;
  _DWORD *v227;
  _DWORD **v228;
  uint64_t v229;
  _DWORD *v230;
  _DWORD **v231;
  uint64_t v232;
  _DWORD *v233;
  _DWORD **v234;
  uint64_t v235;
  _DWORD *v236;
  WebCore::RenderLayerCompositor *v237;
  WebCore::RenderLayerCompositor *v238;
  WTF *v239;
  void *v240;
  WTF::StringImpl *v241;
  _DWORD *v242;
  _QWORD v243[2];
  char v244;

  v5 = *((_QWORD *)this + 8);
  if (!v5)
    goto LABEL_31;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = *((_DWORD *)*a2 + 4);
  v9 = v8 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v8 >> 8;
  for (i = 0; ; v9 = ++i + v11)
  {
    v11 = v9 & v7;
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != (WTF *)-1)
    {
      if (!v12)
        goto LABEL_31;
      if ((WTF::equal(v12, *a2, a3) & 1) != 0)
        break;
    }
  }
  v13 = *(const WebCore::RenderLayer **)(v5 + 16 * v11 + 8);
  if (!v13)
  {
LABEL_31:
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v26 = 1;
    goto LABEL_32;
  }
  v14 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 4) + 24) + 8)
                                                        + 40)
                                            + 8)
                                + 1944);
  v15 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v14 + 50);
  if (!v15)
  {
    v237 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v15 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v237, v14);
    v238 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v14 + 50);
    *((_QWORD *)v14 + 50) = v15;
    if (v238)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v238);
      WTF::fastFree(v239, v240);
      v15 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v14 + 50);
    }
  }
  v16 = (WTF::JSONImpl::Object *)WebCore::RenderLayerCompositor::reasonsForCompositing(v15, v13);
  v17 = (int)v16;
  result = (WTF::StringImpl *)WTF::JSONImpl::Object::create(v16);
  v19 = v243[0];
  if ((v17 & 1) != 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v243[0] + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
    if (v244)
    {
      v21 = (uint64_t *)(v19 + 24);
      v22 = *(unsigned int *)(v19 + 36);
      if ((_DWORD)v22 == *(_DWORD *)(v19 + 32))
      {
        v168 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v241);
        v22 = *(unsigned int *)(v19 + 36);
        v169 = *(_QWORD *)(v19 + 24);
        v170 = *v168;
        if (*v168)
          *v170 += 2;
        *(_QWORD *)(v169 + 8 * v22) = v170;
      }
      else
      {
        v23 = *v21;
        v24 = v241;
        if (v241)
          *(_DWORD *)v241 += 2;
        *(_QWORD *)(v23 + 8 * v22) = v24;
      }
      *(_DWORD *)(v19 + 36) = v22 + 1;
    }
    v25 = v242;
    v242 = 0;
    if (v25)
    {
      if (*v25 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v25;
    }
    result = v241;
    v241 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
        if ((v17 & 2) != 0)
          goto LABEL_35;
        goto LABEL_26;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if ((v17 & 2) != 0)
    goto LABEL_35;
LABEL_26:
  if ((v17 & 4) == 0 && (v17 & 8) == 0 && (v17 & 0x10) == 0 && (v17 & 0x8000000) == 0)
    goto LABEL_47;
LABEL_35:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v28 = (uint64_t *)(v19 + 24);
    v29 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v19 + 32))
    {
      v165 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1, (unint64_t)&v241);
      v29 = *(unsigned int *)(v19 + 36);
      v166 = *(_QWORD *)(v19 + 24);
      v167 = *v165;
      if (*v165)
        *v167 += 2;
      *(_QWORD *)(v166 + 8 * v29) = v167;
    }
    else
    {
      v30 = *v28;
      v31 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v30 + 8 * v29) = v31;
    }
    *(_DWORD *)(v19 + 36) = v29 + 1;
  }
  v32 = v242;
  v242 = 0;
  if (v32)
  {
    if (*v32 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v32;
  }
  result = v241;
  v241 = 0;
  if (!result)
  {
LABEL_47:
    if ((v17 & 0x20) == 0)
      goto LABEL_60;
    goto LABEL_48;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_47;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
  if ((v17 & 0x20) == 0)
    goto LABEL_60;
LABEL_48:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v34 = (uint64_t *)(v19 + 24);
    v35 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v35 == *(_DWORD *)(v19 + 32))
    {
      v171 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)&v241);
      v35 = *(unsigned int *)(v19 + 36);
      v172 = *(_QWORD *)(v19 + 24);
      v173 = *v171;
      if (*v171)
        *v173 += 2;
      *(_QWORD *)(v172 + 8 * v35) = v173;
    }
    else
    {
      v36 = *v34;
      v37 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v36 + 8 * v35) = v37;
    }
    *(_DWORD *)(v19 + 36) = v35 + 1;
  }
  v38 = v242;
  v242 = 0;
  if (v38)
  {
    if (*v38 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v38;
  }
  result = v241;
  v241 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_60:
  if ((v17 & 0x40) == 0)
    goto LABEL_73;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v40 = (uint64_t *)(v19 + 24);
    v41 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v19 + 32))
    {
      v174 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v241);
      v41 = *(unsigned int *)(v19 + 36);
      v175 = *(_QWORD *)(v19 + 24);
      v176 = *v174;
      if (*v174)
        *v176 += 2;
      *(_QWORD *)(v175 + 8 * v41) = v176;
    }
    else
    {
      v42 = *v40;
      v43 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v42 + 8 * v41) = v43;
    }
    *(_DWORD *)(v19 + 36) = v41 + 1;
  }
  v44 = v242;
  v242 = 0;
  if (v44)
  {
    if (*v44 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v44;
  }
  result = v241;
  v241 = 0;
  if (!result)
  {
LABEL_73:
    if ((v17 & 0x80) == 0)
      goto LABEL_86;
    goto LABEL_74;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_73;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
  if ((v17 & 0x80) == 0)
    goto LABEL_86;
LABEL_74:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v46 = (uint64_t *)(v19 + 24);
    v47 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v19 + 32))
    {
      v177 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v241);
      v47 = *(unsigned int *)(v19 + 36);
      v178 = *(_QWORD *)(v19 + 24);
      v179 = *v177;
      if (*v177)
        *v179 += 2;
      *(_QWORD *)(v178 + 8 * v47) = v179;
    }
    else
    {
      v48 = *v46;
      v49 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v48 + 8 * v47) = v49;
    }
    *(_DWORD *)(v19 + 36) = v47 + 1;
  }
  v50 = v242;
  v242 = 0;
  if (v50)
  {
    if (*v50 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v50;
  }
  result = v241;
  v241 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v45);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_86:
  if ((v17 & 0x100) == 0)
    goto LABEL_99;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v52 = (uint64_t *)(v19 + 24);
    v53 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v53 == *(_DWORD *)(v19 + 32))
    {
      v180 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v53 + 1, (unint64_t)&v241);
      v53 = *(unsigned int *)(v19 + 36);
      v181 = *(_QWORD *)(v19 + 24);
      v182 = *v180;
      if (*v180)
        *v182 += 2;
      *(_QWORD *)(v181 + 8 * v53) = v182;
    }
    else
    {
      v54 = *v52;
      v55 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v54 + 8 * v53) = v55;
    }
    *(_DWORD *)(v19 + 36) = v53 + 1;
  }
  v56 = v242;
  v242 = 0;
  if (v56)
  {
    if (*v56 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v56;
  }
  result = v241;
  v241 = 0;
  if (!result)
  {
LABEL_99:
    if ((v17 & 0x200) == 0)
      goto LABEL_112;
    goto LABEL_100;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_99;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v51);
  if ((v17 & 0x200) == 0)
    goto LABEL_112;
LABEL_100:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v58 = (uint64_t *)(v19 + 24);
    v59 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v59 == *(_DWORD *)(v19 + 32))
    {
      v183 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v58, v59 + 1, (unint64_t)&v241);
      v59 = *(unsigned int *)(v19 + 36);
      v184 = *(_QWORD *)(v19 + 24);
      v185 = *v183;
      if (*v183)
        *v185 += 2;
      *(_QWORD *)(v184 + 8 * v59) = v185;
    }
    else
    {
      v60 = *v58;
      v61 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v60 + 8 * v59) = v61;
    }
    *(_DWORD *)(v19 + 36) = v59 + 1;
  }
  v62 = v242;
  v242 = 0;
  if (v62)
  {
    if (*v62 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v62;
  }
  result = v241;
  v241 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v57);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_112:
  if ((v17 & 0x400) == 0)
    goto LABEL_125;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v64 = (uint64_t *)(v19 + 24);
    v65 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v65 == *(_DWORD *)(v19 + 32))
    {
      v186 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)&v241);
      v65 = *(unsigned int *)(v19 + 36);
      v187 = *(_QWORD *)(v19 + 24);
      v188 = *v186;
      if (*v186)
        *v188 += 2;
      *(_QWORD *)(v187 + 8 * v65) = v188;
    }
    else
    {
      v66 = *v64;
      v67 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v66 + 8 * v65) = v67;
    }
    *(_DWORD *)(v19 + 36) = v65 + 1;
  }
  v68 = v242;
  v242 = 0;
  if (v68)
  {
    if (*v68 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v68;
  }
  result = v241;
  v241 = 0;
  if (!result)
  {
LABEL_125:
    if ((v17 & 0x800) == 0)
      goto LABEL_138;
    goto LABEL_126;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_125;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v63);
  if ((v17 & 0x800) == 0)
    goto LABEL_138;
LABEL_126:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v70 = (uint64_t *)(v19 + 24);
    v71 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v71 == *(_DWORD *)(v19 + 32))
    {
      v189 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v70, v71 + 1, (unint64_t)&v241);
      v71 = *(unsigned int *)(v19 + 36);
      v190 = *(_QWORD *)(v19 + 24);
      v191 = *v189;
      if (*v189)
        *v191 += 2;
      *(_QWORD *)(v190 + 8 * v71) = v191;
    }
    else
    {
      v72 = *v70;
      v73 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v72 + 8 * v71) = v73;
    }
    *(_DWORD *)(v19 + 36) = v71 + 1;
  }
  v74 = v242;
  v242 = 0;
  if (v74)
  {
    if (*v74 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v74;
  }
  result = v241;
  v241 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v69);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_138:
  if ((v17 & 0x1000) == 0)
    goto LABEL_151;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v76 = (uint64_t *)(v19 + 24);
    v77 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v77 == *(_DWORD *)(v19 + 32))
    {
      v192 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v76, v77 + 1, (unint64_t)&v241);
      v77 = *(unsigned int *)(v19 + 36);
      v193 = *(_QWORD *)(v19 + 24);
      v194 = *v192;
      if (*v192)
        *v194 += 2;
      *(_QWORD *)(v193 + 8 * v77) = v194;
    }
    else
    {
      v78 = *v76;
      v79 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v78 + 8 * v77) = v79;
    }
    *(_DWORD *)(v19 + 36) = v77 + 1;
  }
  v80 = v242;
  v242 = 0;
  if (v80)
  {
    if (*v80 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v80;
  }
  result = v241;
  v241 = 0;
  if (!result)
  {
LABEL_151:
    if ((v17 & 0x2000) == 0)
      goto LABEL_164;
    goto LABEL_152;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_151;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v75);
  if ((v17 & 0x2000) == 0)
    goto LABEL_164;
LABEL_152:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v82 = (uint64_t *)(v19 + 24);
    v83 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v83 == *(_DWORD *)(v19 + 32))
    {
      v195 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v241);
      v83 = *(unsigned int *)(v19 + 36);
      v196 = *(_QWORD *)(v19 + 24);
      v197 = *v195;
      if (*v195)
        *v197 += 2;
      *(_QWORD *)(v196 + 8 * v83) = v197;
    }
    else
    {
      v84 = *v82;
      v85 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *(_DWORD *)(v19 + 36) = v83 + 1;
  }
  v86 = v242;
  v242 = 0;
  if (v86)
  {
    if (*v86 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v86;
  }
  result = v241;
  v241 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v81);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_164:
  if ((v17 & 0x8000) == 0)
    goto LABEL_177;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v88 = (uint64_t *)(v19 + 24);
    v89 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v89 == *(_DWORD *)(v19 + 32))
    {
      v198 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v241);
      v89 = *(unsigned int *)(v19 + 36);
      v199 = *(_QWORD *)(v19 + 24);
      v200 = *v198;
      if (*v198)
        *v200 += 2;
      *(_QWORD *)(v199 + 8 * v89) = v200;
    }
    else
    {
      v90 = *v88;
      v91 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v90 + 8 * v89) = v91;
    }
    *(_DWORD *)(v19 + 36) = v89 + 1;
  }
  v92 = v242;
  v242 = 0;
  if (v92)
  {
    if (*v92 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v92;
  }
  result = v241;
  v241 = 0;
  if (!result)
  {
LABEL_177:
    if ((v17 & 0x10000) == 0)
      goto LABEL_190;
    goto LABEL_178;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_177;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v87);
  if ((v17 & 0x10000) == 0)
    goto LABEL_190;
LABEL_178:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v94 = (uint64_t *)(v19 + 24);
    v95 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v95 == *(_DWORD *)(v19 + 32))
    {
      v201 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v94, v95 + 1, (unint64_t)&v241);
      v95 = *(unsigned int *)(v19 + 36);
      v202 = *(_QWORD *)(v19 + 24);
      v203 = *v201;
      if (*v201)
        *v203 += 2;
      *(_QWORD *)(v202 + 8 * v95) = v203;
    }
    else
    {
      v96 = *v94;
      v97 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v96 + 8 * v95) = v97;
    }
    *(_DWORD *)(v19 + 36) = v95 + 1;
  }
  v98 = v242;
  v242 = 0;
  if (v98)
  {
    if (*v98 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v98;
  }
  result = v241;
  v241 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v93);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_190:
  if ((v17 & 0x20000) == 0)
    goto LABEL_203;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v100 = (uint64_t *)(v19 + 24);
    v101 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v101 == *(_DWORD *)(v19 + 32))
    {
      v204 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v100, v101 + 1, (unint64_t)&v241);
      v101 = *(unsigned int *)(v19 + 36);
      v205 = *(_QWORD *)(v19 + 24);
      v206 = *v204;
      if (*v204)
        *v206 += 2;
      *(_QWORD *)(v205 + 8 * v101) = v206;
    }
    else
    {
      v102 = *v100;
      v103 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v102 + 8 * v101) = v103;
    }
    *(_DWORD *)(v19 + 36) = v101 + 1;
  }
  v104 = v242;
  v242 = 0;
  if (v104)
  {
    if (*v104 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v104;
  }
  result = v241;
  v241 = 0;
  if (!result)
  {
LABEL_203:
    if ((v17 & 0x40000) == 0)
      goto LABEL_216;
    goto LABEL_204;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_203;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v99);
  if ((v17 & 0x40000) == 0)
    goto LABEL_216;
LABEL_204:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v106 = (uint64_t *)(v19 + 24);
    v107 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v107 == *(_DWORD *)(v19 + 32))
    {
      v207 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v107 + 1, (unint64_t)&v241);
      v107 = *(unsigned int *)(v19 + 36);
      v208 = *(_QWORD *)(v19 + 24);
      v209 = *v207;
      if (*v207)
        *v209 += 2;
      *(_QWORD *)(v208 + 8 * v107) = v209;
    }
    else
    {
      v108 = *v106;
      v109 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v108 + 8 * v107) = v109;
    }
    *(_DWORD *)(v19 + 36) = v107 + 1;
  }
  v110 = v242;
  v242 = 0;
  if (v110)
  {
    if (*v110 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v110;
  }
  result = v241;
  v241 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v105);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_216:
  if ((v17 & 0x80000) == 0)
    goto LABEL_229;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v112 = (uint64_t *)(v19 + 24);
    v113 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v113 == *(_DWORD *)(v19 + 32))
    {
      v210 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, v113 + 1, (unint64_t)&v241);
      v113 = *(unsigned int *)(v19 + 36);
      v211 = *(_QWORD *)(v19 + 24);
      v212 = *v210;
      if (*v210)
        *v212 += 2;
      *(_QWORD *)(v211 + 8 * v113) = v212;
    }
    else
    {
      v114 = *v112;
      v115 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v114 + 8 * v113) = v115;
    }
    *(_DWORD *)(v19 + 36) = v113 + 1;
  }
  v116 = v242;
  v242 = 0;
  if (v116)
  {
    if (*v116 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v116;
  }
  result = v241;
  v241 = 0;
  if (!result)
  {
LABEL_229:
    if ((v17 & 0x100000) == 0)
      goto LABEL_242;
    goto LABEL_230;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_229;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v111);
  if ((v17 & 0x100000) == 0)
    goto LABEL_242;
LABEL_230:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v118 = (uint64_t *)(v19 + 24);
    v119 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v119 == *(_DWORD *)(v19 + 32))
    {
      v213 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v118, v119 + 1, (unint64_t)&v241);
      v119 = *(unsigned int *)(v19 + 36);
      v214 = *(_QWORD *)(v19 + 24);
      v215 = *v213;
      if (*v213)
        *v215 += 2;
      *(_QWORD *)(v214 + 8 * v119) = v215;
    }
    else
    {
      v120 = *v118;
      v121 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v120 + 8 * v119) = v121;
    }
    *(_DWORD *)(v19 + 36) = v119 + 1;
  }
  v122 = v242;
  v242 = 0;
  if (v122)
  {
    if (*v122 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v122;
  }
  result = v241;
  v241 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v117);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_242:
  if ((v17 & 0x200000) == 0)
    goto LABEL_255;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v124 = (uint64_t *)(v19 + 24);
    v125 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v125 == *(_DWORD *)(v19 + 32))
    {
      v216 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v124, v125 + 1, (unint64_t)&v241);
      v125 = *(unsigned int *)(v19 + 36);
      v217 = *(_QWORD *)(v19 + 24);
      v218 = *v216;
      if (*v216)
        *v218 += 2;
      *(_QWORD *)(v217 + 8 * v125) = v218;
    }
    else
    {
      v126 = *v124;
      v127 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v126 + 8 * v125) = v127;
    }
    *(_DWORD *)(v19 + 36) = v125 + 1;
  }
  v128 = v242;
  v242 = 0;
  if (v128)
  {
    if (*v128 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v128;
  }
  result = v241;
  v241 = 0;
  if (!result)
  {
LABEL_255:
    if ((v17 & 0x4000000) == 0)
      goto LABEL_268;
    goto LABEL_256;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_255;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v123);
  if ((v17 & 0x4000000) == 0)
    goto LABEL_268;
LABEL_256:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v130 = (uint64_t *)(v19 + 24);
    v131 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v131 == *(_DWORD *)(v19 + 32))
    {
      v219 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v130, v131 + 1, (unint64_t)&v241);
      v131 = *(unsigned int *)(v19 + 36);
      v220 = *(_QWORD *)(v19 + 24);
      v221 = *v219;
      if (*v219)
        *v221 += 2;
      *(_QWORD *)(v220 + 8 * v131) = v221;
    }
    else
    {
      v132 = *v130;
      v133 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v132 + 8 * v131) = v133;
    }
    *(_DWORD *)(v19 + 36) = v131 + 1;
  }
  v134 = v242;
  v242 = 0;
  if (v134)
  {
    if (*v134 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v134;
  }
  result = v241;
  v241 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v129);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_268:
  if ((v17 & 0x400000) == 0)
    goto LABEL_281;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v136 = (uint64_t *)(v19 + 24);
    v137 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v137 == *(_DWORD *)(v19 + 32))
    {
      v222 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)&v241);
      v137 = *(unsigned int *)(v19 + 36);
      v223 = *(_QWORD *)(v19 + 24);
      v224 = *v222;
      if (*v222)
        *v224 += 2;
      *(_QWORD *)(v223 + 8 * v137) = v224;
    }
    else
    {
      v138 = *v136;
      v139 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v138 + 8 * v137) = v139;
    }
    *(_DWORD *)(v19 + 36) = v137 + 1;
  }
  v140 = v242;
  v242 = 0;
  if (v140)
  {
    if (*v140 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v140;
  }
  result = v241;
  v241 = 0;
  if (!result)
  {
LABEL_281:
    if ((v17 & 0x800000) == 0)
      goto LABEL_294;
    goto LABEL_282;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_281;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v135);
  if ((v17 & 0x800000) == 0)
    goto LABEL_294;
LABEL_282:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
  if (v244)
  {
    v142 = (uint64_t *)(v19 + 24);
    v143 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v143 == *(_DWORD *)(v19 + 32))
    {
      v225 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v142, v143 + 1, (unint64_t)&v241);
      v143 = *(unsigned int *)(v19 + 36);
      v226 = *(_QWORD *)(v19 + 24);
      v227 = *v225;
      if (*v225)
        *v227 += 2;
      *(_QWORD *)(v226 + 8 * v143) = v227;
    }
    else
    {
      v144 = *v142;
      v145 = v241;
      if (v241)
        *(_DWORD *)v241 += 2;
      *(_QWORD *)(v144 + 8 * v143) = v145;
    }
    *(_DWORD *)(v19 + 36) = v143 + 1;
  }
  v146 = v242;
  v242 = 0;
  if (v146)
  {
    if (*v146 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v146;
  }
  result = v241;
  v241 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v141);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_294:
  if ((v17 & 0x1000000) != 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
    if (v244)
    {
      v148 = (uint64_t *)(v19 + 24);
      v149 = *(unsigned int *)(v19 + 36);
      if ((_DWORD)v149 == *(_DWORD *)(v19 + 32))
      {
        v228 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v148, v149 + 1, (unint64_t)&v241);
        v149 = *(unsigned int *)(v19 + 36);
        v229 = *(_QWORD *)(v19 + 24);
        v230 = *v228;
        if (*v228)
          *v230 += 2;
        *(_QWORD *)(v229 + 8 * v149) = v230;
      }
      else
      {
        v150 = *v148;
        v151 = v241;
        if (v241)
          *(_DWORD *)v241 += 2;
        *(_QWORD *)(v150 + 8 * v149) = v151;
      }
      *(_DWORD *)(v19 + 36) = v149 + 1;
    }
    v152 = v242;
    v242 = 0;
    if (v152)
    {
      if (*v152 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v152;
    }
    result = v241;
    v241 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v147);
        if ((v17 & 0x2000000) != 0)
          goto LABEL_308;
        goto LABEL_320;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if ((v17 & 0x2000000) != 0)
  {
LABEL_308:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
    if (v244)
    {
      v154 = (uint64_t *)(v19 + 24);
      v155 = *(unsigned int *)(v19 + 36);
      if ((_DWORD)v155 == *(_DWORD *)(v19 + 32))
      {
        v231 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v154, v155 + 1, (unint64_t)&v241);
        v155 = *(unsigned int *)(v19 + 36);
        v232 = *(_QWORD *)(v19 + 24);
        v233 = *v231;
        if (*v231)
          *v233 += 2;
        *(_QWORD *)(v232 + 8 * v155) = v233;
      }
      else
      {
        v156 = *v154;
        v157 = v241;
        if (v241)
          *(_DWORD *)v241 += 2;
        *(_QWORD *)(v156 + 8 * v155) = v157;
      }
      *(_DWORD *)(v19 + 36) = v155 + 1;
    }
    v158 = v242;
    v242 = 0;
    if (v158)
    {
      if (*v158 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v158;
    }
    result = v241;
    v241 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v153);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_320:
  if ((v17 & 0x10000000) != 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v241, (const WTF::StringImpl *)&v242, (uint64_t)v243);
    if (v244)
    {
      v160 = (uint64_t *)(v19 + 24);
      v161 = *(unsigned int *)(v19 + 36);
      if ((_DWORD)v161 == *(_DWORD *)(v19 + 32))
      {
        v234 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v160, v161 + 1, (unint64_t)&v241);
        v161 = *(unsigned int *)(v19 + 36);
        v235 = *(_QWORD *)(v19 + 24);
        v236 = *v234;
        if (*v234)
          *v236 += 2;
        *(_QWORD *)(v235 + 8 * v161) = v236;
      }
      else
      {
        v162 = *v160;
        v163 = v241;
        if (v241)
          *(_DWORD *)v241 += 2;
        *(_QWORD *)(v162 + 8 * v161) = v163;
      }
      *(_DWORD *)(v19 + 36) = v161 + 1;
    }
    v164 = v242;
    v242 = 0;
    if (v164)
    {
      if (*v164 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v164;
    }
    result = v241;
    v241 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v159);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v26 = 0;
  *(_QWORD *)a4 = v19;
LABEL_32:
  *(_DWORD *)(a4 + 8) = v26;
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorLayerTreeAgent::reasonsForCompositingLayer@<X0>(WebCore::InspectorLayerTreeAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorLayerTreeAgent::reasonsForCompositingLayer((WebCore::InspectorLayerTreeAgent *)((char *)this - 32), a2, a3, a4);
}

uint64_t *WTF::HashMap<WebCore::RenderLayer const*,WTF::String,WTF::DefaultHash<WebCore::RenderLayer const*>,WTF::HashTraits<WebCore::RenderLayer const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *result;
  if (!*result)
    goto LABEL_9;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = ~(*a2 << 32) + *a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v10;
      if (v9 == *a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v8 != *(_DWORD *)(v3 - 4))
  {
    v11 = (_QWORD *)(v3 + 16 * v8);
    v12 = v11[1];
    v11[1] = 0;
    *a3 = v12;
    v13 = (_QWORD *)*result;
    if (!*result || (v13 += 2 * *((unsigned int *)v13 - 1), v13 != v11))
    {
      if (v13 != v11)
      {
        *v11 = -1;
        v11[1] = 0;
        ++*(_DWORD *)(*result - 16);
        v14 = *result;
        if (*result)
          v15 = *(_DWORD *)(v14 - 12) - 1;
        else
          v15 = -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *result;
        if (*result)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            return WTF::HashTable<WebCore::CSSStyleRule const*,WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleRule const*>>::rehash(result, v18 >> 1, 0);
        }
      }
    }
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WebCore::RenderLayer const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RenderLayer const*>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
      {
        v12 = (WTF::StringImpl **)*a1;
        if (!*a1)
          return 0;
        v13 = *((unsigned int *)v12 - 1);
        v14 = &v12[2 * v13];
        goto LABEL_14;
      }
      if ((WTF::equal(v11, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  v14 = (WTF::StringImpl **)(v3 + 16 * v10);
  v12 = (WTF::StringImpl **)*a1;
  if (!*a1)
    goto LABEL_15;
  v13 = *((unsigned int *)v12 - 1);
LABEL_14:
  v12 += 2 * v13;
  if (v12 == v14)
    return 0;
LABEL_15:
  if (v12 != v14)
  {
    v15 = *v14;
    *v14 = (WTF::StringImpl *)-1;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v15 -= 2;
    }
    ++*(_DWORD *)(*a1 - 16);
    v16 = *a1;
    if (*a1)
      v17 = *(_DWORD *)(v16 - 12) - 1;
    else
      v17 = -1;
    *(_DWORD *)(v16 - 12) = v17;
    v19 = *a1;
    if (*a1)
    {
      v20 = 6 * *(_DWORD *)(v19 - 12);
      v21 = *(_DWORD *)(v19 - 4);
      if (v20 < v21 && v21 >= 9)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v21 >> 1);
    }
  }
  return 1;
}

void WebCore::InspectorMemoryAgent::~InspectorMemoryAgent(WebCore::InspectorMemoryAgent *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::MemoryBackendDispatcherHandler::~MemoryBackendDispatcherHandler((WebCore::InspectorMemoryAgent *)((char *)this + 32));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::MemoryBackendDispatcherHandler::~MemoryBackendDispatcherHandler((WebCore::InspectorMemoryAgent *)((char *)this + 32));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, v5);
}

void `non-virtual thunk to'WebCore::InspectorMemoryAgent::~InspectorMemoryAgent(WebCore::InspectorMemoryAgent *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::MemoryBackendDispatcherHandler::~MemoryBackendDispatcherHandler(this);
  v6 = (WTF::StringImpl *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 4) = off_1E33EFC38;
  *((_QWORD *)this - 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  _DWORD *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  Inspector::MemoryBackendDispatcherHandler::~MemoryBackendDispatcherHandler(this);
  v6 = (WTF::StringImpl *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 4) = off_1E33EFC38;
  *((_QWORD *)this - 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree((WebCore::InspectorMemoryAgent *)((char *)this - 32), v5);
}

uint64_t WebCore::InspectorMemoryAgent::didCreateFrontendAndBackend(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 16) + 56) = result;
  return result;
}

uint64_t WebCore::InspectorMemoryAgent::willDestroyFrontendAndBackend(WebCore::ResourceUsageThread *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t result;
  WTF::StringImpl *v6;

  v3 = *((_QWORD *)this + 2);
  if (*(WebCore::ResourceUsageThread **)(v3 + 184) == this)
  {
    *(_QWORD *)(v3 + 184) = 0;
    *((_BYTE *)this + 56) = 0;
    result = WebCore::ResourceUsageThread::removeObserver(this, a2);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (uint64_t)v6;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        result = WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 2) + 56) = 0;
  return result;
}

uint64_t WebCore::InspectorMemoryAgent::disable@<X0>(WebCore::InspectorMemoryAgent *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *((_QWORD *)this + 2);
  if (*(WebCore::InspectorMemoryAgent **)(v4 + 184) == this)
  {
    *(_QWORD *)(v4 + 184) = 0;
    *((_BYTE *)this + 56) = 0;
    result = WebCore::ResourceUsageThread::removeObserver(this, a2);
    v6 = 0;
    *a3 = 0;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 1;
  }
  a3[8] = v6;
  return result;
}

uint64_t WebCore::InspectorMemoryAgent::enable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(this + 16);
  if (*(_QWORD *)(v3 + 184) == this)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_QWORD *)(v3 + 184) = this;
    *a2 = 0;
  }
  a2[8] = v4;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorMemoryAgent::enable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(this - 16);
  if (*(_QWORD *)(v3 + 184) == this - 32)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_QWORD *)(v3 + 184) = this - 32;
    *a2 = 0;
  }
  a2[8] = v4;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorMemoryAgent::disable@<X0>(WebCore::InspectorMemoryAgent *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *((_QWORD *)this - 2);
  if (*(WebCore::InspectorMemoryAgent **)(v4 + 184) == (WebCore::InspectorMemoryAgent *)((char *)this - 32))
  {
    *(_QWORD *)(v4 + 184) = 0;
    *((_BYTE *)this + 24) = 0;
    result = WebCore::ResourceUsageThread::removeObserver((WebCore::InspectorMemoryAgent *)((char *)this - 32), a2);
    v6 = 0;
    *a3 = 0;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 1;
  }
  a3[8] = v6;
  return result;
}

_BYTE *WebCore::InspectorMemoryAgent::startTracking@<X0>(_BYTE *this@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  Inspector::MemoryFrontendDispatcher *v6;
  double *v7;
  double v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!this[56])
  {
    v3 = this;
    v9[0] = &off_1E33F0A00;
    v9[1] = this;
    v10 = v9;
    WebCore::ResourceUsageThread::addObserver((WTF::RunLoop *)this, (const void *)2, (char *)v9);
    v4 = v10;
    if (v10 == v9)
    {
      v5 = 4;
      v4 = v9;
    }
    else
    {
      if (!v10)
      {
LABEL_7:
        v3[56] = 1;
        v6 = (Inspector::MemoryFrontendDispatcher *)*((_QWORD *)v3 + 5);
        v7 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 3) + 56))(*((_QWORD *)v3 + 3));
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
        this = (_BYTE *)Inspector::MemoryFrontendDispatcher::trackingStart(v6, v7[1] + v8 - v7[2]);
        goto LABEL_8;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_7;
  }
LABEL_8:
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorMemoryAgent::startTracking@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  Inspector::MemoryFrontendDispatcher *v6;
  double *v7;
  double v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 24))
  {
    v3 = this;
    v9[0] = &off_1E33F0A00;
    v9[1] = this - 32;
    v10 = v9;
    WebCore::ResourceUsageThread::addObserver((WTF::RunLoop *)(this - 32), (const void *)2, (char *)v9);
    v4 = v10;
    if (v10 == v9)
    {
      v5 = 4;
      v4 = v9;
    }
    else
    {
      if (!v10)
      {
LABEL_7:
        *(_BYTE *)(v3 + 24) = 1;
        v6 = *(Inspector::MemoryFrontendDispatcher **)(v3 + 8);
        v7 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 8) + 56))(*(_QWORD *)(v3 - 8));
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
        this = Inspector::MemoryFrontendDispatcher::trackingStart(v6, v7[1] + v8 - v7[2]);
        goto LABEL_8;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_7;
  }
LABEL_8:
  *a2 = 0;
  a2[8] = 0;
  return this;
}

_BYTE *WebCore::InspectorMemoryAgent::stopTracking@<X0>(_BYTE *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  Inspector::MemoryFrontendDispatcher *v5;
  double *v6;
  double v7;

  if (this[56])
  {
    v4 = this;
    WebCore::ResourceUsageThread::removeObserver((WebCore::ResourceUsageThread *)this, a2);
    v4[56] = 0;
    v5 = (Inspector::MemoryFrontendDispatcher *)*((_QWORD *)v4 + 5);
    v6 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 3) + 56))(*((_QWORD *)v4 + 3));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
    this = (_BYTE *)Inspector::MemoryFrontendDispatcher::trackingComplete(v5, v6[1] + v7 - v6[2]);
  }
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorMemoryAgent::stopTracking@<X0>(uint64_t this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  Inspector::MemoryFrontendDispatcher *v5;
  double *v6;
  double v7;

  if (*(_BYTE *)(this + 24))
  {
    v4 = this;
    WebCore::ResourceUsageThread::removeObserver((WebCore::ResourceUsageThread *)(this - 32), a2);
    *(_BYTE *)(v4 + 24) = 0;
    v5 = *(Inspector::MemoryFrontendDispatcher **)(v4 + 8);
    v6 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 - 8) + 56))(*(_QWORD *)(v4 - 8));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
    this = Inspector::MemoryFrontendDispatcher::trackingComplete(v5, v6[1] + v7 - v6[2]);
  }
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t *Inspector::Protocol::Memory::CategoryData::Builder<1>::setSize(uint64_t *a1, double a2)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v5, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t WebCore::InspectorNetworkAgent::InspectorNetworkAgent(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v10)
  {
    v5 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    *(_QWORD *)a1 = off_1E33EFBF8;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
    if (v5)
      *(_DWORD *)v10 = v5;
    else
      WTF::StringImpl::destroy(v10, v4);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
  }
  *(_QWORD *)a1 = off_1E33EFFD8;
  *(_QWORD *)(a1 + 32) = &unk_1E33F00D0;
  v6 = a2[2];
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = v6;
  *(_QWORD *)(a1 + 40) = v7;
  Inspector::NetworkBackendDispatcher::create();
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = a2[1];
  v8 = WTF::fastMalloc((WTF *)0x50);
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_QWORD *)(v8 + 45) = 0;
  *(_OWORD *)(v8 + 56) = xmmword_1969F2240;
  *(_QWORD *)(v8 + 72) = 50000000;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 85) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 157) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  return a1;
}

void WebCore::InspectorNetworkAgent::~InspectorNetworkAgent(WebCore::InspectorNetworkAgent *this, WTF::StringImpl *a2)
{
  Inspector::NetworkBackendDispatcherHandler *v3;
  _DWORD *v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WebCore::NetworkResourcesData *v14;
  WTF *v15;
  void *v16;
  _DWORD *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  *(_QWORD *)this = off_1E33EFFD8;
  *((_QWORD *)this + 4) = &unk_1E33F00D0;
  v3 = (WebCore::InspectorNetworkAgent *)((char *)this + 32);
  v4 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
  {
    if (*v4 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v4;
  }
  v5 = (WTF *)*((_QWORD *)this + 18);
  if (v5)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v5, (WTF::StringImpl *)*((unsigned int *)this + 38));
  v6 = (WTF *)*((_QWORD *)this + 15);
  if (v6)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v6, (void *)*((unsigned int *)this + 32));
  v7 = *((unsigned int *)this + 29);
  if ((_DWORD)v7)
  {
    v8 = (WTF::StringImpl **)*((_QWORD *)this + 13);
    v9 = 16 * v7;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v8 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  v11 = (WTF *)*((_QWORD *)this + 13);
  if (v11)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = *((_QWORD *)this + 12);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 16), a2);
  v13 = (WTF *)*((_QWORD *)this + 9);
  if (v13)
  {
    v21 = *((unsigned int *)this + 20);
    if ((_DWORD)v21)
    {
      v22 = (WTF::StringImpl **)((char *)v13 + 8);
      do
      {
        v23 = *v22;
        *v22 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, a2);
          else
            *(_DWORD *)v23 -= 2;
        }
        v24 = *(v22 - 1);
        *(v22 - 1) = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, a2);
          else
            *(_DWORD *)v24 -= 2;
        }
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree(v13, a2);
  }
  v14 = (WebCore::NetworkResourcesData *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
  {
    WebCore::NetworkResourcesData::~NetworkResourcesData(v14);
    WTF::fastFree(v15, v16);
  }
  v17 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  v18 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v18)
    WTF::fastFree(v18, a2);
  Inspector::NetworkBackendDispatcherHandler::~NetworkBackendDispatcherHandler(v3);
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
}

uint64_t WebCore::InspectorNetworkAgent::willDestroyFrontendAndBackend(WebCore::InspectorNetworkAgent *a1, WTF::StringImpl *a2)
{
  uint64_t result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  char v5;

  result = WebCore::InspectorNetworkAgent::disable(a1, a2, &v4);
  if (v5)
  {
    result = (uint64_t)v4;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        return WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::InspectorNetworkAgent::disable@<X0>(WebCore::InspectorNetworkAgent *this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF *v14;
  WTF **v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD **v20;
  void *v21;
  WTF *v22;
  WTF **v23;
  uint64_t v24;
  WTF **v25;
  uint64_t v26;
  WTF **v27;
  WTF::StringImpl *v28;
  uint64_t result;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  char v35;

  *((_BYTE *)this + 177) = 0;
  *((_BYTE *)this + 179) = 0;
  if (*((_DWORD *)this + 28))
  {
    v5 = *((unsigned int *)this + 29);
    if ((_DWORD)v5)
    {
      v6 = (WTF::StringImpl **)*((_QWORD *)this + 13);
      v7 = 16 * v5;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
      *((_DWORD *)this + 29) = 0;
    }
    v9 = (WTF *)*((_QWORD *)this + 13);
    if (v9)
    {
      *((_QWORD *)this + 13) = 0;
      *((_DWORD *)this + 28) = 0;
      WTF::fastFree(v9, a2);
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 2) + 192) = 0;
  v10 = *((_QWORD *)this + 8);
  LOBYTE(v34) = 0;
  v35 = 0;
  WebCore::NetworkResourcesData::clear(v10, (WTF::StringImpl *)&v34);
  if (v35)
  {
    v12 = v34;
    v34 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v13 = (WTF *)*((_QWORD *)this + 9);
  if (v13)
  {
    v30 = *((unsigned int *)this + 20);
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    *(_QWORD *)((char *)this + 85) = 0;
    if ((_DWORD)v30)
    {
      v31 = (WTF::StringImpl **)((char *)v13 + 8);
      do
      {
        v32 = *v31;
        *v31 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v11);
          else
            *(_DWORD *)v32 -= 2;
        }
        v33 = *(v31 - 1);
        *(v31 - 1) = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v11);
          else
            *(_DWORD *)v33 -= 2;
        }
        v31 += 2;
        --v30;
      }
      while (v30);
    }
    WTF::fastFree(v13, v11);
  }
  v15 = (WTF **)((char *)this + 120);
  v14 = (WTF *)*((_QWORD *)this + 15);
  if (*((_DWORD *)this + 33))
  {
    v16 = *((unsigned int *)this + 32);
    v17 = (_QWORD *)*((_QWORD *)this + 15);
    if ((_DWORD)v16)
    {
      v18 = 0;
      while (!*(_QWORD *)((char *)v14 + v18))
      {
        v18 += 16;
        if (16 * v16 == v18)
          goto LABEL_31;
      }
      v17 = (_QWORD *)((char *)v14 + v18);
    }
    v19 = (_QWORD *)((char *)v14 + 16 * v16);
    if (v17 != v19)
    {
LABEL_25:
      v20 = (_QWORD **)v17[1];
      if (!*((_BYTE *)*v20 + 752))
        (*(void (**)(_QWORD *, _QWORD *))(*v20[1] + 16))(v20[1], *v20 + 42);
      while (1)
      {
        v17 += 2;
        if (v17 == v19)
          break;
        if (*v17)
        {
          if (v17 != v19)
            goto LABEL_25;
          break;
        }
      }
      v14 = *v15;
    }
  }
LABEL_31:
  if (v14)
  {
    v21 = (void *)*((unsigned int *)this + 32);
    *v15 = 0;
    *((_QWORD *)this + 16) = 0;
    *(_QWORD *)((char *)this + 133) = 0;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v14, v21);
  }
  v23 = (WTF **)((char *)this + 144);
  v22 = (WTF *)*((_QWORD *)this + 18);
  if (*((_DWORD *)this + 39))
  {
    v24 = *((unsigned int *)this + 38);
    v25 = (WTF **)*((_QWORD *)this + 18);
    if ((_DWORD)v24)
    {
      v26 = 0;
      while (!*(_QWORD *)((char *)v22 + v26))
      {
        v26 += 16;
        if (16 * v24 == v26)
          goto LABEL_46;
      }
      v25 = (WTF **)((char *)v22 + v26);
    }
    v27 = (WTF **)((char *)v22 + 16 * v24);
    if (v25 != v27)
    {
LABEL_41:
      WebCore::InspectorNetworkAgent::PendingInterceptResponse::respond(v25[1], (uint64_t)v25[1], 0);
      while (1)
      {
        v25 += 2;
        if (v25 == v27)
          break;
        if (*v25)
        {
          if (v25 != v27)
            goto LABEL_41;
          break;
        }
      }
      v22 = *v23;
    }
  }
LABEL_46:
  if (v22)
  {
    v28 = (WTF::StringImpl *)*((unsigned int *)this + 38);
    *v23 = 0;
    *((_QWORD *)this + 19) = 0;
    *(_QWORD *)((char *)this + 157) = 0;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v22, v28);
  }
  result = (*(uint64_t (**)(WebCore::InspectorNetworkAgent *, _QWORD))(*(_QWORD *)this + 200))(this, 0);
  *a3 = 0;
  a3[8] = 0;
  return result;
}

uint64_t WebCore::buildObjectForHeaders(WebCore *this, const WebCore::HTTPHeaderMap *a2)
{
  uint64_t v4;
  unsigned int v5;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _DWORD **v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t result;
  _QWORD v30[3];
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  __int16 v37;
  char v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  char v42;

  WTF::JSONImpl::Object::create(this);
  v4 = v33;
  *(_QWORD *)this = v33;
  v5 = *(_DWORD *)(v4 + 4);
  if (v5 < 5 || v5 == 6)
  {
    v4 = 0;
  }
  else
  {
    if (v5 != 5)
    {
      result = 490;
      __break(0xC471u);
      return result;
    }
    ++*(_DWORD *)v4;
  }
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)&v33, (uint64_t)a2, *(WTF::StringImpl **)a2, *((_QWORD *)a2 + 2));
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v30, (uint64_t)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 16 * *((unsigned int *)a2 + 3)), *((_QWORD *)a2 + 2) + 16 * *((unsigned int *)a2 + 7));
  v8 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  while (v34 != v30[1] || v35 != (WTF::StringImpl **)v30[2])
  {
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v39, v7);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v36, (const WTF::StringImpl *)&v40, (uint64_t)&v41);
    if (v42)
    {
      v9 = *(unsigned int *)(v4 + 36);
      if ((_DWORD)v9 == *(_DWORD *)(v4 + 32))
      {
        v23 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 24, v9 + 1, (unint64_t)&v36);
        v9 = *(unsigned int *)(v4 + 36);
        v24 = *(_QWORD *)(v4 + 24);
        v25 = *v23;
        if (*v23)
          *v25 += 2;
        *(_QWORD *)(v24 + 8 * v9) = v25;
      }
      else
      {
        v10 = *(_QWORD *)(v4 + 24);
        v11 = v36;
        if (v36)
          *(_DWORD *)v36 += 2;
        *(_QWORD *)(v10 + 8 * v9) = v11;
      }
      *(_DWORD *)(v4 + 36) = v9 + 1;
    }
    v12 = v40;
    v40 = 0;
    if (v12)
    {
      if (*v12 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v12;
    }
    v13 = v34;
    v14 = *(_QWORD *)v33 + 16 * *(unsigned int *)(v33 + 12);
    if (v34 == v14)
    {
      v20 = v35 + 2;
      v35 += 2;
    }
    else
    {
      v34 += 16;
      if (v14 != v13 + 16)
      {
        v15 = (&WebCore::headerNameStrings)[2 * *(unsigned __int16 *)(v13 + 16) + 1];
        if (v15)
        {
          v7 = (const WTF::String *)(v15 - 1);
          if (v15 == (char *)1)
          {
            *(_DWORD *)v8 += 2;
            v16 = v8;
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v16 = v41;
          }
        }
        else
        {
          v16 = 0;
        }
        v17 = v36;
        v36 = v16;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v7);
          else
            *(_DWORD *)v17 -= 2;
        }
        v37 = *(_WORD *)(v13 + 16);
        v38 = 1;
        v18 = *(WTF::StringImpl **)(v13 + 24);
        if (v18)
          goto LABEL_28;
        goto LABEL_29;
      }
      v20 = v35;
    }
    if ((WTF::StringImpl **)(*(_QWORD *)(v33 + 16) + 16 * *(unsigned int *)(v33 + 28)) != v20)
    {
      v21 = *v20;
      if (*v20)
        *(_DWORD *)v21 += 2;
      v22 = v36;
      v36 = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v7);
        else
          *(_DWORD *)v22 -= 2;
      }
      if (v38)
        v38 = 0;
      v18 = v20[1];
      if (v18)
LABEL_28:
        *(_DWORD *)v18 += 2;
LABEL_29:
      v19 = v39;
      v39 = v18;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v7);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
  }
  v26 = v32;
  v32 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v7);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v31;
  v31 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v7);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v39;
  v39 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v7);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = (uint64_t)v36;
  v36 = 0;
  if (!result)
  {
LABEL_65:
    if (!v4)
      return result;
    goto LABEL_66;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_65;
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
  if (v4)
  {
LABEL_66:
    if (*(_DWORD *)v4 == 1)
      return WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v4;
  }
  return result;
}

WTF::JSONImpl::Object *WebCore::InspectorNetworkAgent::buildObjectForResourceResponse(WTF::JSONImpl::Object *this, const WebCore::ResourceResponse *a2, WebCore::ResourceLoader *a3, uint64_t a4)
{
  WTF::JSONImpl::Object *v4;
  WebCore::ResourceLoader *v6;
  uint64_t v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::JSONImpl::Value *v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const WTF::String *v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  const WTF::String *v41;
  WTF::StringImpl *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  uint64_t v50;
  const WTF::String *v51;
  WTF::StringImpl *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  _BYTE *v60;
  double v61;
  uint64_t v62;
  double v63;
  WTF::StringImpl *v64;
  WTF::JSONImpl::Value *v65;
  WTF::StringImpl *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  double v74;
  WTF::StringImpl *v75;
  WTF::JSONImpl::Value *v76;
  WTF::StringImpl *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  double v85;
  WTF::JSONImpl::Value *v86;
  WTF::StringImpl *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  double v95;
  WTF::StringImpl *v96;
  WTF::JSONImpl::Value *v97;
  WTF::StringImpl *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  double v105;
  double v106;
  WTF::StringImpl *v107;
  WTF::JSONImpl::Value *v108;
  WTF::StringImpl *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  double v116;
  double v117;
  WTF::StringImpl *v118;
  WTF::JSONImpl::Value *v119;
  WTF::StringImpl *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  double v127;
  double v128;
  WTF::StringImpl *v129;
  WTF::JSONImpl::Value *v130;
  WTF::StringImpl *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  double v138;
  double v139;
  WTF::StringImpl *v140;
  WTF::JSONImpl::Value *v141;
  WTF::StringImpl *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  double v149;
  double v150;
  WTF::StringImpl *v151;
  WTF::JSONImpl::Value *v152;
  WTF::StringImpl *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  double v160;
  double v161;
  WTF::StringImpl *v162;
  WTF::JSONImpl::Value *v163;
  WTF::StringImpl *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  double v171;
  double v172;
  WTF::StringImpl *v173;
  WTF::JSONImpl::Value *v174;
  WTF::StringImpl *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  double v182;
  double v183;
  WTF::JSONImpl::Value *v184;
  WTF::StringImpl *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  uint64_t v199;
  WTF::JSONImpl::Object *v200;
  WTF::StringImpl *v201;
  const WTF::String *v202;
  WTF::StringImpl *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  double v210;
  WTF::JSONImpl::Value *v211;
  WTF::StringImpl *v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  double v219;
  WTF::JSONImpl::Value *v220;
  WTF::StringImpl *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  const WTF::String *v228;
  WTF::JSONImpl::Value *v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  const WTF::String *v242;
  WTF::JSONImpl::Value *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  _DWORD **v270;
  uint64_t v271;
  _DWORD *v272;
  _DWORD **v273;
  uint64_t v274;
  _DWORD *v275;
  _DWORD **v276;
  uint64_t v277;
  _DWORD *v278;
  _DWORD **v279;
  uint64_t v280;
  _DWORD *v281;
  _DWORD **v282;
  uint64_t v283;
  _DWORD *v284;
  _DWORD **v285;
  uint64_t v286;
  _DWORD *v287;
  _DWORD **v288;
  uint64_t v289;
  _DWORD *v290;
  _DWORD **v291;
  uint64_t v292;
  _DWORD *v293;
  _DWORD **v294;
  uint64_t v295;
  _DWORD *v296;
  _DWORD **v297;
  uint64_t v298;
  _DWORD *v299;
  _DWORD **v300;
  uint64_t v301;
  _DWORD *v302;
  _DWORD **v303;
  uint64_t v304;
  _DWORD *v305;
  _DWORD **v306;
  uint64_t v307;
  _DWORD *v308;
  _DWORD **v309;
  uint64_t v310;
  _DWORD *v311;
  _DWORD **v312;
  uint64_t v313;
  _DWORD *v314;
  _DWORD **v315;
  uint64_t v316;
  _DWORD *v317;
  _DWORD **v318;
  uint64_t v319;
  _DWORD *v320;
  _DWORD **v321;
  uint64_t v322;
  _DWORD *v323;
  _DWORD **v324;
  uint64_t v325;
  _DWORD *v326;
  _DWORD **v327;
  uint64_t v328;
  _DWORD *v329;
  _DWORD **v330;
  uint64_t v331;
  _DWORD *v332;
  _DWORD **v333;
  uint64_t v334;
  _DWORD *v335;
  _DWORD **v336;
  uint64_t v337;
  _DWORD *v338;
  _DWORD **v339;
  uint64_t v340;
  _DWORD *v341;
  _DWORD **v342;
  uint64_t v343;
  _DWORD *v344;
  _DWORD **v345;
  uint64_t v346;
  _DWORD *v347;
  WTF::JSONImpl::Object *v348;
  uint64_t v349;
  double v350;
  double v351;
  WTF::JSONImpl::Value *v352;
  unsigned int v353;
  WTF::JSONImpl::Value *v354;
  unsigned int v355;
  char v356;
  WTF::StringImpl *v357;
  WTF::StringImpl *v358;
  WTF::StringImpl *v359[2];
  char v360;
  WTF::StringImpl *v361;

  v4 = this;
  if ((*((_BYTE *)a3 + 138) & 1) == 0)
  {
    v6 = a3;
    WTF::JSONImpl::Object::create(this);
    v8 = v349;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v6, 1);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v6, v9);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v349 + 16), &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
    if (LOBYTE(v351))
    {
      v11 = (uint64_t *)(v8 + 24);
      v12 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v12 == *(_DWORD *)(v8 + 32))
      {
        v270 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v361);
        v12 = *(unsigned int *)(v8 + 36);
        v271 = *(_QWORD *)(v8 + 24);
        v272 = *v270;
        if (*v270)
          *v272 += 2;
        *(_QWORD *)(v271 + 8 * v12) = v272;
      }
      else
      {
        v13 = *v11;
        v14 = v361;
        if (v361)
          *(_DWORD *)v361 += 2;
        *(_QWORD *)(v13 + 8 * v12) = v14;
      }
      *(_DWORD *)(v8 + 36) = v12 + 1;
    }
    v15 = v359[0];
    v359[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v15;
    }
    v16 = v361;
    v361 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v10);
      else
        *(_DWORD *)v16 -= 2;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v6, 1);
    v17 = (WTF::JSONImpl::Value *)*((__int16 *)v6 + 68);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v17);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
    if (LOBYTE(v351))
    {
      v19 = (uint64_t *)(v8 + 24);
      v20 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v20 == *(_DWORD *)(v8 + 32))
      {
        v273 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v361);
        v20 = *(unsigned int *)(v8 + 36);
        v274 = *(_QWORD *)(v8 + 24);
        v275 = *v273;
        if (*v273)
          *v275 += 2;
        *(_QWORD *)(v274 + 8 * v20) = v275;
      }
      else
      {
        v21 = *v19;
        v22 = v361;
        if (v361)
          *(_DWORD *)v361 += 2;
        *(_QWORD *)(v21 + 8 * v20) = v22;
      }
      *(_DWORD *)(v8 + 36) = v20 + 1;
    }
    v23 = v359[0];
    v359[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v23;
    }
    v24 = v361;
    v361 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v18);
      else
        *(_DWORD *)v24 -= 2;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v6, 2);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WebCore::ResourceLoader *)((char *)v6 + 64), v25);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
    if (LOBYTE(v351))
    {
      v27 = (uint64_t *)(v8 + 24);
      v28 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v28 == *(_DWORD *)(v8 + 32))
      {
        v276 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)&v361);
        v28 = *(unsigned int *)(v8 + 36);
        v277 = *(_QWORD *)(v8 + 24);
        v278 = *v276;
        if (*v276)
          *v278 += 2;
        *(_QWORD *)(v277 + 8 * v28) = v278;
      }
      else
      {
        v29 = *v27;
        v30 = v361;
        if (v361)
          *(_DWORD *)v361 += 2;
        *(_QWORD *)(v29 + 8 * v28) = v30;
      }
      *(_DWORD *)(v8 + 36) = v28 + 1;
    }
    v31 = v359[0];
    v359[0] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v31;
    }
    v32 = v361;
    v361 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v26);
      else
        *(_DWORD *)v32 -= 2;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v6, 2);
    WebCore::buildObjectForHeaders((WebCore *)&v357, (WebCore::ResourceLoader *)((char *)v6 + 80));
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v33 = v357;
    v357 = 0;
    v361 = v33;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), v359, (const WTF::StringImpl *)&v361, (uint64_t)&v349);
    if (LOBYTE(v351))
    {
      v35 = (uint64_t *)(v8 + 24);
      v36 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v36 == *(_DWORD *)(v8 + 32))
      {
        v279 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)v359);
        v36 = *(unsigned int *)(v8 + 36);
        v280 = *(_QWORD *)(v8 + 24);
        v281 = *v279;
        if (*v279)
          *v281 += 2;
        *(_QWORD *)(v280 + 8 * v36) = v281;
      }
      else
      {
        v37 = *v35;
        v38 = v359[0];
        if (v359[0])
          *(_DWORD *)v359[0] += 2;
        *(_QWORD *)(v37 + 8 * v36) = v38;
      }
      *(_DWORD *)(v8 + 36) = v36 + 1;
    }
    v39 = v361;
    v361 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v39;
    }
    v40 = v359[0];
    v359[0] = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v34);
      else
        *(_DWORD *)v40 -= 2;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v6, 1);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WebCore::ResourceLoader *)((char *)v6 + 40), v41);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
    if (LOBYTE(v351))
    {
      v43 = (uint64_t *)(v8 + 24);
      v44 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v44 == *(_DWORD *)(v8 + 32))
      {
        v282 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v361);
        v44 = *(unsigned int *)(v8 + 36);
        v283 = *(_QWORD *)(v8 + 24);
        v284 = *v282;
        if (*v282)
          *v284 += 2;
        *(_QWORD *)(v283 + 8 * v44) = v284;
      }
      else
      {
        v45 = *v43;
        v46 = v361;
        if (v361)
          *(_DWORD *)v361 += 2;
        *(_QWORD *)(v45 + 8 * v44) = v46;
      }
      *(_DWORD *)(v8 + 36) = v44 + 1;
    }
    v47 = v359[0];
    v359[0] = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v47;
    }
    v48 = v361;
    v361 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v42);
      else
        *(_DWORD *)v48 -= 2;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v6, 2);
    v49 = (((unint64_t)*((unsigned __int16 *)v6 + 116) >> 10) & 0xF) - 1;
    if (v49 > 8)
      v50 = 178;
    else
      v50 = dword_1969F2364[v49];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v50);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v358, v51);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
    if (LOBYTE(v351))
    {
      v53 = (uint64_t *)(v8 + 24);
      v54 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v54 == *(_DWORD *)(v8 + 32))
      {
        v285 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v53, v54 + 1, (unint64_t)&v361);
        v54 = *(unsigned int *)(v8 + 36);
        v286 = *(_QWORD *)(v8 + 24);
        v287 = *v285;
        if (*v285)
          *v287 += 2;
        *(_QWORD *)(v286 + 8 * v54) = v287;
      }
      else
      {
        v55 = *v53;
        v56 = v361;
        if (v361)
          *(_DWORD *)v361 += 2;
        *(_QWORD *)(v55 + 8 * v54) = v56;
      }
      *(_DWORD *)(v8 + 36) = v54 + 1;
    }
    v57 = v359[0];
    v359[0] = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v57;
    }
    v58 = v358;
    v358 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v52);
      else
        *(_DWORD *)v58 -= 2;
    }
    this = v361;
    v361 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
      {
        this = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(this, v52);
        if (!a4)
          goto LABEL_265;
        goto LABEL_82;
      }
      *(_DWORD *)this -= 2;
    }
    if (!a4)
      goto LABEL_265;
LABEL_82:
    v59 = *((_QWORD *)v6 + 14);
    if (v59)
    {
      v50 = v59 + 8;
    }
    else
    {
      v60 = &unk_1EE2F9000;
      v50 = (uint64_t)&WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics;
        goto LABEL_531;
    }
    while (1)
    {
      WTF::JSONImpl::Object::create(this);
      v61 = *(double *)(a4 + 304);
      v62 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 3) + 56))(*((_QWORD *)a2 + 3));
      v63 = *(double *)(v62 + 8) + v61 - *(double *)(v62 + 16);
      v64 = v358;
      v65 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v65, v63);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v64 + 2, &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v67 = (uint64_t *)((char *)v64 + 24);
        v68 = *((unsigned int *)v64 + 9);
        if ((_DWORD)v68 == *((_DWORD *)v64 + 8))
        {
          v288 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)&v361);
          v68 = *((unsigned int *)v64 + 9);
          v289 = *((_QWORD *)v64 + 3);
          v290 = *v288;
          if (*v288)
            *v290 += 2;
          *(_QWORD *)(v289 + 8 * v68) = v290;
        }
        else
        {
          v69 = *v67;
          v70 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v69 + 8 * v68) = v70;
        }
        *((_DWORD *)v64 + 9) = v68 + 1;
      }
      v71 = v359[0];
      v359[0] = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v71;
      }
      v72 = v361;
      v361 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
          WTF::StringImpl::destroy(v72, v66);
        else
          *(_DWORD *)v72 -= 2;
      }
      v73 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 3) + 56))(*((_QWORD *)a2 + 3));
      v74 = *(double *)(v73 + 8) + *(double *)v50 - *(double *)(v73 + 16);
      v75 = v358;
      v76 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v76, v74);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v75 + 2, &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v78 = (uint64_t *)((char *)v75 + 24);
        v79 = *((unsigned int *)v75 + 9);
        if ((_DWORD)v79 == *((_DWORD *)v75 + 8))
        {
          v291 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v78, v79 + 1, (unint64_t)&v361);
          v79 = *((unsigned int *)v75 + 9);
          v292 = *((_QWORD *)v75 + 3);
          v293 = *v291;
          if (*v291)
            *v293 += 2;
          *(_QWORD *)(v292 + 8 * v79) = v293;
        }
        else
        {
          v80 = *v78;
          v81 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v80 + 8 * v79) = v81;
        }
        *((_DWORD *)v75 + 9) = v79 + 1;
      }
      v82 = v359[0];
      v359[0] = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v82;
      }
      v83 = v361;
      v361 = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
          WTF::StringImpl::destroy(v83, v77);
        else
          *(_DWORD *)v83 -= 2;
      }
      v84 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 3) + 56))(*((_QWORD *)a2 + 3));
      v85 = *(double *)(v84 + 8) + *(double *)(v50 + 8) - *(double *)(v84 + 16);
      a4 = (uint64_t)v358;
      v86 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v86, v85);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a4 + 16), &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v88 = (uint64_t *)(a4 + 24);
        v89 = *(unsigned int *)(a4 + 36);
        if ((_DWORD)v89 == *(_DWORD *)(a4 + 32))
        {
          v294 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v361);
          v89 = *(unsigned int *)(a4 + 36);
          v295 = *(_QWORD *)(a4 + 24);
          v296 = *v294;
          if (*v294)
            *v296 += 2;
          *(_QWORD *)(v295 + 8 * v89) = v296;
        }
        else
        {
          v90 = *v88;
          v91 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v90 + 8 * v89) = v91;
        }
        *(_DWORD *)(a4 + 36) = v89 + 1;
      }
      v92 = v359[0];
      v359[0] = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v92;
      }
      v93 = v361;
      v361 = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 2)
          WTF::StringImpl::destroy(v93, v87);
        else
          *(_DWORD *)v93 -= 2;
      }
      v94 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 3) + 56))(*((_QWORD *)a2 + 3));
      v95 = *(double *)(v94 + 8) + *(double *)(v50 + 8) - *(double *)(v94 + 16);
      v96 = v358;
      v97 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v97, v95);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v96 + 2, &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v99 = (uint64_t *)((char *)v96 + 24);
        v100 = *((unsigned int *)v96 + 9);
        if ((_DWORD)v100 == *((_DWORD *)v96 + 8))
        {
          v297 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, v100 + 1, (unint64_t)&v361);
          v100 = *((unsigned int *)v96 + 9);
          v298 = *((_QWORD *)v96 + 3);
          v299 = *v297;
          if (*v297)
            *v299 += 2;
          *(_QWORD *)(v298 + 8 * v100) = v299;
        }
        else
        {
          v101 = *v99;
          v102 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v101 + 8 * v100) = v102;
        }
        *((_DWORD *)v96 + 9) = v100 + 1;
      }
      v103 = v359[0];
      v359[0] = 0;
      if (v103)
      {
        if (*(_DWORD *)v103 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v103;
      }
      v104 = v361;
      v361 = 0;
      if (v104)
      {
        if (*(_DWORD *)v104 == 2)
          WTF::StringImpl::destroy(v104, v98);
        else
          *(_DWORD *)v104 -= 2;
      }
      v105 = *(double *)(v50 + 16);
      if (v105 == 0.0)
        v106 = 0.0;
      else
        v106 = (v105 - *(double *)(v50 + 8)) * 1000.0;
      v107 = v358;
      v108 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v108, v106);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v107 + 2, &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v110 = (uint64_t *)((char *)v107 + 24);
        v111 = *((unsigned int *)v107 + 9);
        if ((_DWORD)v111 == *((_DWORD *)v107 + 8))
        {
          v300 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v110, v111 + 1, (unint64_t)&v361);
          v111 = *((unsigned int *)v107 + 9);
          v301 = *((_QWORD *)v107 + 3);
          v302 = *v300;
          if (*v300)
            *v302 += 2;
          *(_QWORD *)(v301 + 8 * v111) = v302;
        }
        else
        {
          v112 = *v110;
          v113 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v112 + 8 * v111) = v113;
        }
        *((_DWORD *)v107 + 9) = v111 + 1;
      }
      v114 = v359[0];
      v359[0] = 0;
      if (v114)
      {
        if (*(_DWORD *)v114 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v114;
      }
      v115 = v361;
      v361 = 0;
      if (v115)
      {
        if (*(_DWORD *)v115 == 2)
          WTF::StringImpl::destroy(v115, v109);
        else
          *(_DWORD *)v115 -= 2;
      }
      v116 = *(double *)(v50 + 24);
      if (v116 == 0.0)
        v117 = 0.0;
      else
        v117 = (v116 - *(double *)(v50 + 8)) * 1000.0;
      v118 = v358;
      v119 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v119, v117);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v118 + 2, &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v121 = (uint64_t *)((char *)v118 + 24);
        v122 = *((unsigned int *)v118 + 9);
        if ((_DWORD)v122 == *((_DWORD *)v118 + 8))
        {
          v303 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v121, v122 + 1, (unint64_t)&v361);
          v122 = *((unsigned int *)v118 + 9);
          v304 = *((_QWORD *)v118 + 3);
          v305 = *v303;
          if (*v303)
            *v305 += 2;
          *(_QWORD *)(v304 + 8 * v122) = v305;
        }
        else
        {
          v123 = *v121;
          v124 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v123 + 8 * v122) = v124;
        }
        *((_DWORD *)v118 + 9) = v122 + 1;
      }
      v125 = v359[0];
      v359[0] = 0;
      if (v125)
      {
        if (*(_DWORD *)v125 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v125;
      }
      v126 = v361;
      v361 = 0;
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
          WTF::StringImpl::destroy(v126, v120);
        else
          *(_DWORD *)v126 -= 2;
      }
      v127 = *(double *)(v50 + 32);
      if (v127 == 0.0)
        v128 = 0.0;
      else
        v128 = (v127 - *(double *)(v50 + 8)) * 1000.0;
      v129 = v358;
      v130 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v130, v128);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v129 + 2, &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v132 = (uint64_t *)((char *)v129 + 24);
        v133 = *((unsigned int *)v129 + 9);
        if ((_DWORD)v133 == *((_DWORD *)v129 + 8))
        {
          v306 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v132, v133 + 1, (unint64_t)&v361);
          v133 = *((unsigned int *)v129 + 9);
          v307 = *((_QWORD *)v129 + 3);
          v308 = *v306;
          if (*v306)
            *v308 += 2;
          *(_QWORD *)(v307 + 8 * v133) = v308;
        }
        else
        {
          v134 = *v132;
          v135 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v134 + 8 * v133) = v135;
        }
        *((_DWORD *)v129 + 9) = v133 + 1;
      }
      v136 = v359[0];
      v359[0] = 0;
      if (v136)
      {
        if (*(_DWORD *)v136 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v136;
      }
      v137 = v361;
      v361 = 0;
      if (v137)
      {
        if (*(_DWORD *)v137 == 2)
          WTF::StringImpl::destroy(v137, v131);
        else
          *(_DWORD *)v137 -= 2;
      }
      v138 = *(double *)(v50 + 48);
      if (v138 == 0.0)
        v139 = 0.0;
      else
        v139 = (v138 - *(double *)(v50 + 8)) * 1000.0;
      v140 = v358;
      v141 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v141, v139);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v140 + 2, &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v143 = (uint64_t *)((char *)v140 + 24);
        v144 = *((unsigned int *)v140 + 9);
        if ((_DWORD)v144 == *((_DWORD *)v140 + 8))
        {
          v309 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v143, v144 + 1, (unint64_t)&v361);
          v144 = *((unsigned int *)v140 + 9);
          v310 = *((_QWORD *)v140 + 3);
          v311 = *v309;
          if (*v309)
            *v311 += 2;
          *(_QWORD *)(v310 + 8 * v144) = v311;
        }
        else
        {
          v145 = *v143;
          v146 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v145 + 8 * v144) = v146;
        }
        *((_DWORD *)v140 + 9) = v144 + 1;
      }
      v147 = v359[0];
      v359[0] = 0;
      if (v147)
      {
        if (*(_DWORD *)v147 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v147;
      }
      v148 = v361;
      v361 = 0;
      if (v148)
      {
        if (*(_DWORD *)v148 == 2)
          WTF::StringImpl::destroy(v148, v142);
        else
          *(_DWORD *)v148 -= 2;
      }
      v149 = *(double *)(v50 + 40);
      if (v149 == 0.0)
        v150 = 0.0;
      else
        v150 = (v149 - *(double *)(v50 + 8)) * 1000.0;
      v151 = v358;
      v152 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v152, v150);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v151 + 2, &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v154 = (uint64_t *)((char *)v151 + 24);
        v155 = *((unsigned int *)v151 + 9);
        if ((_DWORD)v155 == *((_DWORD *)v151 + 8))
        {
          v312 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v154, v155 + 1, (unint64_t)&v361);
          v155 = *((unsigned int *)v151 + 9);
          v313 = *((_QWORD *)v151 + 3);
          v314 = *v312;
          if (*v312)
            *v314 += 2;
          *(_QWORD *)(v313 + 8 * v155) = v314;
        }
        else
        {
          v156 = *v154;
          v157 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v156 + 8 * v155) = v157;
        }
        *((_DWORD *)v151 + 9) = v155 + 1;
      }
      v158 = v359[0];
      v359[0] = 0;
      if (v158)
      {
        if (*(_DWORD *)v158 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v158;
      }
      v159 = v361;
      v361 = 0;
      if (v159)
      {
        if (*(_DWORD *)v159 == 2)
          WTF::StringImpl::destroy(v159, v153);
        else
          *(_DWORD *)v159 -= 2;
      }
      v160 = *(double *)(v50 + 56);
      if (v160 == 0.0)
        v161 = 0.0;
      else
        v161 = (v160 - *(double *)(v50 + 8)) * 1000.0;
      v162 = v358;
      v163 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v163, v161);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v162 + 2, &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v165 = (uint64_t *)((char *)v162 + 24);
        v166 = *((unsigned int *)v162 + 9);
        if ((_DWORD)v166 == *((_DWORD *)v162 + 8))
        {
          v315 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v165, v166 + 1, (unint64_t)&v361);
          v166 = *((unsigned int *)v162 + 9);
          v316 = *((_QWORD *)v162 + 3);
          v317 = *v315;
          if (*v315)
            *v317 += 2;
          *(_QWORD *)(v316 + 8 * v166) = v317;
        }
        else
        {
          v167 = *v165;
          v168 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v167 + 8 * v166) = v168;
        }
        *((_DWORD *)v162 + 9) = v166 + 1;
      }
      v169 = v359[0];
      v359[0] = 0;
      if (v169)
      {
        if (*(_DWORD *)v169 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v169;
      }
      v170 = v361;
      v361 = 0;
      if (v170)
      {
        if (*(_DWORD *)v170 == 2)
          WTF::StringImpl::destroy(v170, v164);
        else
          *(_DWORD *)v170 -= 2;
      }
      v171 = *(double *)(v50 + 64);
      if (v171 == 0.0)
        v172 = 0.0;
      else
        v172 = (v171 - *(double *)(v50 + 8)) * 1000.0;
      v173 = v358;
      v174 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v174, v172);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v173 + 2, &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v176 = (uint64_t *)((char *)v173 + 24);
        v177 = *((unsigned int *)v173 + 9);
        if ((_DWORD)v177 == *((_DWORD *)v173 + 8))
        {
          v318 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v176, v177 + 1, (unint64_t)&v361);
          v177 = *((unsigned int *)v173 + 9);
          v319 = *((_QWORD *)v173 + 3);
          v320 = *v318;
          if (*v318)
            *v320 += 2;
          *(_QWORD *)(v319 + 8 * v177) = v320;
        }
        else
        {
          v178 = *v176;
          v179 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v178 + 8 * v177) = v179;
        }
        *((_DWORD *)v173 + 9) = v177 + 1;
      }
      v180 = v359[0];
      v359[0] = 0;
      if (v180)
      {
        if (*(_DWORD *)v180 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v180;
      }
      v181 = v361;
      v361 = 0;
      if (v181)
      {
        if (*(_DWORD *)v181 == 2)
          WTF::StringImpl::destroy(v181, v175);
        else
          *(_DWORD *)v181 -= 2;
      }
      v182 = *(double *)(v50 + 72);
      if (v182 == 0.0)
        v183 = 0.0;
      else
        v183 = (v182 - *(double *)(v50 + 8)) * 1000.0;
      a2 = v358;
      v184 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v184, v183);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v361, (const WTF::StringImpl *)v359, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v186 = (uint64_t *)((char *)a2 + 24);
        v187 = *((unsigned int *)a2 + 9);
        if ((_DWORD)v187 == *((_DWORD *)a2 + 8))
        {
          v321 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v186, v187 + 1, (unint64_t)&v361);
          v187 = *((unsigned int *)a2 + 9);
          v322 = *((_QWORD *)a2 + 3);
          v323 = *v321;
          if (*v321)
            *v323 += 2;
          *(_QWORD *)(v322 + 8 * v187) = v323;
        }
        else
        {
          v188 = *v186;
          v189 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v188 + 8 * v187) = v189;
        }
        *((_DWORD *)a2 + 9) = v187 + 1;
      }
      v190 = v359[0];
      v359[0] = 0;
      if (v190)
      {
        if (*(_DWORD *)v190 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v190;
      }
      v191 = v361;
      v361 = 0;
      if (v191)
      {
        if (*(_DWORD *)v191 == 2)
          WTF::StringImpl::destroy(v191, v185);
        else
          *(_DWORD *)v191 -= 2;
      }
      v192 = v358;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v361 = v192;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), v359, (const WTF::StringImpl *)&v361, (uint64_t)&v349);
      if (LOBYTE(v351))
      {
        v194 = (uint64_t *)(v8 + 24);
        v195 = *(unsigned int *)(v8 + 36);
        if ((_DWORD)v195 == *(_DWORD *)(v8 + 32))
        {
          v324 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v194, v195 + 1, (unint64_t)v359);
          v195 = *(unsigned int *)(v8 + 36);
          v325 = *(_QWORD *)(v8 + 24);
          v326 = *v324;
          if (*v324)
            *v326 += 2;
          *(_QWORD *)(v325 + 8 * v195) = v326;
        }
        else
        {
          v196 = *v194;
          v197 = v359[0];
          if (v359[0])
            *(_DWORD *)v359[0] += 2;
          *(_QWORD *)(v196 + 8 * v195) = v197;
        }
        *(_DWORD *)(v8 + 36) = v195 + 1;
      }
      v198 = v361;
      v361 = 0;
      if (v198)
      {
        if (*(_DWORD *)v198 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v198;
      }
      this = v359[0];
      v359[0] = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(this, v193);
        else
          *(_DWORD *)this -= 2;
      }
LABEL_265:
      if (!*((_BYTE *)v6 + 128))
        goto LABEL_394;
      WTF::JSONImpl::Object::create(this);
      if (*((_BYTE *)v6 + 128))
      {
        v199 = v349;
        WebCore::CertificateInfo::summary((SecTrustRef *)v6 + 15, (uint64_t)&v349);
        if (!v356)
          goto LABEL_382;
        WTF::JSONImpl::Object::create(v200);
        if (v356)
        {
          v201 = v359[0];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v349, v202);
          v6 = (WTF::StringImpl *)((char *)v201 + 16);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v201 + 2, &v358, (const WTF::StringImpl *)&v361, (uint64_t)v359);
          if (v360)
          {
            v204 = (uint64_t *)((char *)v201 + 24);
            v205 = *((unsigned int *)v201 + 9);
            if ((_DWORD)v205 == *((_DWORD *)v201 + 8))
            {
              v330 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v204, v205 + 1, (unint64_t)&v358);
              v205 = *((unsigned int *)v201 + 9);
              v331 = *((_QWORD *)v201 + 3);
              v332 = *v330;
              if (*v330)
                *v332 += 2;
              *(_QWORD *)(v331 + 8 * v205) = v332;
            }
            else
            {
              v206 = *v204;
              v207 = v358;
              if (v358)
                *(_DWORD *)v358 += 2;
              *(_QWORD *)(v206 + 8 * v205) = v207;
            }
            *((_DWORD *)v201 + 9) = v205 + 1;
          }
          v208 = v361;
          v361 = 0;
          if (v208)
          {
            if (*(_DWORD *)v208 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v208;
          }
          v209 = v358;
          v358 = 0;
          if (v209)
          {
            if (*(_DWORD *)v209 == 2)
              WTF::StringImpl::destroy(v209, v203);
            else
              *(_DWORD *)v209 -= 2;
          }
          if (v356)
          {
            v210 = v350;
            if (v350 == 0.0)
              goto LABEL_296;
            v211 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create(v211, v210);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v201 + 2, &v358, (const WTF::StringImpl *)&v361, (uint64_t)v359);
            if (v360)
            {
              v213 = (uint64_t *)((char *)v201 + 24);
              v214 = *((unsigned int *)v201 + 9);
              if ((_DWORD)v214 == *((_DWORD *)v201 + 8))
              {
                v336 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v213, v214 + 1, (unint64_t)&v358);
                v214 = *((unsigned int *)v201 + 9);
                v337 = *((_QWORD *)v201 + 3);
                v338 = *v336;
                if (*v336)
                  *v338 += 2;
                *(_QWORD *)(v337 + 8 * v214) = v338;
              }
              else
              {
                v215 = *v213;
                v216 = v358;
                if (v358)
                  *(_DWORD *)v358 += 2;
                *(_QWORD *)(v215 + 8 * v214) = v216;
              }
              *((_DWORD *)v201 + 9) = v214 + 1;
            }
            v217 = v361;
            v361 = 0;
            if (v217)
            {
              if (*(_DWORD *)v217 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v217;
            }
            v218 = v358;
            v358 = 0;
            if (v218)
            {
              if (*(_DWORD *)v218 == 2)
                WTF::StringImpl::destroy(v218, v212);
              else
                *(_DWORD *)v218 -= 2;
            }
            if (v356)
            {
LABEL_296:
              v219 = v351;
              if (v351 != 0.0)
              {
                v220 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::JSONImpl::Value::create(v220, v219);
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v201 + 2, &v358, (const WTF::StringImpl *)&v361, (uint64_t)v359);
                if (v360)
                {
                  v222 = (uint64_t *)((char *)v201 + 24);
                  v223 = *((unsigned int *)v201 + 9);
                  if ((_DWORD)v223 == *((_DWORD *)v201 + 8))
                  {
                    v339 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v222, v223 + 1, (unint64_t)&v358);
                    v223 = *((unsigned int *)v201 + 9);
                    v340 = *((_QWORD *)v201 + 3);
                    v341 = *v339;
                    if (*v339)
                      *v341 += 2;
                    *(_QWORD *)(v340 + 8 * v223) = v341;
                  }
                  else
                  {
                    v224 = *v222;
                    v225 = v358;
                    if (v358)
                      *(_DWORD *)v358 += 2;
                    *(_QWORD *)(v224 + 8 * v223) = v225;
                  }
                  *((_DWORD *)v201 + 9) = v223 + 1;
                }
                v226 = v361;
                v361 = 0;
                if (v226)
                {
                  if (*(_DWORD *)v226 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v226;
                }
                v227 = v358;
                v358 = 0;
                if (v227)
                {
                  if (*(_DWORD *)v227 == 2)
                    WTF::StringImpl::destroy(v227, v221);
                  else
                    *(_DWORD *)v227 -= 2;
                }
              }
              v348 = v4;
              a2 = (const WebCore::ResourceResponse *)WTF::fastMalloc((WTF *)0x20);
              WTF::JSONImpl::ArrayBase::ArrayBase(a2);
              if (v356)
              {
                if (v353)
                {
                  v229 = v352;
                  v50 = (uint64_t)a2 + 16;
                  v4 = (WTF::JSONImpl::Object *)(8 * v353);
                  do
                  {
                    WTF::JSONImpl::Value::create(v229, v228);
                    v230 = *((unsigned int *)a2 + 7);
                    if ((_DWORD)v230 == *((_DWORD *)a2 + 6))
                    {
                      v231 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2 + 2, v230 + 1, (unint64_t)v359);
                      v230 = *((unsigned int *)a2 + 7);
                      v232 = *((_QWORD *)a2 + 2);
                      v233 = *(WTF::StringImpl **)v231;
                      *(_QWORD *)v231 = 0;
                    }
                    else
                    {
                      v232 = *(_QWORD *)v50;
                      v233 = v359[0];
                      v359[0] = 0;
                    }
                    *(_QWORD *)(v232 + 8 * v230) = v233;
                    *((_DWORD *)a2 + 7) = v230 + 1;
                    v234 = v359[0];
                    v359[0] = 0;
                    if (v234)
                    {
                      if (*(_DWORD *)v234 == 1)
                        WTF::JSONImpl::Value::operator delete();
                      else
                        --*(_DWORD *)v234;
                    }
                    v229 = (WTF::JSONImpl::Value *)((char *)v229 + 8);
                    v4 = (WTF::JSONImpl::Object *)((char *)v4 - 8);
                  }
                  while (v4);
                }
                if (*((_DWORD *)a2 + 7))
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v358 = a2;
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v201 + 2, &v361, (const WTF::StringImpl *)&v358, (uint64_t)v359);
                  if (v360)
                  {
                    v236 = (uint64_t *)((char *)v201 + 24);
                    v237 = *((unsigned int *)v201 + 9);
                    if ((_DWORD)v237 == *((_DWORD *)v201 + 8))
                    {
                      v342 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v236, v237 + 1, (unint64_t)&v361);
                      v237 = *((unsigned int *)v201 + 9);
                      v343 = *((_QWORD *)v201 + 3);
                      v344 = *v342;
                      if (*v342)
                        *v344 += 2;
                      *(_QWORD *)(v343 + 8 * v237) = v344;
                    }
                    else
                    {
                      v238 = *v236;
                      v239 = v361;
                      if (v361)
                        *(_DWORD *)v361 += 2;
                      *(_QWORD *)(v238 + 8 * v237) = v239;
                    }
                    *((_DWORD *)v201 + 9) = v237 + 1;
                  }
                  v240 = v358;
                  v358 = 0;
                  if (v240)
                  {
                    if (*(_DWORD *)v240 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*(_DWORD *)v240;
                  }
                  v241 = v361;
                  v361 = 0;
                  if (v241)
                  {
                    if (*(_DWORD *)v241 == 2)
                      WTF::StringImpl::destroy(v241, v235);
                    else
                      *(_DWORD *)v241 -= 2;
                  }
                  a2 = 0;
                }
                a4 = WTF::fastMalloc((WTF *)0x20);
                WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)a4);
                if (v356)
                  break;
              }
            }
          }
        }
      }
      this = (WTF::JSONImpl::Object *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_531:
      *(_DWORD *)(v50 + 96) = 0;
      *(_OWORD *)(v50 + 64) = 0u;
      *(_OWORD *)(v50 + 80) = 0u;
      *(_OWORD *)(v50 + 32) = 0u;
      *(_OWORD *)(v50 + 48) = 0u;
      *(_OWORD *)v50 = 0u;
      *(_OWORD *)(v50 + 16) = 0u;
      *(_QWORD *)(v50 + 104) = -1;
      *(_QWORD *)(v50 + 112) = -1;
      *(_QWORD *)(v50 + 120) = 0;
      v60[592] = 1;
    }
    if (v355)
    {
      v243 = v354;
      v244 = 8 * v355;
      do
      {
        WTF::JSONImpl::Value::create(v243, v242);
        v245 = *(unsigned int *)(a4 + 28);
        if ((_DWORD)v245 == *(_DWORD *)(a4 + 24))
        {
          v246 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a4 + 16), v245 + 1, (unint64_t)v359);
          v245 = *(unsigned int *)(a4 + 28);
          v247 = *(_QWORD *)(a4 + 16);
          v248 = *(WTF::StringImpl **)v246;
          *(_QWORD *)v246 = 0;
        }
        else
        {
          v247 = *(_QWORD *)(a4 + 16);
          v248 = v359[0];
          v359[0] = 0;
        }
        *(_QWORD *)(v247 + 8 * v245) = v248;
        *(_DWORD *)(a4 + 28) = v245 + 1;
        v249 = v359[0];
        v359[0] = 0;
        if (v249)
        {
          if (*(_DWORD *)v249 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v249;
        }
        v243 = (WTF::JSONImpl::Value *)((char *)v243 + 8);
        v244 -= 8;
      }
      while (v244);
    }
    if (*(_DWORD *)(a4 + 28))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v358 = (WTF::StringImpl *)a4;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v201 + 2, &v361, (const WTF::StringImpl *)&v358, (uint64_t)v359);
      v4 = v348;
      if (v360)
      {
        v251 = (uint64_t *)((char *)v201 + 24);
        v252 = *((unsigned int *)v201 + 9);
        if ((_DWORD)v252 == *((_DWORD *)v201 + 8))
        {
          v345 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v251, v252 + 1, (unint64_t)&v361);
          v252 = *((unsigned int *)v201 + 9);
          v346 = *((_QWORD *)v201 + 3);
          v347 = *v345;
          if (*v345)
            *v347 += 2;
          *(_QWORD *)(v346 + 8 * v252) = v347;
        }
        else
        {
          v253 = *v251;
          v254 = v361;
          if (v361)
            *(_DWORD *)v361 += 2;
          *(_QWORD *)(v253 + 8 * v252) = v254;
        }
        *((_DWORD *)v201 + 9) = v252 + 1;
      }
      v255 = v358;
      v358 = 0;
      if (v255)
      {
        if (*(_DWORD *)v255 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v255;
      }
      v256 = v361;
      v361 = 0;
      if (v256)
      {
        if (*(_DWORD *)v256 == 2)
          WTF::StringImpl::destroy(v256, v250);
        else
          *(_DWORD *)v256 -= 2;
      }
      a4 = 0;
    }
    else
    {
      v4 = v348;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v358 = v201;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v199 + 16), &v361, (const WTF::StringImpl *)&v358, (uint64_t)v359);
    if (v360)
    {
      v258 = (uint64_t *)(v199 + 24);
      v259 = *(unsigned int *)(v199 + 36);
      if ((_DWORD)v259 == *(_DWORD *)(v199 + 32))
      {
        v333 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v258, v259 + 1, (unint64_t)&v361);
        v259 = *(unsigned int *)(v199 + 36);
        v334 = *(_QWORD *)(v199 + 24);
        v335 = *v333;
        if (*v333)
          *v335 += 2;
        *(_QWORD *)(v334 + 8 * v259) = v335;
      }
      else
      {
        v260 = *v258;
        v261 = v361;
        if (v361)
          *(_DWORD *)v361 += 2;
        *(_QWORD *)(v260 + 8 * v259) = v261;
      }
      *(_DWORD *)(v199 + 36) = v259 + 1;
    }
    v262 = v358;
    v358 = 0;
    if (v262)
    {
      if (*(_DWORD *)v262 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v262;
    }
    v263 = v361;
    v361 = 0;
    if (v263)
    {
      if (*(_DWORD *)v263 == 2)
      {
        WTF::StringImpl::destroy(v263, v257);
        if (a4)
        {
LABEL_375:
          if (*(_DWORD *)a4 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)a4;
        }
LABEL_377:
        if (a2)
        {
          if (*(_DWORD *)a2 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)a2;
        }
        if (v356)
          WebCore::CertificateSummary::~CertificateSummary((WebCore::CertificateSummary *)&v349, v257);
LABEL_382:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v361 = (WTF::StringImpl *)v199;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), v359, (const WTF::StringImpl *)&v361, (uint64_t)&v349);
        if (LOBYTE(v351))
        {
          v265 = (uint64_t *)(v8 + 24);
          v266 = *(unsigned int *)(v8 + 36);
          if ((_DWORD)v266 == *(_DWORD *)(v8 + 32))
          {
            v327 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v265, v266 + 1, (unint64_t)v359);
            v266 = *(unsigned int *)(v8 + 36);
            v328 = *(_QWORD *)(v8 + 24);
            v329 = *v327;
            if (*v327)
              *v329 += 2;
            *(_QWORD *)(v328 + 8 * v266) = v329;
          }
          else
          {
            v267 = *v265;
            v268 = v359[0];
            if (v359[0])
              *(_DWORD *)v359[0] += 2;
            *(_QWORD *)(v267 + 8 * v266) = v268;
          }
          *(_DWORD *)(v8 + 36) = v266 + 1;
        }
        v269 = v361;
        v361 = 0;
        if (v269)
        {
          if (*(_DWORD *)v269 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v269;
        }
        this = v359[0];
        v359[0] = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(this, v264);
          else
            *(_DWORD *)this -= 2;
        }
        goto LABEL_394;
      }
      *(_DWORD *)v263 -= 2;
    }
    if (a4)
      goto LABEL_375;
    goto LABEL_377;
  }
  v8 = 0;
LABEL_394:
  *(_QWORD *)v4 = v8;
  return this;
}

void WebCore::InspectorPageAgent::sourceMapURLForResource(WebCore::InspectorPageAgent *this, WebCore::CachedResource *a2)
{
  uint64_t *v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  BOOL *v10;
  WTF::StringImpl *v11;
  int v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;

  if (!a2 || (*((_BYTE *)a2 + 556) & 0x1F) != 2)
  {
    *(_QWORD *)this = 0;
    return;
  }
  v4 = (uint64_t *)*((_QWORD *)a2 + 50);
  if (!v4)
  {
    v5 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v5 != -1)
    {
      v20 = (WTF::StringImpl *)&v17;
      v19 = &v20;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v4 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponseBase::httpHeaderField((uint64_t)v4, 79, &v17);
  v6 = v17;
  if (v17 && *((_DWORD *)v17 + 1))
    goto LABEL_31;
  v7 = (uint64_t *)*((_QWORD *)a2 + 50);
  if (!v7)
  {
    v8 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v8 != -1)
    {
      v20 = (WTF::StringImpl *)&v18;
      v19 = &v20;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v7 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponseBase::httpHeaderField((uint64_t)v7, 92, &v20);
  v6 = v20;
  v20 = 0;
  v11 = v17;
  v17 = v6;
  if (!v11)
    goto LABEL_16;
  v12 = *(_DWORD *)v11 - 2;
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::destroy(v11, v9);
    v11 = v20;
    v20 = 0;
    if (!v11)
      goto LABEL_15;
    v12 = *(_DWORD *)v11 - 2;
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v16);
      goto LABEL_15;
    }
  }
  *(_DWORD *)v11 = v12;
LABEL_15:
  v6 = v17;
LABEL_16:
  if (v6 && *((_DWORD *)v6 + 1))
  {
LABEL_31:
    *(_QWORD *)this = v6;
    return;
  }
  v20 = 0;
  LOBYTE(v19) = 0;
  if (!WebCore::InspectorNetworkAgent::cachedResourceContent(a2, &v20, (WTF::String *)&v19, v10)
    || (_BYTE)v19)
  {
    *(_QWORD *)this = 0;
  }
  else
  {
    Inspector::ContentSearchUtilities::findStylesheetSourceMapURL((Inspector::ContentSearchUtilities *)&v20, v13);
  }
  v14 = v20;
  v20 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
}

uint64_t WebCore::InspectorNetworkAgent::willSendRequest(uint64_t result, Inspector::IdentifiersFactory *a2, uint64_t a3, uint64_t a4, WebCore::ResourceLoader *a5, int a6, WTF::StringImpl **a7)
{
  WTF::StringImpl **v8;
  WTF::MonotonicTime *v14;
  WTF::WallTime *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  const WTF::StringImpl **v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Document *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  Inspector::IdentifiersFactory **v31;
  Inspector::IdentifiersFactory *v32;
  Inspector::IdentifiersFactory **v33;
  int v34;
  uint64_t v35;
  int v36;
  WebCore::ResourceRequest *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  _DWORD *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  int v55;
  char v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;

  v8 = (WTF::StringImpl **)result;
  if ((*(_BYTE *)(a4 + 184) & 0x10) == 0)
  {
    v14 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 24) + 56))(*(_QWORD *)(result + 24));
    v15 = (WTF::WallTime *)WTF::MonotonicTime::now(v14);
    WTF::WallTime::now(v15);
    Inspector::IdentifiersFactory::requestId(a2);
    (*((void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v8 + 23))(&v61, v8, a3);
    (*((void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v8 + 22))(&v60, v8, a3);
    v16 = *(WTF::StringImpl **)(a4 + 152);
    if (v16)
      *(_DWORD *)v16 += 2;
    v59 = v16;
    WebCore::NetworkResourcesData::resourceCreated((uint64_t *)v8[8], &v62, (const WTF::StringImpl *)&v60, a6);
    if (*((_DWORD *)v8 + 21))
    {
      v17 = *((unsigned int *)v8 + 20);
      if ((_DWORD)v17)
      {
        v18 = 16 * v17;
        v19 = (const WTF::StringImpl **)v8[9];
        while (!*v19)
        {
          v19 += 2;
          v18 -= 16;
          if (!v18)
            goto LABEL_9;
        }
      }
      else
      {
        v19 = (const WTF::StringImpl **)v8[9];
      }
      v52 = (uint64_t)v8[9] + 16 * v17;
LABEL_72:
      if (v19 != (const WTF::StringImpl **)v52)
      {
        WebCore::ResourceRequestBase::setHTTPHeaderField((WebCore::ResourceRequestBase *)a4, v19, v19 + 1);
        while (1)
        {
          v19 += 2;
          if (v19 == (const WTF::StringImpl **)v52)
            break;
          if (*v19)
            goto LABEL_72;
        }
      }
    }
LABEL_9:
    if (a6 > 0xC)
    {
      v20 = 197;
      if (a3)
      {
LABEL_11:
        v21 = *(_QWORD *)(a3 + 16);
        if (v21 && (v22 = *(_QWORD *)(v21 + 8)) != 0)
          v23 = *(WebCore::Document **)(v22 + 296);
        else
          v23 = 0;
        WebCore::InspectorNetworkAgent::buildInitiatorObject(v8, v23, (const WebCore::ResourceRequest *)a4, &v58);
        v37 = (WebCore::ResourceRequest *)(a3 + 872);
        goto LABEL_39;
      }
    }
    else
    {
      v20 = dword_1969F2388[a6];
      if (a3)
        goto LABEL_11;
    }
    WebCore::InspectorNetworkAgent::buildInitiatorObject(v8, 0, (const WebCore::ResourceRequest *)a4, &v58);
    v37 = (WebCore::ResourceRequest *)a4;
LABEL_39:
    if ((*((_BYTE *)v37 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(v37);
      *((_BYTE *)v37 + 184) |= 1u;
    }
    v43 = *(WTF::StringImpl **)v37;
    if (*(_QWORD *)v37)
      *(_DWORD *)v43 += 2;
    v57 = v43;
    LOBYTE(v55) = 0;
    v56 = 0;
    if (a6 != 12)
    {
      v55 = v20;
      v56 = 1;
    }
    WebCore::buildObjectForResourceRequest((WebCore *)&v54, (WebCore::FormData **)a4, a7);
    WebCore::InspectorNetworkAgent::buildObjectForResourceResponse((WTF::JSONImpl::Object *)&v53, (const WebCore::ResourceResponse *)v8, a5, 0);
    Inspector::NetworkFrontendDispatcher::requestWillBeSent();
    v45 = v53;
    v53 = 0;
    if (v45)
    {
      if (*v45 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v45;
    }
    v46 = v54;
    v54 = 0;
    if (v46)
    {
      if (*v46 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v46;
    }
    v47 = v57;
    v57 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v44);
      else
        *(_DWORD *)v47 -= 2;
    }
    v48 = v58;
    v58 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v48;
    }
    v49 = v59;
    v59 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v44);
      else
        *(_DWORD *)v49 -= 2;
    }
    v50 = v60;
    v60 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v44);
      else
        *(_DWORD *)v50 -= 2;
    }
    v51 = v61;
    v61 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v44);
      else
        *(_DWORD *)v51 -= 2;
    }
    result = (uint64_t)v62;
    v62 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v44);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v25 = (uint64_t *)(result + 96);
  v24 = *(_QWORD *)(result + 96);
  if (v24
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v25, 8u), (v24 = *v25) != 0))
  {
    v26 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v26 = 0;
  }
  v27 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
  v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
  v30 = v26 & ((v29 >> 31) ^ v29);
  v31 = (Inspector::IdentifiersFactory **)(v24 + 8 * v30);
  v32 = *v31;
  if (!*v31)
  {
LABEL_25:
    *v31 = a2;
    v35 = *v25;
    if (*v25)
      v36 = *(_DWORD *)(v35 - 12) + 1;
    else
      v36 = 1;
    *(_DWORD *)(v35 - 12) = v36;
    v38 = *v25;
    if (*v25)
      v39 = *(_DWORD *)(v38 - 12);
    else
      v39 = 0;
    v40 = (*(_DWORD *)(v38 - 16) + v39);
    v41 = *(unsigned int *)(v38 - 4);
    if (v41 > 0x400)
    {
      if (v41 > 2 * v40)
        return result;
    }
    else
    {
      if (3 * v41 > 4 * v40)
        return result;
      if (!(_DWORD)v41)
      {
        v42 = 8;
        return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v25, v42);
      }
    }
    v42 = (_DWORD)v41 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v41));
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v25, v42);
  }
  v33 = 0;
  v34 = 1;
  while (v32 != a2)
  {
    if (v32 == (Inspector::IdentifiersFactory *)-1)
      v33 = v31;
    v30 = (v30 + v34) & v26;
    v31 = (Inspector::IdentifiersFactory **)(v24 + 8 * v30);
    v32 = *v31;
    ++v34;
    if (!*v31)
    {
      if (v33)
      {
        *v33 = 0;
        --*(_DWORD *)(*v25 - 16);
        v31 = v33;
      }
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t *WebCore::InspectorNetworkAgent::buildInitiatorObject@<X0>(WTF::StringImpl **this@<X0>, WebCore::Document *a2@<X1>, const WebCore::ResourceRequest *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t isMainThread;
  uint64_t v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t *result;
  const WTF::String *v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  double v29;
  WTF::JSONImpl::Value *v30;
  WTF::StringImpl *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::JSONImpl::Value *v37;
  WTF::StringImpl *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF *v45;
  void *v46;
  _DWORD **v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD **v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD **v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD **v56;
  uint64_t v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  Inspector::ScriptCallStack *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63[2];
  char v64;

  isMainThread = WTF::isMainThread((WTF *)this);
  if ((isMainThread & 1) == 0)
  {
    WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)isMainThread);
    result = Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v63, (Inspector::Protocol::Helpers *)0x61);
    *a4 = (WTF::StringImpl *)v63[0];
    return result;
  }
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (isMainThread = *(_QWORD *)(v9 + 96)) == 0)
    isMainThread = WebCore::threadGlobalDataSlow((WebCore *)isMainThread);
  Inspector::createScriptCallStack(*(Inspector **)(isMainThread + 64), (JSC::JSGlobalObject *)0xC8);
  v10 = (WTF::JSONImpl::Object *)Inspector::ScriptCallStack::size(v60);
  if (v10)
  {
    WTF::JSONImpl::Object::create(v10);
    v62 = (WTF::StringImpl *)v63[0];
    Inspector::Protocol::CSS::Grouping::Builder<0>::setType((uint64_t *)&v62, (Inspector::Protocol::Helpers *)0xC7);
    v11 = v62;
    Inspector::ScriptCallStack::buildInspectorObject(v60);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v61 = v59;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v11 + 2, &v62, (const WTF::StringImpl *)&v61, (uint64_t)v63);
    if (v64)
    {
      v13 = (uint64_t *)((char *)v11 + 24);
      v14 = *((unsigned int *)v11 + 9);
      if ((_DWORD)v14 == *((_DWORD *)v11 + 8))
      {
        v47 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v62);
        v14 = *((unsigned int *)v11 + 9);
        v48 = *((_QWORD *)v11 + 3);
        v49 = *v47;
        if (*v47)
          *v49 += 2;
        *(_QWORD *)(v48 + 8 * v14) = v49;
      }
      else
      {
        v15 = *v13;
        v16 = v62;
        if (v62)
          *(_DWORD *)v62 += 2;
        *(_QWORD *)(v15 + 8 * v14) = v16;
      }
      *((_DWORD *)v11 + 9) = v14 + 1;
    }
    v17 = v61;
    v61 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v17;
    }
    v18 = v62;
    v62 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v10 = 0;
    goto LABEL_49;
  }
  if (!a2
    || (v10 = (WTF::JSONImpl::Object *)*((_QWORD *)a2 + 91)) == 0
    || (v10 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(WTF::JSONImpl::Object *))(*(_QWORD *)v10 + 16))(v10)) == 0)
  {
    v11 = 0;
    goto LABEL_49;
  }
  WTF::JSONImpl::Object::create(v10);
  Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v63, (Inspector::Protocol::Helpers *)0xC6);
  v11 = (WTF::StringImpl *)v63[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WebCore::Document *)((char *)a2 + 736), v20);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v11 + 2, &v61, (const WTF::StringImpl *)&v62, (uint64_t)v63);
  if (v64)
  {
    v22 = (uint64_t *)((char *)v11 + 24);
    v23 = *((unsigned int *)v11 + 9);
    if ((_DWORD)v23 == *((_DWORD *)v11 + 8))
    {
      v53 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v61);
      v23 = *((unsigned int *)v11 + 9);
      v54 = *((_QWORD *)v11 + 3);
      v55 = *v53;
      if (*v53)
        *v55 += 2;
      *(_QWORD *)(v54 + 8 * v23) = v55;
    }
    else
    {
      v24 = *v22;
      v25 = v61;
      if (v61)
        *(_DWORD *)v61 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *((_DWORD *)v11 + 9) = v23 + 1;
  }
  v26 = v62;
  v62 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v26;
  }
  v27 = v61;
  v61 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v21);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 91) + 16))(*((_QWORD *)a2 + 91));
  v29 = (double)(int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 168))(v28) + 1);
  v30 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v30, v29);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v11 + 2, &v61, (const WTF::StringImpl *)&v62, (uint64_t)v63);
  if (v64)
  {
    v32 = (uint64_t *)((char *)v11 + 24);
    v33 = *((unsigned int *)v11 + 9);
    if ((_DWORD)v33 == *((_DWORD *)v11 + 8))
    {
      v56 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v32, v33 + 1, (unint64_t)&v61);
      v33 = *((unsigned int *)v11 + 9);
      v57 = *((_QWORD *)v11 + 3);
      v58 = *v56;
      if (*v56)
        *v58 += 2;
      *(_QWORD *)(v57 + 8 * v33) = v58;
    }
    else
    {
      v34 = *v32;
      v35 = v61;
      if (v61)
        *(_DWORD *)v61 += 2;
      *(_QWORD *)(v34 + 8 * v33) = v35;
    }
    *((_DWORD *)v11 + 9) = v33 + 1;
  }
  v36 = v62;
  v62 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v36;
  }
  v10 = v61;
  v61 = 0;
  if (!v10)
  {
LABEL_49:
    if (a3)
      goto LABEL_50;
    goto LABEL_66;
  }
  if (*(_DWORD *)v10 == 2)
  {
    v10 = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(v10, v31);
    if (a3)
      goto LABEL_50;
  }
  else
  {
    *(_DWORD *)v10 -= 2;
    if (a3)
    {
LABEL_50:
      if (*((_QWORD *)this[2] + 5))
      {
        v37 = (WTF::JSONImpl::Value *)*((_QWORD *)a3 + 22);
        if (((unint64_t)v37 & 0xFF00000000) != 0)
        {
          if (!v11)
          {
            WTF::JSONImpl::Object::create(v10);
            Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v63, (Inspector::Protocol::Helpers *)0x61);
            v11 = (WTF::StringImpl *)v63[0];
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create(v37);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v11 + 2, &v61, (const WTF::StringImpl *)&v62, (uint64_t)v63);
          if (v64)
          {
            v39 = (uint64_t *)((char *)v11 + 24);
            v40 = *((unsigned int *)v11 + 9);
            if ((_DWORD)v40 == *((_DWORD *)v11 + 8))
            {
              v50 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)&v61);
              v40 = *((unsigned int *)v11 + 9);
              v51 = *((_QWORD *)v11 + 3);
              v52 = *v50;
              if (*v50)
                *v52 += 2;
              *(_QWORD *)(v51 + 8 * v40) = v52;
            }
            else
            {
              v41 = *v39;
              v42 = v61;
              if (v61)
                *(_DWORD *)v61 += 2;
              *(_QWORD *)(v41 + 8 * v40) = v42;
            }
            *((_DWORD *)v11 + 9) = v40 + 1;
          }
          v43 = v62;
          v62 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v43;
          }
          v10 = v61;
          v61 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              v10 = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(v10, v38);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
      }
    }
  }
LABEL_66:
  if (v11)
  {
    *a4 = v11;
  }
  else
  {
    if (*((_BYTE *)this + 176) && (v44 = this[21]) != 0)
    {
      ++*(_DWORD *)v44;
    }
    else
    {
      WTF::JSONImpl::Object::create(v10);
      Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v63, (Inspector::Protocol::Helpers *)0x61);
      v44 = (WTF::StringImpl *)v63[0];
    }
    *a4 = v44;
  }
  result = (uint64_t *)v60;
  if (v60)
  {
    if (*(_DWORD *)v60 == 1)
    {
      v45 = (WTF *)MEMORY[0x19AEA6024]();
      return (uint64_t *)WTF::fastFree(v45, v46);
    }
    else
    {
      --*(_DWORD *)v60;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::buildObjectForResourceRequest(WebCore *this, WebCore::FormData **a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::String *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *result;
  WTF::StringImpl *v33;
  WebCore::FormData *v34;
  int v35;
  int v36;
  WebCore::FormData *v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  const void *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  void *v49;
  WTF *v50;
  const WTF::String *v51;
  WTF::StringImpl *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  const WTF::String *v60;
  WTF::StringImpl *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  int v69;
  const WTF::String *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  bmalloc::api *v77;
  void *v78;
  bmalloc::api *v79;
  void *v80;
  bmalloc::api *v81;
  void *v82;
  _DWORD **v83;
  uint64_t v84;
  _DWORD *v85;
  _DWORD **v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD **v89;
  uint64_t v90;
  _DWORD *v91;
  _DWORD **v92;
  uint64_t v93;
  _DWORD *v94;
  _DWORD **v95;
  uint64_t v96;
  _DWORD *v97;
  _DWORD **v98;
  uint64_t v99;
  _DWORD *v100;
  char v101;
  char v102;
  char v103;
  WTF::StringImpl *v104;
  WebCore::ResourceLoader *v105;
  WTF *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  _BYTE v111[16];
  char v112;

  WTF::JSONImpl::Object::create(this);
  if (((_BYTE)a2[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  v6 = v108;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)a2, v7);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v108 + 2, &v109, (const WTF::StringImpl *)&v110, (uint64_t)v111);
  if (v112)
  {
    v9 = (uint64_t *)((char *)v108 + 24);
    v10 = *((unsigned int *)v108 + 9);
    if ((_DWORD)v10 == *((_DWORD *)v108 + 8))
    {
      v83 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1, (unint64_t)&v109);
      v10 = *((unsigned int *)v108 + 9);
      v84 = *((_QWORD *)v108 + 3);
      v85 = *v83;
      if (*v83)
        *v85 += 2;
      *(_QWORD *)(v84 + 8 * v10) = v85;
    }
    else
    {
      v11 = *v9;
      v12 = v109;
      if (v109)
        *(_DWORD *)v109 += 2;
      *(_QWORD *)(v11 + 8 * v10) = v12;
    }
    *((_DWORD *)v6 + 9) = v10 + 1;
  }
  v13 = v110;
  v110 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v13;
  }
  v14 = v109;
  v109 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (((_BYTE)a2[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  v15 = v108;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(a2 + 11), v16);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v108 + 2, &v109, (const WTF::StringImpl *)&v110, (uint64_t)v111);
  if (v112)
  {
    v18 = (uint64_t *)((char *)v108 + 24);
    v19 = *((unsigned int *)v108 + 9);
    if ((_DWORD)v19 == *((_DWORD *)v108 + 8))
    {
      v86 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v109);
      v19 = *((unsigned int *)v108 + 9);
      v87 = *((_QWORD *)v108 + 3);
      v88 = *v86;
      if (*v86)
        *v88 += 2;
      *(_QWORD *)(v87 + 8 * v19) = v88;
    }
    else
    {
      v20 = *v18;
      v21 = v109;
      if (v109)
        *(_DWORD *)v109 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *((_DWORD *)v15 + 9) = v19 + 1;
  }
  v22 = v110;
  v110 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v22;
  }
  v23 = v109;
  v109 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (((_BYTE)a2[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  WebCore::buildObjectForHeaders((WebCore *)&v107, (const WebCore::HTTPHeaderMap *)(a2 + 12));
  v24 = v108;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = v107;
  v107 = 0;
  v109 = v25;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v24 + 2, &v110, (const WTF::StringImpl *)&v109, (uint64_t)v111);
  if (v112)
  {
    v27 = (uint64_t *)((char *)v24 + 24);
    v28 = *((unsigned int *)v24 + 9);
    if ((_DWORD)v28 == *((_DWORD *)v24 + 8))
    {
      v89 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)&v110);
      v28 = *((unsigned int *)v24 + 9);
      v90 = *((_QWORD *)v24 + 3);
      v91 = *v89;
      if (*v89)
        *v91 += 2;
      *(_QWORD *)(v90 + 8 * v28) = v91;
    }
    else
    {
      v29 = *v27;
      v30 = v110;
      if (v110)
        *(_DWORD *)v110 += 2;
      *(_QWORD *)(v29 + 8 * v28) = v30;
    }
    *((_DWORD *)v24 + 9) = v28 + 1;
  }
  v31 = v109;
  v109 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v31;
  }
  result = v110;
  v110 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  v33 = v108;
  *(_QWORD *)this = v108;
  if (((_BYTE)a2[23] & 1) != 0)
  {
    if (((_BYTE)a2[23] & 4) != 0)
      goto LABEL_45;
  }
  else
  {
    result = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    v101 = *((_BYTE *)a2 + 184) | 1;
    *((_BYTE *)a2 + 184) = v101;
    if ((v101 & 4) != 0)
      goto LABEL_45;
  }
  result = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceHTTPBody((WebCore::ResourceRequest *)a2);
  *((_BYTE *)a2 + 184) |= 4u;
LABEL_45:
  v34 = a2[21];
  if (!v34)
    goto LABEL_99;
  ++*(_DWORD *)v34;
  if (((_BYTE)a2[23] & 1) != 0)
  {
    if (((_BYTE)a2[23] & 4) != 0)
      goto LABEL_48;
  }
  else
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    v102 = *((_BYTE *)a2 + 184) | 1;
    *((_BYTE *)a2 + 184) = v102;
    if ((v102 & 4) != 0)
      goto LABEL_48;
  }
  WebCore::ResourceRequest::doUpdateResourceHTTPBody((WebCore::ResourceRequest *)a2);
  *((_BYTE *)a2 + 184) |= 4u;
LABEL_48:
  result = a2[21];
  v35 = (*(_DWORD *)result)++;
  v36 = *((_DWORD *)result + 5);
  if (v35)
  {
    *(_DWORD *)result = v35;
  }
  else
  {
    WebCore::FormData::~FormData(result, v26);
    result = (WTF::StringImpl *)bmalloc::api::isoDeallocate(v77, v78);
  }
  if (*(_DWORD *)v34 == 1)
  {
    WebCore::FormData::~FormData(v34, v26);
    result = (WTF::StringImpl *)bmalloc::api::isoDeallocate(v79, v80);
    if (!v36)
      goto LABEL_99;
  }
  else
  {
    --*(_DWORD *)v34;
    if (!v36)
      goto LABEL_99;
  }
  if (((_BYTE)a2[23] & 1) == 0)
  {
    result = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    v103 = *((_BYTE *)a2 + 184) | 1;
    *((_BYTE *)a2 + 184) = v103;
    if ((v103 & 4) != 0)
      goto LABEL_54;
LABEL_180:
    result = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceHTTPBody((WebCore::ResourceRequest *)a2);
    *((_BYTE *)a2 + 184) |= 4u;
    goto LABEL_54;
  }
  if (((_BYTE)a2[23] & 4) == 0)
    goto LABEL_180;
LABEL_54:
  v37 = a2[21];
  if (v37)
    ++*(_DWORD *)v37;
  v38 = *((unsigned int *)v37 + 5);
  if ((_DWORD)v38)
  {
    v105 = (WebCore::ResourceLoader *)a3;
    v106 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = *((_QWORD *)v37 + 1);
    v43 = 48 * v38;
    do
    {
      if (v42)
      {
        if (!*(_DWORD *)(v42 + 40))
        {
          v44 = *(unsigned int *)(v42 + 12);
          if ((_DWORD)v44)
          {
            v45 = *(const void **)v42;
            if (v44 + v40 > v39)
            {
              v104 = v33;
              v46 = v39 + (v39 >> 2);
              if (v46 >= 0x10)
                v47 = v46 + 1;
              else
                v47 = 16;
              if (v47 <= v44 + v40)
                v39 = v44 + v40;
              else
                v39 = v47;
              if (HIDWORD(v39))
              {
                __break(0xC471u);
                return result;
              }
              v48 = (char *)WTF::fastMalloc((WTF *)v39);
              v39 = v39;
              memcpy(v48, v41, v40);
              if (v41)
              {
                if (v48 == v41)
                {
                  v48 = 0;
                  v39 = 0;
                }
                WTF::fastFree((WTF *)v41, v49);
              }
              v106 = (WTF *)v48;
              v41 = v48;
              v33 = v104;
            }
            result = (WTF::StringImpl *)memcpy(&v41[v40], v45, v44);
            v40 = (v44 + v40);
          }
        }
      }
      v42 += 48;
      v43 -= 48;
    }
    while (v43);
    a3 = (WTF::StringImpl **)v105;
    v50 = v106;
    if (v37)
      goto LABEL_80;
  }
  else
  {
    v50 = 0;
LABEL_80:
    if (*(_DWORD *)v37 == 1)
    {
      WebCore::FormData::~FormData(v37, v26);
      bmalloc::api::isoDeallocate(v81, v82);
    }
    else
    {
      --*(_DWORD *)v37;
    }
  }
  WTF::String::fromUTF8WithLatin1Fallback();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v108, v51);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v33 + 2, &v109, (const WTF::StringImpl *)&v110, (uint64_t)v111);
  if (v112)
  {
    v53 = (uint64_t *)((char *)v33 + 24);
    v54 = *((unsigned int *)v33 + 9);
    if ((_DWORD)v54 == *((_DWORD *)v33 + 8))
    {
      v95 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v53, v54 + 1, (unint64_t)&v109);
      v54 = *((unsigned int *)v33 + 9);
      v96 = *((_QWORD *)v33 + 3);
      v97 = *v95;
      if (*v95)
        *v97 += 2;
      *(_QWORD *)(v96 + 8 * v54) = v97;
    }
    else
    {
      v55 = *v53;
      v56 = v109;
      if (v109)
        *(_DWORD *)v109 += 2;
      *(_QWORD *)(v55 + 8 * v54) = v56;
    }
    *((_DWORD *)v33 + 9) = v54 + 1;
  }
  v57 = v110;
  v110 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v57;
  }
  v58 = v109;
  v109 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v52);
    else
      *(_DWORD *)v58 -= 2;
  }
  result = v108;
  v108 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v52);
      if (!v50)
        goto LABEL_99;
      goto LABEL_98;
    }
    *(_DWORD *)result -= 2;
  }
  if (v50)
LABEL_98:
    result = (WTF::StringImpl *)WTF::fastFree(v50, v52);
LABEL_99:
  if (a3)
  {
    if (((*((_BYTE *)a3 + 981) - 1) & 0xF8) != 0)
      v59 = 169;
    else
      v59 = (*((_BYTE *)a3 + 981) - 1) + 170;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v59);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v108, v60);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v33 + 2, &v109, (const WTF::StringImpl *)&v110, (uint64_t)v111);
    if (v112)
    {
      v62 = (uint64_t *)((char *)v33 + 24);
      v63 = *((unsigned int *)v33 + 9);
      if ((_DWORD)v63 == *((_DWORD *)v33 + 8))
      {
        v92 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v62, v63 + 1, (unint64_t)&v109);
        v63 = *((unsigned int *)v33 + 9);
        v93 = *((_QWORD *)v33 + 3);
        v94 = *v92;
        if (*v92)
          *v94 += 2;
        *(_QWORD *)(v93 + 8 * v63) = v94;
      }
      else
      {
        v64 = *v62;
        v65 = v109;
        if (v109)
          *(_DWORD *)v109 += 2;
        *(_QWORD *)(v64 + 8 * v63) = v65;
      }
      *((_DWORD *)v33 + 9) = v63 + 1;
    }
    v66 = v110;
    v110 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v66;
    }
    v67 = v108;
    v108 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v61);
      else
        *(_DWORD *)v67 -= 2;
    }
    v68 = v109;
    v109 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v61);
      else
        *(_DWORD *)v68 -= 2;
    }
    result = a3[123];
    if (result)
    {
      v69 = *(_DWORD *)result;
      *(_DWORD *)result += 2;
      v108 = result;
      if (!*((_DWORD *)result + 1))
      {
        v108 = 0;
        if (v69)
          goto LABEL_134;
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v61);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v108, v70);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v33 + 2, &v109, (const WTF::StringImpl *)&v110, (uint64_t)v111);
      if (v112)
      {
        v71 = (uint64_t *)((char *)v33 + 24);
        v72 = *((unsigned int *)v33 + 9);
        if ((_DWORD)v72 == *((_DWORD *)v33 + 8))
        {
          v98 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v71, v72 + 1, (unint64_t)&v109);
          v72 = *((unsigned int *)v33 + 9);
          v99 = *((_QWORD *)v33 + 3);
          v100 = *v98;
          if (*v98)
            *v100 += 2;
          *(_QWORD *)(v99 + 8 * v72) = v100;
        }
        else
        {
          v73 = *v71;
          v74 = v109;
          if (v109)
            *(_DWORD *)v109 += 2;
          *(_QWORD *)(v73 + 8 * v72) = v74;
        }
        *((_DWORD *)v33 + 9) = v72 + 1;
      }
      v75 = v110;
      v110 = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v75;
      }
      v76 = v109;
      v109 = 0;
      if (v76)
      {
        if (*(_DWORD *)v76 == 2)
          WTF::StringImpl::destroy(v76, v61);
        else
          *(_DWORD *)v76 -= 2;
      }
      result = v108;
      v108 = 0;
      if (result)
      {
        v69 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result != 2)
        {
LABEL_134:
          *(_DWORD *)result = v69;
          return result;
        }
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v61);
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorNetworkAgent::willSendRequest(uint64_t a1, Inspector::IdentifiersFactory *a2, uint64_t a3, WebCore::ResourceRequest *this, WebCore::ResourceLoader *a5, WebCore::InspectorPageAgent *a6, WTF::StringImpl **a7)
{
  int v13;
  int v15;
  const WTF::URL *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::InspectorPageAgent *v22;

  if (*(_BYTE *)(a1 + 178) || (v15 = *((unsigned __int8 *)this + 147), v15 == 2))
  {
    v13 = 5;
    return WebCore::InspectorNetworkAgent::willSendRequest(a1, a2, a3, (uint64_t)this, a5, v13, a7);
  }
  if (v15 == 3)
  {
    v13 = 6;
    return WebCore::InspectorNetworkAgent::willSendRequest(a1, a2, a3, (uint64_t)this, a5, v13, a7);
  }
  if (!a3)
    goto LABEL_26;
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if ((*(_BYTE *)(a3 + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a3 + 872));
    *(_BYTE *)(a3 + 1056) |= 1u;
  }
  if (WTF::equalIgnoringFragmentIdentifier() && !*(_BYTE *)(a3 + 3537))
  {
    v13 = 0;
    return WebCore::InspectorNetworkAgent::willSendRequest(a1, a2, a3, (uint64_t)this, a5, v13, a7);
  }
  v18 = *(unsigned int *)(a3 + 2828);
  if (!(_DWORD)v18)
  {
LABEL_20:
    if (a6)
    {
LABEL_27:
      v13 = WebCore::InspectorPageAgent::inspectorResourceType(a6, a2);
      return WebCore::InspectorNetworkAgent::willSendRequest(a1, a2, a3, (uint64_t)this, a5, v13, a7);
    }
    v21 = *(_QWORD *)(a3 + 16);
    if (v21)
      v22 = *(WebCore::InspectorPageAgent **)(v21 + 8);
    else
      v22 = 0;
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    a6 = (WebCore::InspectorPageAgent *)WebCore::InspectorPageAgent::cachedResource(v22, this, v17);
LABEL_26:
    if (!a6)
    {
      v13 = 12;
      return WebCore::InspectorNetworkAgent::willSendRequest(a1, a2, a3, (uint64_t)this, a5, v13, a7);
    }
    goto LABEL_27;
  }
  v19 = *(_QWORD *)(a3 + 2816);
  v20 = 80 * v18;
  while (1)
  {
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    if ((WTF::equalIgnoringFragmentIdentifier() & 1) != 0)
      break;
    v19 += 80;
    v20 -= 80;
    if (!v20)
      goto LABEL_20;
  }
  v13 = 2;
  return WebCore::InspectorNetworkAgent::willSendRequest(a1, a2, a3, (uint64_t)this, a5, v13, a7);
}

uint64_t WebCore::InspectorPageAgent::cachedResource(WebCore::InspectorPageAgent *this, const WebCore::LocalFrame *a2, const WTF::URL *a3)
{
  WTF::StringImpl *v3;
  WebCore::Document *v6;
  WebCore::CachedResourceLoader *v7;
  int v8;
  __int128 *v9;
  __int128 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WebCore::SecurityOrigin *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  char v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint64_t isMainThread;
  uint64_t v32;
  uint64_t *v33;
  void *v34;
  __int128 v36;
  WebCore::CachedResourceLoader *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[7];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  char v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  char v56;
  char **v57;
  char *v58;

  v3 = *(WTF::StringImpl **)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v6 = (WebCore::Document *)*((_QWORD *)this + 37);
  v7 = (WebCore::CachedResourceLoader *)*((_QWORD *)v6 + 90);
  if (!v7)
  {
    v7 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(v6, a2);
    v3 = *(WTF::StringImpl **)a2;
  }
  v9 = (__int128 *)((char *)a2 + 8);
  v8 = *((_DWORD *)a2 + 2);
  if ((v8 & 1) == 0)
  {
    if (!v3)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (!v3)
  {
LABEL_8:
    v39 = v3;
    v10 = *(_OWORD *)((char *)a2 + 24);
    v40 = *v9;
    v41 = v10;
    goto LABEL_9;
  }
  if (*((_DWORD *)v3 + 1) <= *((_DWORD *)a2 + 9) || (v8 & 2) == 0)
  {
LABEL_7:
    *(_DWORD *)v3 += 2;
    goto LABEL_8;
  }
  *(_DWORD *)v3 += 2;
  v39 = v3;
  v36 = *(_OWORD *)((char *)a2 + 24);
  v40 = *v9;
  v41 = v36;
  v37 = v7;
  WTF::URL::removeFragmentIdentifier((WTF::URL *)&v39);
  v7 = v37;
LABEL_9:
  v12 = WebCore::CachedResourceLoader::cachedResource(v7, &v39, a3);
  v13 = v39;
  v39 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v11);
      if (v12)
        return v12;
      goto LABEL_13;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (v12)
    return v12;
LABEL_13:
  v14 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v14 += 2;
  v39 = v14;
  v15 = *(_OWORD *)((char *)a2 + 24);
  v40 = *v9;
  v41 = v15;
  v42[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v42);
  v42[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v42[6] = v58;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0x10000;
  v17 = v47 & 0x80 | 4;
  v47 = v17;
  v48 = 0;
  v18 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v19 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *(_DWORD *)v19 += 2;
    v17 = v47;
  }
  v49 = v19;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = v53 & 0xE0 | 5;
  v47 = v17 | 2;
  v54 = 0;
  v20 = *((_QWORD *)this + 37);
  v21 = *(WTF::StringImpl **)(v20 + 408);
  if (v21)
  {
    *(_DWORD *)v21 += 2;
    v38 = v21;
    goto LABEL_20;
  }
  if (*(_BYTE *)(v20 + 464) != 1)
  {
    if (v19)
      *(_DWORD *)v19 += 2;
    v38 = v19;
    if (v19)
      goto LABEL_20;
LABEL_61:
    v26 = *v18;
    if (*v18)
    {
      v27 = *(_DWORD *)v26 + 2;
      *(_DWORD *)v26 = v27;
      goto LABEL_26;
    }
    goto LABEL_67;
  }
  v22 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 + 192) + 256))(v20 + 192);
  WebCore::SecurityOrigin::domainForCachePartition(v22, &v38);
  if (!v38)
    goto LABEL_61;
LABEL_20:
  v23 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v23 != -1)
  {
    v58 = &v56;
    v57 = &v58;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v57, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  if (v38)
  {
    v24 = *((_QWORD *)v38 + 1);
    v25 = *((unsigned int *)v38 + 1) | ((unint64_t)((*((_DWORD *)v38 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v24 = 0;
    v25 = 0x100000000;
  }
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v24, v25, (uint64_t *)&v55);
  v26 = v55;
  if (v55)
    goto LABEL_25;
  v26 = *v18;
  if (*v18)
  {
    *(_DWORD *)v26 += 2;
LABEL_25:
    v27 = *(_DWORD *)v26;
LABEL_26:
    v28 = 0;
    *(_DWORD *)v26 = v27 + 2;
    goto LABEL_27;
  }
LABEL_67:
  v28 = 1;
LABEL_27:
  v29 = v49;
  v49 = v26;
  if (!v29)
    goto LABEL_30;
  if (*(_DWORD *)v29 != 2)
  {
    *(_DWORD *)v29 -= 2;
LABEL_30:
    if ((v28 & 1) == 0)
      goto LABEL_31;
    goto LABEL_33;
  }
  WTF::StringImpl::destroy(v29, v16);
  if ((v28 & 1) == 0)
  {
LABEL_31:
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v16);
    else
      *(_DWORD *)v26 -= 2;
  }
LABEL_33:
  v30 = v38;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      v30 = (WTF *)WTF::StringImpl::destroy(v38, v16);
    else
      *(_DWORD *)v38 -= 2;
  }
  isMainThread = WTF::isMainThread(v30);
  if ((isMainThread & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195E449A4);
  }
  {
    isMainThread = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
  }
  v32 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 1008);
  if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195E449C4);
  }
  v33 = (uint64_t *)WebCore::MemoryCache::sessionResourceMap((WTF *)&WebCore::MemoryCache::singleton(void)::memoryCache, v32);
  if (v33)
    v12 = WebCore::MemoryCache::resourceForRequestImpl((int)v33, (WebCore::ResourceRequest *)&v39, v33);
  else
    v12 = 0;
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v39, v34);
  return v12;
}

void WebCore::InspectorNetworkAgent::willSendRequestOfType(uint64_t a1, Inspector::IdentifiersFactory *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10;
  int v11;
  WTF::StringImpl *v12;
  CFTypeRef v13;
  _QWORD v14[5];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;
  __int16 v22;
  char v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  char v31;
  __int16 v32;
  char v33;
  CFTypeRef cf;
  char v35;

  v14[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v14);
  v21 = 0;
  v22 = 0;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v24 = vdupq_n_s64(0x7FF8000000000000uLL);
  v25 = v24;
  v26 = 0;
  v27 = 0;
  v28 = 0x8000000000000000;
  v30 = 0x7FF8000000000000;
  v31 &= 0xF0u;
  v29 = v24;
  v32 &= 0xC000u;
  v33 = v33 & 0xF8 | 2;
  cf = 0;
  if (a5 == 1)
    v10 = 8;
  else
    v10 = 12;
  v35 = 0;
  if (a5)
    v11 = v10;
  else
    v11 = 7;
  v23 = v23 & 0xC0 | 5;
  WebCore::InspectorNetworkAgent::willSendRequest(a1, a2, a3, a4, (WebCore::ResourceLoader *)v14, v11, 0);
  v13 = cf;
  cf = 0;
  if (v13)
    CFRelease(v13);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v14, v12);
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::didReceiveResponse(WTF::StringImpl *result, Inspector::IdentifiersFactory *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  Inspector::IdentifiersFactory *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  WebCore::ResourceLoader *v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  int v24;
  WebCore::InspectorPageAgent *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::InspectorPageAgent *v29;
  const WTF::URL *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  const WTF::String *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  uint64_t *v42;
  WTF *v43;
  const WTF::StringImpl *v44;
  WTF *v45;
  int v46;
  int v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  void *v56;
  unsigned int v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  const WTF::String *v60;
  WTF::StringImpl *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  _DWORD *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  _DWORD *v73;
  WTF::StringImpl *v74;
  const WTF::String *v75;
  WTF::StringImpl *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  _DWORD *v81;
  WTF::StringImpl *v82;
  const WTF::String *v83;
  WTF::StringImpl *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  _DWORD *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  char v93;
  WTF::MonotonicTime *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  CFTypeRef v100;
  _DWORD **v101;
  uint64_t v102;
  _DWORD *v103;
  _DWORD **v104;
  uint64_t v105;
  _DWORD *v106;
  _DWORD **v107;
  uint64_t v108;
  _DWORD *v109;
  _DWORD **v110;
  uint64_t v111;
  _DWORD *v112;
  _DWORD **v113;
  uint64_t v114;
  _DWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  _BYTE v129[240];
  CFTypeRef cf;
  char v131;
  WTF::StringImpl *v132;
  Inspector::IdentifiersFactory *v133;
  _QWORD v134[2];
  char v135;
  _QWORD v136[2];

  v8 = result;
  v133 = this;
  v9 = *((_QWORD *)result + 12);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(Inspector::IdentifiersFactory **)(v9 + 8 * v14);
    if (v15 == this)
      return result;
    v16 = 1;
    while (v15)
    {
      v14 = (v14 + v16) & v10;
      v15 = *(Inspector::IdentifiersFactory **)(v9 + 8 * v14);
      ++v16;
      if (v15 == this)
        return result;
    }
  }
  Inspector::IdentifiersFactory::requestId(this);
  v129[0] = 0;
  v131 = 0;
  v17 = WebCore::s_platformStrategies;
  v18 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v18)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
    *(_QWORD *)(v17 + 8) = v18;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 152))(v18, a4))
  {
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v19 = off_1E33F0A48;
    v19[1] = &v133;
    v19[2] = v129;
    v134[0] = v19;
    WTF::callOnMainThreadAndWait();
    v20 = v134[0];
    v134[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (v131)
    v21 = (WebCore::ResourceLoader *)v129;
  else
    v21 = (WebCore::ResourceLoader *)a4;
  WebCore::InspectorNetworkAgent::buildObjectForResourceResponse((WTF::JSONImpl::Object *)&v128, v8, v21, a5);
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  v24 = *(unsigned __int16 *)(a4 + 136);
  if (!a5)
    goto LABEL_23;
  v25 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 184))(a5))
    v26 = a5;
  else
    v26 = 0;
  if (v26 && v24 != 304)
  {
    v27 = *(_QWORD *)(v26 + 1328);
    if (v27)
    {
      v25 = *(WebCore::InspectorPageAgent **)(v27 + 8);
      goto LABEL_24;
    }
LABEL_23:
    v25 = 0;
  }
LABEL_24:
  if (a3 && !v25)
  {
    v28 = *(_QWORD *)(a3 + 16);
    if (v28)
      v29 = *(WebCore::InspectorPageAgent **)(v28 + 8);
    else
      v29 = 0;
    WebCore::ResourceResponse::platformLazyInit(a4, 1);
    v25 = (WebCore::InspectorPageAgent *)WebCore::InspectorPageAgent::cachedResource(v29, (const WebCore::LocalFrame *)a4, v30);
  }
  if (v25)
  {
    v31 = v128;
    if (v128)
    {
      WebCore::ResourceResponse::platformLazyInit(a4, 1);
      v32 = *(_QWORD *)(a4 + 40);
      if (!v32 || !*(_DWORD *)(v32 + 4))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v127 = (WTF::StringImpl *)v134[0];
        v33 = (uint64_t *)*((_QWORD *)v25 + 50);
        if (!v33)
        {
          v34 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
          if (v34 != -1)
          {
            v134[0] = &v126;
            v136[0] = v134;
            std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v136, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
          }
          v33 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
        }
        WebCore::ResourceResponse::platformLazyInit((uint64_t)v33, 1);
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v33 + 5), v35);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v31 + 2, &v127, (const WTF::StringImpl *)v136, (uint64_t)v134);
        if (v135)
        {
          v36 = (uint64_t *)((char *)v31 + 24);
          v37 = *((unsigned int *)v31 + 9);
          if ((_DWORD)v37 == *((_DWORD *)v31 + 8))
          {
            v101 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v37 + 1, (unint64_t)&v127);
            v37 = *((unsigned int *)v31 + 9);
            v102 = *((_QWORD *)v31 + 3);
            v103 = *v101;
            if (*v101)
              *v103 += 2;
            *(_QWORD *)(v102 + 8 * v37) = v103;
          }
          else
          {
            v38 = *v36;
            v39 = v127;
            if (v127)
              *(_DWORD *)v127 += 2;
            *(_QWORD *)(v38 + 8 * v37) = v39;
          }
          *((_DWORD *)v31 + 9) = v37 + 1;
        }
        v40 = (_DWORD *)v136[0];
        v136[0] = 0;
        if (v40)
        {
          if (*v40 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v40;
        }
        v41 = v127;
        v127 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v22);
          else
            *(_DWORD *)v41 -= 2;
        }
      }
    }
    v42 = (uint64_t *)((char *)v8 + 64);
    if (!v132)
      goto LABEL_54;
    v43 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*v42 + 32), &v132, v23);
    if (v43)
      *((_QWORD *)v43 + 12) = v25;
    if (v132
      && (v45 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*v42 + 32), &v132, v44)) != 0)
    {
      v46 = *((_DWORD *)v45 + 26);
    }
    else
    {
LABEL_54:
      v46 = 12;
    }
    v47 = WebCore::InspectorPageAgent::inspectorResourceType(v25, v22);
    if (v46 != v47 && v47 != 5 && v47 != 12)
      v46 = v47;
    if (v24 != 304)
      goto LABEL_131;
    if ((v46 - 5) >= 2)
      goto LABEL_131;
    v48 = *((_QWORD *)v25 + 50);
    if (v48)
    {
      if (*(_DWORD *)(v48 + 400))
        goto LABEL_131;
    }
    goto LABEL_68;
  }
  if (v132
    && (v42 = (uint64_t *)((char *)v8 + 64),
        (v49 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*((_QWORD *)v8 + 8) + 32), &v132, v23)) != 0))
  {
    v46 = *((_DWORD *)v49 + 26);
    if (v24 == 304 && (v46 - 5) < 2)
    {
LABEL_68:
      v50 = *v42;
      WebCore::ResourceResponse::platformLazyInit(a4, 1);
      v51 = WebCore::NetworkResourcesData::dataForURL(v50, (const WTF::StringImpl **)a4);
      if (v51)
      {
        v52 = (unsigned int *)v51;
        if (*(_QWORD *)(v51 + 32))
        {
          WebCore::NetworkResourcesData::setResourceContent(*v42, &v132, (const WTF::String *)(v51 + 32), *(_BYTE *)(v51 + 121));
        }
        else if (*(_QWORD *)(v51 + 64))
        {
          v53 = *(_QWORD *)(v51 + 72);
          if (v53)
          {
            do
              v54 = __ldaxr((unsigned int *)v53);
            while (__stlxr(v54 + 1, (unsigned int *)v53));
          }
          v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v55 = off_1E33F0A70;
          v55[1] = v8;
          v55[2] = &v132;
          v134[0] = v55;
          WebCore::FragmentedSharedBuffer::forEachSegmentAsSharedBuffer(v53, v134);
          (*(void (**)(_QWORD *))(*v55 + 8))(v55);
          if (v53)
          {
            do
            {
              v57 = __ldaxr((unsigned int *)v53);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, (unsigned int *)v53));
            if (!v58)
            {
              atomic_store(1u, (unsigned int *)v53);
              v116 = *(unsigned int *)(v53 + 20);
              if ((_DWORD)v116)
              {
                v117 = *(_QWORD *)(v53 + 8);
                v125 = v117 + 16 * v116;
                do
                {
                  v118 = *(unsigned int **)(v117 + 8);
                  *(_QWORD *)(v117 + 8) = 0;
                  if (v118)
                  {
                    v119 = v118;
                    do
                    {
                      v120 = __ldaxr(v118);
                      v121 = v120 - 1;
                    }
                    while (__stlxr(v121, v118));
                    if (!v121)
                    {
                      atomic_store(1u, v118);
                      v122 = v118[6];
                      if ((_DWORD)v122 != -1)
                        ((void (*)(_QWORD *, unsigned int *))off_1E33F09A8[v122])(v134, v119 + 2);
                      v119[6] = -1;
                      WTF::fastFree((WTF *)v119, v56);
                    }
                  }
                  v117 += 16;
                }
                while (v117 != v125);
              }
              v123 = *(WTF **)(v53 + 8);
              if ((WTF *)(v53 + 24) != v123 && v123 != 0)
              {
                *(_QWORD *)(v53 + 8) = 0;
                *(_DWORD *)(v53 + 16) = 0;
                WTF::fastFree(v123, v56);
              }
              WTF::fastFree((WTF *)v53, v56);
            }
          }
        }
        v59 = v128;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v127 = (WTF::StringImpl *)v134[0];
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v52 + 12), v60);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v59 + 2, &v127, (const WTF::StringImpl *)v136, (uint64_t)v134);
        if (v135)
        {
          v62 = (uint64_t *)((char *)v59 + 24);
          v63 = *((unsigned int *)v59 + 9);
          if ((_DWORD)v63 == *((_DWORD *)v59 + 8))
          {
            v104 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v62, v63 + 1, (unint64_t)&v127);
            v63 = *((unsigned int *)v59 + 9);
            v105 = *((_QWORD *)v59 + 3);
            v106 = *v104;
            if (*v104)
              *v106 += 2;
            *(_QWORD *)(v105 + 8 * v63) = v106;
          }
          else
          {
            v64 = *v62;
            v65 = v127;
            if (v127)
              *(_DWORD *)v127 += 2;
            *(_QWORD *)(v64 + 8 * v63) = v65;
          }
          *((_DWORD *)v59 + 9) = v63 + 1;
        }
        v66 = (_DWORD *)v136[0];
        v136[0] = 0;
        if (v66)
        {
          if (*v66 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v66;
        }
        v67 = v127;
        v127 = 0;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
            WTF::StringImpl::destroy(v67, v61);
          else
            *(_DWORD *)v67 -= 2;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v127 = (WTF::StringImpl *)v134[0];
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v52[27]);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v59 + 2, &v127, (const WTF::StringImpl *)v136, (uint64_t)v134);
        if (v135)
        {
          v69 = (uint64_t *)((char *)v59 + 24);
          v70 = *((unsigned int *)v59 + 9);
          if ((_DWORD)v70 == *((_DWORD *)v59 + 8))
          {
            v107 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v127);
            v70 = *((unsigned int *)v59 + 9);
            v108 = *((_QWORD *)v59 + 3);
            v109 = *v107;
            if (*v107)
              *v109 += 2;
            *(_QWORD *)(v108 + 8 * v70) = v109;
          }
          else
          {
            v71 = *v69;
            v72 = v127;
            if (v127)
              *(_DWORD *)v127 += 2;
            *(_QWORD *)(v71 + 8 * v70) = v72;
          }
          *((_DWORD *)v59 + 9) = v70 + 1;
        }
        v73 = (_DWORD *)v136[0];
        v136[0] = 0;
        if (v73)
        {
          if (*v73 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v73;
        }
        v74 = v127;
        v127 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
            WTF::StringImpl::destroy(v74, v68);
          else
            *(_DWORD *)v74 -= 2;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v127 = (WTF::StringImpl *)v134[0];
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v52 + 28), v75);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v59 + 2, &v127, (const WTF::StringImpl *)v136, (uint64_t)v134);
        if (v135)
        {
          v77 = (uint64_t *)((char *)v59 + 24);
          v78 = *((unsigned int *)v59 + 9);
          if ((_DWORD)v78 == *((_DWORD *)v59 + 8))
          {
            v110 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, v78 + 1, (unint64_t)&v127);
            v78 = *((unsigned int *)v59 + 9);
            v111 = *((_QWORD *)v59 + 3);
            v112 = *v110;
            if (*v110)
              *v112 += 2;
            *(_QWORD *)(v111 + 8 * v78) = v112;
          }
          else
          {
            v79 = *v77;
            v80 = v127;
            if (v127)
              *(_DWORD *)v127 += 2;
            *(_QWORD *)(v79 + 8 * v78) = v80;
          }
          *((_DWORD *)v59 + 9) = v78 + 1;
        }
        v81 = (_DWORD *)v136[0];
        v136[0] = 0;
        if (v81)
        {
          if (*v81 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v81;
        }
        v82 = v127;
        v127 = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 2)
            WTF::StringImpl::destroy(v82, v76);
          else
            *(_DWORD *)v82 -= 2;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v127 = (WTF::StringImpl *)v134[0];
        Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)0xB4);
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v126, v83);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v59 + 2, &v127, (const WTF::StringImpl *)v136, (uint64_t)v134);
        if (v135)
        {
          v85 = (uint64_t *)((char *)v59 + 24);
          v86 = *((unsigned int *)v59 + 9);
          if ((_DWORD)v86 == *((_DWORD *)v59 + 8))
          {
            v113 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v127);
            v86 = *((unsigned int *)v59 + 9);
            v114 = *((_QWORD *)v59 + 3);
            v115 = *v113;
            if (*v113)
              *v115 += 2;
            *(_QWORD *)(v114 + 8 * v86) = v115;
          }
          else
          {
            v87 = *v85;
            v88 = v127;
            if (v127)
              *(_DWORD *)v127 += 2;
            *(_QWORD *)(v87 + 8 * v86) = v88;
          }
          *((_DWORD *)v59 + 9) = v86 + 1;
        }
        v89 = (_DWORD *)v136[0];
        v136[0] = 0;
        if (v89)
        {
          if (*v89 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v89;
        }
        v90 = v126;
        v126 = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 2)
            WTF::StringImpl::destroy(v90, v84);
          else
            *(_DWORD *)v90 -= 2;
        }
        v91 = v127;
        v127 = 0;
        if (v91)
        {
          if (*(_DWORD *)v91 == 2)
            WTF::StringImpl::destroy(v91, v84);
          else
            *(_DWORD *)v91 -= 2;
        }
      }
    }
  }
  else
  {
    v46 = 12;
  }
LABEL_131:
  (*(void (**)(_QWORD *__return_ptr, WTF::StringImpl *, uint64_t))(*(_QWORD *)v8 + 184))(v134, v8, a3);
  (*(void (**)(_QWORD *__return_ptr, WTF::StringImpl *, uint64_t))(*(_QWORD *)v8 + 176))(v136, v8, a3);
  v92 = *((_QWORD *)v8 + 8);
  v93 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 224))(v8);
  WebCore::NetworkResourcesData::responseReceived(v92, &v132, (const WTF::StringImpl *)v134, a4, v46, v93);
  v94 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v8 + 3) + 56))(*((_QWORD *)v8 + 3));
  WTF::MonotonicTime::now(v94);
  v127 = v128;
  Inspector::NetworkFrontendDispatcher::responseReceived();
  v96 = v127;
  v127 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v96;
  }
  if (v24 == 304)
  {
    if (v25)
    {
      v97 = *((_QWORD *)v25 + 50);
      if (v97)
      {
        if (*(_DWORD *)(v97 + 400))
          WebCore::InspectorNetworkAgent::didReceiveData(v8, v133, 0);
      }
    }
  }
  v98 = (WTF::StringImpl *)v136[0];
  v136[0] = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
      WTF::StringImpl::destroy(v98, v95);
    else
      *(_DWORD *)v98 -= 2;
  }
  v99 = (WTF::StringImpl *)v134[0];
  v134[0] = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
      WTF::StringImpl::destroy(v99, v95);
    else
      *(_DWORD *)v99 -= 2;
  }
  if (v131)
  {
    v100 = cf;
    cf = 0;
    if (v100)
      CFRelease(v100);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v129, v95);
  }
  result = v132;
  v132 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v95);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorPageAgent::inspectorResourceType(WebCore::InspectorPageAgent *this, const WebCore::CachedResource *a2)
{
  char v3;
  uint64_t *v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  BOOL v11;
  WTF::StringImpl *v12;
  uint64_t result;
  int v14;
  int v15;
  unsigned int v16;
  char v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;

  v3 = *((_BYTE *)this + 556);
  if ((v3 & 0x1F) == 0)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 50);
    if (!v4)
    {
      v5 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v5 != -1)
      {
        v19 = (WTF::StringImpl *)&v17;
        v18 = &v19;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v4 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v4, 1);
    v7 = (WTF::StringImpl *)v4[5];
    if (v7)
    {
      v8 = *(_DWORD *)v7;
      v9 = *((_DWORD *)v7 + 1);
      *(_DWORD *)v7 += 2;
      if (v9)
      {
        *(_DWORD *)v7 = v8 + 4;
        v19 = v7;
        if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&v19) & 1) != 0)
        {
          v11 = 1;
        }
        {
          if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
            v11 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&v19) != 0;
          else
            v11 = 0;
        }
        else
        {
          v11 = 0;
          WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
        }
        v12 = v19;
        v19 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v10);
          else
            *(_DWORD *)v12 -= 2;
        }
        if (*(_DWORD *)v7 == 2)
        {
          WTF::StringImpl::destroy(v7, v10);
          if (v11)
            return 2;
        }
        else
        {
          *(_DWORD *)v7 -= 2;
          if (v11)
            return 2;
        }
      }
      else if (v8)
      {
        *(_DWORD *)v7 = v8;
      }
      else
      {
        WTF::StringImpl::destroy(v7, v6);
      }
    }
    v3 = *((_BYTE *)this + 556);
  }
  result = 2;
  switch(v3 & 0x1F)
  {
    case 0:
      result = 0;
      break;
    case 1:
      return result;
    case 2:
    case 0xC:
      result = 1;
      break;
    case 3:
      result = 4;
      break;
    case 4:
    case 5:
      result = 3;
      break;
    case 8:
      v14 = *((unsigned __int8 *)this + 307);
      if (v14 == 1)
        v15 = 0;
      else
        v15 = 5;
      if (v14 == 3)
        v16 = 6;
      else
        v16 = v15;
      if (v14 == 9)
        result = 11;
      else
        result = v16;
      break;
    case 0xA:
      result = 8;
      break;
    case 0xB:
      result = 7;
      break;
    case 0xF:
      result = 10;
      break;
    default:
      result = 12;
      break;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::didReceiveData(WTF::StringImpl *result, Inspector::IdentifiersFactory *this, uint64_t a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  Inspector::IdentifiersFactory *v11;
  int v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  Inspector::NetworkFrontendDispatcher *v19;
  double *v20;
  double v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;

  v4 = result;
  v5 = *((_QWORD *)result + 12);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(Inspector::IdentifiersFactory **)(v5 + 8 * v10);
    if (v11 == this)
      return result;
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(Inspector::IdentifiersFactory **)(v5 + 8 * v10);
      ++v12;
      if (v11 == this)
        return result;
    }
  }
  Inspector::IdentifiersFactory::requestId(this);
  if (a3)
  {
    v13 = WebCore::NetworkResourcesData::maybeAddResourceData(*((WebCore::NetworkResourcesData **)v4 + 8), &v24, (const WebCore::SharedBuffer *)a3);
    if (*((_BYTE *)v4 + 178))
    {
      if (v13 && !*((_QWORD *)v13 + 8) && !*((_QWORD *)v13 + 12))
      {
        v14 = *((_QWORD *)v4 + 8);
        if (*(_DWORD *)(a3 + 20))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
          v16 = *(unsigned int *)(v15 + 24);
          if ((_DWORD)v16 == -1)
          {
            v23 = std::__throw_bad_variant_access[abi:sn180100]();
            return (WTF::StringImpl *)WebCore::InspectorNetworkAgent::didFinishLoading(v23);
          }
          v26 = (WTF::StringImpl *)&v25;
          ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v16])(&v26, v15 + 8);
        }
        WTF::base64EncodeToString();
        WebCore::NetworkResourcesData::setResourceContent(v14, &v24, (const WTF::String *)&v26, 1);
        v18 = v26;
        v26 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v17);
          else
            *(_DWORD *)v18 -= 2;
        }
      }
    }
  }
  v19 = (Inspector::NetworkFrontendDispatcher *)*((_QWORD *)v4 + 5);
  v20 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 3) + 56))(*((_QWORD *)v4 + 3));
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v20);
  Inspector::NetworkFrontendDispatcher::dataReceived(v19, (const WTF::String *)&v24, v20[1] + v21 - v20[2]);
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::InspectorNetworkAgent::didFinishLoading(uint64_t a1, Inspector::IdentifiersFactory *a2, uint64_t a3, uint64_t a4)
{
  WTF **v4;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Inspector::IdentifiersFactory *v16;
  int v17;
  double v18;
  WTF::MonotonicTime *v19;
  uint64_t v20;
  int v21;
  const WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  void *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  unsigned int v32;
  unsigned int v33;
  const WTF::StringImpl *v34;
  WTF *v35;
  WebCore::CachedResource *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::JSONImpl::Object *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  const WTF::String *v43;
  WTF::StringImpl *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  const WTF::String *v56;
  WTF::StringImpl *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  const WTF::String *v65;
  WTF::StringImpl *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  const WTF::String *v73;
  WTF::StringImpl *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  unint64_t v89;
  double v90;
  WTF::JSONImpl::Value *v91;
  WTF::StringImpl *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  double v100;
  WTF::JSONImpl::Value *v101;
  WTF::StringImpl *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  unint64_t v109;
  double v110;
  WTF::JSONImpl::Value *v111;
  WTF::StringImpl *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::JSONImpl::Value *v119;
  WTF::StringImpl *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  double v127;
  WTF::JSONImpl::Value *v128;
  WTF::StringImpl *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  unint64_t v135;
  double v136;
  WTF::JSONImpl::Value *v137;
  WTF::StringImpl *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF *v145;
  uint64_t v146;
  uint64_t v147;
  WTF::JSONImpl::Value *v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  _DWORD *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  const WTF::String *v162;
  WTF::StringImpl *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  const WTF::String *v170;
  WTF::StringImpl *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  _DWORD **v178;
  uint64_t v179;
  _DWORD *v180;
  _DWORD **v181;
  uint64_t v182;
  _DWORD *v183;
  _DWORD **v184;
  uint64_t v185;
  _DWORD *v186;
  _DWORD **v187;
  uint64_t v188;
  _DWORD *v189;
  _DWORD **v190;
  uint64_t v191;
  _DWORD *v192;
  _DWORD **v193;
  uint64_t v194;
  _DWORD *v195;
  _DWORD **v196;
  uint64_t v197;
  _DWORD *v198;
  _DWORD **v199;
  uint64_t v200;
  _DWORD *v201;
  _DWORD **v202;
  uint64_t v203;
  _DWORD *v204;
  _DWORD **v205;
  uint64_t v206;
  _DWORD *v207;
  _DWORD **v208;
  uint64_t v209;
  _DWORD *v210;
  _DWORD **v211;
  uint64_t v212;
  _DWORD *v213;
  _DWORD **v214;
  uint64_t v215;
  _DWORD *v216;
  _DWORD **v217;
  uint64_t v218;
  _DWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int *v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  WTF *v228;
  WTF *v230[11];
  WTF::StringImpl *v231;
  _DWORD *v232;
  char v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  Inspector::IdentifiersFactory *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240[2];
  char v241;

  v4 = (WTF **)a4;
  v236 = a2;
  v10 = *(_QWORD *)(a1 + 96);
  result = (uint64_t *)(a1 + 96);
  v9 = v10;
  if (!v10)
    goto LABEL_9;
  v11 = *(_DWORD *)(v9 - 8);
  v12 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = *(Inspector::IdentifiersFactory **)(v9 + 8 * v15);
  if (v16 != a2)
  {
    v17 = 1;
    while (v16)
    {
      v15 = ((_DWORD)v15 + v17) & v11;
      v16 = *(Inspector::IdentifiersFactory **)(v9 + 8 * v15);
      ++v17;
      if (v16 == a2)
        goto LABEL_8;
    }
    v15 = *(unsigned int *)(v9 - 4);
  }
LABEL_8:
  if (v15 != *(_DWORD *)(v9 - 4))
  {
    *(_QWORD *)(v9 + 8 * v15) = -1;
    ++*(_DWORD *)(*result - 16);
    v20 = *result;
    if (*result)
      v21 = *(_DWORD *)(v20 - 12) - 1;
    else
      v21 = -1;
    *(_DWORD *)(v20 - 12) = v21;
    v52 = *result;
    if (*result)
    {
      v53 = 6 * *(_DWORD *)(v52 - 12);
      v54 = *(_DWORD *)(v52 - 4);
      if (v53 < v54 && v54 >= 9)
        return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v54 >> 1);
    }
  }
  else
  {
LABEL_9:
    v18 = *(double *)(a4 + 72);
    v19 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
    if (v18 == 0.0)
      WTF::MonotonicTime::now(v19);
    Inspector::IdentifiersFactory::requestId(a2);
    if (a3)
    {
      if (v235)
      {
        v23 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*(_QWORD *)(a1 + 64) + 32), &v235, v22);
        if (v23)
        {
          if (!*((_DWORD *)v23 + 26))
          {
            v24 = *(_QWORD *)(a1 + 64);
            WebCore::DocumentLoader::mainResourceData(*(WebCore::DocumentLoader **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) + 280) + 88), v230);
            WebCore::Document::encoding(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) + 296), v25, v240);
            if (v235)
            {
              v27 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v24 + 32), &v235, v22);
              if (v27)
              {
                v28 = v27;
                WebCore::NetworkResourcesData::ResourceData::setBuffer((uint64_t)v27, (uint64_t *)v230);
                v29 = v240[0];
                if (v240[0])
                  *(_DWORD *)v240[0] += 2;
                v30 = (WTF::StringImpl *)*((_QWORD *)v28 + 5);
                *((_QWORD *)v28 + 5) = v29;
                if (v30)
                {
                  if (*(_DWORD *)v30 == 2)
                    WTF::StringImpl::destroy(v30, v26);
                  else
                    *(_DWORD *)v30 -= 2;
                }
              }
            }
            if (v240[0])
            {
              if (*(_DWORD *)v240[0] == 2)
                WTF::StringImpl::destroy(v240[0], v26);
              else
                *(_DWORD *)v240[0] -= 2;
            }
            v31 = v230[0];
            v230[0] = 0;
            if (v31)
            {
              do
              {
                v32 = __ldaxr((unsigned int *)v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, (unsigned int *)v31));
              if (!v33)
              {
                atomic_store(1u, (unsigned int *)v31);
                v220 = *((unsigned int *)v31 + 5);
                if ((_DWORD)v220)
                {
                  v221 = *((_QWORD *)v31 + 1);
                  v222 = v221 + 16 * v220;
                  do
                  {
                    v223 = *(unsigned int **)(v221 + 8);
                    v224 = v221;
                    *(_QWORD *)(v221 + 8) = 0;
                    if (v223)
                    {
                      do
                      {
                        v225 = __ldaxr(v223);
                        v226 = v225 - 1;
                      }
                      while (__stlxr(v226, v223));
                      if (!v226)
                      {
                        atomic_store(1u, v223);
                        v227 = v223[6];
                        if ((_DWORD)v227 != -1)
                          ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F09A8[v227])(v240, v223 + 2);
                        v223[6] = -1;
                        WTF::fastFree((WTF *)v223, v26);
                      }
                    }
                    v221 = v224 + 16;
                  }
                  while (v224 + 16 != v222);
                }
                v228 = (WTF *)*((_QWORD *)v31 + 1);
                if ((WTF *)((char *)v31 + 24) != v228 && v228 != 0)
                {
                  *((_QWORD *)v31 + 1) = 0;
                  *((_DWORD *)v31 + 4) = 0;
                  WTF::fastFree(v228, v26);
                }
                WTF::fastFree(v31, v26);
              }
            }
          }
        }
      }
    }
    WebCore::NetworkResourcesData::maybeDecodeDataToContent(*(_QWORD *)(a1 + 64), &v235, v22);
    v234 = 0;
    if (v235)
    {
      v35 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*(_QWORD *)(a1 + 64) + 32), &v235, v34);
      if (v35)
      {
        v36 = (WebCore::CachedResource *)*((_QWORD *)v35 + 12);
        if (v36)
          WebCore::InspectorPageAgent::sourceMapURLForResource((WebCore::InspectorPageAgent *)&v234, v36);
      }
    }
    LOBYTE(v230[0]) = 0;
    v233 = 0;
    v37 = WebCore::s_platformStrategies;
    v38 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v38)
    {
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v37 + 8) = v38;
    }
    v39 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 144))(v38);
    if ((_DWORD)v39 && (*((_BYTE *)v4 + 98) & 1) == 0)
    {
      v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v40 = off_1E33F0A98;
      *((_QWORD *)v40 + 1) = v230;
      *((_QWORD *)v40 + 2) = &v236;
      v240[0] = v40;
      WTF::callOnMainThreadAndWait();
      v39 = v240[0];
      v240[0] = 0;
      if (v39)
        v39 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(WTF::JSONImpl::Object *))(*(_QWORD *)v39 + 8))(v39);
      if (v233)
        v4 = v230;
    }
    v41 = (WTF::StringImpl *)WTF::JSONImpl::Object::create(v39);
    v42 = v240[0];
    if (v4[11])
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v4 + 11), v43);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v238, (const WTF::StringImpl *)&v239, (uint64_t)v240);
      if (v241)
      {
        v45 = (uint64_t *)((char *)v42 + 24);
        v46 = *((unsigned int *)v42 + 9);
        if ((_DWORD)v46 == *((_DWORD *)v42 + 8))
        {
          v181 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v238);
          v46 = *((unsigned int *)v42 + 9);
          v182 = *((_QWORD *)v42 + 3);
          v183 = *v181;
          if (*v181)
            *v183 += 2;
          *(_QWORD *)(v182 + 8 * v46) = v183;
        }
        else
        {
          v47 = *v45;
          v48 = v238;
          if (v238)
            *(_DWORD *)v238 += 2;
          *(_QWORD *)(v47 + 8 * v46) = v48;
        }
        *((_DWORD *)v42 + 9) = v46 + 1;
      }
      v49 = v239;
      v239 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v49;
      }
      v41 = v238;
      v238 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          v41 = (WTF::StringImpl *)WTF::StringImpl::destroy(v41, v44);
        else
          *(_DWORD *)v41 -= 2;
      }
    }
    v50 = v4[15];
    if (v50)
    {
      v51 = 183;
      switch(*((_BYTE *)v50 + 4))
      {
        case 0:
          goto LABEL_68;
        case 2:
          v51 = 185;
          goto LABEL_68;
        case 3:
          goto LABEL_83;
        default:
          v51 = 184;
LABEL_68:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v51);
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v237, v56);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v238, (const WTF::StringImpl *)&v239, (uint64_t)v240);
          if (v241)
          {
            v58 = (uint64_t *)((char *)v42 + 24);
            v59 = *((unsigned int *)v42 + 9);
            if ((_DWORD)v59 == *((_DWORD *)v42 + 8))
            {
              v193 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v58, v59 + 1, (unint64_t)&v238);
              v59 = *((unsigned int *)v42 + 9);
              v194 = *((_QWORD *)v42 + 3);
              v195 = *v193;
              if (*v193)
                *v195 += 2;
              *(_QWORD *)(v194 + 8 * v59) = v195;
            }
            else
            {
              v60 = *v58;
              v61 = v238;
              if (v238)
                *(_DWORD *)v238 += 2;
              *(_QWORD *)(v60 + 8 * v59) = v61;
            }
            *((_DWORD *)v42 + 9) = v59 + 1;
          }
          v62 = v239;
          v239 = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v62;
          }
          v63 = v237;
          v237 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
              WTF::StringImpl::destroy(v63, v57);
            else
              *(_DWORD *)v63 -= 2;
          }
          v64 = v238;
          v238 = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
              WTF::StringImpl::destroy(v64, v57);
            else
              *(_DWORD *)v64 -= 2;
          }
LABEL_83:
          if (*((_QWORD *)v50 + 1))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF *)((char *)v50 + 8), v65);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v238, (const WTF::StringImpl *)&v239, (uint64_t)v240);
            if (v241)
            {
              v67 = (uint64_t *)((char *)v42 + 24);
              v68 = *((unsigned int *)v42 + 9);
              if ((_DWORD)v68 == *((_DWORD *)v42 + 8))
              {
                v199 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)&v238);
                v68 = *((unsigned int *)v42 + 9);
                v200 = *((_QWORD *)v42 + 3);
                v201 = *v199;
                if (*v199)
                  *v201 += 2;
                *(_QWORD *)(v200 + 8 * v68) = v201;
              }
              else
              {
                v69 = *v67;
                v70 = v238;
                if (v238)
                  *(_DWORD *)v238 += 2;
                *(_QWORD *)(v69 + 8 * v68) = v70;
              }
              *((_DWORD *)v42 + 9) = v68 + 1;
            }
            v71 = v239;
            v239 = 0;
            if (v71)
            {
              if (*(_DWORD *)v71 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v71;
            }
            v72 = v238;
            v238 = 0;
            if (v72)
            {
              if (*(_DWORD *)v72 == 2)
                WTF::StringImpl::destroy(v72, v66);
              else
                *(_DWORD *)v72 -= 2;
            }
          }
          if (*((_QWORD *)v50 + 2))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF *)((char *)v50 + 16), v73);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v238, (const WTF::StringImpl *)&v239, (uint64_t)v240);
            if (v241)
            {
              v75 = (uint64_t *)((char *)v42 + 24);
              v76 = *((unsigned int *)v42 + 9);
              if ((_DWORD)v76 == *((_DWORD *)v42 + 8))
              {
                v202 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v75, v76 + 1, (unint64_t)&v238);
                v76 = *((unsigned int *)v42 + 9);
                v203 = *((_QWORD *)v42 + 3);
                v204 = *v202;
                if (*v202)
                  *v204 += 2;
                *(_QWORD *)(v203 + 8 * v76) = v204;
              }
              else
              {
                v77 = *v75;
                v78 = v238;
                if (v238)
                  *(_DWORD *)v238 += 2;
                *(_QWORD *)(v77 + 8 * v76) = v78;
              }
              *((_DWORD *)v42 + 9) = v76 + 1;
            }
            v79 = v239;
            v239 = 0;
            if (v79)
            {
              if (*(_DWORD *)v79 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v79;
            }
            v80 = v238;
            v238 = 0;
            if (v80)
            {
              if (*(_DWORD *)v80 == 2)
                WTF::StringImpl::destroy(v80, v74);
              else
                *(_DWORD *)v80 -= 2;
            }
          }
          if (*((_DWORD *)v50 + 13) || *((_DWORD *)v50 + 17))
          {
            WebCore::buildObjectForHeaders((WebCore *)&v237, (WTF *)((char *)v50 + 40));
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v81 = v237;
            v237 = 0;
            v238 = v81;
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v239, (const WTF::StringImpl *)&v238, (uint64_t)v240);
            if (v241)
            {
              v83 = (uint64_t *)((char *)v42 + 24);
              v84 = *((unsigned int *)v42 + 9);
              if ((_DWORD)v84 == *((_DWORD *)v42 + 8))
              {
                v196 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v84 + 1, (unint64_t)&v239);
                v84 = *((unsigned int *)v42 + 9);
                v197 = *((_QWORD *)v42 + 3);
                v198 = *v196;
                if (*v196)
                  *v198 += 2;
                *(_QWORD *)(v197 + 8 * v84) = v198;
              }
              else
              {
                v85 = *v83;
                v86 = v239;
                if (v239)
                  *(_DWORD *)v239 += 2;
                *(_QWORD *)(v85 + 8 * v84) = v86;
              }
              *((_DWORD *)v42 + 9) = v84 + 1;
            }
            v87 = v238;
            v238 = 0;
            if (v87)
            {
              if (*(_DWORD *)v87 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v87;
            }
            v88 = v239;
            v239 = 0;
            if (v88)
            {
              if (*(_DWORD *)v88 == 2)
                WTF::StringImpl::destroy(v88, v82);
              else
                *(_DWORD *)v88 -= 2;
            }
          }
          v89 = *((_QWORD *)v50 + 9);
          if (v89 != -1)
          {
            v90 = (double)v89;
            v91 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create(v91, v90);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v238, (const WTF::StringImpl *)&v239, (uint64_t)v240);
            if (v241)
            {
              v93 = (uint64_t *)((char *)v42 + 24);
              v94 = *((unsigned int *)v42 + 9);
              if ((_DWORD)v94 == *((_DWORD *)v42 + 8))
              {
                v205 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v238);
                v94 = *((unsigned int *)v42 + 9);
                v206 = *((_QWORD *)v42 + 3);
                v207 = *v205;
                if (*v205)
                  *v207 += 2;
                *(_QWORD *)(v206 + 8 * v94) = v207;
              }
              else
              {
                v95 = *v93;
                v96 = v238;
                if (v238)
                  *(_DWORD *)v238 += 2;
                *(_QWORD *)(v95 + 8 * v94) = v96;
              }
              *((_DWORD *)v42 + 9) = v94 + 1;
            }
            v97 = v239;
            v239 = 0;
            if (v97)
            {
              if (*(_DWORD *)v97 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v97;
            }
            v98 = v238;
            v238 = 0;
            if (v98)
            {
              if (*(_DWORD *)v98 == 2)
                WTF::StringImpl::destroy(v98, v92);
              else
                *(_DWORD *)v98 -= 2;
            }
          }
          v99 = *((_QWORD *)v50 + 11);
          if (v99 != -1)
          {
            v100 = (double)v99;
            v101 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create(v101, v100);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v238, (const WTF::StringImpl *)&v239, (uint64_t)v240);
            if (v241)
            {
              v103 = (uint64_t *)((char *)v42 + 24);
              v104 = *((unsigned int *)v42 + 9);
              if ((_DWORD)v104 == *((_DWORD *)v42 + 8))
              {
                v208 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v103, v104 + 1, (unint64_t)&v238);
                v104 = *((unsigned int *)v42 + 9);
                v209 = *((_QWORD *)v42 + 3);
                v210 = *v208;
                if (*v208)
                  *v210 += 2;
                *(_QWORD *)(v209 + 8 * v104) = v210;
              }
              else
              {
                v105 = *v103;
                v106 = v238;
                if (v238)
                  *(_DWORD *)v238 += 2;
                *(_QWORD *)(v105 + 8 * v104) = v106;
              }
              *((_DWORD *)v42 + 9) = v104 + 1;
            }
            v107 = v239;
            v239 = 0;
            if (v107)
            {
              if (*(_DWORD *)v107 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v107;
            }
            v108 = v238;
            v238 = 0;
            if (v108)
            {
              if (*(_DWORD *)v108 == 2)
                WTF::StringImpl::destroy(v108, v102);
              else
                *(_DWORD *)v108 -= 2;
            }
          }
          v109 = *((_QWORD *)v50 + 10);
          if (v109 != -1)
          {
            v110 = (double)v109;
            v111 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create(v111, v110);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v238, (const WTF::StringImpl *)&v239, (uint64_t)v240);
            if (v241)
            {
              v113 = (uint64_t *)((char *)v42 + 24);
              v114 = *((unsigned int *)v42 + 9);
              if ((_DWORD)v114 == *((_DWORD *)v42 + 8))
              {
                v211 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v113, v114 + 1, (unint64_t)&v238);
                v114 = *((unsigned int *)v42 + 9);
                v212 = *((_QWORD *)v42 + 3);
                v213 = *v211;
                if (*v211)
                  *v213 += 2;
                *(_QWORD *)(v212 + 8 * v114) = v213;
              }
              else
              {
                v115 = *v113;
                v116 = v238;
                if (v238)
                  *(_DWORD *)v238 += 2;
                *(_QWORD *)(v115 + 8 * v114) = v116;
              }
              *((_DWORD *)v42 + 9) = v114 + 1;
            }
            v117 = v239;
            v239 = 0;
            if (v117)
            {
              if (*(_DWORD *)v117 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v117;
            }
            v118 = v238;
            v238 = 0;
            if (v118)
            {
              if (*(_DWORD *)v118 == 2)
                WTF::StringImpl::destroy(v118, v112);
              else
                *(_DWORD *)v118 -= 2;
            }
          }
          v119 = (WTF::JSONImpl::Value *)*((unsigned __int8 *)v50 + 96);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create(v119);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v238, (const WTF::StringImpl *)&v239, (uint64_t)v240);
          if (v241)
          {
            v121 = (uint64_t *)((char *)v42 + 24);
            v122 = *((unsigned int *)v42 + 9);
            if ((_DWORD)v122 == *((_DWORD *)v42 + 8))
            {
              v184 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v121, v122 + 1, (unint64_t)&v238);
              v122 = *((unsigned int *)v42 + 9);
              v185 = *((_QWORD *)v42 + 3);
              v186 = *v184;
              if (*v184)
                *v186 += 2;
              *(_QWORD *)(v185 + 8 * v122) = v186;
            }
            else
            {
              v123 = *v121;
              v124 = v238;
              if (v238)
                *(_DWORD *)v238 += 2;
              *(_QWORD *)(v123 + 8 * v122) = v124;
            }
            *((_DWORD *)v42 + 9) = v122 + 1;
          }
          v125 = v239;
          v239 = 0;
          if (v125)
          {
            if (*(_DWORD *)v125 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v125;
          }
          v41 = v238;
          v238 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              v41 = (WTF::StringImpl *)WTF::StringImpl::destroy(v41, v120);
            else
              *(_DWORD *)v41 -= 2;
          }
          break;
      }
    }
    v126 = (unint64_t)v4[13];
    if (v126 != -1)
    {
      v127 = (double)v126;
      v128 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v128, v127);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v238, (const WTF::StringImpl *)&v239, (uint64_t)v240);
      if (v241)
      {
        v130 = (uint64_t *)((char *)v42 + 24);
        v131 = *((unsigned int *)v42 + 9);
        if ((_DWORD)v131 == *((_DWORD *)v42 + 8))
        {
          v187 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v130, v131 + 1, (unint64_t)&v238);
          v131 = *((unsigned int *)v42 + 9);
          v188 = *((_QWORD *)v42 + 3);
          v189 = *v187;
          if (*v187)
            *v189 += 2;
          *(_QWORD *)(v188 + 8 * v131) = v189;
        }
        else
        {
          v132 = *v130;
          v133 = v238;
          if (v238)
            *(_DWORD *)v238 += 2;
          *(_QWORD *)(v132 + 8 * v131) = v133;
        }
        *((_DWORD *)v42 + 9) = v131 + 1;
      }
      v134 = v239;
      v239 = 0;
      if (v134)
      {
        if (*(_DWORD *)v134 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v134;
      }
      v41 = v238;
      v238 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          v41 = (WTF::StringImpl *)WTF::StringImpl::destroy(v41, v129);
        else
          *(_DWORD *)v41 -= 2;
      }
    }
    v135 = (unint64_t)v4[14];
    if (v135 != -1)
    {
      v136 = (double)v135;
      v137 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v137, v136);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v238, (const WTF::StringImpl *)&v239, (uint64_t)v240);
      if (v241)
      {
        v139 = (uint64_t *)((char *)v42 + 24);
        v140 = *((unsigned int *)v42 + 9);
        if ((_DWORD)v140 == *((_DWORD *)v42 + 8))
        {
          v190 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v139, v140 + 1, (unint64_t)&v238);
          v140 = *((unsigned int *)v42 + 9);
          v191 = *((_QWORD *)v42 + 3);
          v192 = *v190;
          if (*v190)
            *v192 += 2;
          *(_QWORD *)(v191 + 8 * v140) = v192;
        }
        else
        {
          v141 = *v139;
          v142 = v238;
          if (v238)
            *(_DWORD *)v238 += 2;
          *(_QWORD *)(v141 + 8 * v140) = v142;
        }
        *((_DWORD *)v42 + 9) = v140 + 1;
      }
      v143 = v239;
      v239 = 0;
      if (v143)
      {
        if (*(_DWORD *)v143 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v143;
      }
      v41 = v238;
      v238 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          v41 = (WTF::StringImpl *)WTF::StringImpl::destroy(v41, v138);
        else
          *(_DWORD *)v41 -= 2;
      }
    }
    WTF::JSONImpl::Object::create(v41);
    v144 = v240[0];
    v145 = v4[15];
    if (v145)
    {
      v146 = *((_QWORD *)v145 + 3);
      if (v146 && *(_DWORD *)(v146 + 4))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF *)((char *)v145 + 24), v162);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v144 + 2, &v238, (const WTF::StringImpl *)&v239, (uint64_t)v240);
        if (v241)
        {
          v164 = (uint64_t *)((char *)v144 + 24);
          v165 = *((unsigned int *)v144 + 9);
          if ((_DWORD)v165 == *((_DWORD *)v144 + 8))
          {
            v214 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v164, v165 + 1, (unint64_t)&v238);
            v165 = *((unsigned int *)v144 + 9);
            v215 = *((_QWORD *)v144 + 3);
            v216 = *v214;
            if (*v214)
              *v216 += 2;
            *(_QWORD *)(v215 + 8 * v165) = v216;
          }
          else
          {
            v166 = *v164;
            v167 = v238;
            if (v238)
              *(_DWORD *)v238 += 2;
            *(_QWORD *)(v166 + 8 * v165) = v167;
          }
          *((_DWORD *)v144 + 9) = v165 + 1;
        }
        v168 = v239;
        v239 = 0;
        if (v168)
        {
          if (*(_DWORD *)v168 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v168;
        }
        v169 = v238;
        v238 = 0;
        if (v169)
        {
          if (*(_DWORD *)v169 == 2)
            WTF::StringImpl::destroy(v169, v163);
          else
            *(_DWORD *)v169 -= 2;
        }
      }
      v149 = *((_QWORD *)v145 + 4);
      v148 = (WTF *)((char *)v145 + 32);
      v147 = v149;
      if (v149 && *(_DWORD *)(v147 + 4))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create(v148, v170);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v144 + 2, &v238, (const WTF::StringImpl *)&v239, (uint64_t)v240);
        if (v241)
        {
          v172 = (uint64_t *)((char *)v144 + 24);
          v173 = *((unsigned int *)v144 + 9);
          if ((_DWORD)v173 == *((_DWORD *)v144 + 8))
          {
            v217 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v172, v173 + 1, (unint64_t)&v238);
            v173 = *((unsigned int *)v144 + 9);
            v218 = *((_QWORD *)v144 + 3);
            v219 = *v217;
            if (*v217)
              *v219 += 2;
            *(_QWORD *)(v218 + 8 * v173) = v219;
          }
          else
          {
            v174 = *v172;
            v175 = v238;
            if (v238)
              *(_DWORD *)v238 += 2;
            *(_QWORD *)(v174 + 8 * v173) = v175;
          }
          *((_DWORD *)v144 + 9) = v173 + 1;
        }
        v176 = v239;
        v239 = 0;
        if (v176)
        {
          if (*(_DWORD *)v176 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v176;
        }
        v177 = v238;
        v238 = 0;
        if (v177)
        {
          if (*(_DWORD *)v177 == 2)
            WTF::StringImpl::destroy(v177, v171);
          else
            *(_DWORD *)v177 -= 2;
        }
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v238 = v144;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v42 + 2, &v239, (const WTF::StringImpl *)&v238, (uint64_t)v240);
    if (v241)
    {
      v151 = (uint64_t *)((char *)v42 + 24);
      v152 = *((unsigned int *)v42 + 9);
      if ((_DWORD)v152 == *((_DWORD *)v42 + 8))
      {
        v178 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v151, v152 + 1, (unint64_t)&v239);
        v152 = *((unsigned int *)v42 + 9);
        v179 = *((_QWORD *)v42 + 3);
        v180 = *v178;
        if (*v178)
          *v180 += 2;
        *(_QWORD *)(v179 + 8 * v152) = v180;
      }
      else
      {
        v153 = *v151;
        v154 = v239;
        if (v239)
          *(_DWORD *)v239 += 2;
        *(_QWORD *)(v153 + 8 * v152) = v154;
      }
      *((_DWORD *)v42 + 9) = v152 + 1;
    }
    v155 = v238;
    v238 = 0;
    if (v155)
    {
      if (*(_DWORD *)v155 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v155;
    }
    v156 = v239;
    v239 = 0;
    if (v156)
    {
      if (*(_DWORD *)v156 == 2)
        WTF::StringImpl::destroy(v156, v150);
      else
        *(_DWORD *)v156 -= 2;
    }
    v240[0] = v42;
    Inspector::NetworkFrontendDispatcher::loadingFinished();
    v158 = v240[0];
    v240[0] = 0;
    if (v158)
    {
      if (*(_DWORD *)v158 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v158;
    }
    if (v233)
    {
      v159 = v232;
      v232 = 0;
      if (v159)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v159, v157);
      v160 = v231;
      v231 = 0;
      if (v160)
      {
        if (*(_DWORD *)v160 == 2)
          WTF::StringImpl::destroy(v160, v157);
        else
          *(_DWORD *)v160 -= 2;
      }
    }
    v161 = v234;
    v234 = 0;
    if (v161)
    {
      if (*(_DWORD *)v161 == 2)
        WTF::StringImpl::destroy(v161, v157);
      else
        *(_DWORD *)v161 -= 2;
    }
    result = (uint64_t *)v235;
    v235 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v157);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::InspectorNetworkAgent::didFailLoading(uint64_t a1, Inspector::IdentifiersFactory *this, uint64_t a3, WebCore::ResourceError *a4)
{
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Inspector::IdentifiersFactory *v15;
  int v16;
  const WTF::StringImpl *v17;
  WTF *v18;
  WTF::MonotonicTime *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  WebCore::DocumentLoader *v29;
  uint64_t v30;
  void *v31;
  WTF::StringImpl *v32;
  const WTF::StringImpl *v33;
  WTF *v34;
  WTF *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  WTF *v49;
  WTF::StringImpl *v51;
  WTF *v52;
  WTF::StringImpl *v53;

  v9 = *(_QWORD *)(a1 + 96);
  result = (uint64_t *)(a1 + 96);
  v8 = v9;
  if (!v9)
    goto LABEL_9;
  v10 = *(_DWORD *)(v8 - 8);
  v11 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = *(Inspector::IdentifiersFactory **)(v8 + 8 * v14);
  if (v15 != this)
  {
    v16 = 1;
    while (v15)
    {
      v14 = ((_DWORD)v14 + v16) & v10;
      v15 = *(Inspector::IdentifiersFactory **)(v8 + 8 * v14);
      ++v16;
      if (v15 == this)
        goto LABEL_8;
    }
    v14 = *(unsigned int *)(v8 - 4);
  }
LABEL_8:
  if (v14 != *(_DWORD *)(v8 - 4))
  {
    *(_QWORD *)(v8 + 8 * v14) = -1;
    ++*(_DWORD *)(*result - 16);
    v21 = *result;
    if (*result)
      v22 = *(_DWORD *)(v21 - 12) - 1;
    else
      v22 = -1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *result;
    if (*result)
    {
      v24 = 6 * *(_DWORD *)(v23 - 12);
      v25 = *(_DWORD *)(v23 - 4);
      if (v24 < v25 && v25 >= 9)
        return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v25 >> 1);
    }
  }
  else
  {
LABEL_9:
    Inspector::IdentifiersFactory::requestId(this);
    if (a3)
    {
      if (v53)
      {
        v18 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*(_QWORD *)(a1 + 64) + 32), &v53, v17);
        if (v18)
        {
          if (!*((_DWORD *)v18 + 26))
          {
            v27 = *(_QWORD *)(a3 + 16);
            if (v27)
            {
              v28 = *(_QWORD *)(v27 + 8);
              if (v28)
              {
                v29 = *(WebCore::DocumentLoader **)(*(_QWORD *)(v28 + 280) + 88);
                if (v29)
                {
                  if (*(_QWORD *)(v28 + 296))
                  {
                    v30 = *(_QWORD *)(a1 + 64);
                    WebCore::DocumentLoader::mainResourceData(v29, &v52);
                    WebCore::Document::encoding(*(_QWORD *)(v28 + 296), v31, &v51);
                    if (v53)
                    {
                      v34 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v30 + 32), &v53, v33);
                      if (v34)
                      {
                        v35 = v34;
                        WebCore::NetworkResourcesData::ResourceData::setBuffer((uint64_t)v34, (uint64_t *)&v52);
                        v36 = v51;
                        if (v51)
                          *(_DWORD *)v51 += 2;
                        v37 = (WTF::StringImpl *)*((_QWORD *)v35 + 5);
                        *((_QWORD *)v35 + 5) = v36;
                        if (v37)
                        {
                          if (*(_DWORD *)v37 == 2)
                            WTF::StringImpl::destroy(v37, v32);
                          else
                            *(_DWORD *)v37 -= 2;
                        }
                      }
                    }
                    if (v51)
                    {
                      if (*(_DWORD *)v51 == 2)
                        WTF::StringImpl::destroy(v51, v32);
                      else
                        *(_DWORD *)v51 -= 2;
                    }
                    v38 = v52;
                    v52 = 0;
                    if (v38)
                    {
                      do
                      {
                        v39 = __ldaxr((unsigned int *)v38);
                        v40 = v39 - 1;
                      }
                      while (__stlxr(v40, (unsigned int *)v38));
                      if (!v40)
                      {
                        atomic_store(1u, (unsigned int *)v38);
                        v41 = *((unsigned int *)v38 + 5);
                        if ((_DWORD)v41)
                        {
                          v42 = *((_QWORD *)v38 + 1);
                          v43 = v42 + 16 * v41;
                          do
                          {
                            v44 = *(unsigned int **)(v42 + 8);
                            *(_QWORD *)(v42 + 8) = 0;
                            if (v44)
                            {
                              v45 = v44;
                              do
                              {
                                v46 = __ldaxr(v44);
                                v47 = v46 - 1;
                              }
                              while (__stlxr(v47, v44));
                              if (!v47)
                              {
                                atomic_store(1u, v44);
                                v48 = v44[6];
                                if ((_DWORD)v48 != -1)
                                  ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F09A8[v48])(&v51, v45 + 2);
                                v45[6] = -1;
                                WTF::fastFree((WTF *)v45, v32);
                              }
                            }
                            v42 += 16;
                          }
                          while (v42 != v43);
                        }
                        v49 = (WTF *)*((_QWORD *)v38 + 1);
                        if ((WTF *)((char *)v38 + 24) != v49 && v49 != 0)
                        {
                          *((_QWORD *)v38 + 1) = 0;
                          *((_DWORD *)v38 + 4) = 0;
                          WTF::fastFree(v49, v32);
                        }
                        WTF::fastFree(v38, v32);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v19 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
    WTF::MonotonicTime::now(v19);
    WebCore::ResourceError::platformLazyInit(a4);
    LOBYTE(v52) = *((_BYTE *)a4 + 60) == 3;
    BYTE1(v52) = 1;
    Inspector::NetworkFrontendDispatcher::loadingFailed();
    result = (uint64_t *)v53;
    v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::didLoadResourceFromMemoryCache(WTF::StringImpl *this, WebCore::DocumentLoader *a2, WebCore::CachedResource *a3)
{
  WebCore::NetworkResourcesData **v5;
  Inspector::IdentifiersFactory *IdentifierInternal;
  uint64_t v7;
  uint64_t v8;
  WebCore::Document *v9;
  WTF::MonotonicTime *v10;
  WTF::JSONImpl::Object *v11;
  uint64_t *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  Inspector::Protocol::Helpers *v21;
  uint64_t *v22;
  const WTF::String *v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  double v33;
  uint64_t *v34;
  WTF::JSONImpl::Value *v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t *v43;
  WebCore::ResourceLoader *v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  const WTF::String *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  _DWORD **v67;
  uint64_t v68;
  _DWORD *v69;
  _DWORD **v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD **v73;
  uint64_t v74;
  _DWORD *v75;
  _DWORD **v76;
  uint64_t v77;
  _DWORD *v78;
  _DWORD **v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  _QWORD v91[2];
  char v92;

  if (!a2)
    return this;
  if (WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x195E47970);
  }
  v5 = (WebCore::NetworkResourcesData **)this;
  IdentifierInternal = (Inspector::IdentifiersFactory *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  Inspector::IdentifiersFactory::requestId(IdentifierInternal);
  (*((void (**)(WTF::StringImpl **__return_ptr, WebCore::NetworkResourcesData **, WebCore::DocumentLoader *))*v5
   + 22))(&v85, v5, a2);
  (*((void (**)(WTF::StringImpl **__return_ptr, WebCore::NetworkResourcesData **, WebCore::DocumentLoader *))*v5
   + 23))(&v84, v5, a2);
  WebCore::NetworkResourcesData::resourceCreated(v5[8], &v86, (const WTF::String *)&v85, a3);
  v7 = *((_QWORD *)a2 + 2);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
    v9 = *(WebCore::Document **)(v8 + 296);
  else
    v9 = 0;
  WebCore::InspectorNetworkAgent::buildInitiatorObject(v5, v9, (WebCore::CachedResource *)((char *)a3 + 160), &v83);
  if ((*((_BYTE *)a2 + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)a2 + 872));
    *((_BYTE *)a2 + 1056) |= 1u;
  }
  v10 = (WTF::MonotonicTime *)(*(uint64_t (**)(WebCore::NetworkResourcesData *))(*(_QWORD *)v5[3] + 56))(v5[3]);
  v11 = (WTF::JSONImpl::Object *)WTF::MonotonicTime::now(v10);
  WTF::JSONImpl::Object::create(v11);
  if ((*((_BYTE *)a3 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a3 + 160));
    *((_BYTE *)a3 + 344) |= 1u;
  }
  v12 = v87;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WebCore::CachedResource *)((char *)a3 + 160), v13);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v12 + 2, &v89, (const WTF::StringImpl *)&v90, (uint64_t)v91);
  if (v92)
  {
    v15 = v12 + 3;
    v16 = *((unsigned int *)v12 + 9);
    if ((_DWORD)v16 == *((_DWORD *)v12 + 8))
    {
      v67 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v89);
      v16 = *((unsigned int *)v12 + 9);
      v68 = v12[3];
      v69 = *v67;
      if (*v67)
        *v69 += 2;
      *(_QWORD *)(v68 + 8 * v16) = v69;
    }
    else
    {
      v17 = *v15;
      v18 = v89;
      if (v89)
        *(_DWORD *)v89 += 2;
      *(_QWORD *)(v17 + 8 * v16) = v18;
    }
    *((_DWORD *)v12 + 9) = v16 + 1;
  }
  v19 = v90;
  v90 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v19;
  }
  v20 = v89;
  v89 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (Inspector::Protocol::Helpers *)dword_1969F2388[WebCore::InspectorPageAgent::inspectorResourceType(a3, v14)];
  v22 = v87;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue(v21);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v88, v23);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v22 + 2, &v89, (const WTF::StringImpl *)&v90, (uint64_t)v91);
  if (v92)
  {
    v25 = v22 + 3;
    v26 = *((unsigned int *)v22 + 9);
    if ((_DWORD)v26 == *((_DWORD *)v22 + 8))
    {
      v70 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v89);
      v26 = *((unsigned int *)v22 + 9);
      v71 = v22[3];
      v72 = *v70;
      if (*v70)
        *v72 += 2;
      *(_QWORD *)(v71 + 8 * v26) = v72;
    }
    else
    {
      v27 = *v25;
      v28 = v89;
      if (v89)
        *(_DWORD *)v89 += 2;
      *(_QWORD *)(v27 + 8 * v26) = v28;
    }
    *((_DWORD *)v22 + 9) = v26 + 1;
  }
  v29 = v90;
  v90 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v29;
  }
  v30 = v88;
  v88 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v89;
  v89 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v24);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = *((_QWORD *)a3 + 50);
  if (v32)
    LODWORD(v32) = *(_DWORD *)(v32 + 400);
  v33 = (double)v32;
  v34 = v87;
  v35 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v35, v33);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v34 + 2, &v89, (const WTF::StringImpl *)&v90, (uint64_t)v91);
  if (v92)
  {
    v37 = v34 + 3;
    v38 = *((unsigned int *)v34 + 9);
    if ((_DWORD)v38 == *((_DWORD *)v34 + 8))
    {
      v73 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v89);
      v38 = *((unsigned int *)v34 + 9);
      v74 = v34[3];
      v75 = *v73;
      if (*v73)
        *v75 += 2;
      *(_QWORD *)(v74 + 8 * v38) = v75;
    }
    else
    {
      v39 = *v37;
      v40 = v89;
      if (v89)
        *(_DWORD *)v89 += 2;
      *(_QWORD *)(v39 + 8 * v38) = v40;
    }
    *((_DWORD *)v34 + 9) = v38 + 1;
  }
  v41 = v90;
  v90 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v41;
  }
  v42 = v89;
  v89 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v36);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = v87;
  v82 = v87;
  v44 = (WebCore::ResourceLoader *)*((_QWORD *)a3 + 50);
  if (!v44)
  {
    v45 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v45 != -1)
    {
      v91[0] = &v89;
      v90 = (WTF::StringImpl *)v91;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v90, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v44 = (WebCore::ResourceLoader *)&WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::InspectorNetworkAgent::buildObjectForResourceResponse((WTF::JSONImpl::Object *)&v88, (const WebCore::ResourceResponse *)v5, v44, *((_QWORD *)a3 + 48));
  v46 = v88;
  if (v88)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v89 = v46;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v43 + 2, &v90, (const WTF::StringImpl *)&v89, (uint64_t)v91);
    if (v92)
    {
      v48 = v43 + 3;
      v49 = *((unsigned int *)v43 + 9);
      if ((_DWORD)v49 == *((_DWORD *)v43 + 8))
      {
        v76 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v90);
        v49 = *((unsigned int *)v43 + 9);
        v77 = v43[3];
        v78 = *v76;
        if (*v76)
          *v78 += 2;
        *(_QWORD *)(v77 + 8 * v49) = v78;
      }
      else
      {
        v50 = *v48;
        v51 = v90;
        if (v90)
          *(_DWORD *)v90 += 2;
        *(_QWORD *)(v50 + 8 * v49) = v51;
      }
      *((_DWORD *)v43 + 9) = v49 + 1;
    }
    v52 = v89;
    v89 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v52;
    }
    v53 = v90;
    v90 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v47);
      else
        *(_DWORD *)v53 -= 2;
    }
  }
  WebCore::InspectorPageAgent::sourceMapURLForResource((WebCore::InspectorPageAgent *)&v88, a3);
  v55 = v88;
  if (v88)
  {
    if (*((_DWORD *)v88 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v88, v56);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v43 + 2, &v89, (const WTF::StringImpl *)&v90, (uint64_t)v91);
      if (v92)
      {
        v57 = v43 + 3;
        v58 = *((unsigned int *)v43 + 9);
        if ((_DWORD)v58 == *((_DWORD *)v43 + 8))
        {
          v79 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v58 + 1, (unint64_t)&v89);
          v58 = *((unsigned int *)v43 + 9);
          v80 = v43[3];
          v81 = *v79;
          if (*v79)
            *v81 += 2;
          *(_QWORD *)(v80 + 8 * v58) = v81;
        }
        else
        {
          v59 = *v57;
          v60 = v89;
          if (v89)
            *(_DWORD *)v89 += 2;
          *(_QWORD *)(v59 + 8 * v58) = v60;
        }
        *((_DWORD *)v43 + 9) = v58 + 1;
      }
      v61 = v90;
      v90 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v61;
      }
      v62 = v89;
      v89 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WTF::StringImpl::destroy(v62, v54);
        else
          *(_DWORD *)v62 -= 2;
      }
      v55 = v88;
      v88 = 0;
      if (!v55)
        goto LABEL_88;
    }
    else
    {
      v88 = 0;
    }
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v54);
    else
      *(_DWORD *)v55 -= 2;
  }
LABEL_88:
  Inspector::NetworkFrontendDispatcher::requestServedFromMemoryCache();
  if (v82)
  {
    if (*(_DWORD *)v82 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v82;
  }
  v64 = v83;
  v83 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v64;
  }
  v65 = v84;
  v84 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v63);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = v85;
  v85 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v63);
    else
      *(_DWORD *)v66 -= 2;
  }
  this = v86;
  v86 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v63);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::didReceiveThreadableLoaderResponse(WebCore *a1, Inspector::IdentifiersFactory *a2, const WTF::StringImpl *a3)
{
  WTF *v5;
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  v5 = (WTF *)*((_QWORD *)a3 + 26);
  if (v5)
    *(_DWORD *)v5 += 2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 32);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v8);
    v9 = *(_QWORD *)(v8 + 32);
  }
  v10 = (WebCore *)WTF::equal(v5, *(const WTF::StringImpl **)(v9 + 16), a3);
  if ((_DWORD)v10)
  {
    v12 = *((_QWORD *)a1 + 8);
    result = (WTF::StringImpl *)Inspector::IdentifiersFactory::requestId(a2);
    if (!v23)
      goto LABEL_25;
    v16 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v12 + 32), &v23, v15);
    if (v16)
    {
      v17 = 6;
LABEL_21:
      *((_DWORD *)v16 + 26) = v17;
    }
  }
  else
  {
    v18 = *(_QWORD *)(StatusReg + 736);
    if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
      v19 = WebCore::threadGlobalDataSlow(v10);
    v20 = *(_QWORD *)(v19 + 32);
    if (!v20)
    {
      WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v19);
      v20 = *(_QWORD *)(v19 + 32);
    }
    result = (WTF::StringImpl *)WTF::equal(v5, *(const WTF::StringImpl **)(v20 + 40), v11);
    if (!(_DWORD)result
      || (v21 = *((_QWORD *)a1 + 8), result = (WTF::StringImpl *)Inspector::IdentifiersFactory::requestId(a2), !v23))
    {
LABEL_25:
      if (!v5)
        return result;
      goto LABEL_26;
    }
    v16 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v21 + 32), &v23, v22);
    if (v16)
    {
      v17 = 5;
      goto LABEL_21;
    }
  }
  result = v23;
  v23 = 0;
  if (!result)
    goto LABEL_25;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_25;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
  if (!v5)
    return result;
LABEL_26:
  if (*(_DWORD *)v5 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v14);
  *(_DWORD *)v5 -= 2;
  return result;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::willDestroyCachedResource(WebCore::InspectorNetworkAgent *this, WebCore::CachedResource *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  BOOL *v6;
  WTF::StringImpl **v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  unsigned __int8 v12;
  WTF::StringImpl *v13;
  WTF *v14;
  int v15;
  unsigned int v16;

  result = (WTF::StringImpl *)WebCore::NetworkResourcesData::removeCachedResource(*((_QWORD *)this + 8), a2, (uint64_t)&v14);
  if (v16)
  {
    v13 = 0;
    v12 = 0;
    if (WebCore::InspectorNetworkAgent::cachedResourceContent(a2, &v13, (WTF::String *)&v12, v6) && v16)
    {
      v7 = (WTF::StringImpl **)v14;
      v8 = v12;
      v9 = 8 * v16;
      do
      {
        WebCore::NetworkResourcesData::setResourceContent(*((_QWORD *)this + 8), v7++, (const WTF::String *)&v13, v8 != 0);
        v9 -= 8;
      }
      while (v9);
    }
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
    v10 = v14;
    if (!v16)
    {
      if (!v14)
        return result;
LABEL_21:
      v14 = 0;
      v15 = 0;
      return (WTF::StringImpl *)WTF::fastFree(v10, v5);
    }
    v11 = 8 * v16;
    do
    {
      result = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
      v10 = (WTF *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  v10 = v14;
  if (v14)
    goto LABEL_21;
  return result;
}

uint64_t WebCore::InspectorNetworkAgent::cachedResourceContent(WebCore::InspectorNetworkAgent *this, WTF::StringImpl **a2, WTF::String *a3, BOOL *a4)
{
  uint64_t v6;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  const WTF::String *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BOOL4 isTextMediaPlaylistMIMEType;
  WTF::StringImpl *v24;
  uint64_t *v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WebCore::HTMLMetaCharsetParser *v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl **v55;
  char v56;
  WTF::StringImpl *v57;

  v6 = *((_QWORD *)this + 50);
  if (!v6 || !*(_DWORD *)(v6 + 400))
  {
    *(_BYTE *)a3 = 0;
    v13 = *a2;
    *a2 = 0;
    if (!v13)
      return 1;
    goto LABEL_16;
  }
  v8 = *((_BYTE *)this + 556) & 0x1F;
  if (v8 == 3)
  {
    *(_BYTE *)a3 = 0;
    if ((*((_BYTE *)this + 556) & 0x1F) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x195E4825CLL);
    }
    WebCore::CachedScript::script(this, 0);
    if ((v15 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    v17 = v57;
    v57 = 0;
    v13 = *a2;
    *a2 = v17;
    if (!v13)
      return 1;
    v14 = *(_DWORD *)v13 - 2;
    if (*(_DWORD *)v13 != 2)
    {
LABEL_17:
      *(_DWORD *)v13 = v14;
      return 1;
    }
    WTF::StringImpl::destroy(v13, v16);
    v13 = v57;
    v57 = 0;
    if (!v13)
      return 1;
LABEL_16:
    v14 = *(_DWORD *)v13 - 2;
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
      return 1;
    }
    goto LABEL_17;
  }
  if (v8 != 2)
  {
    v18 = (WTF *)*((_QWORD *)this + 49);
    if (!v18)
      return 0;
    WebCore::ResourceResponse::platformLazyInit(*((_QWORD *)this + 50), 1);
    v20 = *(_QWORD *)(v6 + 40);
    if (v20)
    {
      *(_DWORD *)v20 += 2;
      v57 = (WTF::StringImpl *)v20;
      if (*(_DWORD *)(v20 + 4) >= 5u)
      {
        v21 = *(_QWORD *)(v20 + 8);
        if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v21 & 0xDF) == 0x54
            && (*(_BYTE *)(v21 + 1) & 0xDF) == 0x45
            && (*(_BYTE *)(v21 + 2) & 0xDF) == 0x58
            && (*(_BYTE *)(v21 + 3) & 0xDF) == 0x54)
          {
            v22 = *(unsigned __int8 *)(v21 + 4);
            goto LABEL_35;
          }
        }
        else if ((*(_WORD *)v21 & 0xFFDF) == 0x54
               && (*(_WORD *)(v21 + 2) & 0xFFDF) == 0x45
               && (*(_WORD *)(v21 + 4) & 0xFFDF) == 0x58
               && (*(_WORD *)(v21 + 6) & 0xFFDF) == 0x54)
        {
          v22 = *(unsigned __int16 *)(v21 + 8);
LABEL_35:
          if ((v22 & 0xFFFFFFDF) == 0xF)
            goto LABEL_39;
        }
      }
    }
    else
    {
      v57 = 0;
    }
    if (!WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [16]>::contains<WTF::String>(WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType(WTF::String const&)::supportedJavaScriptMIMETypes, (uint64_t *)&v57)&& (WebCore::MIMETypeRegistry::isSupportedJSONMIMEType((WebCore::MIMETypeRegistry *)&v57, v19) & 1) == 0&& (WebCore::MIMETypeRegistry::isXMLMIMEType((WebCore::MIMETypeRegistry *)&v57, v19) & 1) == 0)
    {
      isTextMediaPlaylistMIMEType = WebCore::MIMETypeRegistry::isTextMediaPlaylistMIMEType((WebCore::MIMETypeRegistry *)&v57, v19);
LABEL_40:
      v24 = v57;
      v57 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::destroy(v24, v19);
          if (isTextMediaPlaylistMIMEType)
            goto LABEL_44;
          goto LABEL_72;
        }
        *(_DWORD *)v24 -= 2;
      }
      if (isTextMediaPlaylistMIMEType)
      {
LABEL_44:
        v25 = (uint64_t *)*((_QWORD *)this + 50);
        if (!v25)
        {
          v26 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
          if (v26 != -1)
          {
            v57 = (WTF::StringImpl *)&v54;
            v55 = &v57;
            std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v55, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
          }
          v25 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
        }
        WebCore::ResourceResponse::platformLazyInit((uint64_t)v25, 1);
        v27 = (WTF::StringImpl *)v25[5];
        if (v27)
          *(_DWORD *)v27 += 2;
        v54 = v27;
        v28 = (uint64_t *)*((_QWORD *)this + 50);
        if (!v28)
        {
          v29 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
          if (v29 != -1)
          {
            v57 = (WTF::StringImpl *)&v56;
            v55 = &v57;
            std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v55, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
          }
          v28 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
        }
        WebCore::ResourceResponse::platformLazyInit((uint64_t)v28, 1);
        WebCore::InspectorNetworkAgent::createTextDecoder((WebCore::InspectorNetworkAgent *)&v54, (const WTF::String *)(v28 + 7), (uint64_t *)&v55);
        v31 = v54;
        v54 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v30);
          else
            *(_DWORD *)v31 -= 2;
        }
        *(_BYTE *)a3 = 0;
        v32 = (uint64_t)v55;
        WebCore::FragmentedSharedBuffer::makeContiguous(v18, &v54);
        v33 = v54;
        if (!*((_DWORD *)v54 + 5))
        {
          v36 = 0;
          goto LABEL_60;
        }
        v34 = *(_QWORD *)(*((_QWORD *)v54 + 1) + 8);
        v35 = *(unsigned int *)(v34 + 24);
        if ((_DWORD)v35 != -1)
        {
          v57 = (WTF::StringImpl *)&v56;
          v36 = (const char *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v35])(&v57, v34 + 8);
LABEL_60:
          WebCore::TextResourceDecoder::decodeAndFlush((WebCore::TextResourceDecoder *)v32, v36, *((_QWORD *)v33 + 6), &v57);
          v38 = v57;
          v57 = 0;
          v39 = *a2;
          *a2 = v38;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
            {
              WTF::StringImpl::destroy(v39, v37);
              v46 = v57;
              v57 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, v37);
                else
                  *(_DWORD *)v46 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v39 -= 2;
              v57 = 0;
            }
          }
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v54, v37);
          if (v32)
          {
            if (*(_DWORD *)v32 == 1)
            {
              v48 = *(WTF **)(v32 + 72);
              if (v48)
              {
                *(_QWORD *)(v32 + 72) = 0;
                *(_DWORD *)(v32 + 80) = 0;
                WTF::fastFree(v48, v40);
              }
              v49 = *(WebCore::HTMLMetaCharsetParser **)(v32 + 48);
              *(_QWORD *)(v32 + 48) = 0;
              if (v49)
              {
                WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v49, (WTF::StringImpl *)v40);
                WTF::fastFree(v50, v51);
              }
              v52 = *(_QWORD *)(v32 + 40);
              *(_QWORD *)(v32 + 40) = 0;
              if (v52)
                (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
              WTF::fastFree((WTF *)v32, v40);
            }
            else
            {
              --*(_DWORD *)v32;
            }
          }
          return 1;
        }
LABEL_106:
        v53 = std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::InspectorNetworkAgent::willSendWebSocketHandshakeRequest(v53);
      }
LABEL_72:
      *(_BYTE *)a3 = 1;
      WebCore::FragmentedSharedBuffer::makeContiguous(v18, &v55);
      if (*((_DWORD *)v55 + 5))
      {
        v41 = *((_QWORD *)v55[1] + 1);
        v42 = *(unsigned int *)(v41 + 24);
        if ((_DWORD)v42 == -1)
          goto LABEL_106;
        v57 = (WTF::StringImpl *)&v54;
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v42])(&v57, v41 + 8);
      }
      WTF::base64EncodeToString();
      v44 = v57;
      v57 = 0;
      v45 = *a2;
      *a2 = v44;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
        {
          WTF::StringImpl::destroy(v45, v43);
          v47 = v57;
          v57 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, v43);
            else
              *(_DWORD *)v47 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v45 -= 2;
          v57 = 0;
        }
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v55, v43);
      return 1;
    }
LABEL_39:
    isTextMediaPlaylistMIMEType = 1;
    goto LABEL_40;
  }
  *(_BYTE *)a3 = 0;
  if ((*((_BYTE *)this + 556) & 0x1F) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x195E4823CLL);
  }
  WebCore::CachedCSSStyleSheet::sheetText(this, 0, 0, 0, &v57);
  v10 = v57;
  if (v57)
    *(_DWORD *)v57 += 2;
  v11 = *a2;
  *a2 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v9);
      v10 = v57;
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v57 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  return *a2 != 0;
}

_DWORD *WebCore::InspectorNetworkAgent::willSendWebSocketHandshakeRequest(WTF::JSONImpl::Object *a1, Inspector::IdentifiersFactory *a2, _BYTE *a3)
{
  uint64_t *v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::MonotonicTime *v10;
  WTF::WallTime *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *result;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;

  WTF::JSONImpl::Object::create(a1);
  if ((a3[184] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
    a3[184] |= 1u;
  }
  WebCore::buildObjectForHeaders((WebCore *)&v15, (const WebCore::HTTPHeaderMap *)(a3 + 96));
  v6 = Inspector::Protocol::Network::WebSocketRequest::Builder<0>::setHeaders((uint64_t *)&v16, &v15);
  v7 = *v6;
  *v6 = 0;
  v17 = (_DWORD *)v7;
  v8 = v15;
  v15 = 0;
  if (v8)
  {
    if (*v8 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v8;
  }
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v9;
  }
  Inspector::IdentifiersFactory::requestId(a2);
  v10 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 56))(*((_QWORD **)a1 + 3));
  v11 = (WTF::WallTime *)WTF::MonotonicTime::now(v10);
  WTF::WallTime::now(v11);
  Inspector::NetworkFrontendDispatcher::webSocketWillSendHandshakeRequest();
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t *Inspector::Protocol::Network::WebSocketRequest::Builder<0>::setHeaders(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = (_DWORD *)*a2;
  *a2 = 0;
  v17 = v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v18, (const WTF::StringImpl *)&v17, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v18);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v18;
      if (v18)
        *(_DWORD *)v18 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

_DWORD *WebCore::InspectorNetworkAgent::didReceiveWebSocketHandshakeResponse(WTF::JSONImpl::Object *a1, Inspector::IdentifiersFactory *a2, __int16 *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::MonotonicTime *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _DWORD *result;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;

  WTF::JSONImpl::Object::create(a1);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1);
  v6 = Inspector::Protocol::Network::WebSocketResponse::Builder<0>::setStatus((uint64_t *)&v17, (WTF::JSONImpl::Value *)a3[68]);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 2);
  v7 = Inspector::Protocol::Network::WebSocketResponse::Builder<1>::setStatusText(v6, (WTF::JSONImpl::Value *)(a3 + 32));
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 2);
  WebCore::buildObjectForHeaders((WebCore *)&v16, (const WebCore::HTTPHeaderMap *)(a3 + 40));
  v8 = Inspector::Protocol::Network::WebSocketRequest::Builder<0>::setHeaders(v7, &v16);
  v9 = *v8;
  *v8 = 0;
  v18 = (_DWORD *)v9;
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v11;
  }
  Inspector::IdentifiersFactory::requestId(a2);
  v12 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 56))(*((_QWORD **)a1 + 3));
  WTF::MonotonicTime::now(v12);
  Inspector::NetworkFrontendDispatcher::webSocketHandshakeResponseReceived();
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t *Inspector::Protocol::Network::WebSocketResponse::Builder<0>::setStatus(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _BYTE v18[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v16, (const WTF::StringImpl *)&v17, (uint64_t)v18);
  if (v18[16])
  {
    v6 = (uint64_t *)(v4 + 24);
    v7 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v4 + 32))
    {
      v13 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v16);
      v7 = *(unsigned int *)(v4 + 36);
      v14 = *(_QWORD *)(v4 + 24);
      v15 = *v13;
      if (*v13)
        *v15 += 2;
      *(_QWORD *)(v14 + 8 * v7) = v15;
    }
    else
    {
      v8 = *v6;
      v9 = v16;
      if (v16)
        *(_DWORD *)v16 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(v4 + 36) = v7 + 1;
  }
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Network::WebSocketResponse::Builder<1>::setStatusText(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::didReceiveWebSocketFrame(uint64_t a1, Inspector::IdentifiersFactory *this, const WebCore::WebSocketFrame *a3)
{
  WTF::MonotonicTime *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *result;
  _DWORD *v9;
  WTF::StringImpl *v10;

  Inspector::IdentifiersFactory::requestId(this);
  v5 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
  WTF::MonotonicTime::now(v5);
  Inspector::NetworkFrontendDispatcher::webSocketFrameReceived();
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*v7 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v7;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::`anonymous namespace'::buildWebSocketMessage(WebCore::_anonymous_namespace_ *this, const WebCore::WebSocketFrame *a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *result;
  WTF::StringImpl *v13;
  _DWORD *v14;

  WTF::JSONImpl::Object::create(this);
  LODWORD(v4) = *(_DWORD *)a2;
  v5 = Inspector::Protocol::Network::WebSocketFrame::Builder<0>::setOpcode((uint64_t *)&v14, (double)v4);
  v6 = Inspector::Protocol::Network::WebSocketFrame::Builder<1>::setMask(v5, (WTF::JSONImpl::Value *)*((unsigned __int8 *)a2 + 8));
  if (*(_DWORD *)a2 == 1)
    WTF::String::fromUTF8WithLatin1Fallback();
  else
    WTF::base64EncodeToString();
  v7 = Inspector::Protocol::Network::WebSocketFrame::Builder<3>::setPayloadData(v6, (WTF::JSONImpl::Value *)&v13);
  v8 = Inspector::Protocol::Network::WebSocketFrame::Builder<7>::setPayloadLength(v7, (double)*((unint64_t *)a2 + 3));
  v10 = *v8;
  *v8 = 0;
  *(_QWORD *)this = v10;
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::didSendWebSocketFrame(uint64_t a1, Inspector::IdentifiersFactory *this, const WebCore::WebSocketFrame *a3)
{
  WTF::MonotonicTime *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *result;
  _DWORD *v9;
  WTF::StringImpl *v10;

  Inspector::IdentifiersFactory::requestId(this);
  v5 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
  WTF::MonotonicTime::now(v5);
  Inspector::NetworkFrontendDispatcher::webSocketFrameSent();
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*v7 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v7;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::InspectorNetworkAgent::enable@<X0>(WebCore::InspectorNetworkAgent *this@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  void *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  Inspector::IdentifiersFactory *v14;
  Inspector::NetworkFrontendDispatcher *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  __int16 *v24;
  Inspector::NetworkFrontendDispatcher *v25;
  double *v26;
  double v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  _BYTE *v31;
  _QWORD *v32;
  WTF::StringImpl *v33[25];
  WTF *v34;
  int v35;
  unsigned int v36;

  *((_BYTE *)this + 177) = 1;
  *(_QWORD *)(*((_QWORD *)this + 2) + 192) = this;
  if (__ldaxr(WebCore::WebSocket::s_allActiveWebSocketsLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::WebSocket::s_allActiveWebSocketsLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::WebSocket::s_allActiveWebSocketsLock);
LABEL_5:
  result = (*(_QWORD *(**)(WTF **__return_ptr, WebCore::InspectorNetworkAgent *))(*(_QWORD *)this + 192))(&v34, this);
  v7 = v34;
  if (v36)
  {
    v31 = a2;
    v8 = (WTF *)((char *)v34 + 8 * v36);
    do
    {
      v9 = *(_QWORD *)v7;
      v10 = *(_QWORD *)(*(_QWORD *)v7 + 40);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          if (!*(_BYTE *)(v11 + 178))
          {
            v12 = (_DWORD *)(v11 - 264);
            *(_DWORD *)(v11 - 264) += 2;
            v13 = *(_QWORD *)(v9 + 72);
            if (v13)
              (*(void (**)(_QWORD))(*(_QWORD *)v13 + 160))(*(_QWORD *)(v9 + 72));
            v14 = (Inspector::IdentifiersFactory *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13);
            v15 = (Inspector::NetworkFrontendDispatcher *)*((_QWORD *)this + 5);
            Inspector::IdentifiersFactory::requestId(v14);
            Inspector::NetworkFrontendDispatcher::webSocketCreated(v15, (const WTF::String *)v33, (const WTF::String *)(v9 + 88));
            v17 = v33[0];
            v33[0] = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v16);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v11 - 288);
            v19 = v18;
            if (v18)
            {
              do
                v20 = __ldaxr(v18);
              while (__stlxr(v20 + 1, v18));
            }
            v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v21 = &off_1E33F0AC0;
            v21[1] = v19;
            v32 = v21;
            (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD **))(*(_QWORD *)v13 + 128))(v33, v13, &v32);
            WebCore::InspectorNetworkAgent::willSendWebSocketHandshakeRequest(this, v14, v33);
            WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v33, v22);
            v23 = v32;
            v32 = 0;
            if (v23)
              (*(void (**)(_QWORD *))(*v23 + 8))(v23);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 120))(v13))
            {
              v24 = (__int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 136))(v13);
              WebCore::InspectorNetworkAgent::didReceiveWebSocketHandshakeResponse(this, v14, v24);
            }
            if (*(_DWORD *)(v9 + 80) == 3)
            {
              v25 = (Inspector::NetworkFrontendDispatcher *)*((_QWORD *)this + 5);
              Inspector::IdentifiersFactory::requestId(v14);
              v26 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v26);
              Inspector::NetworkFrontendDispatcher::webSocketClosed(v25, (const WTF::String *)v33, v26[1] + v27 - v26[2]);
              v29 = v33[0];
              v33[0] = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v28);
                else
                  *(_DWORD *)v29 -= 2;
              }
            }
            result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 168))(v13);
            if (*v12 == 2)
            {
              if ((*(_WORD *)(v11 - 258) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)(v11 - 288), v6);
            }
            else
            {
              *v12 -= 2;
            }
          }
        }
      }
      v7 = (WTF *)((char *)v7 + 8);
    }
    while (v7 != v8);
    v7 = v34;
    a2 = v31;
  }
  if (v7)
  {
    v34 = 0;
    v35 = 0;
    result = (_QWORD *)WTF::fastFree(v7, v6);
  }
  v30 = __ldxr(WebCore::WebSocket::s_allActiveWebSocketsLock);
  if (v30 == 1)
  {
    if (!__stlxr(0, WebCore::WebSocket::s_allActiveWebSocketsLock))
      goto LABEL_40;
  }
  else
  {
    __clrex();
  }
  result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::WebSocket::s_allActiveWebSocketsLock);
LABEL_40:
  *a2 = 0;
  a2[8] = 0;
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::InspectorNetworkAgent::enable@<X0>(WebCore::InspectorNetworkAgent *this@<X0>, _BYTE *a2@<X8>)
{
  return WebCore::InspectorNetworkAgent::enable((WebCore::InspectorNetworkAgent *)((char *)this - 32), a2);
}

uint64_t WebCore::InspectorNetworkAgent::setResourceCachingDisabled@<X0>(WebCore::InspectorNetworkAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::InspectorNetworkAgent *))(*(_QWORD *)this + 200))(this);
  *a2 = 0;
  a2[8] = 0;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorNetworkAgent::disable@<X0>(WebCore::InspectorNetworkAgent *this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  return WebCore::InspectorNetworkAgent::disable((WebCore::InspectorNetworkAgent *)((char *)this - 32), a2, a3);
}

uint64_t WebCore::InspectorNetworkAgent::shouldIntercept(uint64_t a1, WTF::URL *this, int a3)
{
  WTF::StringImpl *v6;
  int *v7;
  int v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v16[8];

  WTF::URL::removeFragmentIdentifier(this);
  v7 = *(int **)this;
  if (!v7)
    return 0;
  v8 = *v7;
  v9 = v7[1];
  *v7 += 2;
  if (v9 && (v10 = *(unsigned int *)(a1 + 116), (_DWORD)v10))
  {
    v11 = *(_DWORD **)(a1 + 104);
    v12 = 16 * v10;
    while (1)
    {
      if (v11[3] == a3)
      {
        if (!*(_QWORD *)v11)
          break;
        if (!*(_DWORD *)(*(_QWORD *)v11 + 4))
          break;
        Inspector::ContentSearchUtilities::createRegularExpressionForSearchString();
        v13 = JSC::Yarr::RegularExpression::match();
        JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v16);
        if (v13 != -1)
          break;
      }
      v11 += 4;
      v12 -= 16;
      if (!v12)
      {
        v14 = 0;
        goto LABEL_15;
      }
    }
    v14 = 1;
LABEL_15:
    v8 = *v7 - 2;
    if (*v7 == 2)
      goto LABEL_16;
  }
  else
  {
    v14 = 0;
    if (!v8)
    {
LABEL_16:
      WTF::StringImpl::destroy((WTF::StringImpl *)v7, v6);
      return v14;
    }
  }
  *v7 = v8;
  return v14;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::setExtraHTTPHeaders@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = (WTF::StringImpl **)(v4 + 16 * v5);
    if (*(_DWORD *)(v4 - 12))
    {
      v7 = *(WTF::StringImpl ***)(*(_QWORD *)a2 + 16);
      if ((_DWORD)v5)
      {
        v8 = 16 * v5;
        v7 = *(WTF::StringImpl ***)(*(_QWORD *)a2 + 16);
        while ((unint64_t)*v7 + 1 <= 1)
        {
          v7 += 2;
          v8 -= 16;
          if (!v8)
          {
            v7 = v6;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v7 = (WTF::StringImpl **)(v4 + 16 * v5);
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  v6 = (WTF::StringImpl **)(v4 + 16 * v5);
  if (v4)
  {
LABEL_8:
    v9 = (WTF::StringImpl **)(v4 + 16 * *(unsigned int *)(v4 - 4));
    goto LABEL_13;
  }
  v9 = 0;
LABEL_13:
  if (v9 != v7)
  {
    v10 = (uint64_t)result + 72;
    do
    {
      result = (WTF::StringImpl *)WTF::JSONImpl::Value::asString(v7[1]);
      if (v14)
      {
        WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WTF::String&>(v10, v7, (const WTF::StringImpl *)&v14, (uint64_t)&v13);
        result = v14;
        v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
          else
            *(_DWORD *)result -= 2;
        }
      }
      v12 = v7 + 2;
      v7 = v6;
      if (v12 != v6)
      {
        v7 = v12;
        while ((unint64_t)*v7 + 1 <= 1)
        {
          v7 += 2;
          if (v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
      }
    }
    while (v7 != v9);
  }
  *a3 = 0;
  a3[8] = 0;
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorNetworkAgent::setExtraHTTPHeaders@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return WebCore::InspectorNetworkAgent::setExtraHTTPHeaders((WTF::StringImpl *)(a1 - 32), a2, a3);
}

uint64_t WebCore::InspectorNetworkAgent::getResponseBody@<X0>(WebCore::InspectorNetworkAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  void *v6;
  BOOL *v7;
  uint64_t *v8;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  WTF *v45;
  WebCore::InspectorNetworkAgent *v47;
  char v48;
  char v49;
  WebCore::InspectorNetworkAgent *v50;
  const WTF::String *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  char v55;
  WTF::StringImpl *v56;

  if (!*a2)
    goto LABEL_6;
  result = (uint64_t)WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*((_QWORD *)this + 8) + 32), a2, a3);
  if (!result)
    goto LABEL_6;
  v8 = (uint64_t *)result;
  v9 = *(_DWORD **)(result + 32);
  if (v9)
  {
    v10 = *(_BYTE *)(result + 121);
    *v9 += 2;
    *(_QWORD *)a4 = v9;
    *(_BYTE *)(a4 + 8) = v10;
LABEL_5:
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  if (*(_BYTE *)(result + 120))
    goto LABEL_6;
  v11 = *(_QWORD *)(result + 72);
  if (v11)
  {
    do
      v12 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v12 + 1, (unsigned int *)v11));
    v13 = *(_QWORD *)(result + 40);
    do
    {
      v14 = __ldaxr((unsigned int *)v11);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v11));
    if (v15)
    {
      if (!v13)
        goto LABEL_63;
    }
    else
    {
      v52 = v13;
      atomic_store(1u, (unsigned int *)v11);
      v28 = *(unsigned int *)(v11 + 20);
      if ((_DWORD)v28)
      {
        v29 = *(_QWORD *)(v11 + 8);
        v30 = v29 + 16 * v28;
        do
        {
          v31 = *(unsigned int **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              v34 = v31[6];
              if ((_DWORD)v34 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F09A8[v34])(&v56, v31 + 2);
              v31[6] = -1;
              WTF::fastFree((WTF *)v31, v6);
            }
          }
          v29 += 16;
        }
        while (v29 != v30);
      }
      v35 = *(WTF **)(v11 + 8);
      if ((WTF *)(v11 + 24) != v35 && v35 != 0)
      {
        *(_QWORD *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 16) = 0;
        WTF::fastFree(v35, v6);
      }
      WTF::fastFree((WTF *)v11, v6);
      if (!v52)
        goto LABEL_63;
    }
    v53 = 0;
    v16 = v8[9];
    if (v16)
    {
      do
        v17 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v17 + 1, (unsigned int *)v16));
      WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v16, &v54);
      v18 = v54;
      if (*(_DWORD *)(v54 + 20))
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v54 + 8) + 8);
        v20 = *(unsigned int *)(v19 + 24);
        if ((_DWORD)v20 == -1)
        {
          v50 = (WebCore::InspectorNetworkAgent *)std::__throw_bad_variant_access[abi:sn180100]();
        }
        v56 = (WTF::StringImpl *)&v55;
        v21 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v20])(&v56, v19 + 8);
      }
      else
      {
        v21 = 0;
      }
      v22 = WebCore::InspectorPageAgent::dataContent(v21, *(_QWORD *)(v18 + 48), v8[5], 0, &v53);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v54, v23);
      do
      {
        v25 = __ldaxr((unsigned int *)v16);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v16));
      if (v26)
      {
        if (v22)
        {
LABEL_23:
          result = (uint64_t)v53;
          if (!v53)
          {
            *(_QWORD *)a4 = 0;
            *(_BYTE *)(a4 + 8) = 0;
            goto LABEL_5;
          }
          v27 = *(_DWORD *)v53;
          *(_DWORD *)v53 += 2;
          *(_QWORD *)a4 = result;
          *(_BYTE *)(a4 + 8) = 0;
          goto LABEL_67;
        }
      }
      else
      {
        atomic_store(1u, (unsigned int *)v16);
        v37 = *(unsigned int *)(v16 + 20);
        if ((_DWORD)v37)
        {
          v38 = *(_QWORD *)(v16 + 8);
          v39 = v38 + 16 * v37;
          do
          {
            v40 = *(unsigned int **)(v38 + 8);
            *(_QWORD *)(v38 + 8) = 0;
            if (v40)
            {
              v41 = v40;
              do
              {
                v42 = __ldaxr(v40);
                v43 = v42 - 1;
              }
              while (__stlxr(v43, v40));
              if (!v43)
              {
                atomic_store(1u, v40);
                v44 = v40[6];
                if ((_DWORD)v44 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F09A8[v44])(&v56, v41 + 2);
                v41[6] = -1;
                WTF::fastFree((WTF *)v41, v24);
              }
            }
            v38 += 16;
          }
          while (v38 != v39);
        }
        v45 = *(WTF **)(v16 + 8);
        if ((WTF *)(v16 + 24) != v45 && v45 != 0)
        {
          *(_QWORD *)(v16 + 8) = 0;
          *(_DWORD *)(v16 + 16) = 0;
          WTF::fastFree(v45, v24);
        }
        WTF::fastFree((WTF *)v16, v24);
        if ((v22 & 1) != 0)
          goto LABEL_23;
      }
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v24);
        else
          *(_DWORD *)v53 -= 2;
      }
    }
  }
LABEL_63:
  v47 = (WebCore::InspectorNetworkAgent *)v8[12];
  if (!v47)
  {
LABEL_6:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v56 = 0;
  LOBYTE(v54) = 0;
  if (!WebCore::InspectorNetworkAgent::cachedResourceContent(v47, &v56, (WTF::String *)&v54, v7))
  {
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v24);
      else
        *(_DWORD *)v56 -= 2;
    }
    goto LABEL_6;
  }
  result = (uint64_t)v56;
  if (!v56)
  {
    v49 = v54;
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 8) = v49;
    goto LABEL_5;
  }
  v27 = *(_DWORD *)v56;
  *(_DWORD *)v56 += 2;
  v48 = v54;
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v48;
LABEL_67:
  *(_DWORD *)(a4 + 16) = 0;
  if (!v27)
    return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v24);
  *(_DWORD *)result = v27;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorNetworkAgent::getResponseBody@<X0>(WebCore::InspectorNetworkAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorNetworkAgent::getResponseBody((WebCore::InspectorNetworkAgent *)((char *)this - 32), a2, a3, a4);
}

uint64_t `non-virtual thunk to'WebCore::InspectorNetworkAgent::setResourceCachingDisabled@<X0>(WebCore::InspectorNetworkAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 4) + 200))((char *)this - 32);
  *a2 = 0;
  a2[8] = 0;
  return result;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::loadResource(uint64_t a1, uint64_t a2, uint64_t a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  uint64_t v6;
  _QWORD *v7;
  WTF *v8;
  char v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  Inspector::BackendDispatcher::CallbackBase *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  Inspector::BackendDispatcher::CallbackBase *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  void *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  char v37;
  char v38;
  char v39;
  __int16 v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF *v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[7];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  char v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  WTF *v64;
  __int128 v65;
  __int128 v66;
  WTF::StringImpl *v67;

  v67 = 0;
  v6 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a1 + 208))(a1, &v67, a2);
  if (v6)
  {
    v7 = (_QWORD *)v6;
    (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 120))(&v64, v6, a3, 0);
    v8 = v64;
    if (v64)
      *(_DWORD *)v64 += 2;
    v49 = v65;
    v50 = v66;
    v48 = v8;
    v51[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v51);
    v51[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v51[6] = v31;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0x10000;
    v9 = v56 & 0x80 | 4;
    v56 = v9;
    v57 = 0;
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v10 += 2;
      v9 = v56;
    }
    v58 = v10;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = v62 & 0xE0 | 5;
    v56 = v9 | 2;
    v63 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v47 = v31;
    WebCore::ResourceRequestBase::setHTTPMethod(&v48, &v47);
    v12 = v47;
    v47 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v62 |= 0x10u;
    LOBYTE(v31) = 0;
    *(_DWORD *)((char *)&v31 + 2) = 0;
    BYTE6(v31) = 0;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0;
    v37 = 1;
    v38 = 0;
    v39 = 0;
    v40 = 20;
    v42 = 0;
    v43 = 0;
    v45 = 0;
    v46 = 1;
    v41 = v41 & 0xF0000000 | 0xC000BC2;
    *(_WORD *)((char *)&v31 + 1) = 258;
    v44 = 0;
    v13 = WTF::fastMalloc((WTF *)0x58);
    v14 = *a4;
    *((_DWORD *)v14 + 2) = *((_DWORD *)*a4 + 2) + 1;
    *(_DWORD *)(v13 + 16) = 0;
    *(_QWORD *)v13 = &off_1E33F0938;
    *(_QWORD *)(v13 + 8) = 0;
    *(_OWORD *)(v13 + 32) = 0u;
    v15 = (WTF::StringImpl **)(v13 + 32);
    *(_QWORD *)(v13 + 24) = v14;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 60) = 0u;
    *(_BYTE *)(v13 + 76) = 1;
    v29 = 0;
    v30 = 0;
    WebCore::ThreadableLoader::create(v7, v13, (WebCore::ResourceRequest *)&v48, (uint64_t)&v31, &v30, (uint64_t)&v29, (uint64_t *)&v47);
    v17 = v29;
    v29 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v30;
    v30 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v47;
    v20 = *a4;
    if (v47)
    {
      if (Inspector::BackendDispatcher::CallbackBase::isActive(v20))
      {
        v22 = *v15;
        *v15 = v19;
        if (v22)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 40))(v22);
      }
      else
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 40))(v19);
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v20, (const WTF::String *)&v30);
      v24 = v30;
      v30 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v21);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
    v25 = v45;
    v45 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v21);
      else
        *(_DWORD *)v25 -= 2;
    }
    WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v31, v21);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v48, v26);
    v27 = v64;
    v64 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v23);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  else
  {
    Inspector::BackendDispatcher::CallbackBase::sendFailure(*a4, (const WTF::String *)&v67);
  }
  result = v67;
  v67 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorNetworkAgent::loadResource(uint64_t a1, uint64_t a2, uint64_t a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  return WebCore::InspectorNetworkAgent::loadResource(a1 - 32, a2, a3, a4);
}

void WebCore::InspectorNetworkAgent::getSerializedCertificate(WebCore::InspectorNetworkAgent *this, const WTF::String *a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WebCore::InspectorNetworkAgent *v9;
  const WTF::String *v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v6 = v5;
  if (*v3
    && (v7 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*(_QWORD *)(v2 + 64) + 32), v3, v4)) != 0&& (v8 = v7, *((_BYTE *)v7 + 88))&& *((_QWORD *)v7 + 10))
  {
    WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&v11);
    if (*((_BYTE *)v8 + 88))
    {
      WTF::Persistence::Coder<WebCore::CertificateInfo>::encodeForPersistence((WTF::Persistence *)&v11);
      WTF::base64EncodeToString();
      *(_DWORD *)(v6 + 8) = 0;
      WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&v11);
    }
    else
    {
      v9 = (WebCore::InspectorNetworkAgent *)std::__throw_bad_optional_access[abi:sn180100]();
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(v6 + 8) = 1;
  }
}

void `non-virtual thunk to'WebCore::InspectorNetworkAgent::getSerializedCertificate(WebCore::InspectorNetworkAgent *this, const WTF::String *a2)
{
  WebCore::InspectorNetworkAgent::getSerializedCertificate((WebCore::InspectorNetworkAgent *)((char *)this - 32), a2);
}

void WebCore::InspectorNetworkAgent::resolveWebSocket(Inspector::InjectedScriptManager **this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Inspector::IdentifiersFactory *v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::WindowProxy *v24;
  WebCore::DOMWrapperWorld *v25;
  JSC::JSGlobalObject *v26;
  void *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  unsigned int v32;
  WTF::StringImpl *v33;

  if (__ldaxr(WebCore::WebSocket::s_allActiveWebSocketsLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::WebSocket::s_allActiveWebSocketsLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::WebSocket::s_allActiveWebSocketsLock, a2, a3);
LABEL_5:
  (*((void (**)(WTF **__return_ptr, Inspector::InjectedScriptManager **, const WTF::StringImpl **, const WTF::String *))*this
   + 24))(&v30, this, a2, a3);
  v9 = v30;
  if (v32)
  {
    v10 = 8 * v32;
    while (1)
    {
      v11 = *(_QWORD *)v9;
      v12 = *(_QWORD *)(*(_QWORD *)v9 + 72);
      if (v12)
        (*(void (**)(_QWORD))(*(_QWORD *)v12 + 160))(*(_QWORD *)(*(_QWORD *)v9 + 72));
      v13 = (Inspector::IdentifiersFactory *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 104))(v12);
      Inspector::IdentifiersFactory::requestId(v13);
      v16 = WTF::equal(v33, *a2, v14);
      v17 = v33;
      v33 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v15);
        else
          *(_DWORD *)v17 -= 2;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 168))(v12);
      if (v16)
        break;
      v9 = (WTF *)((char *)v9 + 8);
      v10 -= 8;
      if (!v10)
      {
        v11 = 0;
        break;
      }
    }
    v9 = v30;
    if (v30)
      goto LABEL_19;
  }
  else
  {
    v11 = 0;
    if (v30)
    {
LABEL_19:
      v30 = 0;
      v31 = 0;
      WTF::fastFree(v9, v8);
    }
  }
  v18 = __ldxr(WebCore::WebSocket::s_allActiveWebSocketsLock);
  if (v18 != 1)
  {
    __clrex();
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::WebSocket::s_allActiveWebSocketsLock);
    if (v11)
      goto LABEL_23;
LABEL_29:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a4 + 8) = 1;
    return;
  }
  if (__stlxr(0, WebCore::WebSocket::s_allActiveWebSocketsLock))
    goto LABEL_28;
  if (!v11)
    goto LABEL_29;
LABEL_23:
  v19 = *(_QWORD *)(v11 + 40);
  if (!v19)
    goto LABEL_29;
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20 || *(_BYTE *)(v20 + 178))
    goto LABEL_29;
  v21 = (_DWORD *)(v20 - 264);
  *(_DWORD *)(v20 - 264) += 2;
  v22 = *(_QWORD *)(v20 + 240);
  if (v22 && (v23 = *(_QWORD *)(v22 + 8)) != 0)
  {
    v24 = *(WebCore::WindowProxy **)(v23 + 112);
    {
      v25 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    }
    else
    {
      v29 = WebCore::g_commonVMOrNull;
      if (!WebCore::g_commonVMOrNull)
        v29 = WebCore::commonVMSlow(0);
      v25 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v29 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v25;
    }
    v26 = (JSC::JSGlobalObject *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(v24, v25) + 2);
    Inspector::InjectedScriptManager::injectedScriptFor(this[7], v26);
    JSC::JSLockHolder::JSLockHolder();
    WebCore::wrap<WebCore::WebSocket>((uint64_t)v26, (uint64_t)v26, v11);
    MEMORY[0x19AEA32A0](&v33);
    Inspector::InjectedScript::wrapObject();
    if (v33)
    {
      *(_QWORD *)a4 = v33;
      *(_DWORD *)(a4 + 8) = 0;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_DWORD *)(a4 + 8) = 1;
      v28 = v33;
      v33 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v28;
      }
    }
    Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)&v30);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a4 + 8) = 1;
  }
  if (*v21 == 2)
  {
    if ((*(_WORD *)(v20 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v20 - 288), v27);
  }
  else
  {
    *v21 -= 2;
  }
}

void `non-virtual thunk to'WebCore::InspectorNetworkAgent::resolveWebSocket(Inspector::InjectedScriptManager **this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  WebCore::InspectorNetworkAgent::resolveWebSocket(this - 4, a2, a3, a4);
}

uint64_t WebCore::InspectorNetworkAgent::setInterceptionEnabled@<X0>(uint64_t this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  char v4;
  uint64_t v5;
  WTF *v6;
  WTF **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD **v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  if (*(unsigned __int8 *)(this + 179) == a2)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
  }
  else
  {
    v5 = this;
    *(_BYTE *)(this + 179) = a2;
    if ((a2 & 1) == 0)
    {
      v7 = (WTF **)(this + 120);
      v6 = *(WTF **)(this + 120);
      if (*(_DWORD *)(v5 + 132))
      {
        v8 = *(unsigned int *)(v5 + 128);
        v9 = *(_QWORD **)(v5 + 120);
        if ((_DWORD)v8)
        {
          v10 = 0;
          while (!*(_QWORD *)((char *)v6 + v10))
          {
            v10 += 16;
            if (16 * v8 == v10)
              goto LABEL_18;
          }
          v9 = (_QWORD *)((char *)v6 + v10);
        }
        v11 = (_QWORD *)((char *)v6 + 16 * v8);
        if (v9 != v11)
        {
LABEL_12:
          v12 = (_QWORD **)v9[1];
          if (!*((_BYTE *)*v12 + 752))
            (*(void (**)(_QWORD *, _QWORD *))(*v12[1] + 16))(v12[1], *v12 + 42);
          while (1)
          {
            v9 += 2;
            if (v9 == v11)
              break;
            if (*v9)
            {
              if (v9 != v11)
                goto LABEL_12;
              break;
            }
          }
          v6 = *v7;
        }
      }
LABEL_18:
      if (v6)
      {
        v13 = (void *)*(unsigned int *)(v5 + 128);
        *v7 = 0;
        *(_QWORD *)(v5 + 128) = 0;
        *(_QWORD *)(v5 + 133) = 0;
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v6, v13);
      }
      v14 = (uint64_t *)(v5 + 144);
      this = *(_QWORD *)(v5 + 144);
      if (*(_DWORD *)(v5 + 156))
      {
        v15 = *(unsigned int *)(v5 + 152);
        v16 = *(_QWORD *)(v5 + 144);
        if ((_DWORD)v15)
        {
          v17 = 0;
          while (!*(_QWORD *)(this + v17))
          {
            v17 += 16;
            if (16 * v15 == v17)
              goto LABEL_33;
          }
          v16 = this + v17;
        }
        v18 = this + 16 * v15;
        if (v16 != v18)
        {
LABEL_28:
          WebCore::InspectorNetworkAgent::PendingInterceptResponse::respond(*(WTF **)(v16 + 8), *(_QWORD *)(v16 + 8), 0);
          while (1)
          {
            v16 += 16;
            if (v16 == v18)
              break;
            if (*(_QWORD *)v16)
            {
              if (v16 != v18)
                goto LABEL_28;
              break;
            }
          }
          this = *v14;
        }
      }
LABEL_33:
      if (this)
      {
        v19 = (WTF::StringImpl *)*(unsigned int *)(v5 + 152);
        *v14 = 0;
        *(_QWORD *)(v5 + 152) = 0;
        *(_QWORD *)(v5 + 157) = 0;
        this = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable((WTF *)this, v19);
      }
    }
    v4 = 0;
    *a3 = 0;
  }
  a3[8] = v4;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorNetworkAgent::setInterceptionEnabled@<X0>(WebCore::InspectorNetworkAgent *this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  return WebCore::InspectorNetworkAgent::setInterceptionEnabled((uint64_t)this - 32, a2, a3);
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::addInterception@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, _BYTE *a6@<X8>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  __int16 v12;
  int v13;

  v12 = 1;
  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v11 = v7;
  if (a4[1])
    LOBYTE(v12) = *a4;
  if (a5[1])
    HIBYTE(v12) = *a5;
  v13 = (int)a3;
  if ((WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::InspectorNetworkAgent::Intercept>((unsigned int *)(a1 + 104), (unint64_t)&v11, a3) & 1) != 0)
  {
    v9 = 0;
    *a6 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 1;
  }
  a6[8] = v9;
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::InspectorNetworkAgent::Intercept>(unsigned int *a1, unint64_t a2, const WTF::StringImpl *a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  const WTF::StringImpl **v12;

  LODWORD(v5) = a1[3];
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)a1;
      if (WTF::equal(*(WTF **)(*(_QWORD *)a1 + v6), *(const WTF::StringImpl **)a2, a3))
      {
        if (*(unsigned __int8 *)(v8 + v6 + 8) == *(unsigned __int8 *)(a2 + 8)
          && *(unsigned __int8 *)(v8 + v6 + 9) == *(unsigned __int8 *)(a2 + 9)
          && *(_DWORD *)(v8 + v6 + 12) == *(_DWORD *)(a2 + 12))
        {
          return 0;
        }
      }
      ++v7;
      v5 = a1[3];
      v6 += 16;
      if (v7 >= v5)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    if ((_DWORD)v5 == a1[2])
    {
      a2 = WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v5 + 1, a2);
      v9 = a1[3];
      v10 = *(_QWORD *)a1;
      v11 = *(const WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v11 += 2;
      v12 = (const WTF::StringImpl **)(v10 + 16 * v9);
    }
    else
    {
      v12 = (const WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v5);
      v11 = *(const WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v11 += 2;
    }
    *v12 = v11;
    v12[1] = *(const WTF::StringImpl **)(a2 + 8);
    ++a1[3];
    return 1;
  }
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorNetworkAgent::addInterception@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, _BYTE *a6@<X8>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  __int16 v12;
  int v13;

  v12 = 1;
  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v11 = v7;
  if (a4[1])
    LOBYTE(v12) = *a4;
  if (a5[1])
    HIBYTE(v12) = *a5;
  v13 = (int)a3;
  if ((WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::InspectorNetworkAgent::Intercept>((unsigned int *)(a1 + 72), (unint64_t)&v11, a3) & 1) != 0)
  {
    v9 = 0;
    *a6 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 1;
  }
  a6[8] = v9;
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::removeInterception@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, int a3@<W2>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, _BYTE *a6@<X8>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  __int16 v12;
  int v13;
  WTF::StringImpl **v14;

  v12 = 1;
  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v11 = v7;
  if (a4[1])
    LOBYTE(v12) = *a4;
  if (a5[1])
    HIBYTE(v12) = *a5;
  v13 = a3;
  v14 = &v11;
  if (WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<unsigned int WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAll<WebCore::InspectorNetworkAgent::Intercept>(WebCore::InspectorNetworkAgent::Intercept const&)::{lambda(WebCore::InspectorNetworkAgent::Intercept const&)#1}>((uint64_t *)(a1 + 104), (WTF::StringImpl *)&v14, 0))
  {
    v9 = 0;
    *a6 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 1;
  }
  a6[8] = v9;
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorNetworkAgent::removeInterception@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, int a3@<W2>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, _BYTE *a6@<X8>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  __int16 v12;
  int v13;
  WTF::StringImpl **v14;

  v12 = 1;
  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v11 = v7;
  if (a4[1])
    LOBYTE(v12) = *a4;
  if (a5[1])
    HIBYTE(v12) = *a5;
  v13 = a3;
  v14 = &v11;
  if (WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<unsigned int WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAll<WebCore::InspectorNetworkAgent::Intercept>(WebCore::InspectorNetworkAgent::Intercept const&)::{lambda(WebCore::InspectorNetworkAgent::Intercept const&)#1}>((uint64_t *)(a1 + 72), (WTF::StringImpl *)&v14, 0))
  {
    v9 = 0;
    *a6 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 1;
  }
  a6[8] = v9;
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorNetworkAgent::willIntercept(WebCore::InspectorNetworkAgent *this, const WebCore::ResourceRequest *a2)
{
  WTF::StringImpl *v4;
  __int128 v5;
  WTF::StringImpl *v6;
  uint64_t shouldIntercept;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;

  if (!*((_BYTE *)this + 179))
    return 0;
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  v4 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v4 += 2;
  v16 = v4;
  v5 = *(_OWORD *)((char *)a2 + 24);
  v17 = *(_OWORD *)((char *)a2 + 8);
  v18 = v5;
  if ((WebCore::InspectorNetworkAgent::shouldIntercept((uint64_t)this, (WTF::URL *)&v16, 200) & 1) != 0)
  {
    shouldIntercept = 1;
  }
  else
  {
    if ((*((_BYTE *)a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(a2);
      *((_BYTE *)a2 + 184) |= 1u;
    }
    v8 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v8 += 2;
    v13 = v8;
    v9 = *(_OWORD *)((char *)a2 + 24);
    v14 = *(_OWORD *)((char *)a2 + 8);
    v15 = v9;
    shouldIntercept = WebCore::InspectorNetworkAgent::shouldIntercept((uint64_t)this, (WTF::URL *)&v13, 201);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v6);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v6);
    else
      *(_DWORD *)v11 -= 2;
  }
  return shouldIntercept;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::interceptRequest(uint64_t a1, WebCore::ResourceLoader *a2, _QWORD *a3)
{
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  WTF **v16;
  WTF *v17;
  int v18;
  unsigned int v19;
  int v20;
  void *v21;
  const WTF::StringImpl *v22;
  WTF *v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF *v46;
  WTF::StringImpl **v47;
  WTF *v48;
  uint64_t v49;
  WTF **v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF *v55;
  uint64_t v56;
  _DWORD *v57;
  int i;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unsigned int v63;
  int v64;
  WTF *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  WTF::StringImpl *v70;
  _DWORD *v71;
  WTF::StringImpl *result;
  WTF *v73;
  uint64_t v74;
  _DWORD *v75;
  WTF *v76;
  WebCore::ResourceLoader *v77;
  uint64_t v78;
  _DWORD *v79;
  WTF::StringImpl *v80;

  Inspector::IdentifiersFactory::requestId(*((Inspector::IdentifiersFactory **)a2 + 93));
  v78 = a1;
  v9 = *(_QWORD *)(a1 + 120);
  v8 = (uint64_t *)(a1 + 120);
  v7 = v9;
  if (v9)
  {
    v10 = *(_DWORD *)(v78 + 128);
    v11 = v10 - 1;
    v12 = *(_DWORD *)(v78 + 136);
    v13 = *((_DWORD *)v80 + 4);
    if (v13 < 0x100)
    {
      v14 = WTF::StringImpl::hashSlowCase(v80);
      v7 = *v8;
    }
    else
    {
      v14 = v13 >> 8;
    }
    v15 = (v14 ^ v12) & v11;
    v16 = (WTF **)(v7 + 16 * v15);
    v17 = *v16;
    if (*v16)
    {
      v18 = -1;
      do
      {
        v19 = *((_DWORD *)v17 + 4);
        v20 = v19 < 0x100 ? WTF::StringImpl::hashSlowCase(v17) : v19 >> 8;
        if (++v18 > ((v15 + v10 - ((v20 ^ v12) & v11)) & v11))
          break;
        if (v20 == v14 && (WTF::equal(*v16, v80, v6) & 1) != 0)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, (uint64_t)a2 + 336);
          goto LABEL_75;
        }
        v15 = (v15 + 1) & v11;
        v16 = (WTF **)(*v8 + 16 * v15);
        v17 = *v16;
      }
      while (*v16);
    }
  }
  v23 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v24 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v24 + 2;
  *(_QWORD *)v23 = a2;
  v25 = *a3;
  *a3 = 0;
  *((_QWORD *)v23 + 1) = v25;
  v26 = __CFADD__(v24, 1);
  v27 = v24 + 1;
  if (v26)
    (*(void (**)(WebCore::ResourceLoader *))(*(_QWORD *)a2 + 8))(a2);
  else
    *((_DWORD *)a2 + 4) = v27;
  v29 = *(unsigned int *)(v78 + 128);
  v28 = *(unsigned int *)(v78 + 132);
  v76 = v23;
  if (10 * v28 >= (unint64_t)(9 * v29) || v29 <= 2 * (int)v28 && *(_BYTE *)(v78 + 140))
  {
    if ((_DWORD)v29)
      v30 = 2 * v29;
    else
      v30 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t)v8, v30);
    LODWORD(v29) = *(_DWORD *)(v78 + 128);
  }
  v31 = v29 - 1;
  v32 = *(_DWORD *)(v78 + 136);
  v33 = *((_DWORD *)v80 + 4);
  v77 = a2;
  if (v33 < 0x100)
    v34 = WTF::StringImpl::hashSlowCase(v80);
  else
    v34 = v33 >> 8;
  v35 = (v34 ^ v32) & v31;
  v36 = *v8;
  v37 = *v8 + 16 * v35;
  v38 = *(WTF **)v37;
  if (*(_QWORD *)v37)
  {
    v39 = 0;
    while (1)
    {
      v40 = *((_DWORD *)v38 + 4);
      v41 = v40 < 0x100 ? WTF::StringImpl::hashSlowCase(v38) : v40 >> 8;
      v42 = (v35 + v29 - ((v41 ^ v32) & v31)) & v31;
      if (v39 > v42)
        break;
      if (v41 == v34 && (WTF::equal(*(WTF **)v37, v80, v22) & 1) != 0)
      {
        v73 = *(WTF **)(v37 + 8);
        v47 = (WTF::StringImpl **)v77;
        *(_QWORD *)(v37 + 8) = v76;
        if (v73)
        {
          v74 = *((_QWORD *)v73 + 1);
          *((_QWORD *)v73 + 1) = 0;
          if (v74)
            (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
          v75 = *(_DWORD **)v73;
          *(_QWORD *)v73 = 0;
          if (v75)
          {
            if (v75[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v75 + 8))(v75);
            else
              --v75[4];
          }
          WTF::fastFree(v73, v21);
        }
        goto LABEL_72;
      }
      v36 = *v8;
      v35 = ((_DWORD)v35 + 1) & v31;
      ++v39;
      v37 = *v8 + 16 * v35;
      v38 = *(WTF **)v37;
      if (!*(_QWORD *)v37)
      {
        if (v39 < 0x80)
          goto LABEL_37;
        v43 = v78;
        *(_BYTE *)(v78 + 140) = 1;
        goto LABEL_38;
      }
    }
    if (v39 >= 0x80)
      *(_BYTE *)(v78 + 140) = 1;
    v48 = *(WTF **)v37;
    *(_QWORD *)v37 = 0;
    v49 = v36 + 16 * v35;
    v52 = *(_QWORD *)(v49 + 8);
    v50 = (WTF **)(v49 + 8);
    v51 = v52;
    *v50 = 0;
    v53 = *(WTF::StringImpl **)v37;
    *(_QWORD *)v37 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v53 -= 2;
    }
    *(_QWORD *)v37 = 0;
    *(_QWORD *)(v37 + 8) = 0;
    v54 = v80;
    if (v80)
      *(_DWORD *)v80 += 2;
    *(_QWORD *)v37 = v54;
    v55 = *v50;
    *v50 = v76;
    if (v55)
    {
      v56 = *((_QWORD *)v55 + 1);
      *((_QWORD *)v55 + 1) = 0;
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      v57 = *(_DWORD **)v55;
      *(_QWORD *)v55 = 0;
      if (v57)
      {
        if (v57[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v57 + 8))(v57);
        else
          --v57[4];
      }
      WTF::fastFree(v55, v21);
    }
    for (i = v35 + 1; ; i = v59 + 1)
    {
      v59 = i & v31;
      v60 = *v8;
      v61 = *v8 + 16 * v59;
      v62 = *(WTF::StringImpl **)v61;
      if (!*(_QWORD *)v61)
        break;
      v63 = *((_DWORD *)v62 + 4);
      if (v63 < 0x100)
        v64 = WTF::StringImpl::hashSlowCase(v62);
      else
        v64 = v63 >> 8;
      if (++v42 > (((_DWORD)v59 + (_DWORD)v29 - ((v64 ^ v32) & v31)) & v31))
      {
        v65 = *(WTF **)v61;
        v66 = *(_QWORD *)(v61 + 8);
        *(_QWORD *)v61 = v48;
        *(_QWORD *)(v61 + 8) = v51;
        v51 = v66;
        v48 = v65;
        v42 = (v59 + v29 - ((v64 ^ v32) & v31)) & v31;
      }
    }
    *(_QWORD *)v61 = v48;
    v67 = v60 + 16 * v59;
    v46 = *(WTF **)(v67 + 8);
    *(_QWORD *)(v67 + 8) = v51;
    v47 = (WTF::StringImpl **)v77;
    v43 = v78;
    if (!v46)
      goto LABEL_71;
  }
  else
  {
LABEL_37:
    v43 = v78;
LABEL_38:
    v44 = v80;
    if (v80)
      *(_DWORD *)v80 += 2;
    *(_QWORD *)v37 = v44;
    v45 = v36 + 16 * v35;
    v46 = *(WTF **)(v45 + 8);
    *(_QWORD *)(v45 + 8) = v76;
    v47 = (WTF::StringImpl **)v77;
    if (!v46)
      goto LABEL_71;
  }
  v68 = *((_QWORD *)v46 + 1);
  *((_QWORD *)v46 + 1) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = *(_DWORD **)v46;
  *(_QWORD *)v46 = 0;
  if (v69)
  {
    if (v69[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 8))(v69);
    else
      --v69[4];
  }
  WTF::fastFree(v46, v21);
LABEL_71:
  ++*(_DWORD *)(v43 + 132);
LABEL_72:
  WebCore::buildObjectForResourceRequest((WebCore *)&v79, v47 + 42, v47);
  Inspector::NetworkFrontendDispatcher::requestIntercepted();
  v71 = v79;
  v79 = 0;
  if (v71)
  {
    if (*v71 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v71;
  }
LABEL_75:
  result = v80;
  v80 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v70);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::interceptResponse(uint64_t a1, uint64_t a2, Inspector::IdentifiersFactory *this, uint64_t *a4)
{
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  WTF **v15;
  WTF *v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  WebCore::ResourceLoader *v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  const WebCore::ResourceResponse *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  WebCore::ResourceResponseBase *v54;
  uint64_t v55;
  const void *v56;
  WTF *v57;
  void *v58;
  WTF::StringImpl *v59;
  WebCore::ResourceResponseBase *v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  WTF *v64;
  void *v65;
  void *v66;
  WTF::StringImpl *result;
  WTF *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF *v79;
  uint64_t v81;
  const WebCore::ResourceResponse *v82;
  WTF::StringImpl *v84;
  WTF *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;

  Inspector::IdentifiersFactory::requestId(this);
  v8 = (uint64_t *)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 144);
  if (v7)
  {
    v9 = *(_DWORD *)(a1 + 152);
    v10 = v9 - 1;
    v11 = *(_DWORD *)(a1 + 160);
    v12 = *((_DWORD *)v86 + 4);
    if (v12 < 0x100)
    {
      v13 = WTF::StringImpl::hashSlowCase(v86);
      v7 = *v8;
    }
    else
    {
      v13 = v12 >> 8;
    }
    v14 = (v13 ^ v11) & v10;
    v15 = (WTF **)(v7 + 16 * v14);
    v16 = *v15;
    if (*v15)
    {
      v17 = -1;
      do
      {
        v18 = *((_DWORD *)v16 + 4);
        v19 = v18 < 0x100 ? WTF::StringImpl::hashSlowCase(v16) : v18 >> 8;
        if (++v17 > ((v14 + v9 - ((v19 ^ v11) & v10)) & v10))
          break;
        if (v19 == v13 && (WTF::equal(*v15, v86, v6) & 1) != 0)
        {
          v85 = 0;
          WTF::CompletionHandler<void ()(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>)>::operator()(a4, a2, &v85);
          v68 = v85;
          v85 = 0;
          if (v68)
          {
            do
            {
              v69 = __ldaxr((unsigned int *)v68);
              v70 = v69 - 1;
            }
            while (__stlxr(v70, (unsigned int *)v68));
            if (!v70)
            {
              atomic_store(1u, (unsigned int *)v68);
              v71 = *((unsigned int *)v68 + 5);
              if ((_DWORD)v71)
              {
                v72 = *((_QWORD *)v68 + 1);
                v73 = v72 + 16 * v71;
                do
                {
                  v74 = *(unsigned int **)(v72 + 8);
                  *(_QWORD *)(v72 + 8) = 0;
                  if (v74)
                  {
                    do
                    {
                      v75 = __ldaxr(v74);
                      v76 = v75 - 1;
                    }
                    while (__stlxr(v76, v74));
                    if (!v76)
                    {
                      atomic_store(1u, v74);
                      v77 = v74[6];
                      if ((_DWORD)v77 != -1)
                        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F09A8[v77])(&v87, v74 + 2);
                      v74[6] = -1;
                      WTF::fastFree((WTF *)v74, v66);
                    }
                  }
                  v72 += 16;
                }
                while (v72 != v73);
              }
              v79 = (WTF *)*((_QWORD *)v68 + 1);
              if ((WTF *)((char *)v68 + 24) != v79 && v79 != 0)
              {
                *((_QWORD *)v68 + 1) = 0;
                *((_DWORD *)v68 + 4) = 0;
                WTF::fastFree(v79, v66);
              }
              WTF::fastFree(v68, v66);
            }
          }
          goto LABEL_76;
        }
        v14 = (v14 + 1) & v10;
        v15 = (WTF **)(*v8 + 16 * v14);
        v16 = *v15;
      }
      while (*v15);
    }
  }
  v20 = WTF::fastMalloc((WTF *)0x110);
  v21 = (WebCore::ResourceLoader *)a2;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v20, (const WebCore::ResourceResponseBase *)a2);
  v24 = *(const void **)(a2 + 240);
  *(_QWORD *)(v20 + 240) = v24;
  if (v24)
    CFRetain(v24);
  *(_BYTE *)(v20 + 248) = *(_BYTE *)(a2 + 248);
  v25 = *a4;
  *a4 = 0;
  *(_QWORD *)(v20 + 256) = v25;
  *(_BYTE *)(v20 + 264) = 0;
  v27 = *(unsigned int *)(a1 + 152);
  v26 = *(unsigned int *)(a1 + 156);
  if (10 * v26 >= (unint64_t)(9 * v27) || v27 <= 2 * (int)v26 && *(_BYTE *)(a1 + 164))
  {
    if ((_DWORD)v27)
      v28 = 2 * v27;
    else
      v28 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1 + 144, v28);
    LODWORD(v27) = *(_DWORD *)(a1 + 152);
  }
  v29 = v27 - 1;
  v30 = *(_DWORD *)(a1 + 160);
  v31 = *((_DWORD *)v86 + 4);
  v82 = (const WebCore::ResourceResponse *)a1;
  if (v31 < 0x100)
    v32 = WTF::StringImpl::hashSlowCase(v86);
  else
    v32 = v31 >> 8;
  v33 = (v32 ^ v30) & v29;
  v34 = *v8;
  v35 = *v8 + 16 * v33;
  v36 = *(WTF **)v35;
  if (*(_QWORD *)v35)
  {
    v81 = v20;
    v37 = 0;
    while (1)
    {
      v38 = *((_DWORD *)v36 + 4);
      v39 = v38 < 0x100 ? WTF::StringImpl::hashSlowCase(v36) : v38 >> 8;
      v40 = (v33 + v27 - ((v39 ^ v30) & v29)) & v29;
      if (v37 > v40)
        break;
      if (v39 == v32 && (WTF::equal(*(WTF **)v35, v86, v23) & 1) != 0)
      {
        v54 = *(WebCore::ResourceResponseBase **)(v35 + 8);
        v41 = v82;
        *(_QWORD *)(v35 + 8) = v81;
        v21 = (WebCore::ResourceLoader *)a2;
        if (v54)
        {
          v55 = *((_QWORD *)v54 + 32);
          *((_QWORD *)v54 + 32) = 0;
          if (v55)
            (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
          v56 = (const void *)*((_QWORD *)v54 + 30);
          *((_QWORD *)v54 + 30) = 0;
          if (v56)
            CFRelease(v56);
          WebCore::ResourceResponseBase::~ResourceResponseBase(v54, v22);
          WTF::fastFree(v57, v58);
        }
        goto LABEL_73;
      }
      v34 = *v8;
      v33 = ((_DWORD)v33 + 1) & v29;
      ++v37;
      v35 = *v8 + 16 * v33;
      v36 = *(WTF **)v35;
      if (!*(_QWORD *)v35)
      {
        v41 = v82;
        if (v37 >= 0x80)
          *((_BYTE *)v82 + 164) = 1;
        v21 = (WebCore::ResourceLoader *)a2;
        v20 = v81;
        goto LABEL_61;
      }
    }
    if (v37 >= 0x80)
      *((_BYTE *)v82 + 164) = 1;
    v42 = *(WTF::StringImpl **)v35;
    *(_QWORD *)v35 = 0;
    v87 = v42;
    v43 = v34 + 16 * v33;
    v44 = *(_QWORD *)(v43 + 8);
    v88 = v44;
    *(_QWORD *)(v43 + 8) = 0;
    v45 = *(WTF::StringImpl **)v35;
    *(_QWORD *)v35 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
      {
        v78 = v42;
        WTF::StringImpl::destroy(v45, v22);
        v42 = v78;
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
    }
    *(_QWORD *)v35 = 0;
    *(_QWORD *)(v35 + 8) = 0;
    v46 = v86;
    if (v86)
      *(_DWORD *)v86 += 2;
    *(_QWORD *)v35 = v46;
    *(_QWORD *)(v35 + 8) = v81;
    v47 = *v8;
    v48 = ((_DWORD)v33 + 1) & v29;
    v49 = (WTF::StringImpl *)(*v8 + 16 * v48);
    v50 = *(WTF::StringImpl **)v49;
    if (*(_QWORD *)v49)
    {
      v41 = v82;
      do
      {
        v51 = *((_DWORD *)v50 + 4);
        if (v51 < 0x100)
          v52 = WTF::StringImpl::hashSlowCase(v50);
        else
          v52 = v51 >> 8;
        ++v40;
        v53 = (v48 + v27 - ((v52 ^ v30) & v29)) & v29;
        if (v40 > v53)
        {
          std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>(&v87, v49);
          v40 = v53;
        }
        v48 = ((_DWORD)v48 + 1) & v29;
        v47 = *v8;
        v49 = (WTF::StringImpl *)(*v8 + 16 * v48);
        v50 = *(WTF::StringImpl **)v49;
      }
      while (*(_QWORD *)v49);
      v42 = v87;
      v44 = v88;
    }
    else
    {
      v41 = v82;
    }
    *(_QWORD *)v49 = v42;
    v61 = v47 + 16 * v48;
    v60 = *(WebCore::ResourceResponseBase **)(v61 + 8);
    *(_QWORD *)(v61 + 8) = v44;
    v21 = (WebCore::ResourceLoader *)a2;
    if (!v60)
      goto LABEL_72;
    goto LABEL_67;
  }
  v41 = v82;
LABEL_61:
  v59 = v86;
  if (v86)
    *(_DWORD *)v86 += 2;
  v60 = *(WebCore::ResourceResponseBase **)(v35 + 8);
  *(_QWORD *)v35 = v59;
  *(_QWORD *)(v35 + 8) = v20;
  if (v60)
  {
LABEL_67:
    v62 = *((_QWORD *)v60 + 32);
    *((_QWORD *)v60 + 32) = 0;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    v63 = (const void *)*((_QWORD *)v60 + 30);
    *((_QWORD *)v60 + 30) = 0;
    if (v63)
      CFRelease(v63);
    WebCore::ResourceResponseBase::~ResourceResponseBase(v60, v22);
    WTF::fastFree(v64, v65);
  }
LABEL_72:
  ++*((_DWORD *)v41 + 39);
LABEL_73:
  WebCore::InspectorNetworkAgent::buildObjectForResourceResponse((WTF::JSONImpl::Object *)&v87, v41, v21, 0);
  if (v87)
  {
    v84 = v87;
    Inspector::NetworkFrontendDispatcher::responseIntercepted();
    if (*(_DWORD *)v84 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v84;
  }
LABEL_76:
  result = v86;
  v86 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v66);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>)>::operator()(uint64_t *a1, uint64_t a2, WTF **a3)
{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  char v25;

  v3 = *a1;
  *a1 = 0;
  v4 = *a3;
  *a3 = 0;
  v24 = v4;
  (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, a2, &v24);
  v6 = v24;
  v24 = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v10 = *((unsigned int *)v6 + 5);
      if ((_DWORD)v10)
      {
        v11 = *((_QWORD *)v6 + 1);
        v12 = v11 + 16 * v10;
        do
        {
          v13 = *(unsigned int **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v19 = v12;
              v20 = v11;
              v21 = (WTF *)v13;
              v22 = v6;
              atomic_store(1u, v13);
              v16 = v13[6];
              if ((_DWORD)v16 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F09A8[v16])(&v25, v13 + 2);
              *((_DWORD *)v21 + 6) = -1;
              WTF::fastFree(v21, v5);
              v6 = v22;
              v12 = v19;
              v11 = v20;
            }
          }
          v11 += 16;
        }
        while (v11 != v12);
      }
      v17 = (WTF *)*((_QWORD *)v6 + 1);
      if ((WTF *)((char *)v6 + 24) != v17 && v17 != 0)
      {
        *((_QWORD *)v6 + 1) = 0;
        *((_DWORD *)v6 + 4) = 0;
        v23 = v6;
        WTF::fastFree(v17, v5);
        v6 = v23;
      }
      WTF::fastFree(v6, v5);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebCore::InspectorNetworkAgent::interceptContinue@<X0>(uint64_t result@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  _QWORD *v11;
  _DWORD *v12;
  WTF *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  const void *v20;

  v4 = result;
  if ((_DWORD)a3 == 201)
  {
    v14 = (_QWORD *)(result + 144);
    v15 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(result + 144), a2, a3);
    v16 = *(unsigned int *)(v4 + 152);
    if (*(_QWORD *)(v4 + 144) + 16 * v16 != v15)
    {
      v17 = *(WTF **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      if (*v14 + 16 * v16 != v15)
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)v14, (WTF::StringImpl **)v15);
      if (v17)
      {
        WebCore::InspectorNetworkAgent::PendingInterceptResponse::respond(v17, (uint64_t)v17, 0);
        *a4 = 0;
        a4[8] = 0;
        v19 = *((_QWORD *)v17 + 32);
        *((_QWORD *)v17 + 32) = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v20 = (const void *)*((_QWORD *)v17 + 30);
        *((_QWORD *)v17 + 30) = 0;
        if (v20)
          CFRelease(v20);
        WebCore::ResourceResponseBase::~ResourceResponseBase(v17, v18);
        return WTF::fastFree(v13, v9);
      }
    }
  }
  else
  {
    if ((_DWORD)a3 != 200)
    {
      *a4 = 0;
      a4[8] = 0;
      return result;
    }
    v6 = (_QWORD *)(result + 120);
    v7 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(result + 120), a2, a3);
    v8 = *(unsigned int *)(v4 + 128);
    if (*(_QWORD *)(v4 + 120) + 16 * v8 != v7)
    {
      v9 = (void *)v7;
      v10 = *(WTF **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (*v6 + 16 * v8 != v7)
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)v6, (WTF::StringImpl **)v7);
      if (v10)
      {
        if (!*(_BYTE *)(*(_QWORD *)v10 + 752))
          (*(void (**)(_QWORD *, uint64_t))(**((_QWORD **)v10 + 1) + 16))(*((_QWORD **)v10 + 1), *(_QWORD *)v10 + 336);
        *a4 = 0;
        a4[8] = 0;
        v11 = (_QWORD *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v11)
          (*(void (**)(_QWORD *, void *))(*v11 + 8))(v11, v9);
        v12 = *(_DWORD **)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
        {
          if (v12[4] == 1)
            (*(void (**)(_DWORD *, void *))(*(_QWORD *)v12 + 8))(v12, v9);
          else
            --v12[4];
        }
        v13 = v10;
        return WTF::fastFree(v13, v9);
      }
    }
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  a4[8] = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorNetworkAgent::interceptContinue@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorNetworkAgent::interceptContinue(a1 - 32, a2, a3, a4);
}

uint64_t WebCore::InspectorNetworkAgent::interceptWithRequest@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, const WTF::StringImpl **a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  _DWORD *v20;
  WebCore::FormData *v21;
  uint64_t v22;
  const void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  uint64_t result;
  WTF::StringImpl **v34;
  __int128 v35;
  WTF::StringImpl *v36;
  WTF::StringImpl **v37;
  WTF *v38;
  WTF *v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  WTF *v43;
  WTF::StringImpl *v44;
  int v45;
  void *v46;
  WebCore::FormData *v47;
  WebCore::FormData *v48;
  WTF *v49;
  void *v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  bmalloc::api *v56;
  void *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[2];
  WTF *v62;
  unint64_t v63;
  WTF::StringImpl *v64[5];
  _BYTE v65[40];
  WTF::StringImpl *v66;
  __int128 v67;
  __int128 v68;
  WTF *v69;
  uint64_t v70;
  WTF *v71;
  unsigned int v72;
  unsigned int v73;
  char v74;
  _DWORD *v75;
  _DWORD *v76;
  WebCore::FormData *v77;
  uint64_t v78;
  char v79;
  const void *v80;

  v13 = (_QWORD *)(a1 + 120);
  v14 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 120), a2, a3);
  v15 = *(unsigned int *)(a1 + 128);
  if (*(_QWORD *)(a1 + 120) + 16 * v15 == v14)
    goto LABEL_37;
  v16 = *(WTF **)(v14 + 8);
  *(_QWORD *)(v14 + 8) = 0;
  if (*v13 + 16 * v15 != v14)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)v13, (WTF::StringImpl **)v14);
  if (!v16)
  {
LABEL_37:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    a7[8] = 1;
    return result;
  }
  v17 = *(_QWORD *)v16;
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v66, (const WebCore::ResourceRequestBase::RequestData *)(*(_QWORD *)v16 + 336));
  v19 = *(_DWORD **)(v17 + 488);
  if (v19)
    *v19 += 2;
  v75 = v19;
  v20 = *(_DWORD **)(v17 + 496);
  if (v20)
    *v20 += 2;
  v76 = v20;
  v21 = *(WebCore::FormData **)(v17 + 504);
  if (v21)
    ++*(_DWORD *)v21;
  v22 = *(_QWORD *)(v17 + 512);
  v77 = v21;
  v78 = v22;
  v79 = *(_BYTE *)(v17 + 520);
  v23 = *(const void **)(v17 + 528);
  v80 = v23;
  if (v23)
    CFRetain(v23);
  if (*(_QWORD *)a3)
  {
    v64[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v64);
    MEMORY[0x19AEA52F8](v65, v64, a3, 0);
    if ((v79 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v66);
      v79 |= 1u;
    }
    v24 = *(WTF::StringImpl **)v65;
    if (*(_QWORD *)v65)
      **(_DWORD **)v65 += 2;
    v25 = v66;
    v66 = v24;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v18);
        v24 = *(WTF::StringImpl **)v65;
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    v67 = *(_OWORD *)&v65[8];
    v68 = *(_OWORD *)&v65[24];
    v74 &= ~0x20u;
    v79 &= ~2u;
    *(_QWORD *)v65 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v18);
      else
        *(_DWORD *)v24 -= 2;
    }
    v26 = v64[0];
    v64[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v18);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  if (*a4)
    WebCore::ResourceRequestBase::setHTTPMethod(&v66, a4);
  v27 = *a5;
  if (*a5)
  {
    memset(v65, 0, 32);
    v28 = *(WTF::StringImpl ***)(v27 + 16);
    if (v28)
    {
      v29 = *((unsigned int *)v28 - 1);
      v30 = &v28[2 * v29];
      if (*((_DWORD *)v28 - 3))
      {
        v31 = v28;
        if ((_DWORD)v29)
        {
          v32 = 16 * v29;
          v31 = v28;
          while ((unint64_t)*v31 + 1 <= 1)
          {
            v31 += 2;
            v32 -= 16;
            if (!v32)
            {
              v31 = v30;
              goto LABEL_41;
            }
          }
        }
        goto LABEL_41;
      }
      v31 = &v28[2 * v29];
    }
    else
    {
      v31 = 0;
      v29 = 0;
    }
    v30 = &v28[2 * v29];
LABEL_41:
    if (v28)
      v34 = &v28[2 * *((unsigned int *)v28 - 1)];
    else
      v34 = 0;
    if (v34 == v31)
    {
      v41 = 0;
      v40 = 0;
      v39 = 0;
      v38 = 0;
      v35 = 0uLL;
    }
    else
    {
      do
      {
        WTF::JSONImpl::Value::asString(v31[1]);
        if (v64[0])
        {
          WebCore::HTTPHeaderMap::add((WebCore::HTTPHeaderMap *)v65, v31, (const WTF::String *)v64);
          v36 = v64[0];
          v64[0] = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v18);
            else
              *(_DWORD *)v36 -= 2;
          }
        }
        v37 = v31 + 2;
        v31 = v30;
        if (v37 != v30)
        {
          v31 = v37;
          while ((unint64_t)*v31 + 1 <= 1)
          {
            v31 += 2;
            if (v31 == v30)
            {
              v31 = v30;
              break;
            }
          }
        }
      }
      while (v31 != v34);
      v38 = *(WTF **)v65;
      *(_QWORD *)&v35 = *(_QWORD *)&v65[8];
      v39 = *(WTF **)&v65[16];
      v40 = *(_DWORD *)&v65[24];
      v41 = *(_DWORD *)&v65[28];
    }
    memset(v65, 0, 32);
    v61[0] = v38;
    v62 = v39;
    v63 = __PAIR64__(v41, v40);
    if ((v79 & 1) == 0)
    {
      v60 = v35;
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v66);
      v35 = v60;
      v79 |= 1u;
    }
    if (HIDWORD(v70))
    {
      v53 = 16 * HIDWORD(v70);
      v54 = (WTF::StringImpl **)((char *)v69 + 8);
      do
      {
        v55 = *v54;
        *v54 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            v59 = v35;
            WTF::StringImpl::destroy(v55, v18);
            v35 = v59;
          }
          else
          {
            *(_DWORD *)v55 -= 2;
          }
        }
        v54 += 2;
        v53 -= 16;
      }
      while (v53);
    }
    v42 = v69;
    if (v69)
    {
      v69 = 0;
      LODWORD(v70) = 0;
      v58 = v35;
      WTF::fastFree(v42, v18);
      *(_QWORD *)&v35 = v58;
    }
    v61[0] = 0;
    v61[1] = 0;
    v69 = v38;
    v70 = v35;
    if (v73)
      WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(v71, (WTF *)((char *)v71 + 16 * v73));
    v43 = v71;
    if (v71)
    {
      v71 = 0;
      v72 = 0;
      WTF::fastFree(v43, v18);
    }
    v62 = 0;
    v63 = 0;
    v71 = v39;
    v72 = v40;
    v73 = v41;
    v79 &= ~2u;
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)v61, v18);
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)v65, v44);
  }
  if (!*a6)
    goto LABEL_81;
  WTF::base64Decode();
  v45 = v65[16];
  if (v65[16])
  {
    WebCore::FormData::create((uint64_t *)v65, (uint64_t *)v64);
    v47 = v64[0];
    if ((v79 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v66);
      v79 |= 1u;
    }
    v48 = v77;
    v77 = v47;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
      {
        WebCore::FormData::~FormData(v48, v46);
        bmalloc::api::isoDeallocate(v56, v57);
      }
      else
      {
        --*(_DWORD *)v48;
      }
    }
    v79 = v79 & 0xF3 | 4;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    a7[8] = 1;
  }
  if (v65[16])
  {
    v49 = *(WTF **)v65;
    if (*(_QWORD *)v65)
    {
      *(_QWORD *)v65 = 0;
      *(_DWORD *)&v65[8] = 0;
      WTF::fastFree(v49, v46);
    }
  }
  if (v45)
  {
LABEL_81:
    (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)v16 + 1) + 16))(*((_QWORD *)v16 + 1), &v66);
    *a7 = 0;
    a7[8] = 0;
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v66, v46);
  v51 = *((_QWORD *)v16 + 1);
  *((_QWORD *)v16 + 1) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *(_DWORD **)v16;
  *(_QWORD *)v16 = 0;
  if (v52)
  {
    if (v52[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[4];
  }
  return WTF::fastFree(v16, v50);
}

uint64_t `non-virtual thunk to'WebCore::InspectorNetworkAgent::interceptWithRequest@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, const WTF::StringImpl **a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X5>, _BYTE *a7@<X8>)
{
  return WebCore::InspectorNetworkAgent::interceptWithRequest(a1 - 32, a2, a3, a4, a5, a6, a7);
}

uint64_t WebCore::InspectorNetworkAgent::interceptWithResponse@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, int a4@<W3>, WTF::StringImpl **a5@<X4>, int *a6@<X5>, WTF::StringImpl **a7@<X6>, uint64_t *a8@<X7>, _BYTE *a9@<X8>)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  uint64_t result;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  uint64_t v46;
  void *v47;
  WTF *v48;
  void *v49;
  void *v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  WTF *v58;
  WTF *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  CFTypeRef v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  const void *v68;
  WTF *v69;
  void *v70;
  uint64_t v71;
  WTF::StringImpl **v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  WTF *v90;
  WTF *v92;
  WTF *v93[2];
  __int128 v94;
  _BYTE v95[40];
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF *v98;
  WTF *v99;
  WTF *v100;
  uint64_t v101;
  __int16 v102;
  char v103;
  __int16 v104;
  CFTypeRef cf;
  char v106;
  WTF::StringImpl *v107;

  v16 = (_QWORD *)(a1 + 144);
  v17 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 144), a2, a3);
  v18 = *(unsigned int *)(a1 + 152);
  if (*(_QWORD *)(a1 + 144) + 16 * v18 == v17)
    goto LABEL_25;
  v19 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v17 + 8) = 0;
  if (*v16 + 16 * v18 != v17)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)v16, (WTF::StringImpl **)v17);
  if (!v19)
  {
LABEL_25:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    a9[8] = 1;
    return result;
  }
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v95, (const WebCore::ResourceResponseBase *)v19);
  v20 = *(const void **)(v19 + 240);
  cf = v20;
  if (v20)
    CFRetain(v20);
  v106 = *(_BYTE *)(v19 + 248);
  v104 = v104 & 0xC3FF | 0x2400;
  if (*((_BYTE *)a6 + 4))
  {
    v21 = *a6;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v95, 1);
    v102 = v21;
    v103 &= ~1u;
  }
  v22 = *a7;
  if (v22)
  {
    *(_DWORD *)v22 += 2;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v95, 2);
    v24 = v97;
    v97 = v22;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v25 = *a5;
  if (v25)
  {
    *(_DWORD *)v25 += 2;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v95, 1);
    v103 &= ~1u;
    v27 = v96;
    v96 = v25;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  v28 = *a8;
  if (*a8)
  {
    *(_OWORD *)v93 = 0u;
    v94 = 0u;
    v29 = *(WTF::StringImpl ***)(v28 + 16);
    if (v29)
    {
      v30 = *((unsigned int *)v29 - 1);
      v31 = &v29[2 * v30];
      if (*((_DWORD *)v29 - 3))
      {
        v32 = v29;
        if ((_DWORD)v30)
        {
          v33 = 16 * v30;
          v32 = v29;
          while ((unint64_t)*v32 + 1 <= 1)
          {
            v32 += 2;
            v33 -= 16;
            if (!v33)
            {
              v32 = v31;
              goto LABEL_29;
            }
          }
        }
        goto LABEL_29;
      }
      v32 = &v29[2 * v30];
    }
    else
    {
      v32 = 0;
      v30 = 0;
    }
    v31 = &v29[2 * v30];
LABEL_29:
    if (v29)
      v35 = &v29[2 * *((unsigned int *)v29 - 1)];
    else
      v35 = 0;
    while (v32 != v35)
    {
      WTF::JSONImpl::Value::asString(v32[1]);
      if (v107)
      {
        WebCore::HTTPHeaderMap::add((WebCore::HTTPHeaderMap *)v93, v32, (const WTF::String *)&v107);
        v37 = v107;
        v107 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v36);
          else
            *(_DWORD *)v37 -= 2;
        }
      }
      v38 = v32 + 2;
      v32 = v31;
      if (v38 != v31)
      {
        v32 = v38;
        while ((unint64_t)*v32 + 1 <= 1)
        {
          v32 += 2;
          if (v32 == v31)
          {
            v32 = v31;
            break;
          }
        }
      }
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v95, 2);
    if (HIDWORD(v99))
    {
      v71 = 16 * HIDWORD(v99);
      v72 = (WTF::StringImpl **)((char *)v98 + 8);
      do
      {
        v73 = *v72;
        *v72 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2)
            WTF::StringImpl::destroy(v73, v39);
          else
            *(_DWORD *)v73 -= 2;
        }
        v72 += 2;
        v71 -= 16;
      }
      while (v71);
    }
    v40 = v98;
    if (v98)
    {
      v98 = 0;
      LODWORD(v99) = 0;
      WTF::fastFree(v40, v39);
    }
    v98 = v93[0];
    v41 = v93[1];
    v93[0] = 0;
    v93[1] = 0;
    v99 = v41;
    if (HIDWORD(v101))
      WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(v100, (WTF *)((char *)v100 + 16 * HIDWORD(v101)));
    v42 = v100;
    if (v100)
    {
      v100 = 0;
      LODWORD(v101) = 0;
      WTF::fastFree(v42, v39);
    }
    v43 = *((_QWORD *)&v94 + 1);
    v100 = (WTF *)v94;
    v94 = 0uLL;
    v101 = v43;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v95, 1);
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v95, 2);
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)&v98, (WTF::StringImpl *)0x1A, &v96);
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)v93, v44);
  }
  if (a4)
  {
    WTF::base64Decode();
    v45 = v94;
    if ((_BYTE)v94)
    {
      WebCore::FragmentedSharedBuffer::create(v93, (uint64_t *)&v107);
      v46 = WTF::fastMalloc((WTF *)0x38);
      v92 = (WTF *)WebCore::SharedBuffer::SharedBuffer(v46, (uint64_t *)&v107);
      WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v107, v47);
      v48 = v92;
      v92 = 0;
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v92, v49);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v48 = 0;
      a9[8] = 1;
    }
    if ((_BYTE)v94)
    {
      v59 = v93[0];
      if (v93[0])
      {
        v93[0] = 0;
        LODWORD(v93[1]) = 0;
        WTF::fastFree(v59, v50);
      }
    }
    if (!v45)
      goto LABEL_73;
LABEL_67:
    if (v48)
      goto LABEL_68;
    goto LABEL_93;
  }
  WTF::String::utf8();
  if (v92)
  {
    v51 = (WTF *)((char *)v92 + 16);
    v52 = (WTF *)*((_QWORD *)v92 + 1);
  }
  else
  {
    v52 = 0;
    v51 = 0;
  }
  v53 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v53 = 1;
  *(_QWORD *)(v53 + 8) = v53 + 24;
  *(_QWORD *)(v53 + 16) = 1;
  *(_BYTE *)(v53 + 40) = 0;
  *(_QWORD *)(v53 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append(v53, v51, v52);
  v93[0] = (WTF *)v53;
  v54 = WTF::fastMalloc((WTF *)0x38);
  v107 = (WTF::StringImpl *)WebCore::SharedBuffer::SharedBuffer(v54, (uint64_t *)v93);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)v93, v55);
  v48 = v107;
  v107 = 0;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v107, v56);
  v58 = v92;
  v92 = 0;
  if (!v58)
    goto LABEL_67;
  if (*(_DWORD *)v58 == 1)
  {
    WTF::fastFree(v58, v57);
    if (v48)
    {
      do
LABEL_68:
        v60 = __ldaxr((unsigned int *)v48);
      while (__stlxr(v60 + 1, (unsigned int *)v48));
      WebCore::InspectorNetworkAgent::PendingInterceptResponse::respond((WTF *)v19, (uint64_t)v95, (unsigned int *)v48);
      do
      {
        v61 = __ldaxr((unsigned int *)v48);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, (unsigned int *)v48));
      if (!v62)
      {
        atomic_store(1u, (unsigned int *)v48);
        v83 = *((unsigned int *)v48 + 5);
        if ((_DWORD)v83)
        {
          v84 = *((_QWORD *)v48 + 1);
          v85 = v84 + 16 * v83;
          do
          {
            v86 = *(unsigned int **)(v84 + 8);
            *(_QWORD *)(v84 + 8) = 0;
            if (v86)
            {
              do
              {
                v87 = __ldaxr(v86);
                v88 = v87 - 1;
              }
              while (__stlxr(v88, v86));
              if (!v88)
              {
                atomic_store(1u, v86);
                v89 = v86[6];
                if ((_DWORD)v89 != -1)
                  ((void (*)(WTF **, unsigned int *))off_1E33F09A8[v89])(v93, v86 + 2);
                v86[6] = -1;
                WTF::fastFree((WTF *)v86, v50);
              }
            }
            v84 += 16;
          }
          while (v84 != v85);
        }
        v90 = (WTF *)*((_QWORD *)v48 + 1);
        if ((WTF *)((char *)v48 + 24) != v90 && v90 != 0)
        {
          *((_QWORD *)v48 + 1) = 0;
          *((_DWORD *)v48 + 4) = 0;
          WTF::fastFree(v90, v50);
        }
        WTF::fastFree(v48, v50);
      }
      goto LABEL_72;
    }
  }
  else
  {
    --*(_DWORD *)v58;
    if (v48)
      goto LABEL_68;
  }
LABEL_93:
  WebCore::InspectorNetworkAgent::PendingInterceptResponse::respond((WTF *)v19, (uint64_t)v95, 0);
LABEL_72:
  *a9 = 0;
  a9[8] = 0;
LABEL_73:
  if (v48)
  {
    do
    {
      v63 = __ldaxr((unsigned int *)v48);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, (unsigned int *)v48));
    if (!v64)
    {
      atomic_store(1u, (unsigned int *)v48);
      v74 = *((unsigned int *)v48 + 5);
      if ((_DWORD)v74)
      {
        v75 = *((_QWORD *)v48 + 1);
        v76 = v75 + 16 * v74;
        do
        {
          v77 = *(unsigned int **)(v75 + 8);
          *(_QWORD *)(v75 + 8) = 0;
          if (v77)
          {
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
            {
              atomic_store(1u, v77);
              v80 = v77[6];
              if ((_DWORD)v80 != -1)
                ((void (*)(WTF **, unsigned int *))off_1E33F09A8[v80])(v93, v77 + 2);
              v77[6] = -1;
              WTF::fastFree((WTF *)v77, v50);
            }
          }
          v75 += 16;
        }
        while (v75 != v76);
      }
      v81 = (WTF *)*((_QWORD *)v48 + 1);
      if ((WTF *)((char *)v48 + 24) != v81 && v81 != 0)
      {
        *((_QWORD *)v48 + 1) = 0;
        *((_DWORD *)v48 + 4) = 0;
        WTF::fastFree(v81, v50);
      }
      WTF::fastFree(v48, v50);
    }
  }
  v65 = cf;
  cf = 0;
  if (v65)
    CFRelease(v65);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v95, (WTF::StringImpl *)v50);
  v67 = *(_QWORD *)(v19 + 256);
  *(_QWORD *)(v19 + 256) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *(const void **)(v19 + 240);
  *(_QWORD *)(v19 + 240) = 0;
  if (v68)
    CFRelease(v68);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v19, v66);
  return WTF::fastFree(v69, v70);
}

WTF *WebCore::InspectorNetworkAgent::PendingInterceptResponse::respond(WTF *result, uint64_t a2, unsigned int *a3)
{
  uint64_t *v3;
  unsigned int v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  char v23;

  if (!*((_BYTE *)result + 264))
  {
    *((_BYTE *)result + 264) = 1;
    v3 = (uint64_t *)((char *)result + 256);
    if (a3)
    {
      do
        v4 = __ldaxr(a3);
      while (__stlxr(v4 + 1, a3));
    }
    v22 = (WTF *)a3;
    WTF::CompletionHandler<void ()(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>)>::operator()(v3, a2, &v22);
    result = v22;
    v22 = 0;
    if (result)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)result);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)result));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)result);
        v8 = *((unsigned int *)result + 5);
        if ((_DWORD)v8)
        {
          v9 = *((_QWORD *)result + 1);
          v10 = v9 + 16 * v8;
          do
          {
            v11 = *(unsigned int **)(v9 + 8);
            *(_QWORD *)(v9 + 8) = 0;
            if (v11)
            {
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
              {
                v17 = v10;
                v18 = v9;
                v19 = (WTF *)v11;
                v20 = result;
                atomic_store(1u, v11);
                v14 = v11[6];
                if ((_DWORD)v14 != -1)
                  ((void (*)(char *, unsigned int *))off_1E33F09A8[v14])(&v23, v11 + 2);
                *((_DWORD *)v19 + 6) = -1;
                WTF::fastFree(v19, v5);
                result = v20;
                v10 = v17;
                v9 = v18;
              }
            }
            v9 += 16;
          }
          while (v9 != v10);
        }
        v15 = (WTF *)*((_QWORD *)result + 1);
        if ((WTF *)((char *)result + 24) != v15 && v15 != 0)
        {
          *((_QWORD *)result + 1) = 0;
          *((_DWORD *)result + 4) = 0;
          v21 = result;
          WTF::fastFree(v15, v5);
          result = v21;
        }
        return (WTF *)WTF::fastFree(result, v5);
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorNetworkAgent::interceptWithResponse@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, int a4@<W3>, WTF::StringImpl **a5@<X4>, int *a6@<X5>, WTF::StringImpl **a7@<X6>, uint64_t *a8@<X7>, _BYTE *a9@<X8>)
{
  return WebCore::InspectorNetworkAgent::interceptWithResponse(a1 - 32, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t WebCore::InspectorNetworkAgent::interceptRequestWithResponse@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, int a4@<W3>, WTF::StringImpl **a5@<X4>, __int16 a6@<W5>, WTF::StringImpl **a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  _DWORD *v20;
  void *v21;
  uint64_t result;
  int v23;
  uint64_t v24;
  void *v25;
  WTF::StringImpl *v26;
  void *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  _DWORD *v37;
  WTF **v38;
  WTF::StringImpl *v39;
  WTF *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  WTF *v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  _QWORD *v59;
  void *v60;
  _QWORD *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  CFTypeRef v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  WTF *v80;
  WTF::StringImpl *v82;
  uint64_t v83;
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  WTF *v87;
  __int128 v88;
  __int128 v89;
  WTF::StringImpl *v90[2];
  WTF::StringImpl *v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  char v96;
  __int16 v97;
  char v98;
  int64x2_t v99;
  int64x2_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int64x2_t v104;
  uint64_t v105;
  char v106;
  __int16 v107;
  char v108;
  CFTypeRef cf;
  char v110;

  v16 = (_QWORD *)(a1 + 120);
  v17 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 120), a2, a3);
  v18 = *(unsigned int *)(a1 + 128);
  if (*(_QWORD *)(a1 + 120) + 16 * v18 == v17)
    goto LABEL_9;
  v19 = *(WTF **)(v17 + 8);
  *(_QWORD *)(v17 + 8) = 0;
  if (*v16 + 16 * v18 != v17)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)v16, (WTF::StringImpl **)v17);
  if (!v19)
  {
LABEL_9:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    a9[8] = 1;
    return result;
  }
  v20 = *(_DWORD **)v19;
  if (*(_QWORD *)v19)
    ++v20[4];
  if (!*((_BYTE *)v20 + 752))
  {
    if (a4)
    {
      WTF::base64Decode();
      v23 = BYTE8(v88);
      if (BYTE8(v88))
      {
        WebCore::FragmentedSharedBuffer::create(&v87, (uint64_t *)&v85);
        v24 = WTF::fastMalloc((WTF *)0x38);
        v82 = (WTF::StringImpl *)WebCore::SharedBuffer::SharedBuffer(v24, (uint64_t *)&v85);
        WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v85, v25);
        v26 = v82;
        v82 = 0;
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v82, v27);
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v26 = 0;
        a9[8] = 1;
      }
      if (BYTE8(v88))
      {
        v36 = v87;
        if (v87)
        {
          v87 = 0;
          LODWORD(v88) = 0;
          WTF::fastFree(v36, v21);
        }
      }
      if (!v23)
      {
        if (v26)
        {
          do
          {
            v71 = __ldaxr((unsigned int *)v26);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, (unsigned int *)v26));
          if (!v72)
          {
            atomic_store(1u, (unsigned int *)v26);
            v73 = *((unsigned int *)v26 + 5);
            if ((_DWORD)v73)
            {
              v74 = *((_QWORD *)v26 + 1);
              v75 = v74 + 16 * v73;
              do
              {
                v76 = *(unsigned int **)(v74 + 8);
                *(_QWORD *)(v74 + 8) = 0;
                if (v76)
                {
                  do
                  {
                    v77 = __ldaxr(v76);
                    v78 = v77 - 1;
                  }
                  while (__stlxr(v78, v76));
                  if (!v78)
                  {
                    atomic_store(1u, v76);
                    v79 = v76[6];
                    if ((_DWORD)v79 != -1)
                      ((void (*)(WTF **, unsigned int *))off_1E33F09A8[v79])(&v87, v76 + 2);
                    v76[6] = -1;
                    WTF::fastFree((WTF *)v76, v21);
                  }
                }
                v74 += 16;
              }
              while (v74 != v75);
            }
            v80 = (WTF *)*((_QWORD *)v26 + 1);
            if ((WTF::StringImpl *)((char *)v26 + 24) != v80 && v80 != 0)
            {
              *((_QWORD *)v26 + 1) = 0;
              *((_DWORD *)v26 + 4) = 0;
              WTF::fastFree(v80, v21);
            }
            WTF::fastFree(v26, v21);
            if (!v20)
              goto LABEL_79;
          }
        }
        goto LABEL_77;
      }
    }
    else
    {
      WTF::String::utf8();
      if (v82)
      {
        v28 = (WTF::StringImpl *)((char *)v82 + 16);
        v29 = (WTF *)*((_QWORD *)v82 + 1);
      }
      else
      {
        v29 = 0;
        v28 = 0;
      }
      v30 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = v30 + 24;
      *(_QWORD *)(v30 + 16) = 1;
      *(_BYTE *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      WebCore::FragmentedSharedBuffer::append(v30, v28, v29);
      v87 = (WTF *)v30;
      v31 = WTF::fastMalloc((WTF *)0x38);
      *(_QWORD *)&v85 = WebCore::SharedBuffer::SharedBuffer(v31, (uint64_t *)&v87);
      WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v87, v32);
      v26 = (WTF::StringImpl *)v85;
      *(_QWORD *)&v85 = 0;
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v85, v33);
      v35 = v82;
      v82 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 1)
          WTF::fastFree(v35, v34);
        else
          --*(_DWORD *)v35;
      }
    }
    v37 = *(_DWORD **)v19;
    v38 = (WTF **)(*(_QWORD *)v19 + 336);
    if ((*(_BYTE *)(*(_QWORD *)v19 + 520) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(*(_QWORD *)v19 + 336));
      *((_BYTE *)v37 + 520) |= 1u;
    }
    v39 = (WTF::StringImpl *)*((_QWORD *)v26 + 6);
    v40 = *v38;
    if (*v38)
      *(_DWORD *)v40 += 2;
    v87 = v40;
    v88 = *(_OWORD *)(v37 + 86);
    v89 = *(_OWORD *)(v37 + 90);
    v41 = *a5;
    if (*a5)
      *(_DWORD *)v41 += 2;
    v90[0] = v41;
    v90[1] = v39;
    *(_OWORD *)v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    v95 = 0;
    v96 = 1;
    v97 = 0;
    v99 = vdupq_n_s64(0x7FF8000000000000uLL);
    v100 = v99;
    v101 = 0;
    v102 = 0;
    v104 = v99;
    v103 = 0x8000000000000000;
    v105 = 0x7FF8000000000000;
    v106 &= 0xF0u;
    v108 = v108 & 0xF8 | 2;
    cf = 0;
    v110 = 0;
    v98 = v98 & 0xC0 | 4;
    v107 = v107 & 0xC000 | 0x2400;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)&v87, 1);
    v97 = a6;
    v98 &= ~1u;
    v42 = *a7;
    if (v42)
      *(_DWORD *)v42 += 2;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)&v87, 2);
    v44 = v91[1];
    v91[1] = v42;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v43);
      else
        *(_DWORD *)v44 -= 2;
    }
    v85 = 0u;
    v86 = 0u;
    v45 = *(WTF::StringImpl ***)(*(_QWORD *)a8 + 16);
    if (v45)
    {
      v46 = *((unsigned int *)v45 - 1);
      v47 = &v45[2 * v46];
      if (*((_DWORD *)v45 - 3))
      {
        v48 = *(WTF::StringImpl ***)(*(_QWORD *)a8 + 16);
        if ((_DWORD)v46)
        {
          v49 = 16 * v46;
          v48 = v45;
          while ((unint64_t)*v48 + 1 <= 1)
          {
            v48 += 2;
            v49 -= 16;
            if (!v49)
            {
              v48 = v47;
              goto LABEL_44;
            }
          }
        }
        goto LABEL_44;
      }
      v48 = &v45[2 * v46];
    }
    else
    {
      v48 = 0;
      v46 = 0;
    }
    v47 = &v45[2 * v46];
LABEL_44:
    if (v45)
      v50 = &v45[2 * *((unsigned int *)v45 - 1)];
    else
      v50 = 0;
    while (v48 != v50)
    {
      WTF::JSONImpl::Value::asString(v48[1]);
      if (v82)
      {
        WebCore::HTTPHeaderMap::add((WebCore::HTTPHeaderMap *)&v85, v48, (const WTF::String *)&v82);
        v52 = v82;
        v82 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v51);
          else
            *(_DWORD *)v52 -= 2;
        }
      }
      v53 = v48 + 2;
      v48 = v47;
      if (v53 != v47)
      {
        v48 = v53;
        while ((unint64_t)*v48 + 1 <= 1)
        {
          v48 += 2;
          if (v48 == v47)
          {
            v48 = v47;
            break;
          }
        }
      }
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)&v87, 2);
    if (DWORD1(v93))
    {
      v68 = 16 * DWORD1(v93);
      v69 = (WTF::StringImpl **)(*((_QWORD *)&v92 + 1) + 8);
      do
      {
        v70 = *v69;
        *v69 = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, v54);
          else
            *(_DWORD *)v70 -= 2;
        }
        v69 += 2;
        v68 -= 16;
      }
      while (v68);
    }
    v55 = (WTF *)*((_QWORD *)&v92 + 1);
    if (*((_QWORD *)&v92 + 1))
    {
      *((_QWORD *)&v92 + 1) = 0;
      LODWORD(v93) = 0;
      WTF::fastFree(v55, v54);
    }
    v56 = *((_QWORD *)&v85 + 1);
    *((_QWORD *)&v92 + 1) = v85;
    v85 = 0uLL;
    *(_QWORD *)&v93 = v56;
    if (DWORD1(v94))
      WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*((WTF::StringImpl **)&v93 + 1), (WTF::StringImpl *)(*((_QWORD *)&v93 + 1) + 16 * DWORD1(v94)));
    v57 = (WTF *)*((_QWORD *)&v93 + 1);
    if (*((_QWORD *)&v93 + 1))
    {
      *((_QWORD *)&v93 + 1) = 0;
      LODWORD(v94) = 0;
      WTF::fastFree(v57, v54);
    }
    v58 = *((_QWORD *)&v86 + 1);
    *((_QWORD *)&v93 + 1) = v86;
    v86 = 0uLL;
    *(_QWORD *)&v94 = v58;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)&v87, 1);
    WebCore::ResourceResponse::platformLazyInit((uint64_t)&v87, 2);
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)((char *)&v92 + 8), (WTF::StringImpl *)0x1A, v90);
    if (v20)
      ++v20[4];
    v59 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v59 = off_1E33F0AE8;
    v59[1] = v20;
    v82 = 0;
    v83 = 0;
    v59[2] = v26;
    v84 = v59;
    (*(void (**)(_DWORD *, WTF **, _QWORD **))(*(_QWORD *)v20 + 208))(v20, &v87, &v84);
    v61 = v84;
    v84 = 0;
    if (v61)
      (*(void (**)(_QWORD *))(*v61 + 8))(v61);
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v83, v60);
    v63 = v82;
    v82 = 0;
    if (v63)
    {
      if (*((_DWORD *)v63 + 4) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v63 + 8))(v63);
      else
        --*((_DWORD *)v63 + 4);
    }
    *a9 = 0;
    a9[8] = 0;
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v85, v62);
    v65 = cf;
    cf = 0;
    if (v65)
      CFRelease(v65);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v87, v64);
    goto LABEL_77;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  a9[8] = 1;
LABEL_77:
  if (v20[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  else
    --v20[4];
LABEL_79:
  v66 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = *(_DWORD **)v19;
  *(_QWORD *)v19 = 0;
  if (v67)
  {
    if (v67[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v67 + 8))(v67);
    else
      --v67[4];
  }
  return WTF::fastFree(v19, v21);
}

uint64_t `non-virtual thunk to'WebCore::InspectorNetworkAgent::interceptRequestWithResponse@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, int a4@<W3>, WTF::StringImpl **a5@<X4>, __int16 a6@<W5>, WTF::StringImpl **a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  return WebCore::InspectorNetworkAgent::interceptRequestWithResponse(a1 - 32, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t WebCore::InspectorNetworkAgent::interceptRequestWithError@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  int v4;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  _BOOL4 v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  __int128 v29;
  CFTypeRef v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  __int128 v38;
  __int128 v39;
  WTF::StringImpl *v40;
  int v41;
  char v42;
  char v43;
  CFTypeRef cf;
  char v45;
  WTF::StringImpl *v46;

  v4 = (int)a3;
  v7 = (_QWORD *)(a1 + 120);
  result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 120), a2, a3);
  v9 = *(unsigned int *)(a1 + 128);
  if (*(_QWORD *)(a1 + 120) + 16 * v9 == result)
    goto LABEL_7;
  v10 = *(WTF **)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  if (*v7 + 16 * v9 != result)
    result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)v7, (WTF::StringImpl **)result);
  if (!v10)
  {
LABEL_7:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    a4[8] = 1;
    return result;
  }
  v11 = *(_QWORD *)v10;
  if (!*(_BYTE *)(*(_QWORD *)v10 + 752))
  {
    v14 = (uint64_t *)(v11 + 336);
    if ((*(_BYTE *)(v11 + 520) & 1) == 0)
    {
      result = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v11 + 336));
      *(_BYTE *)(v11 + 520) |= 1u;
    }
    v15 = *v14;
    if (*v14)
    {
      v16 = *(_DWORD *)(v15 + 4);
      *(_DWORD *)v15 += 2;
      if (v16 < 0)
        goto LABEL_73;
    }
    else
    {
      v16 = 0;
    }
    v17 = __OFADD__(v16, 13);
    v18 = v16 + 13;
    if (!v17)
    {
      result = (v18 + 22);
      if (!__OFADD__(v18, 22))
      {
        v19 = !v15 || (*(_BYTE *)(v15 + 16) & 4) != 0;
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v19, (int8x16_t *)"Web Inspector blocked ", 0x16u, v15, (int8x16_t *)" from loading", 0xDu, &v46);
        if (v46)
        {
          WTF::fastMalloc((WTF *)0x60);
          v36 = (WTF::StringImpl *)Inspector::ConsoleMessage::ConsoleMessage();
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 216))(a1, &v36);
          v21 = v36;
          v36 = 0;
          if (v21)
          {
            v22 = (WTF *)MEMORY[0x19AEA5F58]();
            WTF::fastFree(v22, v23);
          }
          v24 = v46;
          v46 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
            {
              WTF::StringImpl::destroy(v24, v20);
              if (!v15)
                goto LABEL_27;
              goto LABEL_25;
            }
            *(_DWORD *)v24 -= 2;
          }
          if (!v15)
            goto LABEL_27;
LABEL_25:
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v15, v20);
          else
            *(_DWORD *)v15 -= 2;
LABEL_27:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v25 = v36;
          if ((*(_BYTE *)(v11 + 520) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v11 + 336));
            *(_BYTE *)(v11 + 520) |= 1u;
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v26 = v36;
          if ((v4 - 202) >= 4)
            v27 = 0;
          else
            v27 = v4 + 55;
          if (v25)
            *(_DWORD *)v25 += 2;
          v36 = v25;
          v28 = (WTF::StringImpl *)*v14;
          if (*v14)
            *(_DWORD *)v28 += 2;
          v37 = v28;
          v29 = *(_OWORD *)(v11 + 360);
          v38 = *(_OWORD *)(v11 + 344);
          v39 = v29;
          if (v26)
            *(_DWORD *)v26 += 2;
          v40 = v26;
          v41 = 0;
          v42 = v27;
          v43 = 0;
          cf = 0;
          v45 = 1;
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 240))(v11, &v36);
          v30 = cf;
          cf = 0;
          if (v30)
            CFRelease(v30);
          v31 = v40;
          v40 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v12);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = v37;
          v37 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v12);
            else
              *(_DWORD *)v32 -= 2;
          }
          v33 = v36;
          v36 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
            {
              WTF::StringImpl::destroy(v33, v12);
              if (v26)
              {
LABEL_50:
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v12);
                else
                  *(_DWORD *)v26 -= 2;
              }
LABEL_52:
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v12);
                else
                  *(_DWORD *)v25 -= 2;
              }
              v13 = 0;
              *a4 = 0;
              goto LABEL_56;
            }
            *(_DWORD *)v33 -= 2;
          }
          if (v26)
            goto LABEL_50;
          goto LABEL_52;
        }
LABEL_74:
        __break(0xC471u);
        return result;
      }
    }
LABEL_73:
    v46 = 0;
    goto LABEL_74;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = 1;
LABEL_56:
  a4[8] = v13;
  v34 = *((_QWORD *)v10 + 1);
  *((_QWORD *)v10 + 1) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *(_DWORD **)v10;
  *(_QWORD *)v10 = 0;
  if (v35)
  {
    if (v35[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
    else
      --v35[4];
  }
  return WTF::fastFree(v10, v12);
}

uint64_t `non-virtual thunk to'WebCore::InspectorNetworkAgent::interceptRequestWithError@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorNetworkAgent::interceptRequestWithError(a1 - 32, a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::createTextDecoder@<X0>(WebCore::InspectorNetworkAgent *this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  const char *v6;
  WTF::StringImpl *v7;
  char *v8;
  char *v9;
  __int16 v10;
  uint64_t v11;
  const WTF::String *v12;
  PAL *v13;
  char *v14;
  uint64_t *v15;
  __int128 v16;
  WTF::StringImpl *result;
  uint64_t v18;
  const WTF::String *v19;
  const char *v20;
  uint64_t *v21;
  __int128 v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  const char *v27;
  WTF::StringImpl *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  const WTF::String *v33;
  PAL *v34;
  char *v35;
  uint64_t *v36;
  WTF::StringImpl *v37;
  char *v38;
  char *v39;
  __int16 v40;
  const WTF::String *v41;
  PAL *v42;
  __int128 v43;
  char *v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  const char *v49;
  void *v50;
  char *v51;
  __int16 v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  char *v55;

  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v24 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v25 = *(_QWORD *)(v24 + 8);
      v26 = *(unsigned int *)(v24 + 4) | ((unint64_t)((*(_DWORD *)(v24 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v25 = 0;
      v26 = 0x100000000;
    }
    v37 = (WTF::StringImpl *)PAL::atomCanonicalTextEncodingName(v25, (const char *)v26);
    v39 = v38;
    v50 = v37;
    v51 = v38;
    v54 = v37;
    v55 = v38;
    if (v38 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v54))
      {
        v40 = 165;
      }
      else
      {
        v40 = 92;
      }
    }
    else
    {
      v40 = 92;
    }
    v52 = v40;
    v32 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)v32 = 1;
    v42 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&v53, v41);
    *(_DWORD *)(v32 + 4) = (_DWORD)v42;
    if ((_DWORD)v42 == 2)
    {
      v36 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
      {
        PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
        *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((PAL *)"UTF-8", v35);
        *((_QWORD *)&xmmword_1ECE86C80 + 1) = v35;
        v54 = (WTF::StringImpl *)xmmword_1ECE86C80;
        v55 = v35;
        if (v35 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
        {
          if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v54))
          {
            v48 = 165;
          }
          else
          {
            v48 = 92;
          }
        }
        else
        {
          v48 = 92;
        }
        word_1ECE86C90 = v48;
      }
    }
    else if (v39)
    {
      v36 = (uint64_t *)&v49;
    }
    else
    {
      v36 = PAL::Latin1Encoding(v42);
    }
    *(_QWORD *)(v32 + 8) = &off_1E31F4A18;
LABEL_47:
    v43 = *(_OWORD *)(v36 + 1);
    *(_WORD *)(v32 + 32) = *((_WORD *)v36 + 12);
    *(_OWORD *)(v32 + 16) = v43;
    *(_QWORD *)(v32 + 40) = 0;
    *(_QWORD *)(v32 + 48) = 0;
    *(_DWORD *)(v32 + 56) = 0;
    *(_QWORD *)(v32 + 72) = 0;
    *(_QWORD *)(v32 + 80) = 0;
    *(_QWORD *)(v32 + 64) = 0;
    *(_QWORD *)(v32 + 87) = 0;
    *a3 = v32;
    result = v53;
    v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v35);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  if (WebCore::MIMETypeRegistry::isTextMIMEType(this, a2))
  {
    v7 = (WTF::StringImpl *)PAL::atomCanonicalTextEncodingName((PAL *)"UTF-8", v6);
    v9 = v8;
    v50 = v7;
    v51 = v8;
    v54 = v7;
    v55 = v8;
    if (v8 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v54))
      {
        v10 = 165;
      }
      else
      {
        v10 = 92;
      }
    }
    else
    {
      v10 = 92;
    }
    v52 = v10;
    v18 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)v18 = 1;
    result = (WTF::StringImpl *)WebCore::TextResourceDecoder::determineContentType(this, v19);
    *(_DWORD *)(v18 + 4) = (_DWORD)result;
    if ((_DWORD)result == 2)
    {
      v21 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
      {
        PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
        result = (WTF::StringImpl *)PAL::atomCanonicalTextEncodingName((PAL *)"UTF-8", v20);
        *(_QWORD *)&xmmword_1ECE86C80 = result;
        *((_QWORD *)&xmmword_1ECE86C80 + 1) = v44;
        v54 = result;
        v55 = v44;
        if (v44
          && (result = (WTF::StringImpl *)PAL::nonBackslashEncodings) != 0
          && *(_QWORD *)PAL::nonBackslashEncodings)
        {
          result = (WTF::StringImpl *)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v54);
          if (result)
            v45 = 165;
          else
            v45 = 92;
        }
        else
        {
          v45 = 92;
        }
        word_1ECE86C90 = v45;
      }
    }
    else if (v9)
    {
      v21 = (uint64_t *)&v49;
    }
    else
    {
      result = (WTF::StringImpl *)PAL::Latin1Encoding(result);
      v21 = (uint64_t *)result;
    }
    *(_QWORD *)(v18 + 8) = &off_1E31F4A18;
    v22 = *(_OWORD *)(v21 + 1);
    *(_WORD *)(v18 + 32) = *((_WORD *)v21 + 12);
    *(_OWORD *)(v18 + 16) = v22;
    *(_QWORD *)(v18 + 40) = 0;
    *(_QWORD *)(v18 + 48) = 0;
    *(_DWORD *)(v18 + 56) = 0;
    *(_QWORD *)(v18 + 72) = 0;
    *(_QWORD *)(v18 + 80) = 0;
    *(_QWORD *)(v18 + 64) = 0;
    *(_QWORD *)(v18 + 87) = 0;
    *a3 = v18;
  }
  else
  {
    if (!WebCore::MIMETypeRegistry::isXMLMIMEType(this, (const WTF::String *)v6))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WTF::StringImpl *)PAL::atomCanonicalTextEncodingName((PAL *)"UTF-8", v27);
      v30 = v29;
      v50 = v28;
      v51 = v29;
      v54 = v28;
      v55 = v29;
      if (v29 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
      {
        if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v54))
        {
          v31 = 165;
        }
        else
        {
          v31 = 92;
        }
      }
      else
      {
        v31 = 92;
      }
      v52 = v31;
      v32 = WTF::fastMalloc((WTF *)0x60);
      *(_DWORD *)v32 = 1;
      v34 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&v53, v33);
      *(_DWORD *)(v32 + 4) = (_DWORD)v34;
      if ((_DWORD)v34 == 2)
      {
        v36 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
        {
          PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
          *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((PAL *)"UTF-8", v35);
          *((_QWORD *)&xmmword_1ECE86C80 + 1) = v35;
          v54 = (WTF::StringImpl *)xmmword_1ECE86C80;
          v55 = v35;
          if (v35 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
          {
            if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v54))
            {
              v47 = 165;
            }
            else
            {
              v47 = 92;
            }
          }
          else
          {
            v47 = 92;
          }
          word_1ECE86C90 = v47;
        }
      }
      else if (v30)
      {
        v36 = (uint64_t *)&v49;
      }
      else
      {
        v36 = PAL::Latin1Encoding(v34);
      }
      *(_QWORD *)(v32 + 8) = &off_1E31F4A18;
      goto LABEL_47;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)v11 = 1;
    v13 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&v54, v12);
    *(_DWORD *)(v11 + 4) = (_DWORD)v13;
    if ((_DWORD)v13 == 2)
    {
      v15 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
      {
        PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
        *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((PAL *)"UTF-8", v14);
        *((_QWORD *)&xmmword_1ECE86C80 + 1) = v14;
        v49 = (const char *)xmmword_1ECE86C80;
        v50 = v14;
        if (v14 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
        {
          if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v49))
          {
            v46 = 165;
          }
          else
          {
            v46 = 92;
          }
        }
        else
        {
          v46 = 92;
        }
        word_1ECE86C90 = v46;
      }
    }
    else
    {
      v15 = PAL::Latin1Encoding(v13);
    }
    *(_QWORD *)(v11 + 8) = &off_1E31F4A18;
    v16 = *(_OWORD *)(v15 + 1);
    *(_WORD *)(v11 + 32) = *((_WORD *)v15 + 12);
    *(_OWORD *)(v11 + 16) = v16;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    *(_DWORD *)(v11 + 56) = 0;
    *(_QWORD *)(v11 + 72) = 0;
    *(_QWORD *)(v11 + 80) = 0;
    *(_QWORD *)(v11 + 64) = 0;
    *(_QWORD *)(v11 + 87) = 0;
    *a3 = v11;
    result = v54;
    v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v11 + 91) = 1;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::textContentForCachedResource(WebCore::InspectorNetworkAgent *this, WebCore::CachedResource *a2)
{
  uint64_t *v4;
  unint64_t v5;
  const WTF::String *v6;
  BOOL *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL isTextMediaPlaylistMIMEType;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;

  v4 = (uint64_t *)*((_QWORD *)a2 + 50);
  if (!v4)
  {
    v5 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v5 != -1)
    {
      v16 = (WTF::StringImpl *)&v14;
      v15 = &v16;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v4 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v4, 1);
  v8 = v4[5];
  if (!v8)
  {
    v16 = 0;
    goto LABEL_14;
  }
  *(_DWORD *)v8 += 2;
  v16 = (WTF::StringImpl *)v8;
  if (*(_DWORD *)(v8 + 4) >= 5u)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v9 & 0xDF) != 0x54
        || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x58
        || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x54)
      {
        goto LABEL_14;
      }
      v10 = *(unsigned __int8 *)(v9 + 4);
    }
    else
    {
      if ((*(_WORD *)v9 & 0xFFDF) != 0x54
        || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x58
        || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x54)
      {
        goto LABEL_14;
      }
      v10 = *(unsigned __int16 *)(v9 + 8);
    }
    if ((v10 & 0xFFFFFFDF) == 0xF)
    {
LABEL_17:
      isTextMediaPlaylistMIMEType = 1;
      goto LABEL_18;
    }
  }
LABEL_14:
  if (WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [16]>::contains<WTF::String>(WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType(WTF::String const&)::supportedJavaScriptMIMETypes, (uint64_t *)&v16)|| (WebCore::MIMETypeRegistry::isSupportedJSONMIMEType((WebCore::MIMETypeRegistry *)&v16, v6) & 1) != 0|| (WebCore::MIMETypeRegistry::isXMLMIMEType((WebCore::MIMETypeRegistry *)&v16, v6) & 1) != 0)
  {
    goto LABEL_17;
  }
  isTextMediaPlaylistMIMEType = WebCore::MIMETypeRegistry::isTextMediaPlaylistMIMEType((WebCore::MIMETypeRegistry *)&v16, v6);
LABEL_18:
  result = v16;
  v16 = 0;
  if (!result)
    goto LABEL_21;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_21:
    if (isTextMediaPlaylistMIMEType)
      goto LABEL_22;
LABEL_28:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 8) = 0;
    return result;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (!isTextMediaPlaylistMIMEType)
    goto LABEL_28;
LABEL_22:
  v16 = 0;
  result = (WTF::StringImpl *)WebCore::InspectorNetworkAgent::cachedResourceContent(a2, &v16, (WTF::String *)&v15, v7);
  if ((_DWORD)result)
  {
    *(_QWORD *)this = v16;
    *((_BYTE *)this + 8) = 1;
  }
  else
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 8) = 0;
    result = v16;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorNetworkAgent::mainFrameNavigated(WebCore::InspectorNetworkAgent *this, WebCore::DocumentLoader *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;

  v2 = *((_QWORD *)this + 8);
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 176))(&v7);
  v3 = v7;
  v7 = 0;
  v8 = v3;
  v9 = 1;
  WebCore::NetworkResourcesData::clear(v2, (WTF::StringImpl *)&v8);
  if (v9)
  {
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorPageAgent::mainResourceContent(WebCore::InspectorPageAgent *this, WebCore::LocalFrame *a2, WTF::StringImpl **a3, WTF::String *a4)
{
  int v5;
  WebCore::FragmentedSharedBuffer *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WebCore::FragmentedSharedBuffer *v36;
  char v37;
  WTF::StringImpl *v38;

  v5 = (int)a2;
  WebCore::DocumentLoader::mainResourceData(*(WebCore::DocumentLoader **)(*((_QWORD *)this + 35) + 88), &v36);
  v7 = v36;
  if (!v36)
    return 0;
  WebCore::FragmentedSharedBuffer::makeContiguous(v36, &v35);
  v9 = v35;
  if (!*(_DWORD *)(v35 + 20))
  {
    v12 = 0;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8);
  v11 = *(unsigned int *)(v10 + 24);
  if ((_DWORD)v11 != -1)
  {
    v38 = (WTF::StringImpl *)&v37;
    v12 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v38, v10 + 8);
LABEL_5:
    v13 = *(_QWORD *)(v9 + 48);
    WebCore::Document::encoding(*((_QWORD *)this + 37), v8, &v38);
    v14 = v38;
    v16 = WebCore::InspectorPageAgent::dataContent(v12, v13, (uint64_t)v38, v5, a3);
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v15);
      else
        *(_DWORD *)v14 -= 2;
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v35, v15);
    v36 = 0;
    do
    {
      v18 = __ldaxr((unsigned int *)v7);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v7));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v7);
      v20 = *((unsigned int *)v7 + 5);
      if ((_DWORD)v20)
      {
        v21 = *((_QWORD *)v7 + 1);
        v22 = v21 + 16 * v20;
        do
        {
          v23 = *(unsigned int **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v23);
              v26 = v23[6];
              if ((_DWORD)v26 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F09A8[v26])(&v38, v23 + 2);
              v23[6] = -1;
              WTF::fastFree((WTF *)v23, v17);
            }
          }
          v21 += 16;
        }
        while (v21 != v22);
      }
      v28 = (WTF *)*((_QWORD *)v7 + 1);
      if ((WebCore::FragmentedSharedBuffer *)((char *)v7 + 24) != v28 && v28 != 0)
      {
        *((_QWORD *)v7 + 1) = 0;
        *((_DWORD *)v7 + 4) = 0;
        WTF::fastFree(v28, v17);
      }
      WTF::fastFree(v7, v17);
    }
    return v16;
  }
  v30 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::InspectorPageAgent::dataContent(v30, v31, v32, v33, v34);
}

uint64_t WebCore::InspectorPageAgent::dataContent(uint64_t a1, uint64_t a2, uint64_t a3, int a4, WTF::StringImpl **a5)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  const PAL::TextEncoding *v16;
  __int16 v17;
  WTF::StringImpl *v18;
  const char *v19;
  __int16 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int16 v24;
  char v25;
  const char *v26;
  const PAL::TextEncoding *v27;

  if (a4)
  {
    WTF::base64EncodeToString();
    v9 = v22;
    v22 = 0;
    v10 = *a5;
    *a5 = v9;
    if (v10)
    {
      v11 = *(_DWORD *)v10 - 2;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        v10 = v22;
        v22 = 0;
        if (!v10)
          return 1;
LABEL_32:
        v11 = *(_DWORD *)v10 - 2;
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::destroy(v10, v12);
          return 1;
        }
        goto LABEL_29;
      }
      goto LABEL_29;
    }
    return 1;
  }
  if (!a1)
    return 0;
  if (a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = *(unsigned int *)(a3 + 4) | ((unint64_t)((*(_DWORD *)(a3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v13 = 0;
    v14 = 0x100000000;
  }
  v22 = (WTF::StringImpl *)&off_1E31F4A18;
  *(_QWORD *)&v23 = PAL::atomCanonicalTextEncodingName(v13, (const char *)v14);
  *((_QWORD *)&v23 + 1) = v16;
  v26 = (const char *)v23;
  v27 = v16;
  if (v16 && PAL::nonBackslashEncodings)
  {
    if (*(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v26))
      {
        v17 = 165;
      }
      else
      {
        v17 = 92;
      }
    }
    else
    {
      v17 = 92;
    }
    v24 = v17;
    goto LABEL_23;
  }
  v24 = 92;
  if (v16)
  {
LABEL_23:
    v25 = 0;
LABEL_24:
    PAL::newTextCodec((PAL *)&v22, v16, &v26);
    (*(void (**)(WTF::StringImpl **__return_ptr, const char *, uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)v26 + 24))(&v21, v26, a1, a2, 1, 0, &v25);
    v19 = v26;
    v26 = 0;
    if (v19)
      (*(void (**)(const char *))(*(_QWORD *)v19 + 8))(v19);
    v18 = v21;
    goto LABEL_27;
  }
  {
    PAL::WindowsLatin1Encoding(void)::globalWindowsLatin1Encoding = (uint64_t)&off_1E31F4A18;
    *(_QWORD *)&xmmword_1EE2E6E38 = PAL::atomCanonicalTextEncodingName((uint64_t *)&v23, (PAL *)"WinLatin-1", 0);
    *((_QWORD *)&xmmword_1EE2E6E38 + 1) = v16;
    v26 = (const char *)xmmword_1EE2E6E38;
    v27 = v16;
    if (v16 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v26))
      {
        v20 = 165;
      }
      else
      {
        v20 = 92;
      }
    }
    else
    {
      v20 = 92;
    }
    word_1EE2E6E48 = v20;
  }
  v23 = xmmword_1EE2E6E38;
  v24 = word_1EE2E6E48;
  v18 = (WTF::StringImpl *)*((_QWORD *)&xmmword_1EE2E6E38 + 1);
  v25 = 0;
  if (*((_QWORD *)&xmmword_1EE2E6E38 + 1))
    goto LABEL_24;
LABEL_27:
  v21 = 0;
  v10 = *a5;
  *a5 = v18;
  if (v10)
  {
    v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v16);
      v10 = v21;
      v21 = 0;
      if (!v10)
        return 1;
      goto LABEL_32;
    }
LABEL_29:
    *(_DWORD *)v10 = v11;
  }
  return 1;
}

uint64_t WebCore::InspectorPageAgent::cachedResourcesForFrame@<X0>(WebCore::InspectorPageAgent *this@<X0>, WebCore::LocalFrame *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Document *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = (WebCore::Document *)*((_QWORD *)this + 37);
  result = *((_QWORD *)v4 + 90);
  if (!result)
    result = WebCore::Document::ensureCachedResourceLoader(v4, a2);
  v6 = *(_QWORD *)(result + 64);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = (_QWORD *)(v6 + 16 * v7);
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = *(_QWORD **)(result + 64);
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = *(_QWORD **)(result + 64);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    v9 = (_QWORD *)(v6 + 16 * v7);
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = (_QWORD *)(v6 + 16 * v7);
  if (v6)
  {
LABEL_10:
    v11 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    goto LABEL_11;
  }
  v11 = 0;
LABEL_11:
  if (v11 != v9)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    do
    {
      v14 = v9[1];
      if (v14)
        result = *(_QWORD *)(v14 + 8);
      else
        result = 0;
      v20 = result;
      if ((*(_BYTE *)(result + 344) & 0x10) == 0)
      {
        v15 = *(_BYTE *)(result + 556) & 0x1F;
        v16 = v15 > 5;
        v17 = (1 << v15) & 0x32;
        v18 = v16 || v17 == 0;
        if (v18
          || (result = (*(uint64_t (**)(uint64_t, WebCore::LocalFrame *))(*(_QWORD *)result + 112))(result, a2), (result & 1) == 0))
        {
          if ((_DWORD)v13 == *(_DWORD *)(a3 + 8))
          {
            result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v13 + 1, (unint64_t)&v20);
            v13 = *(unsigned int *)(a3 + 12);
            v12 = *(char **)a3;
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v13) = *(_QWORD *)result;
          }
          else
          {
            *(_QWORD *)&v12[8 * v13] = v20;
          }
          LODWORD(v13) = v13 + 1;
          *(_DWORD *)(a3 + 12) = v13;
        }
      }
      v19 = v9 + 2;
      v9 = v8;
      if (v19 != v8)
      {
        v9 = v19;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
    }
    while (v9 != v11);
  }
  return result;
}

uint64_t WebCore::InspectorPageAgent::resourceContent(WebCore::InspectorPageAgent *this, WTF::String *a2, WebCore::LocalFrame *a3, WTF::StringImpl **a4, WTF::String *a5, BOOL *a6)
{
  uint64_t v7;
  const WTF::URL *v12;
  WTF::String *v13;
  uint64_t result;
  WebCore::InspectorNetworkAgent *v15;
  BOOL *v16;
  WTF::StringImpl *v17;
  uint64_t v18;

  v7 = *(_QWORD *)(*((_QWORD *)a2 + 35) + 88);
  if (!v7)
    goto LABEL_8;
  if ((*(_BYTE *)(v7 + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v7 + 872));
    *(_BYTE *)(v7 + 1056) |= 1u;
  }
  if (!WTF::equalIgnoringFragmentIdentifier()
    || (*(_BYTE *)a5 = 0, result = WebCore::InspectorPageAgent::mainResourceContent(a2, 0, a4, v13), (result & 1) == 0))
  {
    v15 = (WebCore::InspectorNetworkAgent *)WebCore::InspectorPageAgent::cachedResource(a2, a3, v12);
    if (!v15 || (result = WebCore::InspectorNetworkAgent::cachedResourceContent(v15, a4, a5, v16), (result & 1) == 0))
    {
LABEL_8:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      result = *(_QWORD *)this;
      *(_QWORD *)this = v18;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorPageAgent::InspectorPageAgent(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *v13;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v13)
  {
    v9 = *(_DWORD *)v13;
    *(_DWORD *)v13 += 2;
    *(_QWORD *)a1 = off_1E33EFBF8;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
    if (v9)
      *(_DWORD *)v13 = v9;
    else
      WTF::StringImpl::destroy(v13, v8);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
  }
  *(_QWORD *)a1 = off_1E33F0170;
  *(_QWORD *)(a1 + 32) = &unk_1E33F0250;
  v10 = a2[2];
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v11 = v10;
  *(_QWORD *)(a1 + 40) = v11;
  Inspector::PageBackendDispatcher::create();
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = a2[5];
  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 72) = a4;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 109) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  return a1;
}

void WebCore::InspectorPageAgent::~InspectorPageAgent(WebCore::InspectorPageAgent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t i;
  char *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  uint64_t v21;
  unsigned int *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  WTF *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 15);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      v8 = (WTF::StringImpl **)(v6 + 8);
      do
      {
        if (*(v8 - 1) != (WTF::StringImpl *)-1)
        {
          v9 = *v8;
          *v8 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, a2);
            else
              *(_DWORD *)v9 -= 2;
          }
        }
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v10 = (WTF *)*((_QWORD *)this + 12);
  if (v10)
  {
    v11 = *((unsigned int *)this + 26);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = (char *)v10 + 16 * i;
        v14 = (unsigned int *)*((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, a2);
          }
        }
        v17 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, a2);
          else
            *(_DWORD *)v17 -= 2;
        }
      }
    }
    WTF::fastFree(v10, a2);
  }
  v18 = *((_QWORD *)this + 10);
  if (v18)
  {
    v19 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v19)
    {
      for (j = 0; j != v19; ++j)
      {
        v21 = v18 + 16 * j;
        v22 = *(unsigned int **)v21;
        if (*(_QWORD *)v21 != -1)
        {
          v23 = *(WTF::StringImpl **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
            {
              WTF::StringImpl::destroy(v23, a2);
              v22 = *(unsigned int **)v21;
            }
            else
            {
              *(_DWORD *)v23 -= 2;
            }
          }
          *(_QWORD *)v21 = 0;
          if (v22)
          {
            do
            {
              v24 = __ldaxr(v22);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v22));
            if (!v25)
            {
              atomic_store(1u, v22);
              WTF::fastFree((WTF *)v22, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v18 - 16), a2);
  }
  v26 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v26)
  {
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
    else
      --v26[2];
  }
  v27 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v27)
    WTF::fastFree(v27, a2);
  Inspector::PageBackendDispatcherHandler::~PageBackendDispatcherHandler((WebCore::InspectorPageAgent *)((char *)this + 32));
  v29 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorPageAgent::~InspectorPageAgent(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::InspectorPageAgent::~InspectorPageAgent(WebCore::InspectorPageAgent *this, WTF::StringImpl *a2)
{
  WebCore::InspectorPageAgent::~InspectorPageAgent((WebCore::InspectorPageAgent *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorPageAgent::~InspectorPageAgent((WebCore::InspectorPageAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::InspectorPageAgent::willDestroyFrontendAndBackend(WebCore::InspectorPageAgent *a1)
{
  uint64_t result;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  char v4;

  result = WebCore::InspectorPageAgent::disable(a1, &v3);
  if (v4)
  {
    result = (uint64_t)v3;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        return WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::InspectorPageAgent::disable@<X0>(WebCore::InspectorPageAgent *this@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Page *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Page *v21;
  uint64_t v22;
  WebCore::Page *v23;
  uint64_t result;
  WTF::StringImpl *v25;
  char v26;

  *(_QWORD *)(*((_QWORD *)this + 2) + 200) = 0;
  *((_BYTE *)this + 153) = 0;
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 8) + 96))(*((_QWORD *)this + 8), 0);
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 88))(*((_QWORD *)this + 8)) & 1) == 0)
    WebCore::InspectorOverlay::setShowPaintRects(*((_QWORD *)this + 9), 0);
  v6 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *v6 += 2;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::InspectorPageAgent::setEmulatedMedia((const WTF::StringImpl **)this, MEMORY[0x1E0CBF738], v5, &v25);
  if (v26 && v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v8);
    else
      *(_DWORD *)v25 -= 2;
  }
  v9 = *((_QWORD *)this + 7);
  if (*(_BYTE *)(v9 + 454))
  {
    *(_WORD *)(v9 + 453) = 0;
    WebCore::Page::appearanceDidChange((WebCore::Page *)v9);
    v9 = *((_QWORD *)this + 7);
  }
  v10 = *(_QWORD *)(v9 + 112);
  if (*(_BYTE *)(v10 + 233))
  {
    *(_WORD *)(v10 + 232) = 0;
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = *(WebCore::Page **)(v11 + 8);
      if (v12)
        WebCore::Page::setNeedsRecalcStyleInAllFrames(v12);
    }
  }
  if (*(_BYTE *)(v10 + 235))
  {
    *(_WORD *)(v10 + 234) = 0;
    v13 = *(_QWORD *)(v10 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 112);
        if (*(_BYTE *)(v15 + 235))
        {
          if (!*(_BYTE *)(v15 + 234))
            goto LABEL_23;
        }
        else if ((*(_QWORD *)(v15 + 680) & 0x400000) == 0)
        {
LABEL_23:
          *(_BYTE *)(v14 + 1094) = 0;
          WebCore::RTCController::disableICECandidateFilteringForAllOrigins(*(WebCore::RTCController **)(v14 + 304));
          goto LABEL_28;
        }
        *(_BYTE *)(v14 + 1094) = 1;
        WebCore::RTCController::enableICECandidateFiltering(*(WebCore::RTCController **)(v14 + 304), v8);
      }
    }
  }
LABEL_28:
  if (*(_BYTE *)(v10 + 237))
  {
    *(_WORD *)(v10 + 236) = 0;
    WebCore::TimerBase::start((double *)(v10 + 24), 0.0, 0.0);
  }
  *(_WORD *)(v10 + 238) = 0;
  if (*(_BYTE *)(v10 + 241))
  {
    *(_WORD *)(v10 + 240) = 0;
    v16 = *(_QWORD *)(v10 + 8);
    if (v16 && (v17 = *(_QWORD *)(v16 + 8)) != 0)
    {
      v18 = *(_QWORD *)(v17 + 112);
      if (*(_BYTE *)(v18 + 241))
        v19 = *(unsigned __int8 *)(v18 + 240) != 0;
      else
        v19 = (*(_QWORD *)(v18 + 712) >> 26) & 1;
    }
    else
    {
      v19 = 0;
    }
    WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled(v19);
  }
  *(_DWORD *)(v10 + 242) = 0;
  if (*(_BYTE *)(v10 + 247))
  {
    *(_WORD *)(v10 + 246) = 0;
    v20 = *(_QWORD *)(v10 + 8);
    if (v20)
    {
      v21 = *(WebCore::Page **)(v20 + 8);
      if (v21)
        WebCore::Page::setNeedsRecalcStyleInAllFrames(v21);
    }
  }
  if (*(_BYTE *)(v10 + 249))
  {
    *(_WORD *)(v10 + 248) = 0;
    v22 = *(_QWORD *)(v10 + 8);
    if (v22)
    {
      v23 = *(WebCore::Page **)(v22 + 8);
      if (v23)
        WebCore::Page::setNeedsRecalcStyleInAllFrames(v23);
    }
  }
  *(_WORD *)(v10 + 250) = 0;
  *(_WORD *)(v10 + 374) = 0;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 8) + 144))(*((_QWORD *)this + 8), 0, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 8) + 144))(*((_QWORD *)this + 8), 1, 0);
  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 8) + 144))(*((_QWORD *)this + 8), 2, 0);
  *a2 = 0;
  a2[8] = 0;
  return result;
}

uint64_t WebCore::InspectorPageAgent::enable@<X0>(WebCore::InspectorPageAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v3 = *((_QWORD *)this + 2);
  if (*(WebCore::InspectorPageAgent **)(v3 + 200) == this)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 1;
  }
  else
  {
    *(_QWORD *)(v3 + 200) = this;
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
    *(_OWORD *)(v5 + 8) = xmmword_1968DF3C0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    *(_QWORD *)(v5 + 16) = v6;
    result = (uint64_t)WebCore::InspectorPageAgent::defaultUserPreferencesDidChange(this);
    v8 = 0;
    *a2 = 0;
  }
  a2[8] = v8;
  return result;
}

_DWORD *WebCore::InspectorPageAgent::defaultUserPreferencesDidChange(WebCore::InspectorPageAgent *this)
{
  uint64_t v2;
  uint64_t (**v3)();
  WTF::JSONImpl::Object *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t *v15;
  uint64_t (**v16)();
  WTF::JSONImpl::Object *v17;
  int v18;
  uint64_t v19;
  WTF::JSONImpl::Object *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t *v39;
  _DWORD *result;
  uint64_t v41;
  _DWORD *v42;

  v2 = WTF::fastMalloc((WTF *)0x20);
  v42 = (_DWORD *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v2);
  {
    v3 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
  }
  else
  {
    v3 = &off_1E3354DA0;
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
  }
  v4 = (WTF::JSONImpl::Object *)((uint64_t (*)(uint64_t *))v3[7])(&WebCore::Theme::singleton(void)::theme);
  v5 = (int)v4;
  WTF::JSONImpl::Object::create(v4);
  Inspector::Protocol::Page::UserPreference::Builder<0>::setName(&v41, (Inspector::Protocol::Helpers *)0xDA);
  if (v5)
    v6 = 222;
  else
    v6 = 221;
  Inspector::Protocol::Page::UserPreference::Builder<1>::setValue(&v41, (Inspector::Protocol::Helpers *)v6);
  v7 = v41;
  v8 = *(unsigned int *)(v2 + 28);
  if ((_DWORD)v8 == *(_DWORD *)(v2 + 24))
  {
    v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8 + 1)
      v11 = v8 + 1;
    else
      v11 = v10;
    if (v11 >> 29)
      goto LABEL_65;
    v12 = *(void **)(v2 + 16);
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(v2 + 24) = v11;
    *(_QWORD *)(v2 + 16) = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if (*(void **)(v2 + 16) == v12)
      {
        *(_QWORD *)(v2 + 16) = 0;
        *(_DWORD *)(v2 + 24) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *(unsigned int *)(v2 + 28);
    v15 = (uint64_t *)(*(_QWORD *)(v2 + 16) + 8 * v8);
  }
  else
  {
    v15 = (uint64_t *)(*(_QWORD *)(v2 + 16) + 8 * v8);
  }
  *v15 = v7;
  *(_DWORD *)(v2 + 28) = v8 + 1;
  {
    v16 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
  }
  else
  {
    v16 = &off_1E3354DA0;
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
  }
  v17 = (WTF::JSONImpl::Object *)((uint64_t (*)(uint64_t *))v16[6])(&WebCore::Theme::singleton(void)::theme);
  v18 = (int)v17;
  WTF::JSONImpl::Object::create(v17);
  Inspector::Protocol::Page::UserPreference::Builder<0>::setName(&v41, (Inspector::Protocol::Helpers *)0xDB);
  if (v18)
    v19 = 223;
  else
    v19 = 221;
  v20 = (WTF::JSONImpl::Object *)Inspector::Protocol::Page::UserPreference::Builder<1>::setValue(&v41, (Inspector::Protocol::Helpers *)v19);
  v21 = v41;
  v22 = *(unsigned int *)(v2 + 28);
  if ((_DWORD)v22 == *(_DWORD *)(v2 + 24))
  {
    v23 = v22 + (v22 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v22 + 1)
      v25 = v22 + 1;
    else
      v25 = v24;
    if (v25 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195E4E7BCLL);
    }
    v26 = *(void **)(v2 + 16);
    v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(v2 + 24) = v25;
    *(_QWORD *)(v2 + 16) = v27;
    v20 = (WTF::JSONImpl::Object *)memcpy(v27, v26, 8 * v22);
    if (v26)
    {
      if (*(void **)(v2 + 16) == v26)
      {
        *(_QWORD *)(v2 + 16) = 0;
        *(_DWORD *)(v2 + 24) = 0;
      }
      v20 = (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)v26, v28);
    }
    v22 = *(unsigned int *)(v2 + 28);
    v29 = (uint64_t *)(*(_QWORD *)(v2 + 16) + 8 * v22);
  }
  else
  {
    v29 = (uint64_t *)(*(_QWORD *)(v2 + 16) + 8 * v22);
  }
  *v29 = v21;
  *(_DWORD *)(v2 + 28) = v22 + 1;
  WTF::JSONImpl::Object::create(v20);
  Inspector::Protocol::Page::UserPreference::Builder<0>::setName(&v41, (Inspector::Protocol::Helpers *)0xDC);
  if (*(_BYTE *)(*((_QWORD *)this + 7) + 452))
    v30 = 225;
  else
    v30 = 224;
  Inspector::Protocol::Page::UserPreference::Builder<1>::setValue(&v41, (Inspector::Protocol::Helpers *)v30);
  v31 = v41;
  v32 = *(unsigned int *)(v2 + 28);
  if ((_DWORD)v32 != *(_DWORD *)(v2 + 24))
  {
    v39 = (uint64_t *)(*(_QWORD *)(v2 + 16) + 8 * v32);
    goto LABEL_56;
  }
  v33 = v32 + (v32 >> 2);
  if (v33 >= 0x10)
    v34 = v33 + 1;
  else
    v34 = 16;
  if (v34 <= v32 + 1)
    v35 = v32 + 1;
  else
    v35 = v34;
  if (v35 >> 29)
  {
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x195E4E7B4);
  }
  v36 = *(void **)(v2 + 16);
  v37 = (void *)WTF::fastMalloc((WTF *)(8 * v35));
  *(_DWORD *)(v2 + 24) = v35;
  *(_QWORD *)(v2 + 16) = v37;
  memcpy(v37, v36, 8 * v32);
  if (v36)
  {
    if (*(void **)(v2 + 16) == v36)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
    }
    WTF::fastFree((WTF *)v36, v38);
  }
  v32 = *(unsigned int *)(v2 + 28);
  v39 = (uint64_t *)(*(_QWORD *)(v2 + 16) + 8 * v32);
LABEL_56:
  *v39 = v31;
  *(_DWORD *)(v2 + 28) = v32 + 1;
  Inspector::PageFrontendDispatcher::defaultUserPreferencesDidChange();
  result = v42;
  v42 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorPageAgent::enable@<X0>(WebCore::InspectorPageAgent *this@<X0>, _BYTE *a2@<X8>)
{
  WebCore::InspectorPageAgent *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v3 = (WebCore::InspectorPageAgent *)((char *)this - 32);
  v4 = *((_QWORD *)this - 2);
  if (*(WebCore::InspectorPageAgent **)(v4 + 200) == (WebCore::InspectorPageAgent *)((char *)this - 32))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 1;
  }
  else
  {
    *(_QWORD *)(v4 + 200) = v3;
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this - 1) + 56))(*((_QWORD *)this - 1));
    *(_OWORD *)(v5 + 8) = xmmword_1968DF3C0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    *(_QWORD *)(v5 + 16) = v6;
    result = (uint64_t)WebCore::InspectorPageAgent::defaultUserPreferencesDidChange(v3);
    v8 = 0;
    *a2 = 0;
  }
  a2[8] = v8;
  return result;
}

uint64_t WebCore::InspectorPageAgent::setShowPaintRects@<X0>(WebCore::InspectorPageAgent *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  *((_BYTE *)this + 153) = (_BYTE)a2;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 96))(*((_QWORD *)this + 8));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 88))(*((_QWORD *)this + 8));
  if ((result & 1) == 0)
    result = WebCore::InspectorOverlay::setShowPaintRects(*((_QWORD *)this + 9), a2);
  *a3 = 0;
  a3[8] = 0;
  return result;
}

WTF::StringImpl *WebCore::InspectorPageAgent::overrideUserAgent@<X0>(WebCore::InspectorPageAgent *this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  _DWORD *v5;
  WTF::StringImpl *result;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *a3 = 0;
  a3[8] = 0;
  return result;
}

void WebCore::InspectorPageAgent::setEmulatedMedia(const WTF::StringImpl **this@<X0>, WTF **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  WTF::StringImpl *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;

  if (WTF::equal(*a2, this[17], a3))
    goto LABEL_12;
  v8 = *a2;
  if (*a2)
  {
    if ((*((_BYTE *)v8 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v8 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v8, v7);
      v8 = v15;
    }
  }
  v9 = this[17];
  this[17] = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::Page::updateStyleAfterChangeInEnvironment(this[7]);
  v10 = *((_QWORD *)this[7] + 20);
  v11 = v10 && *(_BYTE *)(v10 + 144) == 0;
  if (v11 && (v12 = *(_QWORD *)(v10 + 296)) != 0)
  {
    *(_DWORD *)(v12 + 24) += 2;
    WebCore::Document::updateLayout(v12, 0, 0);
    v14 = *(_QWORD *)(v12 + 2288);
    if (v14)
      WebCore::MediaQueryMatcher::evaluateAll(v14, 1);
    *a4 = 0;
    a4[8] = 0;
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v13);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  else
  {
LABEL_12:
    *a4 = 0;
    a4[8] = 0;
  }
}

uint64_t `non-virtual thunk to'WebCore::InspectorPageAgent::disable@<X0>(WebCore::InspectorPageAgent *this@<X0>, _BYTE *a2@<X8>)
{
  return WebCore::InspectorPageAgent::disable((WebCore::InspectorPageAgent *)((char *)this - 32), a2);
}

void WebCore::InspectorPageAgent::reload(uint64_t a1@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  char v7;
  BOOL v8;
  int v9;
  BOOL v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 160);
  if (v5)
    v6 = *(_BYTE *)(v5 + 144) == 0;
  else
    v6 = 0;
  if (v6)
  {
    if (a3[1])
      v8 = *a3 == 0;
    else
      v8 = 1;
    v9 = v8;
    if (*a2)
      v10 = a2[1] == 0;
    else
      v10 = 1;
    v11 = 2;
    if (v10)
      v11 = 0;
    WebCore::FrameLoader::reload(*(const WTF::URL **)(v5 + 280), v11 | v9);
    v7 = 0;
    *a4 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = 1;
  }
  a4[8] = v7;
}

void `non-virtual thunk to'WebCore::InspectorPageAgent::reload(uint64_t a1@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  char v7;
  BOOL v8;
  int v9;
  BOOL v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 160);
  if (v5)
    v6 = *(_BYTE *)(v5 + 144) == 0;
  else
    v6 = 0;
  if (v6)
  {
    if (a3[1])
      v8 = *a3 == 0;
    else
      v8 = 1;
    v9 = v8;
    if (*a2)
      v10 = a2[1] == 0;
    else
      v10 = 1;
    v11 = 2;
    if (v10)
      v11 = 0;
    WebCore::FrameLoader::reload(*(const WTF::URL **)(v5 + 280), v11 | v9);
    v7 = 0;
    *a4 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = 1;
  }
  a4[8] = v7;
}

void WebCore::InspectorPageAgent::navigate(WebCore::InspectorPageAgent *this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebCore::FrameLoader *v18;
  WTF::StringImpl *v19;
  void *v20;
  WebCore::Node *v21[39];
  char v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  char v28;
  WTF::StringImpl *v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[7];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  char v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*((_QWORD *)this + 7) + 160);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 296);
    LOBYTE(v46) = 0;
    v47 = 0;
    WebCore::UserGestureIndicator::UserGestureIndicator(&v45, 257, v7, 1, 0, &v46, 1);
    WebCore::Document::completeURL(*(WebCore::Document **)(v4 + 296), a2, *(_QWORD *)(v4 + 296) + 848, 0, (WTF::URL *)&v25);
    v8 = v25;
    if (v25)
      *(_DWORD *)v25 += 2;
    v30 = v26;
    v31 = v27;
    v29 = v8;
    v32[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v32);
    v32[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v32[6] = v21[0];
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0x10000;
    v10 = v37 & 0x80 | 4;
    v37 = v10;
    v38 = 0;
    v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v11 += 2;
      v10 = v37;
    }
    v39 = v11;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = v43 & 0xE0 | 5;
    v37 = v10 | 2;
    v44 = 0;
    v12 = v25;
    v25 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *(_DWORD **)(v4 + 296);
    v13[6] += 2;
    v21[0] = (WebCore::Node *)v13;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v13 + 48), v9);
    v15 = v14;
    WTF::AtomStringImpl::add();
    v16 = v25;
    v23 = 0;
    v24 = v25;
    WebCore::FrameLoadRequest::FrameLoadRequest((uint64_t)&v25, (uint64_t *)v21, v15, (uint64_t)&v29, (_DWORD **)&v24, 1, &v23);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (v21[0])
    {
      if (*((_DWORD *)v21[0] + 6) == 2)
      {
        if ((*((_WORD *)v21[0] + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21[0], v17);
      }
      else
      {
        *((_DWORD *)v21[0] + 6) -= 2;
      }
    }
    v28 = 0;
    v18 = *(WebCore::FrameLoader **)(v4 + 280);
    LOBYTE(v21[0]) = 0;
    v22 = 0;
    WebCore::FrameLoader::changeLocation(v18, (uint64_t)&v25, 0, (const WebCore::Document *)v21);
    if (v22)
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v21, v19);
    *a3 = 0;
    a3[8] = 0;
    WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)&v25, v19);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v29, v20);
    WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v45);
  }
  else
  {
    *a3 = 0;
    a3[8] = 0;
  }
}

void `non-virtual thunk to'WebCore::InspectorPageAgent::navigate(WebCore::InspectorPageAgent *this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  WebCore::InspectorPageAgent::navigate((WebCore::InspectorPageAgent *)((char *)this - 32), a2, a3);
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorPageAgent::overrideUserAgent@<X0>(WebCore::InspectorPageAgent *this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  _DWORD *v5;
  WTF::StringImpl *result;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *a3 = 0;
  a3[8] = 0;
  return result;
}

uint64_t WebCore::InspectorPageAgent::overrideSetting@<X0>(uint64_t result@<X0>, WTF::StringImpl *a2@<X1>, _WORD *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  unsigned int v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v14;
  int v15;
  unsigned int v17;
  int v18;
  unsigned int v20;
  int v21;
  unsigned int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = result;
  v6 = *(_QWORD *)(*(_QWORD *)(result + 56) + 112);
  switch((int)a2)
  {
    case 206:
      v7 = *(uint64_t (**)(void))(**(_QWORD **)(result + 64) + 144);
      goto LABEL_75;
    case 207:
      v8 = (unsigned __int16)*a3;
      v9 = *(unsigned __int8 *)(v6 + 233);
      if (v8 < 0x100 || v9 == 0)
      {
        if (v8 > 0xFF == (v9 != 0))
          goto LABEL_76;
      }
      else if (*(unsigned __int8 *)(v6 + 232) == v8)
      {
        goto LABEL_76;
      }
      *(_WORD *)(v6 + 232) = v8;
      goto LABEL_69;
    case 208:
      v11 = (unsigned __int16)*a3;
      v12 = *(unsigned __int8 *)(v6 + 235);
      if (v11 < 0x100 || v12 == 0)
      {
        if (v11 > 0xFF == (v12 != 0))
          goto LABEL_76;
      }
      else if (*(unsigned __int8 *)(v6 + 234) == v11)
      {
        goto LABEL_76;
      }
      *(_WORD *)(v6 + 234) = v11;
      v26 = *(_QWORD *)(v6 + 8);
      if (!v26)
        goto LABEL_76;
      v27 = *(_QWORD *)(v26 + 8);
      if (!v27)
        goto LABEL_76;
      v28 = *(_QWORD *)(v27 + 112);
      if (*(_BYTE *)(v28 + 235))
      {
        if (!*(_BYTE *)(v28 + 234))
          goto LABEL_57;
      }
      else if ((*(_QWORD *)(v28 + 680) & 0x400000) == 0)
      {
LABEL_57:
        *(_BYTE *)(v27 + 1094) = 0;
        result = WebCore::RTCController::disableICECandidateFilteringForAllOrigins(*(WebCore::RTCController **)(v27 + 304));
        goto LABEL_76;
      }
      *(_BYTE *)(v27 + 1094) = 1;
      result = WebCore::RTCController::enableICECandidateFiltering(*(WebCore::RTCController **)(v27 + 304), a2);
LABEL_76:
      *a4 = 0;
      a4[8] = 0;
      return result;
    case 209:
      v7 = *(uint64_t (**)(void))(**(_QWORD **)(result + 64) + 144);
      goto LABEL_75;
    case 210:
      v14 = (unsigned __int16)*a3;
      v15 = *(unsigned __int8 *)(v6 + 237);
      if (v14 < 0x100 || v15 == 0)
      {
        if (v14 > 0xFF == (v15 != 0))
          goto LABEL_76;
      }
      else if (*(unsigned __int8 *)(v6 + 236) == v14)
      {
        goto LABEL_76;
      }
      *(_WORD *)(v6 + 236) = v14;
      result = WebCore::TimerBase::start((double *)(v6 + 24), 0.0, 0.0);
      goto LABEL_76;
    case 211:
      *(_WORD *)(v6 + 238) = *a3;
      goto LABEL_76;
    case 212:
      v17 = (unsigned __int16)*a3;
      v18 = *(unsigned __int8 *)(v6 + 241);
      if (v17 < 0x100 || v18 == 0)
      {
        if (v17 > 0xFF == (v18 != 0))
          goto LABEL_74;
      }
      else if (*(unsigned __int8 *)(v6 + 240) == v17)
      {
        goto LABEL_74;
      }
      *(_WORD *)(v6 + 240) = v17;
      v29 = *(_QWORD *)(v6 + 8);
      if (v29 && (v30 = *(_QWORD *)(v29 + 8)) != 0)
      {
        v31 = *(_QWORD *)(v30 + 112);
        if (*(_BYTE *)(v31 + 241))
          v32 = *(unsigned __int8 *)(v31 + 240) != 0;
        else
          v32 = (*(_QWORD *)(v31 + 712) >> 26) & 1;
      }
      else
      {
        v32 = 0;
      }
      WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled(v32);
LABEL_74:
      v7 = *(uint64_t (**)(void))(**(_QWORD **)(v5 + 64) + 144);
LABEL_75:
      result = v7();
      goto LABEL_76;
    case 213:
      *(_WORD *)(v6 + 242) = *a3;
      goto LABEL_76;
    case 214:
      *(_WORD *)(v6 + 244) = *a3;
      goto LABEL_76;
    case 215:
      v20 = (unsigned __int16)*a3;
      v21 = *(unsigned __int8 *)(v6 + 247);
      if (v20 < 0x100 || v21 == 0)
      {
        if (v20 > 0xFF == (v21 != 0))
          goto LABEL_76;
      }
      else if (*(unsigned __int8 *)(v6 + 246) == v20)
      {
        goto LABEL_76;
      }
      *(_WORD *)(v6 + 246) = v20;
      goto LABEL_69;
    case 216:
      v23 = (unsigned __int16)*a3;
      v24 = *(unsigned __int8 *)(v6 + 249);
      if (v23 < 0x100 || v24 == 0)
      {
        if (v23 > 0xFF == (v24 != 0))
          goto LABEL_76;
      }
      else if (*(unsigned __int8 *)(v6 + 248) == v23)
      {
        goto LABEL_76;
      }
      *(_WORD *)(v6 + 248) = v23;
LABEL_69:
      v33 = *(_QWORD *)(v6 + 8);
      if (v33)
      {
        result = *(_QWORD *)(v33 + 8);
        if (result)
          result = WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)result);
      }
      goto LABEL_76;
    case 217:
      *(_WORD *)(v6 + 250) = *a3;
      goto LABEL_76;
    default:
      goto LABEL_76;
  }
}

uint64_t `non-virtual thunk to'WebCore::InspectorPageAgent::overrideSetting@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, _WORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorPageAgent::overrideSetting(a1 - 32, a2, a3, a4);
}

WebCore::InspectorPageAgent *WebCore::InspectorPageAgent::overrideUserPreference@<X0>(WebCore::InspectorPageAgent *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  char v5;
  char v6;
  WebCore::Page *v7;
  __int16 v8;
  char v9;
  char v10;
  __int16 *v11;

  if (a2 != 220)
  {
    if (a2 == 219)
    {
      if (*(_BYTE *)(a3 + 4) != 0 && *(_DWORD *)a3 == 221)
        v9 = 2;
      else
        v9 = 0;
      if (*(_BYTE *)(a3 + 4) != 0 && *(_DWORD *)a3 == 223)
        v10 = 1;
      else
        v10 = v9;
      v7 = (WebCore::Page *)*((_QWORD *)result + 7);
      *(_BYTE *)(*((_QWORD *)v7 + 14) + 374) = v10;
      goto LABEL_22;
    }
    if (a2 == 218)
    {
      if (*(_BYTE *)(a3 + 4) != 0 && *(_DWORD *)a3 == 221)
        v5 = 2;
      else
        v5 = 0;
      if (*(_BYTE *)(a3 + 4) != 0 && *(_DWORD *)a3 == 222)
        v6 = 1;
      else
        v6 = v5;
      v7 = (WebCore::Page *)*((_QWORD *)result + 7);
      *(_BYTE *)(*((_QWORD *)v7 + 14) + 375) = v6;
LABEL_22:
      result = WebCore::Page::accessibilitySettingsDidChange(v7);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  if (!*(_BYTE *)(a3 + 4))
  {
    result = (WebCore::InspectorPageAgent *)*((_QWORD *)result + 7);
    if (!*((_BYTE *)result + 454))
      goto LABEL_29;
    v8 = 0;
    v11 = (__int16 *)((char *)result + 453);
    goto LABEL_28;
  }
  if (*(_DWORD *)a3 == 224)
  {
    v8 = 256;
  }
  else
  {
    if (*(_DWORD *)a3 != 225)
      goto LABEL_29;
    v8 = 257;
  }
  result = (WebCore::InspectorPageAgent *)*((_QWORD *)result + 7);
  v11 = (__int16 *)((char *)result + 453);
  if (!*((_BYTE *)result + 454) || *(unsigned __int8 *)v11 != v8)
  {
LABEL_28:
    *v11 = v8;
    result = (WebCore::InspectorPageAgent *)WebCore::Page::appearanceDidChange(result);
  }
LABEL_29:
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WebCore::InspectorPageAgent *`non-virtual thunk to'WebCore::InspectorPageAgent::overrideUserPreference@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorPageAgent::overrideUserPreference((WebCore::InspectorPageAgent *)(a1 - 32), a2, a3, a4);
}

WTF::JSONImpl::Object *WebCore::InspectorPageAgent::getCookies@<X0>(WebCore::InspectorPageAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  WebCore::Cookie *v5;
  uint64_t v6;
  WebCore::InspectorPageAgent *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  WebCore::LocalFrame *v16;
  int v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  __int128 v21;
  void *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  char *v28;
  int v29;
  _DWORD *v30;
  _DWORD *v31;
  _QWORD *v32;
  _OWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  __int128 v36;
  _QWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  void *v41;
  uint64_t v42;
  WTF *v43;
  _OWORD *v44;
  _OWORD *v45;
  int v46;
  unsigned int v47;
  uint64_t *v48;
  int i;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  __int128 v62;
  _DWORD *v63;
  _DWORD *v64;
  __int128 v65;
  uint64_t v66;
  void *v67;
  int v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  _DWORD *v73;
  void *v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  unsigned int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  WTF *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  WTF::JSONImpl::Object *result;
  WTF::StringImpl *v94;
  const char *v95;
  const char *v96;
  const char *v97;
  const char *v98;
  const char *v99;
  uint64_t v100;
  const WTF::String *v101;
  WTF::StringImpl *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  _DWORD *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  const WTF::String *v110;
  WTF::StringImpl *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  _DWORD *v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  const WTF::String *v119;
  WTF::StringImpl *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  _DWORD *v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  const WTF::String *v128;
  WTF::StringImpl *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  _DWORD *v134;
  WTF::StringImpl *v135;
  double v136;
  uint64_t v137;
  WTF::JSONImpl::Value *v138;
  WTF::StringImpl *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  _DWORD *v144;
  WTF::StringImpl *v145;
  WTF::JSONImpl::Value *v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  _DWORD *v153;
  WTF::StringImpl *v154;
  WTF::JSONImpl::Value *v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  _DWORD *v162;
  WTF::StringImpl *v163;
  WTF::JSONImpl::Value *v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  _DWORD *v171;
  WTF::StringImpl *v172;
  int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  const WTF::String *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  _DWORD *v182;
  WTF::StringImpl *v183;
  uint64_t v184;
  unint64_t v185;
  const char *v186;
  const char *v187;
  const char *v188;
  const char *v189;
  const char *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  void *v194;
  void *v195;
  _QWORD *v196;
  _DWORD **v197;
  uint64_t v198;
  _DWORD *v199;
  _DWORD **v200;
  uint64_t v201;
  _DWORD *v202;
  _DWORD **v203;
  uint64_t v204;
  _DWORD *v205;
  _DWORD **v206;
  uint64_t v207;
  _DWORD *v208;
  _DWORD **v209;
  uint64_t v210;
  _DWORD *v211;
  _DWORD **v212;
  uint64_t v213;
  _DWORD *v214;
  _DWORD **v215;
  uint64_t v216;
  _DWORD *v217;
  _DWORD **v218;
  uint64_t v219;
  _DWORD *v220;
  _DWORD **v221;
  uint64_t v222;
  _DWORD *v223;
  WTF::JSONImpl::Object *v224;
  WTF *v225;
  void *v226;
  WebCore::InspectorPageAgent *v227;
  uint64_t v228;
  uint64_t v229;
  _DWORD *v230;
  _QWORD *v231;
  _DWORD *v232;
  WebCore::Cookie *v233;
  WebCore::Cookie *v234;
  WTF *v235;
  uint64_t v236;
  _DWORD *v237;
  WTF *v238;
  WebCore::Cookie *v239;
  _DWORD *v240;
  uint64_t v241;
  uint64_t v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  WTF *v245;
  uint64_t v246;
  char v247;

  v3 = *(_QWORD *)(*((_QWORD *)this + 7) + 160);
  if (!v3)
  {
    v4 = 0;
    v5 = 0;
    goto LABEL_145;
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  while (1)
  {
LABEL_3:
    v7 = (WebCore::InspectorPageAgent *)v3;
    if (!*(_BYTE *)(v3 + 144))
    {
      v10 = *(_QWORD *)(v3 + 296);
      if (v10)
      {
        v231 = (_QWORD *)*((_QWORD *)v7 + 37);
        v11 = *(_QWORD *)(v10 + 528);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 24);
            if (v13)
            {
              if (*(_QWORD *)(v13 + 8))
              {
                v240 = 0;
                v241 = 0;
                v14 = *(_QWORD *)(*((_QWORD *)v7 + 35) + 88);
                if ((*(_BYTE *)(v14 + 1056) & 1) == 0)
                {
                  WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v14 + 872));
                  *(_BYTE *)(v14 + 1056) |= 1u;
                }
                v233 = v5;
                v228 = a2;
                v15 = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v240, 1uLL, v14 + 872);
                v17 = HIDWORD(v241);
                v18 = v240;
                v19 = *(_DWORD **)v15;
                if (*(_QWORD *)v15)
                  *v19 += 2;
                v20 = &v18[10 * v17];
                *(_QWORD *)v20 = v19;
                v21 = *(_OWORD *)(v15 + 24);
                *(_OWORD *)(v20 + 2) = *(_OWORD *)(v15 + 8);
                *(_OWORD *)(v20 + 6) = v21;
                HIDWORD(v241) = v17 + 1;
                v227 = v7;
                WebCore::InspectorPageAgent::cachedResourcesForFrame(v7, v16, (uint64_t)&v245);
                v23 = v245;
                v24 = v6;
                if (HIDWORD(v246))
                {
                  v25 = 8 * HIDWORD(v246);
                  v26 = v245;
                  do
                  {
                    v27 = *(_QWORD *)v26;
                    v28 = (char *)(*(_QWORD *)v26 + 160);
                    if ((*(_BYTE *)(*(_QWORD *)v26 + 344) & 1) == 0)
                    {
                      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(*(_QWORD *)v26 + 160));
                      *(_BYTE *)(v27 + 344) |= 1u;
                    }
                    v29 = HIDWORD(v241);
                    if (HIDWORD(v241) == (_DWORD)v241)
                    {
                      v28 = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v240, HIDWORD(v241) + 1, (unint64_t)v28);
                      v29 = HIDWORD(v241);
                      v30 = v240;
                      v31 = *(_DWORD **)v28;
                      v24 = v6;
                      if (*(_QWORD *)v28)
                        *v31 += 2;
                      v32 = &v30[10 * v29];
                      *v32 = v31;
                      v33 = v32 + 1;
                    }
                    else
                    {
                      v34 = v240;
                      v35 = *(_DWORD **)v28;
                      v24 = v6;
                      if (*(_QWORD *)v28)
                        *v35 += 2;
                      *(_QWORD *)&v34[10 * v29] = v35;
                      v33 = &v34[10 * v29 + 2];
                    }
                    v36 = *(_OWORD *)(v28 + 24);
                    *v33 = *(_OWORD *)(v28 + 8);
                    v33[1] = v36;
                    HIDWORD(v241) = v29 + 1;
                    v26 = (WTF *)((char *)v26 + 8);
                    v25 -= 8;
                  }
                  while (v25);
                }
                if (v23)
                  WTF::fastFree(v23, v22);
                v37 = v231;
                if (HIDWORD(v241))
                {
                  v38 = v240;
                  v230 = &v240[10 * HIDWORD(v241)];
                  do
                  {
                    v245 = 0;
                    v246 = 0;
                    v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37[66] + 8) + 24) + 8) + 888);
                    v232 = v38;
                    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
                    v42 = HIDWORD(v246);
                    v43 = v245;
                    if (v40)
                    {
                      if (HIDWORD(v246))
                      {
                        v238 = (WTF *)((char *)v245 + 136 * HIDWORD(v246));
                        while (1)
                        {
                          v44 = v4;
                          if (!v4)
                          {
                            v45 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x50);
                            *v45 = xmmword_1968A5190;
                            v44 = v45 + 1;
                          }
                          v46 = *((_DWORD *)v44 - 2);
                          v47 = objc_msgSend((id)WebCore::Cookie::operator NSHTTPCookie *((uint64_t)v43), "hash");
                          v48 = 0;
                          for (i = 1; ; ++i)
                          {
                            v50 = v47 & v46;
                            v51 = (uint64_t *)v44 + (v47 & v46);
                            v52 = *v51;
                            if (*v51 == -1)
                            {
                              v48 = (uint64_t *)v44 + v50;
                              goto LABEL_65;
                            }
                            if (!v52)
                              break;
                            v53 = !*(_QWORD *)v52
                               && !*(_QWORD *)(v52 + 8)
                               && !*(_QWORD *)(v52 + 16)
                               && !*(_QWORD *)(v52 + 24)
                               && *(double *)(v52 + 32) == 0.0
                               && !*(_BYTE *)(v52 + 48)
                               && !*(_BYTE *)(v52 + 56)
                               && !*(_BYTE *)(v52 + 57)
                               && !*(_BYTE *)(v52 + 58)
                               && !*(_QWORD *)(v52 + 64)
                               && *(_QWORD *)(v52 + 72) == 0;
                            v54 = 0;
                            if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)v43), (int32x4_t)vceqzq_s64(*((int64x2_t *)v43 + 1)))))) & 1) == 0&& !*((_QWORD *)v43 + 8)&& !((*((_BYTE *)v43 + 48) | *((_BYTE *)v43 + 56)) | (*((_BYTE *)v43 + 57) | *((_BYTE *)v43 + 58)))&& *((double *)v43 + 4) == 0.0)
                            {
                              v54 = *((_QWORD *)v43 + 9) == 0;
                            }
                            if ((v53 | v54) == 1)
                            {
                              if (v53 == v54)
                                goto LABEL_87;
                            }
                            else
                            {
                              v55 = (void *)WebCore::Cookie::operator NSHTTPCookie *(v52);
                              if ((objc_msgSend(v55, "isEqual:", WebCore::Cookie::operator NSHTTPCookie *((uint64_t)v43)) & 1) != 0)
                              {
LABEL_87:
                                v4 = v44;
                                goto LABEL_106;
                              }
                            }
LABEL_65:
                            v47 = i + v50;
                          }
                          if (v48)
                          {
                            *v48 = 0;
                            --*((_DWORD *)v44 - 4);
                            v51 = v48;
                          }
                          v56 = WTF::fastMalloc((WTF *)0x98);
                          v57 = v56;
                          v58 = *(_DWORD **)v43;
                          if (*(_QWORD *)v43)
                            *v58 += 2;
                          *(_QWORD *)v56 = v58;
                          v59 = (_DWORD *)*((_QWORD *)v43 + 1);
                          if (v59)
                            *v59 += 2;
                          *(_QWORD *)(v56 + 8) = v59;
                          v60 = (_DWORD *)*((_QWORD *)v43 + 2);
                          if (v60)
                            *v60 += 2;
                          *(_QWORD *)(v56 + 16) = v60;
                          v61 = (_DWORD *)*((_QWORD *)v43 + 3);
                          if (v61)
                            *v61 += 2;
                          *(_QWORD *)(v56 + 24) = v61;
                          v62 = *((_OWORD *)v43 + 2);
                          *(_OWORD *)(v56 + 43) = *(_OWORD *)((char *)v43 + 43);
                          *(_OWORD *)(v56 + 32) = v62;
                          v63 = (_DWORD *)*((_QWORD *)v43 + 8);
                          if (v63)
                            *v63 += 2;
                          *(_QWORD *)(v56 + 64) = v63;
                          v64 = (_DWORD *)*((_QWORD *)v43 + 9);
                          if (v64)
                            *v64 += 2;
                          *(_QWORD *)(v56 + 72) = v64;
                          v65 = *((_OWORD *)v43 + 6);
                          *(_OWORD *)(v56 + 80) = *((_OWORD *)v43 + 5);
                          *(_OWORD *)(v56 + 96) = v65;
                          v66 = *((unsigned int *)v43 + 31);
                          *(_QWORD *)(v56 + 112) = 0;
                          *(_QWORD *)(v56 + 120) = 0;
                          *(_DWORD *)(v56 + 124) = v66;
                          if ((_DWORD)v66)
                          {
                            if ((v66 & 0x80000000) != 0)
                            {
LABEL_335:
                              __break(0xC471u);
                              JUMPOUT(0x195E504FCLL);
                            }
                            v67 = (void *)WTF::fastMalloc((WTF *)(2 * v66));
                            *(_DWORD *)(v57 + 120) = v66;
                            *(_QWORD *)(v57 + 112) = v67;
                            memcpy(v67, *((const void **)v43 + 14), 2 * *((unsigned int *)v43 + 31));
                          }
                          *(_BYTE *)(v57 + 128) = *((_BYTE *)v43 + 128);
                          *(_QWORD *)(v57 + 136) = 0;
                          *(_QWORD *)(v57 + 144) = 0;
                          *v51 = v57;
                          v68 = *((_DWORD *)v44 - 4);
                          v69 = *((_DWORD *)v44 - 3) + 1;
                          *((_DWORD *)v44 - 3) = v69;
                          v70 = (v68 + v69);
                          v71 = *((unsigned int *)v44 - 1);
                          if (v71 > 0x400)
                          {
                            if (v71 <= 2 * v70)
                              goto LABEL_89;
LABEL_86:
                            v4 = v44;
                          }
                          else
                          {
                            if (3 * v71 > 4 * v70)
                              goto LABEL_86;
                            if ((_DWORD)v71)
                            {
LABEL_89:
                              v235 = (WTF *)(v44 - 1);
                              v236 = v24;
                              v72 = (_DWORD)v71 << (6 * v69 >= (2 * v71));
                            }
                            else
                            {
                              v235 = (WTF *)(v44 - 1);
                              v236 = v24;
                              v72 = 8;
                            }
                            v73 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v72 + 16));
                            v4 = v73 + 4;
                            v73[2] = v72 - 1;
                            v73[3] = v72;
                            *v73 = 0;
                            v73[1] = v69;
                            if ((_DWORD)v71)
                            {
                              v75 = v73;
                              v76 = 0;
                              v77 = 0;
                              do
                              {
                                v78 = (uint64_t *)v44 + v76;
                                if ((unint64_t)(*v78 + 1) >= 2)
                                {
                                  v79 = v75[2];
                                  v80 = objc_msgSend((id)WebCore::Cookie::operator NSHTTPCookie *(*v78), "hash");
                                  v81 = 0;
                                  do
                                  {
                                    v82 = v80 & v79;
                                    v80 = ++v81 + v82;
                                  }
                                  while (*(_QWORD *)&v4[2 * v82]);
                                  *(_QWORD *)&v4[2 * v82] = *v78;
                                  if (v78 == v51)
                                    v77 = (uint64_t *)&v4[2 * v82];
                                }
                                ++v76;
                              }
                              while (v76 != v71);
                            }
                            else
                            {
                              v77 = 0;
                            }
                            WTF::fastFree(v235, v74);
                            v57 = *v77;
                            v24 = v236;
                          }
                          *(_QWORD *)(v57 + 136) = v24;
                          *(_QWORD *)(v57 + 144) = 0;
                          if (v24)
                            *(_QWORD *)(v24 + 144) = v57;
                          else
                            v233 = (WebCore::Cookie *)v57;
                          v24 = v57;
LABEL_106:
                          v43 = (WTF *)((char *)v43 + 136);
                          if (v43 == v238)
                          {
                            v42 = HIDWORD(v246);
                            v43 = v245;
                            goto LABEL_110;
                          }
                        }
                      }
                    }
                    else
                    {
LABEL_110:
                      if (v42)
                      {
                        v83 = 136 * v42;
                        v84 = (char *)v43 + 64;
                        do
                        {
                          v85 = (WTF *)*((_QWORD *)v84 + 6);
                          if (v85)
                          {
                            *((_QWORD *)v84 + 6) = 0;
                            *((_DWORD *)v84 + 14) = 0;
                            WTF::fastFree(v85, v41);
                          }
                          v86 = (WTF::StringImpl *)*((_QWORD *)v84 + 1);
                          *((_QWORD *)v84 + 1) = 0;
                          if (v86)
                          {
                            if (*(_DWORD *)v86 == 2)
                              WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v41);
                            else
                              *(_DWORD *)v86 -= 2;
                          }
                          v87 = *(WTF::StringImpl **)v84;
                          *(_QWORD *)v84 = 0;
                          if (v87)
                          {
                            if (*(_DWORD *)v87 == 2)
                              WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v41);
                            else
                              *(_DWORD *)v87 -= 2;
                          }
                          v88 = (WTF::StringImpl *)*((_QWORD *)v84 - 5);
                          *((_QWORD *)v84 - 5) = 0;
                          if (v88)
                          {
                            if (*(_DWORD *)v88 == 2)
                              WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v41);
                            else
                              *(_DWORD *)v88 -= 2;
                          }
                          v89 = (WTF::StringImpl *)*((_QWORD *)v84 - 6);
                          *((_QWORD *)v84 - 6) = 0;
                          if (v89)
                          {
                            if (*(_DWORD *)v89 == 2)
                              WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v41);
                            else
                              *(_DWORD *)v89 -= 2;
                          }
                          v90 = (WTF::StringImpl *)*((_QWORD *)v84 - 7);
                          *((_QWORD *)v84 - 7) = 0;
                          if (v90)
                          {
                            if (*(_DWORD *)v90 == 2)
                              WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v41);
                            else
                              *(_DWORD *)v90 -= 2;
                          }
                          v91 = (WTF::StringImpl *)*((_QWORD *)v84 - 8);
                          *((_QWORD *)v84 - 8) = 0;
                          if (v91)
                          {
                            if (*(_DWORD *)v91 == 2)
                              WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v41);
                            else
                              *(_DWORD *)v91 -= 2;
                          }
                          v84 += 136;
                          v83 -= 136;
                        }
                        while (v83);
                        v43 = v245;
                      }
                    }
                    if (v43)
                    {
                      v245 = 0;
                      LODWORD(v246) = 0;
                      WTF::fastFree(v43, v41);
                    }
                    v37 = v231;
                    v38 = v232 + 10;
                  }
                  while (v232 + 10 != v230);
                }
                v6 = v24;
                WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v240, v37);
                v7 = v227;
                a2 = v228;
                v5 = v233;
              }
            }
          }
        }
      }
    }
    v3 = *((_QWORD *)v7 + 11);
    if (!v3)
    {
      v8 = *(_QWORD *)(*((_QWORD *)v7 + 6) + 8);
      if (!v8)
        goto LABEL_145;
      v3 = *((_QWORD *)v7 + 9);
      if (!v3)
        break;
    }
  }
  while (1)
  {
    v9 = *(_QWORD *)(v8 + 56);
    if (!v9)
      break;
    v8 = *(_QWORD *)(v9 + 8);
    if (!v8)
      break;
    v3 = *(_QWORD *)(v8 + 72);
    if (v3)
      goto LABEL_3;
  }
LABEL_145:
  v92 = WTF::fastMalloc((WTF *)0x20);
  result = (WTF::JSONImpl::Object *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v92);
  if (v5)
  {
    v229 = a2;
    v95 = "name";
    v96 = "value";
    v97 = "domain";
    v98 = "path";
    v99 = "expires";
    v234 = v5;
    v237 = v4;
    do
    {
      WTF::JSONImpl::Object::create(result);
      v100 = v242;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v5, v101);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v100 + 16), &v244, (const WTF::StringImpl *)&v240, (uint64_t)&v245);
      if (v247)
      {
        v103 = (uint64_t *)(v100 + 24);
        v104 = *(unsigned int *)(v100 + 36);
        if ((_DWORD)v104 == *(_DWORD *)(v100 + 32))
        {
          v197 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v103, v104 + 1, (unint64_t)&v244);
          v104 = *(unsigned int *)(v100 + 36);
          v198 = *(_QWORD *)(v100 + 24);
          v199 = *v197;
          if (*v197)
            *v199 += 2;
          *(_QWORD *)(v198 + 8 * v104) = v199;
        }
        else
        {
          v105 = *v103;
          v106 = v244;
          if (v244)
            *(_DWORD *)v244 += 2;
          *(_QWORD *)(v105 + 8 * v104) = v106;
        }
        *(_DWORD *)(v100 + 36) = v104 + 1;
      }
      v107 = v240;
      v240 = 0;
      if (v107)
      {
        if (*v107 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v107;
      }
      v108 = v244;
      v244 = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 2)
          WTF::StringImpl::destroy(v108, v102);
        else
          *(_DWORD *)v108 -= 2;
      }
      v109 = v242;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WebCore::Cookie *)((char *)v5 + 8), v110);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v109 + 16), &v244, (const WTF::StringImpl *)&v240, (uint64_t)&v245);
      if (v247)
      {
        v112 = (uint64_t *)(v109 + 24);
        v113 = *(unsigned int *)(v109 + 36);
        if ((_DWORD)v113 == *(_DWORD *)(v109 + 32))
        {
          v200 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, v113 + 1, (unint64_t)&v244);
          v113 = *(unsigned int *)(v109 + 36);
          v201 = *(_QWORD *)(v109 + 24);
          v202 = *v200;
          if (*v200)
            *v202 += 2;
          *(_QWORD *)(v201 + 8 * v113) = v202;
        }
        else
        {
          v114 = *v112;
          v115 = v244;
          if (v244)
            *(_DWORD *)v244 += 2;
          *(_QWORD *)(v114 + 8 * v113) = v115;
        }
        *(_DWORD *)(v109 + 36) = v113 + 1;
      }
      v116 = v240;
      v240 = 0;
      if (v116)
      {
        if (*v116 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v116;
      }
      v117 = v244;
      v244 = 0;
      if (v117)
      {
        if (*(_DWORD *)v117 == 2)
          WTF::StringImpl::destroy(v117, v111);
        else
          *(_DWORD *)v117 -= 2;
      }
      v118 = v242;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WebCore::Cookie *)((char *)v5 + 16), v119);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v118 + 16), &v244, (const WTF::StringImpl *)&v240, (uint64_t)&v245);
      if (v247)
      {
        v121 = (uint64_t *)(v118 + 24);
        v122 = *(unsigned int *)(v118 + 36);
        if ((_DWORD)v122 == *(_DWORD *)(v118 + 32))
        {
          v203 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v121, v122 + 1, (unint64_t)&v244);
          v122 = *(unsigned int *)(v118 + 36);
          v204 = *(_QWORD *)(v118 + 24);
          v205 = *v203;
          if (*v203)
            *v205 += 2;
          *(_QWORD *)(v204 + 8 * v122) = v205;
        }
        else
        {
          v123 = *v121;
          v124 = v244;
          if (v244)
            *(_DWORD *)v244 += 2;
          *(_QWORD *)(v123 + 8 * v122) = v124;
        }
        *(_DWORD *)(v118 + 36) = v122 + 1;
      }
      v125 = v240;
      v240 = 0;
      if (v125)
      {
        if (*v125 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v125;
      }
      v126 = v244;
      v244 = 0;
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
          WTF::StringImpl::destroy(v126, v120);
        else
          *(_DWORD *)v126 -= 2;
      }
      v127 = v242;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WebCore::Cookie *)((char *)v5 + 24), v128);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v127 + 16), &v244, (const WTF::StringImpl *)&v240, (uint64_t)&v245);
      if (v247)
      {
        v130 = (uint64_t *)(v127 + 24);
        v131 = *(unsigned int *)(v127 + 36);
        if ((_DWORD)v131 == *(_DWORD *)(v127 + 32))
        {
          v206 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v130, v131 + 1, (unint64_t)&v244);
          v131 = *(unsigned int *)(v127 + 36);
          v207 = *(_QWORD *)(v127 + 24);
          v208 = *v206;
          if (*v206)
            *v208 += 2;
          *(_QWORD *)(v207 + 8 * v131) = v208;
        }
        else
        {
          v132 = *v130;
          v133 = v244;
          if (v244)
            *(_DWORD *)v244 += 2;
          *(_QWORD *)(v132 + 8 * v131) = v133;
        }
        *(_DWORD *)(v127 + 36) = v131 + 1;
      }
      v134 = v240;
      v240 = 0;
      if (v134)
      {
        if (*v134 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v134;
      }
      v135 = v244;
      v244 = 0;
      if (v135)
      {
        if (*(_DWORD *)v135 == 2)
          WTF::StringImpl::destroy(v135, v129);
        else
          *(_DWORD *)v135 -= 2;
      }
      if (*((_BYTE *)v5 + 48))
        v136 = *((double *)v5 + 5);
      else
        v136 = 0.0;
      v137 = v242;
      v138 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v138, v136);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v137 + 16), &v244, (const WTF::StringImpl *)&v240, (uint64_t)&v245);
      if (v247)
      {
        v140 = (uint64_t *)(v137 + 24);
        v141 = *(unsigned int *)(v137 + 36);
        if ((_DWORD)v141 == *(_DWORD *)(v137 + 32))
        {
          v209 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v140, v141 + 1, (unint64_t)&v244);
          v141 = *(unsigned int *)(v137 + 36);
          v210 = *(_QWORD *)(v137 + 24);
          v211 = *v209;
          if (*v209)
            *v211 += 2;
          *(_QWORD *)(v210 + 8 * v141) = v211;
        }
        else
        {
          v142 = *v140;
          v143 = v244;
          if (v244)
            *(_DWORD *)v244 += 2;
          *(_QWORD *)(v142 + 8 * v141) = v143;
        }
        *(_DWORD *)(v137 + 36) = v141 + 1;
      }
      v144 = v240;
      v240 = 0;
      if (v144)
      {
        if (*v144 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v144;
      }
      v145 = v244;
      v244 = 0;
      if (v145)
      {
        if (*(_DWORD *)v145 == 2)
          WTF::StringImpl::destroy(v145, v139);
        else
          *(_DWORD *)v145 -= 2;
      }
      v146 = (WTF::JSONImpl::Value *)*((unsigned __int8 *)v5 + 58);
      v147 = v242;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v146);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v147 + 16), &v244, (const WTF::StringImpl *)&v240, (uint64_t)&v245);
      if (v247)
      {
        v149 = (uint64_t *)(v147 + 24);
        v150 = *(unsigned int *)(v147 + 36);
        if ((_DWORD)v150 == *(_DWORD *)(v147 + 32))
        {
          v212 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v149, v150 + 1, (unint64_t)&v244);
          v150 = *(unsigned int *)(v147 + 36);
          v213 = *(_QWORD *)(v147 + 24);
          v214 = *v212;
          if (*v212)
            *v214 += 2;
          *(_QWORD *)(v213 + 8 * v150) = v214;
        }
        else
        {
          v151 = *v149;
          v152 = v244;
          if (v244)
            *(_DWORD *)v244 += 2;
          *(_QWORD *)(v151 + 8 * v150) = v152;
        }
        *(_DWORD *)(v147 + 36) = v150 + 1;
      }
      v153 = v240;
      v240 = 0;
      if (v153)
      {
        if (*v153 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v153;
      }
      v154 = v244;
      v244 = 0;
      if (v154)
      {
        if (*(_DWORD *)v154 == 2)
          WTF::StringImpl::destroy(v154, v148);
        else
          *(_DWORD *)v154 -= 2;
      }
      v155 = (WTF::JSONImpl::Value *)*((unsigned __int8 *)v5 + 56);
      v156 = v242;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v155);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v156 + 16), &v244, (const WTF::StringImpl *)&v240, (uint64_t)&v245);
      if (v247)
      {
        v158 = (uint64_t *)(v156 + 24);
        v159 = *(unsigned int *)(v156 + 36);
        if ((_DWORD)v159 == *(_DWORD *)(v156 + 32))
        {
          v215 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v158, v159 + 1, (unint64_t)&v244);
          v159 = *(unsigned int *)(v156 + 36);
          v216 = *(_QWORD *)(v156 + 24);
          v217 = *v215;
          if (*v215)
            *v217 += 2;
          *(_QWORD *)(v216 + 8 * v159) = v217;
        }
        else
        {
          v160 = *v158;
          v161 = v244;
          if (v244)
            *(_DWORD *)v244 += 2;
          *(_QWORD *)(v160 + 8 * v159) = v161;
        }
        *(_DWORD *)(v156 + 36) = v159 + 1;
      }
      v162 = v240;
      v240 = 0;
      if (v162)
      {
        if (*v162 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v162;
      }
      v163 = v244;
      v244 = 0;
      if (v163)
      {
        if (*(_DWORD *)v163 == 2)
          WTF::StringImpl::destroy(v163, v157);
        else
          *(_DWORD *)v163 -= 2;
      }
      v164 = (WTF::JSONImpl::Value *)*((unsigned __int8 *)v5 + 57);
      v165 = v242;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v164);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v165 + 16), &v244, (const WTF::StringImpl *)&v240, (uint64_t)&v245);
      if (v247)
      {
        v167 = (uint64_t *)(v165 + 24);
        v168 = *(unsigned int *)(v165 + 36);
        if ((_DWORD)v168 == *(_DWORD *)(v165 + 32))
        {
          v218 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v167, v168 + 1, (unint64_t)&v244);
          v168 = *(unsigned int *)(v165 + 36);
          v219 = *(_QWORD *)(v165 + 24);
          v220 = *v218;
          if (*v218)
            *v220 += 2;
          *(_QWORD *)(v219 + 8 * v168) = v220;
        }
        else
        {
          v169 = *v167;
          v170 = v244;
          if (v244)
            *(_DWORD *)v244 += 2;
          *(_QWORD *)(v169 + 8 * v168) = v170;
        }
        *(_DWORD *)(v165 + 36) = v168 + 1;
      }
      v171 = v240;
      v240 = 0;
      if (v171)
      {
        if (*v171 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v171;
      }
      v172 = v244;
      v244 = 0;
      if (v172)
      {
        if (*(_DWORD *)v172 == 2)
          WTF::StringImpl::destroy(v172, v166);
        else
          *(_DWORD *)v172 -= 2;
      }
      v173 = *((unsigned __int8 *)v5 + 128);
      if (v173 == 1)
        v174 = 229;
      else
        v174 = 228;
      if (v173 == 2)
        v175 = 230;
      else
        v175 = v174;
      v176 = v242;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v175);
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v243, v177);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v176 + 16), &v244, (const WTF::StringImpl *)&v240, (uint64_t)&v245);
      if (v247)
      {
        v178 = (uint64_t *)(v176 + 24);
        v179 = *(unsigned int *)(v176 + 36);
        if ((_DWORD)v179 == *(_DWORD *)(v176 + 32))
        {
          v221 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v178, v179 + 1, (unint64_t)&v244);
          v179 = *(unsigned int *)(v176 + 36);
          v222 = *(_QWORD *)(v176 + 24);
          v223 = *v221;
          if (*v221)
            *v223 += 2;
          *(_QWORD *)(v222 + 8 * v179) = v223;
        }
        else
        {
          v180 = *v178;
          v181 = v244;
          if (v244)
            *(_DWORD *)v244 += 2;
          *(_QWORD *)(v180 + 8 * v179) = v181;
        }
        *(_DWORD *)(v176 + 36) = v179 + 1;
      }
      v182 = v240;
      v240 = 0;
      if (v182)
      {
        if (*v182 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v182;
      }
      v183 = v243;
      v243 = 0;
      if (v183)
      {
        if (*(_DWORD *)v183 == 2)
          WTF::StringImpl::destroy(v183, v94);
        else
          *(_DWORD *)v183 -= 2;
      }
      result = v244;
      v244 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(result, v94);
        else
          *(_DWORD *)result -= 2;
      }
      v239 = v5;
      v184 = v242;
      v185 = *(unsigned int *)(v92 + 28);
      if ((_DWORD)v185 == *(_DWORD *)(v92 + 24))
      {
        v186 = v99;
        v187 = v98;
        v188 = v97;
        v189 = v96;
        v190 = v95;
        v191 = v185 + (v185 >> 2);
        if (v191 >= 0x10)
          v192 = v191 + 1;
        else
          v192 = 16;
        if (v192 <= v185 + 1)
          v193 = v185 + 1;
        else
          v193 = v192;
        if (v193 >> 29)
          goto LABEL_335;
        v194 = *(void **)(v92 + 16);
        v195 = (void *)WTF::fastMalloc((WTF *)(8 * v193));
        *(_DWORD *)(v92 + 24) = v193;
        *(_QWORD *)(v92 + 16) = v195;
        result = (WTF::JSONImpl::Object *)memcpy(v195, v194, 8 * v185);
        v95 = v190;
        v96 = v189;
        v97 = v188;
        v98 = v187;
        v99 = v186;
        if (v194)
        {
          if (*(void **)(v92 + 16) == v194)
          {
            *(_QWORD *)(v92 + 16) = 0;
            *(_DWORD *)(v92 + 24) = 0;
          }
          result = (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)v194, v94);
        }
        v185 = *(unsigned int *)(v92 + 28);
        v196 = (_QWORD *)(*(_QWORD *)(v92 + 16) + 8 * v185);
      }
      else
      {
        v196 = (_QWORD *)(*(_QWORD *)(v92 + 16) + 8 * v185);
      }
      *v196 = v184;
      *(_DWORD *)(v92 + 28) = v185 + 1;
      v4 = v237;
      v5 = (WebCore::Cookie *)*((_QWORD *)v239 + 18);
    }
    while (v5);
    *(_QWORD *)v229 = v92;
    *(_DWORD *)(v229 + 8) = 0;
    result = v234;
    do
    {
      v224 = (WTF::JSONImpl::Object *)*((_QWORD *)result + 18);
      WebCore::Cookie::~Cookie(result, v94);
      WTF::fastFree(v225, v226);
      result = v224;
    }
    while (v224);
    if (v237)
      return (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)(v4 - 4), v94);
  }
  else
  {
    *(_QWORD *)a2 = v92;
    *(_DWORD *)(a2 + 8) = 0;
    if (v4)
      return (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)(v4 - 4), v94);
  }
  return result;
}

WTF::JSONImpl::Object *`non-virtual thunk to'WebCore::InspectorPageAgent::getCookies@<X0>(WebCore::InspectorPageAgent *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::InspectorPageAgent::getCookies((WebCore::InspectorPageAgent *)((char *)this - 32), a2);
}

void WebCore::InspectorPageAgent::setCookie(uint64_t a1@<X0>, WTF::JSONImpl::ObjectBase **a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::JSONImpl::ObjectBase *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::JSONImpl::ObjectBase *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::JSONImpl::ObjectBase *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::JSONImpl::ObjectBase *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::JSONImpl::ObjectBase *v26;
  WTF::StringImpl *v27;
  unsigned __int16 Boolean;
  WTF::StringImpl *v29;
  WTF::JSONImpl::ObjectBase *v30;
  WTF::StringImpl *v31;
  unsigned __int16 v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  void *v35;
  _QWORD *v36;
  WTF::JSONImpl::ObjectBase *v37;
  WTF::StringImpl *v38;
  unsigned __int16 v39;
  WTF::StringImpl *v40;
  WTF::JSONImpl::ObjectBase *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::JSONImpl::ObjectBase *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  char v49;
  char v50;
  int v51;
  __int128 v52;
  __int128 v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  WTF::StringImpl *v65[2];
  __int128 v66;
  _OWORD v67[5];
  uint64_t v68;
  uint64_t v69;
  char v70;
  unsigned __int8 v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73[2];
  WTF::StringImpl *v74[6];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char v80;

  LOBYTE(v74[4]) = 0;
  LOWORD(v74[5]) = 0;
  BYTE2(v74[5]) = 0;
  *(_OWORD *)v73 = 0u;
  memset(v74, 0, 25);
  v75 = 0uLL;
  WTF::URL::invalidate((WTF::URL *)((char *)&v75 + 8));
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v6 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString(v6, (const WTF::String *)&v72);
  v8 = v65[0];
  v65[0] = 0;
  v9 = v73[0];
  v73[0] = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
    v65[0] = 0;
  }
  v10 = v72;
  v72 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (!v73[0])
    goto LABEL_46;
  v11 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v72 = v65[0];
  WTF::JSONImpl::ObjectBase::getString(v11, (const WTF::String *)&v72);
  v13 = v65[0];
  v65[0] = 0;
  v14 = v73[1];
  v73[1] = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
    v65[0] = 0;
  }
  v15 = v72;
  v72 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (!v73[1])
    goto LABEL_46;
  v16 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v72 = v65[0];
  WTF::JSONImpl::ObjectBase::getString(v16, (const WTF::String *)&v72);
  v18 = v65[0];
  v65[0] = 0;
  v19 = v74[0];
  v74[0] = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
    v65[0] = 0;
  }
  v20 = v72;
  v72 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (!v74[0])
    goto LABEL_46;
  v21 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v72 = v65[0];
  WTF::JSONImpl::ObjectBase::getString(v21, (const WTF::String *)&v72);
  v23 = v65[0];
  v65[0] = 0;
  v24 = v74[1];
  v74[1] = v23;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
    v65[0] = 0;
  }
  v25 = v72;
  v72 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v22);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (!v74[1])
    goto LABEL_46;
  v26 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v72 = v65[0];
  Boolean = WTF::JSONImpl::ObjectBase::getBoolean(v26, (const WTF::String *)&v72);
  v29 = v72;
  v72 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v27);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (Boolean <= 0xFFu)
    goto LABEL_46;
  LOBYTE(v74[5]) = Boolean;
  v30 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v72 = v65[0];
  v32 = WTF::JSONImpl::ObjectBase::getBoolean(v30, (const WTF::String *)&v72);
  v33 = v72;
  v72 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v31);
    else
      *(_DWORD *)v33 -= 2;
  }
  if (v32 <= 0xFFu)
    goto LABEL_46;
  BYTE1(v74[5]) = v32;
  v37 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v72 = v65[0];
  v39 = WTF::JSONImpl::ObjectBase::getBoolean(v37, (const WTF::String *)&v72);
  v40 = v72;
  v72 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v38);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v72 = v65[0];
  v74[3] = (WTF::StringImpl *)WTF::JSONImpl::ObjectBase::getDouble(v41, (const WTF::String *)&v72);
  LOBYTE(v74[4]) = (_BYTE)v42;
  v43 = v72;
  v72 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  if (v39 > 0xFFu)
  {
    BYTE2(v74[5]) = v39;
    v44 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::ObjectBase::getString(v44, (const WTF::String *)v65);
    v46 = v65[0];
    v65[0] = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
    if (!v72
      || (v47 = Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Page::CookieSameSitePolicy>(),
          (v47 & 0xFF00000000) == 0))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v50 = 0;
      v34 = v65[0];
      LOBYTE(v65[0]) = 0;
      v51 = 1;
      goto LABEL_91;
    }
    if ((_DWORD)v47 == 228)
    {
      v49 = 0;
      v80 = 0;
    }
    else
    {
      if ((_DWORD)v47 == 229)
      {
        v49 = 1;
      }
      else
      {
        if ((_DWORD)v47 != 230)
        {
          v49 = v80;
          goto LABEL_90;
        }
        v49 = 2;
      }
      v80 = v49;
    }
LABEL_90:
    v34 = 0;
    v51 = 0;
    *(_OWORD *)v65 = *(_OWORD *)v73;
    v66 = *(_OWORD *)v74;
    v52 = v75;
    v67[0] = *(_OWORD *)&v74[2];
    *(_OWORD *)((char *)v67 + 11) = *(_OWORD *)((char *)&v74[3] + 3);
    *(_OWORD *)v73 = 0u;
    *(_OWORD *)v74 = 0u;
    v75 = 0u;
    v53 = v76;
    LODWORD(v76) = v76 & 0xFFFFFFFE;
    v68 = v78;
    v67[2] = v52;
    v67[3] = v53;
    v67[4] = v77;
    *(_QWORD *)&v53 = v79;
    v78 = 0;
    v79 = 0;
    v70 = v49;
    v50 = 1;
    v69 = v53;
LABEL_91:
    v71 = v50;
    v54 = v72;
    v72 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v48);
      else
        *(_DWORD *)v54 -= 2;
    }
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v73, v48);
    if (!v51)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 160);
      if (v55)
      {
        while (1)
        {
          do
          {
LABEL_96:
            v56 = (_QWORD *)v55;
            if (!*(_BYTE *)(v55 + 144))
            {
              v36 = *(_QWORD **)(v55 + 296);
              if (v36)
              {
                v59 = v36[66];
                if (v59)
                {
                  v60 = *(_QWORD *)(v59 + 8);
                  if (v60)
                  {
                    v61 = *(_QWORD *)(v60 + 24);
                    if (v61)
                    {
                      v62 = *(_QWORD *)(v61 + 8);
                      if (v62)
                      {
                        if (!v71)
                          goto LABEL_118;
                        (*(void (**)(_QWORD))(**(_QWORD **)(v62 + 888) + 48))(*(_QWORD *)(v62 + 888));
                      }
                    }
                  }
                }
              }
            }
            v55 = v56[11];
          }
          while (v55);
          v57 = *(_QWORD *)(v56[6] + 8);
          if (!v57)
            break;
          v55 = v56[9];
          if (!v55)
          {
            while (1)
            {
              v58 = *(_QWORD *)(v57 + 56);
              if (!v58)
                goto LABEL_111;
              v57 = *(_QWORD *)(v58 + 8);
              if (!v57)
                goto LABEL_111;
              v55 = *(_QWORD *)(v57 + 72);
              if (v55)
                goto LABEL_96;
            }
          }
        }
LABEL_111:
        v63 = v71;
        *a3 = 0;
        a3[8] = 0;
        if (!v63)
          goto LABEL_50;
      }
      else
      {
        *a3 = 0;
        a3[8] = 0;
      }
      WebCore::Cookie::~Cookie((WebCore::Cookie *)v65, v36);
LABEL_50:
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v36);
        else
          *(_DWORD *)v34 -= 2;
      }
      return;
    }
LABEL_47:
    if (v34)
      *(_DWORD *)v34 += 2;
    *(_QWORD *)a3 = v34;
    a3[8] = 1;
    goto LABEL_50;
  }
  if (!LOBYTE(v74[4]))
  {
LABEL_46:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v34 = v65[0];
    LOBYTE(v65[0]) = 0;
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v73, v35);
    goto LABEL_47;
  }
  __break(1u);
LABEL_118:
  v64 = std::__throw_bad_optional_access[abi:sn180100]();
}

void `non-virtual thunk to'WebCore::InspectorPageAgent::setCookie(uint64_t a1@<X0>, WTF::JSONImpl::ObjectBase **a2@<X1>, _BYTE *a3@<X8>)
{
  WebCore::InspectorPageAgent::setCookie(a1 - 32, a2, a3);
}

WTF::StringImpl *WebCore::InspectorPageAgent::deleteCookie@<X0>(WebCore::InspectorPageAgent *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, _BYTE *a4@<X8>)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  WTF::StringImpl *v23[5];
  WTF::StringImpl *v24[5];

  v23[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v23);
  MEMORY[0x19AEA52F8](v24, v23, a3, 0);
  v9 = v23[0];
  v23[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(_QWORD *)(*((_QWORD *)this + 7) + 160);
  if (v10)
  {
    while (1)
    {
      do
      {
LABEL_5:
        v11 = (_QWORD *)v10;
        if (!*(_BYTE *)(v10 + 144))
        {
          v14 = *(_QWORD *)(v10 + 296);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 528);
            if (v15)
            {
              v16 = *(_QWORD *)(v15 + 8);
              if (v16)
              {
                v17 = *(_QWORD *)(v16 + 24);
                if (v17)
                {
                  v18 = *(_QWORD *)(v17 + 8);
                  if (v18)
                  {
                    v19 = *(_QWORD *)(v18 + 888);
                    v20 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v20 = off_1E33F0B10;
                    v23[0] = v20;
                    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, const WTF::String *, WTF::StringImpl **))(*(_QWORD *)v19 + 56))(v19, v14, v24, a2, v23);
                    v21 = v23[0];
                    v23[0] = 0;
                    if (v21)
                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v21 + 8))(v21);
                  }
                }
              }
            }
          }
        }
        v10 = v11[11];
      }
      while (v10);
      v12 = *(_QWORD *)(v11[6] + 8);
      if (!v12)
        break;
      v10 = v11[9];
      if (!v10)
      {
        while (1)
        {
          v13 = *(_QWORD *)(v12 + 56);
          if (!v13)
            goto LABEL_20;
          v12 = *(_QWORD *)(v13 + 8);
          if (!v12)
            goto LABEL_20;
          v10 = *(_QWORD *)(v12 + 72);
          if (v10)
            goto LABEL_5;
        }
      }
    }
  }
LABEL_20:
  *a4 = 0;
  a4[8] = 0;
  result = v24[0];
  v24[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorPageAgent::deleteCookie@<X0>(WebCore::InspectorPageAgent *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorPageAgent::deleteCookie((WebCore::InspectorPageAgent *)((char *)this - 32), a2, a3, a4);
}

_DWORD *WebCore::InspectorPageAgent::getResourceTree@<X0>(WebCore::InspectorPageAgent *this@<X0>, WebCore::InspectorPageAgent *a2@<X8>)
{
  WebCore::Frame *v3;
  _DWORD *result;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 7) + 160) + 144))
    v3 = 0;
  else
    v3 = *(WebCore::Frame **)(*((_QWORD *)this + 7) + 160);
  result = WebCore::InspectorPageAgent::buildObjectForFrameTree(a2, this, v3);
  *((_DWORD *)a2 + 2) = 0;
  return result;
}

_DWORD *WebCore::InspectorPageAgent::buildObjectForFrameTree(WebCore::InspectorPageAgent *this, WebCore::LocalFrame *a2, WebCore::Frame *a3)
{
  WebCore::Frame *v3;
  uint64_t v6;
  WTF::JSONImpl::Object *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  WTF::JSONImpl::Object *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const WTF::String *v31;
  WTF::StringImpl *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  Inspector::Protocol::Helpers *v39;
  const WTF::String *v40;
  WTF::StringImpl *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t *v49;
  unint64_t v50;
  const WTF::String *v51;
  WTF::StringImpl *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t *v60;
  WTF::StringImpl *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  _DWORD *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  const WTF::String *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  _DWORD *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  void *v81;
  _QWORD *v82;
  WTF::StringImpl *v83;
  const WTF::String *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  _DWORD *v89;
  WTF::StringImpl *v90;
  _DWORD **v91;
  uint64_t v92;
  _DWORD *v93;
  _DWORD **v94;
  uint64_t v95;
  _DWORD *v96;
  _DWORD **v97;
  uint64_t v98;
  _DWORD *v99;
  _DWORD **v100;
  uint64_t v101;
  _DWORD *v102;
  _DWORD **v103;
  uint64_t v104;
  _DWORD *v105;
  _DWORD **v106;
  uint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  _DWORD *v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  void *v126;
  void *v127;
  _QWORD *v128;
  _DWORD **v129;
  uint64_t v130;
  _DWORD *v131;
  _DWORD *result;
  _DWORD **v133;
  uint64_t v134;
  _DWORD *v135;
  _DWORD **v136;
  uint64_t v137;
  _DWORD *v138;
  WebCore::Frame *v139;
  WebCore::InspectorPageAgent *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  unsigned int v143;
  _DWORD *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  _QWORD *v147;
  _QWORD v148[2];
  char v149;

  v3 = a3;
  WebCore::InspectorPageAgent::buildObjectForFrame((WebCore::InspectorPageAgent *)&v144, a2, a3);
  v6 = WTF::fastMalloc((WTF *)0x20);
  v7 = (WTF::JSONImpl::Object *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v6);
  WTF::JSONImpl::Object::create(v7);
  v8 = v146;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = v144;
  v144 = 0;
  v147 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v8 + 2, &v142, (const WTF::StringImpl *)&v147, (uint64_t)v148);
  if (v149)
  {
    v11 = (uint64_t *)((char *)v8 + 24);
    v12 = *((unsigned int *)v8 + 9);
    if ((_DWORD)v12 == *((_DWORD *)v8 + 8))
    {
      v133 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v142);
      v12 = *((unsigned int *)v8 + 9);
      v134 = *((_QWORD *)v8 + 3);
      v135 = *v133;
      if (*v133)
        *v135 += 2;
      *(_QWORD *)(v134 + 8 * v12) = v135;
    }
    else
    {
      v13 = *v11;
      v14 = v142;
      if (v142)
        *(_DWORD *)v142 += 2;
      *(_QWORD *)(v13 + 8 * v12) = v14;
    }
    *((_DWORD *)v8 + 9) = v12 + 1;
  }
  v15 = v147;
  v147 = 0;
  if (v15)
  {
    if (*v15 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v15;
  }
  v16 = v142;
  v142 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v10);
    else
      *(_DWORD *)v16 -= 2;
  }
  ++*(_DWORD *)v6;
  v17 = v146;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v147 = (_QWORD *)v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v17 + 2, &v142, (const WTF::StringImpl *)&v147, (uint64_t)v148);
  if (v149)
  {
    v19 = (uint64_t *)((char *)v17 + 24);
    v20 = *((unsigned int *)v17 + 9);
    if ((_DWORD)v20 == *((_DWORD *)v17 + 8))
    {
      v136 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v142);
      v20 = *((unsigned int *)v17 + 9);
      v137 = *((_QWORD *)v17 + 3);
      v138 = *v136;
      if (*v136)
        *v138 += 2;
      *(_QWORD *)(v137 + 8 * v20) = v138;
    }
    else
    {
      v21 = *v19;
      v22 = v142;
      if (v142)
        *(_DWORD *)v142 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *((_DWORD *)v17 + 9) = v20 + 1;
  }
  v23 = v147;
  v147 = 0;
  if (v23)
  {
    if (*v23 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v23;
  }
  v24 = v142;
  v142 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v18);
    else
      *(_DWORD *)v24 -= 2;
  }
  *(_QWORD *)this = v146;
  v25 = (WTF::JSONImpl::Object *)WebCore::InspectorPageAgent::cachedResourcesForFrame(v3, v18, (uint64_t)&v142);
  v27 = v142;
  v140 = this;
  if (v143)
  {
    v139 = v3;
    v28 = 8 * v143;
    do
    {
      v29 = *(_QWORD *)v27;
      WTF::JSONImpl::Object::create(v25);
      v30 = v148[0];
      if ((*(_BYTE *)(v29 + 344) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v29 + 160));
        *(_BYTE *)(v29 + 344) |= 1u;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v29 + 160), v31);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v30 + 16), &v146, (const WTF::StringImpl *)&v147, (uint64_t)v148);
      if (v149)
      {
        v33 = (uint64_t *)(v30 + 24);
        v34 = *(unsigned int *)(v30 + 36);
        if ((_DWORD)v34 == *(_DWORD *)(v30 + 32))
        {
          v91 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)&v146);
          v34 = *(unsigned int *)(v30 + 36);
          v92 = *(_QWORD *)(v30 + 24);
          v93 = *v91;
          if (*v91)
            *v93 += 2;
          *(_QWORD *)(v92 + 8 * v34) = v93;
        }
        else
        {
          v35 = *v33;
          v36 = v146;
          if (v146)
            *(_DWORD *)v146 += 2;
          *(_QWORD *)(v35 + 8 * v34) = v36;
        }
        *(_DWORD *)(v30 + 36) = v34 + 1;
      }
      v37 = v147;
      v147 = 0;
      if (v37)
      {
        if (*v37 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v37;
      }
      v38 = v146;
      v146 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v32);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = (Inspector::Protocol::Helpers *)dword_1969F2388[WebCore::InspectorPageAgent::inspectorResourceType((WebCore::InspectorPageAgent *)v29, v32)];
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::Protocol::Helpers::getEnumConstantValue(v39);
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v145, v40);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v30 + 16), &v146, (const WTF::StringImpl *)&v147, (uint64_t)v148);
      if (v149)
      {
        v42 = (uint64_t *)(v30 + 24);
        v43 = *(unsigned int *)(v30 + 36);
        if ((_DWORD)v43 == *(_DWORD *)(v30 + 32))
        {
          v94 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v146);
          v43 = *(unsigned int *)(v30 + 36);
          v95 = *(_QWORD *)(v30 + 24);
          v96 = *v94;
          if (*v94)
            *v96 += 2;
          *(_QWORD *)(v95 + 8 * v43) = v96;
        }
        else
        {
          v44 = *v42;
          v45 = v146;
          if (v146)
            *(_DWORD *)v146 += 2;
          *(_QWORD *)(v44 + 8 * v43) = v45;
        }
        *(_DWORD *)(v30 + 36) = v43 + 1;
      }
      v46 = v147;
      v147 = 0;
      if (v46)
      {
        if (*v46 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v46;
      }
      v47 = v145;
      v145 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v41);
        else
          *(_DWORD *)v47 -= 2;
      }
      v48 = v146;
      v146 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v41);
        else
          *(_DWORD *)v48 -= 2;
      }
      v49 = *(uint64_t **)(v29 + 400);
      if (!v49)
      {
        v50 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
        if (v50 != -1)
        {
          v148[0] = &v146;
          v147 = v148;
          std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v147, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
        }
        v49 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
      }
      WebCore::ResourceResponse::platformLazyInit((uint64_t)v49, 1);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v49 + 5), v51);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v30 + 16), &v146, (const WTF::StringImpl *)&v147, (uint64_t)v148);
      if (v149)
      {
        v53 = (uint64_t *)(v30 + 24);
        v54 = *(unsigned int *)(v30 + 36);
        if ((_DWORD)v54 == *(_DWORD *)(v30 + 32))
        {
          v97 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v53, v54 + 1, (unint64_t)&v146);
          v54 = *(unsigned int *)(v30 + 36);
          v98 = *(_QWORD *)(v30 + 24);
          v99 = *v97;
          if (*v97)
            *v99 += 2;
          *(_QWORD *)(v98 + 8 * v54) = v99;
        }
        else
        {
          v55 = *v53;
          v56 = v146;
          if (v146)
            *(_DWORD *)v146 += 2;
          *(_QWORD *)(v55 + 8 * v54) = v56;
        }
        *(_DWORD *)(v30 + 36) = v54 + 1;
      }
      v57 = v147;
      v147 = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
      v58 = v146;
      v146 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v52);
        else
          *(_DWORD *)v58 -= 2;
      }
      v59 = *(_QWORD *)(v29 + 400);
      if (v59)
      {
        v60 = (uint64_t *)(v59 + 320);
      }
      else
      {
        std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)v148);
        v60 = &WebCore::CachedResource::resourceError(void)const::emptyError;
      }
      if (*((_BYTE *)v60 + 60) == 3 || (*(unsigned __int8 *)(v29 + 557) >> 5) - 3 <= 1u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v30 + 16), &v146, (const WTF::StringImpl *)&v147, (uint64_t)v148);
        if (v149)
        {
          v62 = (uint64_t *)(v30 + 24);
          v63 = *(unsigned int *)(v30 + 36);
          if ((_DWORD)v63 == *(_DWORD *)(v30 + 32))
          {
            v100 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v62, v63 + 1, (unint64_t)&v146);
            v63 = *(unsigned int *)(v30 + 36);
            v101 = *(_QWORD *)(v30 + 24);
            v102 = *v100;
            if (*v100)
              *v102 += 2;
            *(_QWORD *)(v101 + 8 * v63) = v102;
          }
          else
          {
            v64 = *v62;
            v65 = v146;
            if (v146)
              *(_DWORD *)v146 += 2;
            *(_QWORD *)(v64 + 8 * v63) = v65;
          }
          *(_DWORD *)(v30 + 36) = v63 + 1;
        }
        v66 = v147;
        v147 = 0;
        if (v66)
        {
          if (*v66 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v66;
        }
        v67 = v146;
        v146 = 0;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
            WTF::StringImpl::destroy(v67, v61);
          else
            *(_DWORD *)v67 -= 2;
        }
      }
      WebCore::InspectorPageAgent::sourceMapURLForResource((WebCore::InspectorPageAgent *)&v145, (WebCore::CachedResource *)v29);
      if (v145 && *((_DWORD *)v145 + 1))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v145, v84);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v30 + 16), &v146, (const WTF::StringImpl *)&v147, (uint64_t)v148);
        if (v149)
        {
          v85 = (uint64_t *)(v30 + 24);
          v86 = *(unsigned int *)(v30 + 36);
          if ((_DWORD)v86 == *(_DWORD *)(v30 + 32))
          {
            v106 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v146);
            v86 = *(unsigned int *)(v30 + 36);
            v107 = *(_QWORD *)(v30 + 24);
            v108 = *v106;
            if (*v106)
              *v108 += 2;
            *(_QWORD *)(v107 + 8 * v86) = v108;
          }
          else
          {
            v87 = *v85;
            v88 = v146;
            if (v146)
              *(_DWORD *)v146 += 2;
            *(_QWORD *)(v87 + 8 * v86) = v88;
          }
          *(_DWORD *)(v30 + 36) = v86 + 1;
        }
        v89 = v147;
        v147 = 0;
        if (v89)
        {
          if (*v89 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v89;
        }
        v90 = v146;
        v146 = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 2)
            WTF::StringImpl::destroy(v90, v26);
          else
            *(_DWORD *)v90 -= 2;
        }
      }
      v68 = *(WTF::StringImpl **)(v29 + 312);
      if (v68)
      {
        *(_DWORD *)v68 += 2;
        v141 = v68;
        if (*((_DWORD *)v68 + 1))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v141, v69);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v30 + 16), &v146, (const WTF::StringImpl *)&v147, (uint64_t)v148);
          if (v149)
          {
            v70 = (uint64_t *)(v30 + 24);
            v71 = *(unsigned int *)(v30 + 36);
            if ((_DWORD)v71 == *(_DWORD *)(v30 + 32))
            {
              v103 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v70, v71 + 1, (unint64_t)&v146);
              v71 = *(unsigned int *)(v30 + 36);
              v104 = *(_QWORD *)(v30 + 24);
              v105 = *v103;
              if (*v103)
                *v105 += 2;
              *(_QWORD *)(v104 + 8 * v71) = v105;
            }
            else
            {
              v72 = *v70;
              v73 = v146;
              if (v146)
                *(_DWORD *)v146 += 2;
              *(_QWORD *)(v72 + 8 * v71) = v73;
            }
            *(_DWORD *)(v30 + 36) = v71 + 1;
          }
          v74 = v147;
          v147 = 0;
          if (v74)
          {
            if (*v74 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v74;
          }
          v75 = v146;
          v146 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
              WTF::StringImpl::destroy(v75, v26);
            else
              *(_DWORD *)v75 -= 2;
          }
        }
      }
      else
      {
        v141 = 0;
      }
      v76 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v76 == *(_DWORD *)(v6 + 24))
      {
        v77 = v76 + (v76 >> 2);
        if (v77 >= 0x10)
          v78 = v77 + 1;
        else
          v78 = 16;
        if (v78 <= v76 + 1)
          v79 = v76 + 1;
        else
          v79 = v78;
        if (v79 >> 29)
        {
LABEL_234:
          __break(0xC471u);
          JUMPOUT(0x195E51B18);
        }
        v80 = *(void **)(v6 + 16);
        v81 = (void *)WTF::fastMalloc((WTF *)(8 * v79));
        *(_DWORD *)(v6 + 24) = v79;
        *(_QWORD *)(v6 + 16) = v81;
        memcpy(v81, v80, 8 * v76);
        if (v80)
        {
          if (*(void **)(v6 + 16) == v80)
          {
            *(_QWORD *)(v6 + 16) = 0;
            *(_DWORD *)(v6 + 24) = 0;
          }
          WTF::fastFree((WTF *)v80, v26);
        }
        v76 = *(unsigned int *)(v6 + 28);
        v82 = (_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v76);
      }
      else
      {
        v82 = (_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v76);
      }
      *v82 = v30;
      *(_DWORD *)(v6 + 28) = v76 + 1;
      v83 = v141;
      v141 = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
          WTF::StringImpl::destroy(v83, v26);
        else
          *(_DWORD *)v83 -= 2;
      }
      v25 = v145;
      v145 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          v25 = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(v25, v26);
        else
          *(_DWORD *)v25 -= 2;
      }
      v27 = (WTF::StringImpl *)((char *)v27 + 8);
      v28 -= 8;
    }
    while (v28);
    v27 = v142;
    v3 = v139;
  }
  if (v27)
    WTF::fastFree(v27, v26);
  v109 = *((_QWORD *)v3 + 11);
  if (v109)
  {
    v110 = 0;
    do
    {
      if (!v110)
      {
        v110 = WTF::fastMalloc((WTF *)0x20);
        v111 = (_DWORD *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v110);
        v112 = *(_QWORD *)this;
        ++*v111;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v147 = (_QWORD *)v110;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v112 + 16), &v142, (const WTF::StringImpl *)&v147, (uint64_t)v148);
        if (v149)
        {
          v114 = (uint64_t *)(v112 + 24);
          v115 = *(unsigned int *)(v112 + 36);
          if ((_DWORD)v115 == *(_DWORD *)(v112 + 32))
          {
            v129 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v114, v115 + 1, (unint64_t)&v142);
            v115 = *(unsigned int *)(v112 + 36);
            v130 = *(_QWORD *)(v112 + 24);
            v131 = *v129;
            if (*v129)
              *v131 += 2;
            *(_QWORD *)(v130 + 8 * v115) = v131;
          }
          else
          {
            v116 = *v114;
            v117 = v142;
            if (v142)
              *(_DWORD *)v142 += 2;
            *(_QWORD *)(v116 + 8 * v115) = v117;
          }
          *(_DWORD *)(v112 + 36) = v115 + 1;
        }
        v118 = v147;
        v147 = 0;
        if (v118)
        {
          if (*v118 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v118;
        }
        v119 = v142;
        v142 = 0;
        if (v119)
        {
          if (*(_DWORD *)v119 == 2)
            WTF::StringImpl::destroy(v119, v113);
          else
            *(_DWORD *)v119 -= 2;
        }
      }
      if (!*(_BYTE *)(v109 + 144))
      {
        WebCore::InspectorPageAgent::buildObjectForFrameTree((WebCore::InspectorPageAgent *)v148, a2);
        v120 = v148[0];
        v121 = *(unsigned int *)(v110 + 28);
        if ((_DWORD)v121 == *(_DWORD *)(v110 + 24))
        {
          v122 = v121 + (v121 >> 2);
          if (v122 >= 0x10)
            v123 = v122 + 1;
          else
            v123 = 16;
          if (v123 <= v121 + 1)
            v124 = v121 + 1;
          else
            v124 = v123;
          if (v124 >> 29)
            goto LABEL_234;
          v125 = *(void **)(v110 + 16);
          v126 = (void *)WTF::fastMalloc((WTF *)(8 * v124));
          *(_DWORD *)(v110 + 24) = v124;
          *(_QWORD *)(v110 + 16) = v126;
          memcpy(v126, v125, 8 * v121);
          if (v125)
          {
            if (*(void **)(v110 + 16) == v125)
            {
              *(_QWORD *)(v110 + 16) = 0;
              *(_DWORD *)(v110 + 24) = 0;
            }
            WTF::fastFree((WTF *)v125, v127);
          }
          v121 = *(unsigned int *)(v110 + 28);
          v128 = (_QWORD *)(*(_QWORD *)(v110 + 16) + 8 * v121);
          this = v140;
        }
        else
        {
          v128 = (_QWORD *)(*(_QWORD *)(v110 + 16) + 8 * v121);
        }
        *v128 = v120;
        *(_DWORD *)(v110 + 28) = v121 + 1;
      }
      v109 = *(_QWORD *)(v109 + 72);
    }
    while (v109);
    if (*(_DWORD *)v110 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v110;
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*(_DWORD *)v6;
  result = v144;
  if (v144)
  {
    if (*v144 == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*v144;
  }
  return result;
}

_DWORD *`non-virtual thunk to'WebCore::InspectorPageAgent::getResourceTree@<X0>(WebCore::InspectorPageAgent *this@<X0>, WebCore::InspectorPageAgent *a2@<X8>)
{
  WebCore::Frame *v3;
  _DWORD *result;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 160) + 144))
    v3 = 0;
  else
    v3 = *(WebCore::Frame **)(*((_QWORD *)this + 3) + 160);
  result = WebCore::InspectorPageAgent::buildObjectForFrameTree(a2, (WebCore::InspectorPageAgent *)((char *)this - 32), v3);
  *((_DWORD *)a2 + 2) = 0;
  return result;
}

WTF::StringImpl *WebCore::InspectorPageAgent::getResourceContent@<X0>(WebCore::InspectorPageAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::String *v8;
  BOOL *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  char v14;
  WTF::StringImpl *result;
  char v16;
  WTF::StringImpl *v17[5];
  WTF::StringImpl *v18[5];
  char v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v21 = 0;
  v6 = WebCore::InspectorPageAgent::assertFrame(this, &v21, a2);
  if (v6)
  {
    v8 = (WTF::String *)v6;
    v20 = 0;
    v19 = 0;
    v17[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v17);
    MEMORY[0x19AEA52F8](v18, v17, a3, 0);
    WebCore::InspectorPageAgent::resourceContent((WebCore::InspectorPageAgent *)&v21, v8, (WebCore::LocalFrame *)v18, &v20, (WTF::String *)&v19, v9);
    v10 = v18[0];
    v18[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v17[0];
    v17[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v20;
    if (v20)
    {
      v13 = *(_DWORD *)v20;
      *(_DWORD *)v20 += 2;
      v14 = v19;
      *(_QWORD *)a4 = v12;
      *(_BYTE *)(a4 + 8) = v14;
      *(_DWORD *)(a4 + 16) = 0;
      if (v13)
        *(_DWORD *)v12 = v13;
      else
        WTF::StringImpl::destroy(v12, v7);
    }
    else
    {
      v16 = v19;
      *(_QWORD *)a4 = 0;
      *(_BYTE *)(a4 + 8) = v16;
      *(_DWORD *)(a4 + 16) = 0;
    }
    result = v21;
    if (!v21)
      return result;
LABEL_16:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    *(_DWORD *)result -= 2;
    return result;
  }
  result = v21;
  if (v21)
    *(_DWORD *)v21 += 2;
  *(_QWORD *)a4 = result;
  *(_DWORD *)(a4 + 16) = 1;
  if (result)
    goto LABEL_16;
  return result;
}

uint64_t WebCore::InspectorPageAgent::assertFrame(WebCore::InspectorPageAgent *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t result;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;

  if (*a3)
  {
    if (*((_DWORD *)*a3 + 1))
    {
      WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebCore::InspectorPageAgent *)((char *)this + 96), a3, (const WTF::StringImpl *)a3, (unsigned int **)&v12);
      v8 = (unsigned int *)v12;
      if (v12)
      {
        result = *((_QWORD *)v12 + 1);
        v12 = 0;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (v10)
        {
          if (result)
            goto LABEL_11;
        }
        else
        {
          atomic_store(1u, v8);
          v11 = result;
          WTF::fastFree((WTF *)v8, v7);
          result = v11;
          if (v11)
          {
LABEL_11:
            if (!*(_BYTE *)(result + 144))
              return result;
          }
        }
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = *a2;
  *a2 = v12;
  if (v5)
  {
    if (*(_DWORD *)v5 != 2)
    {
      result = 0;
      *(_DWORD *)v5 -= 2;
      return result;
    }
    WTF::StringImpl::destroy(v5, v4);
  }
  return 0;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorPageAgent::getResourceContent@<X0>(WebCore::InspectorPageAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::InspectorPageAgent::getResourceContent((WebCore::InspectorPageAgent *)((char *)this - 32), a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorPageAgent::setBootstrapScript@<X0>(WebCore::InspectorPageAgent *this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  _DWORD *v5;
  WTF::StringImpl *result;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *a3 = 0;
  a3[8] = 0;
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorPageAgent::setBootstrapScript@<X0>(WebCore::InspectorPageAgent *this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  _DWORD *v5;
  WTF::StringImpl *result;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *a3 = 0;
  a3[8] = 0;
  return result;
}

WTF::StringImpl *WebCore::InspectorPageAgent::searchInResource@<X0>(WTF::String *a1@<X1>, WebCore::InspectorPageAgent *a2@<X0>, uint64_t a3@<X2>, const WTF::String *a4@<X3>, _BYTE *a5@<X4>, WTF::StringImpl **a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  WTF *v14;
  Inspector::ContentSearchUtilities *v15;
  uint64_t v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _BOOL4 v21;
  WebCore::InspectorPageAgent *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  const WTF::URL *v26;
  WTF::String *v27;
  WebCore::CachedResource *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  BOOL v32;
  uint64_t v33;
  WTF::JSONImpl::ArrayBase *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  char v38;
  WTF::StringImpl *v39[5];
  WTF::StringImpl *v40;

  v40 = 0;
  if (*a6)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 192);
    if (v11)
    {
      if (a5[1])
        v12 = *a5 == 0;
      else
        v12 = 1;
      v13 = !v12;
      v14 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*(_QWORD *)(v11 + 64) + 32), a6, a1);
      if (v14 && (v16 = *((_QWORD *)v14 + 4), v15 = (WTF *)((char *)v14 + 32), v16))
      {
        result = (WTF::StringImpl *)Inspector::ContentSearchUtilities::searchInTextByLines(v15, a4, (const WTF::String *)v13);
        v19 = 0;
        v20 = v39[0];
        v21 = v39[0] == 0;
      }
      else
      {
        result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v19 = v39[0];
        v40 = v39[0];
        if (v39[0])
        {
          *(_DWORD *)v39[0] += 2;
          v21 = 1;
          v20 = v19;
        }
        else
        {
          v20 = 0;
          v21 = 1;
        }
      }
      *(_QWORD *)a7 = v20;
      goto LABEL_58;
    }
  }
  result = (WTF::StringImpl *)WebCore::InspectorPageAgent::assertFrame(a2, &v40, (WTF::StringImpl **)a1);
  if (!result)
  {
    v19 = v40;
    if (!v40)
      goto LABEL_46;
    goto LABEL_45;
  }
  v22 = result;
  v23 = *(_QWORD *)(*((_QWORD *)result + 35) + 88);
  if (!v23)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = v39[0];
    result = v40;
    v40 = v39[0];
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
        if (!v39[0])
          goto LABEL_46;
        goto LABEL_45;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v19)
    {
LABEL_46:
      *(_QWORD *)a7 = v19;
      v21 = 1;
LABEL_58:
      *(_DWORD *)(a7 + 8) = v21;
      goto LABEL_59;
    }
LABEL_45:
    *(_DWORD *)v19 += 2;
    goto LABEL_46;
  }
  v37 = 0;
  WTF::URL::invalidate((WTF::URL *)&v37);
  MEMORY[0x19AEA52F8](v39, &v37, a3, 0);
  v25 = v37;
  v37 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v36 = 0;
  if ((*(_BYTE *)(v23 + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v23 + 872));
    *(_BYTE *)(v23 + 1056) |= 1u;
  }
  if (WTF::equalIgnoringFragmentIdentifier()
    && (WebCore::InspectorPageAgent::mainResourceContent(v22, 0, &v36, v27) & 1) != 0)
  {
    goto LABEL_31;
  }
  v28 = (WebCore::CachedResource *)WebCore::InspectorPageAgent::cachedResource(v22, (const WebCore::LocalFrame *)v39, v26);
  if (v28)
  {
    WebCore::InspectorNetworkAgent::textContentForCachedResource((WebCore::InspectorNetworkAgent *)&v37, v28);
    if (v38)
    {
      v30 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      v31 = v36;
      v36 = v30;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::destroy(v31, v29);
          if (!v30)
            goto LABEL_31;
LABEL_29:
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v29);
          else
            *(_DWORD *)v30 -= 2;
LABEL_31:
          if (a5[1])
            v32 = *a5 == 0;
          else
            v32 = 1;
          v33 = !v32;
          Inspector::ContentSearchUtilities::searchInTextByLines((Inspector::ContentSearchUtilities *)&v36, a4, (const WTF::String *)v33);
          goto LABEL_48;
        }
        *(_DWORD *)v31 -= 2;
      }
      if (!v30)
        goto LABEL_31;
      goto LABEL_29;
    }
  }
  v34 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)a7 = WTF::JSONImpl::ArrayBase::ArrayBase(v34);
LABEL_48:
  *(_DWORD *)(a7 + 8) = 0;
  v35 = v36;
  v36 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v18);
    else
      *(_DWORD *)v35 -= 2;
  }
  result = v39[0];
  v39[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  v19 = v40;
LABEL_59:
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorPageAgent::searchInResource@<X0>(uint64_t a1@<X0>, WTF::String *a2@<X1>, uint64_t a3@<X2>, const WTF::String *a4@<X3>, _BYTE *a5@<X4>, WTF::StringImpl **a6@<X6>, uint64_t a7@<X8>)
{
  return WebCore::InspectorPageAgent::searchInResource(a2, (WebCore::InspectorPageAgent *)(a1 - 32), a3, a4, a5, a6, a7);
}

void WebCore::InspectorPageAgent::searchInResources(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WebCore::LocalFrame *v5;
  WebCore::Frame *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  WebCore::Frame *v10;
  WebCore::CachedResource **v11;
  uint64_t v12;
  WebCore::CachedResource *v13;
  const WTF::String *v14;
  int v15;
  int v16;
  WTF::JSONImpl::Object *updated;
  WTF::JSONImpl::Value *v18;
  uint64_t v19;
  const WTF::String *v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  const WTF::String *v29;
  WTF::StringImpl *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::JSONImpl::Value *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _DWORD **v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD **v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD **v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  WebCore::CachedResource *v78;
  const WTF::String *v79;
  WTF *v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  WTF::StringImpl *v87;
  const JSC::Yarr::RegularExpression *v88;
  WTF::JSONImpl::Object *v90;
  int v91;
  WTF::StringImpl *v92;
  const WTF::String *v93;
  WTF::StringImpl *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  const WTF::String *v102;
  WTF::StringImpl *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::JSONImpl::Value *v111;
  WTF::StringImpl *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  const WTF::String *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  void *v131;
  void *v132;
  WTF::StringImpl **v133;
  _DWORD **v134;
  uint64_t v135;
  _DWORD *v136;
  _DWORD **v137;
  uint64_t v138;
  _DWORD *v139;
  _DWORD **v140;
  uint64_t v141;
  _DWORD *v142;
  _DWORD **v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WebCore::Frame *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  char v152;
  char v153[8];
  uint64_t v154;
  WTF::StringImpl *v155;
  char v156;
  unsigned int v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  _BYTE v160[16];
  char v161;

  v4 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  Inspector::ContentSearchUtilities::createRegularExpressionForSearchString();
  v6 = *(WebCore::Frame **)(*(_QWORD *)(a1 + 56) + 160);
  if (v6)
  {
    v7 = "url";
    v8 = "frameId";
    v9 = "matchesCount";
    while (1)
    {
      do
      {
LABEL_3:
        v10 = v6;
        if (!*((_BYTE *)v6 + 144))
        {
          WebCore::InspectorPageAgent::cachedResourcesForFrame(v6, v5, (uint64_t)&v155);
          v11 = (WebCore::CachedResource **)v155;
          if (v157)
          {
            v149 = v10;
            v146 = a2;
            v12 = 8 * v157;
            do
            {
              v13 = *v11;
              WebCore::InspectorNetworkAgent::textContentForCachedResource((WebCore::InspectorNetworkAgent *)&v151, *v11);
              if (v152)
              {
                v15 = Inspector::ContentSearchUtilities::countRegularExpressionMatches((Inspector::ContentSearchUtilities *)v153, (const JSC::Yarr::RegularExpression *)&v151, v14);
                if (v15)
                {
                  v16 = v15;
                  updated = (WTF::JSONImpl::Object *)WebCore::InspectorPageAgent::frameId((unsigned int *)a1, v149, &v150);
                  v18 = (WebCore::CachedResource *)((char *)v13 + 160);
                  if ((*((_BYTE *)v13 + 344) & 1) == 0)
                  {
                    updated = (WTF::JSONImpl::Object *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)v13 + 160));
                    *((_BYTE *)v13 + 344) |= 1u;
                  }
                  WTF::JSONImpl::Object::create(updated);
                  v19 = v154;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  WTF::JSONImpl::Value::create(v18, v20);
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v19 + 16), &v158, (const WTF::StringImpl *)&v159, (uint64_t)v160);
                  if (v161)
                  {
                    v22 = (uint64_t *)(v19 + 24);
                    v23 = *(unsigned int *)(v19 + 36);
                    if ((_DWORD)v23 == *(_DWORD *)(v19 + 32))
                    {
                      v59 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v158);
                      v23 = *(unsigned int *)(v19 + 36);
                      v60 = *(_QWORD *)(v19 + 24);
                      v61 = *v59;
                      if (*v59)
                        *v61 += 2;
                      *(_QWORD *)(v60 + 8 * v23) = v61;
                    }
                    else
                    {
                      v24 = *v22;
                      v25 = v158;
                      if (v158)
                        *(_DWORD *)v158 += 2;
                      *(_QWORD *)(v24 + 8 * v23) = v25;
                    }
                    *(_DWORD *)(v19 + 36) = v23 + 1;
                  }
                  v26 = v159;
                  v159 = 0;
                  if (v26)
                  {
                    if (*(_DWORD *)v26 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*(_DWORD *)v26;
                  }
                  v27 = v158;
                  v158 = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2)
                      WTF::StringImpl::destroy(v27, v21);
                    else
                      *(_DWORD *)v27 -= 2;
                  }
                  v28 = v154;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v150, v29);
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), &v158, (const WTF::StringImpl *)&v159, (uint64_t)v160);
                  if (v161)
                  {
                    v31 = (uint64_t *)(v28 + 24);
                    v32 = *(unsigned int *)(v28 + 36);
                    if ((_DWORD)v32 == *(_DWORD *)(v28 + 32))
                    {
                      v62 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, v32 + 1, (unint64_t)&v158);
                      v32 = *(unsigned int *)(v28 + 36);
                      v63 = *(_QWORD *)(v28 + 24);
                      v64 = *v62;
                      if (*v62)
                        *v64 += 2;
                      *(_QWORD *)(v63 + 8 * v32) = v64;
                    }
                    else
                    {
                      v33 = *v31;
                      v34 = v158;
                      if (v158)
                        *(_DWORD *)v158 += 2;
                      *(_QWORD *)(v33 + 8 * v32) = v34;
                    }
                    *(_DWORD *)(v28 + 36) = v32 + 1;
                  }
                  v35 = v159;
                  v159 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*(_DWORD *)v35;
                  }
                  v36 = v158;
                  v158 = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, v30);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                  v37 = v154;
                  v38 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
                  WTF::JSONImpl::Value::create(v38, (double)v16);
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v37 + 16), &v158, (const WTF::StringImpl *)&v159, (uint64_t)v160);
                  if (v161)
                  {
                    v39 = (uint64_t *)(v37 + 24);
                    v40 = *(unsigned int *)(v37 + 36);
                    if ((_DWORD)v40 == *(_DWORD *)(v37 + 32))
                    {
                      v65 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)&v158);
                      v40 = *(unsigned int *)(v37 + 36);
                      v66 = *(_QWORD *)(v37 + 24);
                      v67 = *v65;
                      if (*v65)
                        *v67 += 2;
                      *(_QWORD *)(v66 + 8 * v40) = v67;
                    }
                    else
                    {
                      v41 = *v39;
                      v42 = v158;
                      if (v158)
                        *(_DWORD *)v158 += 2;
                      *(_QWORD *)(v41 + 8 * v40) = v42;
                    }
                    *(_DWORD *)(v37 + 36) = v40 + 1;
                  }
                  v43 = v159;
                  v159 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*(_DWORD *)v43;
                  }
                  v44 = v158;
                  v158 = 0;
                  if (v44)
                  {
                    if (*(_DWORD *)v44 == 2)
                      WTF::StringImpl::destroy(v44, v5);
                    else
                      *(_DWORD *)v44 -= 2;
                  }
                  v45 = v154;
                  v46 = *(unsigned int *)(v4 + 28);
                  if ((_DWORD)v46 == *(_DWORD *)(v4 + 24))
                  {
                    v148 = v154;
                    v47 = v9;
                    v48 = a1;
                    v49 = v8;
                    v50 = v7;
                    v51 = v46 + (v46 >> 2);
                    if (v51 >= 0x10)
                      v52 = v51 + 1;
                    else
                      v52 = 16;
                    if (v52 <= v46 + 1)
                      v53 = v46 + 1;
                    else
                      v53 = v52;
                    if (v53 >> 29)
                      goto LABEL_213;
                    v54 = *(void **)(v4 + 16);
                    v55 = (void *)WTF::fastMalloc((WTF *)(8 * v53));
                    *(_DWORD *)(v4 + 24) = v53;
                    *(_QWORD *)(v4 + 16) = v55;
                    memcpy(v55, v54, 8 * v46);
                    v7 = v50;
                    v8 = v49;
                    a1 = v48;
                    v9 = v47;
                    if (v54)
                    {
                      if (*(void **)(v4 + 16) == v54)
                      {
                        *(_QWORD *)(v4 + 16) = 0;
                        *(_DWORD *)(v4 + 24) = 0;
                      }
                      WTF::fastFree((WTF *)v54, v5);
                    }
                    v46 = *(unsigned int *)(v4 + 28);
                    v56 = (_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v46);
                    v45 = v148;
                  }
                  else
                  {
                    v56 = (_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v46);
                  }
                  *v56 = v45;
                  *(_DWORD *)(v4 + 28) = v46 + 1;
                  v57 = v150;
                  v150 = 0;
                  if (v57)
                  {
                    if (*(_DWORD *)v57 == 2)
                      WTF::StringImpl::destroy(v57, v5);
                    else
                      *(_DWORD *)v57 -= 2;
                  }
                }
                if (v152)
                {
                  v58 = v151;
                  v151 = 0;
                  if (v58)
                  {
                    if (*(_DWORD *)v58 == 2)
                      WTF::StringImpl::destroy(v58, v5);
                    else
                      *(_DWORD *)v58 -= 2;
                  }
                }
              }
              ++v11;
              v12 -= 8;
            }
            while (v12);
            v11 = (WebCore::CachedResource **)v155;
            a2 = v146;
            v10 = v149;
          }
          if (v11)
            WTF::fastFree((WTF *)v11, v5);
        }
        v6 = (WebCore::Frame *)*((_QWORD *)v10 + 11);
      }
      while (v6);
      v68 = *(_QWORD *)(*((_QWORD *)v10 + 6) + 8);
      if (!v68)
        break;
      v6 = (WebCore::Frame *)*((_QWORD *)v10 + 9);
      if (!v6)
      {
        while (1)
        {
          v69 = *(_QWORD *)(v68 + 56);
          if (!v69)
            goto LABEL_95;
          v68 = *(_QWORD *)(v69 + 8);
          if (!v68)
            goto LABEL_95;
          v6 = *(WebCore::Frame **)(v68 + 72);
          if (v6)
            goto LABEL_3;
        }
      }
    }
  }
LABEL_95:
  v70 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 192);
  if (v70)
  {
    v71 = *(_QWORD *)(v70 + 64);
    v72 = *(unsigned int *)(v71 + 44);
    if ((_DWORD)v72)
    {
      v73 = *(_QWORD **)(v71 + 32);
      v74 = *(unsigned int *)(v71 + 40);
      v75 = &v73[2 * v74];
      if ((_DWORD)v74)
      {
        v76 = 16 * v74;
        while (!*v73)
        {
          v73 += 2;
          v76 -= 16;
          if (!v76)
          {
            v73 = v75;
            break;
          }
        }
      }
      v147 = a2;
      if (v72 >> 29)
      {
LABEL_213:
        __break(0xC471u);
        JUMPOUT(0x195E52D3CLL);
      }
      v77 = WTF::fastMalloc((WTF *)(8 * v72));
      v80 = (WTF *)v77;
      if (v73 != v75)
      {
        v81 = 0;
        v82 = 1;
LABEL_105:
        v83 = v82;
        *(_QWORD *)(v77 + 8 * v81++) = v73[1];
        while (1)
        {
          v73 += 2;
          if (v73 == v75)
            break;
          if (*v73)
          {
            ++v82;
            if (v73 != v75)
              goto LABEL_105;
            break;
          }
        }
        if (v81)
        {
          v84 = 8 * v83;
          v85 = v77;
          while (1)
          {
            v86 = *(_QWORD **)v85;
            v88 = (const JSC::Yarr::RegularExpression *)(*(_QWORD *)v85 + 32);
            v87 = *(WTF::StringImpl **)v88;
            if (*(_QWORD *)v88 && *(_BYTE *)(*(_QWORD *)v85 + 121) == 0)
              break;
            v78 = (WebCore::CachedResource *)v86[12];
            if (v78)
            {
              WebCore::InspectorNetworkAgent::textContentForCachedResource((WebCore::InspectorNetworkAgent *)&v155, v78);
              if (v156)
                goto LABEL_119;
            }
LABEL_186:
            v85 += 8;
            v84 -= 8;
            if (!v84)
              goto LABEL_209;
          }
          *(_DWORD *)v87 += 2;
          v155 = v87;
          v156 = 1;
LABEL_119:
          v90 = (WTF::JSONImpl::Object *)Inspector::ContentSearchUtilities::countRegularExpressionMatches((Inspector::ContentSearchUtilities *)v153, v88, v79);
          if ((_DWORD)v90)
          {
            v91 = (int)v90;
            WTF::JSONImpl::Object::create(v90);
            v92 = v158;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v86 + 3), v93);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v92 + 2, &v159, (const WTF::StringImpl *)&v151, (uint64_t)v160);
            if (v161)
            {
              v95 = (uint64_t *)((char *)v92 + 24);
              v96 = *((unsigned int *)v92 + 9);
              if ((_DWORD)v96 == *((_DWORD *)v92 + 8))
              {
                v134 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v95, v96 + 1, (unint64_t)&v159);
                v96 = *((unsigned int *)v92 + 9);
                v135 = *((_QWORD *)v92 + 3);
                v136 = *v134;
                if (*v134)
                  *v136 += 2;
                *(_QWORD *)(v135 + 8 * v96) = v136;
              }
              else
              {
                v97 = *v95;
                v98 = v159;
                if (v159)
                  *(_DWORD *)v159 += 2;
                *(_QWORD *)(v97 + 8 * v96) = v98;
              }
              *((_DWORD *)v92 + 9) = v96 + 1;
            }
            v99 = v151;
            v151 = 0;
            if (v99)
            {
              if (*(_DWORD *)v99 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v99;
            }
            v100 = v159;
            v159 = 0;
            if (v100)
            {
              if (*(_DWORD *)v100 == 2)
                WTF::StringImpl::destroy(v100, v94);
              else
                *(_DWORD *)v100 -= 2;
            }
            v101 = v158;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v86 + 2), v102);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v101 + 2, &v159, (const WTF::StringImpl *)&v151, (uint64_t)v160);
            if (v161)
            {
              v104 = (uint64_t *)((char *)v101 + 24);
              v105 = *((unsigned int *)v101 + 9);
              if ((_DWORD)v105 == *((_DWORD *)v101 + 8))
              {
                v137 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v104, v105 + 1, (unint64_t)&v159);
                v105 = *((unsigned int *)v101 + 9);
                v138 = *((_QWORD *)v101 + 3);
                v139 = *v137;
                if (*v137)
                  *v139 += 2;
                *(_QWORD *)(v138 + 8 * v105) = v139;
              }
              else
              {
                v106 = *v104;
                v107 = v159;
                if (v159)
                  *(_DWORD *)v159 += 2;
                *(_QWORD *)(v106 + 8 * v105) = v107;
              }
              *((_DWORD *)v101 + 9) = v105 + 1;
            }
            v108 = v151;
            v151 = 0;
            if (v108)
            {
              if (*(_DWORD *)v108 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v108;
            }
            v109 = v159;
            v159 = 0;
            if (v109)
            {
              if (*(_DWORD *)v109 == 2)
                WTF::StringImpl::destroy(v109, v103);
              else
                *(_DWORD *)v109 -= 2;
            }
            v110 = v158;
            v111 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create(v111, (double)v91);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v110 + 2, &v159, (const WTF::StringImpl *)&v151, (uint64_t)v160);
            if (v161)
            {
              v113 = (uint64_t *)((char *)v110 + 24);
              v114 = *((unsigned int *)v110 + 9);
              if ((_DWORD)v114 == *((_DWORD *)v110 + 8))
              {
                v140 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v113, v114 + 1, (unint64_t)&v159);
                v114 = *((unsigned int *)v110 + 9);
                v141 = *((_QWORD *)v110 + 3);
                v142 = *v140;
                if (*v140)
                  *v142 += 2;
                *(_QWORD *)(v141 + 8 * v114) = v142;
              }
              else
              {
                v115 = *v113;
                v116 = v159;
                if (v159)
                  *(_DWORD *)v159 += 2;
                *(_QWORD *)(v115 + 8 * v114) = v116;
              }
              *((_DWORD *)v110 + 9) = v114 + 1;
            }
            v117 = v151;
            v151 = 0;
            if (v117)
            {
              if (*(_DWORD *)v117 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v117;
            }
            v118 = v159;
            v159 = 0;
            if (v118)
            {
              if (*(_DWORD *)v118 == 2)
                WTF::StringImpl::destroy(v118, v112);
              else
                *(_DWORD *)v118 -= 2;
            }
            v119 = v158;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v86, v120);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v119 + 2, &v159, (const WTF::StringImpl *)&v151, (uint64_t)v160);
            if (v161)
            {
              v121 = (uint64_t *)((char *)v119 + 24);
              v122 = *((unsigned int *)v119 + 9);
              if ((_DWORD)v122 == *((_DWORD *)v119 + 8))
              {
                v143 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v121, v122 + 1, (unint64_t)&v159);
                v122 = *((unsigned int *)v119 + 9);
                v144 = *((_QWORD *)v119 + 3);
                v145 = *v143;
                if (*v143)
                  *v145 += 2;
                *(_QWORD *)(v144 + 8 * v122) = v145;
              }
              else
              {
                v123 = *v121;
                v124 = v159;
                if (v159)
                  *(_DWORD *)v159 += 2;
                *(_QWORD *)(v123 + 8 * v122) = v124;
              }
              *((_DWORD *)v119 + 9) = v122 + 1;
            }
            v125 = v151;
            v151 = 0;
            if (v125)
            {
              if (*(_DWORD *)v125 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v125;
            }
            v126 = v159;
            v159 = 0;
            if (v126)
            {
              if (*(_DWORD *)v126 == 2)
                WTF::StringImpl::destroy(v126, v78);
              else
                *(_DWORD *)v126 -= 2;
            }
            v127 = *(unsigned int *)(v4 + 28);
            if ((_DWORD)v127 == *(_DWORD *)(v4 + 24))
            {
              v128 = v127 + (v127 >> 2);
              if (v128 >= 0x10)
                v129 = v128 + 1;
              else
                v129 = 16;
              if (v129 <= v127 + 1)
                v130 = v127 + 1;
              else
                v130 = v129;
              if (v130 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x195E52D44);
              }
              v131 = *(void **)(v4 + 16);
              v132 = (void *)WTF::fastMalloc((WTF *)(8 * v130));
              *(_DWORD *)(v4 + 24) = v130;
              *(_QWORD *)(v4 + 16) = v132;
              memcpy(v132, v131, 8 * v127);
              if (v131)
              {
                if (*(void **)(v4 + 16) == v131)
                {
                  *(_QWORD *)(v4 + 16) = 0;
                  *(_DWORD *)(v4 + 24) = 0;
                }
                WTF::fastFree((WTF *)v131, v78);
              }
              v127 = *(unsigned int *)(v4 + 28);
              v133 = (WTF::StringImpl **)(*(_QWORD *)(v4 + 16) + 8 * v127);
            }
            else
            {
              v133 = (WTF::StringImpl **)(*(_QWORD *)(v4 + 16) + 8 * v127);
            }
            *v133 = v119;
            *(_DWORD *)(v4 + 28) = v127 + 1;
          }
          if (v155)
          {
            if (*(_DWORD *)v155 == 2)
              WTF::StringImpl::destroy(v155, v78);
            else
              *(_DWORD *)v155 -= 2;
          }
          goto LABEL_186;
        }
      }
LABEL_209:
      WTF::fastFree(v80, v78);
      a2 = v147;
    }
  }
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = 0;
  JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v153);
}

unsigned int *WebCore::InspectorPageAgent::frameId@<X0>(unsigned int *this@<X0>, WebCore::Frame *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int i;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  const WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  void *v47;
  BOOL v48;
  WTF *v49;
  char *v50;
  uint64_t v51;
  WTF *v52;
  WTF **v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  WTF *v59;
  unsigned int *v60;
  uint64_t v61;
  WTF *v62;
  char *v63;
  uint64_t v64;
  WebCore::Frame *v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  char *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  WTF::StringImpl *v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  _QWORD *v98;
  WTF **v99;
  unsigned int *v100;
  WebCore::Frame *v101;
  WTF::StringImpl *v102;

  if (!a2)
  {
    v24 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      goto LABEL_114;
    goto LABEL_115;
  }
  v5 = (uint64_t *)(this + 20);
  v100 = this;
  v101 = a2;
  v6 = this[22];
  v7 = this[23];
  this[22] = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::Frame,WTF::String,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)(this + 20), a2);
  v8 = *((_QWORD *)a2 + 2);
  if (v8
    || (v8 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)v8 = 1,
        *(_QWORD *)(v8 + 8) = a2,
        v86 = (unsigned int *)*((_QWORD *)a2 + 2),
        *((_QWORD *)a2 + 2) = v8,
        !v86))
  {
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
  }
  else
  {
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v86);
      WTF::fastFree((WTF *)v86, a2);
    }
    v8 = *((_QWORD *)a2 + 2);
    do
      v89 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v89 + 1, (unsigned int *)v8));
    do
      v90 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v90 + 1, (unsigned int *)v8));
    if (!v8)
      goto LABEL_10;
  }
  do
  {
    v11 = __ldaxr((unsigned int *)v8);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, (unsigned int *)v8));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree((WTF *)v8, a2);
  }
LABEL_10:
  v13 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v5, 8u, 0), (v13 = *v5) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = 0;
  v17 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = (v19 >> 31) ^ v19;
  for (i = 1; ; ++i)
  {
    v22 = v20 & v15;
    v23 = v13 + 16 * v22;
    this = *(unsigned int **)v23;
    if (*(_QWORD *)v23 != -1)
      break;
    v16 = (uint64_t *)(v13 + 16 * v22);
LABEL_19:
    v20 = i + v22;
  }
  if (!this)
  {
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      *v16 = v8;
    }
    else
    {
      *(_QWORD *)v23 = v8;
      v16 = (uint64_t *)(v13 + 16 * v22);
    }
    v29 = v100;
    Inspector::IdentifiersFactory::createIdentifier((Inspector::IdentifiersFactory *)this);
    v99 = (WTF **)(v100 + 24);
    v32 = v100[26];
    v31 = v100[27];
    if (10 * v31 >= (unint64_t)(9 * v32)
      || (v32 <= 2 * (int)v31 ? (v33 = *((_BYTE *)v100 + 116) == 0) : (v33 = 1), !v33))
    {
      if ((_DWORD)v32)
        v34 = 2 * v32;
      else
        v34 = 8;
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v99, v34);
      LODWORD(v32) = v100[26];
    }
    v35 = v32 - 1;
    v36 = v100[28];
    v37 = *((_DWORD *)v102 + 4);
    v97 = v5;
    v98 = a3;
    v96 = v16;
    if (v37 < 0x100)
      v38 = WTF::StringImpl::hashSlowCase(v102);
    else
      v38 = v37 >> 8;
    v39 = (v38 ^ v36) & v35;
    v40 = *v99;
    v41 = (uint64_t)*v99 + 16 * v39;
    v42 = *(WTF **)v41;
    if (*(_QWORD *)v41)
    {
      v43 = 0;
      while (1)
      {
        v44 = *((_DWORD *)v42 + 4);
        v45 = v44 < 0x100 ? WTF::StringImpl::hashSlowCase(v42) : v44 >> 8;
        v46 = (v39 + v32 - ((v45 ^ v36) & v35)) & v35;
        if (v43 > v46)
          break;
        if (v45 == v38 && (WTF::equal(*(WTF **)v41, v102, v30) & 1) != 0)
        {
          v65 = v101;
          if (v101)
          {
            v66 = *((_QWORD *)v101 + 2);
            if (v66)
              goto LABEL_139;
            v66 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v66 = 1;
            *(_QWORD *)(v66 + 8) = v65;
            v92 = (unsigned int *)*((_QWORD *)v65 + 2);
            *((_QWORD *)v65 + 2) = v66;
            if (!v92)
              goto LABEL_139;
            do
            {
              v93 = __ldaxr(v92);
              v94 = v93 - 1;
            }
            while (__stlxr(v94, v92));
            if (!v94)
            {
              atomic_store(1u, v92);
              WTF::fastFree((WTF *)v92, v47);
            }
            v66 = *((_QWORD *)v65 + 2);
            if (v66)
            {
LABEL_139:
              do
                v91 = __ldaxr((unsigned int *)v66);
              while (__stlxr(v91 + 1, (unsigned int *)v66));
            }
          }
          else
          {
            v66 = 0;
          }
          v5 = v97;
          a3 = v98;
          v23 = (uint64_t)v16;
          v67 = *(unsigned int **)(v41 + 8);
          *(_QWORD *)(v41 + 8) = v66;
          if (v67)
          {
            do
            {
              v68 = __ldaxr(v67);
              v69 = v68 - 1;
            }
            while (__stlxr(v69, v67));
            if (!v69)
            {
              atomic_store(1u, v67);
              WTF::fastFree((WTF *)v67, v47);
            }
          }
          goto LABEL_83;
        }
        v40 = *v99;
        v39 = ((_DWORD)v39 + 1) & v35;
        ++v43;
        v41 = (uint64_t)*v99 + 16 * v39;
        v42 = *(WTF **)v41;
        if (!*(_QWORD *)v41)
        {
          v5 = v97;
          a3 = v98;
          v23 = (uint64_t)v16;
          if (v43 < 0x80)
          {
            v29 = v100;
          }
          else
          {
            v29 = v100;
            *((_BYTE *)v100 + 116) = 1;
          }
          goto LABEL_76;
        }
      }
      v48 = v43 >= 0x80;
      v29 = v100;
      if (v48)
        *((_BYTE *)v100 + 116) = 1;
      v49 = *(WTF **)v41;
      *(_QWORD *)v41 = 0;
      v50 = (char *)v40 + 16 * v39;
      v95 = *((_QWORD *)v50 + 1);
      *((_QWORD *)v50 + 1) = 0;
      *(_QWORD *)v41 = 0;
      *(_QWORD *)(v41 + 8) = 0;
      WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::String const&,WebCore::Frame* const&>(v41, v102, (uint64_t *)&v101);
      v51 = ((_DWORD)v39 + 1) & v35;
      v52 = *v99;
      v53 = (WTF **)((char *)*v99 + 16 * v51);
      v54 = *v53;
      if (*v53)
      {
        v55 = v95;
        do
        {
          v56 = *((_DWORD *)v54 + 4);
          if (v56 < 0x100)
          {
            v58 = v36;
            v59 = v49;
            v60 = v29;
            v61 = v55;
            v57 = WTF::StringImpl::hashSlowCase(v54);
            v55 = v61;
            v29 = v60;
            v49 = v59;
            v36 = v58;
          }
          else
          {
            v57 = v56 >> 8;
          }
          if (++v46 > (((_DWORD)v51 + (_DWORD)v32 - ((v57 ^ v36) & v35)) & v35))
          {
            v62 = *v53;
            *v53 = 0;
            v63 = (char *)v52 + 16 * v51;
            v64 = *((_QWORD *)v63 + 1);
            *v53 = v49;
            *((_QWORD *)v63 + 1) = v55;
            v55 = v64;
            v49 = v62;
            v46 = (v51 + v32 - ((v57 ^ v36) & v35)) & v35;
          }
          v51 = ((_DWORD)v51 + 1) & v35;
          v52 = *v99;
          v53 = (WTF **)((char *)*v99 + 16 * v51);
          v54 = *v53;
        }
        while (*v53);
      }
      else
      {
        v55 = v95;
      }
      *v53 = v49;
      v70 = (char *)v52 + 16 * v51;
      v71 = (unsigned int *)*((_QWORD *)v70 + 1);
      *((_QWORD *)v70 + 1) = v55;
      v5 = v97;
      a3 = v98;
      v23 = (uint64_t)v96;
      if (v71)
      {
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v71);
          WTF::fastFree((WTF *)v71, v47);
        }
      }
    }
    else
    {
      v5 = v97;
      a3 = v98;
      v23 = (uint64_t)v16;
LABEL_76:
      WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::String const&,WebCore::Frame* const&>(v41, v102, (uint64_t *)&v101);
    }
    ++v29[27];
LABEL_83:
    v74 = v102;
    v102 = 0;
    this = *(unsigned int **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = v74;
    if (this)
    {
      v75 = *this - 2;
      if (*this != 2)
      {
LABEL_85:
        *this = v75;
        goto LABEL_86;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v47);
      this = (unsigned int *)v102;
      v102 = 0;
      if (this)
      {
        v75 = *this - 2;
        if (*this != 2)
          goto LABEL_85;
        this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v85);
      }
    }
LABEL_86:
    v76 = *v5;
    if (*v5)
      v77 = *(_DWORD *)(v76 - 12) + 1;
    else
      v77 = 1;
    *(_DWORD *)(v76 - 12) = v77;
    v78 = *v5;
    if (*v5)
      v79 = *(_DWORD *)(v78 - 12);
    else
      v79 = 0;
    v80 = (*(_DWORD *)(v78 - 16) + v79);
    v81 = *(unsigned int *)(v78 - 4);
    if (v81 > 0x400)
    {
      if (v81 <= 2 * v80)
        goto LABEL_95;
    }
    else if (3 * v81 <= 4 * v80)
    {
      if (!(_DWORD)v81)
      {
        v82 = 8;
LABEL_97:
        this = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v5, v82, (unsigned int **)v23);
        v23 = (uint64_t)this;
        v78 = *v5;
        if (*v5)
          v81 = *(unsigned int *)(v78 - 4);
        else
          v81 = 0;
        goto LABEL_101;
      }
LABEL_95:
      v82 = (_DWORD)v81 << (6 * *(_DWORD *)(v78 - 12) >= (2 * v81));
      goto LABEL_97;
    }
LABEL_101:
    v26 = v78 + 16 * v81;
    goto LABEL_102;
  }
  if (this != (unsigned int *)v8)
    goto LABEL_19;
  if ((v14 & 1) != 0)
    v25 = 0;
  else
    v25 = *(unsigned int *)(v13 - 4);
  v26 = v13 + 16 * v25;
  if (v8)
  {
    do
    {
      v27 = __ldaxr((unsigned int *)v8);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, (unsigned int *)v8));
    if (!v28)
    {
      atomic_store(1u, (unsigned int *)v8);
      this = (unsigned int *)WTF::fastFree((WTF *)v8, a2);
    }
  }
LABEL_102:
  v83 = *v5;
  if (*v5)
    v83 += 16 * *(unsigned int *)(v83 - 4);
  if (v23 != v83)
  {
    while (!*(_QWORD *)(*(_QWORD *)v23 + 8))
    {
      v84 = v23 + 16;
      v23 = v26;
      if (v84 != v26)
      {
        v23 = v84;
        while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
        {
          v23 += 16;
          if (v23 == v26)
          {
            v23 = v26;
            break;
          }
        }
      }
      if (v23 == v83)
      {
        v23 = v83;
        break;
      }
    }
  }
  v24 = *(_DWORD **)(v23 + 8);
  if (v24)
LABEL_114:
    *v24 += 2;
LABEL_115:
  *a3 = v24;
  return this;
}

void `non-virtual thunk to'WebCore::InspectorPageAgent::searchInResources(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WebCore::InspectorPageAgent::searchInResources(a1 - 32, a2);
}

uint64_t `non-virtual thunk to'WebCore::InspectorPageAgent::setShowPaintRects@<X0>(WebCore::InspectorPageAgent *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  *((_BYTE *)this + 121) = (_BYTE)a2;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 96))(*((_QWORD *)this + 4));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 88))(*((_QWORD *)this + 4));
  if ((result & 1) == 0)
    result = WebCore::InspectorOverlay::setShowPaintRects(*((_QWORD *)this + 5), a2);
  *a3 = 0;
  a3[8] = 0;
  return result;
}

_DWORD *WebCore::InspectorPageAgent::frameNavigated(WebCore::InspectorPageAgent *this, WebCore::LocalFrame *a2)
{
  _DWORD *result;
  _DWORD *v3;

  WebCore::InspectorPageAgent::buildObjectForFrame((WebCore::InspectorPageAgent *)&v3, this, a2);
  Inspector::PageFrontendDispatcher::frameNavigated();
  result = v3;
  v3 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorPageAgent::buildObjectForFrame(WebCore::InspectorPageAgent *this, WebCore::LocalFrame *a2, WebCore::Frame *a3)
{
  WTF::StringImpl *v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::String *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::JSONImpl::Value *v24;
  WTF::StringImpl *v25;
  const WTF::String *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  const WTF::String *v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  const WTF::String *v46;
  WTF::StringImpl *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *result;
  uint64_t v59;
  WebCore::Frame *v60;
  WebCore::Frame *v61;
  const WTF::String *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  WTF::StringImpl **v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  const WTF::String *v82;
  WTF::StringImpl *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  _DWORD *v88;
  WTF::StringImpl *v89;
  _DWORD **v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD **v93;
  uint64_t v94;
  _DWORD *v95;
  _DWORD **v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD **v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD **v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD **v105;
  uint64_t v106;
  _DWORD *v107;
  _DWORD **v108;
  uint64_t v109;
  _DWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  _DWORD *v119;
  _BYTE v120[16];
  char v121;

  WTF::JSONImpl::Object::create(this);
  WebCore::InspectorPageAgent::frameId((unsigned int *)a2, a3, &v116);
  v6 = v117;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v116, v7);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v6 + 2, &v118, (const WTF::StringImpl *)&v119, (uint64_t)v120);
  if (v121)
  {
    v9 = (uint64_t *)((char *)v6 + 24);
    v10 = *((unsigned int *)v6 + 9);
    if ((_DWORD)v10 == *((_DWORD *)v6 + 8))
    {
      v90 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1, (unint64_t)&v118);
      v10 = *((unsigned int *)v6 + 9);
      v91 = *((_QWORD *)v6 + 3);
      v92 = *v90;
      if (*v90)
        *v92 += 2;
      *(_QWORD *)(v91 + 8 * v10) = v92;
    }
    else
    {
      v11 = *v9;
      v12 = v118;
      if (v118)
        *(_DWORD *)v118 += 2;
      *(_QWORD *)(v11 + 8 * v10) = v12;
    }
    *((_DWORD *)v6 + 9) = v10 + 1;
  }
  v13 = v119;
  v119 = 0;
  if (v13)
  {
    if (*v13 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v13;
  }
  v14 = v118;
  v118 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  WebCore::InspectorPageAgent::loaderId((uint64_t *)a2, *(_QWORD *)(*((_QWORD *)a3 + 35) + 88), &v115);
  v15 = v117;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v115, v16);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v15 + 2, &v118, (const WTF::StringImpl *)&v119, (uint64_t)v120);
  if (v121)
  {
    v18 = (uint64_t *)((char *)v15 + 24);
    v19 = *((unsigned int *)v15 + 9);
    if ((_DWORD)v19 == *((_DWORD *)v15 + 8))
    {
      v93 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v118);
      v19 = *((unsigned int *)v15 + 9);
      v94 = *((_QWORD *)v15 + 3);
      v95 = *v93;
      if (*v93)
        *v95 += 2;
      *(_QWORD *)(v94 + 8 * v19) = v95;
    }
    else
    {
      v20 = *v18;
      v21 = v118;
      if (v118)
        *(_DWORD *)v118 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *((_DWORD *)v15 + 9) = v19 + 1;
  }
  v22 = v119;
  v119 = 0;
  if (v22)
  {
    if (*v22 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v22;
  }
  v23 = v118;
  v118 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::JSONImpl::Value *)(*((_QWORD *)a3 + 37) + 736);
  v25 = v117;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v24, v26);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v25 + 2, &v118, (const WTF::StringImpl *)&v119, (uint64_t)v120);
  if (v121)
  {
    v28 = (uint64_t *)((char *)v25 + 24);
    v29 = *((unsigned int *)v25 + 9);
    if ((_DWORD)v29 == *((_DWORD *)v25 + 8))
    {
      v96 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1, (unint64_t)&v118);
      v29 = *((unsigned int *)v25 + 9);
      v97 = *((_QWORD *)v25 + 3);
      v98 = *v96;
      if (*v96)
        *v98 += 2;
      *(_QWORD *)(v97 + 8 * v29) = v98;
    }
    else
    {
      v30 = *v28;
      v31 = v118;
      if (v118)
        *(_DWORD *)v118 += 2;
      *(_QWORD *)(v30 + 8 * v29) = v31;
    }
    *((_DWORD *)v25 + 9) = v29 + 1;
  }
  v32 = v119;
  v119 = 0;
  if (v32)
  {
    if (*v32 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v32;
  }
  v33 = v118;
  v118 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v27);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = *(_QWORD *)(*((_QWORD *)a3 + 35) + 88);
  WebCore::ResourceResponse::platformLazyInit(v34 + 1272, 1);
  v35 = v117;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v34 + 1312), v36);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v35 + 2, &v118, (const WTF::StringImpl *)&v119, (uint64_t)v120);
  if (v121)
  {
    v38 = (uint64_t *)((char *)v35 + 24);
    v39 = *((unsigned int *)v35 + 9);
    if ((_DWORD)v39 == *((_DWORD *)v35 + 8))
    {
      v99 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v118);
      v39 = *((unsigned int *)v35 + 9);
      v100 = *((_QWORD *)v35 + 3);
      v101 = *v99;
      if (*v99)
        *v101 += 2;
      *(_QWORD *)(v100 + 8 * v39) = v101;
    }
    else
    {
      v40 = *v38;
      v41 = v118;
      if (v118)
        *(_DWORD *)v118 += 2;
      *(_QWORD *)(v40 + 8 * v39) = v41;
    }
    *((_DWORD *)v35 + 9) = v39 + 1;
  }
  v42 = v119;
  v119 = 0;
  if (v42)
  {
    if (*v42 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v42;
  }
  v43 = v118;
  v118 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v37);
    else
      *(_DWORD *)v43 -= 2;
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*((_QWORD *)a3 + 37) + 192), v37);
  WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v44 + 8), &v114);
  v45 = v117;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v114, v46);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v45 + 2, &v118, (const WTF::StringImpl *)&v119, (uint64_t)v120);
  if (v121)
  {
    v48 = (uint64_t *)((char *)v45 + 24);
    v49 = *((unsigned int *)v45 + 9);
    if ((_DWORD)v49 == *((_DWORD *)v45 + 8))
    {
      v102 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v118);
      v49 = *((unsigned int *)v45 + 9);
      v103 = *((_QWORD *)v45 + 3);
      v104 = *v102;
      if (*v102)
        *v104 += 2;
      *(_QWORD *)(v103 + 8 * v49) = v104;
    }
    else
    {
      v50 = *v48;
      v51 = v118;
      if (v118)
        *(_DWORD *)v118 += 2;
      *(_QWORD *)(v50 + 8 * v49) = v51;
    }
    *((_DWORD *)v45 + 9) = v49 + 1;
  }
  v52 = v119;
  v119 = 0;
  if (v52)
  {
    if (*v52 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v52;
  }
  v53 = v118;
  v118 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v47);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = v117;
  v117 = 0;
  *(_QWORD *)this = v54;
  v55 = v114;
  v114 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v47);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = v115;
  v115 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v47);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = v116;
  v116 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v47);
    else
      *(_DWORD *)v57 -= 2;
  }
  result = v117;
  v117 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  v59 = *((_QWORD *)a3 + 7);
  if (v59)
  {
    v60 = *(WebCore::Frame **)(v59 + 8);
    if (v60)
    {
      if (*((_BYTE *)v60 + 144))
        v61 = 0;
      else
        v61 = v60;
      WebCore::InspectorPageAgent::frameId((unsigned int *)a2, v61, &v117);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v117, v62);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v54 + 2, &v118, (const WTF::StringImpl *)&v119, (uint64_t)v120);
      if (v121)
      {
        v63 = (uint64_t *)((char *)v54 + 24);
        v64 = *((unsigned int *)v54 + 9);
        if ((_DWORD)v64 == *((_DWORD *)v54 + 8))
        {
          v108 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v118);
          v64 = *((unsigned int *)v54 + 9);
          v109 = *((_QWORD *)v54 + 3);
          v110 = *v108;
          if (*v108)
            *v110 += 2;
          *(_QWORD *)(v109 + 8 * v64) = v110;
        }
        else
        {
          v65 = *v63;
          v66 = v118;
          if (v118)
            *(_DWORD *)v118 += 2;
          *(_QWORD *)(v65 + 8 * v64) = v66;
        }
        *((_DWORD *)v54 + 9) = v64 + 1;
      }
      v67 = v119;
      v119 = 0;
      if (v67)
      {
        if (*v67 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v67;
      }
      v68 = v118;
      v118 = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2)
          WTF::StringImpl::destroy(v68, v47);
        else
          *(_DWORD *)v68 -= 2;
      }
      result = v117;
      v117 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  v69 = *((_QWORD *)a3 + 15);
  if (v69)
  {
    v70 = *(_QWORD *)(v69 + 8);
    if (v70)
    {
      v71 = *(_QWORD *)(v70 + 104);
      if (v71 && (v72 = *(_DWORD *)(v71 + 4), (v72 & 2) != 0))
      {
        if ((v72 & 1) != 0)
        {
          v111 = *(_QWORD **)(v71 + 40);
          LODWORD(v112) = *(_DWORD *)(v71 + 52);
        }
        else
        {
          v111 = (_QWORD *)(v71 + 32);
          LODWORD(v112) = v72 >> 5;
        }
        if ((_DWORD)v112)
        {
          v112 = v112;
          while (1)
          {
            v113 = *v111;
            if (*v111 == WebCore::HTMLNames::nameAttr
              || *(_QWORD *)(v113 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
              && *(_QWORD *)(v113 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
            {
              break;
            }
            v111 += 2;
            if (!--v112)
              goto LABEL_186;
          }
        }
        else
        {
LABEL_186:
          v111 = 0;
        }
        v73 = (WTF::StringImpl **)(v111 + 1);
      }
      else
      {
        v73 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      }
      v74 = *v73;
      if (*v73)
      {
        *(_DWORD *)v74 += 2;
        v117 = v74;
        if (*((_DWORD *)v74 + 1))
          goto LABEL_126;
      }
      if (v71)
      {
        v75 = *(_DWORD *)(v71 + 4);
        if ((v75 & 1) != 0)
        {
          v76 = *(_QWORD *)(v71 + 40);
          v77 = *(_DWORD *)(v71 + 52);
          if (v77)
          {
LABEL_103:
            v78 = v77;
            v79 = (WTF::StringImpl **)(v76 + 8);
            while (1)
            {
              v80 = (uint64_t)*(v79 - 1);
              if (v80 == WebCore::HTMLNames::idAttr
                || *(_QWORD *)(v80 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                && *(_QWORD *)(v80 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
              {
                goto LABEL_121;
              }
              v79 += 2;
              if (!--v78)
              {
                v79 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                goto LABEL_121;
              }
            }
          }
        }
        else
        {
          v76 = v71 + 32;
          v77 = v75 >> 5;
          if (v75 >> 5)
            goto LABEL_103;
        }
      }
      v79 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_121:
      v81 = *v79;
      if (v81)
        *(_DWORD *)v81 += 2;
      v117 = v81;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, v47);
        else
          *(_DWORD *)v74 -= 2;
      }
LABEL_126:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v117, v82);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v54 + 2, &v118, (const WTF::StringImpl *)&v119, (uint64_t)v120);
      if (v121)
      {
        v84 = (uint64_t *)((char *)v54 + 24);
        v85 = *((unsigned int *)v54 + 9);
        if ((_DWORD)v85 == *((_DWORD *)v54 + 8))
        {
          v105 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v118);
          v85 = *((unsigned int *)v54 + 9);
          v106 = *((_QWORD *)v54 + 3);
          v107 = *v105;
          if (*v105)
            *v107 += 2;
          *(_QWORD *)(v106 + 8 * v85) = v107;
        }
        else
        {
          v86 = *v84;
          v87 = v118;
          if (v118)
            *(_DWORD *)v118 += 2;
          *(_QWORD *)(v86 + 8 * v85) = v87;
        }
        *((_DWORD *)v54 + 9) = v85 + 1;
      }
      v88 = v119;
      v119 = 0;
      if (v88)
      {
        if (*v88 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v88;
      }
      v89 = v118;
      v118 = 0;
      if (v89)
      {
        if (*(_DWORD *)v89 == 2)
          WTF::StringImpl::destroy(v89, v83);
        else
          *(_DWORD *)v89 -= 2;
      }
      result = v117;
      v117 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v83);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorPageAgent::frameDetached(WebCore::InspectorPageAgent *this, WebCore::LocalFrame *a2)
{
  WTF::StringImpl *result;
  const WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  result = (WTF::StringImpl *)WTF::WeakHashMap<WebCore::Frame,WTF::String,WTF::DefaultWeakPtrImpl>::take((uint64_t)this + 80, a2, &v7);
  if (v7)
  {
    Inspector::PageFrontendDispatcher::frameDetached(*((Inspector::PageFrontendDispatcher **)this + 5), (const WTF::String *)&v7);
    v5 = (WTF::StringImpl **)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 12, &v7, v4);
    if ((WTF::StringImpl **)(*((_QWORD *)this + 12) + 16 * *((unsigned int *)this + 26)) != v5)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)this + 96, v5);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Frame,WTF::String,WTF::DefaultWeakPtrImpl>::take@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v30;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::Frame,WTF::String,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, a2);
  result = a2[2];
  if (!result)
    goto LABEL_12;
  if (!*(_QWORD *)(result + 8))
    goto LABEL_12;
  v9 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_12;
  v10 = *(_DWORD *)(v9 - 8);
  v11 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  for (i = 1; ; v14 = (v16 + i++) & v10)
  {
    v16 = v14;
    v17 = *(_QWORD *)(v9 + 16 * v14);
    if (v17 != -1)
    {
      if (!v17)
        goto LABEL_12;
      if (v17 == result)
        break;
    }
  }
  if ((_DWORD)v16 != *(_DWORD *)(v9 - 4))
  {
    v18 = (_QWORD *)(v9 + 16 * v16);
    v20 = v18 + 1;
    v19 = v18[1];
    v18[1] = 0;
    *a3 = v19;
    v21 = *(_QWORD **)a1;
    if (!*(_QWORD *)a1 || (v21 += 2 * *((unsigned int *)v21 - 1), v21 != v18))
    {
      if (v21 != v18)
      {
        *v18 = 0;
        do
        {
          v22 = __ldaxr((unsigned int *)result);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, (unsigned int *)result));
        if (!v23)
        {
          atomic_store(1u, (unsigned int *)result);
          v30 = v18;
          WTF::fastFree((WTF *)result, a2);
          v18 = v30;
        }
        *v18 = -1;
        result = *v20;
        *v20 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        ++*(_DWORD *)(*(_QWORD *)a1 - 16);
        v24 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v25 = *(_DWORD *)(v24 - 12) - 1;
        else
          v25 = -1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
        {
          v27 = 6 * *(_DWORD *)(v26 - 12);
          v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9)
            return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v28 >> 1, 0);
        }
      }
    }
  }
  else
  {
LABEL_12:
    *a3 = 0;
  }
  return result;
}

uint64_t *WebCore::InspectorPageAgent::loaderId@<X0>(uint64_t *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  WebCore::DocumentLoader *v13;
  uint64_t *v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  WTF::StringImpl *v25;

  if (!a2)
  {
    v19 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
      goto LABEL_33;
    goto LABEL_32;
  }
  v6 = this + 15;
  v5 = this[15];
  if (v5
    || (this = WTF::HashTable<WebCore::CSSStyleRule const*,WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleRule const*>>::rehash(this + 15, 8u, 0), (v5 = *v6) != 0))
  {
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = (uint64_t *)(v5 + 16 * v11);
  v13 = (WebCore::DocumentLoader *)*v12;
  if (!*v12)
  {
LABEL_13:
    *v12 = a2;
    Inspector::IdentifiersFactory::createIdentifier((Inspector::IdentifiersFactory *)this);
    this = (uint64_t *)v12[1];
    v12[1] = (uint64_t)v25;
    if (this)
    {
      if (*(_DWORD *)this == 2)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)this, v16);
        this = 0;
      }
      else
      {
        *(_DWORD *)this -= 2;
      }
    }
    v17 = *v6;
    if (*v6)
      v18 = *(_DWORD *)(v17 - 12) + 1;
    else
      v18 = 1;
    *(_DWORD *)(v17 - 12) = v18;
    v20 = *v6;
    if (*v6)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        goto LABEL_31;
    }
    else
    {
      if (3 * v23 > 4 * v22)
        goto LABEL_31;
      if (!(_DWORD)v23)
      {
        v24 = 8;
        goto LABEL_30;
      }
    }
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_30:
    this = WTF::HashTable<WebCore::CSSStyleRule const*,WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleRule const*>>::rehash(v6, v24, v12);
    v12 = this;
    goto LABEL_31;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != (WebCore::DocumentLoader *)a2)
  {
    if (v13 == (WebCore::DocumentLoader *)-1)
      v14 = v12;
    v11 = (v11 + v15) & v7;
    v12 = (uint64_t *)(v5 + 16 * v11);
    v13 = (WebCore::DocumentLoader *)*v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v12 = v14;
      }
      goto LABEL_13;
    }
  }
LABEL_31:
  v19 = (_DWORD *)v12[1];
  if (v19)
LABEL_32:
    *v19 += 2;
LABEL_33:
  *a3 = v19;
  return this;
}

uint64_t WTF::HashMap<WebCore::DocumentLoader *,WTF::String,WTF::DefaultHash<WebCore::DocumentLoader *>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
  v9 = *(_QWORD *)(v2 + 16 * v8);
  if (v9 != *(_QWORD *)a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v2 + 16 * v8);
      ++v10;
      if (v9 == *(_QWORD *)a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = (_QWORD *)(v2 + 16 * v8);
  v13 = (WTF::StringImpl *)v12[1];
  *v12 = -1;
  v12[1] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  ++*(_DWORD *)(*a1 - 16);
  v14 = *a1;
  if (*a1)
    v15 = *(_DWORD *)(v14 - 12) - 1;
  else
    v15 = -1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a1;
  if (*a1)
  {
    v17 = 6 * *(_DWORD *)(v16 - 12);
    v18 = *(_DWORD *)(v16 - 4);
    if (v17 < v18 && v18 >= 9)
      WTF::HashTable<WebCore::CSSStyleRule const*,WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleRule const*>>::rehash(a1, v18 >> 1, 0);
  }
  return 1;
}

uint64_t *Inspector::Protocol::Page::UserPreference::Builder<0>::setName(uint64_t *a1, Inspector::Protocol::Helpers *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  _BYTE v21[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue(a2);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v18, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v19, (const WTF::StringImpl *)&v20, (uint64_t)v21);
  if (v21[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v15 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v19);
      v8 = *(unsigned int *)(v4 + 36);
      v16 = *(_QWORD *)(v4 + 24);
      v17 = *v15;
      if (*v15)
        *v17 += 2;
      *(_QWORD *)(v16 + 8 * v8) = v17;
    }
    else
    {
      v9 = *v7;
      v10 = v19;
      if (v19)
        *(_DWORD *)v19 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Page::UserPreference::Builder<1>::setValue(uint64_t *a1, Inspector::Protocol::Helpers *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  _BYTE v21[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue(a2);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v18, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v19, (const WTF::StringImpl *)&v20, (uint64_t)v21);
  if (v21[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v15 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v19);
      v8 = *(unsigned int *)(v4 + 36);
      v16 = *(_QWORD *)(v4 + 24);
      v17 = *v15;
      if (*v15)
        *v17 += 2;
      *(_QWORD *)(v16 + 8 * v8) = v17;
    }
    else
    {
      v9 = *v7;
      v10 = v19;
      if (v19)
        *(_DWORD *)v19 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  return a1;
}

WTF::StringImpl *WebCore::InspectorPageAgent::didClearWindowObjectInWorld(WTF::StringImpl *this, WebCore::LocalFrame *a2, WebCore::DOMWrapperWorld *a3)
{
  WTF::StringImpl *v4;
  WebCore::DOMWrapperWorld *v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  WebCore::ScriptController *v9;
  WebCore::DOMWrapperWorld *v10;
  void *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::DOMWrapperWorld *v17;
  int32x2_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[5];
  _DWORD *v21;
  _DWORD *v22;
  unsigned int *v23;
  _BYTE v24[32];
  int v25;
  char v26;

  v4 = this;
  {
    v5 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  }
  else
  {
    v17 = a3;
    this = (WTF::StringImpl *)WebCore::g_commonVMOrNull;
    if (!WebCore::g_commonVMOrNull)
      this = (WTF::StringImpl *)WebCore::commonVMSlow(0);
    v5 = *(WebCore::DOMWrapperWorld **)(*((_QWORD *)this + 5182) + 16);
    WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v5;
    a3 = v17;
  }
  if (v5 == a3)
  {
    v8 = *((_QWORD *)v4 + 18);
    v7 = (_DWORD **)((char *)v4 + 144);
    v6 = v8;
    if (v8)
    {
      if (*(_DWORD *)(v6 + 4))
      {
        v9 = (WebCore::ScriptController *)*((_QWORD *)a2 + 38);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        MEMORY[0x19AEA52D4](v20, &v19, 0);
        v18 = 0;
        WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v21, v7, 0, v20, &v18);
        {
          v10 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
        }
        else
        {
          v16 = WebCore::g_commonVMOrNull;
          if (!WebCore::g_commonVMOrNull)
            v16 = WebCore::commonVMSlow(0);
          v10 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v16 + 41456) + 16);
          WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v10;
        }
        WebCore::ScriptController::evaluateInWorld(v9, (const WebCore::ScriptSourceCode *)&v21, v10);
        if (v25 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v25])(&v26, v24);
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v23, v11);
        v13 = v22;
        v22 = 0;
        if (v13)
        {
          if (v13[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          else
            --v13[2];
        }
        v14 = v21;
        v21 = 0;
        if (v14)
        {
          if (v14[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
          else
            --v14[2];
        }
        v15 = v20[0];
        v20[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v12);
          else
            *(_DWORD *)v15 -= 2;
        }
        this = v19;
        v19 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v12);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

WTF::MonotonicTime *WebCore::InspectorPageAgent::didPaint(WTF::MonotonicTime *this, WebCore::RenderObject *a2, int32x2_t *a3)
{
  WTF::MonotonicTime *v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v15;
  float v16;
  float v17;
  float v19;
  float v21;
  float v22;
  float v24;
  float v25;
  double v26;
  int v27;
  int v28;
  double v29;
  int v30;
  int v31;
  double v32;
  int v33;
  int v34;
  double v35;
  int v36;
  int v37;
  WebCore::ScrollView *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  WebCore::ScrollView *v53;
  unint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  WTF::MonotonicTime *v62;
  unsigned int v63;
  unsigned int v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  float32x2_t v68;
  float32x2_t v69;
  __int128 v70;
  float v71;
  float v72;
  float v73;
  float v74;

  if (*((_BYTE *)this + 153))
  {
    v4 = this;
    v5 = (float32x2_t)vdup_n_s32(0x3C800000u);
    v6 = vmul_f32(vcvt_f32_s32(*a3), v5);
    v7 = vadd_f32(v6, vmul_f32(vcvt_f32_s32(a3[1]), v5));
    v66 = (unint64_t)v6;
    v67 = __PAIR64__(v6.u32[1], v7.u32[0]);
    v6.i32[1] = v7.i32[1];
    v68 = v7;
    v69 = v6;
    WebCore::RenderObject::localToContainerQuad((uint64_t)a2, (float *)&v66, 0, 2u, &v70);
    v8 = v71;
    v9 = v72;
    if (v73 >= v71)
      v10 = v71;
    else
      v10 = v73;
    v11 = *(float *)&v70;
    if (*((float *)&v70 + 2) >= *(float *)&v70)
      v12 = *(float *)&v70;
    else
      v12 = *((float *)&v70 + 2);
    if (v10 >= v12)
      v10 = v12;
    v13 = fabsf(v10);
    if (v13 == INFINITY || v13 > 2147500000.0)
      v10 = (float)((SLODWORD(v10) >> 31) ^ 0x7FFFFFFF);
    if (v74 >= v72)
      v15 = v72;
    else
      v15 = v74;
    if (*((float *)&v70 + 3) >= *((float *)&v70 + 1))
      v16 = *((float *)&v70 + 1);
    else
      v16 = *((float *)&v70 + 3);
    if (v15 >= v16)
      v15 = v16;
    v17 = fabsf(v15);
    if (v17 == INFINITY || v17 > 2147500000.0)
      v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
    if (*(float *)&v70 < *((float *)&v70 + 2))
      v11 = *((float *)&v70 + 2);
    if (v71 < v73)
      v8 = v73;
    if (v11 >= v8)
      v8 = v11;
    v19 = fabsf(v8);
    if (v19 == INFINITY || v19 > 2147500000.0)
      v8 = (float)((SLODWORD(v8) >> 31) ^ 0x7FFFFFFF);
    if (*((float *)&v70 + 1) >= *((float *)&v70 + 3))
      v21 = *((float *)&v70 + 1);
    else
      v21 = *((float *)&v70 + 3);
    if (v72 < v74)
      v9 = v74;
    if (v21 >= v9)
      v9 = v21;
    v22 = fabsf(v9);
    if (v22 == INFINITY || v22 > 2147500000.0)
      v9 = (float)((SLODWORD(v9) >> 31) ^ 0x7FFFFFFF);
    v24 = v8 - v10;
    v25 = v9 - v15;
    v26 = v10 * 64.0;
    if (v26 > -2147483650.0)
      v27 = (int)v26;
    else
      v27 = 0x80000000;
    if (v26 < 2147483650.0)
      v28 = v27;
    else
      v28 = 0x7FFFFFFF;
    v29 = v15 * 64.0;
    if (v29 > -2147483650.0)
      v30 = (int)v29;
    else
      v30 = 0x80000000;
    if (v29 < 2147483650.0)
      v31 = v30;
    else
      v31 = 0x7FFFFFFF;
    v32 = v24 * 64.0;
    if (v32 > -2147483650.0)
      v33 = (int)v32;
    else
      v33 = 0x80000000;
    if (v32 < 2147483650.0)
      v34 = v33;
    else
      v34 = 0x7FFFFFFF;
    v35 = v25 * 64.0;
    if (v35 > -2147483650.0)
      v36 = (int)v35;
    else
      v36 = 0x80000000;
    if (v35 < 2147483650.0)
      v37 = v36;
    else
      v37 = 0x7FFFFFFF;
    v38 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8)
                                                                                  + 40)
                                                                      + 8)
                                                          + 528)
                                              + 8)
                                  + 288);
    v39 = *((_QWORD *)v38 + 41);
    v40 = (unsigned int *)(v39 + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
    if (*(_QWORD *)(*(_QWORD *)(v39 + 128) + 8) != v39)
    {
      if (v28 >= 0)
        v42 = v28;
      else
        v42 = v28 + 63;
      v43 = v28 - (v42 & 0xFFFFFFC0);
      if (v31 >= 0)
        v44 = v31;
      else
        v44 = v31 + 63;
      v45 = v31 - (v44 & 0xFFFFFFC0);
      v46 = v43 + v34;
      if (__OFADD__(v43, v34))
        v46 = (v43 >> 31) + 0x7FFFFFFF;
      v47 = v42 >> 6;
      v48 = v44 >> 6;
      v49 = v45 + v37;
      if (__OFADD__(v45, v37))
        v49 = (v45 >> 31) + 0x7FFFFFFF;
      v50 = v45 + 32;
      v51 = v43 + 32;
      v66 = (v47 + (v51 >> 6)) | ((unint64_t)(v48 + (v50 >> 6)) << 32);
      v67 = (v46 / 64 - (v51 >> 6) + ((int)(v46 - (v48 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v49 / 64 - (v50 >> 6) + ((int)(v49 - (v51 & 0xFFFFFFC0) + 32) >> 6)) << 32);
      *(_QWORD *)&v70 = WebCore::ScrollView::contentsToRootView(v38, (const WebCore::IntRect *)&v66);
      *((_QWORD *)&v70 + 1) = v52;
      v53 = (WebCore::ScrollView *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v39 + 128) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v39 + 128) + 8));
      v54 = WebCore::ScrollView::rootViewToContents(v53, (const WebCore::IntRect *)&v70);
      v57 = (_DWORD)v54 << 6;
      if ((int)v54 < -33554432)
        v57 = 0x80000000;
      if ((int)v54 <= 0x1FFFFFF)
        v28 = v57;
      else
        v28 = 0x7FFFFFFF;
      v58 = HIDWORD(v54) << 6;
      if (SHIDWORD(v54) < -33554432)
        v58 = 0x80000000;
      if (SHIDWORD(v54) <= 0x1FFFFFF)
        v31 = v58;
      else
        v31 = 0x7FFFFFFF;
      v59 = v55 << 6;
      if (v55 < -33554432)
        v59 = 0x80000000;
      if (v55 <= 0x1FFFFFF)
        v34 = v59;
      else
        v34 = 0x7FFFFFFF;
      v60 = v56 << 6;
      if (v56 < -33554432)
        v60 = 0x80000000;
      if (v56 <= 0x1FFFFFF)
        v37 = v60;
      else
        v37 = 0x7FFFFFFF;
    }
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v4 + 8) + 88))(*((_QWORD *)v4 + 8)))
    {
      v61 = *((_QWORD *)v4 + 8);
      *(float *)&v70 = (float)v28 * 0.015625;
      *((float *)&v70 + 1) = (float)v31 * 0.015625;
      *((float *)&v70 + 2) = (float)v34 * 0.015625;
      *((float *)&v70 + 3) = (float)v37 * 0.015625;
      this = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v61 + 104))(v61, &v70);
    }
    else
    {
      v62 = (WTF::MonotonicTime *)*((_QWORD *)v4 + 9);
      *(float *)&v70 = (float)v28 * 0.015625;
      *((float *)&v70 + 1) = (float)v31 * 0.015625;
      *((float *)&v70 + 2) = (float)v34 * 0.015625;
      *((float *)&v70 + 3) = (float)v37 * 0.015625;
      this = WebCore::InspectorOverlay::showPaintRect(v62, (const WebCore::FloatRect *)&v70);
    }
    do
    {
      v63 = __ldaxr(v40);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, v40));
    if (!v64)
    {
      atomic_store(1u, v40);
      v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v65 = off_1E31FE290;
      v65[1] = v40;
      *(_QWORD *)&v70 = v65;
      WTF::ensureOnMainThread();
      this = (WTF::MonotonicTime *)v70;
      *(_QWORD *)&v70 = 0;
      if (this)
        return (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

void `non-virtual thunk to'WebCore::InspectorPageAgent::setEmulatedMedia(const WTF::StringImpl **this@<X0>, WTF **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  WebCore::InspectorPageAgent::setEmulatedMedia(this - 4, a2, a3, a4);
}

WTF::StringImpl *WebCore::InspectorPageAgent::snapshotNode@<X0>(WebCore::InspectorPageAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  WebCore::Node *v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  WTF::StringImpl *result;
  unint64_t v12;
  CFTypeRef v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  CFTypeRef cf;
  char v29;
  WTF::StringImpl *v30;
  char *v31;

  v5 = WebCore::InspectorDOMAgent::nodeForId(*(WebCore::InspectorDOMAgent **)(*((_QWORD *)this + 2) + 40), a2);
  if (v5)
  {
    v7 = (WebCore::Node *)v5;
    v8 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v8 + 2;
    if (v8)
    {
      *(_DWORD *)(v5 + 24) = v8;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    v9 = *(_QWORD *)(*((_QWORD *)this + 7) + 160);
    if (v9)
      v10 = *(_BYTE *)(v9 + 144) == 0;
    else
      v10 = 0;
    if (!v10)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_9:
      *(_DWORD *)(a3 + 8) = 1;
      return result;
    }
    LOWORD(v27) = 0;
    BYTE2(v27) = 1;
    v12 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v12 != -1)
    {
      v31 = &v29;
      v30 = (WTF::StringImpl *)&v31;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v30, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
      CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    WebCore::snapshotNode((WebCore::LocalFrameView **)v9, v7, (unsigned __int16 *)&v27, (uint64_t *)&v31);
    v13 = cf;
    cf = 0;
    if (v13)
      CFRelease(v13);
    v14 = (uint64_t)v31;
    if (v31)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::ImageBuffer::toDataURL(v14, (WebCore *)&v30, 0, 0, 1, &v27);
      *(_QWORD *)a3 = v27;
      *(_DWORD *)(a3 + 8) = 0;
      v27 = 0;
      result = v30;
      v30 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_DWORD *)(a3 + 8) = 1;
    }
    v16 = (uint64_t)v31;
    v31 = 0;
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (__ldaxr((unsigned __int8 *)v17))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v17))
      {
        goto LABEL_26;
      }
      result = (WTF::StringImpl *)MEMORY[0x19AEA534C](v17);
LABEL_26:
      v19 = *(_QWORD *)(v17 + 8);
      v20 = v19 - 1;
      *(_QWORD *)(v17 + 8) = v19 - 1;
      if (v19 == 1)
      {
        v26 = *(_QWORD *)(v17 + 16);
        v21 = *(_QWORD *)(v17 + 24);
        *(_QWORD *)(v17 + 24) = 0;
        v22 = v26 != 0;
      }
      else
      {
        v21 = 0;
        v22 = 1;
      }
      v23 = __ldxr((unsigned __int8 *)v17);
      if (v23 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v17))
        {
          if (v20)
            return result;
LABEL_34:
          if (v21)
            result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          if (!v22)
            return (WTF::StringImpl *)WTF::fastFree((WTF *)v17, v15);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v17);
      if (v20)
        return result;
      goto LABEL_34;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v27;
    if (!v27)
    {
      *(_QWORD *)a3 = 0;
      goto LABEL_9;
    }
    v25 = *(_DWORD *)v27;
    *(_DWORD *)v27 += 2;
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 8) = 1;
    if (v25)
      *(_DWORD *)result = v25;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::InspectorPageAgent::snapshotNode@<X0>(WebCore::InspectorPageAgent *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorPageAgent::snapshotNode((WebCore::InspectorPageAgent *)((char *)this - 32), a2, a3);
}

void WebCore::InspectorPageAgent::snapshotRect(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int32x4_t v31;
  unsigned __int16 v32;
  char v33;
  uint64_t v34;
  _QWORD v35[2];

  v32 = 0;
  v33 = 1;
  v14 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v14 != -1)
  {
    v35[0] = &v30;
    v31.i64[0] = (uint64_t)v35;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v15 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  v34 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  if (a6 == 226)
    v32 = 4;
  v31.i64[0] = __PAIR64__(a3, a2);
  v31.i64[1] = __PAIR64__(a5, a4);
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 160);
  if (v16)
    v17 = *(_BYTE *)(v16 + 144) == 0;
  else
    v17 = 0;
  if (!v17)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a7 + 8) = 1;
    goto LABEL_34;
  }
  v35[0] = 0;
  v35[1] = 0;
  WebCore::snapshotFrameRectWithClip((uint64_t *)v16, &v31, (uint64_t)v35, &v32, &v30);
  v18 = v30;
  if (!v30)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a7 + 8) = 1;
    goto LABEL_33;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ImageBuffer::toDataURL(v18, (WebCore *)&v29, 0, 0, 1, v35);
  *(_QWORD *)a7 = v35[0];
  *(_DWORD *)(a7 + 8) = 0;
  v35[0] = 0;
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v30 = 0;
  v21 = *(_QWORD *)(v18 + 8);
  if (__ldaxr((unsigned __int8 *)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v21))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v21);
LABEL_21:
  v23 = *(_QWORD *)(v21 + 8);
  v24 = v23 - 1;
  *(_QWORD *)(v21 + 8) = v23 - 1;
  if (v23 == 1)
  {
    v28 = *(_QWORD *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 24);
    *(_QWORD *)(v21 + 24) = 0;
    v26 = v28 != 0;
  }
  else
  {
    v25 = 0;
    v26 = 1;
  }
  v27 = __ldxr((unsigned __int8 *)v21);
  if (v27 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v21))
    {
      if (!v24)
        goto LABEL_29;
      goto LABEL_33;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v21);
  if (!v24)
  {
LABEL_29:
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    if (!v26)
      WTF::fastFree((WTF *)v21, v19);
  }
LABEL_33:
  v15 = (const void *)v34;
LABEL_34:
  v34 = 0;
  if (v15)
    CFRelease(v15);
}

void `non-virtual thunk to'WebCore::InspectorPageAgent::snapshotRect(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  WebCore::InspectorPageAgent::snapshotRect(a1 - 32, a2, a3, a4, a5, a6, a7);
}

uint64_t WebCore::InspectorPageAgent::archive@<X0>(WebCore::InspectorPageAgent *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  BOOL v4;
  uint64_t result;
  const __CFData *v6;
  CFDataRef theData;
  WebCore::LegacyWebArchive *v8;

  v3 = *(WTF::StringImpl **)(*((_QWORD *)this + 7) + 160);
  if (v3)
    v4 = *((_BYTE *)v3 + 144) == 0;
  else
    v4 = 0;
  if (!v4)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a2 + 8) = 1;
    return result;
  }
  WebCore::LegacyWebArchive::create(v3, (uint64_t *)&v8);
  if (v8)
  {
    WebCore::LegacyWebArchive::rawDataRepresentation(v8, &theData);
    v6 = theData;
    CFDataGetBytePtr(theData);
    result = CFDataGetLength(v6);
    if (result < 0)
    {
      __break(0xC471u);
      return result;
    }
    WTF::base64EncodeToString();
    *(_DWORD *)(a2 + 8) = 0;
    if (v6)
      CFRelease(v6);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a2 + 8) = 1;
  }
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorPageAgent::archive@<X0>(WebCore::InspectorPageAgent *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::InspectorPageAgent::archive((WebCore::InspectorPageAgent *)((char *)this - 32), a2);
}

uint64_t WebCore::InspectorTimelineAgent::InspectorTimelineAgent(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v9)
  {
    v5 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 2;
    *(_QWORD *)a1 = off_1E33EFBF8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
    if (v5)
      *(_DWORD *)v9 = v5;
    else
      WTF::StringImpl::destroy(v9, v4);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
  }
  *(_QWORD *)a1 = off_1E33F0310;
  *(_QWORD *)(a1 + 32) = &unk_1E33F0388;
  *(_QWORD *)(a1 + 40) = &unk_1E33F03D8;
  v6 = a2[2];
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = v6;
  *(_QWORD *)(a1 + 48) = v7;
  Inspector::TimelineBackendDispatcher::create();
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = a2[5];
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 5;
  *(_QWORD *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 150) = 0;
  return a1;
}

void WebCore::InspectorTimelineAgent::~InspectorTimelineAgent(WebCore::InspectorTimelineAgent *this, void *a2)
{
  WTF *v3;
  __CFRunLoopObserver *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  WTF *v8;
  __CFRunLoopObserver *v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  void *v15;
  _DWORD *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v3 = (WTF *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    v4 = (__CFRunLoopObserver *)*((_QWORD *)v3 + 2);
    if (v4 && (CFRunLoopObserverInvalidate(v4), v5 = (const void *)*((_QWORD *)v3 + 2), *((_QWORD *)v3 + 2) = 0, v5))
    {
      CFRelease(v5);
      v6 = (const void *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v6)
        CFRelease(v6);
    }
    else
    {
      *((_QWORD *)v3 + 2) = 0;
    }
    v7 = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    WTF::fastFree(v3, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v8)
  {
    v9 = (__CFRunLoopObserver *)*((_QWORD *)v8 + 2);
    if (v9
      && (CFRunLoopObserverInvalidate(v9), v10 = (const void *)*((_QWORD *)v8 + 2), *((_QWORD *)v8 + 2) = 0, v10))
    {
      CFRelease(v10);
      v11 = (const void *)*((_QWORD *)v8 + 2);
      *((_QWORD *)v8 + 2) = 0;
      if (v11)
        CFRelease(v11);
    }
    else
    {
      *((_QWORD *)v8 + 2) = 0;
    }
    v12 = *(_QWORD *)v8;
    *(_QWORD *)v8 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    WTF::fastFree(v8, a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 15);
  if (v13)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v13, a2);
  }
  WTF::Vector<WebCore::InspectorTimelineAgent::TimelineRecordEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 22, a2);
  WTF::Vector<WebCore::InspectorTimelineAgent::TimelineRecordEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 18, v14);
  v16 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v17)
    WTF::fastFree(v17, v15);
  Inspector::TimelineBackendDispatcherHandler::~TimelineBackendDispatcherHandler((WebCore::InspectorTimelineAgent *)((char *)this + 32));
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorTimelineAgent::~InspectorTimelineAgent(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::InspectorTimelineAgent::~InspectorTimelineAgent(WebCore::InspectorTimelineAgent *this, void *a2)
{
  WebCore::InspectorTimelineAgent::~InspectorTimelineAgent((WebCore::InspectorTimelineAgent *)((char *)this - 32), a2);
}

{
  WebCore::InspectorTimelineAgent::~InspectorTimelineAgent((WebCore::InspectorTimelineAgent *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorTimelineAgent::~InspectorTimelineAgent((WebCore::InspectorTimelineAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorTimelineAgent::~InspectorTimelineAgent((WebCore::InspectorTimelineAgent *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

WTF *WebCore::InspectorTimelineAgent::willDestroyFrontendAndBackend(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF *result;
  void *v5;
  WTF::StringImpl *v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v1 + 216) == a1)
  {
    *(_QWORD *)(v1 + 216) = 0;
    result = (WTF *)WebCore::InspectorTimelineAgent::internalStop(a1);
    *(_BYTE *)(a1 + 109) = 0;
    *(_BYTE *)(a1 + 111) = 0;
    if (*(_DWORD *)(a1 + 128))
    {
      if (*(_DWORD *)(a1 + 132))
        *(_DWORD *)(a1 + 132) = 0;
      result = *(WTF **)(a1 + 120);
      if (result)
      {
        *(_QWORD *)(a1 + 120) = 0;
        *(_DWORD *)(a1 + 128) = 0;
        return (WTF *)WTF::fastFree(result, v5);
      }
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v6;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        return (WTF *)WTF::StringImpl::destroy(v6, v2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return result;
}

WTF *WebCore::InspectorTimelineAgent::disable@<X0>(WebCore::InspectorTimelineAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  WTF *result;
  char v5;
  void *v7;

  v3 = *((_QWORD *)this + 2);
  if (*(WebCore::InspectorTimelineAgent **)(v3 + 216) == this)
  {
    *(_QWORD *)(v3 + 216) = 0;
    result = (WTF *)WebCore::InspectorTimelineAgent::internalStop((uint64_t)this);
    *((_BYTE *)this + 109) = 0;
    *((_BYTE *)this + 111) = 0;
    if (*((_DWORD *)this + 32))
    {
      if (*((_DWORD *)this + 33))
        *((_DWORD *)this + 33) = 0;
      result = (WTF *)*((_QWORD *)this + 15);
      if (result)
      {
        *((_QWORD *)this + 15) = 0;
        *((_DWORD *)this + 32) = 0;
        result = (WTF *)WTF::fastFree(result, v7);
      }
    }
    v5 = 0;
    *a2 = 0;
  }
  else
  {
    result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 1;
  }
  a2[8] = v5;
  return result;
}

uint64_t WebCore::InspectorTimelineAgent::enable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(this + 16);
  if (*(_QWORD *)(v3 + 216) == this)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_QWORD *)(v3 + 216) = this;
    *a2 = 0;
  }
  a2[8] = v4;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorTimelineAgent::enable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(this - 16);
  if (*(_QWORD *)(v3 + 216) == this - 32)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_QWORD *)(v3 + 216) = this - 32;
    *a2 = 0;
  }
  a2[8] = v4;
  return this;
}

uint64_t WebCore::InspectorTimelineAgent::stop@<X0>(WebCore::InspectorTimelineAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = WebCore::InspectorTimelineAgent::internalStop((uint64_t)this);
  *((_BYTE *)this + 109) = 0;
  *a2 = 0;
  a2[8] = 0;
  return result;
}

WTF *`non-virtual thunk to'WebCore::InspectorTimelineAgent::disable@<X0>(WebCore::InspectorTimelineAgent *this@<X0>, _BYTE *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  WTF *result;
  char v7;
  void *v8;

  v4 = (char *)this - 32;
  v5 = *((_QWORD *)this - 2);
  if (*(char **)(v5 + 216) == v4)
  {
    *(_QWORD *)(v5 + 216) = 0;
    result = (WTF *)WebCore::InspectorTimelineAgent::internalStop((uint64_t)v4);
    *((_BYTE *)this + 77) = 0;
    *((_BYTE *)this + 79) = 0;
    if (*((_DWORD *)this + 24))
    {
      if (*((_DWORD *)this + 25))
        *((_DWORD *)this + 25) = 0;
      result = (WTF *)*((_QWORD *)this + 11);
      if (result)
      {
        *((_QWORD *)this + 11) = 0;
        *((_DWORD *)this + 24) = 0;
        result = (WTF *)WTF::fastFree(result, v8);
      }
    }
    v7 = 0;
    *a2 = 0;
  }
  else
  {
    result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = 1;
  }
  a2[8] = v7;
  return result;
}

uint64_t WebCore::InspectorTimelineAgent::start@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  *(_BYTE *)(a1 + 109) = 1;
  result = WebCore::InspectorTimelineAgent::internalStart(a1, a2);
  *a3 = 0;
  a3[8] = 0;
  return result;
}

uint64_t WebCore::InspectorTimelineAgent::internalStart(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  JSC::Debugger *v7;
  uint64_t v8;
  WebCore::CocoaApplication *v9;
  void *v10;
  WTF *v11;
  __CFRunLoopObserver *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  __CFRunLoop *Current;
  WTF::JSONImpl::Object *v17;
  WTF::JSONImpl::Object *v18;
  Inspector::TimelineFrontendDispatcher *v19;
  double *v20;
  double v21;
  WTF::JSONImpl::Object *v22;

  if (!*(_BYTE *)(result + 108))
  {
    v2 = result;
    if (*(int *)a2 <= 0 || *(_BYTE *)(a2 + 4) == 0)
      v4 = 5;
    else
      v4 = *(_DWORD *)a2;
    *(_DWORD *)(result + 104) = v4;
    v6 = *(_QWORD *)(result + 16);
    v5 = *(_QWORD *)(result + 24);
    *(_QWORD *)(v6 + 232) = v2;
    v7 = (JSC::Debugger *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
    JSC::Debugger::addObserver(v7, (JSC::Debugger::Observer *)(v2 + 40));
    *(_BYTE *)(v2 + 108) = 1;
    v8 = WTF::fastMalloc((WTF *)0x18);
    v9 = (WebCore::CocoaApplication *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v9 = off_1E33F0990;
    *((_QWORD *)v9 + 1) = v2;
    *(_QWORD *)v8 = v9;
    *(_WORD *)(v8 + 8) = 768;
    *(_QWORD *)(v8 + 16) = 0;
    v11 = *(WTF **)(v2 + 136);
    *(_QWORD *)(v2 + 136) = v8;
    if (v11)
    {
      v12 = (__CFRunLoopObserver *)*((_QWORD *)v11 + 2);
      if (v12
        && (CFRunLoopObserverInvalidate(v12), v13 = (const void *)*((_QWORD *)v11 + 2), *((_QWORD *)v11 + 2) = 0, v13))
      {
        CFRelease(v13);
        v14 = (const void *)*((_QWORD *)v11 + 2);
        *((_QWORD *)v11 + 2) = 0;
        if (v14)
          CFRelease(v14);
      }
      else
      {
        *((_QWORD *)v11 + 2) = 0;
      }
      v15 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v9 = (WebCore::CocoaApplication *)WTF::fastFree(v11, v10);
      v8 = *(_QWORD *)(v2 + 136);
    }
    if (WebCore::CocoaApplication::isIBooks(v9) && webThreadStarted == 1)
      Current = (__CFRunLoop *)webThreadRunLoop;
    else
      Current = CFRunLoopGetCurrent();
    WebCore::RunLoopObserver::schedule(v8, Current, 10);
    WTF::JSONImpl::Object::create(v17);
    WebCore::InspectorTimelineAgent::pushCurrentRecord(v2, &v22, 7, 0, 0, 0, 0);
    v18 = v22;
    v22 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v18;
    }
    *(_DWORD *)(v2 + 152) = 1;
    v19 = *(Inspector::TimelineFrontendDispatcher **)(v2 + 48);
    v20 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 56))(*(_QWORD *)(v2 + 24));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v20);
    Inspector::TimelineFrontendDispatcher::recordingStarted(v19, v20[1] + v21 - v20[2]);
    result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 80) + 88);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 136))(result, 1);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorTimelineAgent::start@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  *(_BYTE *)(a1 + 77) = 1;
  result = WebCore::InspectorTimelineAgent::internalStart(a1 - 32, a2);
  *a3 = 0;
  a3[8] = 0;
  return result;
}

uint64_t WebCore::InspectorTimelineAgent::internalStop(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  JSC::Debugger *v4;
  void *v5;
  WTF *v6;
  __CFRunLoopObserver *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  WTF *v11;
  Inspector::TimelineFrontendDispatcher *v12;
  double *v13;
  double v14;

  if (*(_BYTE *)(this + 108))
  {
    v1 = this;
    v3 = *(_QWORD *)(this + 16);
    v2 = *(_QWORD *)(this + 24);
    *(_QWORD *)(v3 + 232) = 0;
    v4 = (JSC::Debugger *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
    JSC::Debugger::removeObserver(v4, (JSC::Debugger::Observer *)(v1 + 40));
    v6 = *(WTF **)(v1 + 136);
    *(_QWORD *)(v1 + 136) = 0;
    if (v6)
    {
      v7 = (__CFRunLoopObserver *)*((_QWORD *)v6 + 2);
      if (v7
        && (CFRunLoopObserverInvalidate(v7), v8 = (const void *)*((_QWORD *)v6 + 2), *((_QWORD *)v6 + 2) = 0, v8))
      {
        CFRelease(v8);
        v9 = (const void *)*((_QWORD *)v6 + 2);
        *((_QWORD *)v6 + 2) = 0;
        if (v9)
          CFRelease(v9);
      }
      else
      {
        *((_QWORD *)v6 + 2) = 0;
      }
      v10 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      WTF::fastFree(v6, v5);
    }
    *(_DWORD *)(v1 + 152) = 0;
    while (*(_DWORD *)(v1 + 84))
      WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v1);
    if (*(_DWORD *)(v1 + 80))
    {
      v11 = *(WTF **)(v1 + 72);
      if (v11)
      {
        *(_QWORD *)(v1 + 72) = 0;
        *(_DWORD *)(v1 + 80) = 0;
        WTF::fastFree(v11, v5);
      }
    }
    *(_BYTE *)(v1 + 108) = 0;
    *(_BYTE *)(v1 + 156) = 0;
    *(_DWORD *)(v1 + 112) = 0;
    v12 = *(Inspector::TimelineFrontendDispatcher **)(v1 + 48);
    v13 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 56))(*(_QWORD *)(v1 + 24));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v13);
    Inspector::TimelineFrontendDispatcher::recordingStopped(v12, v13[1] + v14 - v13[2]);
    this = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 80) + 88);
    if (this)
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)this + 136))(this, 0);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorTimelineAgent::stop@<X0>(WebCore::InspectorTimelineAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = WebCore::InspectorTimelineAgent::internalStop((uint64_t)this - 32);
  *((_BYTE *)this + 77) = 0;
  *a2 = 0;
  a2[8] = 0;
  return result;
}

uint64_t WebCore::InspectorTimelineAgent::setAutoCaptureEnabled@<X0>(uint64_t this@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  *(_BYTE *)(this + 111) = a2;
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorTimelineAgent::setAutoCaptureEnabled@<X0>(uint64_t this@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  *(_BYTE *)(this + 79) = a2;
  *a3 = 0;
  a3[8] = 0;
  return this;
}

char *WebCore::InspectorTimelineAgent::setInstruments@<X0>(char *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t v5;
  WTF *v7;
  uint64_t v8;
  unsigned int v9;
  WTF::JSONImpl::Value **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  int v19;
  WTF *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char *v25;
  uint64_t v26;

  v3 = result;
  v25 = 0;
  v26 = 0;
  v5 = *(unsigned int *)(*(_QWORD *)a2 + 28);
  if (!(_DWORD)v5)
  {
    v9 = 0;
    v7 = 0;
    goto LABEL_32;
  }
  if (v5 >> 30)
  {
    __break(0xC471u);
    goto LABEL_39;
  }
  result = (char *)WTF::fastMalloc((WTF *)(4 * v5));
  v7 = (WTF *)result;
  LODWORD(v26) = v5;
  v25 = result;
  v8 = *(unsigned int *)(*(_QWORD *)a2 + 28);
  if (!(_DWORD)v8)
  {
    v9 = 0;
    goto LABEL_32;
  }
  v9 = 0;
  v10 = *(WTF::JSONImpl::Value ***)(*(_QWORD *)a2 + 16);
  v11 = 8 * v8;
  do
  {
    WTF::JSONImpl::Value::asString(*v10);
    if (!v24)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = 1;
      *(_BYTE *)(a3 + 8) = 1;
      goto LABEL_21;
    }
    v12 = Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Timeline::Instrument>();
    v23 = v12;
    if ((v12 & 0xFF00000000) != 0)
    {
      v13 = v9;
      if (v9 == (_DWORD)v26)
      {
        v14 = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v25, v9 + 1, (unint64_t)&v23);
        v15 = 0;
        v9 = HIDWORD(v26) + 1;
        v7 = (WTF *)v25;
        *(_DWORD *)&v25[4 * HIDWORD(v26)] = *(_DWORD *)v14;
      }
      else
      {
        v15 = 0;
        ++v9;
        *((_DWORD *)v7 + v13) = v12;
      }
      HIDWORD(v26) = v9;
      goto LABEL_21;
    }
    v16 = (unsigned __int8 *)v24;
    if (!v24)
    {
      v19 = 1;
      v18 = 20;
      goto LABEL_14;
    }
    v17 = *((_DWORD *)v24 + 1);
    *(_DWORD *)v24 += 2;
    if (v17 < 0 || (v18 = (v17 + 20), __OFADD__(v17, 20)))
    {
      v22 = 0;
LABEL_37:
      __break(0xC471u);
LABEL_39:
      JUMPOUT(0x195E560D4);
    }
    v19 = (v16[16] >> 2) & 1;
LABEL_14:
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v18, v19, (int8x16_t *)"Unknown instrument: ", 0x14u, (uint64_t)v16, &v22);
    if (!v22)
      goto LABEL_37;
    *(_QWORD *)a3 = v22;
    *(_BYTE *)(a3 + 8) = 1;
    v22 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v16, a2);
      else
        *(_DWORD *)v16 -= 2;
    }
    v15 = 1;
LABEL_21:
    result = (char *)v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (char *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    if (v15)
      goto LABEL_33;
    ++v10;
    v11 -= 8;
  }
  while (v11);
  v7 = (WTF *)v25;
  LODWORD(v5) = v26;
LABEL_32:
  v20 = (WTF *)*((_QWORD *)v3 + 15);
  *((_QWORD *)v3 + 15) = v7;
  v21 = *((_DWORD *)v3 + 33);
  *((_DWORD *)v3 + 32) = v5;
  *((_DWORD *)v3 + 33) = v9;
  HIDWORD(v26) = v21;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  v7 = v20;
LABEL_33:
  if (v7)
  {
    v25 = 0;
    LODWORD(v26) = 0;
    return (char *)WTF::fastFree(v7, a2);
  }
  return result;
}

char *`non-virtual thunk to'WebCore::InspectorTimelineAgent::setInstruments@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorTimelineAgent::setInstruments((char *)(a1 - 32), a2, a3);
}

WTF::JSONImpl::Object *WebCore::InspectorTimelineAgent::pushCurrentRecord(uint64_t a1, WTF::JSONImpl::Object **a2, int a3, int a4, WebCore::Frame *a5, uint64_t a6, char a7)
{
  double *v14;
  double v15;
  WebCore::TimelineRecordFactory *v16;
  double v17;
  WTF::StringImpl *v18;
  WTF::JSONImpl::Object *v19;
  WTF::JSONImpl::Object *v20;
  _QWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  _QWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  WTF::JSONImpl::Object **v29;
  WTF::JSONImpl::Object *v30;
  WTF::JSONImpl::Object *v31;
  WTF::JSONImpl::Object *v32;
  WTF::JSONImpl::Object *v33;
  WTF::JSONImpl::Object *result;
  WTF::JSONImpl::Object *v35;
  WTF::JSONImpl::Object *v36;
  WTF::JSONImpl::Object *v37;
  int v38;
  WTF::JSONImpl::Object *v39;

  v14 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v14);
  if (a4)
    v16 = (WebCore::TimelineRecordFactory *)*(unsigned int *)(a1 + 104);
  else
    v16 = 0;
  v17 = v14[1] + v15 - v14[2];
  if (a7)
    v17 = *(double *)&a6;
  WebCore::TimelineRecordFactory::createGenericRecord(v16, v17, (uint64_t *)&v39);
  v18 = WebCore::InspectorTimelineAgent::setFrameIdentifier((WTF::StringImpl *)a1, v39, a5);
  WTF::JSONImpl::Array::create(v18);
  v19 = v39;
  v20 = *a2;
  *a2 = 0;
  v35 = v19;
  v36 = v20;
  v38 = a3;
  v21 = (_QWORD *)(a1 + 72);
  v22 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v22 == *(_DWORD *)(a1 + 80))
  {
    v23 = WTF::Vector<WebCore::InspectorTimelineAgent::TimelineRecordEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v35);
    v22 = *(unsigned int *)(a1 + 84);
    v24 = (_QWORD *)(*(_QWORD *)(a1 + 72) + 32 * v22);
    v25 = *(_DWORD **)v23;
    *v25 = **(_DWORD **)v23 + 1;
    *v24 = v25;
    v26 = (_DWORD *)*((_QWORD *)v23 + 1);
    ++*v26;
    v24[1] = v26;
    v27 = (_DWORD *)*((_QWORD *)v23 + 2);
    if (v27)
      ++*v27;
    v24[2] = v27;
    v28 = v24 + 3;
    a3 = v23[6];
  }
  else
  {
    v29 = (WTF::JSONImpl::Object **)(*v21 + 32 * v22);
    ++*(_DWORD *)v19;
    *v29 = v19;
    v30 = v36;
    ++*(_DWORD *)v36;
    v29[1] = v30;
    v31 = v37;
    if (v37)
      ++*(_DWORD *)v37;
    v29[2] = v31;
    v28 = v29 + 3;
  }
  *v28 = a3;
  *(_DWORD *)(a1 + 84) = v22 + 1;
  v32 = v37;
  v37 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v32;
  }
  v33 = v36;
  v36 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v33;
  }
  result = v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD **v7;
  _QWORD *v8;
  _DWORD *v9;
  int v10;
  int v11;
  _DWORD *v12;
  _QWORD v13[2];
  _DWORD *v14;
  int v15;

  v1 = *(unsigned int *)(result + 84);
  if (!(_DWORD)v1)
    return result;
  v2 = result;
  v3 = v1 - 1;
  v4 = *(_QWORD *)(result + 72) + 32 * (v1 - 1);
  v5 = *(_DWORD **)v4;
  *v5 = **(_DWORD **)v4 + 1;
  v7 = (_DWORD **)(v4 + 8);
  v6 = *(_DWORD **)(v4 + 8);
  ++*v6;
  v13[0] = v5;
  v13[1] = v6;
  v8 = (_QWORD *)(v4 + 16);
  v9 = *(_DWORD **)(v4 + 16);
  if (v9)
  {
    v10 = (*v9)++;
    v14 = v9;
    v11 = *(_DWORD *)(v4 + 24);
    v15 = v11;
    *v8 = 0;
    if (!v10)
    {
      WTF::JSONImpl::Value::operator delete();
      v12 = *v7;
      *v7 = 0;
      if (!v12)
        goto LABEL_8;
      goto LABEL_6;
    }
    *v9 = v10;
  }
  else
  {
    v14 = 0;
    v11 = *(_DWORD *)(v4 + 24);
    v15 = v11;
    *v8 = 0;
  }
  *v7 = 0;
  v12 = v6;
LABEL_6:
  if (*v12 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*v12;
LABEL_8:
  result = *(_QWORD *)v4;
  *(_QWORD *)v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  *(_DWORD *)(v2 + 84) = v3;
  if (v11 == 7)
  {
    if (v9[7])
      result = WebCore::InspectorTimelineAgent::didCompleteRecordEntry(v2, (uint64_t)v13);
  }
  else
  {
    result = WebCore::InspectorTimelineAgent::didCompleteRecordEntry(v2, (uint64_t)v13);
    if (!v9)
      goto LABEL_17;
  }
  if (*v9 == 1)
    result = WTF::JSONImpl::Value::operator delete();
  else
    --*v9;
LABEL_17:
  if (*v6 == 1)
    result = WTF::JSONImpl::Value::operator delete();
  else
    --*v6;
  if (*v5 == 1)
    return WTF::JSONImpl::Value::operator delete();
  --*v5;
  return result;
}

WTF::StringImpl *WebCore::InspectorTimelineAgent::startFromConsole(WebCore::InspectorTimelineAgent *this, JSC::JSGlobalObject *a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  Inspector::InspectorDebuggerAgent *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::JSONImpl::ObjectBase **v13;
  WTF::JSONImpl::ObjectBase *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSC::JSGlobalObject *v29;
  uint64_t v30;
  void *v31;
  int v32;
  uint64_t v33;
  WebCore::Frame *v34;
  double *v35;
  double v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unsigned int v52;
  uint64_t v53;
  BOOL v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  char v67;

  if (*a3)
  {
    if (*((_DWORD *)*a3 + 1))
    {
      v11 = *((unsigned int *)this + 25);
      if ((_DWORD)v11)
      {
        v12 = 32 * v11;
        v13 = (WTF::JSONImpl::ObjectBase **)(*((_QWORD *)this + 11) + 8);
        while (1)
        {
          v14 = *v13;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v65 = v59;
          WTF::JSONImpl::ObjectBase::getString(v14, (const WTF::String *)&v65);
          v17 = v65;
          v65 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v15);
            else
              *(_DWORD *)v17 -= 2;
          }
          if (WTF::equal(v66, *a3, v16))
            break;
          v19 = v66;
          v66 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v18);
            else
              *(_DWORD *)v19 -= 2;
          }
          v13 += 4;
          v12 -= 32;
          if (!v12)
            goto LABEL_2;
        }
        if (!*(_QWORD *)(*((_QWORD *)this + 2) + 16))
          goto LABEL_32;
        v20 = *a3;
        if (!*a3 || (v52 = *((_DWORD *)v20 + 1)) == 0)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_27:
          WTF::fastMalloc((WTF *)0x60);
          v63 = Inspector::ConsoleMessage::ConsoleMessage();
          Inspector::InspectorConsoleAgent::addMessageToConsole();
          v21 = v63;
          v63 = 0;
          if (v21)
          {
            v22 = (WTF *)MEMORY[0x19AEA5F58]();
            WTF::fastFree(v22, v23);
          }
          v24 = v59;
          v59 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v18);
            else
              *(_DWORD *)v24 -= 2;
          }
LABEL_32:
          result = v66;
          v66 = 0;
          if (!result)
            return result;
          v26 = *(_DWORD *)result - 2;
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
          goto LABEL_60;
        }
        if (v52 > 0x2710)
        {
          if ((*((_DWORD *)v20 + 4) & 4) != 0)
            v53 = 0x100002710;
          else
            v53 = 10000;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(10003, (*((_DWORD *)v20 + 4) & 4u) >> 2, *((_OWORD **)v20 + 1), v53, "...", 3u, &v64);
          v20 = v64;
          if (!v64)
          {
            __break(0xC471u);
LABEL_91:
            JUMPOUT(0x195E569F8);
          }
          v52 = *((_DWORD *)v64 + 1);
          if ((v52 & 0x80000000) != 0)
            goto LABEL_88;
        }
        else
        {
          *(_DWORD *)v20 += 2;
          v64 = v20;
        }
        v54 = __OFADD__(v52, 16);
        v55 = v52 + 16;
        if (!v54 && !__OFADD__(v55, 9))
        {
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v55 + 9, (*((_DWORD *)v20 + 4) >> 2) & 1, (int8x16_t *)"Profile \"", 9u, (uint64_t)v20, (int8x16_t *)"\" already exists", 0x10u, &v59);
          if (v59)
          {
            v57 = v64;
            v64 = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2)
                WTF::StringImpl::destroy(v57, v56);
              else
                *(_DWORD *)v57 -= 2;
            }
            goto LABEL_27;
          }
          goto LABEL_89;
        }
LABEL_88:
        v59 = 0;
LABEL_89:
        __break(0xC471u);
        goto LABEL_91;
      }
    }
  }
LABEL_2:
  if (!*((_BYTE *)this + 108) && !*((_DWORD *)this + 25))
  {
    v6 = *((_QWORD *)this + 2);
    v7 = *(Inspector::InspectorDebuggerAgent **)(v6 + 136);
    if (v7)
    {
      v8 = Inspector::InspectorDebuggerAgent::breakpointsActive(*(Inspector::InspectorDebuggerAgent **)(v6 + 136));
      *((_BYTE *)this + 110) = v8;
      if (v8)
      {
        Inspector::InspectorDebuggerAgent::setBreakpointsActive(v7);
        if (v67)
        {
          v10 = v66;
          v66 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v9);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
      }
    }
    else
    {
      *((_BYTE *)this + 110) = 0;
    }
    if (*(_QWORD *)(*((_QWORD *)this + 2) + 64))
    {
      LOWORD(v65) = 257;
      Inspector::InspectorScriptProfilerAgent::startTracking();
      if ((_BYTE)v60)
      {
        v28 = v59;
        v59 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v27);
          else
            *(_DWORD *)v28 -= 2;
        }
      }
    }
    LOBYTE(v59) = 0;
    BYTE4(v59) = 0;
    WebCore::InspectorTimelineAgent::internalStart((uint64_t)this, (uint64_t)&v59);
    WebCore::InspectorTimelineAgent::toggleInstruments((uint64_t)this, 0);
  }
  WebCore::TimelineRecordFactory::createConsoleProfileData((WebCore::TimelineRecordFactory *)a3, (uint64_t *)&v58);
  v30 = WebCore::executionContext(a2, v29);
  if (!v30 || *(_BYTE *)(v30 + 274))
  {
    v34 = 0;
  }
  else
  {
    v32 = *(_DWORD *)(v30 - 168);
    *(_DWORD *)(v30 - 168) = v32 + 2;
    v33 = *(_QWORD *)(v30 + 336);
    if (v33)
    {
      v34 = *(WebCore::Frame **)(v33 + 8);
      if (v32)
      {
LABEL_46:
        *(_DWORD *)(v30 - 168) = v32;
        goto LABEL_47;
      }
    }
    else
    {
      v34 = 0;
      if (v32)
        goto LABEL_46;
    }
    if ((*(_WORD *)(v30 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v30 - 192), v31);
  }
LABEL_47:
  v35 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v35);
  WebCore::TimelineRecordFactory::createGenericRecord((WebCore::TimelineRecordFactory *)*((unsigned int *)this + 26), v35[1] + v36 - v35[2], (uint64_t *)&v66);
  v37 = WebCore::InspectorTimelineAgent::setFrameIdentifier(this, v66, v34);
  WTF::JSONImpl::Array::create(v37);
  v38 = v65;
  v39 = v58;
  v58 = 0;
  v59 = v66;
  v60 = v39;
  v61 = v65;
  v62 = 17;
  v40 = *((unsigned int *)this + 25);
  if ((_DWORD)v40 == *((_DWORD *)this + 24))
  {
    v41 = WTF::Vector<WebCore::InspectorTimelineAgent::TimelineRecordEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 88, v40 + 1, (unint64_t)&v59);
    v42 = *((unsigned int *)this + 25);
    v43 = *((_QWORD *)this + 11) + 32 * v42;
    v44 = *(_QWORD *)v41;
    *(_QWORD *)v41 = 0;
    *(_QWORD *)v43 = v44;
    v45 = *((_QWORD *)v41 + 1);
    *((_QWORD *)v41 + 1) = 0;
    *(_QWORD *)(v43 + 8) = v45;
    v46 = *((_QWORD *)v41 + 2);
    *((_QWORD *)v41 + 2) = 0;
    *(_QWORD *)(v43 + 16) = v46;
    *(_DWORD *)(v43 + 24) = v41[6];
    v47 = v61;
    *((_DWORD *)this + 25) = v42 + 1;
    v61 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v47;
    }
  }
  else
  {
    v48 = *((_QWORD *)this + 11);
    v59 = 0;
    v49 = v48 + 32 * v40;
    *(_QWORD *)v49 = v66;
    v60 = 0;
    *(_QWORD *)(v49 + 8) = v39;
    *(_QWORD *)(v49 + 16) = v38;
    *(_DWORD *)(v49 + 24) = 17;
    *((_DWORD *)this + 25) = v40 + 1;
    v61 = 0;
  }
  v50 = v60;
  v60 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v50;
  }
  v51 = v59;
  v59 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v51;
  }
  result = v58;
  v58 = 0;
  if (result)
  {
    v26 = *(_DWORD *)result - 1;
    if (*(_DWORD *)result == 1)
      return (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
LABEL_60:
    *(_DWORD *)result = v26;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorTimelineAgent::stopFromConsole(WTF::StringImpl *this, JSC::JSGlobalObject *a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::JSONImpl::ObjectBase *v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD **v19;
  _DWORD *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  int v23;
  Inspector::InspectorScriptProfilerAgent *v24;
  WTF::StringImpl *v25;
  Inspector::InspectorDebuggerAgent *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  BOOL v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  char v43;

  v4 = (uint64_t)this;
  v5 = *((_DWORD *)this + 25);
  v6 = (v5 - 1);
  if (v5 - 1 < 0)
  {
LABEL_42:
    if (!*(_QWORD *)(*(_QWORD *)(v4 + 16) + 16))
      return this;
    v28 = *a3;
    if (!*a3 || (v32 = *((_DWORD *)v28 + 1)) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_45;
    }
    if (v32 > 0x2710)
    {
      if ((*((_DWORD *)v28 + 4) & 4) != 0)
        v33 = 0x100002710;
      else
        v33 = 10000;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(10003, (*((_DWORD *)v28 + 4) & 4u) >> 2, *((_OWORD **)v28 + 1), v33, "...", 3u, &v39);
      v28 = v39;
      if (!v39)
      {
        __break(0xC471u);
LABEL_76:
        JUMPOUT(0x195E56DF8);
      }
      v32 = *((_DWORD *)v39 + 1);
      if ((v32 & 0x80000000) != 0)
        goto LABEL_73;
    }
    else
    {
      *(_DWORD *)v28 += 2;
      v39 = v28;
    }
    v34 = __OFADD__(v32, 16);
    v35 = v32 + 16;
    if (!v34 && !__OFADD__(v35, 9))
    {
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v35 + 9, (*((_DWORD *)v28 + 4) >> 2) & 1, (int8x16_t *)"Profile \"", 9u, (uint64_t)v28, (int8x16_t *)"\" does not exist", 0x10u, &v42);
      if (v42)
      {
        v37 = v39;
        v39 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v36);
          else
            *(_DWORD *)v37 -= 2;
        }
LABEL_45:
        WTF::fastMalloc((WTF *)0x60);
        v38 = Inspector::ConsoleMessage::ConsoleMessage();
        Inspector::InspectorConsoleAgent::addMessageToConsole();
        if (v38)
        {
          v30 = (WTF *)MEMORY[0x19AEA5F58](v38, v22, v29);
          WTF::fastFree(v30, v31);
        }
        this = v42;
        v42 = 0;
        if (!this)
          return this;
LABEL_48:
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v22);
        *(_DWORD *)this -= 2;
        return this;
      }
LABEL_74:
      __break(0xC471u);
      JUMPOUT(0x195E56E04);
    }
LABEL_73:
    v42 = 0;
    goto LABEL_74;
  }
  v7 = (32 * v6) | 0x10;
  while (1)
  {
    if (v6 >= *(unsigned int *)(v4 + 100))
    {
      __break(0xC471u);
      goto LABEL_76;
    }
    v8 = *(_QWORD *)(v4 + 88);
    v9 = *(WTF::JSONImpl::ObjectBase **)(v8 + v7 - 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v40 = v42;
    WTF::JSONImpl::ObjectBase::getString(v9, (const WTF::String *)&v40);
    v12 = v40;
    v40 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *a3;
    if (!*a3 || !*((_DWORD *)v13 + 1) || WTF::equal(v41, v13, v11))
      break;
    this = v41;
    v41 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v14);
      else
        *(_DWORD *)this -= 2;
    }
    v7 -= 32;
    if ((uint64_t)v6-- <= 0)
      goto LABEL_42;
  }
  WebCore::InspectorTimelineAgent::didCompleteRecordEntry(v4, v8 + v7 - 16);
  v16 = *(_QWORD *)(v4 + 88);
  v17 = v16 + v7;
  v18 = *(_DWORD **)(v16 + v7);
  *(_QWORD *)(v16 + v7) = 0;
  v19 = (_DWORD **)(v16 + v7 - 16);
  if (v18)
  {
    if (*v18 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v18;
  }
  v20 = *(_DWORD **)(v17 - 8);
  *(_QWORD *)(v17 - 8) = 0;
  if (v20)
  {
    if (*v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v20;
  }
  v21 = *v19;
  *v19 = 0;
  if (v21)
  {
    if (*v21 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v21;
  }
  WTF::VectorMover<false,WebCore::InspectorTimelineAgent::TimelineRecordEntry>::move((_DWORD *)(v16 + v7 + 16), (_DWORD *)(*(_QWORD *)(v4 + 88) + 32 * *(unsigned int *)(v4 + 100)), v16 + v7 - 16);
  v23 = *(_DWORD *)(v4 + 100) - 1;
  *(_DWORD *)(v4 + 100) = v23;
  if (!*(_BYTE *)(v4 + 109) && !v23)
  {
    WebCore::InspectorTimelineAgent::toggleInstruments(v4, (void *)1);
    WebCore::InspectorTimelineAgent::internalStop(v4);
    v24 = *(Inspector::InspectorScriptProfilerAgent **)(*(_QWORD *)(v4 + 16) + 64);
    if (v24)
    {
      Inspector::InspectorScriptProfilerAgent::stopTracking(v24);
      if (v43)
      {
        v25 = v42;
        v42 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v22);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
    }
    if (*(_BYTE *)(v4 + 110))
    {
      v26 = *(Inspector::InspectorDebuggerAgent **)(*(_QWORD *)(v4 + 16) + 136);
      if (v26)
      {
        Inspector::InspectorDebuggerAgent::setBreakpointsActive(v26);
        if (v43)
        {
          v27 = v42;
          v42 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v22);
            else
              *(_DWORD *)v27 -= 2;
          }
        }
      }
    }
  }
  this = v41;
  v41 = 0;
  if (this)
    goto LABEL_48;
  return this;
}

uint64_t WebCore::InspectorTimelineAgent::didCompleteRecordEntry(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  double *v23;
  WTF::JSONImpl::Value *v24;
  double v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t *v33;
  uint64_t result;
  _DWORD **v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD **v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD **v41;
  uint64_t v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46[2];
  char v47;

  v4 = *(uint64_t **)a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = *(WTF::StringImpl **)(a2 + 8);
  ++*(_DWORD *)v5;
  v44 = v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v4 + 2, &v45, (const WTF::StringImpl *)&v44, (uint64_t)v46);
  if (v47)
  {
    v7 = v4 + 3;
    v8 = *((unsigned int *)v4 + 9);
    if ((_DWORD)v8 == *((_DWORD *)v4 + 8))
    {
      v35 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v45);
      v8 = *((unsigned int *)v4 + 9);
      v36 = v4[3];
      v37 = *v35;
      if (*v35)
        *v37 += 2;
      *(_QWORD *)(v36 + 8 * v8) = v37;
    }
    else
    {
      v9 = *v7;
      v10 = v45;
      if (v45)
        *(_DWORD *)v45 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *((_DWORD *)v4 + 9) = v8 + 1;
  }
  v11 = v44;
  v44 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v11;
  }
  v12 = v45;
  v45 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v13 = *(uint64_t **)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v45 = (WTF::StringImpl *)v46[0];
    v14 = *(WTF::StringImpl **)(a2 + 16);
    ++*(_DWORD *)v14;
    v44 = v14;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v13 + 2, &v45, (const WTF::StringImpl *)&v44, (uint64_t)v46);
    if (v47)
    {
      v16 = v13 + 3;
      v17 = *((unsigned int *)v13 + 9);
      if ((_DWORD)v17 == *((_DWORD *)v13 + 8))
      {
        v41 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v45);
        v17 = *((unsigned int *)v13 + 9);
        v42 = v13[3];
        v43 = *v41;
        if (*v41)
          *v43 += 2;
        *(_QWORD *)(v42 + 8 * v17) = v43;
      }
      else
      {
        v18 = *v16;
        v19 = v45;
        if (v45)
          *(_DWORD *)v45 += 2;
        *(_QWORD *)(v18 + 8 * v17) = v19;
      }
      *((_DWORD *)v13 + 9) = v17 + 1;
    }
    v20 = v44;
    v44 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v20;
    }
    v21 = v45;
    v45 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v15);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  v22 = *(uint64_t **)a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
  v24 = (WTF::JSONImpl::Value *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v23);
  WTF::JSONImpl::Value::create(v24, v23[1] + v25 - v23[2]);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v22 + 2, &v44, (const WTF::StringImpl *)&v45, (uint64_t)v46);
  if (v47)
  {
    v27 = v22 + 3;
    v28 = *((unsigned int *)v22 + 9);
    if ((_DWORD)v28 == *((_DWORD *)v22 + 8))
    {
      v38 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)&v44);
      v28 = *((unsigned int *)v22 + 9);
      v39 = v22[3];
      v40 = *v38;
      if (*v38)
        *v40 += 2;
      *(_QWORD *)(v39 + 8 * v28) = v40;
    }
    else
    {
      v29 = *v27;
      v30 = v44;
      if (v44)
        *(_DWORD *)v44 += 2;
      *(_QWORD *)(v29 + 8 * v28) = v30;
    }
    *((_DWORD *)v22 + 9) = v28 + 1;
  }
  v31 = v45;
  v45 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v31;
  }
  v32 = v44;
  v44 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v26);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = *(uint64_t **)a2;
  *(_DWORD *)v33 = **(_DWORD **)a2 + 1;
  v46[0] = (uint64_t)v33;
  WebCore::InspectorTimelineAgent::addRecordToTimeline(a1, v46, *(_DWORD *)(a2 + 24));
  result = v46[0];
  if (v46[0])
  {
    if (*(_DWORD *)v46[0] == 1)
      return WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v46[0];
  }
  return result;
}

uint64_t WebCore::InspectorTimelineAgent::didDispatchEvent(uint64_t this, WTF::JSONImpl::Value *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _BYTE v18[24];

  v2 = *(unsigned int *)(this + 84);
  if ((_DWORD)v2)
  {
    v4 = this;
    v5 = *(_QWORD *)(*(_QWORD *)(this + 72) + 32 * v2 - 24);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(a2);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v5 + 16), &v16, (const WTF::StringImpl *)&v17, (uint64_t)v18);
    if (v18[16])
    {
      v7 = (uint64_t *)(v5 + 24);
      v8 = *(unsigned int *)(v5 + 36);
      if ((_DWORD)v8 == *(_DWORD *)(v5 + 32))
      {
        v13 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v16);
        v8 = *(unsigned int *)(v5 + 36);
        v14 = *(_QWORD *)(v5 + 24);
        v15 = *v13;
        if (*v13)
          *v15 += 2;
        *(_QWORD *)(v14 + 8 * v8) = v15;
      }
      else
      {
        v9 = *v7;
        v10 = v16;
        if (v16)
          *(_DWORD *)v16 += 2;
        *(_QWORD *)(v9 + 8 * v8) = v10;
      }
      *(_DWORD *)(v5 + 36) = v8 + 1;
    }
    v11 = v17;
    v17 = 0;
    if (v11)
    {
      if (*v11 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v11;
    }
    v12 = v16;
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v6);
      else
        *(_DWORD *)v12 -= 2;
    }
    return WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v4);
  }
  return this;
}

WTF::JSONImpl::Object *WebCore::InspectorTimelineAgent::appendRecord(uint64_t a1, _QWORD *a2, unsigned int a3, int a4, WebCore::Frame *a5, uint64_t a6, char a7)
{
  double *v14;
  double v15;
  double v16;
  WebCore::TimelineRecordFactory *v17;
  WTF::JSONImpl::Object *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  WTF::JSONImpl::Object *result;
  _DWORD **v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  WTF::JSONImpl::Object *v33;
  _BYTE v34[24];

  v14 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v14);
  v16 = v14[1] + v15 - v14[2];
  if (a7)
    v16 = *(double *)&a6;
  if (a4)
    v17 = (WebCore::TimelineRecordFactory *)*(unsigned int *)(a1 + 104);
  else
    v17 = 0;
  WebCore::TimelineRecordFactory::createGenericRecord(v17, v16, (uint64_t *)&v33);
  v18 = v33;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = (_DWORD *)*a2;
  *a2 = 0;
  v31 = v19;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v18 + 2, &v32, (const WTF::StringImpl *)&v31, (uint64_t)v34);
  if (v34[16])
  {
    v21 = (uint64_t *)((char *)v18 + 24);
    v22 = *((unsigned int *)v18 + 9);
    if ((_DWORD)v22 == *((_DWORD *)v18 + 8))
    {
      v28 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v32);
      v22 = *((unsigned int *)v18 + 9);
      v29 = *((_QWORD *)v18 + 3);
      v30 = *v28;
      if (*v28)
        *v30 += 2;
      *(_QWORD *)(v29 + 8 * v22) = v30;
    }
    else
    {
      v23 = *v21;
      v24 = v32;
      if (v32)
        *(_DWORD *)v32 += 2;
      *(_QWORD *)(v23 + 8 * v22) = v24;
    }
    *((_DWORD *)v18 + 9) = v22 + 1;
  }
  v25 = v31;
  v31 = 0;
  if (v25)
  {
    if (*v25 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v25;
  }
  v26 = v32;
  v32 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v20);
    else
      *(_DWORD *)v26 -= 2;
  }
  WebCore::InspectorTimelineAgent::setFrameIdentifier((WTF::StringImpl *)a1, v33, a5);
  WebCore::InspectorTimelineAgent::addRecordToTimeline(a1, (uint64_t *)&v33, a3);
  result = v33;
  v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF::JSONImpl::Object *WebCore::InspectorTimelineAgent::willComposite(WebCore::InspectorTimelineAgent *this, WebCore::LocalFrame *a2)
{
  WTF::JSONImpl::Object *result;
  WTF::JSONImpl::Object *v5;

  WTF::JSONImpl::Object::create(this);
  WebCore::InspectorTimelineAgent::pushCurrentRecord((uint64_t)this, &v5, 6, 1, a2, 0, 0);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  *((_BYTE *)this + 156) = 1;
  return result;
}

void WebCore::InspectorTimelineAgent::didComposite(WebCore::InspectorTimelineAgent *this)
{
  uint64_t v2;
  int *v3;
  int v4;

  if (*((_BYTE *)this + 156))
    WebCore::InspectorTimelineAgent::didCompleteCurrentRecord((uint64_t)this);
  *((_BYTE *)this + 156) = 0;
  v2 = *((unsigned int *)this + 33);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 15);
    while (1)
    {
      v4 = *v3++;
      if (v4 == 285)
        break;
      if (!--v2)
        return;
    }
    WebCore::InspectorTimelineAgent::captureScreenshot(this);
  }
}

void WebCore::InspectorTimelineAgent::captureScreenshot(WebCore::InspectorTimelineAgent *this)
{
  char v2;
  double *v3;
  double v4;
  double v5;
  uint64_t v6;
  BOOL v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  double v15;
  WTF::StringImpl *v16;
  void *v17;
  WTF::JSONImpl::Object *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  CFTypeRef cf;
  int32x4_t v30;
  WTF::JSONImpl::Object **v31;
  WTF::JSONImpl::Object *v32[2];

  v2 = *((_BYTE *)this + 157);
  *((_BYTE *)this + 157) = 1;
  v3 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
  v5 = v4 - v3[2];
  v6 = *(_QWORD *)(*((_QWORD *)this + 8) + 160);
  if (v6)
    v7 = *(_BYTE *)(v6 + 144) == 0;
  else
    v7 = 0;
  if (v7)
  {
    v8 = v3[1];
    v30.i64[0] = WebCore::ScrollView::unobscuredContentRect(*(_QWORD *)(v6 + 288), 0);
    v30.i64[1] = v9;
    LOWORD(v28) = 0;
    BYTE2(v28) = 1;
    v10 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v10 != -1)
    {
      v32[0] = (WTF::JSONImpl::Object *)&v27;
      v31 = v32;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
      CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    v32[0] = 0;
    v32[1] = 0;
    WebCore::snapshotFrameRectWithClip((uint64_t *)v6, &v30, (uint64_t)v32, (unsigned __int16 *)&v28, (uint64_t *)&v31);
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    v12 = (uint64_t)v31;
    if (v31)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::ImageBuffer::toDataURL(v12, (WebCore *)&v27, 0, 0, 0, &v28);
      WebCore::TimelineRecordFactory::createScreenshotData((WebCore::TimelineRecordFactory *)&v28, (uint64_t *)v32);
      v14 = v28;
      v28 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v8 + v5;
      v16 = v27;
      v27 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v13);
        else
          *(_DWORD *)v16 -= 2;
      }
      WebCore::InspectorTimelineAgent::pushCurrentRecord((uint64_t)this, v32, 22, 0, (WebCore::Frame *)v6, *(uint64_t *)&v15, 1);
      WebCore::InspectorTimelineAgent::didCompleteCurrentRecord((uint64_t)this);
      v18 = v32[0];
      v32[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v18;
      }
      v31 = 0;
      v19 = *(_QWORD *)(v12 + 8);
      if (__ldaxr((unsigned __int8 *)v19))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v19))
      {
        goto LABEL_26;
      }
      MEMORY[0x19AEA534C](v19);
LABEL_26:
      v21 = *(_QWORD *)(v19 + 8);
      v22 = v21 - 1;
      *(_QWORD *)(v19 + 8) = v21 - 1;
      if (v21 == 1)
      {
        v26 = *(_QWORD *)(v19 + 16);
        v23 = *(_QWORD *)(v19 + 24);
        *(_QWORD *)(v19 + 24) = 0;
        v24 = v26 != 0;
      }
      else
      {
        v23 = 0;
        v24 = 1;
      }
      v25 = __ldxr((unsigned __int8 *)v19);
      if (v25 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
        {
          if (v22)
            goto LABEL_38;
          goto LABEL_34;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      if (v22)
        goto LABEL_38;
LABEL_34:
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      if (!v24)
        WTF::fastFree((WTF *)v19, v17);
    }
  }
LABEL_38:
  *((_BYTE *)this + 157) = v2;
}

uint64_t WebCore::InspectorTimelineAgent::didPaint(uint64_t this, WebCore::RenderObject *a2, int32x2_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ScrollView *v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  _QWORD v14[4];
  _OWORD v15[2];
  _DWORD v16[8];

  if (!*(_BYTE *)(this + 157))
  {
    v3 = this;
    v4 = *(unsigned int *)(this + 84);
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD *)(this + 72);
      v6 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248);
      v7 = (float32x2_t)vdup_n_s32(0x3C800000u);
      v8 = vmul_f32(vcvt_f32_s32(*a3), v7);
      v9 = vadd_f32(v8, vmul_f32(vcvt_f32_s32(a3[1]), v7));
      v14[0] = v8;
      v14[1] = __PAIR64__(v8.u32[1], v9.u32[0]);
      v8.i32[1] = v9.i32[1];
      v14[2] = v9;
      v14[3] = v8;
      WebCore::RenderObject::localToContainerQuad((uint64_t)a2, (float *)v14, 0, 2u, v15);
      WebCore::ScrollView::contentsToRootView(v6, (const WebCore::FloatQuad *)v15, v16);
      WebCore::TimelineRecordFactory::createPaintData((WebCore::TimelineRecordFactory *)v16, (uint64_t *)v15);
      v10 = v5 + 32 * v4;
      v11 = *(_QWORD *)&v15[0];
      *(_QWORD *)&v15[0] = 0;
      v12 = *(int **)(v10 - 24);
      *(_QWORD *)(v10 - 24) = v11;
      if (v12)
      {
        v13 = *v12 - 1;
        if (*v12 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v12 = *(int **)&v15[0];
          *(_QWORD *)&v15[0] = 0;
          if (!v12)
            return WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v3);
          v13 = *v12 - 1;
          if (*v12 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            return WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v3);
          }
        }
        *v12 = v13;
      }
      return WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v3);
    }
  }
  return this;
}

uint64_t WebCore::InspectorTimelineAgent::didPerformanceMark(uint64_t a1, WebCore::TimelineRecordFactory *this, uint64_t a3, char a4, WebCore::Frame *a5)
{
  uint64_t result;
  double v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  double v14;
  double v15;
  char v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;

  if (!a4)
  {
    v16 = 0;
    v17 = 0;
LABEL_13:
    WebCore::TimelineRecordFactory::createTimeStampData(this, (uint64_t *)&v20);
    WebCore::InspectorTimelineAgent::appendRecord(a1, &v20, 0xCu, 1, a5, v17, v16);
    result = *(_QWORD *)&v20;
    v20 = 0.0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
    return result;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
  v10 = *(double *)(result + 16);
  if (v10 < *(double *)&a3)
  {
    v19 = *(double *)&a3 - v10 + *(double *)(result + 8);
LABEL_12:
    v17 = *(_QWORD *)&v19;
    v16 = 1;
    goto LABEL_13;
  }
  v20 = 0.0;
  v11 = *(unsigned int *)(result + 36);
  if ((_DWORD)v11)
  {
    v12 = *(double **)(result + 24);
    v13 = 16 * v11;
    v14 = 0.0;
    while (*v12 <= *(double *)&a3)
    {
      v15 = v12[1];
      if (v15 >= *(double *)&a3)
      {
        WTF::Seconds::operator+();
        v19 = v18 - *v12;
        goto LABEL_12;
      }
      v14 = v14 + v15 - *v12;
      v20 = v14;
      v12 += 2;
      v13 -= 16;
      if (!v13)
        return result;
    }
  }
  return result;
}

uint64_t WebCore::InspectorTimelineAgent::mainFrameStartedLoading(uint64_t this)
{
  uint64_t v1;
  Inspector::InspectorDebuggerAgent *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  char v5;

  if (!*(_BYTE *)(this + 108))
  {
    v1 = this;
    if (*(_BYTE *)(this + 111))
    {
      if (*(_DWORD *)(this + 132))
      {
        *(_DWORD *)(this + 112) = 1;
        v2 = *(Inspector::InspectorDebuggerAgent **)(*(_QWORD *)(this + 16) + 136);
        if (v2)
        {
          Inspector::InspectorDebuggerAgent::setBreakpointsActive(v2);
          if (v5)
          {
            if (v4)
            {
              if (*(_DWORD *)v4 == 2)
                WTF::StringImpl::destroy(v4, v3);
              else
                *(_DWORD *)v4 -= 2;
            }
          }
        }
        Inspector::TimelineFrontendDispatcher::autoCaptureStarted(*(Inspector::TimelineFrontendDispatcher **)(v1 + 48));
        return WebCore::InspectorTimelineAgent::toggleInstruments(v1, 0);
      }
    }
  }
  return this;
}

uint64_t WebCore::InspectorTimelineAgent::toggleInstruments(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Inspector::AnimationFrontendDispatcher *v16;
  double *v17;
  double v18;
  Inspector::CPUProfilerFrontendDispatcher *v19;
  double *v20;
  double v21;
  Inspector::MemoryFrontendDispatcher *v22;
  double *v23;
  double v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(this + 132);
  if (!(_DWORD)v2)
    return this;
  v4 = this;
  v5 = *(_DWORD **)(this + 120);
  v6 = 4 * v2;
  if (!(_DWORD)a2)
  {
    while (2)
    {
      switch(*v5)
      {
        case 0x11E:
          this = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 64);
          if (this)
          {
            this = Inspector::InspectorScriptProfilerAgent::startTracking();
            goto LABEL_29;
          }
          goto LABEL_42;
        case 0x11F:
          LOBYTE(v25) = 0;
          BYTE4(v25) = 0;
          this = WebCore::InspectorTimelineAgent::internalStart(v4, (uint64_t)&v25);
          goto LABEL_42;
        case 0x120:
          v8 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 32);
          if (!v8 || *(_BYTE *)(v8 + 56))
            goto LABEL_42;
          v25 = (WTF::StringImpl *)&off_1E33EFA80;
          v26 = v8;
          v27 = &v25;
          WebCore::ResourceUsageThread::addObserver((WTF::RunLoop *)v8, (const void *)1, (char *)&v25);
          v9 = v27;
          if (v27 == &v25)
          {
            v9 = &v25;
            v10 = 4;
            goto LABEL_37;
          }
          if (v27)
          {
            v10 = 5;
LABEL_37:
            (*((void (**)(void))*v9 + v10))();
          }
          *(_BYTE *)(v8 + 56) = 1;
          v19 = *(Inspector::CPUProfilerFrontendDispatcher **)(v8 + 40);
          v20 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 24) + 56))(*(_QWORD *)(v8 + 24));
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v20);
          this = Inspector::CPUProfilerFrontendDispatcher::trackingStart(v19, v20[1] + v21 - v20[2]);
LABEL_42:
          ++v5;
          v6 -= 4;
          if (!v6)
            return this;
          continue;
        case 0x121:
          v11 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 56);
          if (!v11 || *(_BYTE *)(v11 + 56))
            goto LABEL_42;
          v25 = (WTF::StringImpl *)&off_1E33F0A00;
          v26 = v11;
          v27 = &v25;
          WebCore::ResourceUsageThread::addObserver((WTF::RunLoop *)v11, (const void *)2, (char *)&v25);
          v12 = v27;
          if (v27 == &v25)
          {
            v12 = &v25;
            v13 = 4;
          }
          else
          {
            if (!v27)
            {
LABEL_41:
              *(_BYTE *)(v11 + 56) = 1;
              v22 = *(Inspector::MemoryFrontendDispatcher **)(v11 + 40);
              v23 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 56))(*(_QWORD *)(v11 + 24));
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v23);
              this = Inspector::MemoryFrontendDispatcher::trackingStart(v22, v23[1] + v24 - v23[2]);
              goto LABEL_42;
            }
            v13 = 5;
          }
          (*((void (**)(void))*v12 + v13))();
          goto LABEL_41;
        case 0x122:
          this = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 168);
          if (this && (*(_DWORD *)(v4 + 112) | 2) == 2)
          {
            this = Inspector::InspectorHeapAgent::startTracking((Inspector::InspectorHeapAgent *)this);
LABEL_29:
            if ((_BYTE)v26)
            {
              this = (uint64_t)v25;
              v25 = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                  this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
                else
                  *(_DWORD *)this -= 2;
              }
            }
          }
          goto LABEL_42;
        case 0x123:
          v14 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 24);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 16);
            if (*(_QWORD *)(v15 + 224) != v14)
            {
              *(_QWORD *)(v15 + 224) = v14;
              v16 = *(Inspector::AnimationFrontendDispatcher **)(v14 + 40);
              v17 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 24) + 56))(*(_QWORD *)(v14 + 24));
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v17);
              this = Inspector::AnimationFrontendDispatcher::trackingStart(v16, v17[1] + v18 - v17[2]);
            }
          }
          goto LABEL_42;
        default:
          goto LABEL_42;
      }
    }
  }
  do
  {
    switch(*v5)
    {
      case 0x11E:
        this = (uint64_t)WebCore::InspectorTimelineAgent::toggleScriptProfilerInstrument(v4, (int)a2);
        break;
      case 0x11F:
        this = WebCore::InspectorTimelineAgent::internalStop(v4);
        break;
      case 0x120:
        this = WebCore::InspectorTimelineAgent::toggleCPUInstrument(v4, a2);
        break;
      case 0x121:
        this = WebCore::InspectorTimelineAgent::toggleMemoryInstrument(v4, a2);
        break;
      case 0x122:
        this = (uint64_t)WebCore::InspectorTimelineAgent::toggleHeapInstrument(v4, (int)a2);
        break;
      case 0x123:
        this = WebCore::InspectorTimelineAgent::toggleAnimationInstrument(v4, (WTF::StringImpl *)a2);
        break;
      default:
        break;
    }
    ++v5;
    v6 -= 4;
  }
  while (v6);
  return this;
}

uint64_t WebCore::InspectorTimelineAgent::mainFrameNavigated(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 112) == 1)
  {
    v1 = this;
    *(_DWORD *)(this + 112) = 2;
    this = WebCore::InspectorTimelineAgent::toggleInstruments(this, 0);
    *(_DWORD *)(v1 + 112) = 3;
  }
  return this;
}

Inspector::InspectorScriptProfilerAgent *WebCore::InspectorTimelineAgent::toggleScriptProfilerInstrument(uint64_t a1, int a2)
{
  Inspector::InspectorScriptProfilerAgent *result;
  WTF::StringImpl *v3;
  Inspector::InspectorScriptProfilerAgent *v4;
  char v5;
  Inspector::InspectorScriptProfilerAgent *v6;
  char v7;

  result = *(Inspector::InspectorScriptProfilerAgent **)(*(_QWORD *)(a1 + 16) + 64);
  if (result)
  {
    if (a2)
    {
      result = (Inspector::InspectorScriptProfilerAgent *)Inspector::InspectorScriptProfilerAgent::stopTracking(result);
      if (!v5)
        return result;
      result = v4;
      if (!v4)
        return result;
LABEL_8:
      if (*(_DWORD *)result == 2)
        return (Inspector::InspectorScriptProfilerAgent *)WTF::StringImpl::destroy(result, v3);
      *(_DWORD *)result -= 2;
      return result;
    }
    result = (Inspector::InspectorScriptProfilerAgent *)Inspector::InspectorScriptProfilerAgent::startTracking();
    if (v7)
    {
      result = v6;
      if (v6)
        goto LABEL_8;
    }
  }
  return result;
}

Inspector::InspectorHeapAgent *WebCore::InspectorTimelineAgent::toggleHeapInstrument(uint64_t a1, int a2)
{
  Inspector::InspectorHeapAgent *result;
  WTF::StringImpl *v4;
  Inspector::InspectorHeapAgent *v5;
  char v6;
  WTF::StringImpl *v7;
  char v8;

  result = *(Inspector::InspectorHeapAgent **)(*(_QWORD *)(a1 + 16) + 168);
  if (result)
  {
    if (a2)
    {
      result = (Inspector::InspectorHeapAgent *)Inspector::InspectorHeapAgent::stopTracking(result);
      if (!v6)
        return result;
      result = v5;
      if (!v5)
        return result;
LABEL_9:
      if (*(_DWORD *)result == 2)
        return (Inspector::InspectorHeapAgent *)WTF::StringImpl::destroy(result, v4);
      *(_DWORD *)result -= 2;
      return result;
    }
    if ((*(_DWORD *)(a1 + 112) | 2) == 2)
    {
      result = (Inspector::InspectorHeapAgent *)Inspector::InspectorHeapAgent::startTracking(result);
      if (v8)
      {
        result = v7;
        if (v7)
          goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorTimelineAgent::toggleCPUInstrument(uint64_t result, void *a2)
{
  uint64_t v2;
  Inspector::CPUProfilerFrontendDispatcher *v3;
  double *v4;
  double v5;
  _QWORD *v6;
  uint64_t v7;
  Inspector::CPUProfilerFrontendDispatcher *v8;
  double *v9;
  double v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(result + 16) + 32);
  if (v2)
  {
    if ((_DWORD)a2)
    {
      if (*(_BYTE *)(v2 + 56))
      {
        WebCore::ResourceUsageThread::removeObserver(*(WebCore::ResourceUsageThread **)(*(_QWORD *)(result + 16) + 32), a2);
        *(_BYTE *)(v2 + 56) = 0;
        v3 = *(Inspector::CPUProfilerFrontendDispatcher **)(v2 + 40);
        v4 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 56))(*(_QWORD *)(v2 + 24));
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v4);
        return Inspector::CPUProfilerFrontendDispatcher::trackingComplete(v3, v4[1] + v5 - v4[2]);
      }
      return result;
    }
    if (*(_BYTE *)(v2 + 56))
      return result;
    v11[0] = &off_1E33EFA80;
    v11[1] = v2;
    v12 = v11;
    WebCore::ResourceUsageThread::addObserver((WTF::RunLoop *)v2, (const void *)1, (char *)v11);
    v6 = v12;
    if (v12 == v11)
    {
      v7 = 4;
      v6 = v11;
    }
    else
    {
      if (!v12)
      {
LABEL_11:
        *(_BYTE *)(v2 + 56) = 1;
        v8 = *(Inspector::CPUProfilerFrontendDispatcher **)(v2 + 40);
        v9 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 56))(*(_QWORD *)(v2 + 24));
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
        return Inspector::CPUProfilerFrontendDispatcher::trackingStart(v8, v9[1] + v10 - v9[2]);
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
  return result;
}

uint64_t WebCore::InspectorTimelineAgent::toggleMemoryInstrument(uint64_t result, void *a2)
{
  uint64_t v2;
  Inspector::MemoryFrontendDispatcher *v3;
  double *v4;
  double v5;
  _QWORD *v6;
  uint64_t v7;
  Inspector::MemoryFrontendDispatcher *v8;
  double *v9;
  double v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(result + 16) + 56);
  if (v2)
  {
    if ((_DWORD)a2)
    {
      if (*(_BYTE *)(v2 + 56))
      {
        WebCore::ResourceUsageThread::removeObserver(*(WebCore::ResourceUsageThread **)(*(_QWORD *)(result + 16) + 56), a2);
        *(_BYTE *)(v2 + 56) = 0;
        v3 = *(Inspector::MemoryFrontendDispatcher **)(v2 + 40);
        v4 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 56))(*(_QWORD *)(v2 + 24));
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v4);
        return Inspector::MemoryFrontendDispatcher::trackingComplete(v3, v4[1] + v5 - v4[2]);
      }
      return result;
    }
    if (*(_BYTE *)(v2 + 56))
      return result;
    v11[0] = &off_1E33F0A00;
    v11[1] = v2;
    v12 = v11;
    WebCore::ResourceUsageThread::addObserver((WTF::RunLoop *)v2, (const void *)2, (char *)v11);
    v6 = v12;
    if (v12 == v11)
    {
      v7 = 4;
      v6 = v11;
    }
    else
    {
      if (!v12)
      {
LABEL_11:
        *(_BYTE *)(v2 + 56) = 1;
        v8 = *(Inspector::MemoryFrontendDispatcher **)(v2 + 40);
        v9 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 56))(*(_QWORD *)(v2 + 24));
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
        return Inspector::MemoryFrontendDispatcher::trackingStart(v8, v9[1] + v10 - v9[2]);
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
  return result;
}

uint64_t WebCore::InspectorTimelineAgent::toggleAnimationInstrument(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Inspector::AnimationFrontendDispatcher *v6;
  double *v7;
  double v8;
  Inspector::AnimationFrontendDispatcher *v9;
  double *v10;
  double v11;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 16) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    v4 = *(_QWORD *)(v3 + 224);
    if ((_DWORD)a2)
    {
      if (v4 == v2)
      {
        *(_QWORD *)(v3 + 224) = 0;
        v5 = *(_QWORD *)(v2 + 240);
        if (v5)
        {
          *(_QWORD *)(v2 + 240) = 0;
          WTF::HashTable<WebCore::StyleOriginatedAnimation *,WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashMap<WebCore::StyleOriginatedAnimation *,WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>,WTF::DefaultHash<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>,WTF::HashTraits<WTF::UniqueRef<WebCore::InspectorAnimationAgent::TrackedStyleOriginatedAnimationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleOriginatedAnimation *>>::deallocateTable(v5, a2);
        }
        v6 = *(Inspector::AnimationFrontendDispatcher **)(v2 + 40);
        v7 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 56))(*(_QWORD *)(v2 + 24));
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
        return Inspector::AnimationFrontendDispatcher::trackingComplete(v6, v7[1] + v8 - v7[2]);
      }
    }
    else if (v4 != v2)
    {
      *(_QWORD *)(v3 + 224) = v2;
      v9 = *(Inspector::AnimationFrontendDispatcher **)(v2 + 40);
      v10 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 56))(*(_QWORD *)(v2 + 24));
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
      return Inspector::AnimationFrontendDispatcher::trackingStart(v9, v10[1] + v11 - v10[2]);
    }
  }
  return result;
}

_DWORD *WebCore::InspectorTimelineAgent::breakpointActionProbe(uint64_t a1, WebCore *a2, WebCore::TimelineRecordFactory *a3, uint64_t a4, WTF::JSONImpl::Value *a5)
{
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  WebCore::Frame *v12;
  _DWORD *result;
  _DWORD *v14;

  WebCore::TimelineRecordFactory::createProbeSampleData(a3, a5, (uint64_t *)&v14);
  v8 = WebCore::executionContext(a2, v7);
  if (!v8 || *(_BYTE *)(v8 + 274))
  {
    v12 = 0;
  }
  else
  {
    v10 = *(_DWORD *)(v8 - 168);
    *(_DWORD *)(v8 - 168) = v10 + 2;
    v11 = *(_QWORD *)(v8 + 336);
    if (v11)
    {
      v12 = *(WebCore::Frame **)(v11 + 8);
      if (v10)
      {
LABEL_5:
        *(_DWORD *)(v8 - 168) = v10;
        goto LABEL_6;
      }
    }
    else
    {
      v12 = 0;
      if (v10)
        goto LABEL_5;
    }
    if ((*(_WORD *)(v8 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 192), v9);
  }
LABEL_6:
  WebCore::InspectorTimelineAgent::appendRecord(a1, &v14, 0x10u, 0, v12, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

_DWORD *`non-virtual thunk to'WebCore::InspectorTimelineAgent::breakpointActionProbe(uint64_t a1, WebCore *a2, WebCore::TimelineRecordFactory *a3, uint64_t a4, WTF::JSONImpl::Value *a5)
{
  return WebCore::InspectorTimelineAgent::breakpointActionProbe(a1 - 40, a2, a3, a4, a5);
}

WTF::StringImpl *WebCore::InspectorTimelineAgent::addRecordToTimeline(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t *v6;
  uint64_t v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _DWORD *v39;
  char v40;
  WTF::StringImpl *v41;

  v6 = (uint64_t *)*a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (a3 >= 0x17)
    v7 = 275;
  else
    v7 = a3 + 263;
  Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v7);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v37, v8);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v6 + 2, &v38, (const WTF::StringImpl *)&v41, (uint64_t)&v39);
  if (v40)
  {
    v10 = v6 + 3;
    v11 = *((unsigned int *)v6 + 9);
    if ((_DWORD)v11 == *((_DWORD *)v6 + 8))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v38);
      v11 = *((unsigned int *)v6 + 9);
      v35 = v6[3];
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v11) = v36;
    }
    else
    {
      v12 = *v10;
      v13 = v38;
      if (v38)
        *(_DWORD *)v38 += 2;
      *(_QWORD *)(v12 + 8 * v11) = v13;
    }
    *((_DWORD *)v6 + 9) = v11 + 1;
  }
  v14 = v41;
  v41 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v14;
  }
  v15 = v37;
  v37 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v9);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v38;
  v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  v17 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)(a1 + 72) + 32 * (v17 - 1);
    if (a3 != 5 || *(_DWORD *)(v18 + 24) != 5)
    {
      v19 = *(_QWORD *)(v18 + 16);
      v20 = (_DWORD *)*a2;
      *a2 = 0;
      v21 = *(unsigned int *)(v19 + 28);
      if ((_DWORD)v21 == *(_DWORD *)(v19 + 24))
      {
        v22 = v21 + (v21 >> 2);
        if (v22 >= 0x10)
          v23 = v22 + 1;
        else
          v23 = 16;
        if (v23 <= v21 + 1)
          v24 = v21 + 1;
        else
          v24 = v23;
        if (v24 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v25 = *(void **)(v19 + 16);
        v26 = (void *)WTF::fastMalloc((WTF *)(8 * v24));
        *(_DWORD *)(v19 + 24) = v24;
        *(_QWORD *)(v19 + 16) = v26;
        result = (WTF::StringImpl *)memcpy(v26, v25, 8 * v21);
        if (v25)
        {
          if (*(void **)(v19 + 16) == v25)
          {
            *(_QWORD *)(v19 + 16) = 0;
            *(_DWORD *)(v19 + 24) = 0;
          }
          result = (WTF::StringImpl *)WTF::fastFree((WTF *)v25, v27);
        }
        v21 = *(unsigned int *)(v19 + 28);
        v28 = (_QWORD *)(*(_QWORD *)(v19 + 16) + 8 * v21);
      }
      else
      {
        v28 = (_QWORD *)(*(_QWORD *)(v19 + 16) + 8 * v21);
      }
      *v28 = v20;
      *(_DWORD *)(v19 + 28) = v21 + 1;
    }
  }
  else
  {
    v29 = (_DWORD *)*a2;
    *a2 = 0;
    v39 = v29;
    Inspector::Protocol::BindingTraits<Inspector::Protocol::Timeline::TimelineEvent>::runtimeCast();
    v30 = v39;
    v39 = 0;
    if (v30)
    {
      if (*v30 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v30;
    }
    v31 = v38;
    v38 = 0;
    v41 = v31;
    Inspector::Protocol::BindingTraits<Inspector::Protocol::Timeline::TimelineEvent>::runtimeCast();
    v32 = v41;
    v41 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v32;
    }
    Inspector::TimelineFrontendDispatcher::eventRecorded();
    v33 = v39;
    v39 = 0;
    if (v33)
    {
      if (*v33 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v33;
    }
    result = v38;
    v38 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorTimelineAgent::setFrameIdentifier(WTF::StringImpl *this, WTF::JSONImpl::Object *a2, WebCore::Frame *a3)
{
  unsigned int *v3;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  _BYTE v20[24];

  if (a3)
  {
    v3 = *(unsigned int **)(*((_QWORD *)this + 2) + 200);
    if (v3)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::InspectorPageAgent::frameId(v3, a3, &v17);
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v17, v6);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v18, (const WTF::StringImpl *)&v19, (uint64_t)v20);
      if (v20[16])
      {
        v8 = (uint64_t *)((char *)a2 + 24);
        v9 = *((unsigned int *)a2 + 9);
        if ((_DWORD)v9 == *((_DWORD *)a2 + 8))
        {
          v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v18);
          v9 = *((unsigned int *)a2 + 9);
          v15 = *((_QWORD *)a2 + 3);
          v16 = *v14;
          if (*v14)
            *v16 += 2;
          *(_QWORD *)(v15 + 8 * v9) = v16;
        }
        else
        {
          v10 = *v8;
          v11 = v18;
          if (v18)
            *(_DWORD *)v18 += 2;
          *(_QWORD *)(v10 + 8 * v9) = v11;
        }
        *((_DWORD *)a2 + 9) = v9 + 1;
      }
      v12 = v19;
      v19 = 0;
      if (v12)
      {
        if (*v12 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v12;
      }
      v13 = v17;
      v17 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v7);
        else
          *(_DWORD *)v13 -= 2;
      }
      this = v18;
      v18 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

void WebCore::InspectorDatabaseResource::~InspectorDatabaseResource(WebCore::InspectorDatabaseResource *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WebCore::Database::~Database((WebCore::Database *)v7);
      WTF::fastFree(v10, v11);
    }
  }
}

void WebCore::`anonymous namespace'::TransactionCallback::~TransactionCallback(WebCore::_anonymous_namespace_::TransactionCallback *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::`anonymous namespace'::TransactionCallback::handleEvent(WebCore::_anonymous_namespace_::TransactionCallback *this, WebCore::SQLTransaction *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::ScriptExecutionContext *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v28;
  unsigned int *v29;
  WTF *v30;
  int v31;
  unsigned int v32;
  char v33;
  _BYTE v34[8];
  WTF::StringImpl *v35;
  char v36;

  if (Inspector::BackendDispatcher::CallbackBase::isActive(*((Inspector::BackendDispatcher::CallbackBase **)this
                                                                          + 4)))
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = (WebCore::ScriptExecutionContext *)(v5 - 96);
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v7 = *((_QWORD *)this + 4);
    ++*(_DWORD *)(v7 + 8);
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v8 + 16) = 1;
    *(_QWORD *)v8 = &off_1E33A18C0;
    *(_QWORD *)(v8 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v8, v6);
    *(_QWORD *)v8 = &off_1E33F04D8;
    *(_QWORD *)(v8 + 24) = v7;
    v9 = *((_QWORD *)this + 1);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v11 = (WebCore::ScriptExecutionContext *)(v10 - 96);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
    }
    v12 = *((_QWORD *)this + 4);
    ++*(_DWORD *)(v12 + 8);
    v13 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v13 + 16) = 1;
    *(_QWORD *)v13 = &off_1E33A18C0;
    *(_QWORD *)(v13 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v13, v11);
    *(_QWORD *)v13 = &off_1E33F0538;
    *(_QWORD *)(v13 + 24) = v12;
    LOBYTE(v30) = 0;
    v33 = 0;
    v28 = (unsigned int *)v13;
    v29 = (unsigned int *)v8;
    WebCore::SQLTransaction::executeSql((uint64_t)a2, (WebCore::_anonymous_namespace_::TransactionCallback *)((char *)this + 24), (uint64_t *)&v30, &v29, (uint64_t *)&v28, (uint64_t)v34);
    if (v36)
    {
      v15 = v35;
      v35 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    v16 = v28;
    v28 = 0;
    if (v16)
    {
      v17 = v16 + 4;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v16 + 4);
        (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
      }
    }
    v20 = v29;
    v29 = 0;
    if (v20)
    {
      v21 = v20 + 4;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v20 + 4);
        (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
      }
    }
    if (v33)
    {
      v24 = (unsigned int *)v30;
      if (v32)
      {
        v25 = 16 * v32;
        do
        {
          v26 = v24[2];
          if ((_DWORD)v26 != -1)
            off_1E33F0570[v26](&v29, v24);
          v24[2] = -1;
          v24 += 4;
          v25 -= 16;
        }
        while (v25);
        v24 = (unsigned int *)v30;
      }
      if (v24)
      {
        v30 = 0;
        v31 = 0;
        WTF::fastFree((WTF *)v24, v14);
      }
    }
  }
  return 0;
}

uint64_t WebCore::`anonymous namespace'::TransactionCallback::hasCallback(WebCore::_anonymous_namespace_::TransactionCallback *this)
{
  return 1;
}

void WebCore::`anonymous namespace'::StatementCallback::~StatementCallback(WebCore::_anonymous_namespace_::StatementCallback *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  _DWORD *v3;
  WTF *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::`anonymous namespace'::StatementCallback::handleEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const WTF::String *v5;
  uint64_t v6;
  WTF::JSONImpl::Value *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  WebCore::_anonymous_namespace_::StatementCallback *v28;
  _DWORD *v29;
  _DWORD *v30;
  _QWORD *v31;

  v3 = *(_QWORD *)(a3 + 8);
  v4 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  v6 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(WTF::JSONImpl::Value **)(v3 + 8);
    v8 = 8 * v6;
    do
    {
      WTF::JSONImpl::Value::create(v7, v5);
      v9 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v9 == *(_DWORD *)(v4 + 24))
      {
        v10 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v9 + 1, (unint64_t)&v31);
        v9 = *(unsigned int *)(v4 + 28);
        v11 = *(_QWORD *)(v4 + 16);
        v12 = *(_QWORD **)v10;
        *(_QWORD *)v10 = 0;
      }
      else
      {
        v11 = *(_QWORD *)(v4 + 16);
        v12 = v31;
        v31 = 0;
      }
      *(_QWORD *)(v11 + 8 * v9) = v12;
      *(_DWORD *)(v4 + 28) = v9 + 1;
      v13 = v31;
      v31 = 0;
      if (v13)
      {
        if (*v13 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v13;
      }
      v7 = (WTF::JSONImpl::Value *)((char *)v7 + 8);
      v8 -= 8;
    }
    while (v8);
  }
  v14 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v14);
  v15 = *(unsigned int *)(v3 + 36);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(v3 + 24);
    v17 = 16 * v15;
    while (1)
    {
      v18 = *(unsigned int *)(v16 + 8);
      if ((_DWORD)v18 == -1)
        break;
      v31 = &v29;
      ((void (*)(_DWORD **__return_ptr, _QWORD **, uint64_t))*(&off_1E33F0510 + v18))(&v30, &v31, v16);
      v19 = *(unsigned int *)(v14 + 28);
      if ((_DWORD)v19 == *(_DWORD *)(v14 + 24))
      {
        v20 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v14 + 16), v19 + 1, (unint64_t)&v30);
        v19 = *(unsigned int *)(v14 + 28);
        v21 = (_QWORD *)(*(_QWORD *)(v14 + 16) + 8 * v19);
      }
      else
      {
        v21 = (_QWORD *)(*(_QWORD *)(v14 + 16) + 8 * v19);
        v20 = (char *)&v30;
      }
      v22 = *(_QWORD *)v20;
      *(_QWORD *)v20 = 0;
      *v21 = v22;
      *(_DWORD *)(v14 + 28) = v19 + 1;
      v23 = v30;
      v30 = 0;
      if (v23)
      {
        if (*v23 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v23;
      }
      v16 += 16;
      v17 -= 16;
      if (!v17)
        goto LABEL_24;
    }
    v28 = (WebCore::_anonymous_namespace_::StatementCallback *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
LABEL_24:
    v30 = (_DWORD *)v14;
    v31 = (_QWORD *)v4;
    v29 = 0;
    Inspector::DatabaseBackendDispatcherHandler::ExecuteSQLCallback::sendSuccess();
    v24 = v29;
    v29 = 0;
    if (v24)
    {
      if (*v24 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v24;
    }
    v25 = v30;
    v30 = 0;
    if (v25)
    {
      if (*v25 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v25;
    }
    v26 = v31;
    v31 = 0;
    if (v26)
    {
      if (*v26 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v26;
    }
    return 0;
  }
}

uint64_t WebCore::`anonymous namespace'::StatementCallback::hasCallback(WebCore::_anonymous_namespace_::StatementCallback *this)
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::`anonymous namespace'::StatementCallback::handleEvent(WebCore::SQLTransaction &,WebCore::SQLResultSet &)::{lambda(decltype(nullptr) const&)#1},WebCore::`anonymous namespace'::StatementCallback::handleEvent(WebCore::SQLTransaction &,WebCore::SQLResultSet &)::{lambda(WTF::String const&)#1},WebCore::`anonymous namespace'::StatementCallback::handleEvent(WebCore::SQLTransaction &,WebCore::SQLResultSet &)::{lambda(double)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::String,double> const&>(int a1, WTF::JSONImpl::Value *this)
{
  return WTF::JSONImpl::Value::create(this, this);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::`anonymous namespace'::StatementCallback::handleEvent(WebCore::SQLTransaction &,WebCore::SQLResultSet &)::{lambda(decltype(nullptr) const&)#1},WebCore::`anonymous namespace'::StatementCallback::handleEvent(WebCore::SQLTransaction &,WebCore::SQLResultSet &)::{lambda(WTF::String const&)#1},WebCore::`anonymous namespace'::StatementCallback::handleEvent(WebCore::SQLTransaction &,WebCore::SQLResultSet &)::{lambda(double)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::String,double> const&>(WTF::JSONImpl::Value *a1, double *a2)
{
  return WTF::JSONImpl::Value::create(a1, *a2);
}

void WebCore::`anonymous namespace'::StatementErrorCallback::~StatementErrorCallback(WebCore::_anonymous_namespace_::StatementErrorCallback *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  _DWORD *v3;
  WTF *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree(v4, v5);
}

_DWORD *WebCore::`anonymous namespace'::StatementErrorCallback::handleEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  WTF::JSONImpl::Object *v4;
  _DWORD *result;

  v4 = *(WTF::JSONImpl::Object **)(a1 + 24);
  ++*((_DWORD *)v4 + 2);
  if (*((_DWORD *)v4 + 2) == 1)
    result = (_DWORD *)(*(uint64_t (**)(WTF::JSONImpl::Object *))(*(_QWORD *)v4 + 8))(v4);
  else
    --*((_DWORD *)v4 + 2);
  *(_BYTE *)a3 = 1;
  *(_DWORD *)(a3 + 4) = 0;
  return result;
}

uint64_t WebCore::`anonymous namespace'::StatementErrorCallback::hasCallback(WebCore::_anonymous_namespace_::StatementErrorCallback *this)
{
  return 1;
}

_DWORD *WebCore::`anonymous namespace'::reportTransactionFailed(WTF::JSONImpl::Object *a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::JSONImpl::Value *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  _DWORD *result;
  _DWORD **v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD **v30;
  uint64_t v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  _DWORD *v36;
  _QWORD v37[2];
  char v38;

  WTF::JSONImpl::Object::create(a1);
  WTF::String::isolatedCopy();
  v3 = v34;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v33, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v3 + 2, &v35, (const WTF::StringImpl *)&v36, (uint64_t)v37);
  if (v38)
  {
    v6 = (uint64_t *)((char *)v3 + 24);
    v7 = *((unsigned int *)v3 + 9);
    if ((_DWORD)v7 == *((_DWORD *)v3 + 8))
    {
      v27 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v35);
      v7 = *((unsigned int *)v3 + 9);
      v28 = *((_QWORD *)v3 + 3);
      v29 = *v27;
      if (*v27)
        *v29 += 2;
      *(_QWORD *)(v28 + 8 * v7) = v29;
    }
    else
    {
      v8 = *v6;
      v9 = v35;
      if (v35)
        *(_DWORD *)v35 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)v3 + 9) = v7 + 1;
  }
  v10 = v36;
  v36 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v35;
  v35 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::JSONImpl::Value *)*(unsigned int *)(a2 + 4);
  v13 = v34;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v12);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v13 + 2, &v35, (const WTF::StringImpl *)&v36, (uint64_t)v37);
  if (v38)
  {
    v15 = (uint64_t *)((char *)v13 + 24);
    v16 = *((unsigned int *)v13 + 9);
    if ((_DWORD)v16 == *((_DWORD *)v13 + 8))
    {
      v30 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v35);
      v16 = *((unsigned int *)v13 + 9);
      v31 = *((_QWORD *)v13 + 3);
      v32 = *v30;
      if (*v30)
        *v32 += 2;
      *(_QWORD *)(v31 + 8 * v16) = v32;
    }
    else
    {
      v17 = *v15;
      v18 = v35;
      if (v35)
        *(_DWORD *)v35 += 2;
      *(_QWORD *)(v17 + 8 * v16) = v18;
    }
    *((_DWORD *)v13 + 9) = v16 + 1;
  }
  v19 = v36;
  v36 = 0;
  if (v19)
  {
    if (*v19 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v19;
  }
  v20 = v35;
  v35 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v33;
  v22 = v34;
  v33 = 0;
  v34 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v14);
    else
      *(_DWORD *)v21 -= 2;
    v23 = v34;
    v34 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v23;
    }
  }
  v36 = 0;
  v37[0] = 0;
  v35 = v22;
  Inspector::DatabaseBackendDispatcherHandler::ExecuteSQLCallback::sendSuccess();
  v24 = v35;
  v35 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v24;
  }
  v25 = v36;
  v36 = 0;
  if (v25)
  {
    if (*v25 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v25;
  }
  result = (_DWORD *)v37[0];
  v37[0] = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

void WebCore::`anonymous namespace'::TransactionErrorCallback::~TransactionErrorCallback(WebCore::_anonymous_namespace_::TransactionErrorCallback *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  _DWORD *v3;
  WTF *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::`anonymous namespace'::TransactionErrorCallback::handleEvent(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t WebCore::`anonymous namespace'::TransactionErrorCallback::hasCallback(WebCore::_anonymous_namespace_::TransactionErrorCallback *this)
{
  return 1;
}

void WebCore::`anonymous namespace'::TransactionSuccessCallback::~TransactionSuccessCallback(WebCore::_anonymous_namespace_::TransactionSuccessCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::`anonymous namespace'::TransactionSuccessCallback::handleEvent(WebCore::_anonymous_namespace_::TransactionSuccessCallback *this)
{
  return 0;
}

uint64_t WebCore::`anonymous namespace'::TransactionSuccessCallback::hasCallback(WebCore::_anonymous_namespace_::TransactionSuccessCallback *this)
{
  return 1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore10IDBFactoryEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore8DocumentEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::`anonymous namespace'::DatabaseLoader::~DatabaseLoader(WebCore::_anonymous_namespace_::DatabaseLoader *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

void WebCore::`anonymous namespace'::DatabaseLoader::~DatabaseLoader(WebCore::_anonymous_namespace_::DatabaseLoader *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::`anonymous namespace'::DatabaseLoader::execute(Inspector::BackendDispatcher::CallbackBase **this, WebCore::IDBDatabase *a2)
{
  WTF::StringImpl *result;
  WTF::JSONImpl::ArrayBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const WTF::StringImpl **v14;
  _QWORD *v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned int v18;
  const WTF::StringImpl **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::JSONImpl::Object *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const WTF::String *v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::JSONImpl::Value *v53;
  WTF::StringImpl *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::JSONImpl::Value *v61;
  WTF::StringImpl *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t *v76;
  uint64_t v77;
  _DWORD **v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD **v81;
  uint64_t v82;
  _DWORD *v83;
  _DWORD **v84;
  uint64_t v85;
  _DWORD *v86;
  _DWORD **v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  const WTF::String *v91;
  WTF::StringImpl *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::JSONImpl::Value *v108;
  WTF::StringImpl *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  void *v127;
  void *v128;
  void *v129;
  uint64_t *v130;
  _DWORD **v131;
  uint64_t v132;
  _DWORD *v133;
  _DWORD **v134;
  uint64_t v135;
  _DWORD *v136;
  _DWORD **v137;
  uint64_t v138;
  _DWORD *v139;
  _DWORD **v140;
  uint64_t v141;
  _DWORD *v142;
  WTF::StringImpl *v143;
  const WTF::String *v144;
  WTF::StringImpl *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  double v152;
  WTF::StringImpl *v153;
  WTF::JSONImpl::Value *v154;
  WTF::StringImpl *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  _DWORD **v171;
  uint64_t v172;
  _DWORD *v173;
  _DWORD **v174;
  uint64_t v175;
  _DWORD *v176;
  _DWORD **v177;
  uint64_t v178;
  _DWORD *v179;
  WTF::StringImpl **v180;
  WTF *v181;
  WTF::JSONImpl::ArrayBase *v182;
  uint64_t v183;
  WebCore::IDBDatabase *v184;
  char v185;
  uint64_t v186[2];
  int v187;
  char v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191[2];
  char v192;
  WTF::StringImpl *v193;

  result = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::isActive(this[3]);
  if ((_DWORD)result)
  {
    v4 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
    v5 = WTF::JSONImpl::ArrayBase::ArrayBase(v4);
    v6 = *((_QWORD *)a2 + 14);
    if (!v6 || (v7 = *(unsigned int *)(v6 - 12), !(_DWORD)v7))
    {
      v14 = 0;
      v9 = 0;
      v185 = 1;
      goto LABEL_250;
    }
    if (v7 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195E5A6D0);
    }
    v5 = WTF::fastMalloc((WTF *)(8 * v7));
    v9 = (WTF *)v5;
    v10 = *((_QWORD *)a2 + 14);
    if (!v10 || !*(_DWORD *)(v10 - 12))
      goto LABEL_249;
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      v12 = 72 * v11;
      v13 = (_QWORD *)*((_QWORD *)a2 + 14);
      while ((unint64_t)(*v13 + 1) <= 1)
      {
        v13 += 9;
        v12 -= 72;
        if (!v12)
          goto LABEL_249;
      }
    }
    else
    {
      v13 = (_QWORD *)*((_QWORD *)a2 + 14);
    }
    v15 = (_QWORD *)(v10 + 72 * v11);
    if (v13 != v15)
    {
      v16 = 0;
LABEL_16:
      v17 = (_DWORD *)v13[2];
      if (v17)
        *v17 += 2;
      v18 = v16 + 1;
      *(_QWORD *)(v5 + 8 * v16) = v17;
      while (1)
      {
        v13 += 9;
        if (v13 == v15)
          break;
        if ((unint64_t)(*v13 + 1) > 1)
        {
          ++v16;
          if (v13 != v15)
            goto LABEL_16;
          break;
        }
      }
      v14 = (const WTF::StringImpl **)(v5 + 8 * v18);
      v185 = 1;
      if (v18)
      {
        v181 = (WTF *)v5;
        v19 = (const WTF::StringImpl **)v5;
        v183 = v5 + 8 * v18;
        v184 = a2;
        v182 = v4;
        while (1)
        {
          v20 = *((_QWORD *)a2 + 14);
          if (v20)
          {
            v21 = *(unsigned int *)(v20 - 4);
            v22 = v20 + 72 * v21;
            if (*(_DWORD *)(v20 - 12))
            {
              v23 = *((_QWORD *)a2 + 14);
              if ((_DWORD)v21)
              {
                v24 = 72 * v21;
                v23 = *((_QWORD *)a2 + 14);
                while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
                {
                  v23 += 72;
                  v24 -= 72;
                  if (!v24)
                  {
                    v23 = v22;
                    break;
                  }
                }
              }
LABEL_31:
              v25 = v20 + 72 * *(unsigned int *)(v20 - 4);
              goto LABEL_36;
            }
            v23 = v20 + 72 * v21;
          }
          else
          {
            v23 = 0;
            LODWORD(v21) = 0;
          }
          v22 = v20 + 72 * v21;
          if (v20)
            goto LABEL_31;
          v25 = 0;
LABEL_36:
          if (v25 != v23)
          {
            while (1)
            {
              v5 = WTF::equal(*(WTF **)(v23 + 16), *v19, v8);
              if ((v5 & 1) != 0)
                break;
              v26 = v23 + 72;
              v23 = v22;
              if (v26 != v22)
              {
                v23 = v26;
                while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
                {
                  v23 += 72;
                  if (v23 == v22)
                  {
                    v23 = v22;
                    break;
                  }
                }
              }
              if (v23 == v25)
                goto LABEL_226;
            }
            v27 = WTF::fastMalloc((WTF *)0x20);
            v28 = (WTF::JSONImpl::Object *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v27);
            v29 = *(_QWORD *)(v23 + 64);
            if (v29)
            {
              v30 = *(unsigned int *)(v29 - 4);
              v31 = v29 + (v30 << 6);
              if (*(_DWORD *)(v29 - 12))
              {
                v32 = *(_QWORD *)(v23 + 64);
                if ((_DWORD)v30)
                {
                  v33 = v30 << 6;
                  v32 = *(_QWORD *)(v23 + 64);
                  while ((unint64_t)(*(_QWORD *)v32 + 1) <= 1)
                  {
                    v32 += 64;
                    v33 -= 64;
                    if (!v33)
                    {
                      v32 = v31;
                      goto LABEL_55;
                    }
                  }
                }
                goto LABEL_55;
              }
              v32 = v29 + (v30 << 6);
            }
            else
            {
              v32 = 0;
              v30 = 0;
            }
            v31 = v29 + (v30 << 6);
LABEL_55:
            if (v29)
              v34 = v29 + ((unint64_t)*(unsigned int *)(v29 - 4) << 6);
            else
              v34 = 0;
            if (v34 != v32)
            {
              while (1)
              {
                WTF::JSONImpl::Object::create(v28);
                v35 = v186[0];
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v32 + 24), v36);
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v35 + 16), &v193, (const WTF::StringImpl *)v191, (uint64_t)v186);
                if ((_BYTE)v187)
                {
                  v38 = (uint64_t *)(v35 + 24);
                  v39 = *(unsigned int *)(v35 + 36);
                  if ((_DWORD)v39 == *(_DWORD *)(v35 + 32))
                  {
                    v78 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v193);
                    v39 = *(unsigned int *)(v35 + 36);
                    v79 = *(_QWORD *)(v35 + 24);
                    v80 = *v78;
                    if (*v78)
                      *v80 += 2;
                    *(_QWORD *)(v79 + 8 * v39) = v80;
                  }
                  else
                  {
                    v40 = *v38;
                    v41 = v193;
                    if (v193)
                      *(_DWORD *)v193 += 2;
                    *(_QWORD *)(v40 + 8 * v39) = v41;
                  }
                  *(_DWORD *)(v35 + 36) = v39 + 1;
                }
                v42 = v191[0];
                v191[0] = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v42;
                }
                v43 = v193;
                v193 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, v37);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                LOBYTE(v186[0]) = 0;
                v187 = -1;
                v44 = *(unsigned int *)(v32 + 48);
                if ((_DWORD)v44 == -1)
                  break;
                ((void (*)(WTF::StringImpl **, uint64_t *, uint64_t))off_1E33F0688[v44])(v191, v186, v32 + 32);
                v187 = v44;
                v188 = 1;
                v191[0] = (WTF::StringImpl *)&v193;
                ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t *))off_1E33F0668[v44])(&v189, v191, v186);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v45 = v189;
                v189 = 0;
                v190 = v45;
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v35 + 16), &v193, (const WTF::StringImpl *)&v190, (uint64_t)v191);
                if (v192)
                {
                  v47 = (uint64_t *)(v35 + 24);
                  v48 = *(unsigned int *)(v35 + 36);
                  if ((_DWORD)v48 == *(_DWORD *)(v35 + 32))
                  {
                    v81 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)&v193);
                    v48 = *(unsigned int *)(v35 + 36);
                    v82 = *(_QWORD *)(v35 + 24);
                    v83 = *v81;
                    if (*v81)
                      *v83 += 2;
                    *(_QWORD *)(v82 + 8 * v48) = v83;
                  }
                  else
                  {
                    v49 = *v47;
                    v50 = v193;
                    if (v193)
                      *(_DWORD *)v193 += 2;
                    *(_QWORD *)(v49 + 8 * v48) = v50;
                  }
                  *(_DWORD *)(v35 + 36) = v48 + 1;
                }
                v51 = v190;
                v190 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v51;
                }
                v52 = v193;
                v193 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, v46);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = (WTF::JSONImpl::Value *)*(unsigned __int8 *)(v32 + 56);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::JSONImpl::Value::create(v53);
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v35 + 16), &v190, (const WTF::StringImpl *)&v193, (uint64_t)v191);
                if (v192)
                {
                  v55 = (uint64_t *)(v35 + 24);
                  v56 = *(unsigned int *)(v35 + 36);
                  if ((_DWORD)v56 == *(_DWORD *)(v35 + 32))
                  {
                    v84 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v55, v56 + 1, (unint64_t)&v190);
                    v56 = *(unsigned int *)(v35 + 36);
                    v85 = *(_QWORD *)(v35 + 24);
                    v86 = *v84;
                    if (*v84)
                      *v86 += 2;
                    *(_QWORD *)(v85 + 8 * v56) = v86;
                  }
                  else
                  {
                    v57 = *v55;
                    v58 = v190;
                    if (v190)
                      *(_DWORD *)v190 += 2;
                    *(_QWORD *)(v57 + 8 * v56) = v58;
                  }
                  *(_DWORD *)(v35 + 36) = v56 + 1;
                }
                v59 = v193;
                v193 = 0;
                if (v59)
                {
                  if (*(_DWORD *)v59 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v59;
                }
                v60 = v190;
                v190 = 0;
                if (v60)
                {
                  if (*(_DWORD *)v60 == 2)
                    WTF::StringImpl::destroy(v60, v54);
                  else
                    *(_DWORD *)v60 -= 2;
                }
                v61 = (WTF::JSONImpl::Value *)*(unsigned __int8 *)(v32 + 57);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::JSONImpl::Value::create(v61);
                WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v35 + 16), &v190, (const WTF::StringImpl *)&v193, (uint64_t)v191);
                if (v192)
                {
                  v63 = (uint64_t *)(v35 + 24);
                  v64 = *(unsigned int *)(v35 + 36);
                  if ((_DWORD)v64 == *(_DWORD *)(v35 + 32))
                  {
                    v87 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v190);
                    v64 = *(unsigned int *)(v35 + 36);
                    v88 = *(_QWORD *)(v35 + 24);
                    v89 = *v87;
                    if (*v87)
                      *v89 += 2;
                    *(_QWORD *)(v88 + 8 * v64) = v89;
                  }
                  else
                  {
                    v65 = *v63;
                    v66 = v190;
                    if (v190)
                      *(_DWORD *)v190 += 2;
                    *(_QWORD *)(v65 + 8 * v64) = v66;
                  }
                  *(_DWORD *)(v35 + 36) = v64 + 1;
                }
                v67 = v193;
                v193 = 0;
                if (v67)
                {
                  if (*(_DWORD *)v67 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v67;
                }
                v68 = v190;
                v190 = 0;
                if (v68)
                {
                  if (*(_DWORD *)v68 == 2)
                    WTF::StringImpl::destroy(v68, v62);
                  else
                    *(_DWORD *)v68 -= 2;
                }
                v28 = v189;
                v189 = 0;
                if (v28)
                {
                  if (*(_DWORD *)v28 == 1)
                    v28 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v28;
                }
                if (v188 && v187 != -1)
                  v28 = (WTF::JSONImpl::Object *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E33F0678[v187])(v191, v186);
                v69 = *(unsigned int *)(v27 + 28);
                if ((_DWORD)v69 == *(_DWORD *)(v27 + 24))
                {
                  v70 = v69 + (v69 >> 2);
                  if (v70 >= 0x10)
                    v71 = v70 + 1;
                  else
                    v71 = 16;
                  if (v71 <= v69 + 1)
                    v72 = v69 + 1;
                  else
                    v72 = v71;
                  if (v72 >> 29)
                    goto LABEL_321;
                  v73 = *(void **)(v27 + 16);
                  v74 = (void *)WTF::fastMalloc((WTF *)(8 * v72));
                  *(_DWORD *)(v27 + 24) = v72;
                  *(_QWORD *)(v27 + 16) = v74;
                  v28 = (WTF::JSONImpl::Object *)memcpy(v74, v73, 8 * v69);
                  if (v73)
                  {
                    if (*(void **)(v27 + 16) == v73)
                    {
                      *(_QWORD *)(v27 + 16) = 0;
                      *(_DWORD *)(v27 + 24) = 0;
                    }
                    v28 = (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)v73, v75);
                  }
                  v69 = *(unsigned int *)(v27 + 28);
                  v76 = (uint64_t *)(*(_QWORD *)(v27 + 16) + 8 * v69);
                }
                else
                {
                  v76 = (uint64_t *)(*(_QWORD *)(v27 + 16) + 8 * v69);
                }
                *v76 = v35;
                *(_DWORD *)(v27 + 28) = v69 + 1;
                v77 = v32 + 64;
                v32 = v31;
                if (v77 != v31)
                {
                  v32 = v77;
                  while ((unint64_t)(*(_QWORD *)v32 + 1) <= 1)
                  {
                    v32 += 64;
                    if (v32 == v31)
                    {
                      v32 = v31;
                      break;
                    }
                  }
                }
                if (v32 == v34)
                  goto LABEL_156;
              }
              v188 = 1;
LABEL_318:
              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_321:
              __break(0xC471u);
              JUMPOUT(0x195E5A6C8);
            }
LABEL_156:
            WTF::JSONImpl::Object::create(v28);
            v90 = v186[0];
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v23 + 16), v91);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v90 + 16), &v193, (const WTF::StringImpl *)v191, (uint64_t)v186);
            a2 = v184;
            if ((_BYTE)v187)
            {
              v93 = (uint64_t *)(v90 + 24);
              v94 = *(unsigned int *)(v90 + 36);
              if ((_DWORD)v94 == *(_DWORD *)(v90 + 32))
              {
                v131 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v193);
                v94 = *(unsigned int *)(v90 + 36);
                v132 = *(_QWORD *)(v90 + 24);
                v133 = *v131;
                if (*v131)
                  *v133 += 2;
                *(_QWORD *)(v132 + 8 * v94) = v133;
              }
              else
              {
                v95 = *v93;
                v96 = v193;
                if (v193)
                  *(_DWORD *)v193 += 2;
                *(_QWORD *)(v95 + 8 * v94) = v96;
              }
              *(_DWORD *)(v90 + 36) = v94 + 1;
            }
            v97 = v191[0];
            v191[0] = 0;
            if (v97)
            {
              if (*(_DWORD *)v97 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v97;
            }
            v98 = v193;
            v193 = 0;
            if (v98)
            {
              if (*(_DWORD *)v98 == 2)
                v98 = (WTF::StringImpl *)WTF::StringImpl::destroy(v98, v92);
              else
                *(_DWORD *)v98 -= 2;
            }
            if (*(_BYTE *)(v23 + 48))
            {
              v99 = *(unsigned int *)(v23 + 40);
              if ((_DWORD)v99 == -1)
                goto LABEL_318;
              v186[0] = (uint64_t)v191;
              ((void (*)(WTF::StringImpl **__return_ptr, uint64_t *, uint64_t))off_1E33F0668[v99])(&v190, v186, v23 + 24);
            }
            else
            {
              WTF::JSONImpl::Object::create(v98);
              Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v186, (Inspector::Protocol::Helpers *)0xA5);
              v190 = (WTF::StringImpl *)v186[0];
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v100 = v190;
            v190 = 0;
            v193 = v100;
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v90 + 16), v191, (const WTF::StringImpl *)&v193, (uint64_t)v186);
            if ((_BYTE)v187)
            {
              v102 = (uint64_t *)(v90 + 24);
              v103 = *(unsigned int *)(v90 + 36);
              if ((_DWORD)v103 == *(_DWORD *)(v90 + 32))
              {
                v134 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v102, v103 + 1, (unint64_t)v191);
                v103 = *(unsigned int *)(v90 + 36);
                v135 = *(_QWORD *)(v90 + 24);
                v136 = *v134;
                if (*v134)
                  *v136 += 2;
                *(_QWORD *)(v135 + 8 * v103) = v136;
              }
              else
              {
                v104 = *v102;
                v105 = v191[0];
                if (v191[0])
                  *(_DWORD *)v191[0] += 2;
                *(_QWORD *)(v104 + 8 * v103) = v105;
              }
              *(_DWORD *)(v90 + 36) = v103 + 1;
            }
            v106 = v193;
            v193 = 0;
            if (v106)
            {
              if (*(_DWORD *)v106 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v106;
            }
            v107 = v191[0];
            v191[0] = 0;
            if (v107)
            {
              if (*(_DWORD *)v107 == 2)
                WTF::StringImpl::destroy(v107, v101);
              else
                *(_DWORD *)v107 -= 2;
            }
            v108 = (WTF::JSONImpl::Value *)*(unsigned __int8 *)(v23 + 56);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create(v108);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v90 + 16), &v193, (const WTF::StringImpl *)v191, (uint64_t)v186);
            if ((_BYTE)v187)
            {
              v110 = (uint64_t *)(v90 + 24);
              v111 = *(unsigned int *)(v90 + 36);
              if ((_DWORD)v111 == *(_DWORD *)(v90 + 32))
              {
                v137 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v110, v111 + 1, (unint64_t)&v193);
                v111 = *(unsigned int *)(v90 + 36);
                v138 = *(_QWORD *)(v90 + 24);
                v139 = *v137;
                if (*v137)
                  *v139 += 2;
                *(_QWORD *)(v138 + 8 * v111) = v139;
              }
              else
              {
                v112 = *v110;
                v113 = v193;
                if (v193)
                  *(_DWORD *)v193 += 2;
                *(_QWORD *)(v112 + 8 * v111) = v113;
              }
              *(_DWORD *)(v90 + 36) = v111 + 1;
            }
            v114 = v191[0];
            v191[0] = 0;
            if (v114)
            {
              if (*(_DWORD *)v114 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v114;
            }
            v115 = v193;
            v193 = 0;
            if (v115)
            {
              if (*(_DWORD *)v115 == 2)
                WTF::StringImpl::destroy(v115, v109);
              else
                *(_DWORD *)v115 -= 2;
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v193 = (WTF::StringImpl *)v27;
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v90 + 16), v191, (const WTF::StringImpl *)&v193, (uint64_t)v186);
            v4 = v182;
            v14 = (const WTF::StringImpl **)v183;
            if ((_BYTE)v187)
            {
              v117 = (uint64_t *)(v90 + 24);
              v118 = *(unsigned int *)(v90 + 36);
              if ((_DWORD)v118 == *(_DWORD *)(v90 + 32))
              {
                v140 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v117, v118 + 1, (unint64_t)v191);
                v118 = *(unsigned int *)(v90 + 36);
                v141 = *(_QWORD *)(v90 + 24);
                v142 = *v140;
                if (*v140)
                  *v142 += 2;
                *(_QWORD *)(v141 + 8 * v118) = v142;
              }
              else
              {
                v119 = *v117;
                v120 = v191[0];
                if (v191[0])
                  *(_DWORD *)v191[0] += 2;
                *(_QWORD *)(v119 + 8 * v118) = v120;
              }
              *(_DWORD *)(v90 + 36) = v118 + 1;
            }
            v121 = v193;
            v193 = 0;
            if (v121)
            {
              if (*(_DWORD *)v121 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v121;
            }
            v122 = v191[0];
            v191[0] = 0;
            if (v122)
            {
              if (*(_DWORD *)v122 == 2)
                WTF::StringImpl::destroy(v122, v116);
              else
                *(_DWORD *)v122 -= 2;
            }
            v5 = (uint64_t)v190;
            v190 = 0;
            if (v5)
            {
              if (*(_DWORD *)v5 == 1)
                v5 = WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v5;
            }
            v123 = *((unsigned int *)v182 + 7);
            if ((_DWORD)v123 == *((_DWORD *)v182 + 6))
            {
              v124 = v123 + (v123 >> 2);
              if (v124 >= 0x10)
                v125 = v124 + 1;
              else
                v125 = 16;
              if (v125 <= v123 + 1)
                v126 = v123 + 1;
              else
                v126 = v125;
              if (v126 >> 29)
                goto LABEL_321;
              v127 = (void *)*((_QWORD *)v182 + 2);
              v128 = (void *)WTF::fastMalloc((WTF *)(8 * v126));
              *((_DWORD *)v182 + 6) = v126;
              *((_QWORD *)v182 + 2) = v128;
              v5 = (uint64_t)memcpy(v128, v127, 8 * v123);
              if (v127)
              {
                if (*((void **)v182 + 2) == v127)
                {
                  *((_QWORD *)v182 + 2) = 0;
                  *((_DWORD *)v182 + 6) = 0;
                }
                v5 = WTF::fastFree((WTF *)v127, v129);
              }
              v123 = *((unsigned int *)v182 + 7);
              v130 = (uint64_t *)(*((_QWORD *)v182 + 2) + 8 * v123);
            }
            else
            {
              v130 = (uint64_t *)(*((_QWORD *)v182 + 2) + 8 * v123);
            }
            *v130 = v90;
            *((_DWORD *)v182 + 7) = v123 + 1;
          }
LABEL_226:
          if (++v19 == v14)
          {
            v185 = 0;
            v9 = v181;
            break;
          }
        }
      }
    }
    else
    {
LABEL_249:
      v185 = 1;
      v14 = (const WTF::StringImpl **)v5;
    }
LABEL_250:
    WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v5);
    v143 = v190;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WebCore::IDBDatabase *)((char *)a2 + 80), v144);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v143 + 2, &v193, (const WTF::StringImpl *)v191, (uint64_t)v186);
    if ((_BYTE)v187)
    {
      v146 = (uint64_t *)((char *)v143 + 24);
      v147 = *((unsigned int *)v143 + 9);
      if ((_DWORD)v147 == *((_DWORD *)v143 + 8))
      {
        v171 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v146, v147 + 1, (unint64_t)&v193);
        v147 = *((unsigned int *)v143 + 9);
        v172 = *((_QWORD *)v143 + 3);
        v173 = *v171;
        if (*v171)
          *v173 += 2;
        *(_QWORD *)(v172 + 8 * v147) = v173;
      }
      else
      {
        v148 = *v146;
        v149 = v193;
        if (v193)
          *(_DWORD *)v193 += 2;
        *(_QWORD *)(v148 + 8 * v147) = v149;
      }
      *((_DWORD *)v143 + 9) = v147 + 1;
    }
    v150 = v191[0];
    v191[0] = 0;
    if (v150)
    {
      if (*(_DWORD *)v150 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v150;
    }
    v151 = v193;
    v193 = 0;
    if (v151)
    {
      if (*(_DWORD *)v151 == 2)
        WTF::StringImpl::destroy(v151, v145);
      else
        *(_DWORD *)v151 -= 2;
    }
    v152 = (double)*((unint64_t *)a2 + 11);
    v153 = v190;
    v154 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v154, v152);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v153 + 2, &v193, (const WTF::StringImpl *)v191, (uint64_t)v186);
    if ((_BYTE)v187)
    {
      v156 = (uint64_t *)((char *)v153 + 24);
      v157 = *((unsigned int *)v153 + 9);
      if ((_DWORD)v157 == *((_DWORD *)v153 + 8))
      {
        v174 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v156, v157 + 1, (unint64_t)&v193);
        v157 = *((unsigned int *)v153 + 9);
        v175 = *((_QWORD *)v153 + 3);
        v176 = *v174;
        if (*v174)
          *v176 += 2;
        *(_QWORD *)(v175 + 8 * v157) = v176;
      }
      else
      {
        v158 = *v156;
        v159 = v193;
        if (v193)
          *(_DWORD *)v193 += 2;
        *(_QWORD *)(v158 + 8 * v157) = v159;
      }
      *((_DWORD *)v153 + 9) = v157 + 1;
    }
    v160 = v191[0];
    v191[0] = 0;
    if (v160)
    {
      if (*(_DWORD *)v160 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v160;
    }
    v161 = v193;
    v193 = 0;
    if (v161)
    {
      if (*(_DWORD *)v161 == 2)
        WTF::StringImpl::destroy(v161, v155);
      else
        *(_DWORD *)v161 -= 2;
    }
    v162 = v190;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v193 = v4;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v162 + 2, v191, (const WTF::StringImpl *)&v193, (uint64_t)v186);
    if ((_BYTE)v187)
    {
      v164 = (uint64_t *)((char *)v162 + 24);
      v165 = *((unsigned int *)v162 + 9);
      if ((_DWORD)v165 == *((_DWORD *)v162 + 8))
      {
        v177 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v164, v165 + 1, (unint64_t)v191);
        v165 = *((unsigned int *)v162 + 9);
        v178 = *((_QWORD *)v162 + 3);
        v179 = *v177;
        if (*v177)
          *v179 += 2;
        *(_QWORD *)(v178 + 8 * v165) = v179;
      }
      else
      {
        v166 = *v164;
        v167 = v191[0];
        if (v191[0])
          *(_DWORD *)v191[0] += 2;
        *(_QWORD *)(v166 + 8 * v165) = v167;
      }
      *((_DWORD *)v162 + 9) = v165 + 1;
    }
    v168 = v193;
    v193 = 0;
    if (v168)
    {
      if (*(_DWORD *)v168 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v168;
    }
    v169 = v191[0];
    v191[0] = 0;
    if (v169)
    {
      if (*(_DWORD *)v169 == 2)
        WTF::StringImpl::destroy(v169, v163);
      else
        *(_DWORD *)v169 -= 2;
    }
    v186[0] = (uint64_t)v190;
    Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseCallback::sendSuccess();
    result = (WTF::StringImpl *)v186[0];
    v186[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
    if ((v185 & 1) == 0)
    {
      v180 = (WTF::StringImpl **)v9;
      do
      {
        result = *v180;
        *v180 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v170);
          else
            *(_DWORD *)result -= 2;
        }
        ++v180;
      }
      while (v180 != v14);
    }
    if (v9)
      return (WTF::StringImpl *)WTF::fastFree(v9, v170);
  }
  return result;
}

uint64_t WebCore::`anonymous namespace'::DatabaseLoader::requestCallback(WebCore::_anonymous_namespace_::DatabaseLoader *this)
{
  return *((_QWORD *)this + 3);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::`anonymous namespace'::keyPathFromIDBKeyPath(std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&)::$_0,WebCore::`anonymous namespace'::keyPathFromIDBKeyPath(std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>@<X0>(WTF::JSONImpl::Object *a1@<X0>, WTF::JSONImpl::Value *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *result;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  uint64_t v19[2];
  char v20;

  WTF::JSONImpl::Object::create(a1);
  Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v19, (Inspector::Protocol::Helpers *)0xA3);
  v5 = v19[0];
  *a3 = v19[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v5 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v20)
  {
    v8 = (uint64_t *)(v5 + 24);
    v9 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v17);
      v9 = *(unsigned int *)(v5 + 36);
      v15 = *(_QWORD *)(v5 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v9) = v16;
    }
    else
    {
      v10 = *v8;
      v11 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *(_DWORD *)(v5 + 36) = v9 + 1;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::`anonymous namespace'::keyPathFromIDBKeyPath(std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&)::$_0,WebCore::`anonymous namespace'::keyPathFromIDBKeyPath(std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  WTF::JSONImpl::Object *v5;
  const WTF::String *v6;
  uint64_t v7;
  WTF::JSONImpl::Value *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *result;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  uint64_t v27[2];
  char v28;

  v4 = WTF::fastMalloc((WTF *)0x20);
  v5 = (WTF::JSONImpl::Object *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  v7 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(WTF::JSONImpl::Value **)a1;
    v9 = 8 * v7;
    do
    {
      WTF::JSONImpl::Value::create(v8, v6);
      v10 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v10 == *(_DWORD *)(v4 + 24))
      {
        v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v10 + 1, (unint64_t)v27);
        v10 = *(unsigned int *)(v4 + 28);
        v12 = *(_QWORD *)(v4 + 16);
        v13 = *(_QWORD *)v11;
        *(_QWORD *)v11 = 0;
      }
      else
      {
        v12 = *(_QWORD *)(v4 + 16);
        v13 = v27[0];
        v27[0] = 0;
      }
      *(_QWORD *)(v12 + 8 * v10) = v13;
      *(_DWORD *)(v4 + 28) = v10 + 1;
      v5 = (WTF::JSONImpl::Object *)v27[0];
      v27[0] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
          v5 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v5;
      }
      v8 = (WTF::JSONImpl::Value *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
  WTF::JSONImpl::Object::create(v5);
  Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v27, (Inspector::Protocol::Helpers *)0xA4);
  v14 = v27[0];
  *a2 = v27[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = (_DWORD *)v4;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v14 + 16), &v26, (const WTF::StringImpl *)&v25, (uint64_t)v27);
  if (v28)
  {
    v16 = (uint64_t *)(v14 + 24);
    v17 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v17 == *(_DWORD *)(v14 + 32))
    {
      v22 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v26);
      v17 = *(unsigned int *)(v14 + 36);
      v23 = *(_QWORD *)(v14 + 24);
      v24 = *v22;
      if (*v22)
        *v24 += 2;
      *(_QWORD *)(v23 + 8 * v17) = v24;
    }
    else
    {
      v18 = *v16;
      v19 = v26;
      if (v26)
        *(_DWORD *)v26 += 2;
      *(_QWORD *)(v18 + 8 * v17) = v19;
    }
    *(_DWORD *)(v14 + 36) = v17 + 1;
  }
  v20 = v25;
  v25 = 0;
  if (v20)
  {
    if (*v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v20;
  }
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::`anonymous namespace'::OpenDatabaseCallback::~OpenDatabaseCallback(WebCore::_anonymous_namespace_::OpenDatabaseCallback *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::`anonymous namespace'::OpenDatabaseCallback::handleEvent(WebCore::_anonymous_namespace_::OpenDatabaseCallback *this, WebCore::ScriptExecutionContext *a2, WebCore::Event *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Inspector::BackendDispatcher::CallbackBase *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  uint64_t v12;
  Inspector::BackendDispatcher::CallbackBase *v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  bmalloc::api *v21;
  void *v22;
  Inspector::BackendDispatcher::CallbackBase *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  _BYTE v27[160];
  int v28;
  int v29;
  WTF::StringImpl *v30[20];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow(this);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  if (*((_QWORD *)a3 + 3) != *(_QWORD *)(v7 + 2016))
  {
    v8 = (Inspector::BackendDispatcher::CallbackBase *)(*(uint64_t (**)(_QWORD, WebCore::ScriptExecutionContext *))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), a2);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v8, (const WTF::String *)&v26);
    result = v26;
    v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v11 = *((_QWORD *)a3 + 6);
  if (*(_DWORD *)(v11 + 352) != 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v27[0] = 8;
    v29 = 1;
    goto LABEL_16;
  }
  LOBYTE(v30[0]) = 0;
  v31 = -1;
  v12 = *(unsigned int *)(v11 + 304);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JS10_SZ_EEEDcmS12_DpOT0____fdiagonal[v12])(&v26, v30, v11 + 144);
    v31 = v12;
    v27[0] = 0;
    v28 = -1;
    ((void (*)(WTF::StringImpl **, _BYTE *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v12])(&v25, v27, v30);
    v28 = v12;
    v29 = 0;
    if (v31 == -1)
      goto LABEL_20;
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v31])(&v25, v30);
    if (!v29)
      goto LABEL_20;
LABEL_16:
    v13 = (Inspector::BackendDispatcher::CallbackBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3)
                                                                                          + 24))(*((_QWORD *)this + 3));
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v13, (const WTF::String *)v30);
    result = v30[0];
    v30[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_34;
  }
  v27[0] = 0;
  v28 = -1;
  v29 = 0;
LABEL_20:
  LOBYTE(v30[0]) = 0;
  v31 = -1;
  v15 = v28;
  if (v28 == -1
    || (((void (*)(WTF::StringImpl **, WTF::StringImpl **, _BYTE *))off_1E33F0778[v28])(&v25, v30, v27),
        v31 = v15,
        v15 != 1))
  {
    v23 = (Inspector::BackendDispatcher::CallbackBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3)
                                                                                          + 24))(*((_QWORD *)this + 3));
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v23, (const WTF::String *)&v25);
    result = v25;
    v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v16 = (unsigned int *)v30[0];
    if (v30[0])
    {
      v17 = (unsigned int *)((char *)v30[0] + 24);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      (*(void (**)(_QWORD, unsigned int *))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), v16);
      result = (WTF::StringImpl *)WebCore::IDBDatabase::close((uint64_t)v16);
      do
      {
        v19 = __ldaxr(v17);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v17));
      if (!v20)
      {
        atomic_store(1u, v16 + 6);
        WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v16);
        result = (WTF::StringImpl *)bmalloc::api::isoDeallocate(v21, v22);
      }
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), 0);
      result = (WTF::StringImpl *)WebCore::IDBDatabase::close(0);
    }
  }
  if (v31 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33F06F0[v31])(&v25, v30);
LABEL_34:
  if (v29 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E33F07B8[v29])(v30, v27);
  return result;
}

WTF::StringImpl *WebCore::`anonymous namespace'::idbKeyFromInspectorObject(uint64_t *a1, WTF::JSONImpl::ObjectBase **a2)
{
  WTF::JSONImpl::ObjectBase *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::JSONImpl::ObjectBase *v9;
  uint64_t Double;
  char v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  char v14;
  WTF::JSONImpl::ObjectBase *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  WTF::StringImpl *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  uint64_t v30;
  WTF::JSONImpl::ObjectBase *v31;
  char v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::JSONImpl::ObjectBase *v35;
  WTF::StringImpl *v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  char v61;

  v4 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString(v4, (const WTF::String *)&v56);
  result = v56;
  v56 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  if (!v60)
  {
    *a1 = 0;
    return result;
  }
  v7 = Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::IndexedDB::Key::Type>();
  if ((v7 & 0xFF00000000) == 0)
    goto LABEL_63;
  if ((int)v7 <= 162)
  {
    if ((_DWORD)v7 == 136)
    {
      v31 = *a2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Double = WTF::JSONImpl::ObjectBase::getDouble(v31, (const WTF::String *)&v56);
      v32 = (char)v8;
      v33 = v56;
      v56 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v8);
        else
          *(_DWORD *)v33 -= 2;
      }
      if (v32)
      {
        v13 = bmalloc::api::isoAllocate();
        *(_DWORD *)v13 = 1;
        v14 = 4;
        goto LABEL_54;
      }
    }
    else if ((_DWORD)v7 == 162)
    {
      v9 = *a2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Double = WTF::JSONImpl::ObjectBase::getDouble(v9, (const WTF::String *)&v56);
      v11 = (char)v8;
      v12 = v56;
      v56 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v8);
        else
          *(_DWORD *)v12 -= 2;
      }
      if (v11)
      {
        v13 = bmalloc::api::isoAllocate();
        *(_DWORD *)v13 = 1;
        v14 = 5;
LABEL_54:
        *(_BYTE *)(v13 + 4) = v14;
        *(_QWORD *)(v13 + 8) = Double;
        *(_DWORD *)(v13 + 24) = 2;
        v34 = 24;
LABEL_55:
        *(_QWORD *)(v13 + 32) = v34;
        *a1 = v13;
        goto LABEL_64;
      }
    }
    goto LABEL_63;
  }
  if ((_DWORD)v7 != 163)
  {
    if ((_DWORD)v7 == 164)
    {
      v15 = *a2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v58 = v56;
      WTF::JSONImpl::ObjectBase::getArray(v15, (const WTF::String *)&v58);
      v16 = v58;
      v58 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v8);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = v59;
      if (v59)
      {
        v56 = 0;
        v57 = 0;
        if (!*((_DWORD *)v59 + 7))
          goto LABEL_75;
        v18 = 0;
        do
        {
          WTF::JSONImpl::ArrayBase::get(v17);
          v19 = v58;
          v20 = *((_DWORD *)v58 + 1);
          if (v20 < 5 || v20 == 6)
          {
            v22 = 0;
          }
          else
          {
            if (v20 != 5)
              goto LABEL_106;
            ++*(_DWORD *)v58;
            v22 = v19;
          }
          v58 = 0;
          if (*(_DWORD *)v19 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            if (!v22)
            {
LABEL_70:
              v39 = 0;
              goto LABEL_84;
            }
          }
          else
          {
            --*(_DWORD *)v19;
            if (!v22)
              goto LABEL_70;
          }
          v55 = v22;
          LODWORD(v24) = HIDWORD(v57);
          if (HIDWORD(v57) == (_DWORD)v57)
          {
            v25 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v56, HIDWORD(v57) + 1, (unint64_t)&v58);
            v24 = HIDWORD(v57);
            v26 = v56;
            v27 = *(_QWORD *)v25;
            *(_QWORD *)v25 = 0;
            *((_QWORD *)v26 + v24) = v27;
          }
          else
          {
            v28 = v58;
            v58 = 0;
            *((_QWORD *)v56 + HIDWORD(v57)) = v28;
          }
          HIDWORD(v57) = v24 + 1;
          v29 = (unsigned int *)v58;
          v58 = 0;
          if (v29)
          {
            if (*v29 == 1)
            {
              v30 = v29[6];
              if ((_DWORD)v30 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v30])(&v61, v29 + 2);
              v29[6] = -1;
              bmalloc::api::isoDeallocate((bmalloc::api *)v29, v23);
            }
            else
            {
              --*v29;
            }
          }
          if (*(_DWORD *)v22 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v22;
          ++v18;
          v17 = v59;
        }
        while (v18 < *((unsigned int *)v59 + 7));
        if (HIDWORD(v57))
        {
          v40 = 0;
          v41 = v56;
          v42 = 8 * HIDWORD(v57);
          do
          {
            v43 = *(_QWORD *)v41;
            v41 = (WTF::StringImpl *)((char *)v41 + 8);
            v40 += *(_QWORD *)(v43 + 32);
            v42 -= 8;
          }
          while (v42);
          v44 = v40 + 16;
        }
        else
        {
LABEL_75:
          v44 = 16;
        }
        v39 = bmalloc::api::isoAllocate();
        *(_DWORD *)v39 = 1;
        *(_BYTE *)(v39 + 4) = 1;
        v45 = HIDWORD(v57);
        *(_QWORD *)(v39 + 8) = 0;
        *(_QWORD *)(v39 + 16) = 0;
        *(_DWORD *)(v39 + 20) = v45;
        if ((_DWORD)v45)
        {
          if (v45 >> 29)
          {
LABEL_106:
            __break(0xC471u);
            JUMPOUT(0x195E5B4C0);
          }
          v46 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v45));
          *(_DWORD *)(v39 + 16) = v45;
          *(_QWORD *)(v39 + 8) = v46;
          if (HIDWORD(v57))
          {
            v47 = v56;
            v48 = 8 * HIDWORD(v57);
            do
            {
              v49 = *(_DWORD **)v47;
              if (*(_QWORD *)v47)
                ++*v49;
              *v46++ = v49;
              v47 = (WTF::StringImpl *)((char *)v47 + 8);
              v48 -= 8;
            }
            while (v48);
          }
        }
        *(_DWORD *)(v39 + 24) = 0;
        *(_QWORD *)(v39 + 32) = v44;
LABEL_84:
        *a1 = v39;
        v50 = v56;
        if (HIDWORD(v57))
        {
          v51 = 8 * HIDWORD(v57);
          do
          {
            v52 = *(unsigned int **)v50;
            *(_QWORD *)v50 = 0;
            if (v52)
            {
              if (*v52 == 1)
              {
                v53 = v52[6];
                if ((_DWORD)v53 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v53])(&v58, v52 + 2);
                v52[6] = -1;
                bmalloc::api::isoDeallocate((bmalloc::api *)v52, v8);
              }
              else
              {
                --*v52;
              }
            }
            v50 = (WTF::StringImpl *)((char *)v50 + 8);
            v51 -= 8;
          }
          while (v51);
          v50 = v56;
        }
        if (v50)
        {
          v56 = 0;
          LODWORD(v57) = 0;
          WTF::fastFree(v50, v8);
        }
        v54 = v59;
        v59 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v54;
        }
        goto LABEL_64;
      }
    }
    goto LABEL_63;
  }
  v35 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString(v35, (const WTF::String *)&v59);
  v36 = v59;
  v59 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v8);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (!v56)
  {
LABEL_63:
    *a1 = 0;
    goto LABEL_64;
  }
  v13 = bmalloc::api::isoAllocate();
  *(_DWORD *)v13 = 1;
  *(_BYTE *)(v13 + 4) = 3;
  v37 = (unsigned int *)v56;
  if (!v56)
  {
    *(_QWORD *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 24) = 1;
    v34 = 16;
    goto LABEL_55;
  }
  v38 = *(_DWORD *)v56;
  *(_DWORD *)v56 += 2;
  *(_QWORD *)(v13 + 8) = v37;
  *(_DWORD *)(v13 + 24) = 1;
  *(_QWORD *)(v13 + 32) = 2 * v37[1] + 16;
  *a1 = v13;
  v56 = 0;
  if (v38)
    *v37 = v38;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v37, v8);
LABEL_64:
  result = v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::`anonymous namespace'::DataLoader::~DataLoader(WebCore::_anonymous_namespace_::DataLoader *this, void *a2)
{
  WebCore::IDBKeyRange *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (WebCore::IDBKeyRange *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  Inspector::InjectedScript::~InjectedScript((WebCore::_anonymous_namespace_::DataLoader *)((char *)this + 32));
  v6 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
}

{
  WTF *v2;
  void *v3;

  WTF::fastFree(v2, v3);
}

unsigned int *WebCore::`anonymous namespace'::DataLoader::execute(Inspector::BackendDispatcher::CallbackBase **this, WebCore::IDBDatabase *a2)
{
  unsigned int *result;
  Inspector::BackendDispatcher::CallbackBase *v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher::CallbackBase *v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  Inspector::BackendDispatcher::CallbackBase *v12;
  Inspector::BackendDispatcher::CallbackBase *v13;
  _QWORD *v14;
  unsigned int *v15;
  WebCore::AbortSignal *v16;
  Inspector::BackendDispatcher::CallbackBase *v17;
  Inspector::BackendDispatcher::CallbackBase *v18;
  JSC::HandleSet *v19;
  _QWORD *v20;
  Inspector::BackendDispatcher::CallbackBase **v21;
  Inspector::BackendDispatcher::CallbackBase *v22;
  Inspector::BackendDispatcher::CallbackBase *v23;
  Inspector::BackendDispatcher::CallbackBase *v24;
  Inspector::BackendDispatcher::CallbackBase *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  Inspector::BackendDispatcher::CallbackBase **v29;
  Inspector::BackendDispatcher::CallbackBase *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  Inspector::BackendDispatcher::CallbackBase **v34;
  Inspector::BackendDispatcher::CallbackBase *v35;
  unint64_t *v36;
  unint64_t v37;
  WTF::JSONImpl::ArrayBase *v38;
  WebCore *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WebCore::AbortSignal *v44;
  _DWORD *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  Inspector::BackendDispatcher::CallbackBase *v49;
  Inspector::BackendDispatcher::CallbackBase *v50;
  WTF::StringImpl *v51;
  Inspector::BackendDispatcher::CallbackBase *v52;
  _QWORD *v53;
  WTF::StringImpl *v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  bmalloc::api *v59;
  void *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  bmalloc::api *v70;
  void *v71;
  Inspector::BackendDispatcher::CallbackBase *v72;
  Inspector::BackendDispatcher::CallbackBase *v73;
  Inspector::BackendDispatcher::CallbackBase *v74;
  Inspector::BackendDispatcher::CallbackBase *v75;
  bmalloc::api *v76;
  void *v77;
  bmalloc::api *v78;
  void *v79;
  _QWORD *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  _QWORD v83[3];
  _QWORD *v84;
  Inspector::BackendDispatcher::CallbackBase *v85;
  _QWORD v86[2];
  int v87;
  char v88;
  WTF::StringImpl *v89;
  WebCore::AbortSignal *v90;
  Inspector::BackendDispatcher::CallbackBase *v91;
  _QWORD *v92;
  Inspector::BackendDispatcher::CallbackBase *v93;

  result = (unsigned int *)Inspector::BackendDispatcher::CallbackBase::isActive(this[3]);
  if ((_DWORD)result)
  {
    v5 = this[9];
    if (v5)
      *(_DWORD *)v5 += 2;
    v86[0] = v5;
    v87 = 0;
    WebCore::IDBDatabase::transaction((uint64_t)a2, (uint64_t)v86, 0, 0, (uint64_t)&v89);
    if (v87 != -1)
      ((void (*)(char *, _QWORD *))off_1E33F0678[v87])(&v88, v86);
    if ((_DWORD)v91 != -1)
    {
      if ((_DWORD)v91)
      {
        v6 = 0;
      }
      else
      {
        v6 = v89;
        v89 = 0;
      }
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E33F0808[v91])(v86, &v89);
      if (v6)
      {
        WebCore::IDBTransaction::objectStore((uint64_t)v6, this + 9, v7, (uint64_t)&v89);
        if ((_DWORD)v91 == -1
          || ((_DWORD)v91 ? (v8 = 0) : (v8 = v89, v89 = 0),
              ((void (*)(_QWORD *, WTF::StringImpl **))off_1E33F0818[v91])(v86, &v89),
              !v8))
        {
          v49 = this[3];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v49, (const WTF::String *)&v89);
          result = (unsigned int *)v89;
          v89 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v43);
            else
              *result -= 2;
          }
          goto LABEL_108;
        }
        if (*((unsigned __int8 *)v6 + 136) - 2 >= 3)
          *((_BYTE *)v6 + 136) = 0;
        v12 = this[10];
        if (v12 && *((_DWORD *)v12 + 1))
        {
          WebCore::IDBObjectStore::index((uint64_t)v8, this + 10, v11, (uint64_t)&v89);
          if ((_DWORD)v91 == -1
            || ((_DWORD)v91 ? (v51 = 0) : (v51 = v89, v89 = 0),
                ((void (*)(_QWORD *, WTF::StringImpl **))off_1E33F0828[v91])(v86, &v89),
                !v51))
          {
            v50 = this[3];
            goto LABEL_93;
          }
          v52 = this[11];
          if (v52)
            ++*((_DWORD *)v52 + 2);
          v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v53 = &off_1E3357938;
          v53[1] = v52;
          v86[0] = v53;
          WebCore::IDBIndex::doOpenCursor((uint64_t)v51, 0, (uint64_t)v86, (uint64_t)&v89);
          (*(void (**)(_QWORD *))(*v53 + 8))(v53);
          v15 = 0;
          if ((_DWORD)v91 != -1)
          {
            if (!(_DWORD)v91)
            {
              v15 = (unsigned int *)v89;
              v89 = 0;
            }
            ((void (*)(_QWORD *, WTF::StringImpl **))off_1E33F0838[v91])(v86, &v89);
          }
          v55 = *(unsigned int **)(*((_QWORD *)v51 + 18) + 152);
          v56 = v55 + 6;
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (!v58)
          {
            atomic_store(1u, v55 + 6);
            WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v55, v54);
            bmalloc::api::isoDeallocate(v59, v60);
          }
        }
        else
        {
          v13 = this[11];
          if (v13)
            ++*((_DWORD *)v13 + 2);
          v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v14 = &off_1E3358428;
          v14[1] = v13;
          v86[0] = v14;
          WebCore::IDBObjectStore::doOpenCursor((uint64_t)v8, 0, (uint64_t)v86, (uint64_t)&v89);
          (*(void (**)(_QWORD *))(*v14 + 8))(v14);
          v15 = 0;
          if ((_DWORD)v91 != -1)
          {
            if (!(_DWORD)v91)
            {
              v15 = (unsigned int *)v89;
              v89 = 0;
            }
            ((void (*)(_QWORD *, WTF::StringImpl **))off_1E33F0838[v91])(v86, &v89);
          }
        }
        if (v15)
        {
          v82 = v8;
          v16 = this[5];
          if (v16)
            *(_DWORD *)v16 += 2;
          v18 = this[6];
          v17 = this[7];
          v83[1] = v16;
          v83[2] = v18;
          v84 = 0;
          if (v17)
          {
            v19 = *(JSC::HandleSet **)((((unint64_t)v17 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v20 = (_QWORD *)*((_QWORD *)v19 + 5);
            if (!v20)
            {
              JSC::HandleSet::grow(v19);
              v20 = (_QWORD *)*((_QWORD *)v19 + 5);
            }
            *((_QWORD *)v19 + 5) = *v20;
            v20[2] = 0;
            v21 = (Inspector::BackendDispatcher::CallbackBase **)(v20 + 2);
            *v20 = 0;
            v20[1] = 0;
            v84 = v20 + 2;
            v22 = this[7];
            if (v22)
            {
              v22 = *(Inspector::BackendDispatcher::CallbackBase **)v22;
              if (v22)
              {
                v72 = *(Inspector::BackendDispatcher::CallbackBase **)(((unint64_t)(v21 - 2) & 0xFFFFFFFFFFFFF000)
                                                                     + 0x10);
                v73 = (Inspector::BackendDispatcher::CallbackBase *)*((_QWORD *)v72 + 3);
                v72 = (Inspector::BackendDispatcher::CallbackBase *)((char *)v72 + 24);
                *(v21 - 2) = v73;
                *(v21 - 1) = v72;
                *(_QWORD *)v72 = v21 - 2;
                *((_QWORD *)v73 + 1) = v21 - 2;
              }
            }
            *v21 = v22;
          }
          else
          {
            v21 = 0;
          }
          v23 = this[8];
          v85 = v23;
          v83[0] = MEMORY[0x1E0CC10D8] + 16;
          v24 = this[3];
          ++*((_DWORD *)v24 + 2);
          v25 = this[12];
          v26 = WTF::fastMalloc((WTF *)0x58);
          if (v16)
            *(_DWORD *)v16 += 2;
          v90 = v16;
          v91 = v18;
          v92 = 0;
          if (v21)
          {
            v27 = *(_QWORD *)(((unint64_t)(v21 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v28 = *(_QWORD **)(v27 + 40);
            if (!v28)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v21 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
              v28 = *(_QWORD **)(v27 + 40);
            }
            *(_QWORD *)(v27 + 40) = *v28;
            v28[2] = 0;
            v29 = (Inspector::BackendDispatcher::CallbackBase **)(v28 + 2);
            *v28 = 0;
            v28[1] = 0;
            v92 = v28 + 2;
            v30 = *v21;
            if (*v21)
            {
              v74 = *(Inspector::BackendDispatcher::CallbackBase **)(((unint64_t)(v29 - 2) & 0xFFFFFFFFFFFFF000)
                                                                   + 0x10);
              v75 = (Inspector::BackendDispatcher::CallbackBase *)*((_QWORD *)v74 + 3);
              v74 = (Inspector::BackendDispatcher::CallbackBase *)((char *)v74 + 24);
              *(v29 - 2) = v75;
              *(v29 - 1) = v74;
              *(_QWORD *)v74 = v29 - 2;
              *((_QWORD *)v75 + 1) = v29 - 2;
            }
            *v29 = v30;
          }
          else
          {
            v29 = 0;
          }
          v31 = MEMORY[0x1E0CC10D8];
          v93 = v23;
          v89 = (WTF::StringImpl *)(MEMORY[0x1E0CC10D8] + 16);
          *(_DWORD *)(v26 + 16) = 1;
          *(_BYTE *)(v26 + 20) = 3;
          *(_QWORD *)v26 = off_1E33F0858;
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v26 + 24) = MEMORY[0x1E0CC10E0] + 16;
          if (v16)
            *(_DWORD *)v16 += 2;
          *(_QWORD *)(v26 + 32) = v16;
          *(_QWORD *)(v26 + 40) = v18;
          *(_QWORD *)(v26 + 48) = 0;
          v8 = v82;
          if (v29)
          {
            v32 = *(_QWORD *)(((unint64_t)(v29 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v33 = *(_QWORD *)(v32 + 40);
            if (!v33)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v29 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
              v33 = *(_QWORD *)(v32 + 40);
            }
            *(_QWORD *)(v32 + 40) = *(_QWORD *)v33;
            *(_QWORD *)(v33 + 16) = 0;
            v34 = (Inspector::BackendDispatcher::CallbackBase **)(v33 + 16);
            *(_QWORD *)v33 = 0;
            *(_QWORD *)(v33 + 8) = 0;
            *(_QWORD *)(v26 + 48) = v33 + 16;
            v35 = *v29;
            if ((*v29 != 0) != (*(_QWORD *)(v33 + 16) != 0))
            {
              if (v35)
              {
                v36 = *(unint64_t **)((v33 & 0xFFFFFFFFFFFFF000) + 0x10);
                v37 = v36[3];
                v36 += 3;
                *(_QWORD *)v33 = v37;
                *(_QWORD *)(v33 + 8) = v36;
                *v36 = v33;
                *(_QWORD *)(v37 + 8) = v33;
              }
              else
              {
                v81 = *(_QWORD *)v33;
                v80 = *(_QWORD **)(v33 + 8);
                *v80 = *(_QWORD *)v33;
                *(_QWORD *)(v81 + 8) = v80;
                *(_QWORD *)v33 = 0;
                *(_QWORD *)(v33 + 8) = 0;
                v34 = *(Inspector::BackendDispatcher::CallbackBase ***)(v26 + 48);
              }
            }
            *v34 = v35;
          }
          *(_QWORD *)(v26 + 24) = v31 + 16;
          *(_QWORD *)(v26 + 56) = v23;
          *(_QWORD *)(v26 + 64) = v24;
          v38 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)(v26 + 72) = WTF::JSONImpl::ArrayBase::ArrayBase(v38);
          *(_QWORD *)(v26 + 80) = v25;
          Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)&v89);
          Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)v83);
          v40 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v40 || (v41 = *(_QWORD *)(v40 + 96)) == 0)
            v41 = WebCore::threadGlobalDataSlow(v39);
          v42 = *(_QWORD *)(v41 + 40);
          if (!v42)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v41);
            v42 = *(_QWORD *)(v41 + 40);
          }
          v86[0] = v26;
          LOBYTE(v89) = 0;
          *(_WORD *)((char *)&v89 + 1) = 0;
          BYTE3(v89) = 0;
          v90 = 0;
          (*(void (**)(unsigned int *, uint64_t, _QWORD *, WTF::StringImpl **))(*(_QWORD *)v15 + 24))(v15, v42 + 2016, v86, &v89);
          v44 = v90;
          v90 = 0;
          if (v44)
          {
            if (*((_DWORD *)v44 + 6) == 1)
            {
              WebCore::AbortSignal::~AbortSignal(v44, v43);
              bmalloc::api::isoDeallocate(v70, v71);
            }
            else
            {
              --*((_DWORD *)v44 + 6);
            }
          }
          v45 = (_DWORD *)v86[0];
          v86[0] = 0;
          if (v45)
          {
            if (v45[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
            else
              --v45[4];
          }
          v46 = v15 + 15;
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            atomic_store(1u, v15 + 15);
            (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 72))(v15);
          }
          goto LABEL_96;
        }
        v50 = this[3];
LABEL_93:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        Inspector::BackendDispatcher::CallbackBase::sendFailure(v50, (const WTF::String *)&v89);
        v61 = v89;
        v89 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, v43);
          else
            *(_DWORD *)v61 -= 2;
        }
LABEL_96:
        if (*((_BYTE *)v6 + 136) != 1)
        {
          if (*((_BYTE *)v6 + 136))
          {
LABEL_104:
            result = (unsigned int *)*((_QWORD *)v8 + 19);
            v64 = result + 6;
            do
            {
              v65 = __ldaxr(v64);
              v66 = v65 - 1;
            }
            while (__stlxr(v66, v64));
            if (!v66)
            {
              atomic_store(1u, result + 6);
              WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v43);
              result = (unsigned int *)bmalloc::api::isoDeallocate(v78, v79);
            }
LABEL_108:
            v67 = (unsigned int *)((char *)v6 + 24);
            do
            {
              v68 = __ldaxr(v67);
              v69 = v68 - 1;
            }
            while (__stlxr(v69, v67));
            if (!v69)
            {
              atomic_store(1u, (unsigned int *)v6 + 6);
              WebCore::IDBTransaction::~IDBTransaction(v6, v43);
              return (unsigned int *)bmalloc::api::isoDeallocate(v76, v77);
            }
            return result;
          }
          *((_BYTE *)v6 + 136) = 1;
        }
        if (*((_BYTE *)v6 + 137))
        {
          v62 = *((_QWORD *)v6 + 37);
          if (!v62 || !*(_DWORD *)(v62 - 12))
          {
            v63 = *((_QWORD *)v6 + 41);
            if (!v63 || !*(_DWORD *)(v63 - 12))
              WebCore::IDBTransaction::commitInternal(v6);
          }
        }
        goto LABEL_104;
      }
    }
    v9 = this[3];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v9, (const WTF::String *)&v89);
    result = (unsigned int *)v89;
    v89 = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::`anonymous namespace'::DataLoader::requestCallback(WebCore::_anonymous_namespace_::DataLoader *this)
{
  return *((_QWORD *)this + 3);
}

void WebCore::`anonymous namespace'::OpenCursorCallback::~OpenCursorCallback(WebCore::_anonymous_namespace_::OpenCursorCallback *this)
{
  _DWORD *v2;
  _DWORD *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
  {
    if (*v2 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v2;
  }
  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  Inspector::InjectedScript::~InjectedScript((WebCore::_anonymous_namespace_::OpenCursorCallback *)((char *)this + 24));
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  _DWORD *v2;
  _DWORD *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
  {
    if (*v2 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v2;
  }
  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  Inspector::InjectedScript::~InjectedScript((WebCore::_anonymous_namespace_::OpenCursorCallback *)((char *)this + 24));
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, v4);
}

WTF::StringImpl *WebCore::`anonymous namespace'::OpenCursorCallback::handleEvent(Inspector::BackendDispatcher::CallbackBase **this, WebCore::ScriptExecutionContext *a2, WebCore::Event *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Inspector::BackendDispatcher::CallbackBase *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  uint64_t v13;
  Inspector::BackendDispatcher::CallbackBase *v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  Inspector::BackendDispatcher::CallbackBase *v21;
  WTF::StringImpl *v22;
  char *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  Inspector::BackendDispatcher::CallbackBase *v27;
  WTF::StringImpl *v28;
  WebCore *v29;
  WebCore::IDBKey *v30;
  WTF::StringImpl *v31;
  WebCore::IDBKey *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  const WebCore::IDBValue *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::JSONImpl::Object *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  int v69;
  void *v70;
  void *v71;
  WTF::StringImpl **v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  _DWORD **v75;
  uint64_t v76;
  _DWORD *v77;
  _DWORD **v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD **v81;
  uint64_t v82;
  _DWORD *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  char v86;
  int v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  unsigned __int8 v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  _BYTE v96[160];
  int v97;
  int v98;
  _QWORD v99[20];
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow((WebCore *)this);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  if (*((_QWORD *)a3 + 3) != *(_QWORD *)(v8 + 2016))
  {
    v9 = this[8];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v9, (const WTF::String *)&v95);
    result = v95;
    v95 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v12 = *((_QWORD *)a3 + 6);
  if (*(_DWORD *)(v12 + 352) != 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v96[0] = 8;
    v98 = 1;
    goto LABEL_16;
  }
  LOBYTE(v99[0]) = 0;
  v100 = -1;
  v13 = *(unsigned int *)(v12 + 304);
  if ((_DWORD)v13 == -1)
  {
    v96[0] = 0;
    v97 = -1;
    v98 = 0;
    goto LABEL_20;
  }
  ((void (*)(WTF::StringImpl **, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JS10_SZ_EEEDcmS12_DpOT0____fdiagonal[v13])(&v95, v99, v12 + 144);
  v100 = v13;
  v96[0] = 0;
  v97 = -1;
  ((void (*)(WTF::StringImpl **, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v13])(&v84, v96, v99);
  v97 = v13;
  v98 = 0;
  if (v100 != -1)
  {
    ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v100])(&v84, v99);
    if (v98)
    {
LABEL_16:
      v14 = this[8];
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v14, (const WTF::String *)v99);
      result = (WTF::StringImpl *)v99[0];
      v99[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        else
          *(_DWORD *)result -= 2;
      }
      goto LABEL_41;
    }
  }
LABEL_20:
  LOBYTE(v99[0]) = 0;
  v100 = -1;
  v16 = v97;
  if (v97 == -1
    || (((void (*)(WTF::StringImpl **, _QWORD *, _BYTE *))off_1E33F0778[v97])(&v84, v99, v96),
        (v100 = v16) != 0))
  {
    result = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::isActive(this[8]);
    if ((_DWORD)result)
      result = (WTF::StringImpl *)Inspector::IndexedDBBackendDispatcherHandler::RequestDataCallback::sendSuccess();
    goto LABEL_39;
  }
  v17 = v99[0];
  if (v99[0])
    ++*(_DWORD *)(v99[0] + 16);
  v18 = *((_DWORD *)this + 20);
  if (v18)
  {
    result = (WTF::StringImpl *)WebCore::IDBCursor::advance((unsigned int *)v17, v18, (uint64_t)&v84);
    if (v86)
    {
      v20 = v85;
      v85 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = this[8];
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v21, (const WTF::String *)&v84);
      result = v84;
      v84 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
        else
          *(_DWORD *)result -= 2;
      }
    }
    *((_DWORD *)this + 20) = 0;
    goto LABEL_36;
  }
  v23 = (char *)(this + 9);
  if (*((_DWORD *)this[9] + 7) == *((_DWORD *)this + 21))
  {
    result = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::isActive(this[8]);
    if ((_DWORD)result)
      result = (WTF::StringImpl *)Inspector::IndexedDBBackendDispatcherHandler::RequestDataCallback::sendSuccess();
    goto LABEL_36;
  }
  WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)&v84, 0);
  WebCore::IDBCursor::continueFunction(v17, (const WebCore::IDBKeyData *)&v84, (uint64_t)&v91);
  v25 = v93;
  if (v93)
  {
    v26 = v92;
    v92 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v24);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  if (v87 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33F0730[v87])(&v94, &v85);
  if (v25)
  {
    v27 = this[8];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v27, (const WTF::String *)&v84);
    result = v84;
    v84 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
      else
        *(_DWORD *)result -= 2;
    }
LABEL_36:
    if (!v17)
      goto LABEL_39;
    goto LABEL_37;
  }
  v29 = (WebCore *)WebCore::ScriptExecutionContext::globalObject(a2);
  WebCore::toJS(v29, (unint64_t)v29, *(JSC::JSGlobalObject **)(v17 + 184), v30);
  v84 = 0;
  Inspector::InjectedScript::wrapObject();
  result = v84;
  v84 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
    else
      *(_DWORD *)result -= 2;
  }
  if (v90)
  {
    WebCore::toJS(v29, (unint64_t)v29, *(JSC::JSGlobalObject **)(v17 + 192), v32);
    v84 = 0;
    Inspector::InjectedScript::wrapObject();
    v34 = v84;
    v84 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v33);
      else
        *(_DWORD *)v34 -= 2;
    }
    if (v89)
    {
      WebCore::IDBCursor::value(v17, (uint64_t)&v84);
      WebCore::deserializeIDBValueToJSValue(v29, v29, (JSC::JSGlobalObject *)&v84, v35);
      v91 = 0;
      Inspector::InjectedScript::wrapObject();
      v37 = v91;
      v91 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v36);
        else
          *(_DWORD *)v37 -= 2;
      }
      WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v84, v36);
      if (v88)
      {
        WTF::JSONImpl::Object::create(v38);
        v39 = v84;
        v40 = v90;
        v90 = 0;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v94 = v40;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v39 + 2, &v91, (const WTF::StringImpl *)&v94, (uint64_t)&v84);
        if (v86)
        {
          v42 = (uint64_t *)((char *)v39 + 24);
          v43 = *((unsigned int *)v39 + 9);
          if ((_DWORD)v43 == *((_DWORD *)v39 + 8))
          {
            v75 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v91);
            v43 = *((unsigned int *)v39 + 9);
            v76 = *((_QWORD *)v39 + 3);
            v77 = *v75;
            if (*v75)
              *v77 += 2;
            *(_QWORD *)(v76 + 8 * v43) = v77;
          }
          else
          {
            v44 = *v42;
            v45 = v91;
            if (v91)
              *(_DWORD *)v91 += 2;
            *(_QWORD *)(v44 + 8 * v43) = v45;
          }
          *((_DWORD *)v39 + 9) = v43 + 1;
        }
        v46 = v94;
        v94 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v46;
        }
        v47 = v91;
        v91 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v41);
          else
            *(_DWORD *)v47 -= 2;
        }
        v48 = v89;
        v89 = 0;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v94 = v48;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v39 + 2, &v91, (const WTF::StringImpl *)&v94, (uint64_t)&v84);
        if (v86)
        {
          v50 = (uint64_t *)((char *)v39 + 24);
          v51 = *((unsigned int *)v39 + 9);
          if ((_DWORD)v51 == *((_DWORD *)v39 + 8))
          {
            v78 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)&v91);
            v51 = *((unsigned int *)v39 + 9);
            v79 = *((_QWORD *)v39 + 3);
            v80 = *v78;
            if (*v78)
              *v80 += 2;
            *(_QWORD *)(v79 + 8 * v51) = v80;
          }
          else
          {
            v52 = *v50;
            v53 = v91;
            if (v91)
              *(_DWORD *)v91 += 2;
            *(_QWORD *)(v52 + 8 * v51) = v53;
          }
          *((_DWORD *)v39 + 9) = v51 + 1;
        }
        v54 = v94;
        v94 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v54;
        }
        v55 = v91;
        v91 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v49);
          else
            *(_DWORD *)v55 -= 2;
        }
        v56 = v88;
        v88 = 0;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v94 = v56;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v39 + 2, &v91, (const WTF::StringImpl *)&v94, (uint64_t)&v84);
        if (v86)
        {
          v58 = (uint64_t *)((char *)v39 + 24);
          v59 = *((unsigned int *)v39 + 9);
          if ((_DWORD)v59 == *((_DWORD *)v39 + 8))
          {
            v81 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v58, v59 + 1, (unint64_t)&v91);
            v59 = *((unsigned int *)v39 + 9);
            v82 = *((_QWORD *)v39 + 3);
            v83 = *v81;
            if (*v81)
              *v83 += 2;
            *(_QWORD *)(v82 + 8 * v59) = v83;
          }
          else
          {
            v60 = *v58;
            v61 = v91;
            if (v91)
              *(_DWORD *)v91 += 2;
            *(_QWORD *)(v60 + 8 * v59) = v61;
          }
          *((_DWORD *)v39 + 9) = v59 + 1;
        }
        v62 = v94;
        v94 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v62;
        }
        result = v91;
        v91 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v57);
          else
            *(_DWORD *)result -= 2;
        }
        v63 = *(_QWORD *)v23;
        v64 = *(unsigned int *)(*(_QWORD *)v23 + 28);
        if ((_DWORD)v64 == *(_DWORD *)(*(_QWORD *)v23 + 24))
        {
          v65 = v64 + (v64 >> 2);
          if (v65 >= 0x10)
            v66 = v65 + 1;
          else
            v66 = 16;
          if (v66 <= v64 + 1)
            v67 = v64 + 1;
          else
            v67 = v66;
          if (v67 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v68 = *(void **)(v63 + 16);
          v69 = v67;
          v70 = (void *)WTF::fastMalloc((WTF *)(8 * v67));
          *(_DWORD *)(v63 + 24) = v69;
          *(_QWORD *)(v63 + 16) = v70;
          memcpy(v70, v68, 8 * v64);
          if (v68)
          {
            if (*(void **)(v63 + 16) == v68)
            {
              *(_QWORD *)(v63 + 16) = 0;
              *(_DWORD *)(v63 + 24) = 0;
            }
            WTF::fastFree((WTF *)v68, v71);
          }
          v64 = *(unsigned int *)(v63 + 28);
          v72 = (WTF::StringImpl **)(*(_QWORD *)(v63 + 16) + 8 * v64);
        }
        else
        {
          v72 = (WTF::StringImpl **)(*(_QWORD *)(v63 + 16) + 8 * v64);
        }
        *v72 = v39;
        *(_DWORD *)(v63 + 28) = v64 + 1;
        v73 = v88;
        v88 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v73;
        }
      }
      v74 = v89;
      v89 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v74;
      }
    }
    result = v90;
    v90 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
LABEL_37:
  if (*(_DWORD *)(v17 + 16) == 1)
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  else
    --*(_DWORD *)(v17 + 16);
LABEL_39:
  if (v100 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E33F06F0[v100])(&v84, v99);
LABEL_41:
  if (v98 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E33F07B8[v98])(v99, v96);
  return result;
}

void WebCore::`anonymous namespace'::ClearObjectStore::~ClearObjectStore(WebCore::_anonymous_namespace_::ClearObjectStore *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

unsigned int *WebCore::`anonymous namespace'::ClearObjectStore::execute(Inspector::BackendDispatcher::CallbackBase **this, WebCore::IDBDatabase *a2)
{
  unsigned int *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher::CallbackBase *v9;
  WTF::StringImpl *v10;
  char v11;
  Inspector::BackendDispatcher::CallbackBase *v12;
  WTF::StringImpl *v13;
  WebCore::IDBTransaction *v14;
  Inspector::BackendDispatcher::CallbackBase *v15;
  Inspector::BackendDispatcher::CallbackBase *v16;
  char *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  int v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _WORD *v30;
  int8x16_t *v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  Inspector::BackendDispatcher::CallbackBase *v46;
  uint64_t v47;
  WebCore::AbortSignal *v48;
  _DWORD *v49;
  bmalloc::api *v50;
  void *v51;
  __int128 v52;
  char *v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int16 v60;
  uint64_t v61;
  _WORD *v62;
  _WORD *v63;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  bmalloc::api *v74;
  void *v75;
  bmalloc::api *v76;
  void *v77;
  unsigned __int128 *v78;
  unsigned __int128 *v79;
  unsigned __int128 v80;
  char v81;
  _DWORD *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  WebCore::AbortSignal *v87;
  int v88;
  uint64_t v89;
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;

  v89 = *MEMORY[0x1E0C80C00];
  result = (unsigned int *)Inspector::BackendDispatcher::CallbackBase::isActive(this[4]);
  if ((_DWORD)result)
  {
    v5 = this[3];
    if (v5)
      *(_DWORD *)v5 += 2;
    v86 = v5;
    v88 = 0;
    WebCore::IDBDatabase::transaction((uint64_t)a2, (uint64_t)&v86, 1u, 0, (uint64_t)&v83);
    if (v88 != -1)
      ((void (*)(_DWORD **, WTF::StringImpl **))off_1E33F0678[v88])(&v82, &v86);
    if (v85 != -1)
    {
      if (v85)
      {
        v6 = 0;
      }
      else
      {
        v6 = v83;
        v83 = 0;
      }
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33F0808[v85])(&v86, &v83);
      if (v6)
      {
        WebCore::IDBTransaction::objectStore((uint64_t)v6, this + 3, v7, (uint64_t)&v83);
        if (v85 == -1
          || (v85 ? (v8 = 0) : (v8 = v83, v83 = 0),
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33F0818[v85])(&v86, &v83),
              !v8))
        {
          v12 = this[4];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v12, (const WTF::String *)&v83);
          result = (unsigned int *)v83;
          v83 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
            else
              *result -= 2;
          }
          goto LABEL_119;
        }
        if (*((unsigned __int8 *)v6 + 136) - 2 >= 3)
          *((_BYTE *)v6 + 136) = 0;
        if (*((_BYTE *)v8 + 160))
        {
          result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          v11 = 8;
        }
        else
        {
          v14 = (WebCore::IDBTransaction *)*((_QWORD *)v8 + 19);
          if (*((_BYTE *)v14 + 136))
          {
            result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            v11 = 27;
          }
          else
          {
            if (*((_BYTE *)v14 + 96))
            {
              v41 = WebCore::IDBTransaction::requestClearObjectStore(v14, v8, &v83);
              v85 = 0;
              v42 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v42 || (v43 = *(_QWORD *)(v42 + 96)) == 0)
                v43 = WebCore::threadGlobalDataSlow((WebCore *)v41);
              v44 = *(_QWORD *)(v43 + 40);
              if (!v44)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v43);
                v44 = *(_QWORD *)(v43 + 40);
              }
              v45 = (WTF::StringImpl **)(v44 + 424);
              v46 = this[4];
              ++*((_DWORD *)v46 + 2);
              v47 = WTF::fastMalloc((WTF *)0x20);
              *(_DWORD *)(v47 + 16) = 1;
              *(_BYTE *)(v47 + 20) = 3;
              *(_QWORD *)v47 = off_1E33F08E0;
              *(_QWORD *)(v47 + 8) = 0;
              *(_QWORD *)(v47 + 24) = v46;
              v82 = (_DWORD *)v47;
              LOBYTE(v86) = 0;
              *(_WORD *)((char *)&v86 + 1) = 0;
              BYTE3(v86) = 0;
              v87 = 0;
              WebCore::EventTarget::addEventListener(v6, v45, (uint64_t *)&v82, (unsigned __int8 *)&v86);
              v48 = v87;
              v87 = 0;
              if (v48)
              {
                if (*((_DWORD *)v48 + 6) == 1)
                {
                  WebCore::AbortSignal::~AbortSignal(v48, v13);
                  bmalloc::api::isoDeallocate(v50, v51);
                }
                else
                {
                  --*((_DWORD *)v48 + 6);
                }
              }
              v49 = v82;
              v82 = 0;
              if (v49)
              {
                if (v49[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
                else
                  --v49[4];
              }
LABEL_105:
              if (v85 != -1)
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33F0838[v85])(&v86, &v83);
              if (*((_BYTE *)v6 + 136) != 1)
              {
                if (*((_BYTE *)v6 + 136))
                {
LABEL_115:
                  result = (unsigned int *)*((_QWORD *)v8 + 19);
                  v68 = result + 6;
                  do
                  {
                    v69 = __ldaxr(v68);
                    v70 = v69 - 1;
                  }
                  while (__stlxr(v70, v68));
                  if (!v70)
                  {
                    atomic_store(1u, result + 6);
                    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v13);
                    result = (unsigned int *)bmalloc::api::isoDeallocate(v76, v77);
                  }
LABEL_119:
                  v71 = (unsigned int *)((char *)v6 + 24);
                  do
                  {
                    v72 = __ldaxr(v71);
                    v73 = v72 - 1;
                  }
                  while (__stlxr(v73, v71));
                  if (!v73)
                  {
                    atomic_store(1u, (unsigned int *)v6 + 6);
                    WebCore::IDBTransaction::~IDBTransaction(v6, v13);
                    return (unsigned int *)bmalloc::api::isoDeallocate(v74, v75);
                  }
                  return result;
                }
                *((_BYTE *)v6 + 136) = 1;
              }
              if (*((_BYTE *)v6 + 137))
              {
                v66 = *((_QWORD *)v6 + 37);
                if (!v66 || !*(_DWORD *)(v66 - 12))
                {
                  v67 = *((_QWORD *)v6 + 41);
                  if (!v67 || !*(_DWORD *)(v67 - 12))
                    WebCore::IDBTransaction::commitInternal(v6);
                }
              }
              goto LABEL_115;
            }
            result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            v11 = 28;
          }
        }
        LOBYTE(v83) = v11;
        v85 = 1;
        v17 = (char *)(this + 3);
        v15 = this[3];
        v16 = (Inspector::BackendDispatcher::CallbackBase *)*((_QWORD *)v17 + 1);
        if (v15)
        {
          *(_DWORD *)v15 += 2;
          v18 = v83;
          v19 = v84;
          v84 = 0;
          v20 = *((_DWORD *)v15 + 1);
        }
        else
        {
          v20 = 0;
          v18 = v83;
          v19 = v84;
          v84 = 0;
        }
        v21 = 0;
        v22 = v18;
        do
        {
          ++v21;
          v23 = v22 > 9;
          v22 /= 0xAu;
        }
        while (v23);
        if (v21 < 0)
          goto LABEL_139;
        v24 = __OFADD__(v21, 3);
        v25 = v21 + 3;
        v26 = v24;
        if (v20 < 0)
          goto LABEL_139;
        if (v26)
          goto LABEL_139;
        v24 = __OFADD__(v20, v25);
        v27 = v20 + v25;
        if (v24)
          goto LABEL_139;
        v28 = (v27 + 30);
        if (__OFADD__(v27, 30))
          goto LABEL_139;
        if (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0)
        {
          if (v27 != -30)
          {
            if ((v28 & 0x80000000) == 0)
            {
              result = (unsigned int *)WTF::tryFastCompactMalloc((WTF *)(v28 + 20));
              v29 = v86;
              if (v86)
              {
                *(_DWORD *)v86 = 2;
                *((_DWORD *)v29 + 1) = v28;
                *((_QWORD *)v29 + 1) = (char *)v29 + 20;
                *((_DWORD *)v29 + 4) = 4;
                qmemcpy((char *)v29 + 20, "Could not clear object store '", 30);
                v33 = (char *)v29 + 50;
                if (v15)
                {
                  v34 = (_BYTE *)*((_QWORD *)v15 + 1);
                  v35 = *((unsigned int *)v15 + 1);
                  if ((*((_BYTE *)v15 + 16) & 4) != 0)
                  {
                    if ((_DWORD)v35)
                    {
                      if ((_DWORD)v35 == 1)
                        *v33 = *v34;
                      else
                        memcpy((char *)v29 + 50, v34, v35);
                    }
                  }
                  else
                  {
                    if (v35 < 0x10)
                    {
                      v78 = (unsigned __int128 *)((char *)v29 + 50);
                    }
                    else
                    {
                      v78 = (unsigned __int128 *)&v33[v35 & 0xFFFFFFF0];
                      v79 = (unsigned __int128 *)((char *)v29 + 50);
                      do
                      {
                        v80 = (unsigned __int128)vld2q_s8(v34);
                        v34 += 32;
                        *v79++ = v80;
                      }
                      while (v79 != v78);
                    }
                    while (v78 != (unsigned __int128 *)&v33[v35])
                    {
                      v81 = *v34;
                      v34 += 2;
                      *(_BYTE *)v78 = v81;
                      v78 = (unsigned __int128 *)((char *)v78 + 1);
                    }
                  }
                  v36 = *((unsigned int *)v15 + 1);
                }
                else
                {
                  v36 = 0;
                }
                v37 = 0;
                v38 = &v33[v36];
                v38[2] = 32;
                *(_WORD *)v38 = 14887;
                do
                {
                  *((_BYTE *)&v87 + v37-- + 4) = (v18 % 0xA) | 0x30;
                  v23 = v18 > 9;
                  v18 /= 0xAu;
                }
                while (v23);
                if (v37 + 14 <= 13)
                  memcpy(v38 + 3, (char *)&v87 + v37 + 5, -v37);
LABEL_96:
                v86 = v29;
                Inspector::BackendDispatcher::CallbackBase::sendFailure(v16, (const WTF::String *)&v86);
                v65 = v86;
                v86 = 0;
                if (v65)
                {
                  if (*(_DWORD *)v65 == 2)
                  {
                    WTF::StringImpl::destroy(v65, v13);
                    if (!v19)
                      goto LABEL_102;
                    goto LABEL_100;
                  }
                  *(_DWORD *)v65 -= 2;
                }
                if (!v19)
                  goto LABEL_102;
LABEL_100:
                if (*(_DWORD *)v19 == 2)
                  WTF::StringImpl::destroy(v19, v13);
                else
                  *(_DWORD *)v19 -= 2;
LABEL_102:
                if (v15)
                {
                  if (*(_DWORD *)v15 == 2)
                    WTF::StringImpl::destroy(v15, v13);
                  else
                    *(_DWORD *)v15 -= 2;
                }
                goto LABEL_105;
              }
            }
LABEL_139:
            __break(0xC471u);
            return result;
          }
        }
        else if (v27 != -30)
        {
          if (v28 <= 0x7FFFFFEF)
          {
            result = (unsigned int *)WTF::tryFastCompactMalloc((WTF *)(2 * v28 + 20));
            v29 = v86;
            if (v86)
            {
              *(_OWORD *)((char *)v86 + 20) = xmmword_1969F2300;
              *(_DWORD *)v29 = 2;
              *((_DWORD *)v29 + 1) = v28;
              *((_QWORD *)v29 + 1) = (char *)v29 + 20;
              *((_DWORD *)v29 + 4) = 0;
              v30 = (_WORD *)((char *)v29 + 80);
              *(_OWORD *)((char *)v29 + 36) = xmmword_1969F2310;
              *(_OWORD *)((char *)v29 + 52) = xmmword_1969F2320;
              *(_QWORD *)((char *)v29 + 68) = 0x650072006F0074;
              *((_DWORD *)v29 + 19) = 2555936;
              v31 = (int8x16_t *)*((_QWORD *)v15 + 1);
              v32 = *((unsigned int *)v15 + 1);
              if ((*((_BYTE *)v15 + 16) & 4) != 0)
              {
                v39 = (char *)&v30[v32];
                if (v32 >= 0x40)
                {
                  v40 = (char *)&v30[v32 & 0xFFFFFFC0];
                  v52 = 0uLL;
                  v53 = (char *)v29 + 80;
                  do
                  {
                    v90.val[0] = *v31;
                    v54 = v31[1];
                    v91.val[0] = v31[2];
                    v55 = v31[3];
                    v31 += 4;
                    v56 = v55;
                    v91.val[1] = 0uLL;
                    v92.val[0] = v54;
                    v90.val[1] = 0uLL;
                    v57 = v53;
                    vst2q_s8(v57, v90);
                    v57 += 32;
                    v92.val[1] = 0uLL;
                    vst2q_s8(v57, v92);
                    v58 = v53 + 64;
                    vst2q_s8(v58, v91);
                    v59 = v53 + 96;
                    vst2q_s8(v59, *(int8x16x2_t *)(&v52 - 1));
                    v53 += 128;
                  }
                  while (v53 != v40);
                }
                else
                {
                  v40 = (char *)v29 + 80;
                }
                while (v40 != v39)
                {
                  v60 = v31->u8[0];
                  v31 = (int8x16_t *)((char *)v31 + 1);
                  *(_WORD *)v40 = v60;
                  v40 += 2;
                }
              }
              else if ((_DWORD)v32 == 1)
              {
                *v30 = v31->i16[0];
              }
              else if ((_DWORD)v32)
              {
                memcpy((char *)v29 + 80, v31, 2 * v32);
              }
              v61 = 0;
              v62 = &v30[*((unsigned int *)v15 + 1)];
              *(_DWORD *)v62 = 3801127;
              v62[2] = 32;
              do
              {
                *((_BYTE *)&v87 + v61-- + 4) = (v18 % 0xA) | 0x30;
                v23 = v18 > 9;
                v18 /= 0xAu;
              }
              while (v23);
              if (v61 + 14 <= 13)
              {
                v63 = v62 + 3;
                do
                  *v63++ = *((unsigned __int8 *)&v87 + v61 + 5);
                while (!__CFADD__(v61++, 1));
              }
              goto LABEL_96;
            }
          }
          goto LABEL_139;
        }
        v29 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        goto LABEL_96;
      }
    }
    v9 = this[4];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v9, (const WTF::String *)&v83);
    result = (unsigned int *)v83;
    v83 = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::`anonymous namespace'::ClearObjectStore::requestCallback(WebCore::_anonymous_namespace_::ClearObjectStore *this)
{
  return *((_QWORD *)this + 4);
}

void WebCore::`anonymous namespace'::ClearObjectStoreListener::~ClearObjectStoreListener(WebCore::_anonymous_namespace_::ClearObjectStoreListener *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

WebCore *WebCore::`anonymous namespace'::ClearObjectStoreListener::handleEvent(Inspector::BackendDispatcher::CallbackBase **this, WebCore::ScriptExecutionContext *a2, WebCore::Event *a3)
{
  WebCore *result;
  uint64_t v6;
  uint64_t v7;
  Inspector::IndexedDBBackendDispatcherHandler::ClearObjectStoreCallback *v8;
  WTF::StringImpl *v9;
  WebCore *v10;
  WTF::StringImpl *v11;

  result = (WebCore *)Inspector::BackendDispatcher::CallbackBase::isActive(this[3]);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6 || (result = *(WebCore **)(v6 + 96)) == 0)
      result = (WebCore *)WebCore::threadGlobalDataSlow(result);
    v7 = *((_QWORD *)result + 5);
    if (!v7)
    {
      v10 = result;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)result);
      v7 = *((_QWORD *)v10 + 5);
    }
    v8 = this[3];
    if (*((_QWORD *)a3 + 3) == *(_QWORD *)(v7 + 424))
    {
      return (WebCore *)Inspector::IndexedDBBackendDispatcherHandler::ClearObjectStoreCallback::sendSuccess(v8);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v8, (const WTF::String *)&v11);
      result = v11;
      v11 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WebCore *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ResourceResponseBase **v4;
  WebCore::ResourceResponseBase *v5;
  uint64_t v6;
  const void *v7;
  WTF *v8;
  void *v9;
  WTF::StringImpl *v10;

  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = (WebCore::ResourceResponseBase **)((char *)this + 8);
    do
    {
      v5 = *v4;
      *v4 = 0;
      if (v5)
      {
        v6 = *((_QWORD *)v5 + 32);
        *((_QWORD *)v5 + 32) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v7 = (const void *)*((_QWORD *)v5 + 30);
        *((_QWORD *)v5 + 30) = 0;
        if (v7)
          CFRelease(v7);
        WebCore::ResourceResponseBase::~ResourceResponseBase(v5, a2);
        WTF::fastFree(v8, v9);
      }
      v10 = *(v4 - 1);
      *(v4 - 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, void *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;

  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = (WTF **)((char *)this + 8);
    do
    {
      v5 = *v4;
      *v4 = 0;
      if (v5)
      {
        v6 = *((_QWORD *)v5 + 1);
        *((_QWORD *)v5 + 1) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v7 = *(_DWORD **)v5;
        *(_QWORD *)v5 = 0;
        if (v7)
        {
          if (v7[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
          else
            --v7[4];
        }
        WTF::fastFree(v5, a2);
      }
      v8 = *(v4 - 1);
      *(v4 - 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree(this, a2);
}

void WebCore::CertificateSummary::~CertificateSummary(WebCore::CertificateSummary *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v8 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v9 = 8 * v3;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v4 = (WTF *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 9);
  if ((_DWORD)v5)
  {
    v11 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v12 = 8 * v5;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v6 = (WTF *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

uint64_t *Inspector::Protocol::Network::WebSocketFrame::Builder<0>::setOpcode(uint64_t *a1, double a2)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v5, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Network::WebSocketFrame::Builder<1>::setMask(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _BYTE v18[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v16, (const WTF::StringImpl *)&v17, (uint64_t)v18);
  if (v18[16])
  {
    v6 = (uint64_t *)(v4 + 24);
    v7 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v4 + 32))
    {
      v13 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v16);
      v7 = *(unsigned int *)(v4 + 36);
      v14 = *(_QWORD *)(v4 + 24);
      v15 = *v13;
      if (*v13)
        *v15 += 2;
      *(_QWORD *)(v14 + 8 * v7) = v15;
    }
    else
    {
      v8 = *v6;
      v9 = v16;
      if (v16)
        *(_DWORD *)v16 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(v4 + 36) = v7 + 1;
  }
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Network::WebSocketFrame::Builder<3>::setPayloadData(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Network::WebSocketFrame::Builder<7>::setPayloadLength(uint64_t *a1, double a2)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v5, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

WTF::StringImpl *WebCore::`anonymous namespace'::InspectorThreadableLoaderClient::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  char *v13;
  char *v14;
  __int16 v15;
  uint64_t v16;
  const WTF::String *v17;
  PAL *v18;
  char *v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t v22;
  WTF::StringImpl *result;
  WTF *v24;
  WebCore::HTMLMetaCharsetParser *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  __int16 v29;
  char *v30;
  __int16 v31;
  WTF::StringImpl *v32;
  char v33;
  __int128 v34;
  __int16 v35;
  const char *v36;
  char *v37;

  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  v7 = *(_DWORD **)(a4 + 40);
  if (v7)
    *v7 += 2;
  v8 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  *(_DWORD *)(a1 + 80) = *(__int16 *)(a4 + 136);
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  v9 = *(_QWORD *)(a4 + 56);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 4) | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0x100000000;
  }
  v12 = (const char *)PAL::atomCanonicalTextEncodingName(v10, (const char *)v11);
  v14 = v13;
  *(_QWORD *)&v34 = v12;
  *((_QWORD *)&v34 + 1) = v13;
  v36 = v12;
  v37 = v13;
  if (v13 && PAL::nonBackslashEncodings)
  {
    if (*(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v36))
      {
        v15 = 165;
      }
      else
      {
        v15 = 92;
      }
    }
    else
    {
      v15 = 92;
    }
    v35 = v15;
  }
  else
  {
    v35 = 92;
    if (!v13)
    {
      {
        PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
        *((_QWORD *)&xmmword_1ECE86C80 + 1) = v30;
        v36 = (const char *)xmmword_1ECE86C80;
        v37 = v30;
        if (v30 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
        {
          if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v36))
          {
            v31 = 165;
          }
          else
          {
            v31 = 92;
          }
        }
        else
        {
          v31 = 92;
        }
        word_1ECE86C90 = v31;
      }
      v34 = xmmword_1ECE86C80;
      v35 = word_1ECE86C90;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v16 = 1;
  v18 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&v32, v17);
  *(_DWORD *)(v16 + 4) = (_DWORD)v18;
  if ((_DWORD)v18 == 2)
  {
    v20 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
    {
      PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
      *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)"UTF-8", (PAL *)"UTF-8", v19);
      *((_QWORD *)&xmmword_1ECE86C80 + 1) = v19;
      v36 = (const char *)xmmword_1ECE86C80;
      v37 = v19;
      if (v19 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
      {
        if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v36))
        {
          v29 = 165;
        }
        else
        {
          v29 = 92;
        }
      }
      else
      {
        v29 = 92;
      }
      v20 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
      word_1ECE86C90 = v29;
    }
  }
  else if (*((_QWORD *)&v34 + 1))
  {
    v20 = (uint64_t *)&v33;
  }
  else
  {
    v20 = PAL::Latin1Encoding(v18);
  }
  *(_QWORD *)(v16 + 8) = &off_1E31F4A18;
  v21 = *(_OWORD *)(v20 + 1);
  *(_WORD *)(v16 + 32) = *((_WORD *)v20 + 12);
  *(_OWORD *)(v16 + 16) = v21;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_DWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 72) = 0;
  *(_QWORD *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 85) = 0;
  *(_BYTE *)(v16 + 93) = v14 == 0;
  *(_BYTE *)(v16 + 94) = 0;
  v22 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v16;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      v24 = *(WTF **)(v22 + 72);
      if (v24)
      {
        *(_QWORD *)(v22 + 72) = 0;
        *(_DWORD *)(v22 + 80) = 0;
        WTF::fastFree(v24, v19);
      }
      v25 = *(WebCore::HTMLMetaCharsetParser **)(v22 + 48);
      *(_QWORD *)(v22 + 48) = 0;
      if (v25)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v25, (WTF::StringImpl *)v19);
        WTF::fastFree(v26, v27);
      }
      v28 = *(_QWORD *)(v22 + 40);
      *(_QWORD *)(v22 + 40) = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      WTF::fastFree((WTF *)v22, v19);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
  result = v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::`anonymous namespace'::InspectorThreadableLoaderClient::didReceiveData(WTF::StringImpl *this, const WebCore::SharedBuffer *a2)
{
  size_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringBuilder *v13;
  char v14;
  WTF::StringImpl *v15;

  v2 = *((_QWORD *)a2 + 6);
  if (!v2)
    return this;
  v4 = this;
  v5 = *((_QWORD *)this + 5);
  if (*((_DWORD *)a2 + 5))
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
    v7 = *(unsigned int *)(v6 + 24);
    if ((_DWORD)v7 == -1)
    {
      v13 = (WTF::StringBuilder *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    v15 = (WTF::StringImpl *)&v14;
    v8 = (const char *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, v6 + 8);
    v2 = *((_QWORD *)a2 + 6);
  }
  else
  {
    v8 = 0;
  }
  v9 = (WTF::StringImpl **)((char *)v4 + 56);
  WebCore::TextResourceDecoder::decode(v5, v8, v2, &v15);
  if (*((_DWORD *)v4 + 18) || *((_QWORD *)v4 + 8))
  {
    if (v15 && (*((_BYTE *)v15 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    goto LABEL_15;
  }
  v11 = v15;
  if (v15)
    *(_DWORD *)v15 += 2;
  v12 = *v9;
  *v9 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v10);
      v11 = v15;
      if (!v15)
        goto LABEL_14;
      goto LABEL_13;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (v11)
LABEL_13:
    LODWORD(v11) = *((_DWORD *)v11 + 1);
LABEL_14:
  *((_DWORD *)v4 + 18) = (_DWORD)v11;
LABEL_15:
  this = v15;
  v15 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v10);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::`anonymous namespace'::InspectorThreadableLoaderClient::didFinishLoading(WTF::StringBuilder *this)
{
  WebCore::TextResourceDecoder *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  Inspector::NetworkBackendDispatcherHandler::LoadResourceCallback *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  v2 = (WebCore::TextResourceDecoder *)*((_QWORD *)this + 5);
  if (!v2)
    goto LABEL_15;
  v3 = (WTF::StringImpl **)((char *)this + 56);
  WebCore::TextResourceDecoder::flush((uint64_t *)&v15, v2);
  if (!*((_DWORD *)this + 18) && !*((_QWORD *)this + 8))
  {
    v5 = v15;
    if (v15)
      *(_DWORD *)v15 += 2;
    v6 = *v3;
    *v3 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v4);
        v5 = v15;
        if (!v15)
          goto LABEL_11;
        goto LABEL_10;
      }
      *(_DWORD *)v6 -= 2;
    }
    if (!v5)
    {
LABEL_11:
      *((_DWORD *)this + 18) = (_DWORD)v5;
      goto LABEL_12;
    }
LABEL_10:
    LODWORD(v5) = *((_DWORD *)v5 + 1);
    goto LABEL_11;
  }
  if (v15 && (*((_BYTE *)v15 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_12:
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
LABEL_15:
  v8 = (Inspector::NetworkBackendDispatcherHandler::LoadResourceCallback *)*((_QWORD *)this + 3);
  v10 = (WTF::StringImpl **)((char *)this + 56);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  if (v9
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)((char *)this + 56)),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)((char *)this + 56)),
        (v9 = *v10) != 0))
  {
    *(_DWORD *)v9 += 2;
  }
  v15 = v9;
  Inspector::NetworkBackendDispatcherHandler::LoadResourceCallback::sendSuccess(v8, (const WTF::String *)&v15, (WTF::StringBuilder *)((char *)this + 48));
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  return (*(uint64_t (**)(WTF::StringBuilder *))(*(_QWORD *)this + 64))(this);
}

uint64_t WebCore::`anonymous namespace'::InspectorThreadableLoaderClient::didFail(_QWORD *a1)
{
  Inspector::BackendDispatcher::CallbackBase *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v7[2];

  v2 = (Inspector::BackendDispatcher::CallbackBase *)a1[3];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7[0] = v7[1];
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v2, (const WTF::String *)v7);
  v4 = v7[0];
  v7[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
}

void WebCore::`anonymous namespace'::InspectorThreadableLoaderClient::~InspectorThreadableLoaderClient(WebCore::_anonymous_namespace_::InspectorThreadableLoaderClient *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  WTF *v10;
  WebCore::HTMLMetaCharsetParser *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v10 = *(WTF **)(v6 + 72);
      if (v10)
      {
        *(_QWORD *)(v6 + 72) = 0;
        *(_DWORD *)(v6 + 80) = 0;
        WTF::fastFree(v10, a2);
      }
      v11 = *(WebCore::HTMLMetaCharsetParser **)(v6 + 48);
      *(_QWORD *)(v6 + 48) = 0;
      if (v11)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v11, a2);
        WTF::fastFree(v12, v13);
      }
      v14 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      WTF::fastFree((WTF *)v6, a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v8 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;
  void *v3;

  if (atomic_load((unsigned int *)(v2 + 16)))
  {
    *(_QWORD *)(v2 + 80) = 0;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

char *WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x195E5E5B8);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12));
      v18 = 40 * v16;
      v19 = WTF::fastMalloc((WTF *)(40 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WTF::URL>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x195E5E5C0);
      }
      v10 = 40 * v9;
      v11 = WTF::fastMalloc((WTF *)(40 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WTF::URL>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WTF::URL>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *(_DWORD *)(a3 + 8) & 0xFFFFFFFE | *((_DWORD *)v5 + 2) & 1;
      *(_DWORD *)(a3 + 8) = v7;
      v8 = v7 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v5 + 2) >> 1) & 1));
      *(_DWORD *)(a3 + 8) = v8;
      v9 = v8 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v5 + 2) >> 2) & 1));
      *(_DWORD *)(a3 + 8) = v9;
      v10 = v9 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v5 + 2) >> 3) & 7));
      *(_DWORD *)(a3 + 8) = v10;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2) & 0xFFFFFFC0 | v10 & 0x3F;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)((char *)v5 + 12);
      *(_QWORD *)(a3 + 28) = *(_QWORD *)((char *)v5 + 28);
      *(_DWORD *)(a3 + 36) = *((_DWORD *)v5 + 9);
      *((_DWORD *)v5 + 2) &= ~1u;
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 40);
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

WTF::JSONImpl::Object *WTF::Detail::CallableWrapper<WebCore::InspectorTimelineAgent::internalStart(std::optional<int> &&)::$_0,void>::call(WTF::JSONImpl::Object *result)
{
  uint64_t v1;
  WTF::JSONImpl::Object *v2;

  v1 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v1 + 108))
  {
    result = (WTF::JSONImpl::Object *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 64))(*(_QWORD *)(v1 + 24));
    if ((*((_WORD *)result + 24) & 0x20) == 0 && !*(_DWORD *)(v1 + 152))
    {
      WTF::JSONImpl::Object::create(result);
      WebCore::InspectorTimelineAgent::pushCurrentRecord(v1, &v2, 7, 0, 0, 0, 0);
      result = v2;
      v2 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)result;
      }
      ++*(_DWORD *)(v1 + 152);
    }
  }
  return result;
}

_DWORD *WTF::Vector<WebCore::InspectorTimelineAgent::TimelineRecordEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (_DWORD *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x195E5E8A8);
      }
      v18 = (_DWORD *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
      v19 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::InspectorTimelineAgent::TimelineRecordEntry>::move(v5, v18, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v10 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x195E5E8B0);
      }
      v11 = WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::InspectorTimelineAgent::TimelineRecordEntry>::move(v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (_DWORD *)((char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5));
  }
  return (_DWORD *)v3;
}

_DWORD *WTF::VectorMover<false,WebCore::InspectorTimelineAgent::TimelineRecordEntry>::move(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(_DWORD **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v8;
      *(_DWORD *)(a3 + 24) = v5[6];
      v9 = (_DWORD *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v9)
      {
        if (*v9 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v9;
      }
      v10 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v10)
      {
        if (*v10 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v10;
      }
      result = *(_DWORD **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*result == 1)
          result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
        else
          --*result;
      }
      v5 += 8;
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::InspectorDatabaseResource,WTF::RawPtrTraits<WebCore::InspectorDatabaseResource>,WTF::DefaultRefDerefTraits<WebCore::InspectorDatabaseResource>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::clear(uint64_t result, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  WebCore::InspectorDatabaseResource **v4;
  WebCore::InspectorDatabaseResource *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  void *v8;

  v2 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    v3 = *(unsigned int *)(result + 8);
    *(_QWORD *)(result + 13) = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v3)
    {
      v4 = (WebCore::InspectorDatabaseResource **)((char *)v2 + 8);
      do
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::InspectorDatabaseResource::~InspectorDatabaseResource(v5, a2);
            WTF::fastFree(v7, v8);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
        v6 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::InspectorIndexedDBAgent::requestDatabaseNames(WTF::String const&,WTF::Ref<Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback,WTF::RawPtrTraits<Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback>,WTF::DefaultRefDerefTraits<Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback>> &&)::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33F09D8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InspectorIndexedDBAgent::requestDatabaseNames(WTF::String const&,WTF::Ref<Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback,WTF::RawPtrTraits<Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback>,WTF::DefaultRefDerefTraits<Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback>> &&)::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F09D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InspectorIndexedDBAgent::requestDatabaseNames(WTF::String const&,WTF::Ref<Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback,WTF::RawPtrTraits<Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback>,WTF::DefaultRefDerefTraits<Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback>> &&)::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  const WTF::String *v5;
  uint64_t v6;
  WTF::JSONImpl::Value *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;

  result = Inspector::BackendDispatcher::CallbackBase::isActive(*(Inspector::BackendDispatcher::CallbackBase **)(a1 + 8));
  if ((_DWORD)result)
  {
    v4 = WTF::fastMalloc((WTF *)0x20);
    v14 = (_DWORD *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(WTF::JSONImpl::Value **)a2;
      v8 = 8 * v6;
      do
      {
        WTF::JSONImpl::Value::create(v7, v5);
        v9 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v9 == *(_DWORD *)(v4 + 24))
        {
          v10 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v9 + 1, (unint64_t)&v15);
          v9 = *(unsigned int *)(v4 + 28);
          v11 = *(_QWORD *)(v4 + 16);
          v12 = *(_DWORD **)v10;
          *(_QWORD *)v10 = 0;
        }
        else
        {
          v11 = *(_QWORD *)(v4 + 16);
          v12 = v15;
          v15 = 0;
        }
        *(_QWORD *)(v11 + 8 * v9) = v12;
        *(_DWORD *)(v4 + 28) = v9 + 1;
        v13 = v15;
        v15 = 0;
        if (v13)
        {
          if (*v13 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v13;
        }
        v7 = (WTF::JSONImpl::Value *)((char *)v7 + 8);
        v8 -= 8;
      }
      while (v8);
    }
    Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback::sendSuccess();
    result = (uint64_t)v14;
    if (v14)
    {
      if (*v14 == 1)
        return WTF::JSONImpl::Value::operator delete();
      else
        --*v14;
    }
  }
  return result;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::PseudoElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = *((_DWORD *)v14 + 4);
          if (v22 < 0x100)
            v23 = WTF::StringImpl::hashSlowCase(v14);
          else
            v23 = v22 >> 8;
          v24 = 0;
          do
          {
            v25 = v23 & v21;
            v23 = ++v24 + v25;
          }
          while (*(_QWORD *)(v20 + 16 * v25));
          v26 = v20 + 16 * v25;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr((unsigned int *)v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, (unsigned int *)v27));
            if (!v29)
            {
              atomic_store(1u, (unsigned int *)v27);
              v39 = *(unsigned int *)(v27 + 28);
              if ((_DWORD)v39)
              {
                v48 = v27;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v39));
                v27 = v48;
              }
              v40 = *(WTF **)(v27 + 16);
              if (v40)
              {
                *(_QWORD *)(v27 + 16) = 0;
                *(_DWORD *)(v27 + 24) = 0;
                v47 = v27;
                WTF::fastFree(v40, v8);
                v27 = v47;
              }
              WTF::fastFree((WTF *)v27, v8);
            }
          }
          v30 = *(WTF::StringImpl **)v26;
          *(_QWORD *)v26 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = *v13;
          *v13 = 0;
          *(_QWORD *)v26 = v31;
          v32 = v4 + 16 * v11;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          *(_QWORD *)(v26 + 8) = v33;
          v34 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr((unsigned int *)v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, (unsigned int *)v34));
            if (!v36)
            {
              atomic_store(1u, (unsigned int *)v34);
              v41 = *(unsigned int *)(v34 + 28);
              if ((_DWORD)v41)
              {
                v46 = v34;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v34 + 16), (WTF::StringImpl *)(*(_QWORD *)(v34 + 16) + 32 * v41));
                v34 = v46;
              }
              v42 = *(WTF **)(v34 + 16);
              if (v42)
              {
                *(_QWORD *)(v34 + 16) = 0;
                *(_DWORD *)(v34 + 24) = 0;
                v44 = v34;
                WTF::fastFree(v42, v8);
                v34 = v44;
              }
              WTF::fastFree((WTF *)v34, v8);
            }
          }
          v19 = *v13;
          *v13 = 0;
          if (!v19)
            goto LABEL_36;
          if (*(_DWORD *)v19 == 2)
            goto LABEL_38;
          *(_DWORD *)v19 -= 2;
        }
        else
        {
          v15 = v4 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr((unsigned int *)v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, (unsigned int *)v16));
            if (!v18)
            {
              atomic_store(1u, (unsigned int *)v16);
              v37 = *(unsigned int *)(v16 + 28);
              if ((_DWORD)v37)
              {
                v45 = v16;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v37));
                v16 = v45;
              }
              v38 = *(WTF **)(v16 + 16);
              if (v38)
              {
                *(_QWORD *)(v16 + 16) = 0;
                *(_DWORD *)(v16 + 24) = 0;
                v43 = v16;
                WTF::fastFree(v38, v8);
                v16 = v43;
              }
              WTF::fastFree((WTF *)v16, v8);
            }
          }
          v19 = *v13;
          *v13 = 0;
          if (!v19)
            goto LABEL_36;
          if (*(_DWORD *)v19 == 2)
          {
LABEL_38:
            WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v8);
            goto LABEL_36;
          }
          *(_DWORD *)v19 -= 2;
        }
      }
LABEL_36:
      if (++v11 == v12)
        goto LABEL_57;
    }
  }
  if (v4)
LABEL_57:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

void std::__function::__func<WebCore::InspectorMemoryAgent::startTracking(void)::$_0,std::allocator<WebCore::InspectorMemoryAgent::startTracking(void)::$_0>,void ()(WebCore::ResourceUsageData const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::InspectorMemoryAgent::startTracking(void)::$_0,std::allocator<WebCore::InspectorMemoryAgent::startTracking(void)::$_0>,void ()(WebCore::ResourceUsageData const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E33F0A00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::InspectorMemoryAgent::startTracking(void)::$_0,std::allocator<WebCore::InspectorMemoryAgent::startTracking(void)::$_0>,void ()(WebCore::ResourceUsageData const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E33F0A00;
  a2[1] = v2;
  return result;
}

_DWORD *std::__function::__func<WebCore::InspectorMemoryAgent::startTracking(void)::$_0,std::allocator<WebCore::InspectorMemoryAgent::startTracking(void)::$_0>,void ()(WebCore::ResourceUsageData const&)>::operator()(WTF::JSONImpl::Object *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::JSONImpl::Object *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  void *v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  uint64_t *v60;
  uint64_t v61;
  double v62;
  WTF::JSONImpl::Value *v63;
  WTF::StringImpl *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  _DWORD *result;
  _DWORD **v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD **v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90[2];
  char v91;

  v3 = *((_QWORD *)a1 + 1);
  WTF::JSONImpl::Object::create(a1);
  Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v90, (Inspector::Protocol::Helpers *)0x52);
  v4 = Inspector::Protocol::Memory::CategoryData::Builder<1>::setSize(v90, (double)(unint64_t)(*(_QWORD *)(a2 + 216)+ *(_QWORD *)(a2 + 200)+ *(_QWORD *)(a2 + 232)+ *(_QWORD *)(a2 + 248)));
  v5 = v90[0];
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v4);
  Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v90, (Inspector::Protocol::Helpers *)0xA6);
  v6 = Inspector::Protocol::Memory::CategoryData::Builder<1>::setSize(v90, (double)(unint64_t)(*(_QWORD *)(a2 + 120) + *(_QWORD *)(a2 + 104)));
  v7 = v90[0];
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v6);
  Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v90, (Inspector::Protocol::Helpers *)0xA7);
  v8 = Inspector::Protocol::Memory::CategoryData::Builder<1>::setSize(v90, (double)(unint64_t)(*(_QWORD *)(a2 + 184) + *(_QWORD *)(a2 + 168)));
  v9 = v90[0];
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v8);
  Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v90, (Inspector::Protocol::Helpers *)0xA8);
  v10 = Inspector::Protocol::Memory::CategoryData::Builder<1>::setSize(v90, (double)(unint64_t)(*(_QWORD *)(a2 + 312) + *(_QWORD *)(a2 + 296)));
  v11 = v90[0];
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v10);
  Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v90, (Inspector::Protocol::Helpers *)0x85);
  v12 = Inspector::Protocol::Memory::CategoryData::Builder<1>::setSize(v90, (double)(unint64_t)(*(_QWORD *)(a2 + 56)+ *(_QWORD *)(a2 + 40)+ *(_QWORD *)(a2 + 72)+ *(_QWORD *)(a2 + 88)));
  v13 = v90[0];
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v12);
  Inspector::Protocol::CSS::Grouping::Builder<0>::setType(v90, (Inspector::Protocol::Helpers *)0x61);
  Inspector::Protocol::Memory::CategoryData::Builder<1>::setSize(v90, (double)(unint64_t)(*(_QWORD *)(a2 + 280) + *(_QWORD *)(a2 + 264)));
  v85 = v90[0];
  v14 = WTF::fastMalloc((WTF *)0x20);
  v15 = (WTF::JSONImpl::Object *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v14);
  v16 = *((_DWORD *)v15 + 6);
  v17 = *((unsigned int *)v15 + 7);
  v86 = v3;
  if ((_DWORD)v17 == v16)
  {
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= v17 + 1)
      v20 = v17 + 1;
    else
      v20 = v19;
    if (v20 >> 29)
      goto LABEL_129;
    v21 = *(void **)(v14 + 16);
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(v14 + 24) = v20;
    *(_QWORD *)(v14 + 16) = v22;
    v15 = (WTF::JSONImpl::Object *)memcpy(v22, v21, 8 * v17);
    if (v21)
    {
      if (*(void **)(v14 + 16) == v21)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
      }
      v15 = (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)v21, v23);
    }
    v24 = *(char **)(v14 + 16);
    v16 = *(_DWORD *)(v14 + 24);
    v17 = *(unsigned int *)(v14 + 28);
    v25 = (uint64_t *)&v24[8 * v17];
  }
  else
  {
    v24 = *(char **)(v14 + 16);
    v25 = (uint64_t *)&v24[8 * v17];
  }
  *v25 = v5;
  v26 = (v17 + 1);
  *(_DWORD *)(v14 + 28) = v26;
  if ((_DWORD)v26 == v16)
  {
    v27 = v26 + (v26 >> 2);
    if (v27 >= 0x10)
      v28 = v27 + 1;
    else
      v28 = 16;
    if (v28 <= v26 + 1)
      v29 = v26 + 1;
    else
      v29 = v28;
    if (v29 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195E5F704);
    }
    v30 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
    *(_DWORD *)(v14 + 24) = v29;
    *(_QWORD *)(v14 + 16) = v30;
    v15 = (WTF::JSONImpl::Object *)memcpy(v30, v24, 8 * v26);
    if (v24)
    {
      if (*(char **)(v14 + 16) == v24)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
      }
      v15 = (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)v24, v31);
    }
    v24 = *(char **)(v14 + 16);
    v16 = *(_DWORD *)(v14 + 24);
    v26 = *(unsigned int *)(v14 + 28);
    v32 = (uint64_t *)&v24[8 * v26];
  }
  else
  {
    v32 = (uint64_t *)&v24[8 * v26];
  }
  *v32 = v7;
  v33 = (v26 + 1);
  *(_DWORD *)(v14 + 28) = v33;
  if ((_DWORD)v33 == v16)
  {
    v34 = v33 + (v33 >> 2);
    if (v34 >= 0x10)
      v35 = v34 + 1;
    else
      v35 = 16;
    if (v35 <= v33 + 1)
      v36 = v33 + 1;
    else
      v36 = v35;
    if (v36 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195E5F70CLL);
    }
    v37 = (void *)WTF::fastMalloc((WTF *)(8 * v36));
    *(_DWORD *)(v14 + 24) = v36;
    *(_QWORD *)(v14 + 16) = v37;
    v15 = (WTF::JSONImpl::Object *)memcpy(v37, v24, 8 * v33);
    if (v24)
    {
      if (*(char **)(v14 + 16) == v24)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
      }
      v15 = (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)v24, v38);
    }
    v24 = *(char **)(v14 + 16);
    v16 = *(_DWORD *)(v14 + 24);
    v33 = *(unsigned int *)(v14 + 28);
    v39 = (uint64_t *)&v24[8 * v33];
  }
  else
  {
    v39 = (uint64_t *)&v24[8 * v33];
  }
  *v39 = v9;
  v40 = (v33 + 1);
  *(_DWORD *)(v14 + 28) = v40;
  if ((_DWORD)v40 == v16)
  {
    v41 = v40 + (v40 >> 2);
    if (v41 >= 0x10)
      v42 = v41 + 1;
    else
      v42 = 16;
    if (v42 <= v40 + 1)
      v43 = v40 + 1;
    else
      v43 = v42;
    if (v43 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195E5F714);
    }
    v44 = (void *)WTF::fastMalloc((WTF *)(8 * v43));
    *(_DWORD *)(v14 + 24) = v43;
    *(_QWORD *)(v14 + 16) = v44;
    v15 = (WTF::JSONImpl::Object *)memcpy(v44, v24, 8 * v40);
    if (v24)
    {
      if (*(char **)(v14 + 16) == v24)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
      }
      v15 = (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)v24, v45);
    }
    v24 = *(char **)(v14 + 16);
    v16 = *(_DWORD *)(v14 + 24);
    v40 = *(unsigned int *)(v14 + 28);
    v46 = (uint64_t *)&v24[8 * v40];
  }
  else
  {
    v46 = (uint64_t *)&v24[8 * v40];
  }
  *v46 = v11;
  v47 = (v40 + 1);
  *(_DWORD *)(v14 + 28) = v47;
  if ((_DWORD)v47 == v16)
  {
    v48 = v47 + (v47 >> 2);
    if (v48 >= 0x10)
      v49 = v48 + 1;
    else
      v49 = 16;
    if (v49 <= v47 + 1)
      v50 = v47 + 1;
    else
      v50 = v49;
    if (v50 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195E5F71CLL);
    }
    v51 = (void *)WTF::fastMalloc((WTF *)(8 * v50));
    *(_DWORD *)(v14 + 24) = v50;
    *(_QWORD *)(v14 + 16) = v51;
    v15 = (WTF::JSONImpl::Object *)memcpy(v51, v24, 8 * v47);
    if (v24)
    {
      if (*(char **)(v14 + 16) == v24)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
      }
      v15 = (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)v24, v52);
    }
    v24 = *(char **)(v14 + 16);
    v16 = *(_DWORD *)(v14 + 24);
    v47 = *(unsigned int *)(v14 + 28);
    v53 = (uint64_t *)&v24[8 * v47];
  }
  else
  {
    v53 = (uint64_t *)&v24[8 * v47];
  }
  *v53 = v13;
  v54 = (v47 + 1);
  *(_DWORD *)(v14 + 28) = v54;
  if ((_DWORD)v54 != v16)
  {
    v60 = (uint64_t *)&v24[8 * v54];
    goto LABEL_85;
  }
  v55 = v54 + (v54 >> 2);
  if (v55 >= 0x10)
    v56 = v55 + 1;
  else
    v56 = 16;
  if (v56 <= v54 + 1)
    v57 = v54 + 1;
  else
    v57 = v56;
  if (v57 >> 29)
  {
LABEL_129:
    __break(0xC471u);
    JUMPOUT(0x195E5F6FCLL);
  }
  v58 = (void *)WTF::fastMalloc((WTF *)(8 * v57));
  *(_DWORD *)(v14 + 24) = v57;
  *(_QWORD *)(v14 + 16) = v58;
  v15 = (WTF::JSONImpl::Object *)memcpy(v58, v24, 8 * v54);
  if (v24)
  {
    if (*(char **)(v14 + 16) == v24)
    {
      *(_QWORD *)(v14 + 16) = 0;
      *(_DWORD *)(v14 + 24) = 0;
    }
    v15 = (WTF::JSONImpl::Object *)WTF::fastFree((WTF *)v24, v59);
  }
  v54 = *(unsigned int *)(v14 + 28);
  v60 = (uint64_t *)(*(_QWORD *)(v14 + 16) + 8 * v54);
LABEL_85:
  *v60 = v85;
  *(_DWORD *)(v14 + 28) = v54 + 1;
  WTF::JSONImpl::Object::create(v15);
  v61 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v86 + 24) + 56))(*(_QWORD *)(v86 + 24));
  v62 = *(double *)(v61 + 8) + *(double *)(a2 + 360) - *(double *)(v61 + 16);
  v63 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v63, v62);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v87 + 16), &v88, (const WTF::StringImpl *)&v89, (uint64_t)v90);
  if (v91)
  {
    v65 = (uint64_t *)(v87 + 24);
    v66 = *(unsigned int *)(v87 + 36);
    if ((_DWORD)v66 == *(_DWORD *)(v87 + 32))
    {
      v79 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v88);
      v66 = *(unsigned int *)(v87 + 36);
      v80 = *(_QWORD *)(v87 + 24);
      v81 = *v79;
      if (*v79)
        *v81 += 2;
      *(_QWORD *)(v80 + 8 * v66) = v81;
    }
    else
    {
      v67 = *v65;
      v68 = v88;
      if (v88)
        *(_DWORD *)v88 += 2;
      *(_QWORD *)(v67 + 8 * v66) = v68;
    }
    *(_DWORD *)(v87 + 36) = v66 + 1;
  }
  v69 = v89;
  v89 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v69;
  }
  v70 = v88;
  v88 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v64);
    else
      *(_DWORD *)v70 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v88 = (WTF::StringImpl *)v14;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v87 + 16), &v89, (const WTF::StringImpl *)&v88, (uint64_t)v90);
  if (v91)
  {
    v72 = (uint64_t *)(v87 + 24);
    v73 = *(unsigned int *)(v87 + 36);
    if ((_DWORD)v73 == *(_DWORD *)(v87 + 32))
    {
      v82 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, v73 + 1, (unint64_t)&v89);
      v73 = *(unsigned int *)(v87 + 36);
      v83 = *(_QWORD *)(v87 + 24);
      v84 = *v82;
      if (*v82)
        *v84 += 2;
      *(_QWORD *)(v83 + 8 * v73) = v84;
    }
    else
    {
      v74 = *v72;
      v75 = v89;
      if (v89)
        *(_DWORD *)v89 += 2;
      *(_QWORD *)(v74 + 8 * v73) = v75;
    }
    *(_DWORD *)(v87 + 36) = v73 + 1;
  }
  v76 = v88;
  v88 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v76;
  }
  v77 = v89;
  v89 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v71);
    else
      *(_DWORD *)v77 -= 2;
  }
  v90[0] = v87;
  Inspector::MemoryFrontendDispatcher::trackingUpdate();
  result = (_DWORD *)v90[0];
  v90[0] = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::InspectorNetworkAgent::didReceiveResponse(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::DocumentLoader *,WebCore::ResourceResponse const&,WebCore::ResourceLoader*)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  CFTypeRef v5;
  const void *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CFTypeRef v25;
  CFTypeRef v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[19];
  CFTypeRef cf;
  char v54;

  v2 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v2)
  {
    v27 = WebCore::s_platformStrategies;
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
    *(_QWORD *)(v27 + 8) = v2;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v2 + 160))(&v28, v2, **(_QWORD **)(a1 + 8));
  if ((BYTE2(v47) & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v4 + 256))
    {
      WebCore::ResourceResponseBase::operator=(v4, &v28);
      v5 = cf;
      cf = 0;
      v6 = *(const void **)(v4 + 240);
      *(_QWORD *)(v4 + 240) = v5;
      if (v6)
        CFRelease(v6);
      *(_BYTE *)(v4 + 248) = v54;
    }
    else
    {
      v7 = v28;
      v28 = 0;
      *(_QWORD *)v4 = v7;
      v8 = *(_DWORD *)(v4 + 8) & 0xFFFFFFFE | v29 & 1;
      *(_DWORD *)(v4 + 8) = v8;
      v9 = v8 & 0xFFFFFFFD | (2 * ((v29 >> 1) & 1));
      *(_DWORD *)(v4 + 8) = v9;
      v10 = v9 & 0xFFFFFFFB | (4 * ((v29 >> 2) & 1));
      *(_DWORD *)(v4 + 8) = v10;
      v11 = v10 & 0xFFFFFFC7 | (8 * ((v29 >> 3) & 7));
      *(_DWORD *)(v4 + 8) = v11;
      *(_DWORD *)(v4 + 8) = v29 & 0xFFFFFFC0 | v11 & 0x3F;
      *(_OWORD *)(v4 + 12) = v30;
      *(_QWORD *)(v4 + 28) = v31;
      *(_DWORD *)(v4 + 36) = v32;
      v29 &= ~1u;
      v12 = v33;
      v33 = 0;
      *(_QWORD *)(v4 + 40) = v12;
      *(_QWORD *)(v4 + 48) = v34;
      v13 = v35;
      v35 = 0;
      *(_QWORD *)(v4 + 56) = v13;
      v14 = v36;
      v36 = 0;
      *(_QWORD *)(v4 + 64) = v14;
      v15 = v37;
      v37 = 0;
      *(_QWORD *)(v4 + 72) = v15;
      *(_QWORD *)(v4 + 80) = 0;
      *(_QWORD *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = 0;
      v16 = v38;
      v38 = 0;
      *(_QWORD *)(v4 + 80) = v16;
      LODWORD(v16) = v39;
      v39 = 0;
      *(_DWORD *)(v4 + 88) = v16;
      LODWORD(v16) = v40;
      v40 = 0;
      *(_DWORD *)(v4 + 92) = v16;
      *(_QWORD *)(v4 + 104) = 0;
      v17 = v41;
      v41 = 0;
      *(_QWORD *)(v4 + 96) = v17;
      LODWORD(v17) = v42;
      v42 = 0;
      *(_DWORD *)(v4 + 104) = v17;
      LODWORD(v17) = v43;
      v43 = 0;
      *(_DWORD *)(v4 + 108) = v17;
      v18 = v44;
      v44 = 0;
      *(_QWORD *)(v4 + 112) = v18;
      *(_BYTE *)(v4 + 120) = 0;
      *(_BYTE *)(v4 + 128) = 0;
      if (v46)
      {
        v19 = v45;
        v45 = 0;
        *(_QWORD *)(v4 + 120) = v19;
        *(_BYTE *)(v4 + 128) = 1;
      }
      v20 = v47;
      v21 = v48;
      *(_OWORD *)(v4 + 168) = v49;
      *(_OWORD *)(v4 + 152) = v21;
      *(_OWORD *)(v4 + 136) = v20;
      v22 = v50;
      v23 = v51;
      v24 = *(_OWORD *)v52;
      *(_DWORD *)(v4 + 231) = *(_DWORD *)&v52[15];
      *(_OWORD *)(v4 + 216) = v24;
      *(_OWORD *)(v4 + 200) = v23;
      *(_OWORD *)(v4 + 184) = v22;
      v25 = cf;
      cf = 0;
      *(_QWORD *)(v4 + 240) = v25;
      *(_BYTE *)(v4 + 248) = v54;
      *(_BYTE *)(v4 + 256) = 1;
    }
  }
  v26 = cf;
  cf = 0;
  if (v26)
    CFRelease(v26);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v28, v3);
}

WTF *WTF::Detail::CallableWrapper<WebCore::InspectorNetworkAgent::didReceiveResponse(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::DocumentLoader *,WebCore::ResourceResponse const&,WebCore::ResourceLoader*)::$_1,void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>::call(uint64_t a1, const WebCore::SharedBuffer **a2)
{
  return WebCore::NetworkResourcesData::maybeAddResourceData(*(WebCore::NetworkResourcesData **)(*(_QWORD *)(a1 + 8) + 64), *(WTF::StringImpl ***)(a1 + 16), *a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::InspectorNetworkAgent::didFinishLoading(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::DocumentLoader *,WebCore::NetworkLoadMetrics const&,WebCore::ResourceLoader*)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  uint64_t v13;
  _DWORD *v14;
  __int128 v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v19;
  WTF::StringImpl *result;
  uint64_t v21;
  _OWORD v22[5];
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  __int128 v26;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  _BYTE v35[24];
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v2)
  {
    v21 = WebCore::s_platformStrategies;
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
    *(_QWORD *)(v21 + 8) = v2;
  }
  (*(void (**)(_OWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v2 + 176))(v22, v2, **(_QWORD **)(a1 + 16));
  v36 = 0;
  v28 = v22[0];
  v29 = v22[1];
  v30 = v22[2];
  v31 = v22[3];
  v32 = v22[4];
  v33 = v23;
  WTF::String::isolatedCopy();
  *(_DWORD *)v35 = v25;
  *(_OWORD *)&v35[8] = v26;
  if (v27)
  {
    WebCore::AdditionalNetworkLoadMetricsForWebInspector::isolatedCopy(v27, &v37);
    v36 = v37;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(v4 + 128);
  v6 = v29;
  *(_OWORD *)v4 = v28;
  *(_OWORD *)(v4 + 16) = v6;
  v8 = v31;
  v7 = v32;
  v9 = v30;
  *(_QWORD *)(v4 + 80) = v33;
  *(_OWORD *)(v4 + 48) = v8;
  *(_OWORD *)(v4 + 64) = v7;
  *(_OWORD *)(v4 + 32) = v9;
  v10 = v34;
  v34 = 0;
  if (v5)
  {
    v11 = *(WTF::StringImpl **)(v4 + 88);
    *(_QWORD *)(v4 + 88) = v10;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v3);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = *(_OWORD *)v35;
    *(_QWORD *)(v4 + 112) = *(_QWORD *)&v35[16];
    *(_OWORD *)(v4 + 96) = v12;
    v13 = v36;
    v36 = 0;
    v14 = *(_DWORD **)(v4 + 120);
    *(_QWORD *)(v4 + 120) = v13;
    if (v14)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v14, v3);
  }
  else
  {
    *(_QWORD *)(v4 + 88) = v10;
    v15 = *(_OWORD *)v35;
    *(_QWORD *)(v4 + 112) = *(_QWORD *)&v35[16];
    *(_OWORD *)(v4 + 96) = v15;
    v16 = v36;
    v36 = 0;
    *(_QWORD *)(v4 + 120) = v16;
    *(_BYTE *)(v4 + 128) = 1;
  }
  v17 = (_DWORD *)v36;
  v36 = 0;
  if (v17)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v17, v3);
  v18 = v34;
  v34 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v3);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v27;
  v27 = 0;
  if (v19)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v19, v3);
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::InspectorNetworkAgent::enable(void)::$_0,WTF::String,WTF::URL const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E33F0AC0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InspectorNetworkAgent::enable(void)::$_0,WTF::String,WTF::URL const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F0AC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::InspectorNetworkAgent::enable(void)::$_0,WTF::String,WTF::URL const&>::call@<X0>(WTF::URL *a1@<X1>, WTF::StringImpl *result@<X0>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v3;
  WebCore::Document *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)result + 1);
  if (v3)
  {
    v5 = *(WebCore::Document **)(v3 + 8);
    if (v5)
    {
      v6 = *((_QWORD *)v5 + 66);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 24);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
              return WebCore::CookieJar::cookieRequestHeaderFieldValue(*(WebCore::CookieJar **)(v9 + 888), v5, a1, a3);
          }
        }
      }
    }
  }
  *a3 = 0;
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WTF::String&>@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  int v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF **v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unsigned int v54;
  const WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;

  v4 = a3;
  v5 = a1;
  v8 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  if (10 * v7 >= (unint64_t)(9 * v8) || *(_BYTE *)(a1 + 20) && v8 <= 2 * (int)v7)
  {
    if ((_DWORD)v8)
      v54 = 2 * v8;
    else
      v54 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v54);
    v8 = *(unsigned int *)(v5 + 8);
  }
  v9 = v8 - 1;
  v10 = *(unsigned int *)(v5 + 16);
  v11 = *((_DWORD *)*a2 + 4);
  if (v11 < 0x100)
    v12 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v12 = v11 >> 8;
  v13 = (v12 ^ v10) & v9;
  v14 = *(_QWORD *)v5;
  v15 = *(_QWORD *)v5 + 16 * v13;
  v16 = *(WTF **)v15;
  if (*(_QWORD *)v15)
  {
    v55 = v4;
    v56 = a4;
    v17 = 0;
    while (1)
    {
      v18 = *((_DWORD *)v16 + 4);
      v19 = v18 < 0x100 ? WTF::StringImpl::hashSlowCase(v16) : v18 >> 8;
      v20 = (v13 + v8 - ((v19 ^ v10) & v9)) & v9;
      if (v17 > v20)
        break;
      if (v19 == v12)
      {
        v21 = WTF::equal(*(WTF **)v15, *a2, a3);
        v14 = *(_QWORD *)v5;
        if ((v21 & 1) != 0)
        {
          v51 = v14 + 16 * *(unsigned int *)(v5 + 8);
          *(_QWORD *)v56 = v15;
          *(_QWORD *)(v56 + 8) = v51;
          *(_BYTE *)(v56 + 16) = 0;
          v52 = *(WTF::StringImpl **)v55;
          if (*(_QWORD *)v55)
            *(_DWORD *)v52 += 2;
          result = *(WTF::StringImpl **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = v52;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)result -= 2;
          }
          return result;
        }
      }
      else
      {
        v14 = *(_QWORD *)v5;
      }
      v13 = ((_DWORD)v13 + 1) & v9;
      ++v17;
      v15 = v14 + 16 * v13;
      v16 = *(WTF **)v15;
      if (!*(_QWORD *)v15)
      {
        if (v17 >= 0x80)
          *(_BYTE *)(v5 + 20) = 1;
        v4 = v55;
        a4 = v56;
        goto LABEL_20;
      }
    }
    if (v17 >= 0x80)
      *(_BYTE *)(v5 + 20) = 1;
    v29 = *(WTF **)v15;
    *(_QWORD *)v15 = 0;
    v30 = v14 + 16 * v13;
    v33 = *(_QWORD *)(v30 + 8);
    v31 = (WTF::StringImpl **)(v30 + 8);
    v32 = v33;
    *v31 = 0;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    v34 = *a2;
    if (*a2)
      *(_DWORD *)v34 += 2;
    *(_QWORD *)v15 = v34;
    v35 = *(WTF::StringImpl **)v55;
    if (*(_QWORD *)v55)
      *(_DWORD *)v35 += 2;
    v36 = *v31;
    *v31 = v35;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        v53 = v32;
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)a2);
        v32 = v53;
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
    v37 = ((_DWORD)v13 + 1) & v9;
    v38 = *(_QWORD *)v5;
    v39 = (WTF **)(*(_QWORD *)v5 + 16 * v37);
    v40 = *v39;
    if (*v39)
    {
      v57 = v5;
      do
      {
        v41 = *((_DWORD *)v40 + 4);
        if (v41 < 0x100)
        {
          v43 = v10;
          v44 = v8;
          v45 = v29;
          v46 = v32;
          v42 = WTF::StringImpl::hashSlowCase(v40);
          v32 = v46;
          v29 = v45;
          v8 = v44;
          v10 = v43;
          v5 = v57;
        }
        else
        {
          v42 = v41 >> 8;
        }
        if (++v20 > (((_DWORD)v37 + (_DWORD)v8 - ((v42 ^ v10) & v9)) & v9))
        {
          v47 = *v39;
          *v39 = 0;
          v48 = v38 + 16 * v37;
          v49 = *(_QWORD *)(v48 + 8);
          *v39 = v29;
          *(_QWORD *)(v48 + 8) = v32;
          v32 = v49;
          v29 = v47;
          v20 = (v37 + v8 - ((v42 ^ v10) & v9)) & v9;
        }
        v37 = ((_DWORD)v37 + 1) & v9;
        v38 = *(_QWORD *)v5;
        v39 = (WTF **)(*(_QWORD *)v5 + 16 * v37);
        v40 = *v39;
      }
      while (*v39);
    }
    *v39 = v29;
    v50 = v38 + 16 * v37;
    result = *(WTF::StringImpl **)(v50 + 8);
    *(_QWORD *)(v50 + 8) = v32;
    if (!result)
    {
      a4 = v56;
      goto LABEL_27;
    }
    v26 = *(_DWORD *)result - 2;
    a4 = v56;
    if (*(_DWORD *)result != 2)
      goto LABEL_26;
LABEL_48:
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    goto LABEL_27;
  }
LABEL_20:
  v22 = *a2;
  if (*a2)
    *(_DWORD *)v22 += 2;
  *(_QWORD *)v15 = v22;
  v23 = (WTF::StringImpl **)(v14 + 16 * v13 + 8);
  v24 = *(WTF::StringImpl **)v4;
  if (*(_QWORD *)v4)
    *(_DWORD *)v24 += 2;
  result = *v23;
  *v23 = v24;
  if (!result)
    goto LABEL_27;
  v26 = *(_DWORD *)result - 2;
  if (*(_DWORD *)result == 2)
    goto LABEL_48;
LABEL_26:
  *(_DWORD *)result = v26;
LABEL_27:
  v27 = *(unsigned int *)(v5 + 8);
  ++*(_DWORD *)(v5 + 12);
  v28 = *(_QWORD *)v5 + 16 * v27;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

unint64_t WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (unsigned int **)((char *)v7 + 16 * v8);
        v12 = (unsigned int **)v7;
        do
        {
          v13 = *v12;
          *v12 = 0;
          *(_QWORD *)v10 = v13;
          *((_QWORD *)v10 + 1) = v12[1];
          result = *v12;
          *v12 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
            else
              *result -= 2;
          }
          v12 += 2;
          v10 += 4;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<unsigned int WTF::Vector<WebCore::InspectorNetworkAgent::Intercept,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAll<WebCore::InspectorNetworkAgent::Intercept>(WebCore::InspectorNetworkAgent::Intercept const&)::{lambda(WebCore::InspectorNetworkAgent::Intercept const&)#1}>(uint64_t *a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  const WTF::StringImpl **v12;
  _QWORD *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char *v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 3);
  v6 = (char *)(*a1 + 16 * v5);
  if (v5 <= (uint64_t)a3)
  {
    v8 = 0;
    v9 = (char *)(*a1 + 16 * v5);
  }
  else
  {
    v8 = 0;
    v9 = (char *)(*a1 + 16 * v5);
    v10 = v9;
    v11 = v4 + 16 * (_QWORD)a3;
    do
    {
      v12 = *(const WTF::StringImpl ***)a2;
      if (WTF::equal(*(WTF **)v11, **(const WTF::StringImpl ***)a2, a3)
        && *(unsigned __int8 *)(v11 + 8) == *((unsigned __int8 *)v12 + 8)
        && *(unsigned __int8 *)(v11 + 9) == *((unsigned __int8 *)v12 + 9)
        && *(_DWORD *)(v11 + 12) == *((_DWORD *)v12 + 3))
      {
        v13 = (_QWORD *)v11;
        if (v10 != (_QWORD *)(*a1 + 16 * *((unsigned int *)a1 + 3)))
        {
          if (v9 == (char *)v11)
          {
            v13 = v10;
          }
          else
          {
            if (v9 <= (char *)v10)
            {
              v18 = 0;
              v23 = (uint64_t)(v11 - (_QWORD)v9) >> 4;
              do
              {
                v19 = v11 + v18;
                v20 = (char *)v10 + v11 - (_QWORD)v9 + v18;
                v21 = *(_QWORD *)(v11 + v18 - 16);
                *(_QWORD *)(v19 - 16) = 0;
                *((_QWORD *)v20 - 2) = v21;
                *((_QWORD *)v20 - 1) = *(_QWORD *)(v11 + v18 - 8);
                v22 = *(WTF::StringImpl **)(v11 + v18 - 16);
                *(_QWORD *)(v19 - 16) = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2)
                    WTF::StringImpl::destroy(v22, a2);
                  else
                    *(_DWORD *)v22 -= 2;
                }
                v18 -= 16;
              }
              while ((char *)(v11 + v18) != v9);
            }
            else
            {
              v14 = (WTF::StringImpl **)v10;
              v15 = (WTF::StringImpl **)v9;
              do
              {
                v16 = *v15;
                *v15 = 0;
                *v14 = v16;
                v14[1] = v15[1];
                v17 = *v15;
                *v15 = 0;
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2)
                    WTF::StringImpl::destroy(v17, a2);
                  else
                    *(_DWORD *)v17 -= 2;
                }
                v15 += 2;
                v14 += 2;
              }
              while (v15 != (WTF::StringImpl **)v11);
              v23 = (uint64_t)(v11 - (_QWORD)v9) >> 4;
            }
            v13 = &v10[2 * v23];
          }
        }
        v24 = *(WTF::StringImpl **)v11;
        *(_QWORD *)v11 = 0;
        v9 = (char *)(v11 + 16);
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, a2);
          else
            *(_DWORD *)v24 -= 2;
        }
        v8 = (v8 + 1);
        v10 = v13;
      }
      v11 += 16;
    }
    while (v11 < (unint64_t)v6);
    v4 = *a1;
    v5 = *((unsigned int *)a1 + 3);
    v6 = (char *)v10;
  }
  v25 = (char *)(v4 + 16 * v5);
  if (v9 != v25)
  {
    if (v9 <= v6)
    {
      v28 = &v6[((v25 - v9) & 0xFFFFFFFFFFFFFFF0) - 8];
      do
      {
        v29 = *((_QWORD *)v25 - 2);
        v25 -= 16;
        *(_QWORD *)v25 = 0;
        *((_QWORD *)v28 - 1) = v29;
        *(_QWORD *)v28 = *((_QWORD *)v25 + 1);
        v30 = *(WTF::StringImpl **)v25;
        *(_QWORD *)v25 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, a2);
          else
            *(_DWORD *)v30 -= 2;
        }
        v28 -= 16;
      }
      while (v25 != v9);
    }
    else
    {
      do
      {
        v26 = *(WTF::StringImpl **)v9;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)v6 = v26;
        *((_QWORD *)v6 + 1) = *((_QWORD *)v9 + 1);
        v27 = *(WTF::StringImpl **)v9;
        *(_QWORD *)v9 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, a2);
          else
            *(_DWORD *)v27 -= 2;
        }
        v9 += 16;
        v6 += 16;
      }
      while (v9 != v25);
    }
  }
  *((_DWORD *)a1 + 3) -= v8;
  return v8;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  _DWORD *v46;
  WTF *v47;
  uint64_t v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  WTF **v54;
  int v55;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v10 >> 31) ^ v10;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v11 = 0;
    v51 = v4;
    v52 = v5;
    do
    {
      v12 = (char *)v5 + 16 * v11;
      v13 = *(WTF::StringImpl **)v12;
      if (*(_QWORD *)v12)
      {
        v14 = *(unsigned int *)(a1 + 8);
        v55 = *(_DWORD *)(a1 + 16);
        v15 = *((_DWORD *)v13 + 4);
        v53 = v11;
        if (v15 < 0x100)
          v16 = WTF::StringImpl::hashSlowCase(v13);
        else
          v16 = v15 >> 8;
        v17 = v14 - 1;
        v18 = (v16 ^ v55) & (v14 - 1);
        v19 = *(WTF **)a1;
        v20 = *(_QWORD *)a1 + 16 * v18;
        v21 = *(WTF::StringImpl **)v20;
        if (*(_QWORD *)v20)
        {
          v22 = 0;
          v54 = (WTF **)((char *)v5 + 16 * v11 + 8);
          do
          {
            v23 = *((_DWORD *)v21 + 4);
            if (v23 < 0x100)
              v24 = WTF::StringImpl::hashSlowCase(v21);
            else
              v24 = v23 >> 8;
            v25 = (v18 + v14 - ((v24 ^ v55) & v17)) & v17;
            if (v22 > v25)
            {
              v26 = v14;
              v27 = *(WTF::StringImpl **)v12;
              v28 = *v54;
              *(_QWORD *)v12 = 0;
              *((_QWORD *)v12 + 1) = 0;
              v29 = *(WTF::StringImpl **)v20;
              *(_QWORD *)v20 = 0;
              v30 = *(WTF::StringImpl **)v12;
              *(_QWORD *)v12 = v29;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v7);
                else
                  *(_DWORD *)v30 -= 2;
              }
              v31 = *(WTF **)(v20 + 8);
              *(_QWORD *)(v20 + 8) = 0;
              v32 = *v54;
              *v54 = v31;
              if (v32)
              {
                v33 = *((_QWORD *)v32 + 1);
                *((_QWORD *)v32 + 1) = 0;
                if (v33)
                  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
                v34 = *(_DWORD **)v32;
                *(_QWORD *)v32 = 0;
                if (v34)
                {
                  if (v34[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
                  else
                    --v34[4];
                }
                WTF::fastFree(v32, v7);
              }
              v35 = *(WTF::StringImpl **)v20;
              *(_QWORD *)v20 = v27;
              v14 = v26;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, v7);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = *(WTF **)(v20 + 8);
              *(_QWORD *)(v20 + 8) = v28;
              if (v36)
              {
                v37 = *((_QWORD *)v36 + 1);
                *((_QWORD *)v36 + 1) = 0;
                if (v37)
                  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
                v38 = *(_DWORD **)v36;
                *(_QWORD *)v36 = 0;
                if (v38)
                {
                  if (v38[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
                  else
                    --v38[4];
                }
                WTF::fastFree(v36, v7);
              }
              v22 = v25;
            }
            v18 = ((_DWORD)v18 + 1) & v17;
            ++v22;
            v19 = *(WTF **)a1;
            v20 = *(_QWORD *)a1 + 16 * v18;
            v21 = *(WTF::StringImpl **)v20;
          }
          while (*(_QWORD *)v20);
          v4 = v51;
          v5 = v52;
        }
        v11 = v53;
        v39 = *(WTF::StringImpl **)v12;
        *(_QWORD *)v12 = 0;
        v40 = *(WTF::StringImpl **)v20;
        *(_QWORD *)v20 = v39;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v7);
          else
            *(_DWORD *)v40 -= 2;
        }
        v41 = (char *)v19 + 16 * v18;
        v42 = (char *)v5 + 16 * v53;
        v43 = *((_QWORD *)v42 + 1);
        *((_QWORD *)v42 + 1) = 0;
        v44 = (WTF *)*((_QWORD *)v41 + 1);
        *((_QWORD *)v41 + 1) = v43;
        if (v44)
        {
          v45 = *((_QWORD *)v44 + 1);
          *((_QWORD *)v44 + 1) = 0;
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          v46 = *(_DWORD **)v44;
          *(_QWORD *)v44 = 0;
          if (v46)
          {
            if (v46[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
            else
              --v46[4];
          }
          WTF::fastFree(v44, v7);
        }
      }
      v47 = (WTF *)*((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = 0;
      if (v47)
      {
        v48 = *((_QWORD *)v47 + 1);
        *((_QWORD *)v47 + 1) = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
        v49 = *(_DWORD **)v47;
        *(_QWORD *)v47 = 0;
        if (v49)
        {
          if (v49[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
          else
            --v49[4];
        }
        WTF::fastFree(v47, v7);
      }
      v50 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v7);
        else
          *(_DWORD *)v50 -= 2;
      }
      ++v11;
    }
    while (v11 != v4);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  WebCore::ResourceResponseBase *v32;
  uint64_t v33;
  const void *v34;
  WTF *v35;
  void *v36;
  WebCore::ResourceResponseBase *v37;
  uint64_t v38;
  const void *v39;
  WTF *v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF *v43;
  uint64_t v44;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v10 >> 31) ^ v10;
  *(_BYTE *)(a1 + 20) = 0;
  v44 = v4;
  if ((_DWORD)v4)
  {
    v11 = 0;
    v43 = v5;
    do
    {
      v12 = (WTF::StringImpl **)((char *)v5 + 16 * v11);
      v13 = *v12;
      if (*v12)
      {
        v14 = *(_DWORD *)(a1 + 8);
        v15 = *(_DWORD *)(a1 + 16);
        v16 = *((_DWORD *)v13 + 4);
        if (v16 < 0x100)
          v17 = WTF::StringImpl::hashSlowCase(v13);
        else
          v17 = v16 >> 8;
        v18 = v14 - 1;
        v19 = (v17 ^ v15) & (v14 - 1);
        v20 = *(WTF **)a1;
        v21 = (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v19);
        v22 = *(WTF::StringImpl **)v21;
        if (*(_QWORD *)v21)
        {
          v23 = 0;
          do
          {
            v24 = *((_DWORD *)v22 + 4);
            if (v24 < 0x100)
              v25 = WTF::StringImpl::hashSlowCase(v22);
            else
              v25 = v24 >> 8;
            v26 = (v19 + v14 - ((v25 ^ v15) & v18)) & v18;
            if (v23 > v26)
            {
              std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>(v12, v21);
              v23 = v26;
            }
            v19 = ((_DWORD)v19 + 1) & v18;
            ++v23;
            v20 = *(WTF **)a1;
            v21 = (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v19);
            v22 = *(WTF::StringImpl **)v21;
          }
          while (*(_QWORD *)v21);
          v5 = v43;
        }
        v27 = *v12;
        *v12 = 0;
        v28 = *(WTF::StringImpl **)v21;
        *(_QWORD *)v21 = v27;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v7);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = (char *)v20 + 16 * v19;
        v30 = (char *)v5 + 16 * v11;
        v31 = *((_QWORD *)v30 + 1);
        *((_QWORD *)v30 + 1) = 0;
        v32 = (WebCore::ResourceResponseBase *)*((_QWORD *)v29 + 1);
        *((_QWORD *)v29 + 1) = v31;
        if (v32)
        {
          v33 = *((_QWORD *)v32 + 32);
          *((_QWORD *)v32 + 32) = 0;
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          v34 = (const void *)*((_QWORD *)v32 + 30);
          *((_QWORD *)v32 + 30) = 0;
          if (v34)
            CFRelease(v34);
          WebCore::ResourceResponseBase::~ResourceResponseBase(v32, v7);
          WTF::fastFree(v35, v36);
        }
      }
      v37 = v12[1];
      v12[1] = 0;
      if (v37)
      {
        v38 = *((_QWORD *)v37 + 32);
        *((_QWORD *)v37 + 32) = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        v39 = (const void *)*((_QWORD *)v37 + 30);
        *((_QWORD *)v37 + 30) = 0;
        if (v39)
          CFRelease(v39);
        WebCore::ResourceResponseBase::~ResourceResponseBase(v37, v7);
        WTF::fastFree(v40, v41);
      }
      v42 = *v12;
      *v12 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v7);
        else
          *(_DWORD *)v42 -= 2;
      }
      ++v11;
    }
    while (v11 != v44);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

WTF::StringImpl *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::ResourceResponseBase *v9;
  uint64_t v10;
  const void *v11;
  WTF *v12;
  void *v13;
  WTF::StringImpl *result;
  WebCore::ResourceResponseBase *v15;
  uint64_t v16;
  const void *v17;
  WTF *v18;
  void *v19;

  v5 = *a1;
  v4 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v6 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v7 = *a1;
  *a1 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v9 = a1[1];
  a1[1] = v8;
  if (v9)
  {
    v10 = *((_QWORD *)v9 + 32);
    *((_QWORD *)v9 + 32) = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = (const void *)*((_QWORD *)v9 + 30);
    *((_QWORD *)v9 + 30) = 0;
    if (v11)
      CFRelease(v11);
    WebCore::ResourceResponseBase::~ResourceResponseBase(v9, a2);
    WTF::fastFree(v12, v13);
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v15 = (WebCore::ResourceResponseBase *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (v15)
  {
    v16 = *((_QWORD *)v15 + 32);
    *((_QWORD *)v15 + 32) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = (const void *)*((_QWORD *)v15 + 30);
    *((_QWORD *)v15 + 30) = 0;
    if (v17)
      CFRelease(v17);
    WebCore::ResourceResponseBase::~ResourceResponseBase(v15, a2);
    return (WTF::StringImpl *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF *v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  unsigned int v19;
  WTF::StringImpl **v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WTF **v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  _DWORD *v30;
  WTF *v31;
  uint64_t v32;
  _DWORD *v33;
  WTF::StringImpl *v34;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a2[1];
  a2[1] = 0;
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 1);
    *((_QWORD *)v5 + 1) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *(_DWORD **)v5;
    *(_QWORD *)v5 = 0;
    if (v7)
    {
      if (v7[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[4];
    }
    WTF::fastFree(v5, a2);
  }
  *a2 = 0;
  a2[1] = 0;
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = v8 - 1;
  v11 = *(_QWORD *)a1;
  v12 = (unint64_t)a2 - *(_QWORD *)a1;
  v13 = (v12 >> 4) + 1;
  v14 = v13 & (v8 - 1);
  v15 = (uint64_t *)(*(_QWORD *)a1 + 16 * v14);
  result = *v15;
  if (*v15)
  {
    v17 = *(_DWORD *)(a1 + 16);
    v18 = (v12 >> 4);
    v19 = v13 & v10;
    v20 = (WTF::StringImpl **)(v11 + 16 * v18);
    do
    {
      v21 = *(_DWORD *)(result + 16);
      if (v21 < 0x100)
        result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        result = v21 >> 8;
      if (((v19 + v8 - ((result ^ v17) & v10)) & v10) == 0)
        break;
      v22 = (WTF::StringImpl *)*v15;
      *v15 = 0;
      v23 = *v20;
      *v20 = v22;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = v11 + 16 * v18;
      v25 = v11 + 16 * v14;
      v27 = *(_QWORD *)(v25 + 8);
      v26 = (WTF **)(v25 + 8);
      *v26 = 0;
      v28 = *(WTF **)(v24 + 8);
      *(_QWORD *)(v24 + 8) = v27;
      if (v28)
      {
        v29 = *((_QWORD *)v28 + 1);
        *((_QWORD *)v28 + 1) = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        v30 = *(_DWORD **)v28;
        *(_QWORD *)v28 = 0;
        if (v30)
        {
          if (v30[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
          else
            --v30[4];
        }
        WTF::fastFree(v28, a2);
      }
      v31 = *v26;
      *v26 = 0;
      if (v31)
      {
        v32 = *((_QWORD *)v31 + 1);
        *((_QWORD *)v31 + 1) = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        v33 = *(_DWORD **)v31;
        *(_QWORD *)v31 = 0;
        if (v33)
        {
          if (v33[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
          else
            --v33[4];
        }
        WTF::fastFree(v31, a2);
      }
      v34 = (WTF::StringImpl *)*v15;
      *v15 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v34 -= 2;
      }
      *v15 = 0;
      v15[1] = 0;
      v14 = (v19 + 1) & v10;
      v11 = *(_QWORD *)a1;
      v18 = v19;
      v20 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v19);
      v15 = (uint64_t *)(*(_QWORD *)a1 + 16 * v14);
      result = *v15;
      v19 = (v19 + 1) & v10;
    }
    while (*v15);
    v8 = *(_DWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 12);
  }
  if (v8 >= 9 && 6 * v9 < v8)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v8 >> 1);
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WebCore::ResourceResponseBase *v5;
  uint64_t v6;
  const void *v7;
  WTF *v8;
  void *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::ResourceResponseBase **v28;
  uint64_t v29;
  WebCore::ResourceResponseBase *v30;
  uint64_t v31;
  const void *v32;
  WTF *v33;
  void *v34;
  WebCore::ResourceResponseBase *v35;
  uint64_t v36;
  const void *v37;
  WTF *v38;
  void *v39;
  WTF::StringImpl *v40;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a2[1];
  a2[1] = 0;
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 32);
    *((_QWORD *)v5 + 32) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = (const void *)*((_QWORD *)v5 + 30);
    *((_QWORD *)v5 + 30) = 0;
    if (v7)
      CFRelease(v7);
    WebCore::ResourceResponseBase::~ResourceResponseBase(v5, (WTF::StringImpl *)a2);
    WTF::fastFree(v8, v9);
  }
  *a2 = 0;
  a2[1] = 0;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v11;
  v12 = v10 - 1;
  v13 = *(_QWORD *)a1;
  v14 = (unint64_t)a2 - *(_QWORD *)a1;
  v15 = (v14 >> 4) + 1;
  v16 = v15 & (v10 - 1);
  v17 = (uint64_t *)(*(_QWORD *)a1 + 16 * v16);
  result = *v17;
  if (*v17)
  {
    v19 = *(_DWORD *)(a1 + 16);
    v20 = (v14 >> 4);
    v21 = v15 & v12;
    v22 = (WTF::StringImpl **)(v13 + 16 * v20);
    do
    {
      v23 = *(_DWORD *)(result + 16);
      if (v23 < 0x100)
        result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        result = v23 >> 8;
      if (((v21 + v10 - ((result ^ v19) & v12)) & v12) == 0)
        break;
      v24 = (WTF::StringImpl *)*v17;
      *v17 = 0;
      v25 = *v22;
      *v22 = v24;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = v13 + 16 * v20;
      v27 = v13 + 16 * v16;
      v29 = *(_QWORD *)(v27 + 8);
      v28 = (WebCore::ResourceResponseBase **)(v27 + 8);
      *v28 = 0;
      v30 = *(WebCore::ResourceResponseBase **)(v26 + 8);
      *(_QWORD *)(v26 + 8) = v29;
      if (v30)
      {
        v31 = *((_QWORD *)v30 + 32);
        *((_QWORD *)v30 + 32) = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        v32 = (const void *)*((_QWORD *)v30 + 30);
        *((_QWORD *)v30 + 30) = 0;
        if (v32)
          CFRelease(v32);
        WebCore::ResourceResponseBase::~ResourceResponseBase(v30, (WTF::StringImpl *)a2);
        WTF::fastFree(v33, v34);
      }
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v36 = *((_QWORD *)v35 + 32);
        *((_QWORD *)v35 + 32) = 0;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        v37 = (const void *)*((_QWORD *)v35 + 30);
        *((_QWORD *)v35 + 30) = 0;
        if (v37)
          CFRelease(v37);
        WebCore::ResourceResponseBase::~ResourceResponseBase(v35, (WTF::StringImpl *)a2);
        WTF::fastFree(v38, v39);
      }
      v40 = (WTF::StringImpl *)*v17;
      *v17 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v40 -= 2;
      }
      *v17 = 0;
      v17[1] = 0;
      v16 = (v21 + 1) & v12;
      v13 = *(_QWORD *)a1;
      v20 = v21;
      v22 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v21);
      v17 = (uint64_t *)(*(_QWORD *)a1 + 16 * v16);
      result = *v17;
      v21 = (v21 + 1) & v12;
    }
    while (*v17);
    v10 = *(_DWORD *)(a1 + 8);
    v11 = *(_DWORD *)(a1 + 12);
  }
  if (v10 >= 9 && 6 * v11 < v10)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::InspectorNetworkAgent::PendingInterceptResponse>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v10 >> 1);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::InspectorNetworkAgent::interceptRequestWithResponse(WTF::String const&,WTF::String const&,BOOL,WTF::String const&,int,WTF::String const&,WTF::Ref<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;

  *a1 = off_1E33F0AE8;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 2, a2);
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InspectorNetworkAgent::interceptRequestWithResponse(WTF::String const&,WTF::String const&,BOOL,WTF::String const&,int,WTF::String const&,WTF::Ref<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)::$_0,void>::~CallableWrapper(uint64_t *a1, void *a2)
{
  void *v3;
  _DWORD *v4;

  *a1 = (uint64_t)off_1E33F0AE8;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 2, a2);
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree((WTF *)a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::InspectorNetworkAgent::interceptRequestWithResponse(WTF::String const&,WTF::String const&,BOOL,WTF::String const&,int,WTF::String const&,WTF::Ref<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)::$_0,void>::call(uint64_t a1)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  _DWORD *v4;
  _OWORD v5[5];
  WTF::StringImpl *v6[2];
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  result = *(WTF::StringImpl **)(a1 + 8);
  if (!*((_BYTE *)result + 752))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48))
    {
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)result + 216))(result);
      result = *(WTF::StringImpl **)(a1 + 8);
    }
    v7 = 0;
    *(_OWORD *)v6 = 0u;
    memset(v5, 0, sizeof(v5));
    v8 = -1;
    v9 = -1;
    v10 = 0;
    (*(void (**)(WTF::StringImpl *, _OWORD *))(*(_QWORD *)result + 232))(result, v5);
    v4 = v10;
    v10 = 0;
    if (v4)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4, v3);
    result = v6[1];
    v6[1] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Frame,WTF::String,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_28;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * --v4);
      result = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
      {
        *v6 = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          WTF::fastFree((WTF *)result, a2);
        }
        *v6 = -1;
        v9 = v3 + 16 * v4;
        result = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v10 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v11 = *(_DWORD *)(v10 - 12);
      else
        v11 = 0;
      *(_DWORD *)(v10 - 12) = v11 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v12 = *(_DWORD *)(v3 - 4);
      v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        v17 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
        v19 = (v18 | HIWORD(v18)) + 1;
        if (v19 > 0x400)
        {
          if (v19 > 2 * v13)
            goto LABEL_39;
        }
        else if (3 * v19 > 4 * v13)
        {
LABEL_37:
          v20 = (double)v13;
          v21 = (double)v19;
          v22 = 0.604166667;
          goto LABEL_40;
        }
        LODWORD(v19) = 2 * v19;
        if (v19 <= 0x400)
          goto LABEL_37;
LABEL_39:
        v20 = (double)v13;
        v21 = (double)v19;
        v22 = 0.416666667;
LABEL_40:
        if (v21 * v22 <= v20)
          LODWORD(v19) = 2 * v19;
        if (v19 <= 8)
          v23 = 8;
        else
          v23 = v19;
        result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v2, v23, 0);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v15 = 0;
          goto LABEL_32;
        }
LABEL_29:
        v15 = *(_DWORD *)(v3 - 12);
        v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
          goto LABEL_33;
        goto LABEL_32;
      }
LABEL_28:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_29;
    }
  }
  v15 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_32:
  v16 = v15;
LABEL_33:
  *(_DWORD *)(v2 + 12) = 2 * v16;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::String,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    while (1)
    {
      v14 = (unsigned int **)(v6 + 16 * v11);
      v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = ((unint64_t)v15 + ~((_QWORD)v15 << 32)) ^ (((unint64_t)v15 + ~((_QWORD)v15 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = v20 + 16 * v27;
          v30 = *(WTF::StringImpl **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 != 2)
            {
              *(_DWORD *)v30 -= 2;
              goto LABEL_23;
            }
            WTF::StringImpl::destroy(v30, v10);
            v38 = *(unsigned int **)v29;
            *(_QWORD *)v29 = 0;
            if (v38)
            {
              do
              {
                v39 = __ldaxr(v38);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, v38));
              if (!v40)
              {
                atomic_store(1u, v38);
                WTF::fastFree((WTF *)v38, v10);
              }
            }
          }
          else
          {
LABEL_23:
            *(_QWORD *)v29 = 0;
          }
          v31 = *v14;
          *v14 = 0;
          *(_QWORD *)v29 = v31;
          v32 = v6 + 16 * v11;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          *(_QWORD *)(v29 + 8) = v33;
          v34 = *(WTF::StringImpl **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v10);
            else
              *(_DWORD *)v34 -= 2;
          }
          v35 = *v14;
          *v14 = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v35);
              WTF::fastFree((WTF *)v35, v10);
            }
          }
          if (v14 == a3)
            v12 = v29;
          goto LABEL_33;
        }
        v16 = v6 + 16 * v11;
        v17 = *(WTF::StringImpl **)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, v10);
            v15 = *v14;
          }
          else
          {
            *(_DWORD *)v17 -= 2;
          }
        }
        *v14 = 0;
        if (v15)
        {
          do
          {
            v18 = __ldaxr(v15);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v15));
          if (!v19)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v10);
          }
        }
      }
LABEL_33:
      if (++v11 == v13)
        goto LABEL_42;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_42:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

void WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  WTF *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  WTF::StringImpl **v20;
  unsigned int v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char *v25;
  char *v26;
  unsigned int **v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v35;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a2[1];
  a2[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = v8 - 1;
  v11 = *(WTF **)a1;
  v12 = (unint64_t)a2 - *(_QWORD *)a1;
  v13 = (v12 >> 4) + 1;
  v14 = v13 & (v8 - 1);
  v15 = *(_QWORD *)a1 + 16 * v14;
  v16 = *(WTF::StringImpl **)v15;
  if (*(_QWORD *)v15)
  {
    v17 = *(_DWORD *)(a1 + 16);
    v18 = (v12 >> 4);
    v19 = v13 & v10;
    v20 = (WTF::StringImpl **)((char *)v11 + 16 * v18);
    do
    {
      v21 = *((_DWORD *)v16 + 4);
      if (v21 < 0x100)
        v22 = WTF::StringImpl::hashSlowCase(v16);
      else
        v22 = v21 >> 8;
      if (((v19 + v8 - ((v22 ^ v17) & v10)) & v10) == 0)
        break;
      v23 = *(WTF::StringImpl **)v15;
      *(_QWORD *)v15 = 0;
      v24 = *v20;
      *v20 = v23;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = (char *)v11 + 16 * v18;
      v26 = (char *)v11 + 16 * v14;
      v28 = *((_QWORD *)v26 + 1);
      v27 = (unsigned int **)(v26 + 8);
      *v27 = 0;
      v29 = (unsigned int *)*((_QWORD *)v25 + 1);
      *((_QWORD *)v25 + 1) = v28;
      if (v29)
      {
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          atomic_store(1u, v29);
          WTF::fastFree((WTF *)v29, a2);
        }
      }
      v32 = *v27;
      *v27 = 0;
      if (v32)
      {
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v32);
          WTF::fastFree((WTF *)v32, a2);
        }
      }
      v35 = *(WTF::StringImpl **)v15;
      *(_QWORD *)v15 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v35 -= 2;
      }
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
      v14 = (v19 + 1) & v10;
      v11 = *(WTF **)a1;
      v18 = v19;
      v20 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v19);
      v15 = *(_QWORD *)a1 + 16 * v14;
      v16 = *(WTF::StringImpl **)v15;
      v19 = (v19 + 1) & v10;
    }
    while (*(_QWORD *)v15);
    v8 = *(_DWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 12);
  }
  if (v8 >= 9 && 6 * v9 < v8)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((WTF **)a1, v8 >> 1);
}

void WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(WTF **a1, unsigned int a2)
{
  WTF *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  WTF **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  char *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int **v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  unsigned int *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int **v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  int v59;

  v56 = *((unsigned int *)a1 + 2);
  v55 = *a1;
  v3 = (WTF *)(16 * a2);
  v4 = (WTF *)WTF::fastMalloc(v3);
  v6 = v4;
  if (a2)
    bzero(v4, (size_t)v3);
  v7 = a1;
  *a1 = v6;
  *((_DWORD *)a1 + 2) = a2;
  v8 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *((_DWORD *)a1 + 4) = (v10 >> 31) ^ v10;
  *((_BYTE *)a1 + 20) = 0;
  if ((_DWORD)v56)
  {
    v11 = 0;
    v12 = v55;
    do
    {
      v13 = (char *)v12 + 16 * v11;
      v14 = *(WTF::StringImpl **)v13;
      if (*(_QWORD *)v13)
      {
        v15 = *((_DWORD *)v7 + 2);
        v16 = *((_DWORD *)v7 + 4);
        v17 = *((_DWORD *)v14 + 4);
        v59 = v15;
        if (v17 < 0x100)
        {
          v18 = WTF::StringImpl::hashSlowCase(v14);
          v15 = v59;
          v7 = a1;
        }
        else
        {
          v18 = v17 >> 8;
        }
        v19 = v15 - 1;
        v20 = (v18 ^ v16) & (v15 - 1);
        v21 = *v7;
        v22 = (WTF::StringImpl **)((char *)*v7 + 16 * v20);
        v23 = *v22;
        v57 = v11;
        if (*v22)
        {
          v24 = 0;
          v25 = (unsigned int **)((char *)v12 + 16 * v11 + 8);
          do
          {
            v26 = *((_DWORD *)v23 + 4);
            if (v26 < 0x100)
            {
              v27 = WTF::StringImpl::hashSlowCase(v23);
              v15 = v59;
              v7 = a1;
            }
            else
            {
              v27 = v26 >> 8;
            }
            v28 = (v20 + v15 - ((v27 ^ v16) & v19)) & v19;
            if (v24 > v28)
            {
              v29 = *(WTF::StringImpl **)v13;
              v30 = *v25;
              *(_QWORD *)v13 = 0;
              *((_QWORD *)v13 + 1) = 0;
              v31 = *v22;
              *v22 = 0;
              v32 = *(WTF::StringImpl **)v13;
              *(_QWORD *)v13 = v31;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                {
                  WTF::StringImpl::destroy(v32, v5);
                  v15 = v59;
                  v7 = a1;
                }
                else
                {
                  *(_DWORD *)v32 -= 2;
                }
              }
              v33 = (uint64_t)v21 + 16 * v20;
              v35 = *(unsigned int **)(v33 + 8);
              v34 = (unsigned int **)(v33 + 8);
              *v34 = 0;
              v36 = *v25;
              *v25 = v35;
              if (v36)
              {
                do
                {
                  v37 = __ldaxr(v36);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, v36));
                if (!v38)
                {
                  atomic_store(1u, v36);
                  WTF::fastFree((WTF *)v36, v5);
                  v15 = v59;
                  v7 = a1;
                }
              }
              v39 = *v22;
              *v22 = v29;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                {
                  WTF::StringImpl::destroy(v39, v5);
                  v15 = v59;
                  v7 = a1;
                }
                else
                {
                  *(_DWORD *)v39 -= 2;
                }
              }
              v40 = *v34;
              *v34 = v30;
              if (v40)
              {
                do
                {
                  v41 = __ldaxr(v40);
                  v42 = v41 - 1;
                }
                while (__stlxr(v42, v40));
                if (!v42)
                {
                  atomic_store(1u, v40);
                  WTF::fastFree((WTF *)v40, v5);
                  v15 = v59;
                  v7 = a1;
                }
              }
              v24 = v28;
            }
            v20 = ((_DWORD)v20 + 1) & v19;
            ++v24;
            v21 = *v7;
            v22 = (WTF::StringImpl **)((char *)*v7 + 16 * v20);
            v23 = *v22;
          }
          while (*v22);
        }
        v43 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        v44 = *v22;
        *v22 = v43;
        v12 = v55;
        v11 = v57;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
          {
            WTF::StringImpl::destroy(v44, v5);
            v7 = a1;
          }
          else
          {
            *(_DWORD *)v44 -= 2;
          }
        }
        v45 = (uint64_t)v21 + 16 * v20;
        v46 = (char *)v55 + 16 * v57;
        v47 = *((_QWORD *)v46 + 1);
        *((_QWORD *)v46 + 1) = 0;
        v48 = *(unsigned int **)(v45 + 8);
        *(_QWORD *)(v45 + 8) = v47;
        if (v48)
        {
          do
          {
            v49 = __ldaxr(v48);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v48));
          if (!v50)
          {
            atomic_store(1u, v48);
            WTF::fastFree((WTF *)v48, v5);
            v7 = a1;
          }
        }
      }
      v51 = (unsigned int *)*((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = 0;
      if (v51)
      {
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          atomic_store(1u, v51);
          WTF::fastFree((WTF *)v51, v5);
          v7 = a1;
        }
      }
      v54 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::destroy(v54, v5);
          v7 = a1;
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
      ++v11;
    }
    while (v11 != v56);
  }
  else
  {
    v12 = v55;
    if (!v55)
      return;
  }
  WTF::fastFree(v12, v5);
}

WTF *WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>@<X0>(WTF *result@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, unsigned int **a4@<X8>)
{
  unsigned int *v5;
  unsigned int **v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v5 = *(unsigned int **)result;
  if (*(_QWORD *)result)
  {
    v7 = (unsigned int **)result;
    v8 = *((_DWORD *)result + 2);
    v9 = v8 - 1;
    v10 = *((_DWORD *)result + 4);
    v11 = *((_DWORD *)*a2 + 4);
    if (v11 < 0x100)
    {
      v12 = WTF::StringImpl::hashSlowCase(*a2);
      v5 = *v7;
    }
    else
    {
      v12 = v11 >> 8;
    }
    v13 = (v12 ^ v10) & v9;
    v14 = (uint64_t)&v5[4 * v13];
    result = *(WTF **)v14;
    if (*(_QWORD *)v14)
    {
      v15 = -1;
      do
      {
        v16 = *((_DWORD *)result + 4);
        result = v16 < 0x100 ? (WTF *)WTF::StringImpl::hashSlowCase(result) : (WTF *)(v16 >> 8);
        if (++v15 > ((v13 + v8 - ((result ^ v10) & v9)) & v9))
          break;
        if ((_DWORD)result == v12)
        {
          result = (WTF *)WTF::equal(*(WTF **)v14, *a2, a3);
          if ((result & 1) != 0)
          {
            v5 = *(unsigned int **)(v14 + 8);
            if (v5)
            {
              do
                v17 = __ldaxr(v5);
              while (__stlxr(v17 + 1, v5));
            }
            goto LABEL_15;
          }
        }
        v13 = (v13 + 1) & v9;
        v14 = (uint64_t)&(*v7)[4 * v13];
        result = *(WTF **)v14;
      }
      while (*(_QWORD *)v14);
    }
    v5 = 0;
  }
LABEL_15:
  *a4 = v5;
  return result;
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::String const&,WebCore::Frame* const&>(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *a3;
  if (v6)
  {
    result = *(_QWORD *)(v6 + 16);
    if (result)
      goto LABEL_25;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v6;
    v12 = *(unsigned int **)(v6 + 16);
    *(_QWORD *)(v6 + 16) = result;
    if (!v12)
      goto LABEL_25;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
    result = *(_QWORD *)(v6 + 16);
    if (result)
    {
LABEL_25:
      do
        v11 = __ldaxr((unsigned int *)result);
      while (__stlxr(v11 + 1, (unsigned int *)result));
    }
  }
  else
  {
    result = 0;
  }
  v8 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = result;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      return WTF::fastFree((WTF *)v8, a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::InspectorTimelineAgent::TimelineRecordEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  WTF *v9;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    v5 = (_DWORD **)(*(_QWORD *)a1 + 16);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*v6 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v6;
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*v7 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v7;
      }
      v8 = *(v5 - 2);
      *(v5 - 2) = 0;
      if (v8)
      {
        if (*v8 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v8;
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t WebCore::InspectorWorkerAgent::InspectorWorkerAgent(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v9)
  {
    v5 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 2;
    *(_QWORD *)a1 = off_1E33EFBF8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
    if (v5)
      *(_DWORD *)v9 = v5;
    else
      WTF::StringImpl::destroy(v9, v4);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2[4];
    *(_QWORD *)(a1 + 24) = *a2;
  }
  *(_QWORD *)a1 = off_1E33F0B38;
  *(_QWORD *)(a1 + 32) = &unk_1E33F0BA8;
  *(_QWORD *)(a1 + 40) = &unk_1E33F0BE8;
  v6 = a2[2];
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = v6;
  *(_QWORD *)(a1 + 48) = v7;
  Inspector::WorkerBackendDispatcher::create();
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 77) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  return a1;
}

void WebCore::InspectorWorkerAgent::~InspectorWorkerAgent(WebCore::InspectorWorkerAgent *this, void *a2)
{
  Inspector::WorkerBackendDispatcherHandler *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t i;
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  *(_QWORD *)this = off_1E33F0B38;
  *((_QWORD *)this + 4) = &unk_1E33F0BA8;
  v3 = (WebCore::InspectorWorkerAgent *)((char *)this + 32);
  *((_QWORD *)this + 5) = &unk_1E33F0BE8;
  v4 = (WTF *)*((_QWORD *)this + 8);
  if (v4)
  {
    v5 = *((unsigned int *)this + 18);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = (char *)v4 + 16 * i;
        v8 = (unsigned int *)*((_QWORD *)v7 + 1);
        *((_QWORD *)v7 + 1) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v8);
            WTF::fastFree((WTF *)v8, a2);
          }
        }
        v11 = *(WTF::StringImpl **)v7;
        *(_QWORD *)v7 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
    }
    WTF::fastFree(v4, a2);
  }
  v12 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
    WTF::fastFree(v13, a2);
  Inspector::WorkerBackendDispatcherHandler::~WorkerBackendDispatcherHandler(v3);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
}

uint64_t WebCore::InspectorWorkerAgent::didCreateFrontendAndBackend(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 16) + 72) = result;
  return result;
}

WTF::StringImpl *WebCore::InspectorWorkerAgent::willDestroyFrontendAndBackend(_QWORD *a1)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  char v4;

  *(_QWORD *)(a1[2] + 72) = 0;
  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*a1 + 56))(&v3);
  if (v4)
  {
    result = v3;
    v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_BYTE *WebCore::InspectorWorkerAgent::enable@<X0>(_BYTE *this@<X0>, _BYTE *a2@<X8>)
{
  if (!this[88])
  {
    this[88] = 1;
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 88))(this);
  }
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorWorkerAgent::enable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;

  if (!*(_BYTE *)(this + 56))
  {
    v3 = *(_QWORD *)(this - 32);
    *(_BYTE *)(this + 56) = 1;
    this = (*(uint64_t (**)(void))(v3 + 88))();
  }
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t WebCore::InspectorWorkerAgent::disable@<X0>(uint64_t this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  if (*(_BYTE *)(this + 88))
  {
    *(_BYTE *)(this + 88) = 0;
    this = WebCore::InspectorWorkerAgent::disconnectFromAllWorkerInspectorProxies(this, a2);
  }
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t WebCore::InspectorWorkerAgent::disconnectFromAllWorkerInspectorProxies(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int **v19;
  uint64_t v20;
  WebCore::WorkerInspectorProxy *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  _QWORD *v27;
  int v28;
  WTF *v29;
  void *v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t i;
  WTF::StringImpl **v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  _QWORD *v42;
  char v43;
  WTF::StringImpl *v44;

  v2 = this;
  v4 = this + 64;
  v3 = *(WTF **)(this + 64);
  v5 = *(unsigned int *)(this + 76);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int *)(this + 72);
    v7 = (WTF *)((char *)v3 + 16 * v6);
    if ((_DWORD)v6)
    {
      v8 = 16 * v6;
      while (!*(_QWORD *)v3)
      {
        v3 = (WTF *)((char *)v3 + 16);
        v8 -= 16;
        if (!v8)
        {
          v3 = v7;
          break;
        }
      }
    }
    if (v5 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    v9 = WTF::fastMalloc((WTF *)(8 * v5));
    v11 = (WTF *)v9;
    if (v3 != v7)
    {
      v12 = 0;
      v13 = 1;
LABEL_10:
      v14 = v13;
      v15 = (unsigned int *)*((_QWORD *)v3 + 1);
      if (v15)
      {
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      v17 = v12 + 1;
      *(_QWORD *)(v9 + 8 * v12) = v15;
      while (1)
      {
        v3 = (WTF *)((char *)v3 + 16);
        if (v3 == v7)
          break;
        if (*(_QWORD *)v3)
        {
          v13 = v14 + 1;
          ++v12;
          if (v3 != v7)
            goto LABEL_10;
          break;
        }
      }
      if (v17)
      {
        v18 = 8 * v14;
        v19 = (unsigned int **)(v9 + 8 * v17);
        v20 = v9;
        do
        {
          if (*(_QWORD *)v20)
          {
            v21 = *(WebCore::WorkerInspectorProxy **)(*(_QWORD *)v20 + 8);
            if (v21)
            {
              v22 = *(_DWORD *)v21 + 1;
              *(_DWORD *)v21 = v22;
              v23 = *((_QWORD *)v21 + 3);
              if (v23)
              {
                *((_QWORD *)v21 + 11) = 0;
                v24 = *(_QWORD *)(v23 + 48);
                v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v25 = off_1E347D230;
                v42 = v25;
                v43 = 0;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                (*(void (**)(uint64_t, _QWORD **, WTF::StringImpl **))(*(_QWORD *)v24 + 32))(v24, &v42, &v44);
                v26 = v44;
                v44 = 0;
                if (v26)
                {
                  if (*(_DWORD *)v26 == 2)
                    WTF::StringImpl::destroy(v26, v10);
                  else
                    *(_DWORD *)v26 -= 2;
                }
                v27 = v42;
                v42 = 0;
                if (v27)
                  (*(void (**)(_QWORD *))(*v27 + 8))(v27);
                v22 = *(_DWORD *)v21;
              }
              v28 = v22 - 1;
              if (v28)
              {
                *(_DWORD *)v21 = v28;
              }
              else
              {
                WebCore::WorkerInspectorProxy::~WorkerInspectorProxy(v21, v10);
                WTF::fastFree(v29, v30);
              }
            }
          }
          v20 += 8;
          v18 -= 8;
        }
        while (v18);
        v31 = (unsigned int **)v11;
        do
        {
          v32 = *v31;
          *v31 = 0;
          if (v32)
          {
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              atomic_store(1u, v32);
              WTF::fastFree((WTF *)v32, v10);
            }
          }
          ++v31;
        }
        while (v31 != v19);
      }
    }
    this = WTF::fastFree(v11, v10);
    v3 = *(WTF **)v4;
  }
  if (v3)
  {
    v35 = *(unsigned int *)(v2 + 72);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 13) = 0;
    if ((_DWORD)v35)
    {
      for (i = 0; i != v35; ++i)
      {
        v37 = (WTF::StringImpl **)((char *)v3 + 16 * i);
        v38 = (unsigned int *)v37[1];
        v37[1] = 0;
        if (v38)
        {
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            atomic_store(1u, v38);
            WTF::fastFree((WTF *)v38, a2);
          }
        }
        v41 = *v37;
        *v37 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v41 -= 2;
        }
      }
    }
    return WTF::fastFree(v3, a2);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InspectorWorkerAgent::disable@<X0>(uint64_t this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  if (*(_BYTE *)(this + 56))
  {
    *(_BYTE *)(this + 56) = 0;
    this = WebCore::InspectorWorkerAgent::disconnectFromAllWorkerInspectorProxies(this - 32, a2);
  }
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t WebCore::InspectorWorkerAgent::initialized@<X0>(WebCore::InspectorWorkerAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v5;
  unsigned int *v6;
  WebCore::WorkerInspectorProxy *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  WTF *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  char v20;
  WTF::StringImpl *v21;

  WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebCore::InspectorWorkerAgent *)((char *)this + 64), a2, a3, (unsigned int **)&v19);
  v6 = (unsigned int *)v19;
  if (!v19)
  {
LABEL_20:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    a4[8] = 1;
    return result;
  }
  v7 = (WebCore::WorkerInspectorProxy *)*((_QWORD *)v19 + 1);
  if (!v7)
  {
    v19 = 0;
    do
    {
      v17 = __ldaxr(v6);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v6));
    if (!v18)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
    goto LABEL_20;
  }
  ++*(_DWORD *)v7;
  v19 = 0;
  do
  {
    v8 = __ldaxr(v6);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v6));
  if (!v9)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v10 = *(_QWORD *)(*((_QWORD *)v7 + 3) + 48);
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = off_1E347D1E0;
  v19 = v11;
  v20 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF **, WTF::StringImpl **))(*(_QWORD *)v10 + 32))(v10, &v19, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = (uint64_t)v19;
  v19 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *a4 = 0;
  a4[8] = 0;
  if (*(_DWORD *)v7 == 1)
  {
    WebCore::WorkerInspectorProxy::~WorkerInspectorProxy(v7, v12);
    return WTF::fastFree(v15, v16);
  }
  else
  {
    --*(_DWORD *)v7;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorWorkerAgent::initialized@<X0>(WebCore::InspectorWorkerAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorWorkerAgent::initialized((WebCore::InspectorWorkerAgent *)((char *)this - 32), a2, a3, a4);
}

uint64_t WebCore::InspectorWorkerAgent::sendMessageToWorker@<X0>(WebCore::InspectorWorkerAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, _BYTE *a4@<X8>)
{
  void *v6;
  unsigned int *v7;
  WebCore::WorkerInspectorProxy *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF *v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;

  if (!*((_BYTE *)this + 88)
    || (WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebCore::InspectorWorkerAgent *)((char *)this + 64), a2, a3, (unsigned int **)&v17), (v7 = (unsigned int *)v17) == 0))
  {
LABEL_16:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    a4[8] = 1;
    return result;
  }
  v8 = (WebCore::WorkerInspectorProxy *)*((_QWORD *)v17 + 1);
  if (!v8)
  {
    v17 = 0;
    do
    {
      v15 = __ldaxr(v7);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v7));
    if (!v16)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
    goto LABEL_16;
  }
  ++*(_DWORD *)v8;
  v17 = 0;
  do
  {
    v9 = __ldaxr(v7);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v7));
  if (!v10)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  result = WebCore::WorkerInspectorProxy::sendMessageToWorkerInspectorController((uint64_t)v8, a3);
  *a4 = 0;
  a4[8] = 0;
  if (*(_DWORD *)v8 == 1)
  {
    WebCore::WorkerInspectorProxy::~WorkerInspectorProxy(v8, v12);
    return WTF::fastFree(v13, v14);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InspectorWorkerAgent::sendMessageToWorker@<X0>(WebCore::InspectorWorkerAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, _BYTE *a4@<X8>)
{
  return WebCore::InspectorWorkerAgent::sendMessageToWorker((WebCore::InspectorWorkerAgent *)((char *)this - 32), a2, a3, a4);
}

uint64_t WebCore::InspectorWorkerAgent::sendMessageFromWorkerToFrontend(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  return Inspector::WorkerFrontendDispatcher::dispatchMessageFromWorker(*(Inspector::WorkerFrontendDispatcher **)(a1 + 48), (const WTF::String *)(a2 + 32), a3);
}

uint64_t `non-virtual thunk to'WebCore::InspectorWorkerAgent::sendMessageFromWorkerToFrontend(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  return Inspector::WorkerFrontendDispatcher::dispatchMessageFromWorker(*(Inspector::WorkerFrontendDispatcher **)(a1 + 8), (const WTF::String *)(a2 + 32), a3);
}

uint64_t WebCore::InspectorWorkerAgent::workerStarted(uint64_t this, WebCore::WorkerInspectorProxy *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  WTF::StringImpl *v12;

  if (*(_BYTE *)(this + 88))
  {
    v3 = this;
    v4 = *((_QWORD *)a2 + 3);
    if (v4)
    {
      *((_QWORD *)a2 + 11) = this + 40;
      v5 = *(_QWORD *)(v4 + 48);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E347D208;
      v10 = v6;
      v11 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(uint64_t, _QWORD **, WTF::StringImpl **))(*(_QWORD *)v5 + 32))(v5, &v10, &v12);
      v8 = v12;
      v12 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = v10;
      v10 = 0;
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
    WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WebCore::WorkerInspectorProxy&>((uint64_t *)(v3 + 64), (WTF::StringImpl **)a2 + 4, a2, (uint64_t)&v10);
    return Inspector::WorkerFrontendDispatcher::workerCreated(*(Inspector::WorkerFrontendDispatcher **)(v3 + 48), (WebCore::WorkerInspectorProxy *)((char *)a2 + 32), (WebCore::WorkerInspectorProxy *)((char *)a2 + 40), (WebCore::WorkerInspectorProxy *)((char *)a2 + 80));
  }
  return this;
}

uint64_t WebCore::InspectorWorkerAgent::connectToWorkerInspectorProxy(WebCore::InspectorWorkerAgent *this, WebCore::WorkerInspectorProxy *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  _QWORD *v11;
  char v12;
  WTF::StringImpl *v13;

  v4 = *((_QWORD *)a2 + 3);
  if (v4)
  {
    *((_QWORD *)a2 + 11) = (char *)this + 40;
    v5 = *(_QWORD *)(v4 + 48);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E347D208;
    v11 = v6;
    v12 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, _QWORD **, WTF::StringImpl **))(*(_QWORD *)v5 + 32))(v5, &v11, &v13);
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v11;
    v11 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WebCore::WorkerInspectorProxy&>((uint64_t *)this + 8, (WTF::StringImpl **)a2 + 4, a2, (uint64_t)&v11);
  return Inspector::WorkerFrontendDispatcher::workerCreated(*((Inspector::WorkerFrontendDispatcher **)this + 6), (WebCore::WorkerInspectorProxy *)((char *)a2 + 32), (WebCore::WorkerInspectorProxy *)((char *)a2 + 40), (WebCore::WorkerInspectorProxy *)((char *)a2 + 80));
}

void WebCore::InspectorWorkerAgent::workerTerminated(WebCore::InspectorWorkerAgent *this, WebCore::WorkerInspectorProxy *a2)
{
  WTF::StringImpl **v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  WTF::StringImpl *v15;

  if (*((_BYTE *)this + 88))
  {
    v4 = (WTF::StringImpl **)((char *)a2 + 32);
    Inspector::WorkerFrontendDispatcher::workerTerminated(*((Inspector::WorkerFrontendDispatcher **)this + 6), (WebCore::WorkerInspectorProxy *)((char *)a2 + 32));
    v6 = (WTF::StringImpl **)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 8, v4, v5);
    if ((WTF::StringImpl **)(*((_QWORD *)this + 8) + 16 * *((unsigned int *)this + 18)) != v6)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)this + 64, v6);
    v7 = *((_QWORD *)a2 + 3);
    if (v7)
    {
      *((_QWORD *)a2 + 11) = 0;
      v8 = *(_QWORD *)(v7 + 48);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E347D230;
      v13 = v9;
      v14 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(uint64_t, _QWORD **, WTF::StringImpl **))(*(_QWORD *)v8 + 32))(v8, &v13, &v15);
      v11 = v15;
      v15 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v13;
      v13 = 0;
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
}

void WebCore::WebConsoleAgent::frameWindowDiscarded(WebCore::WebInjectedScriptManager **this, WebCore::LocalDOMWindow *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Inspector::ConsoleMessage **v7;
  uint64_t v8;
  uint64_t v9;
  WebCore *v10;
  JSC::JSGlobalObject *v11;

  v4 = *((_QWORD *)a2 + 9);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
LABEL_9:
    WebCore::WebInjectedScriptManager::discardInjectedScriptsFor(this[3], a2);
    return;
  }
  if (!*(_BYTE *)(v5 + 178))
  {
    v6 = *((unsigned int *)this + 17);
    if ((_DWORD)v6)
    {
      v7 = (Inspector::ConsoleMessage **)this[7];
      v8 = v5 - 96;
      v9 = 8 * v6;
      do
      {
        v10 = (WebCore *)Inspector::ConsoleMessage::globalObject(*v7);
        if (WebCore::executionContext(v10, v11) == v8)
          Inspector::ConsoleMessage::clear(*v7);
        ++v7;
        v9 -= 8;
      }
      while (v9);
    }
    goto LABEL_9;
  }
  __break(0xC471u);
}

void WebCore::WebConsoleAgent::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  int8x16_t *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  char v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int v20;
  _WORD *v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  size_t v25;
  unsigned int v26;
  _WORD *v27;
  _BYTE *v28;
  size_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _WORD *v33;
  unsigned int v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  void *v52;
  WTF::StringImpl *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned __int128 *v59;
  unsigned __int128 *v60;
  unsigned __int128 v61;
  __int8 v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65[3];
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;

  v65[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  if (*(__int16 *)(a3 + 136) < 400)
    return;
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  v4 = *(__int16 *)(a3 + 136);
  WebCore::ResourceResponse::platformLazyInit(a3, 2);
  v6 = *(WTF::StringImpl **)(a3 + 64);
  if (!v6)
    goto LABEL_5;
  if (*((_DWORD *)v6 + 1) <= 0x2710u)
  {
    *(_DWORD *)v6 += 2;
LABEL_5:
    v64 = v6;
    goto LABEL_10;
  }
  if ((*((_DWORD *)v6 + 4) & 4) != 0)
    v7 = 0x100002710;
  else
    v7 = 10000;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(10003, (*((_DWORD *)v6 + 4) & 4u) >> 2, *((_OWORD **)v6 + 1), v7, "...", 3u, &v64);
  v6 = v64;
  if (!v64)
    goto LABEL_114;
LABEL_10:
  if ((v4 & 0x80000000) != 0)
  {
    v54 = -v4;
    v8 = 1;
    do
    {
      ++v8;
      v22 = v54 >= 0xA;
      v54 /= 0xAu;
    }
    while (v22);
  }
  else
  {
    v8 = 0;
    v9 = v4;
    do
    {
      ++v8;
      v10 = v9 > 9;
      v9 /= 0xAu;
    }
    while (v10);
  }
  if (v6)
  {
    v11 = *((_DWORD *)v6 + 1);
    if (v11 < 0)
      goto LABEL_114;
  }
  else
  {
    v11 = 0;
  }
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12
    || ((v12 = __OFADD__(v13, 2), v14 = v13 + 2, !v12) ? (v15 = 0) : (v15 = 1),
        v8 < 0
     || (v15 & 1) != 0
     || (v12 = __OFADD__(v8, v14), v16 = v8 + v14, v12)
     || (v17 = (v16 + 63), __OFADD__(v16, 63))))
  {
LABEL_114:
    __break(0xC471u);
    JUMPOUT(0x195E634A8);
  }
  if (!v6 || (*((_BYTE *)v6 + 16) & 4) != 0)
  {
    if (v16 == -63)
      goto LABEL_90;
    if ((v17 & 0x80000000) != 0)
      goto LABEL_114;
    WTF::tryFastCompactMalloc((WTF *)(v17 + 20));
    v18 = v65[0];
    if (!v65[0])
      goto LABEL_114;
    *(_OWORD *)((char *)v65[0] + 20) = *(_OWORD *)"Failed to load resource: the server responded with a status of ";
    *(_DWORD *)v18 = 2;
    *((_DWORD *)v18 + 1) = v17;
    *((_QWORD *)v18 + 1) = (char *)v18 + 20;
    *((_DWORD *)v18 + 4) = 4;
    qmemcpy((char *)v18 + 36, "esource: the server responded with a status of ", 47);
    v23 = 0;
    if ((v4 & 0x80000000) != 0)
    {
      v55 = -v4;
      do
      {
        *((_BYTE *)&v65[1] + v23-- + 4) = (v55 % 0xA) | 0x30;
        v10 = v55 > 9;
        v55 /= 0xAu;
      }
      while (v10);
      v56 = v23 + 12;
      v5 = (int8x16_t *)((char *)&v65[1] + v23 + 4);
      v5->i8[0] = 45;
      if (v23 + 14 <= 14)
      {
        if (v56 <= 12)
          v56 = 12;
        v25 = v56 - v23 - 11;
        goto LABEL_44;
      }
    }
    else
    {
      v24 = v4;
      do
      {
        *((_BYTE *)&v65[1] + v23-- + 4) = (v24 % 0xA) | 0x30;
        v10 = v24 > 9;
        v24 /= 0xAu;
      }
      while (v10);
      if (v23 + 14 <= 13)
      {
        v5 = (int8x16_t *)((char *)&v65[1] + v23 + 5);
        v25 = -v23;
LABEL_44:
        memcpy((char *)v18 + 83, v5, v25);
      }
    }
    if ((v4 & 0x80000000) != 0)
    {
      v57 = -v4;
      v26 = 1;
      do
      {
        ++v26;
        v22 = v57 >= 0xA;
        v57 /= 0xAu;
      }
      while (v22);
    }
    else
    {
      v26 = 0;
      do
      {
        ++v26;
        v10 = v4 > 9;
        v4 /= 0xAu;
      }
      while (v10);
    }
    v27 = (_WORD *)((char *)v18 + v26 + 83);
    *v27 = 10272;
    v28 = v27 + 1;
    if (v6)
    {
      v5 = (int8x16_t *)*((_QWORD *)v6 + 1);
      v29 = *((unsigned int *)v6 + 1);
      if ((*((_BYTE *)v6 + 16) & 4) != 0)
      {
        if ((_DWORD)v29)
        {
          if ((_DWORD)v29 == 1)
            *v28 = v5->i8[0];
          else
            memcpy(v28, v5, v29);
        }
      }
      else
      {
        if (v29 < 0x10)
        {
          v59 = (unsigned __int128 *)v28;
        }
        else
        {
          v59 = (unsigned __int128 *)&v28[v29 & 0xFFFFFFF0];
          v60 = (unsigned __int128 *)v28;
          do
          {
            v61 = (unsigned __int128)vld2q_s8(v5->i8);
            v5 += 2;
            *v60++ = v61;
          }
          while (v60 != v59);
        }
        while (v59 != (unsigned __int128 *)&v28[v29])
        {
          v62 = v5->i8[0];
          v5 = (int8x16_t *)((char *)v5 + 2);
          *(_BYTE *)v59 = v62;
          v59 = (unsigned __int128 *)((char *)v59 + 1);
        }
      }
      v30 = *((unsigned int *)v6 + 1);
    }
    else
    {
      v30 = 0;
    }
    v28[v30] = 41;
    goto LABEL_79;
  }
  if (v16 != -63)
  {
    if (v17 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * v17 + 20));
      v18 = v65[0];
      if (v65[0])
      {
        *(_DWORD *)v65[0] = 2;
        *((_DWORD *)v18 + 1) = v17;
        *(_OWORD *)((char *)v18 + 20) = xmmword_1969F23C0;
        *((_QWORD *)v18 + 1) = (char *)v18 + 20;
        *((_DWORD *)v18 + 4) = 0;
        *(_OWORD *)((char *)v18 + 36) = xmmword_1969F23D0;
        *(_OWORD *)((char *)v18 + 52) = xmmword_1969F23E0;
        *(_OWORD *)((char *)v18 + 68) = xmmword_1969F23F0;
        *(_OWORD *)((char *)v18 + 84) = xmmword_1969F2400;
        *(_OWORD *)((char *)v18 + 100) = xmmword_1969F2410;
        *(_OWORD *)((char *)v18 + 116) = xmmword_1969F2420;
        *(_QWORD *)((char *)v18 + 132) = 0x20007300750074;
        *((_DWORD *)v18 + 35) = 6684783;
        *((_WORD *)v18 + 72) = 32;
        if ((v4 & 0x80000000) != 0)
        {
          v31 = -v4;
          v32 = 12;
          do
          {
            *((_BYTE *)v65 + v32--) = (v31 % 0xA) | 0x30;
            v10 = v31 > 9;
            v31 /= 0xAu;
          }
          while (v10);
          *((_BYTE *)v65 + v32) = 45;
          if (v32 + 2 <= 14)
          {
            v33 = (_WORD *)((char *)v18 + 146);
            do
            {
              *v33++ = *((unsigned __int8 *)v65 + v32);
              v10 = v32++ < 12;
            }
            while (v10);
          }
        }
        else
        {
          v19 = 0;
          v20 = v4;
          do
          {
            *((_BYTE *)&v65[1] + v19-- + 4) = (v20 % 0xA) | 0x30;
            v10 = v20 > 9;
            v20 /= 0xAu;
          }
          while (v10);
          if (v19 + 14 <= 13)
          {
            v21 = (_WORD *)((char *)v18 + 146);
            do
            {
              *v21++ = *((unsigned __int8 *)&v65[1] + v19 + 5);
              v22 = __CFADD__(v19++, 1);
            }
            while (!v22);
          }
        }
        if ((v4 & 0x80000000) != 0)
        {
          v58 = -v4;
          v34 = 1;
          do
          {
            ++v34;
            v22 = v58 >= 0xA;
            v58 /= 0xAu;
          }
          while (v22);
        }
        else
        {
          v34 = 0;
          do
          {
            ++v34;
            v10 = v4 > 9;
            v4 /= 0xAu;
          }
          while (v10);
        }
        v35 = (_DWORD *)((char *)v18 + 2 * v34 + 146);
        *v35 = 2621472;
        v36 = (char *)(v35 + 1);
        v5 = (int8x16_t *)*((_QWORD *)v6 + 1);
        v37 = *((unsigned int *)v6 + 1);
        if ((*((_BYTE *)v6 + 16) & 4) != 0)
        {
          v38 = &v36[2 * v37];
          if (v37 >= 0x40)
          {
            v39 = &v36[2 * (v37 & 0xFFFFFFC0)];
            v40 = 0uLL;
            v41 = v36;
            do
            {
              v66.val[0] = *v5;
              v42 = v5[1];
              v67.val[0] = v5[2];
              v43 = v5[3];
              v5 += 4;
              v44 = v43;
              v67.val[1] = 0uLL;
              v68.val[0] = v42;
              v66.val[1] = 0uLL;
              v45 = v41;
              vst2q_s8(v45, v66);
              v45 += 32;
              v68.val[1] = 0uLL;
              vst2q_s8(v45, v68);
              v46 = v41 + 64;
              vst2q_s8(v46, v67);
              v47 = v41 + 96;
              vst2q_s8(v47, *(int8x16x2_t *)(&v40 - 1));
              v41 += 128;
            }
            while (v41 != v39);
          }
          else
          {
            v39 = v36;
          }
          while (v39 != v38)
          {
            v48 = v5->u8[0];
            v5 = (int8x16_t *)((char *)v5 + 1);
            *(_WORD *)v39 = v48;
            v39 += 2;
          }
        }
        else if ((_DWORD)v37 == 1)
        {
          *(_WORD *)v36 = v5->i16[0];
        }
        else if ((_DWORD)v37)
        {
          memcpy(v36, v5, 2 * v37);
        }
        *(_WORD *)&v36[2 * *((unsigned int *)v6 + 1)] = 41;
        goto LABEL_79;
      }
    }
    goto LABEL_114;
  }
LABEL_90:
  v18 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_79:
  v49 = v64;
  v64 = 0;
  v65[0] = v18;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v49 -= 2;
  }
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  WTF::fastMalloc((WTF *)0x60);
  v63 = Inspector::ConsoleMessage::ConsoleMessage();
  Inspector::InspectorConsoleAgent::addMessageToConsole();
  if (v63)
  {
    v51 = (WTF *)MEMORY[0x19AEA5F58](v63, v50);
    WTF::fastFree(v51, v52);
  }
  v53 = v65[0];
  v65[0] = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v50);
    else
      *(_DWORD *)v53 -= 2;
  }
}

uint64_t WebCore::WebConsoleAgent::didFailLoading(int a1, int a2, WebCore::ResourceError *this)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  WebCore::ResourceError::platformLazyInit(this);
  result = MEMORY[0x19AEA53F4](*(_QWORD *)this, "InspectorNetworkAgent", 21);
  if ((result & 1) != 0 || *((_BYTE *)this + 60) == 3)
    return result;
  if (!WebCore::ResourceError::blockedKnownTracker(this))
  {
    v5 = 0;
LABEL_8:
    WebCore::ResourceError::platformLazyInit(this);
    v6 = *((_QWORD *)this + 6);
    v7 = "";
    if (v6)
    {
      if (*(_DWORD *)(v6 + 4))
      {
        v7 = ": ";
        v8 = 3;
      }
      else
      {
        v8 = 1;
      }
    }
    else
    {
      v8 = 1;
    }
    WebCore::ResourceError::platformLazyInit(this);
    v9 = *((_QWORD *)this + 6);
    if (v9)
      *(_DWORD *)v9 += 2;
    v20 = v8 - 1;
    if ((unint64_t)(v8 - 1) >> 31)
    {
      __break(0xC471u);
LABEL_47:
      JUMPOUT(0x195E6371CLL);
    }
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 4);
      if (v10 < 0)
        goto LABEL_43;
    }
    else
    {
      v10 = 0;
    }
    v11 = __OFADD__(v20, v10);
    v12 = v20 + v10;
    if (!v11 && !__OFADD__(v12, 23))
    {
      if (v9)
        v13 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
      else
        v13 = 1;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((v12 + 23), v13, "Failed to load resource", 0x17u, v7, v20, v9, &v22);
      v15 = v22;
      if (v22)
      {
        v22 = 0;
        v23 = v15;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
          {
            WTF::StringImpl::destroy(v5, v14);
            v19 = v22;
            v22 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, v14);
              else
                *(_DWORD *)v19 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v5 -= 2;
            v22 = 0;
          }
        }
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v9, v14);
          else
            *(_DWORD *)v9 -= 2;
        }
        goto LABEL_29;
      }
      goto LABEL_44;
    }
LABEL_43:
    v22 = 0;
LABEL_44:
    __break(0xC471u);
    goto LABEL_47;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v23;
  if (!v23 || !*((_DWORD *)v23 + 1))
    goto LABEL_8;
LABEL_29:
  WebCore::ResourceError::platformLazyInit(this);
  WTF::fastMalloc((WTF *)0x60);
  v21 = Inspector::ConsoleMessage::ConsoleMessage();
  Inspector::InspectorConsoleAgent::addMessageToConsole();
  if (v21)
  {
    v17 = (WTF *)MEMORY[0x19AEA5F58](v21, v16);
    WTF::fastFree(v17, v18);
  }
  result = (uint64_t)v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::WebDebuggerAgent::enabled(WebCore::WebDebuggerAgent *this)
{
  return *(WebCore::WebDebuggerAgent **)(*((_QWORD *)this + 32) + 136) == this && *((_BYTE *)this + 248) != 0;
}

uint64_t WebCore::WebDebuggerAgent::internalEnable(Inspector::InspectorDebuggerAgent *this)
{
  *(_QWORD *)(*((_QWORD *)this + 32) + 136) = this;
  return Inspector::InspectorDebuggerAgent::internalEnable(this);
}

uint64_t WebCore::WebDebuggerAgent::internalDisable(Inspector::InspectorDebuggerAgent *this)
{
  *(_QWORD *)(*((_QWORD *)this + 32) + 136) = 0;
  return Inspector::InspectorDebuggerAgent::internalDisable(this);
}

uint64_t *WebCore::WebDebuggerAgent::didAddEventListener(WebCore::WebDebuggerAgent *this, WebCore::EventTarget *a2, const WTF::AtomString *a3, WebCore::EventListener *a4, int a5)
{
  uint64_t *result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  WebCore::ScriptExecutionContext *v23;
  int v24;
  _BYTE v25[24];
  uint64_t v26;
  int v27;

  result = (uint64_t *)Inspector::InspectorDebuggerAgent::breakpointsActive(this);
  if ((_DWORD)result)
  {
    result = WebCore::EventTarget::eventListeners((uint64_t)a2, a3);
    v11 = *((unsigned int *)result + 3);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = *result;
      while (1)
      {
        v14 = *(_QWORD *)(v13 + 8 * v12);
        if (*(WebCore::EventListener **)(v14 + 8) == a4 && ((((*(_BYTE *)(v14 + 4) & 1) == 0) ^ a5) & 1) != 0)
          break;
        if (v11 == ++v12)
          return result;
      }
      if (v12 >= v11)
      {
        __break(0xC471u);
        return result;
      }
      v15 = *((_QWORD *)this + 33);
      if (v15)
      {
        v16 = *(_DWORD *)(v15 - 8);
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = *(_QWORD *)(v15 + 16 * v20);
        if (v21 == v14)
          return result;
        v22 = 1;
        while (v21)
        {
          v20 = (v20 + v22) & v16;
          v21 = *(_QWORD *)(v15 + 16 * v20);
          ++v22;
          if (v21 == v14)
            return result;
        }
      }
      v23 = (WebCore::ScriptExecutionContext *)(*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)a2 + 8))(a2);
      result = (uint64_t *)WebCore::ScriptExecutionContext::globalObject(v23);
      if (result)
      {
        v24 = *((_DWORD *)this + 72);
        *((_DWORD *)this + 72) = v24 + 1;
        v27 = v24;
        v26 = *(_QWORD *)(v13 + 8 * v12);
        WTF::HashMap<WebCore::RegisteredEventListener const*,int,WTF::DefaultHash<WebCore::RegisteredEventListener const*>,WTF::HashTraits<WebCore::RegisteredEventListener const*>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<WebCore::RegisteredEventListener const*,int &>((uint64_t *)this + 33, &v26, &v27, (uint64_t)v25);
        return (uint64_t *)Inspector::InspectorDebuggerAgent::didScheduleAsyncCall();
      }
    }
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::RegisteredEventListener const*,int,WTF::DefaultHash<WebCore::RegisteredEventListener const*>,WTF::HashTraits<WebCore::RegisteredEventListener const*>,WTF::HashTraits<int>,WTF::HashTableTraits>::take(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 != *a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == *a2)
        goto LABEL_8;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = v2 + 16 * v7;
  v10 = *(unsigned int *)(v12 + 8);
  *(_QWORD *)v12 = -1;
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(a1, v17 >> 1, 0);
  }
  return v10;
}

uint64_t WebCore::WebDebuggerAgent::willHandleEvent(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(result + 264);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 != a2)
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(_QWORD *)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_8;
      }
      v7 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v7 != *(_DWORD *)(v2 - 4))
    {
      v11 = a2;
      WTF::HashMap<WebCore::RegisteredEventListener const*,int,WTF::DefaultHash<WebCore::RegisteredEventListener const*>,WTF::HashTraits<WebCore::RegisteredEventListener const*>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<WebCore::RegisteredEventListener const*,int &>((uint64_t *)(result + 272), &v11, (_DWORD *)(v2 + 16 * v7 + 8), (uint64_t)&v10);
      return Inspector::InspectorDebuggerAgent::willDispatchAsyncCall();
    }
  }
  return result;
}

uint64_t *WebCore::WebDebuggerAgent::didHandleEvent(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = result[34];
  if (v2)
  {
    v3 = result;
    v4 = *(_DWORD *)(v2 - 8);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v2 + 16 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v2 + 16 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v2 - 4))
    {
      v11 = (_QWORD *)(v2 + 16 * v8);
      result = (uint64_t *)Inspector::InspectorDebuggerAgent::didDispatchAsyncCall();
      v12 = (_QWORD *)v3[34];
      if (!v12 || (v12 += 2 * *((unsigned int *)v12 - 1), v12 != v11))
      {
        if (v12 != v11)
        {
          result = v3 + 34;
          *v11 = -1;
          ++*(_DWORD *)(v3[34] - 16);
          v13 = v3[34];
          v14 = v13 ? *(_DWORD *)(v13 - 12) - 1 : -1;
          *(_DWORD *)(v13 - 12) = v14;
          v15 = *result;
          if (*result)
          {
            v16 = 6 * *(_DWORD *)(v15 - 12);
            v17 = *(_DWORD *)(v15 - 4);
            if (v16 < v17 && v17 >= 9)
              return (uint64_t *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(result, v17 >> 1, 0);
          }
        }
      }
    }
  }
  return result;
}

uint64_t *WebCore::WebDebuggerAgent::didFailPostMessage(uint64_t *this, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  if (a2)
  {
    v2 = this;
    v3 = this[35];
    if (v3)
    {
      v4 = *(_DWORD *)(v3 - 8);
      v5 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      v6 = v4 & (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16));
      v7 = *(_DWORD *)(v3 + 4 * v6);
      if (v7 != a2)
      {
        v8 = 1;
        while (v7)
        {
          v6 = ((_DWORD)v6 + v8) & v4;
          v7 = *(_DWORD *)(v3 + 4 * v6);
          ++v8;
          if (v7 == a2)
            goto LABEL_9;
        }
        v6 = *(unsigned int *)(v3 - 4);
      }
LABEL_9:
      if (v6 != *(_DWORD *)(v3 - 4))
      {
        v9 = (_DWORD *)(v3 + 4 * v6);
        this = (uint64_t *)Inspector::InspectorDebuggerAgent::didCancelAsyncCall();
        v10 = (_DWORD *)v2[35];
        if (!v10 || (v10 += *(v10 - 1), v10 != v9))
        {
          if (v10 != v9)
          {
            this = v2 + 35;
            v11 = -1;
            *v9 = -1;
            ++*(_DWORD *)(v2[35] - 16);
            v12 = v2[35];
            if (v12)
              v11 = *(_DWORD *)(v12 - 12) - 1;
            *(_DWORD *)(v12 - 12) = v11;
            v13 = *this;
            if (*this)
            {
              v14 = 6 * *(_DWORD *)(v13 - 12);
              v15 = *(_DWORD *)(v13 - 4);
              if (v14 < v15 && v15 >= 9)
                return (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(this, v15 >> 1, 0);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::WebDebuggerAgent::didDispatchPostMessage(uint64_t *this, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  if (a2)
  {
    v2 = this;
    v3 = this[35];
    if (v3)
    {
      v4 = *(_DWORD *)(v3 - 8);
      v5 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      v6 = v4 & (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16));
      v7 = *(_DWORD *)(v3 + 4 * v6);
      if (v7 != a2)
      {
        v8 = 1;
        while (v7)
        {
          v6 = ((_DWORD)v6 + v8) & v4;
          v7 = *(_DWORD *)(v3 + 4 * v6);
          ++v8;
          if (v7 == a2)
            goto LABEL_9;
        }
        v6 = *(unsigned int *)(v3 - 4);
      }
LABEL_9:
      if (v6 != *(_DWORD *)(v3 - 4))
      {
        v9 = (_DWORD *)(v3 + 4 * v6);
        this = (uint64_t *)Inspector::InspectorDebuggerAgent::didDispatchAsyncCall();
        v10 = (_DWORD *)v2[35];
        if (!v10 || (v10 += *(v10 - 1), v10 != v9))
        {
          if (v10 != v9)
          {
            this = v2 + 35;
            v11 = -1;
            *v9 = -1;
            ++*(_DWORD *)(v2[35] - 16);
            v12 = v2[35];
            if (v12)
              v11 = *(_DWORD *)(v12 - 12) - 1;
            *(_DWORD *)(v12 - 12) = v11;
            v13 = *this;
            if (*this)
            {
              v14 = 6 * *(_DWORD *)(v13 - 12);
              v15 = *(_DWORD *)(v13 - 4);
              if (v14 < v15 && v15 >= 9)
                return (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(this, v15 >> 1, 0);
            }
          }
        }
      }
    }
  }
  return this;
}

double WebCore::WebDebuggerAgent::didClearAsyncStackTraceData(WebCore::WebDebuggerAgent *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  Inspector::InspectorDebuggerAgent::didClearAsyncStackTraceData(this);
  v3 = *((_QWORD *)this + 33);
  if (v3)
  {
    *((_QWORD *)this + 33) = 0;
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  v4 = *((_QWORD *)this + 34);
  if (v4)
  {
    *((_QWORD *)this + 34) = 0;
    WTF::fastFree((WTF *)(v4 - 16), v2);
  }
  v5 = *((_QWORD *)this + 35);
  if (v5)
  {
    *((_QWORD *)this + 35) = 0;
    WTF::fastFree((WTF *)(v5 - 16), v2);
  }
  *(_QWORD *)&result = 0x100000001;
  *((_QWORD *)this + 36) = 0x100000001;
  return result;
}

uint64_t WebCore::SendGarbageCollectionEventsTask::timerFired(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  WTF *v5;
  unsigned int v6;
  int v7;
  WTF *v8;
  WTF *v9;

  v2 = this;
  v3 = (unsigned __int8 *)(this + 8);
  if (__ldaxr((unsigned __int8 *)(this + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this + 8);
LABEL_5:
  v5 = *(WTF **)(v2 + 16);
  v6 = *(_DWORD *)(v2 + 28);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  v7 = __ldxr(v3);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v3))
LABEL_9:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v6)
  {
    v8 = (WTF *)((char *)v5 + 24 * v6);
    v9 = v5;
    do
    {
      this = Inspector::InspectorHeapAgent::dispatchGarbageCollectedEvent();
      v9 = (WTF *)((char *)v9 + 24);
    }
    while (v9 != v8);
  }
  if (v5)
    return WTF::fastFree(v5, a2);
  return this;
}

void WebCore::WebHeapAgent::~WebHeapAgent(WebCore::WebHeapAgent *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *v5;

  *(_QWORD *)this = off_1E33F0FD8;
  *((_QWORD *)this + 2) = &unk_1E33F1070;
  *((_QWORD *)this + 3) = &unk_1E33F10D0;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
  {
    *(_QWORD *)(v2 + 32) = off_1E32051C0;
    v3 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v2 + 32));
    v5 = *(WTF **)(v2 + 16);
    if (v5)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::fastFree((WTF *)v2, v4);
  }
  Inspector::InspectorHeapAgent::~InspectorHeapAgent(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E33F0FD8;
  *((_QWORD *)this + 2) = &unk_1E33F1070;
  *((_QWORD *)this + 3) = &unk_1E33F10D0;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
  {
    *(_QWORD *)(v2 + 32) = off_1E32051C0;
    v3 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v2 + 32));
    v5 = *(WTF **)(v2 + 16);
    if (v5)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::fastFree((WTF *)v2, v4);
  }
  Inspector::InspectorHeapAgent::~InspectorHeapAgent(this);
  WTF::fastFree(v6, v7);
}

void `non-virtual thunk to'WebCore::WebHeapAgent::~WebHeapAgent(WebCore::WebHeapAgent *this)
{
  uint64_t v1;
  Inspector::InspectorHeapAgent *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;

  *(_QWORD *)this = &unk_1E33F1070;
  *((_QWORD *)this + 1) = &unk_1E33F10D0;
  v1 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this - 2) = off_1E33F0FD8;
  v2 = (WebCore::WebHeapAgent *)((char *)this - 16);
  if (v1)
  {
    *(_QWORD *)(v1 + 32) = off_1E32051C0;
    v3 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 32));
    v5 = *(WTF **)(v1 + 16);
    if (v5)
    {
      *(_QWORD *)(v1 + 16) = 0;
      *(_DWORD *)(v1 + 24) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::fastFree((WTF *)v1, v4);
  }
  Inspector::InspectorHeapAgent::~InspectorHeapAgent(v2);
}

{
  uint64_t v1;
  Inspector::InspectorHeapAgent *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;

  *((_QWORD *)this - 1) = &unk_1E33F1070;
  *(_QWORD *)this = &unk_1E33F10D0;
  v1 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this - 3) = off_1E33F0FD8;
  v2 = (WebCore::WebHeapAgent *)((char *)this - 24);
  if (v1)
  {
    *(_QWORD *)(v1 + 32) = off_1E32051C0;
    v3 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 32));
    v5 = *(WTF **)(v1 + 16);
    if (v5)
    {
      *(_QWORD *)(v1 + 16) = 0;
      *(_DWORD *)(v1 + 24) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::fastFree((WTF *)v1, v4);
  }
  Inspector::InspectorHeapAgent::~InspectorHeapAgent(v2);
}

{
  uint64_t v1;
  Inspector::InspectorHeapAgent *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = &unk_1E33F1070;
  *((_QWORD *)this + 1) = &unk_1E33F10D0;
  v1 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this - 2) = off_1E33F0FD8;
  v2 = (WebCore::WebHeapAgent *)((char *)this - 16);
  if (v1)
  {
    *(_QWORD *)(v1 + 32) = off_1E32051C0;
    v3 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 32));
    v5 = *(WTF **)(v1 + 16);
    if (v5)
    {
      *(_QWORD *)(v1 + 16) = 0;
      *(_DWORD *)(v1 + 24) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::fastFree((WTF *)v1, v4);
  }
  Inspector::InspectorHeapAgent::~InspectorHeapAgent(v2);
  WTF::fastFree(v6, v7);
}

{
  uint64_t v1;
  Inspector::InspectorHeapAgent *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  WTF *v6;
  void *v7;

  *((_QWORD *)this - 1) = &unk_1E33F1070;
  *(_QWORD *)this = &unk_1E33F10D0;
  v1 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this - 3) = off_1E33F0FD8;
  v2 = (WebCore::WebHeapAgent *)((char *)this - 24);
  if (v1)
  {
    *(_QWORD *)(v1 + 32) = off_1E32051C0;
    v3 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 32));
    v5 = *(WTF **)(v1 + 16);
    if (v5)
    {
      *(_QWORD *)(v1 + 16) = 0;
      *(_DWORD *)(v1 + 24) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::fastFree((WTF *)v1, v4);
  }
  Inspector::InspectorHeapAgent::~InspectorHeapAgent(v2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::WebHeapAgent::enable(WebCore::WebHeapAgent *this)
{
  uint64_t result;
  uint64_t v3;

  result = Inspector::InspectorHeapAgent::enable(this);
  v3 = *(_QWORD *)(*((_QWORD *)this + 10) + 16);
  if (v3)
    *(_QWORD *)(v3 + 48) = this;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WebHeapAgent::enable(WebCore::WebHeapAgent *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (char *)this - 16;
  result = Inspector::InspectorHeapAgent::enable((WebCore::WebHeapAgent *)((char *)this - 16));
  v4 = *(_QWORD *)(*((_QWORD *)this + 8) + 16);
  if (v4)
    *(_QWORD *)(v4 + 48) = v2;
  return result;
}

uint64_t WebCore::WebHeapAgent::disable(WebCore::WebHeapAgent *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  WTF *v6;
  int v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 11);
  v4 = (unsigned __int8 *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)(v3 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v3 + 8);
LABEL_5:
  if (*(_DWORD *)(v3 + 24))
  {
    if (*(_DWORD *)(v3 + 28))
      *(_DWORD *)(v3 + 28) = 0;
    v6 = *(WTF **)(v3 + 16);
    if (v6)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v6, a2);
    }
  }
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v4))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 8));
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v3 + 32));
  v8 = *(_QWORD *)(*((_QWORD *)this + 10) + 16);
  if (v8)
    *(_QWORD *)(v8 + 48) = 0;
  return Inspector::InspectorHeapAgent::disable(this);
}

uint64_t `non-virtual thunk to'WebCore::WebHeapAgent::disable(WebCore::WebHeapAgent *this, void *a2)
{
  return WebCore::WebHeapAgent::disable((WebCore::WebHeapAgent *)((char *)this - 16), a2);
}

uint64_t WebCore::WebHeapAgent::dispatchGarbageCollectedEvent(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  double v12;
  int v13;
  uint64_t result;
  __int128 v15;
  double v16;

  LODWORD(v15) = a2;
  *((double *)&v15 + 1) = a3;
  v16 = a4;
  v4 = *(_QWORD *)(a1 + 88);
  v5 = (unsigned __int8 *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)(v4 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4 + 8);
LABEL_5:
  v7 = (_QWORD *)(v4 + 16);
  v8 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v8 == *(_DWORD *)(v4 + 24))
  {
    v9 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v15);
    v10 = *(_QWORD *)(v4 + 16) + 24 * *(unsigned int *)(v4 + 28);
    v11 = *(_OWORD *)v9;
    v12 = *((double *)v9 + 2);
  }
  else
  {
    v10 = *v7 + 24 * v8;
    v11 = v15;
    v12 = v16;
  }
  *(double *)(v10 + 16) = v12;
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(v4 + 28);
  v13 = __ldxr(v5);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 8));
  result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v4 + 32));
  if ((result & 1) == 0)
    return WTF::RunLoop::TimerBase::start();
  return result;
}

void `non-virtual thunk to'WebCore::PageAuditAgent::~PageAuditAgent(WebCore::PageAuditAgent *this)
{
  Inspector::InspectorAuditAgent::~InspectorAuditAgent((WebCore::PageAuditAgent *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  Inspector::InspectorAuditAgent::~InspectorAuditAgent((WebCore::PageAuditAgent *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

void WebCore::PageAuditAgent::~PageAuditAgent(WebCore::PageAuditAgent *this)
{
  WTF *v1;
  void *v2;

  Inspector::InspectorAuditAgent::~InspectorAuditAgent(this);
  WTF::fastFree(v1, v2);
}

WTF::StringImpl *WebCore::PageAuditAgent::injectedScriptForEval@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, Inspector::InjectedScript *a4@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v7;
  BOOL v8;
  Inspector::InjectedScriptManager *v9;
  WebCore::WindowProxy *v10;
  WebCore::DOMWrapperWorld *v11;
  WebCore::JSWindowProxy *v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::WindowProxy *v16;
  WTF::StringImpl *v17;

  if (*(_BYTE *)(a3 + 4))
  {
    result = (WTF::StringImpl *)Inspector::InjectedScriptManager::injectedScriptForId(*(Inspector::InjectedScriptManager **)(a1 + 32));
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 160);
    if (v7)
      v8 = *(_BYTE *)(v7 + 144) == 0;
    else
      v8 = 0;
    if (v8)
    {
      v9 = *(Inspector::InjectedScriptManager **)(a1 + 32);
      v10 = *(WebCore::WindowProxy **)(v7 + 112);
      {
        v11 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
      }
      else
      {
        v16 = *(WebCore::WindowProxy **)(v7 + 112);
        v15 = WebCore::g_commonVMOrNull;
        if (!WebCore::g_commonVMOrNull)
          v15 = WebCore::commonVMSlow(0);
        v11 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v15 + 41456) + 16);
        WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v11;
        v10 = v16;
      }
      v12 = WebCore::WindowProxy::jsWindowProxy(v10, v11);
      result = (WTF::StringImpl *)Inspector::InjectedScriptManager::injectedScriptFor(v9, *((JSC::JSGlobalObject **)v12 + 2));
    }
    else
    {
      result = (WTF::StringImpl *)Inspector::InjectedScript::InjectedScript(a4);
    }
  }
  v13 = (_QWORD *)*((_QWORD *)a4 + 3);
  if (!v13 || !*v13)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = *a2;
    *a2 = v17;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::PageAuditAgent::populateAuditObject(uint64_t a1, uint64_t a2, unsigned __int8 ***a3)
{
  uint64_t result;
  JSC::VM *v7;
  WTF *v8;
  void *v9;
  unint64_t v10;
  WTF *v11;
  unsigned __int8 *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  void *v16;
  unint64_t v17;
  WTF *v18;
  unsigned __int8 *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF *v25;
  unsigned __int8 *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  void *v30;
  _BYTE v31[8];
  WTF *v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  uint64_t v36;

  result = Inspector::InspectorAuditAgent::populateAuditObject();
  if (a2)
  {
    v7 = *(JSC::VM **)(a2 + 56);
    MEMORY[0x19AEA3294](v31, v7);
    v8 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *((_QWORD *)v8 + 1) = a1;
    v32 = v8;
    v10 = WebCore::createWrapper<WebCore::InspectorAuditAccessibilityObject,WebCore::InspectorAuditAccessibilityObject>(a2, &v32);
    v11 = v32;
    v32 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WTF::fastFree(v11, v9);
        if (!v10)
          goto LABEL_11;
        goto LABEL_6;
      }
      --*(_DWORD *)v11;
    }
    if (!v10)
      goto LABEL_11;
LABEL_6:
    if (*a3)
      v12 = **a3;
    else
      v12 = 0;
    WTF::AtomStringImpl::addLiteral();
    v13 = v32;
    v32 = 0;
    v33 = v12;
    v34 = -1;
    v35 = 0x1000000;
    v36 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v12, v7, (unint64_t)v13, v10, 0, (uint64_t)&v32);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
LABEL_11:
    v15 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v15 = 1;
    *((_QWORD *)v15 + 1) = a1;
    v32 = v15;
    v17 = WebCore::createWrapper<WebCore::InspectorAuditDOMObject,WebCore::InspectorAuditDOMObject>(a2, &v32);
    v18 = v32;
    v32 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
      {
        WTF::fastFree(v18, v16);
        if (!v17)
          goto LABEL_20;
        goto LABEL_15;
      }
      --*(_DWORD *)v18;
    }
    if (!v17)
      goto LABEL_20;
LABEL_15:
    if (*a3)
      v19 = **a3;
    else
      v19 = 0;
    WTF::AtomStringImpl::addLiteral();
    v20 = v32;
    v32 = 0;
    v33 = v19;
    v34 = -1;
    v35 = 0x1000000;
    v36 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v19, v7, (unint64_t)v20, v17, 0, (uint64_t)&v32);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
LABEL_20:
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x88);
    *(_DWORD *)v22 = 1;
    v22[1] = a1;
    v22[2] = &off_1E33EDE20;
    v22[3] = 0;
    v22[4] = &off_1E33EDE60;
    v22[5] = 0;
    v22[6] = &off_1E33EDEA8;
    v22[7] = 0;
    v22[8] = &off_1E33EDF20;
    v22[9] = 0;
    v22[10] = &off_1E33EDF98;
    v22[11] = 0;
    v22[12] = &off_1E33EDFD8;
    v22[14] = 0;
    v22[15] = 0;
    v22[13] = 0;
    *(_QWORD *)((char *)v22 + 125) = 0;
    v32 = (WTF *)v22;
    v24 = WebCore::createWrapper<WebCore::InspectorAuditResourcesObject,WebCore::InspectorAuditResourcesObject>(a2, &v32);
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
      {
        WebCore::InspectorAuditResourcesObject::~InspectorAuditResourcesObject(v25, v23);
        WTF::fastFree(v29, v30);
        if (v24)
          goto LABEL_24;
        return MEMORY[0x19AEA32A0](v31);
      }
      --*(_DWORD *)v25;
    }
    if (v24)
    {
LABEL_24:
      if (*a3)
        v26 = **a3;
      else
        v26 = 0;
      WTF::AtomStringImpl::addLiteral();
      v27 = v32;
      v32 = 0;
      v33 = v26;
      v34 = -1;
      v35 = 0x1000000;
      v36 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v26, v7, (unint64_t)v27, v24, 0, (uint64_t)&v32);
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v28);
        else
          *(_DWORD *)v27 -= 2;
      }
    }
    return MEMORY[0x19AEA32A0](v31);
  }
  return result;
}

void WebCore::PageAuditAgent::muteConsole(WebCore::PageAuditAgent *this)
{
  ++WebCore::muteCount;
}

void WebCore::PageAuditAgent::unmuteConsole(WebCore::PageAuditAgent *this)
{
  --WebCore::muteCount;
}

void `non-virtual thunk to'WebCore::PageCanvasAgent::~PageCanvasAgent(WebCore::PageCanvasAgent *this, WTF::StringImpl *a2)
{
  WebCore::InspectorCanvasAgent::~InspectorCanvasAgent((WebCore::PageCanvasAgent *)((char *)this - 32), a2);
}

{
  WebCore::InspectorCanvasAgent::~InspectorCanvasAgent((WebCore::PageCanvasAgent *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorCanvasAgent::~InspectorCanvasAgent((WebCore::PageCanvasAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorCanvasAgent::~InspectorCanvasAgent((WebCore::PageCanvasAgent *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::PageCanvasAgent::~PageCanvasAgent(WebCore::PageCanvasAgent *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::InspectorCanvasAgent::~InspectorCanvasAgent(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::PageCanvasAgent::enabled(WebCore::PageCanvasAgent *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  return *(WebCore::PageCanvasAgent **)(v1 + 104) == this && *(_QWORD *)(v1 + 96) == (_QWORD)this;
}

WebCore::InspectorCanvasAgent *WebCore::PageCanvasAgent::internalEnable(WebCore::InspectorCanvasAgent *this)
{
  *(_QWORD *)(*((_QWORD *)this + 2) + 104) = this;
  return WebCore::InspectorCanvasAgent::internalEnable(this);
}

WTF *WebCore::PageCanvasAgent::internalDisable(WebCore::PageCanvasAgent *this, WebCore::ScriptExecutionContext *a2)
{
  uint64_t v3;
  WTF *result;

  v3 = *((_QWORD *)this + 2);
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  result = WebCore::InspectorCanvasAgent::reset(this, a2);
  if (*((_BYTE *)this + 304))
    *((_BYTE *)this + 304) = 0;
  return result;
}

WTF::StringImpl *WebCore::PageCanvasAgent::requestNode@<X0>(WebCore::PageCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _DWORD *a4@<X8>)
{
  WTF *v6;
  WebCore::InspectorCanvas *v7;
  uint64_t v8;
  int v9;
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int i;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  void *v26;
  int v27;
  int v28;
  WTF::StringImpl *result;
  WTF *v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  v32 = 0;
  v6 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 8, a2, a3);
  if (v6)
  {
    v7 = v6;
    ++*(_DWORD *)v6;
    v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 2) + 8) + 32);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
      v10 = (WebCore::Node *)(v8 - 112);
    else
      v10 = 0;
    if ((v9 & 1) == 0)
      goto LABEL_21;
    v11 = *(_QWORD *)(*(_QWORD *)(v8 - 72) + 8);
    if (!v11)
      goto LABEL_21;
    v12 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
    ++*(_DWORD *)(v12 + 88);
    v13 = *(_QWORD *)(v11 + 16);
    v14 = v13 & 0xFFFFFFFFFFFFLL;
    if ((v13 & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_21;
    if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 8))
      goto LABEL_21;
    v15 = *(_QWORD *)(v12 + 80);
    if (!v15)
      goto LABEL_21;
    v16 = *(_DWORD *)(v15 - 8);
    v17 = (v14 + ~(v13 << 32)) ^ ((unint64_t)(v14 + ~(v13 << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    for (i = 1; ; v20 = (v22 + i++) & v16)
    {
      v22 = v20;
      v23 = *(_QWORD *)(v15 + 16 * v20);
      if (v23 != -1)
      {
        if (!v23)
          goto LABEL_21;
        if (v23 == v14)
          break;
      }
    }
    v26 = (void *)*(unsigned int *)(v15 + 16 * v22 + 8);
    if ((_DWORD)v26)
    {
      v27 = WebCore::InspectorDOMAgent::pushNodeToFrontend((WebCore::InspectorDOMAgent *)v12, &v32, v26, v10);
      v28 = 0;
      *a4 = v27;
    }
    else
    {
LABEL_21:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = 1;
    }
    a4[2] = v28;
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::InspectorCanvas::~InspectorCanvas(v7, v24);
      WTF::fastFree(v30, v31);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = v33;
    v32 = v33;
    if (v33)
      *(_DWORD *)v33 += 2;
    *(_QWORD *)a4 = v25;
    a4[2] = 1;
  }
  result = v32;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v32, v24);
    else
      *(_DWORD *)v32 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::PageCanvasAgent::requestNode@<X0>(WebCore::PageCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _DWORD *a4@<X8>)
{
  return WebCore::PageCanvasAgent::requestNode((WebCore::PageCanvasAgent *)((char *)this - 32), a2, a3, a4);
}

WTF::StringImpl *WebCore::PageCanvasAgent::requestClientNodes@<X0>(WebCore::PageCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  WebCore::Node **v10;
  uint64_t v11;
  WebCore::Node **v12;
  WebCore::Node **v13;
  uint64_t v14;
  WebCore::Node **v15;
  WTF::StringImpl *v16;
  WebCore::Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int i;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  WTF::JSONImpl::Value *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WebCore::Node **v37;
  WTF::StringImpl *result;
  WTF *v39;
  void *v40;
  WebCore::Node **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;

  v42 = 0;
  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
  if (!v5)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_15:
    *(_DWORD *)(a4 + 8) = 1;
    goto LABEL_49;
  }
  v6 = WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkResourcesData::ResourceData>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 8, a2, a3);
  if (!v6)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16 = v43;
    v42 = v43;
    if (v43)
      *(_DWORD *)v43 += 2;
    *(_QWORD *)a4 = v16;
    goto LABEL_15;
  }
  v7 = v6;
  ++*(_DWORD *)v6;
  v8 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v8);
  WebCore::CanvasBase::cssCanvasClients(*(WebCore::CanvasBase **)(*(_QWORD *)(*((_QWORD *)v7 + 2) + 8) + 32), &v41);
  v10 = v41;
  if (v41)
  {
    v11 = *((unsigned int *)v41 - 1);
    v12 = &v41[v11];
    if (*((_DWORD *)v41 - 3))
    {
      v13 = v41;
      if ((_DWORD)v11)
      {
        v14 = 8 * v11;
        v13 = v41;
        while ((unint64_t)*v13 + 1 <= 1)
        {
          ++v13;
          v14 -= 8;
          if (!v14)
          {
            v13 = v12;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    v13 = &v41[v11];
  }
  else
  {
    v13 = 0;
    v11 = 0;
  }
  v12 = &v41[v11];
  if (!v41)
  {
    v15 = 0;
    goto LABEL_20;
  }
LABEL_10:
  v15 = &v41[*((unsigned int *)v41 - 1)];
LABEL_20:
  if (v15 != v13)
  {
    do
    {
      v17 = *v13;
      v18 = *(_QWORD *)(*((_QWORD *)*v13 + 5) + 8);
      if (v18)
      {
        ++*(_DWORD *)(v5 + 88);
        v19 = *(_QWORD *)(v18 + 16);
        v20 = v19 & 0xFFFFFFFFFFFFLL;
        if ((v19 & 0xFFFFFFFFFFFFLL) != 0)
        {
          if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 8))
          {
            v21 = *(_QWORD *)(v5 + 80);
            if (v21)
            {
              v22 = *(_DWORD *)(v21 - 8);
              v23 = (v20 + ~(v19 << 32)) ^ ((unint64_t)(v20 + ~(v19 << 32)) >> 22);
              v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
              v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
              v26 = v22 & ((v25 >> 31) ^ v25);
              for (i = 1; ; ++i)
              {
                v28 = v26;
                v29 = *(_QWORD *)(v21 + 16 * v26);
                if (v29 != -1)
                {
                  if (!v29)
                    goto LABEL_37;
                  if (v29 == v20)
                    break;
                }
                v26 = (v28 + i) & v22;
              }
              v30 = (void *)*(unsigned int *)(v21 + 16 * v28 + 8);
              if ((_DWORD)v30)
              {
                v31 = (WTF::JSONImpl::Value *)WebCore::InspectorDOMAgent::pushNodeToFrontend((WebCore::InspectorDOMAgent *)v5, &v42, v30, v17);
                WTF::JSONImpl::Value::create(v31);
                v32 = *(unsigned int *)(v8 + 28);
                if ((_DWORD)v32 == *(_DWORD *)(v8 + 24))
                {
                  v33 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 16), v32 + 1, (unint64_t)&v43);
                  v32 = *(unsigned int *)(v8 + 28);
                  v34 = *(_QWORD *)(v8 + 16);
                  v35 = *(WTF::StringImpl **)v33;
                  *(_QWORD *)v33 = 0;
                }
                else
                {
                  v34 = *(_QWORD *)(v8 + 16);
                  v35 = v43;
                  v43 = 0;
                }
                *(_QWORD *)(v34 + 8 * v32) = v35;
                *(_DWORD *)(v8 + 28) = v32 + 1;
                v36 = v43;
                v43 = 0;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v36;
                }
              }
            }
          }
        }
      }
LABEL_37:
      v37 = v13 + 1;
      v13 = v12;
      if (v37 != v12)
      {
        v13 = v37;
        while ((unint64_t)*v13 + 1 <= 1)
        {
          if (++v13 == v12)
          {
            v13 = v12;
            break;
          }
        }
      }
    }
    while (v13 != v15);
    v10 = v41;
  }
  if (v10)
    WTF::fastFree((WTF *)(v10 - 2), v9);
  *(_QWORD *)a4 = v8;
  *(_DWORD *)(a4 + 8) = 0;
  if (*(_DWORD *)v7 == 1)
  {
    WebCore::InspectorCanvas::~InspectorCanvas(v7, (WTF::StringImpl *)v9);
    WTF::fastFree(v39, v40);
  }
  else
  {
    --*(_DWORD *)v7;
  }
LABEL_49:
  result = v42;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v42 -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::PageCanvasAgent::requestClientNodes@<X0>(WebCore::PageCanvasAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::PageCanvasAgent::requestClientNodes((WebCore::PageCanvasAgent *)((char *)this - 32), a2, a3, a4);
}

WTF *WebCore::PageCanvasAgent::frameNavigated(WTF *this, WebCore::LocalFrame *a2)
{
  WebCore::InspectorCanvasAgent *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v7;
  WTF *v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::InspectorCanvas **v15;
  WebCore::InspectorCanvas *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;

  v2 = this;
  if (*(WebCore::LocalFrame **)(*((_QWORD *)a2 + 16) + 8) == a2)
    return WebCore::InspectorCanvasAgent::reset(this, a2);
  v18 = 0;
  v19 = 0;
  if (*((_DWORD *)this + 19))
  {
    v4 = *((unsigned int *)this + 18);
    if ((_DWORD)v4)
    {
      v5 = 16 * v4;
      for (i = (_QWORD *)*((_QWORD *)this + 8); !*i; i += 2)
      {
        v5 -= 16;
        if (!v5)
          return this;
      }
    }
    else
    {
      i = (_QWORD *)*((_QWORD *)this + 8);
    }
    v7 = *((_QWORD *)this + 8) + 16 * v4;
    if (i != (_QWORD *)v7)
    {
      v8 = 0;
      v9 = 0;
LABEL_12:
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(i[1] + 16) + 8) + 32);
      this = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      if ((_DWORD)this)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 - 72) + 8) + 528);
        if (v12)
        {
          if (*(WebCore::LocalFrame **)(v12 + 8) == a2)
          {
            v13 = i[1];
            v17 = v13;
            if (v9 == (_DWORD)v19)
            {
              this = (WTF *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v18, v9 + 1, (unint64_t)&v17);
              v9 = HIDWORD(v19);
              v8 = v18;
              *((_QWORD *)v18 + HIDWORD(v19)) = *(_QWORD *)this;
            }
            else
            {
              *((_QWORD *)v8 + v9) = v13;
            }
            HIDWORD(v19) = ++v9;
          }
        }
      }
      while (1)
      {
        i += 2;
        if (i == (_QWORD *)v7)
          break;
        if (*i)
        {
          if (i != (_QWORD *)v7)
            goto LABEL_12;
          break;
        }
      }
      if (v9)
      {
        v14 = 8 * v9;
        v15 = (WebCore::InspectorCanvas **)v8;
        do
        {
          v16 = *v15++;
          this = WebCore::InspectorCanvasAgent::unbindCanvas(v2, v16);
          v14 -= 8;
        }
        while (v14);
      }
      if (v8)
      {
        v18 = 0;
        LODWORD(v19) = 0;
        return (WTF *)WTF::fastFree(v8, v11);
      }
    }
  }
  return this;
}

uint64_t WebCore::PageCanvasAgent::didChangeCSSCanvasClientNodes(WebCore::PageCanvasAgent *this, WebCore::CanvasBase *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  void *v11;

  result = (*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)a2 + 88))(a2);
  if (result && *((_DWORD *)this + 19))
  {
    v4 = *((unsigned int *)this + 18);
    if ((_DWORD)v4)
    {
      v5 = 16 * v4;
      for (i = (_QWORD *)*((_QWORD *)this + 8); !*i; i += 2)
      {
        v5 -= 16;
        if (!v5)
          return result;
      }
    }
    else
    {
      i = (_QWORD *)*((_QWORD *)this + 8);
    }
    v7 = *((_QWORD *)this + 8) + 16 * v4;
LABEL_10:
    if (i != (_QWORD *)v7)
    {
      v8 = (_QWORD *)i[1];
      if (*(_QWORD *)(v8[2] + 8) == result)
      {
        ++*(_DWORD *)v8;
        result = Inspector::CanvasFrontendDispatcher::clientNodesChanged(*((Inspector::CanvasFrontendDispatcher **)this + 7), (const WTF::String *)(v8 + 1));
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::InspectorCanvas::~InspectorCanvas((WebCore::InspectorCanvas *)v8, v9);
          return WTF::fastFree(v10, v11);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      else
      {
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v7)
            break;
          if (*i)
            goto LABEL_10;
        }
      }
    }
  }
  return result;
}

BOOL WebCore::PageCanvasAgent::matchesCurrentContext(WebCore::PageCanvasAgent *this, WebCore::ScriptExecutionContext *a2)
{
  uint64_t v3;

  if (!a2 || *((_BYTE *)a2 + 274))
    return 0;
  v3 = *((_QWORD *)a2 + 42);
  if (v3)
  {
    v3 = *(_QWORD *)(v3 + 8);
    if (v3)
    {
      v3 = *(_QWORD *)(v3 + 24);
      if (v3)
        v3 = *(_QWORD *)(v3 + 8);
    }
  }
  return v3 == *((_QWORD *)this + 39);
}

void `non-virtual thunk to'WebCore::PageConsoleAgent::~PageConsoleAgent(WebCore::PageConsoleAgent *this)
{
  Inspector::InspectorConsoleAgent::~InspectorConsoleAgent((WebCore::PageConsoleAgent *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  Inspector::InspectorConsoleAgent::~InspectorConsoleAgent((WebCore::PageConsoleAgent *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

void WebCore::PageConsoleAgent::~PageConsoleAgent(WebCore::PageConsoleAgent *this)
{
  WTF *v1;
  void *v2;

  Inspector::InspectorConsoleAgent::~InspectorConsoleAgent(this);
  WTF::fastFree(v1, v2);
}

WTF::StringImpl *WebCore::PageConsoleAgent::getLoggingChannels@<X0>(uint64_t a1@<X8>)
{
  WTF::JSONImpl::ArrayBase *v3;
  WTF::StringImpl *result;
  uint64_t *v5;
  uint64_t v6;

  v3 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  v5 = &v6;
  v6 = WTF::JSONImpl::ArrayBase::ArrayBase(v3);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x51);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x52);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x53);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x54);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x55);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x56);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x57);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x58);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x59);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x5A);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x5B);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x5C);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x5D);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x5E);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x5F);
  WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x60);
  result = WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(&v5, (Inspector::Protocol::Helpers *)0x61);
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

WTF::StringImpl *WebCore::PageConsoleAgent::getLoggingChannels(void)::$_0::operator()(uint64_t **a1, Inspector::Protocol::Helpers *this)
{
  WTF::StringImpl *v4;
  _BYTE *LogChannel;
  WTF::StringImpl *result;
  unint64_t v7;
  uint64_t v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  const WTF::String *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  _DWORD **v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD **v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  _DWORD *v44;
  WTF::StringImpl *v45[2];
  char v46;

  Inspector::Protocol::Helpers::getEnumConstantValue(this);
  {
    WebCore::LogChannels::LogChannels((WebCore::LogChannels *)&WebCore::logChannels(void)::logChannels);
  }
  LogChannel = (_BYTE *)WTF::LogChannels::getLogChannel((WTF::LogChannels *)&WebCore::logChannels(void)::logChannels, (const WTF::String *)v45);
  result = v45[0];
  v45[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      if (!LogChannel)
        return result;
      goto LABEL_7;
    }
    *(_DWORD *)result -= 2;
  }
  if (!LogChannel)
    return result;
LABEL_7:
  if (*LogChannel && (v7 = (char)LogChannel[16], v7 <= 4))
    v8 = dword_1969F2438[v7];
  else
    v8 = 98;
  WTF::JSONImpl::Object::create(result);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue(this);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v42, v9);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v41 + 16), &v43, (const WTF::StringImpl *)&v44, (uint64_t)v45);
  if (v46)
  {
    v11 = (uint64_t *)(v41 + 24);
    v12 = *(unsigned int *)(v41 + 36);
    if ((_DWORD)v12 == *(_DWORD *)(v41 + 32))
    {
      v35 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v43);
      v12 = *(unsigned int *)(v41 + 36);
      v36 = *(_QWORD *)(v41 + 24);
      v37 = *v35;
      if (*v35)
        *v37 += 2;
      *(_QWORD *)(v36 + 8 * v12) = v37;
    }
    else
    {
      v13 = *v11;
      v14 = v43;
      if (v43)
        *(_DWORD *)v43 += 2;
      *(_QWORD *)(v13 + 8 * v12) = v14;
    }
    *(_DWORD *)(v41 + 36) = v12 + 1;
  }
  v15 = v44;
  v44 = 0;
  if (v15)
  {
    if (*v15 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v15;
  }
  v16 = v42;
  v42 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v10);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v43;
  v43 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v10);
    else
      *(_DWORD *)v17 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v8);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v42, v18);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v41 + 16), &v43, (const WTF::StringImpl *)&v44, (uint64_t)v45);
  if (v46)
  {
    v20 = (uint64_t *)(v41 + 24);
    v21 = *(unsigned int *)(v41 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v41 + 32))
    {
      v38 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v43);
      v21 = *(unsigned int *)(v41 + 36);
      v39 = *(_QWORD *)(v41 + 24);
      v40 = *v38;
      if (*v38)
        *v40 += 2;
      *(_QWORD *)(v39 + 8 * v21) = v40;
    }
    else
    {
      v22 = *v20;
      v23 = v43;
      if (v43)
        *(_DWORD *)v43 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v41 + 36) = v21 + 1;
  }
  v24 = v44;
  v44 = 0;
  if (v24)
  {
    if (*v24 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v24;
  }
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v19);
    else
      *(_DWORD *)v25 -= 2;
  }
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  v26 = **a1;
  v27 = *(unsigned int *)(v26 + 28);
  if ((_DWORD)v27 == *(_DWORD *)(v26 + 24))
  {
    v28 = v27 + (v27 >> 2);
    if (v28 >= 0x10)
      v29 = v28 + 1;
    else
      v29 = 16;
    if (v29 <= v27 + 1)
      v30 = v27 + 1;
    else
      v30 = v29;
    if (v30 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v31 = *(void **)(v26 + 16);
    v32 = (void *)WTF::fastMalloc((WTF *)(8 * v30));
    *(_DWORD *)(v26 + 24) = v30;
    *(_QWORD *)(v26 + 16) = v32;
    result = (WTF::StringImpl *)memcpy(v32, v31, 8 * v27);
    if (v31)
    {
      if (*(void **)(v26 + 16) == v31)
      {
        *(_QWORD *)(v26 + 16) = 0;
        *(_DWORD *)(v26 + 24) = 0;
      }
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)v31, v33);
    }
    v27 = *(unsigned int *)(v26 + 28);
    v34 = (_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * v27);
  }
  else
  {
    v34 = (_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * v27);
  }
  *v34 = v41;
  *(_DWORD *)(v26 + 28) = v27 + 1;
  return result;
}

WTF::StringImpl *WebCore::PageConsoleAgent::setLoggingChannelLevel@<X0>(Inspector::Protocol::Helpers *this@<X1>, WTF::StringImpl *result@<X0>, int a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  switch(a3)
  {
    case 'd':
      v9 = *((_QWORD *)result + 13);
      Inspector::Protocol::Helpers::getEnumConstantValue(this);
      v6 = v9;
      v7 = 1;
      v8 = 4;
      break;
    case 'c':
      v10 = *((_QWORD *)result + 13);
      Inspector::Protocol::Helpers::getEnumConstantValue(this);
      v6 = v10;
      v7 = 1;
      v8 = 3;
      break;
    case 'b':
      v5 = *((_QWORD *)result + 13);
      Inspector::Protocol::Helpers::getEnumConstantValue(this);
      v6 = v5;
      v7 = 0;
      v8 = 1;
      break;
    default:
      goto LABEL_10;
  }
  WebCore::Page::configureLoggingChannel(v6, (WTF::String *)&v12, v7, v8);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_10:
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::PageConsoleAgent::setLoggingChannelLevel@<X0>(uint64_t a1@<X0>, Inspector::Protocol::Helpers *a2@<X1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  return WebCore::PageConsoleAgent::setLoggingChannelLevel(a2, (WTF::StringImpl *)(a1 - 16), a3, a4);
}

void WebCore::PageDOMDebuggerAgent::~PageDOMDebuggerAgent(WebCore::PageDOMDebuggerAgent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    WTF::RefCounted<JSC::Breakpoint>::deref(v3, a2);
  v4 = *((_QWORD *)this + 23);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)(v4 + 8);
      do
      {
        if (*(v6 - 1) != -1)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
            WTF::RefCounted<JSC::Breakpoint>::deref(v7, a2);
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v8 = *((_QWORD *)this + 22);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (uint64_t *)(v8 + 8);
      do
      {
        if (*(v10 - 1) != -1)
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
            WTF::RefCounted<JSC::Breakpoint>::deref(v11, a2);
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v12 = *((_QWORD *)this + 21);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v13)
    {
      v14 = (uint64_t *)(v12 + 8);
      do
      {
        if (*(v14 - 1) != -1)
        {
          v15 = *v14;
          *v14 = 0;
          if (v15)
            WTF::RefCounted<JSC::Breakpoint>::deref(v15, a2);
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  WebCore::InspectorDOMDebuggerAgent::~InspectorDOMDebuggerAgent(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::PageDOMDebuggerAgent::~PageDOMDebuggerAgent(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::PageDOMDebuggerAgent::~PageDOMDebuggerAgent(WebCore::PageDOMDebuggerAgent *this, WTF::StringImpl *a2)
{
  WebCore::PageDOMDebuggerAgent::~PageDOMDebuggerAgent((WebCore::PageDOMDebuggerAgent *)((char *)this - 32), a2);
}

{
  WebCore::PageDOMDebuggerAgent::~PageDOMDebuggerAgent((WebCore::PageDOMDebuggerAgent *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::PageDOMDebuggerAgent::~PageDOMDebuggerAgent((WebCore::PageDOMDebuggerAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::PageDOMDebuggerAgent::~PageDOMDebuggerAgent((WebCore::PageDOMDebuggerAgent *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::PageDOMDebuggerAgent::enabled(WebCore::PageDOMDebuggerAgent *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  return *(WebCore::PageDOMDebuggerAgent **)(v1 + 152) == this && *(_QWORD *)(v1 + 144) == (_QWORD)this;
}

uint64_t WebCore::PageDOMDebuggerAgent::enable(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  *(_QWORD *)(v1 + 144) = this;
  *(_QWORD *)(v1 + 152) = this;
  return this;
}

uint64_t WebCore::PageDOMDebuggerAgent::disable(WebCore::PageDOMDebuggerAgent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(*((_QWORD *)this + 2) + 152) = 0;
  v3 = *((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 21) = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
            WTF::RefCounted<JSC::Breakpoint>::deref(v6, a2);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *((_QWORD *)this + 22);
  if (v7)
  {
    *((_QWORD *)this + 22) = 0;
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)(v7 + 8);
      do
      {
        if (*(v9 - 1) != -1)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
            WTF::RefCounted<JSC::Breakpoint>::deref(v10, a2);
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v11 = *((_QWORD *)this + 23);
  if (v11)
  {
    *((_QWORD *)this + 23) = 0;
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = (uint64_t *)(v11 + 8);
      do
      {
        if (*(v13 - 1) != -1)
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
            WTF::RefCounted<JSC::Breakpoint>::deref(v14, a2);
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  v15 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v15)
    WTF::RefCounted<JSC::Breakpoint>::deref(v15, a2);
  return WebCore::InspectorDOMDebuggerAgent::disable(this, a2);
}

WTF::StringImpl *WebCore::PageDOMDebuggerAgent::setDOMBreakpoint@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  WebCore::InspectorDOMAgent *v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  int v16;
  char v17;
  WTF *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  unsigned __int8 v21;
  WTF *v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  v24 = 0;
  v6 = *(WebCore::InspectorDOMAgent **)(a1[2] + 40);
  if (!v6)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }
  v8 = WebCore::InspectorDOMAgent::nodeForId(v6, a2);
  if (!v8)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v20;
    if (v20)
      *(_DWORD *)v20 += 2;
    *(_QWORD *)a4 = result;
    *(_BYTE *)(a4 + 8) = 1;
    goto LABEL_25;
  }
  v10 = v8;
  v11 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v11 + 2;
  if (v11)
  {
    *(_DWORD *)(v8 + 24) = v11;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
  }
  v23 = v10;
  Inspector::InspectorDebuggerAgent::debuggerBreakpointFromPayload();
  if (!v22)
  {
    v15 = v24;
    if (v24)
      *(_DWORD *)v24 += 2;
    *(_QWORD *)a4 = v15;
    goto LABEL_21;
  }
  switch(a3)
  {
    case 145:
      v13 = a1 + 23;
      break;
    case 144:
      v13 = a1 + 22;
      break;
    case 143:
      v13 = a1 + 21;
      break;
    default:
LABEL_20:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_21:
      v17 = 1;
      goto LABEL_22;
  }
  v19 = v22;
  v22 = 0;
  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::add<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>((uint64_t)&v20, v13, &v23, (uint64_t *)&v19);
  v16 = v21;
  if (v19)
    WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v19, v12);
  if (!v16)
    goto LABEL_20;
  v17 = 0;
  *(_BYTE *)a4 = 0;
LABEL_22:
  *(_BYTE *)(a4 + 8) = v17;
  v18 = v22;
  v22 = 0;
  if (v18)
    WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v18, v12);
  result = v24;
LABEL_25:
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::add<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (uint64_t)WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v23;
        goto LABEL_35;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a4;
  *a4 = 0;
  result = v16[1];
  v16[1] = v20;
  if (result)
    result = WTF::RefCounted<JSC::Breakpoint>::deref(result, (WTF::StringImpl *)a2);
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_30;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
      goto LABEL_31;
    }
LABEL_30:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
LABEL_31:
    result = (uint64_t)WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(a2, v28, v16);
    v16 = (uint64_t *)result;
    v24 = *a2;
    if (*a2)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
  }
  v30 = v24 + 16 * v27;
  v29 = 1;
LABEL_35:
  *(_QWORD *)v7 = v16;
  *(_QWORD *)(v7 + 8) = v30;
  *(_BYTE *)(v7 + 16) = v29;
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::PageDOMDebuggerAgent::setDOMBreakpoint@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  return WebCore::PageDOMDebuggerAgent::setDOMBreakpoint((uint64_t *)(a1 - 32), a2, a3, a4);
}

uint64_t WebCore::PageDOMDebuggerAgent::removeDOMBreakpoint@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  WebCore::InspectorDOMAgent *v6;
  uint64_t v8;
  void *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t *v12;
  uint64_t result;
  char v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;

  v6 = *(WebCore::InspectorDOMAgent **)(a1[2] + 40);
  if (!v6)
    goto LABEL_14;
  v8 = WebCore::InspectorDOMAgent::nodeForId(v6, a2);
  if (v8)
  {
    v10 = (WTF::StringImpl *)v8;
    v11 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v11 + 2;
    if (v11)
    {
      *(_DWORD *)(v8 + 24) = v11;
    }
    else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
    }
    switch(a3)
    {
      case 145:
        v12 = a1 + 23;
        break;
      case 144:
        v12 = a1 + 22;
        break;
      case 143:
        v12 = a1 + 21;
        break;
      default:
LABEL_14:
        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_15:
        v14 = 1;
        goto LABEL_16;
    }
    result = WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::remove(v12, v10);
    if ((result & 1) != 0)
    {
      v14 = 0;
      *a4 = 0;
LABEL_16:
      a4[8] = v14;
      return result;
    }
    goto LABEL_14;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = (uint64_t)v17;
  if (!v17)
  {
    *(_QWORD *)a4 = 0;
    goto LABEL_15;
  }
  v16 = *(_DWORD *)v17;
  *(_DWORD *)v17 += 2;
  *(_QWORD *)a4 = v17;
  a4[8] = 1;
  if (!v16)
    return WTF::StringImpl::destroy(v17, v15);
  *(_DWORD *)v17 = v16;
  return result;
}

uint64_t WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(WTF::StringImpl **)(v2 + 16 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(WTF::StringImpl **)(v2 + 16 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = (_QWORD *)(v2 + 16 * v8);
  v13 = v12[1];
  *v12 = -1;
  v12[1] = 0;
  if (v13)
    WTF::RefCounted<JSC::Breakpoint>::deref(v13, a2);
  ++*(_DWORD *)(*a1 - 16);
  v14 = *a1;
  if (*a1)
    v15 = *(_DWORD *)(v14 - 12) - 1;
  else
    v15 = -1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a1;
  if (*a1)
  {
    v17 = 6 * *(_DWORD *)(v16 - 12);
    v18 = *(_DWORD *)(v16 - 4);
    if (v17 < v18 && v18 >= 9)
      WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(a1, v18 >> 1, 0);
  }
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::PageDOMDebuggerAgent::removeDOMBreakpoint@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  return WebCore::PageDOMDebuggerAgent::removeDOMBreakpoint((uint64_t *)(a1 - 32), a2, a3, a4);
}

uint64_t WebCore::PageDOMDebuggerAgent::mainFrameNavigated(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(this + 84);
  if ((_DWORD)v1)
  {
    v2 = 48 * v1;
    v3 = (uint64_t *)(*(_QWORD *)(this + 72) + 16);
    do
    {
      v4 = *v3;
      v3 += 6;
      *(_QWORD *)(v4 + 72) = 0;
      v2 -= 48;
    }
    while (v2);
  }
  v5 = *(_QWORD *)(this + 88);
  if (v5)
    *(_QWORD *)(v5 + 72) = 0;
  v6 = *(_QWORD *)(this + 96);
  if (v6)
    *(_QWORD *)(v6 + 72) = 0;
  v7 = *(_QWORD *)(this + 104);
  if (v7)
    *(_QWORD *)(v7 + 72) = 0;
  v8 = *(_QWORD *)(this + 192);
  if (v8)
    *(_QWORD *)(v8 + 72) = 0;
  return this;
}

uint64_t WebCore::PageDOMDebuggerAgent::frameDocumentUpdated(uint64_t this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  if (*(WebCore::LocalFrame **)(*((_QWORD *)a2 + 16) + 8) == a2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 168);
    if (v3)
    {
      *(_QWORD *)(this + 168) = 0;
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = (uint64_t *)(v3 + 8);
        do
        {
          if (*(v5 - 1) != -1)
          {
            v6 = *v5;
            *v5 = 0;
            if (v6)
              WTF::RefCounted<JSC::Breakpoint>::deref(v6, a2);
          }
          v5 += 2;
          --v4;
        }
        while (v4);
      }
      this = WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    v7 = *(_QWORD *)(v2 + 176);
    if (v7)
    {
      *(_QWORD *)(v2 + 176) = 0;
      v8 = *(unsigned int *)(v7 - 4);
      if ((_DWORD)v8)
      {
        v9 = (uint64_t *)(v7 + 8);
        do
        {
          if (*(v9 - 1) != -1)
          {
            v10 = *v9;
            *v9 = 0;
            if (v10)
              WTF::RefCounted<JSC::Breakpoint>::deref(v10, a2);
          }
          v9 += 2;
          --v8;
        }
        while (v8);
      }
      this = WTF::fastFree((WTF *)(v7 - 16), a2);
    }
    v11 = *(_QWORD *)(v2 + 184);
    if (v11)
    {
      *(_QWORD *)(v2 + 184) = 0;
      v12 = *(unsigned int *)(v11 - 4);
      if ((_DWORD)v12)
      {
        v13 = (uint64_t *)(v11 + 8);
        do
        {
          if (*(v13 - 1) != -1)
          {
            v14 = *v13;
            *v13 = 0;
            if (v14)
              WTF::RefCounted<JSC::Breakpoint>::deref(v14, a2);
          }
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      return WTF::fastFree((WTF *)(v11 - 16), a2);
    }
  }
  return this;
}

uint64_t WebCore::PageDOMDebuggerAgent::willInsertDOMNode(Inspector::InspectorDebuggerAgent **this, WebCore::Node *a2)
{
  uint64_t result;
  WebCore::Node *v5;
  Inspector::InspectorDebuggerAgent *v6;
  uint64_t v7;
  uint64_t v8;
  Inspector::InspectorDebuggerAgent *v9;
  Inspector::InspectorDebuggerAgent *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF *v15;
  WebCore::InspectorDOMAgent *v16;
  WebCore::InspectorDOMAgent *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  _DWORD **v29;
  uint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  char v39;

  result = Inspector::InspectorDebuggerAgent::breakpointsActive(this[6]);
  if ((_DWORD)result)
  {
    v6 = this[21];
    if (v6)
    {
      if (*((_DWORD *)v6 - 3))
      {
        v36 = 0;
        v7 = *((unsigned int *)v6 - 1);
        if ((_DWORD)v7)
        {
          v8 = 16 * v7;
          v9 = v6;
          while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
          {
            v9 = (Inspector::InspectorDebuggerAgent *)((char *)v9 + 16);
            v8 -= 16;
            if (!v8)
              goto LABEL_62;
          }
        }
        else
        {
          v9 = v6;
        }
        v10 = (Inspector::InspectorDebuggerAgent *)((char *)v6 + 16 * v7);
        if (v9 == v10)
          goto LABEL_62;
        v33 = 0;
        v32 = 0;
        v11 = 0;
        v12 = 0;
        v13 = *(_QWORD *)v9;
LABEL_12:
        v14 = 0;
        v15 = (WTF *)*((_QWORD *)v9 + 1);
        ++*(_DWORD *)v15;
        *(_DWORD *)(v13 + 24) += 2;
        v16 = a2;
        while (1)
        {
          v17 = v16;
          if (v16 == (WebCore::InspectorDOMAgent *)v13)
            break;
          ++v14;
          v16 = (WebCore::InspectorDOMAgent *)WebCore::InspectorDOMAgent::innerParentNode(v16, v5);
          if (!v16)
          {
            v14 = 0;
            break;
          }
        }
        if (v13)
        {
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
        if (v17 == (WebCore::InspectorDOMAgent *)v13)
        {
          if (v33 && v14 >= v32)
          {
            v33 = 1;
          }
          else
          {
            ++*(_DWORD *)v15;
            v36 = v15;
            if (v12)
              WTF::RefCounted<JSC::Breakpoint>::deref(v12, v5);
            if (v13)
              *(_DWORD *)(v13 + 24) += 2;
            if (v11)
            {
              if (*(_DWORD *)(v11 + 24) == 2)
              {
                if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v11);
              }
              else
              {
                *(_DWORD *)(v11 + 24) -= 2;
              }
            }
            v33 = 1;
            v12 = (uint64_t)v15;
            v11 = v13;
            v32 = v14;
          }
        }
        WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v15, v5);
        while (1)
        {
          v9 = (Inspector::InspectorDebuggerAgent *)((char *)v9 + 16);
          if (v9 == v10)
            break;
          v13 = *(_QWORD *)v9;
          if ((unint64_t)(*(_QWORD *)v9 + 1) > 1)
          {
            if (v9 != v10)
              goto LABEL_12;
            break;
          }
        }
        if (v12)
        {
          WebCore::PageDOMDebuggerAgent::buildPauseDataForDOMBreakpoint((WTF::JSONImpl::Object *)&v35, (uint64_t)this, (Inspector::Protocol::Helpers *)0x8F, (WebCore::Node *)v11);
          v18 = v35;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v34 = v38;
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v18 + 2, &v34, (const WTF::StringImpl *)&v37, (uint64_t)&v38);
          if (v39)
          {
            v20 = (uint64_t *)((char *)v18 + 24);
            v21 = *((unsigned int *)v18 + 9);
            if ((_DWORD)v21 == *((_DWORD *)v18 + 8))
            {
              v29 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v34);
              v21 = *((unsigned int *)v18 + 9);
              v30 = *((_QWORD *)v18 + 3);
              v31 = *v29;
              if (*v29)
                *v31 += 2;
              *(_QWORD *)(v30 + 8 * v21) = v31;
            }
            else
            {
              v22 = *v20;
              v23 = v34;
              if (v34)
                *(_DWORD *)v34 += 2;
              *(_QWORD *)(v22 + 8 * v21) = v23;
            }
            *((_DWORD *)v18 + 9) = v21 + 1;
          }
          v24 = v37;
          v37 = 0;
          if (v24)
          {
            if (*v24 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v24;
          }
          v25 = v34;
          v34 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v19);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = v35;
          v35 = 0;
          v38 = v26;
          Inspector::InspectorDebuggerAgent::breakProgram();
          v27 = v38;
          v38 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v27;
          }
          v28 = v35;
          v35 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
            {
              WTF::JSONImpl::Value::operator delete();
              if (v11)
              {
LABEL_60:
                if (*(_DWORD *)(v11 + 24) == 2)
                {
                  if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v11);
                }
                else
                {
                  *(_DWORD *)(v11 + 24) -= 2;
                }
              }
LABEL_62:
              result = (uint64_t)v36;
              v36 = 0;
              if (result)
                return WTF::RefCounted<JSC::Breakpoint>::deref(result, v5);
              return result;
            }
            --*(_DWORD *)v28;
          }
        }
        if (v11)
          goto LABEL_60;
        goto LABEL_62;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::PageDOMDebuggerAgent::buildPauseDataForDOMBreakpoint(WTF::JSONImpl::Object *a1, uint64_t a2, Inspector::Protocol::Helpers *a3, WebCore::Node *a4)
{
  uint64_t v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::JSONImpl::Value *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  _DWORD **v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD **v30;
  uint64_t v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  _BYTE v36[16];
  char v37;

  WTF::JSONImpl::Object::create(a1);
  v8 = *(_QWORD *)a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue(a3);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v33, v9);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), &v34, (const WTF::StringImpl *)&v35, (uint64_t)v36);
  if (v37)
  {
    v11 = (uint64_t *)(v8 + 24);
    v12 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v12 == *(_DWORD *)(v8 + 32))
    {
      v27 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v34);
      v12 = *(unsigned int *)(v8 + 36);
      v28 = *(_QWORD *)(v8 + 24);
      v29 = *v27;
      if (*v27)
        *v29 += 2;
      *(_QWORD *)(v28 + 8 * v12) = v29;
    }
    else
    {
      v13 = *v11;
      v14 = v34;
      if (v34)
        *(_DWORD *)v34 += 2;
      *(_QWORD *)(v13 + 8 * v12) = v14;
    }
    *(_DWORD *)(v8 + 36) = v12 + 1;
  }
  v15 = v35;
  v35 = 0;
  if (v15)
  {
    if (*v15 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v15;
  }
  v16 = v33;
  v33 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v10);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v34;
  v34 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v10);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 16) + 40);
  if (result)
  {
    result = (WTF::StringImpl *)WebCore::InspectorDOMAgent::pushNodeToFrontend(result, a4);
    if ((_DWORD)result)
    {
      v19 = result;
      v20 = *(_QWORD *)a1;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v19);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v20 + 16), &v34, (const WTF::StringImpl *)&v35, (uint64_t)v36);
      if (v37)
      {
        v22 = (uint64_t *)(v20 + 24);
        v23 = *(unsigned int *)(v20 + 36);
        if ((_DWORD)v23 == *(_DWORD *)(v20 + 32))
        {
          v30 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v34);
          v23 = *(unsigned int *)(v20 + 36);
          v31 = *(_QWORD *)(v20 + 24);
          v32 = *v30;
          if (*v30)
            *v32 += 2;
          *(_QWORD *)(v31 + 8 * v23) = v32;
        }
        else
        {
          v24 = *v22;
          v25 = v34;
          if (v34)
            *(_DWORD *)v34 += 2;
          *(_QWORD *)(v24 + 8 * v23) = v25;
        }
        *(_DWORD *)(v20 + 36) = v23 + 1;
      }
      v26 = v35;
      v35 = 0;
      if (v26)
      {
        if (*v26 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v26;
      }
      result = v34;
      v34 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::PageDOMDebuggerAgent::willRemoveDOMNode(Inspector::InspectorDebuggerAgent **this, WebCore::Node *a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  Inspector::InspectorDebuggerAgent *v6;
  uint64_t v7;
  WebCore::Node **v8;
  WebCore::Node **v9;
  WebCore::Node **v10;
  Inspector::InspectorDebuggerAgent *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  WebCore::Node *v15;
  WTF *v16;
  WebCore::Node *v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Node *v23;
  uint64_t v24;
  WebCore::Node **v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Node **v28;
  WebCore::Node **v29;
  uint64_t v30;
  WebCore::Node **v31;
  unint64_t v32;
  WebCore::Node *v33;
  WTF *v34;
  WebCore::Node *v35;
  __int16 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::Node *v41;
  uint64_t v42;
  WebCore::Node **v43;
  WebCore::InspectorDOMAgent *v44;
  BOOL v45;
  uint64_t v46;
  WTF::JSONImpl::Value *v47;
  uint64_t *v48;
  WTF::StringImpl *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  uint64_t *v56;
  WTF::StringImpl *v57;
  uint64_t *v58;
  uint64_t *v59;
  _DWORD **v60;
  uint64_t v61;
  _DWORD *v62;
  WebCore::PageDOMDebuggerAgent *v63;
  WTF *v64;
  WTF *v65;
  WebCore::Node *v66;
  uint64_t v67;
  WTF *v68;
  unint64_t v69;
  WTF::StringImpl *v70;
  uint64_t *v71;
  WTF *v72;
  _DWORD *v73;
  uint64_t *v74;
  char v75;

  result = Inspector::InspectorDebuggerAgent::breakpointsActive(this[6]);
  if (!(_DWORD)result)
    return result;
  v6 = this[23];
  if (v6 && *((_DWORD *)v6 - 3))
  {
    v63 = (WebCore::PageDOMDebuggerAgent *)this;
    v72 = 0;
    v7 = *((unsigned int *)v6 - 1);
    v8 = (WebCore::Node **)((char *)v6 + 16 * v7);
    goto LABEL_5;
  }
  v11 = this[21];
  if (!v11 || !*((_DWORD *)v11 - 3))
    return result;
  v72 = 0;
  v63 = (WebCore::PageDOMDebuggerAgent *)this;
  if (v6)
  {
    v7 = *((unsigned int *)v6 - 1);
    v8 = (WebCore::Node **)((char *)v6 + 16 * v7);
    if (*((_DWORD *)v6 - 3))
    {
LABEL_5:
      v9 = (WebCore::Node **)v6;
      if ((_DWORD)v7)
      {
        v9 = (WebCore::Node **)v6;
        while ((unint64_t)*v9 + 1 <= 1)
        {
          v9 += 2;
          if (v9 == v8)
          {
            v9 = v8;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    v9 = (WebCore::Node **)((char *)v6 + 16 * v7);
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = (WebCore::Node **)((char *)v6 + 16 * v7);
  if (!v6)
  {
    v10 = 0;
    goto LABEL_19;
  }
LABEL_10:
  v10 = (WebCore::Node **)((char *)v6 + 16 * *((unsigned int *)v6 - 1));
LABEL_19:
  if (v10 == v9)
  {
    v66 = 0;
    v67 = 0;
    v12 = 0;
    v68 = 0;
    v69 = 0;
    v65 = 0;
    goto LABEL_57;
  }
  v64 = 0;
  v65 = 0;
  v68 = 0;
  v69 = 0;
  v66 = 0;
  v67 = 0;
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = 0;
    v15 = *v9;
    v16 = v9[1];
    ++*(_DWORD *)v16;
    v17 = v15;
    while (v17 != a2)
    {
      v18 = *((_WORD *)v17 + 14);
      if (v17 && (v18 & 0xF000) == 0x9000)
      {
        v19 = *((_DWORD *)v17 + 6);
        *((_DWORD *)v17 + 6) = v19 + 2;
        v20 = *((_QWORD *)v17 + 66);
        if (v20 && (v21 = *(_QWORD *)(v20 + 8)) != 0 && (v22 = *(_QWORD *)(v21 + 120)) != 0)
        {
          v23 = *(WebCore::Node **)(v22 + 8);
          if (!v19)
            goto LABEL_33;
        }
        else
        {
          v23 = 0;
          if (!v19)
            goto LABEL_33;
        }
      }
      else
      {
        if ((v18 & 0x80) == 0)
        {
          v23 = (WebCore::Node *)*((_QWORD *)v17 + 4);
          goto LABEL_30;
        }
        v19 = *((_DWORD *)v17 + 6);
        *((_DWORD *)v17 + 6) = v19 + 2;
        v24 = *((_QWORD *)v17 + 25);
        if (v24)
          v23 = *(WebCore::Node **)(v24 + 8);
        else
          v23 = 0;
        if (!v19)
        {
LABEL_33:
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17);
          goto LABEL_30;
        }
      }
      *((_DWORD *)v17 + 6) = v19;
LABEL_30:
      ++v14;
      v17 = v23;
      if (!v23)
        goto LABEL_48;
    }
    if (v12 && v14 >= v69)
    {
      v12 = 1;
    }
    else
    {
      ++*(_DWORD *)v16;
      v72 = v16;
      if (v13)
        WTF::RefCounted<JSC::Breakpoint>::deref(v13, v5);
      v67 = 0x100000091;
      v64 = v16;
      v65 = v16;
      v68 = v16;
      v69 = v14;
      v13 = (uint64_t)v16;
      v12 = 1;
      v66 = v15;
    }
LABEL_48:
    result = WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v16, v5);
    v25 = v9 + 2;
    v9 = v8;
    if (v25 != v8)
    {
      v9 = v25;
      while ((unint64_t)*v9 + 1 <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  while (v9 != v10);
  if (v64)
  {
LABEL_105:
    if (HIDWORD(v67))
    {
      WebCore::PageDOMDebuggerAgent::buildPauseDataForDOMBreakpoint((WTF::JSONImpl::Object *)&v71, (uint64_t)v63, (Inspector::Protocol::Helpers *)v67, v66);
      v44 = *(WebCore::InspectorDOMAgent **)(*((_QWORD *)v63 + 2) + 40);
      if (v44)
        v45 = v66 == a2;
      else
        v45 = 1;
      if (!v45)
      {
        v46 = WebCore::InspectorDOMAgent::pushNodeToFrontend(v44, a2);
        if ((_DWORD)v46)
        {
          v47 = (WTF::JSONImpl::Value *)v46;
          v48 = v71;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create(v47);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v48 + 2, &v70, (const WTF::StringImpl *)&v73, (uint64_t)&v74);
          if (v75)
          {
            v50 = v48 + 3;
            v51 = *((unsigned int *)v48 + 9);
            if ((_DWORD)v51 == *((_DWORD *)v48 + 8))
            {
              v60 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)&v70);
              v51 = *((unsigned int *)v48 + 9);
              v61 = v48[3];
              v62 = *v60;
              if (*v60)
                *v62 += 2;
              *(_QWORD *)(v61 + 8 * v51) = v62;
            }
            else
            {
              v52 = *v50;
              v53 = v70;
              if (v70)
                *(_DWORD *)v70 += 2;
              *(_QWORD *)(v52 + 8 * v51) = v53;
            }
            *((_DWORD *)v48 + 9) = v51 + 1;
          }
          v54 = v73;
          v73 = 0;
          if (v54)
          {
            if (*v54 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v54;
          }
          v55 = v70;
          v70 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v49);
            else
              *(_DWORD *)v55 -= 2;
          }
        }
      }
      v56 = v71;
      v71 = 0;
      v74 = v56;
      Inspector::InspectorDebuggerAgent::breakProgram();
      v58 = v74;
      v74 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v58;
      }
      v59 = v71;
      v71 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v59;
      }
      result = (uint64_t)v72;
      v72 = 0;
      if (result)
        return WTF::RefCounted<JSC::Breakpoint>::deref(result, v57);
    }
    else
    {
      __break(1u);
    }
    return result;
  }
LABEL_57:
  v26 = *((_QWORD *)v63 + 21);
  if (!v26)
  {
    v29 = 0;
    v27 = 0;
LABEL_66:
    v28 = (WebCore::Node **)(v26 + 16 * v27);
    goto LABEL_67;
  }
  v27 = *(unsigned int *)(v26 - 4);
  v28 = (WebCore::Node **)(v26 + 16 * v27);
  if (!*(_DWORD *)(v26 - 12))
  {
    v29 = (WebCore::Node **)(v26 + 16 * v27);
    goto LABEL_66;
  }
  v29 = (WebCore::Node **)*((_QWORD *)v63 + 21);
  if ((_DWORD)v27)
  {
    v30 = 16 * v27;
    v29 = (WebCore::Node **)*((_QWORD *)v63 + 21);
    while ((unint64_t)*v29 + 1 <= 1)
    {
      v29 += 2;
      v30 -= 16;
      if (!v30)
      {
        v29 = v28;
        break;
      }
    }
  }
LABEL_67:
  if (v26)
    v31 = (WebCore::Node **)(v26 + 16 * *(unsigned int *)(v26 - 4));
  else
    v31 = 0;
  if (v31 == v29)
    goto LABEL_104;
  while (2)
  {
    v32 = 0;
    v33 = *v29;
    v34 = v29[1];
    ++*(_DWORD *)v34;
    v35 = a2;
    while (2)
    {
      if (v35 != v33)
      {
        v36 = *((_WORD *)v35 + 14);
        if (v35 && (v36 & 0xF000) == 0x9000)
        {
          v37 = *((_DWORD *)v35 + 6);
          *((_DWORD *)v35 + 6) = v37 + 2;
          v38 = *((_QWORD *)v35 + 66);
          if (v38)
          {
            v39 = *(_QWORD *)(v38 + 8);
            if (v39)
            {
              v40 = *(_QWORD *)(v39 + 120);
              if (v40)
              {
                v41 = *(WebCore::Node **)(v40 + 8);
                if (v37)
                  goto LABEL_79;
LABEL_83:
                if ((*((_WORD *)v35 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v35);
LABEL_80:
                ++v32;
                v35 = v41;
                if (!v41)
                  goto LABEL_98;
                continue;
              }
            }
          }
          v41 = 0;
          if (!v37)
            goto LABEL_83;
        }
        else
        {
          if ((v36 & 0x80) == 0)
          {
            v41 = (WebCore::Node *)*((_QWORD *)v35 + 4);
            goto LABEL_80;
          }
          v37 = *((_DWORD *)v35 + 6);
          *((_DWORD *)v35 + 6) = v37 + 2;
          v42 = *((_QWORD *)v35 + 25);
          if (v42)
            v41 = *(WebCore::Node **)(v42 + 8);
          else
            v41 = 0;
          if (!v37)
            goto LABEL_83;
        }
LABEL_79:
        *((_DWORD *)v35 + 6) = v37;
        goto LABEL_80;
      }
      break;
    }
    if (!v12 || v32 < v69)
    {
      ++*(_DWORD *)v34;
      v72 = v34;
      if (v68)
        WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v68, v5);
      v67 = 0x10000008FLL;
      v65 = v34;
      v66 = v33;
      v68 = v34;
      v69 = v32;
    }
    v12 = 1;
LABEL_98:
    result = WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v34, v5);
    v43 = v29 + 2;
    v29 = v28;
    if (v43 != v28)
    {
      v29 = v43;
      while ((unint64_t)*v29 + 1 <= 1)
      {
        v29 += 2;
        if (v29 == v28)
        {
          v29 = v28;
          break;
        }
      }
    }
    if (v29 != v31)
      continue;
    break;
  }
LABEL_104:
  if (v65)
    goto LABEL_105;
  return result;
}

uint64_t *WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;

  v2 = *result;
  if (!*result)
    return result;
  v3 = *(_DWORD *)(v2 - 4);
  if (!v3)
    return result;
  v5 = result;
  v6 = 0;
  do
  {
    v7 = (uint64_t *)(v2 + 16 * --v3);
    v8 = *v7;
    if ((unint64_t)(*v7 + 1) < 2)
      continue;
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != v8)
    {
      v10 = *(_WORD *)(v9 + 28);
      if ((v10 & 0xF000) == 0x9000)
      {
        if (**(_QWORD **)(v8 + 40) != v9 || (*(_WORD *)(v8 + 28) & 0xF000) == 0x9000 || (*(_BYTE *)(v8 + 22) & 8) == 0)
          continue;
      }
      else
      {
        if ((v10 & 4) == 0
          || !*(_QWORD *)(v9 + 80)
          || ((*(unsigned __int8 *)(v8 + 22) ^ *(unsigned __int8 *)(v9 + 22)) & 8) != 0)
        {
          continue;
        }
        do
          v8 = *(_QWORD *)(v8 + 32);
        while (v8 != v9 && v8 != 0);
        if (!v8)
          continue;
      }
    }
    *v7 = -1;
    v12 = v2 + 16 * v3;
    result = *(uint64_t **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = 0;
    if (result)
      result = (uint64_t *)WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)result, a2);
    ++v6;
  }
  while (v3);
  v13 = *v5;
  if (v6)
  {
    *(_DWORD *)(v13 - 16) += v6;
    v14 = *v5;
    if (*v5)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v6;
    v13 = *v5;
  }
  if (v13)
  {
    v16 = *(_DWORD *)(v13 - 4);
    v17 = *(unsigned int *)(v13 - 12);
    if (v16 >= 9 && 6 * (int)v17 < v16)
    {
      v19 = (v17 - 1) | ((v17 - 1) >> 1) | ((((_DWORD)v17 - 1) | ((v17 - 1) >> 1)) >> 2);
      v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
      v21 = (v20 | HIWORD(v20)) + 1;
      if (v21 > 0x400)
      {
        if (v21 <= 2 * v17)
        {
LABEL_39:
          LODWORD(v21) = 2 * v21;
          if (v21 <= 0x400)
            goto LABEL_40;
        }
        v22 = (double)v17;
        v23 = (double)v21;
        v24 = 0.416666667;
      }
      else
      {
        if (3 * v21 <= 4 * v17)
          goto LABEL_39;
LABEL_40:
        v22 = (double)v17;
        v23 = (double)v21;
        v24 = 0.604166667;
      }
      if (v23 * v24 <= v22)
        LODWORD(v21) = 2 * v21;
      if (v21 <= 8)
        v25 = 8;
      else
        v25 = v21;
      return WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(v5, v25, 0);
    }
  }
  return result;
}

_DWORD *WebCore::PageDOMDebuggerAgent::willModifyDOMAttr(Inspector::InspectorDebuggerAgent **this, WebCore::Element *a2)
{
  _DWORD *result;
  Inspector::InspectorDebuggerAgent *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::Element *v11;
  int v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  _DWORD *v16;
  _DWORD *v17;

  result = (_DWORD *)Inspector::InspectorDebuggerAgent::breakpointsActive(this[6]);
  if ((_DWORD)result)
  {
    v5 = this[22];
    if (v5)
    {
      v6 = *((_DWORD *)v5 - 2);
      v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      v11 = (WebCore::Element *)*((_QWORD *)v5 + 2 * v10);
      if (v11 != a2)
      {
        v12 = 1;
        while (v11)
        {
          v10 = ((_DWORD)v10 + v12) & v6;
          v11 = (WebCore::Element *)*((_QWORD *)v5 + 2 * v10);
          ++v12;
          if (v11 == a2)
            goto LABEL_9;
        }
        v10 = *((unsigned int *)v5 - 1);
      }
LABEL_9:
      if (v10 != *((_DWORD *)v5 - 1))
      {
        WebCore::PageDOMDebuggerAgent::buildPauseDataForDOMBreakpoint((WTF::JSONImpl::Object *)&v17, (uint64_t)this, (Inspector::Protocol::Helpers *)0x90, a2);
        v16 = v17;
        v17 = 0;
        v13 = (WTF *)*((_QWORD *)v5 + 2 * v10 + 1);
        ++*(_DWORD *)v13;
        v15 = v13;
        Inspector::InspectorDebuggerAgent::breakProgram();
        if (v15)
          WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v15, v14);
        if (v16)
        {
          if (*v16 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v16;
        }
        result = v17;
        v17 = 0;
        if (result)
        {
          if (*result == 1)
            return (_DWORD *)WTF::JSONImpl::Value::operator delete();
          else
            --*result;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::PageDOMDebuggerAgent::setAnimationFrameBreakpoint(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 192);
  v4 = *a3;
  v5 = (v3 == 0) ^ (*a3 == 0);
  if ((v3 == 0) != (*a3 == 0))
  {
    *a3 = 0;
    v6 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v4;
    if (v6)
      WTF::RefCounted<JSC::Breakpoint>::deref(v6, a2);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v11;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return v5;
}

uint64_t WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WebCore::WorkerInspectorProxy&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  char v23;
  void *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;

  v4 = (uint64_t)a3;
  v5 = a1;
  v8 = (uint64_t *)*((unsigned int *)a1 + 2);
  v7 = *((unsigned int *)a1 + 3);
  if (10 * v7 >= (unint64_t)(9 * (_QWORD)v8)
    || (v8 <= 2 * (int)v7 ? (v9 = *((_BYTE *)a1 + 20) == 0) : (v9 = 1), !v9))
  {
    if ((_DWORD)v8)
      v10 = 2 * (_DWORD)v8;
    else
      v10 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((WTF **)a1, v10);
    LODWORD(v8) = *((_DWORD *)v5 + 2);
  }
  v11 = (_DWORD)v8 - 1;
  v12 = *((unsigned int *)v5 + 4);
  v13 = *((_DWORD *)*a2 + 4);
  if (v13 < 0x100)
    v14 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v14 = v13 >> 8;
  v15 = (v14 ^ v12) & v11;
  v16 = *v5;
  v17 = *v5 + 16 * v15;
  v18 = *(WTF **)v17;
  if (*(_QWORD *)v17)
  {
    v56 = v4;
    v57 = a4;
    v19 = 0;
    while (1)
    {
      v20 = *((_DWORD *)v18 + 4);
      v21 = v20 < 0x100 ? WTF::StringImpl::hashSlowCase(v18) : v20 >> 8;
      v22 = (v15 + (_DWORD)v8 - ((v21 ^ v12) & v11)) & v11;
      if (v19 > v22)
        break;
      if (v21 == v14)
      {
        v23 = WTF::equal(*(WTF **)v17, *a2, a3);
        v16 = *v5;
        if ((v23 & 1) != 0)
        {
          v42 = v16 + 16 * *((unsigned int *)v5 + 2);
          *(_QWORD *)v57 = v17;
          *(_QWORD *)(v57 + 8) = v42;
          *(_BYTE *)(v57 + 16) = 0;
          result = *(_QWORD *)(v56 + 8);
          if (result)
            goto LABEL_61;
          result = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)result = 1;
          *(_QWORD *)(result + 8) = v56;
          v43 = *(unsigned int **)(v56 + 8);
          *(_QWORD *)(v56 + 8) = result;
          if (!v43)
            goto LABEL_61;
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
          {
            atomic_store(1u, v43);
            WTF::fastFree((WTF *)v43, v24);
          }
          result = *(_QWORD *)(v56 + 8);
          if (result)
          {
LABEL_61:
            do
              v46 = __ldaxr((unsigned int *)result);
            while (__stlxr(v46 + 1, (unsigned int *)result));
          }
          v47 = *(unsigned int **)(*(_QWORD *)v57 + 8);
          *(_QWORD *)(*(_QWORD *)v57 + 8) = result;
          if (v47)
          {
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              atomic_store(1u, v47);
              return WTF::fastFree((WTF *)v47, v24);
            }
          }
          return result;
        }
      }
      else
      {
        v16 = *v5;
      }
      v15 = ((_DWORD)v15 + 1) & v11;
      ++v19;
      v17 = v16 + 16 * v15;
      v18 = *(WTF **)v17;
      if (!*(_QWORD *)v17)
      {
        if (v19 >= 0x80)
          *((_BYTE *)v5 + 20) = 1;
        v4 = v56;
        a4 = v57;
        goto LABEL_27;
      }
    }
    if (v19 >= 0x80)
      *((_BYTE *)v5 + 20) = 1;
    v55 = *(WTF **)v17;
    *(_QWORD *)v17 = 0;
    v26 = v16 + 16 * v15;
    v27 = *(_QWORD *)(v26 + 8);
    *(_QWORD *)(v26 + 8) = 0;
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::String const&,WebCore::WorkerInspectorProxy&>(v17, *a2, v56);
    v29 = ((_DWORD)v15 + 1) & v11;
    v30 = *v5;
    v31 = (WTF::StringImpl **)(*v5 + 16 * v29);
    v32 = *v31;
    if (*v31)
    {
      v33 = v55;
      v58 = (int)v8;
      do
      {
        v34 = *((_DWORD *)v32 + 4);
        if (v34 < 0x100)
        {
          v8 = v5;
          v36 = v12;
          v37 = v27;
          v38 = v33;
          v35 = WTF::StringImpl::hashSlowCase(v32);
          v33 = v38;
          v27 = v37;
          v12 = v36;
          v5 = v8;
          LODWORD(v8) = v58;
        }
        else
        {
          v35 = v34 >> 8;
        }
        if (++v22 > (((_DWORD)v29 + (_DWORD)v8 - ((v35 ^ v12) & v11)) & v11))
        {
          v39 = *v31;
          *v31 = 0;
          v40 = v30 + 16 * v29;
          v41 = *(_QWORD *)(v40 + 8);
          *v31 = v33;
          *(_QWORD *)(v40 + 8) = v27;
          v27 = v41;
          v33 = v39;
          v22 = (v29 + (_DWORD)v8 - ((v35 ^ v12) & v11)) & v11;
        }
        v29 = ((_DWORD)v29 + 1) & v11;
        v30 = *v5;
        v31 = (WTF::StringImpl **)(*v5 + 16 * v29);
        v32 = *v31;
      }
      while (*v31);
    }
    else
    {
      v33 = v55;
    }
    *v31 = v33;
    v50 = v30 + 16 * v29;
    result = *(_QWORD *)(v50 + 8);
    *(_QWORD *)(v50 + 8) = v27;
    if (result)
    {
      a4 = v57;
      do
      {
        v51 = __ldaxr((unsigned int *)result);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, (unsigned int *)result));
      if (!v52)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v28);
      }
    }
    else
    {
      a4 = v57;
    }
  }
  else
  {
LABEL_27:
    result = WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::String const&,WebCore::WorkerInspectorProxy&>(v17, *a2, v4);
  }
  v53 = *((unsigned int *)v5 + 2);
  ++*((_DWORD *)v5 + 3);
  v54 = *v5 + 16 * v53;
  *(_QWORD *)a4 = v17;
  *(_QWORD *)(a4 + 8) = v54;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::WorkerInspectorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::String const&,WebCore::WorkerInspectorProxy&>(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(_QWORD *)(a3 + 8);
  if (result)
    goto LABEL_21;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a3;
  v7 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = result;
  if (!v7)
    goto LABEL_21;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, a2);
  }
  result = *(_QWORD *)(a3 + 8);
  if (result)
  {
LABEL_21:
    do
      v10 = __ldaxr((unsigned int *)result);
    while (__stlxr(v10 + 1, (unsigned int *)result));
  }
  v11 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = result;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      return WTF::fastFree((WTF *)v11, a2);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::RegisteredEventListener const*,int,WTF::DefaultHash<WebCore::RegisteredEventListener const*>,WTF::HashTraits<WebCore::RegisteredEventListener const*>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<WebCore::RegisteredEventListener const*,int &>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v8 + 16 * v22;
        *(_BYTE *)(a4 + 16) = 0;
        *((_DWORD *)v16 + 2) = *a3;
        return result;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  *((_DWORD *)v16 + 2) = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_28;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_29:
    result = (uint64_t *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(v6, v27, v16);
    v16 = result;
    v23 = *v6;
    if (*v6)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
  }
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v23 + 16 * v26;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t *WTF::HashTable<int,int,WTF::IdentityExtractor,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<int>>::add@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (int *)(v6 + 4 * v12);
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v19 = 0;
        else
          v19 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v26 = v6 + 4 * v19;
        goto LABEL_33;
      }
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (int *)(v6 + 4 * v12);
      v14 = *v13;
      ++v16;
    }
    while (*v13);
    if (v15)
    {
      *v15 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v13 = v15;
    }
  }
  *v13 = v9;
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_28;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_29:
    result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(v4, v24, v13);
    v13 = (int *)result;
    v20 = *v4;
    if (*v4)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
  }
  v26 = v20 + 4 * v23;
  v25 = 1;
LABEL_33:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::SendGarbageCollectionEventsTask::*&)(void),WebCore::SendGarbageCollectionEventsTask*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t *WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
            WTF::RefCounted<JSC::Breakpoint>::deref(v27, v10);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            WTF::RefCounted<JSC::Breakpoint>::deref(v30, v10);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            WTF::RefCounted<JSC::Breakpoint>::deref(v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WebCore::PageDebuggerAgent::~PageDebuggerAgent(WebCore::PageDebuggerAgent *this, void *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((unsigned int *)this + 79);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)*((_QWORD *)this + 38);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*((_BYTE *)v6 + 16)
          && !*((_BYTE *)v6 + 17)
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)v6 + 1656))(*(_QWORD *)v6))
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v6 + 1664))(*(_QWORD *)v6, 0);
        }
        WebCore::UserGestureIndicator::~UserGestureIndicator((WTF *)((char *)v6 + 8));
        WTF::fastFree(v6, v7);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 38);
  if (v8)
  {
    *((_QWORD *)this + 38) = 0;
    *((_DWORD *)this + 78) = 0;
    WTF::fastFree(v8, a2);
  }
  *(_QWORD *)this = off_1E33F0C10;
  *((_QWORD *)this + 2) = &unk_1E33F0DF8;
  *((_QWORD *)this + 3) = &unk_1E33F0F00;
  *((_QWORD *)this + 4) = &unk_1E33F0F40;
  v9 = *((_QWORD *)this + 35);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  v10 = *((_QWORD *)this + 34);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = *((_QWORD *)this + 33);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent(this);
}

{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;

  v3 = *((unsigned int *)this + 79);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)*((_QWORD *)this + 38);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*((_BYTE *)v6 + 16)
          && !*((_BYTE *)v6 + 17)
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)v6 + 1656))(*(_QWORD *)v6))
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v6 + 1664))(*(_QWORD *)v6, 0);
        }
        WebCore::UserGestureIndicator::~UserGestureIndicator((WTF *)((char *)v6 + 8));
        WTF::fastFree(v6, v7);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 38);
  if (v8)
  {
    *((_QWORD *)this + 38) = 0;
    *((_DWORD *)this + 78) = 0;
    WTF::fastFree(v8, a2);
  }
  *(_QWORD *)this = off_1E33F0C10;
  *((_QWORD *)this + 2) = &unk_1E33F0DF8;
  *((_QWORD *)this + 3) = &unk_1E33F0F00;
  *((_QWORD *)this + 4) = &unk_1E33F0F40;
  v9 = *((_QWORD *)this + 35);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  v10 = *((_QWORD *)this + 34);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = *((_QWORD *)this + 33);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent(this);
  WTF::fastFree(v12, v13);
}

void `non-virtual thunk to'WebCore::PageDebuggerAgent::~PageDebuggerAgent(WebCore::PageDebuggerAgent *this, void *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((unsigned int *)this + 75);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)*((_QWORD *)this + 36);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*((_BYTE *)v6 + 16)
          && !*((_BYTE *)v6 + 17)
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)v6 + 1656))(*(_QWORD *)v6))
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v6 + 1664))(*(_QWORD *)v6, 0);
        }
        WebCore::UserGestureIndicator::~UserGestureIndicator((WTF *)((char *)v6 + 8));
        WTF::fastFree(v6, v7);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 36);
  if (v8)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v8, a2);
  }
  *((_QWORD *)this - 2) = off_1E33F0C10;
  *(_QWORD *)this = &unk_1E33F0DF8;
  *((_QWORD *)this + 1) = &unk_1E33F0F00;
  *((_QWORD *)this + 2) = &unk_1E33F0F40;
  v9 = *((_QWORD *)this + 33);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  v10 = *((_QWORD *)this + 32);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = *((_QWORD *)this + 31);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent((WebCore::PageDebuggerAgent *)((char *)this - 16));
}

{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((unsigned int *)this + 73);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)*((_QWORD *)this + 35);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*((_BYTE *)v6 + 16)
          && !*((_BYTE *)v6 + 17)
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)v6 + 1656))(*(_QWORD *)v6))
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v6 + 1664))(*(_QWORD *)v6, 0);
        }
        WebCore::UserGestureIndicator::~UserGestureIndicator((WTF *)((char *)v6 + 8));
        WTF::fastFree(v6, v7);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 35);
  if (v8)
  {
    *((_QWORD *)this + 35) = 0;
    *((_DWORD *)this + 72) = 0;
    WTF::fastFree(v8, a2);
  }
  *((_QWORD *)this - 3) = off_1E33F0C10;
  *((_QWORD *)this - 1) = &unk_1E33F0DF8;
  *(_QWORD *)this = &unk_1E33F0F00;
  *((_QWORD *)this + 1) = &unk_1E33F0F40;
  v9 = *((_QWORD *)this + 32);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  v10 = *((_QWORD *)this + 31);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = *((_QWORD *)this + 30);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent((WebCore::PageDebuggerAgent *)((char *)this - 24));
}

{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((unsigned int *)this + 71);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)*((_QWORD *)this + 34);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*((_BYTE *)v6 + 16)
          && !*((_BYTE *)v6 + 17)
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)v6 + 1656))(*(_QWORD *)v6))
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v6 + 1664))(*(_QWORD *)v6, 0);
        }
        WebCore::UserGestureIndicator::~UserGestureIndicator((WTF *)((char *)v6 + 8));
        WTF::fastFree(v6, v7);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 34);
  if (v8)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v8, a2);
  }
  *((_QWORD *)this - 4) = off_1E33F0C10;
  *((_QWORD *)this - 2) = &unk_1E33F0DF8;
  *((_QWORD *)this - 1) = &unk_1E33F0F00;
  *(_QWORD *)this = &unk_1E33F0F40;
  v9 = *((_QWORD *)this + 31);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  v10 = *((_QWORD *)this + 30);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = *((_QWORD *)this + 29);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent((WebCore::PageDebuggerAgent *)((char *)this - 32));
}

{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;

  v3 = *((unsigned int *)this + 75);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)*((_QWORD *)this + 36);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*((_BYTE *)v6 + 16)
          && !*((_BYTE *)v6 + 17)
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)v6 + 1656))(*(_QWORD *)v6))
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v6 + 1664))(*(_QWORD *)v6, 0);
        }
        WebCore::UserGestureIndicator::~UserGestureIndicator((WTF *)((char *)v6 + 8));
        WTF::fastFree(v6, v7);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 36);
  if (v8)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v8, a2);
  }
  *((_QWORD *)this - 2) = off_1E33F0C10;
  *(_QWORD *)this = &unk_1E33F0DF8;
  *((_QWORD *)this + 1) = &unk_1E33F0F00;
  *((_QWORD *)this + 2) = &unk_1E33F0F40;
  v9 = *((_QWORD *)this + 33);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  v10 = *((_QWORD *)this + 32);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = *((_QWORD *)this + 31);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent((WebCore::PageDebuggerAgent *)((char *)this - 16));
  WTF::fastFree(v12, v13);
}

{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;

  v3 = *((unsigned int *)this + 73);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)*((_QWORD *)this + 35);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*((_BYTE *)v6 + 16)
          && !*((_BYTE *)v6 + 17)
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)v6 + 1656))(*(_QWORD *)v6))
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v6 + 1664))(*(_QWORD *)v6, 0);
        }
        WebCore::UserGestureIndicator::~UserGestureIndicator((WTF *)((char *)v6 + 8));
        WTF::fastFree(v6, v7);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 35);
  if (v8)
  {
    *((_QWORD *)this + 35) = 0;
    *((_DWORD *)this + 72) = 0;
    WTF::fastFree(v8, a2);
  }
  *((_QWORD *)this - 3) = off_1E33F0C10;
  *((_QWORD *)this - 1) = &unk_1E33F0DF8;
  *(_QWORD *)this = &unk_1E33F0F00;
  *((_QWORD *)this + 1) = &unk_1E33F0F40;
  v9 = *((_QWORD *)this + 32);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  v10 = *((_QWORD *)this + 31);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = *((_QWORD *)this + 30);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent((WebCore::PageDebuggerAgent *)((char *)this - 24));
  WTF::fastFree(v12, v13);
}

{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;

  v3 = *((unsigned int *)this + 71);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)*((_QWORD *)this + 34);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*((_BYTE *)v6 + 16)
          && !*((_BYTE *)v6 + 17)
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)v6 + 1656))(*(_QWORD *)v6))
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v6 + 1664))(*(_QWORD *)v6, 0);
        }
        WebCore::UserGestureIndicator::~UserGestureIndicator((WTF *)((char *)v6 + 8));
        WTF::fastFree(v6, v7);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 34);
  if (v8)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v8, a2);
  }
  *((_QWORD *)this - 4) = off_1E33F0C10;
  *((_QWORD *)this - 2) = &unk_1E33F0DF8;
  *((_QWORD *)this - 1) = &unk_1E33F0F00;
  *(_QWORD *)this = &unk_1E33F0F40;
  v9 = *((_QWORD *)this + 31);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  v10 = *((_QWORD *)this + 30);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = *((_QWORD *)this + 29);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent((WebCore::PageDebuggerAgent *)((char *)this - 32));
  WTF::fastFree(v12, v13);
}

BOOL WebCore::PageDebuggerAgent::enabled(WebCore::PageDebuggerAgent *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 32);
  return *(WebCore::PageDebuggerAgent **)(v1 + 128) == this
      && *(WebCore::PageDebuggerAgent **)(v1 + 136) == this
      && *((_BYTE *)this + 248) != 0;
}

void WebCore::PageDebuggerAgent::evaluateOnCallFrame(uint64_t a1@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>, uint64_t a4, _BYTE *a5)
{
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  _BYTE v18[16];
  WebCore *v19;
  _QWORD *v20;
  __int128 v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  Inspector::InjectedScriptManager::injectedScriptForObjectId(*(Inspector::InjectedScriptManager **)(a1 + 64), a2);
  if (v20 && *v20)
  {
    v8 = *(_QWORD *)(a1 + 296);
    if (a5[1])
      v9 = *a5 == 0;
    else
      v9 = 1;
    v10 = !v9;
    v11 = WebCore::executionContext(v19, v7);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 274))
        v12 = 0;
      else
        v12 = v11 - 192;
    }
    else
    {
      v12 = 0;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 16);
    LOBYTE(v21) = 0;
    v22 = 0;
    v13 = 256;
    if (!v10)
      v13 = 0;
    WebCore::UserGestureIndicator::UserGestureIndicator(&v15, v13 | v10, v12, 1, 0, &v21, 1);
    v16 = v10;
    v17 = 0;
    if (v10)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 1656))(v14);
      if ((v17 & 1) == 0)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 1664))(v14, 1);
    }
    Inspector::InspectorDebuggerAgent::evaluateOnCallFrame();
    if (v16 && !v17 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 1656))(v14))
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 1664))(v14, 0);
    WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v15);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a3 + 24) = 1;
  }
  Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)v18);
}

void `non-virtual thunk to'WebCore::PageDebuggerAgent::evaluateOnCallFrame(uint64_t a1@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>, uint64_t a4, _BYTE *a5)
{
  WebCore::PageDebuggerAgent::evaluateOnCallFrame(a1 - 16, a2, a3, a4, a5);
}

uint64_t WebCore::PageDebuggerAgent::internalEnable(Inspector::InspectorDebuggerAgent *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 32);
  *(_QWORD *)(v1 + 128) = this;
  *(_QWORD *)(v1 + 136) = this;
  return Inspector::InspectorDebuggerAgent::internalEnable(this);
}

uint64_t WebCore::PageDebuggerAgent::internalDisable(Inspector::InspectorDebuggerAgent *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 32);
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  return Inspector::InspectorDebuggerAgent::internalDisable(this);
}

WTF::StringImpl *WebCore::PageDebuggerAgent::sourceMapURLForScript@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WebCore::InspectorPageAgent *v5;
  BOOL v6;
  const WTF::URL *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22[5];
  WTF::StringImpl *v23[5];
  char v24;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return (WTF::StringImpl *)Inspector::InspectorDebuggerAgent::sourceMapURLForScript();
  v5 = *(WebCore::InspectorPageAgent **)(*((_QWORD *)result + 37) + 160);
  if (v5)
    v6 = *((_BYTE *)v5 + 144) == 0;
  else
    v6 = 0;
  if (!v6)
  {
    *a3 = 0;
    return result;
  }
  v22[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v22);
  MEMORY[0x19AEA52F8](v23, v22, a2, 0);
  v9 = WebCore::InspectorPageAgent::cachedResource(v5, (const WebCore::LocalFrame *)v23, v7);
  v10 = v23[0];
  v23[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v22[0];
  v22[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v8);
      if (!v9)
        return (WTF::StringImpl *)Inspector::InspectorDebuggerAgent::sourceMapURLForScript();
      goto LABEL_17;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v9)
    return (WTF::StringImpl *)Inspector::InspectorDebuggerAgent::sourceMapURLForScript();
LABEL_17:
  v12 = *(uint64_t **)(v9 + 400);
  if (!v12)
  {
    v13 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v13 != -1)
    {
      v23[0] = (WTF::StringImpl *)&v24;
      v22[0] = (WTF::StringImpl *)v23;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v12 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v12, 1);
  result = (WTF::StringImpl *)WebCore::HTTPHeaderMap::get((uint64_t)(v12 + 10), (WebCore::HTTPHeaderNamesHash *)"SourceMap", (char *)0x100000009, v23);
  v14 = v23[0];
  if (v23[0] && *((_DWORD *)v23[0] + 1))
  {
    *a3 = v23[0];
    goto LABEL_42;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v12, 2);
  WebCore::HTTPHeaderMap::get((uint64_t)(v12 + 10), (WebCore::HTTPHeaderNamesHash *)"SourceMap", (char *)0x100000009, a3);
  result = v23[0];
  v23[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  v14 = *a3;
  if (*a3)
  {
LABEL_42:
    if (*((_DWORD *)v14 + 1))
      return result;
  }
  v16 = *(uint64_t **)(v9 + 400);
  if (!v16)
  {
    v17 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v17 != -1)
    {
      v23[0] = (WTF::StringImpl *)&v24;
      v22[0] = (WTF::StringImpl *)v23;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v16 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v16, 1);
  WebCore::HTTPHeaderMap::get((uint64_t)(v16 + 10), (WebCore::HTTPHeaderNamesHash *)"X-SourceMap", (char *)0x10000000BLL, v23);
  if (v23[0] && *((_DWORD *)v23[0] + 1))
  {
    v22[0] = v23[0];
  }
  else
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v16, 2);
    WebCore::HTTPHeaderMap::get((uint64_t)(v16 + 10), (WebCore::HTTPHeaderNamesHash *)"X-SourceMap", (char *)0x10000000BLL, v22);
    v19 = v23[0];
    v23[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  result = v22[0];
  v22[0] = 0;
  v20 = *a3;
  *a3 = result;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v18);
      v21 = v22[0];
      v22[0] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v18);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
    result = *a3;
  }
  if (!result)
  {
    *a3 = 0;
    return (WTF::StringImpl *)Inspector::InspectorDebuggerAgent::sourceMapURLForScript();
  }
  if (!*((_DWORD *)result + 1))
  {
    *a3 = 0;
    if (*(_DWORD *)result == 2)
      WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
    return (WTF::StringImpl *)Inspector::InspectorDebuggerAgent::sourceMapURLForScript();
  }
  return result;
}

void WebCore::PageDebuggerAgent::muteConsole(WebCore::PageDebuggerAgent *this)
{
  ++WebCore::muteCount;
}

void WebCore::PageDebuggerAgent::unmuteConsole(WebCore::PageDebuggerAgent *this)
{
  --WebCore::muteCount;
}

uint64_t WebCore::PageDebuggerAgent::debuggerWillEvaluate(uint64_t a1, JSC::JSGlobalObject *a2, WebCore *this, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  __int128 v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 296);
  v7 = WebCore::executionContext(this, a2);
  if (v7)
  {
    if (*(_BYTE *)(v7 + 274))
      v8 = 0;
    else
      v8 = v7 - 192;
  }
  else
  {
    v8 = 0;
  }
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v10 = *(unsigned __int8 *)(a4 + 20);
  *v9 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16);
  LOBYTE(v18) = 0;
  v19 = 0;
  result = (uint64_t)WebCore::UserGestureIndicator::UserGestureIndicator(v9 + 1, (unsigned __int16)v10 | (unsigned __int16)((v10 != 0) << 8), v8, 1, 0, &v18, 1);
  *((_WORD *)v9 + 8) = v10;
  if (v10)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 1656))(*v9);
    *((_BYTE *)v9 + 17) = result;
    if ((result & 1) == 0)
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v9 + 1664))(*v9, 1);
  }
  *(_QWORD *)&v18 = v9;
  v12 = *(unsigned int *)(a1 + 316);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 312))
  {
    result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 304), v12 + 1, (unint64_t)&v18);
    v13 = *(unsigned int *)(a1 + 316);
    v14 = *(_QWORD *)(a1 + 304);
    v15 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)(v14 + 8 * v13) = v15;
    v16 = (WTF *)v18;
    *(_DWORD *)(a1 + 316) = v13 + 1;
    *(_QWORD *)&v18 = 0;
    if (v16)
    {
      if (*((_BYTE *)v16 + 16) && !*((_BYTE *)v16 + 17))
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v16 + 1656))(*(_QWORD *)v16))
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v16 + 1664))(*(_QWORD *)v16, 0);
      }
      WebCore::UserGestureIndicator::~UserGestureIndicator((WTF *)((char *)v16 + 8));
      return WTF::fastFree(v16, v17);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * v12) = v9;
    *(_DWORD *)(a1 + 316) = v12 + 1;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::PageDebuggerAgent::debuggerWillEvaluate(uint64_t a1, JSC::JSGlobalObject *a2, WebCore *a3, uint64_t a4)
{
  return WebCore::PageDebuggerAgent::debuggerWillEvaluate(a1 - 24, a2, a3, a4);
}

uint64_t WebCore::PageDebuggerAgent::debuggerDidEvaluate(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v1 = *(unsigned int *)(result + 316);
  if ((_DWORD)v1)
  {
    v2 = result;
    v3 = v1 - 1;
    v4 = *(_QWORD *)(result + 304);
    v5 = *(WTF **)(v4 + 8 * v3);
    *(_QWORD *)(v4 + 8 * v3) = 0;
    if (v5)
    {
      if (*((_BYTE *)v5 + 16) && !*((_BYTE *)v5 + 17))
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v5 + 1656))(*(_QWORD *)v5))
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v5 + 1664))(*(_QWORD *)v5, 0);
      }
      WebCore::UserGestureIndicator::~UserGestureIndicator((WTF *)((char *)v5 + 8));
      result = WTF::fastFree(v5, v6);
    }
    *(_DWORD *)(v2 + 316) = v3;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::PageDebuggerAgent::debuggerDidEvaluate(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v1 = *(unsigned int *)(result + 292);
  if ((_DWORD)v1)
  {
    v2 = result;
    v3 = v1 - 1;
    v4 = *(_QWORD *)(result + 280);
    v5 = *(WTF **)(v4 + 8 * v3);
    *(_QWORD *)(v4 + 8 * v3) = 0;
    if (v5)
    {
      if (*((_BYTE *)v5 + 16) && !*((_BYTE *)v5 + 17))
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v5 + 1656))(*(_QWORD *)v5))
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v5 + 1664))(*(_QWORD *)v5, 0);
      }
      WebCore::UserGestureIndicator::~UserGestureIndicator((WTF *)((char *)v5 + 8));
      result = WTF::fastFree(v5, v6);
    }
    *(_DWORD *)(v2 + 292) = v3;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::PageDebuggerAgent::breakpointActionLog(WebCore::PageDebuggerAgent *this, JSC::JSGlobalObject *a2, const WTF::String *a3)
{
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v8;
  void *v9;
  _DWORD *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;

  v4 = *(uint64_t **)(*((_QWORD *)this + 37) + 792);
  Inspector::createScriptCallStack(a2, (JSC::JSGlobalObject *)0xC8);
  v12 = 0;
  v11 = v10;
  WebCore::PageConsoleClient::addMessage(v4, 1, 0, (uint64_t)a3, (uint64_t)&v12, 0, 0, &v11, 0, 0);
  if (v11)
  {
    if (*v11 == 1)
    {
      v8 = (WTF *)MEMORY[0x19AEA6024]();
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*v11;
    }
  }
  v6 = v12;
  v12 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::PageDebuggerAgent::breakpointActionLog(WebCore::PageDebuggerAgent *this, JSC::JSGlobalObject *a2, const WTF::String *a3)
{
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v8;
  void *v9;
  _DWORD *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;

  v4 = *(uint64_t **)(*((_QWORD *)this + 33) + 792);
  Inspector::createScriptCallStack(a2, (JSC::JSGlobalObject *)0xC8);
  v12 = 0;
  v11 = v10;
  WebCore::PageConsoleClient::addMessage(v4, 1, 0, (uint64_t)a3, (uint64_t)&v12, 0, 0, &v11, 0, 0);
  if (v11)
  {
    if (*v11 == 1)
    {
      v8 = (WTF *)MEMORY[0x19AEA6024]();
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*v11;
    }
  }
  v6 = v12;
  v12 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return 0;
}

WTF::StringImpl *WebCore::PageDebuggerAgent::injectedScriptForEval@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, Inspector::InjectedScript *a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  WTF::StringImpl *result;
  Inspector::InjectedScriptManager *v8;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WebCore::WindowProxy *v12;
  WebCore::DOMWrapperWorld *v13;
  WebCore::JSWindowProxy *v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 160);
  if (v5)
    v6 = *(_BYTE *)(v5 + 144) == 0;
  else
    v6 = 0;
  if (!v6)
    return (WTF::StringImpl *)Inspector::InjectedScript::InjectedScript(a4);
  v8 = *(Inspector::InjectedScriptManager **)(a1 + 64);
  if (*(_BYTE *)(a3 + 4))
  {
    result = (WTF::StringImpl *)Inspector::InjectedScriptManager::injectedScriptForId(*(Inspector::InjectedScriptManager **)(a1 + 64));
    v10 = (_QWORD *)*((_QWORD *)a4 + 3);
    if (!v10 || !*v10)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      result = *a2;
      *a2 = v16;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    v12 = *(WebCore::WindowProxy **)(v5 + 112);
    {
      v13 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    }
    else
    {
      v15 = WebCore::g_commonVMOrNull;
      if (!WebCore::g_commonVMOrNull)
        v15 = WebCore::commonVMSlow(0);
      v13 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v15 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v13;
    }
    v14 = WebCore::WindowProxy::jsWindowProxy(v12, v13);
    return (WTF::StringImpl *)Inspector::InjectedScriptManager::injectedScriptFor(v8, *((JSC::JSGlobalObject **)v14 + 2));
  }
  return result;
}

Inspector::InspectorDebuggerAgent *WebCore::PageDebuggerAgent::didClearWindowObjectInWorld(Inspector::InspectorDebuggerAgent *this, WebCore::LocalFrame *a2, WebCore::DOMWrapperWorld *a3)
{
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  Inspector::InspectorDebuggerAgent *v5;
  WebCore::DOMWrapperWorld *v6;

  if (*(WebCore::LocalFrame **)(*((_QWORD *)a2 + 16) + 8) == a2)
  {
    {
      v3 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    }
    else
    {
      v5 = this;
      v6 = a3;
      v4 = WebCore::g_commonVMOrNull;
      if (!WebCore::g_commonVMOrNull)
        v4 = WebCore::commonVMSlow(0);
      v3 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v4 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v3;
      this = v5;
      a3 = v6;
    }
    if (v3 == a3)
      return (Inspector::InspectorDebuggerAgent *)Inspector::InspectorDebuggerAgent::didClearGlobalObject(this);
  }
  return this;
}

uint64_t WebCore::PageDebuggerAgent::mainFrameNavigated(Inspector::InspectorDebuggerAgent *this)
{
  return Inspector::InspectorDebuggerAgent::setSuppressAllPauses(this);
}

void WebCore::PageHeapAgent::~PageHeapAgent(WebCore::PageHeapAgent *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *v5;

  *(_QWORD *)this = off_1E33F0FD8;
  *((_QWORD *)this + 2) = &unk_1E33F1070;
  *((_QWORD *)this + 3) = &unk_1E33F10D0;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
  {
    *(_QWORD *)(v2 + 32) = off_1E32051C0;
    v3 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v2 + 32));
    v5 = *(WTF **)(v2 + 16);
    if (v5)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::fastFree((WTF *)v2, v4);
  }
  Inspector::InspectorHeapAgent::~InspectorHeapAgent(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E33F0FD8;
  *((_QWORD *)this + 2) = &unk_1E33F1070;
  *((_QWORD *)this + 3) = &unk_1E33F10D0;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
  {
    *(_QWORD *)(v2 + 32) = off_1E32051C0;
    v3 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v2 + 32));
    v5 = *(WTF **)(v2 + 16);
    if (v5)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::fastFree((WTF *)v2, v4);
  }
  Inspector::InspectorHeapAgent::~InspectorHeapAgent(this);
  WTF::fastFree(v6, v7);
}

void `non-virtual thunk to'WebCore::PageHeapAgent::~PageHeapAgent(WebCore::PageHeapAgent *this)
{
  uint64_t v1;
  Inspector::InspectorHeapAgent *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;

  *(_QWORD *)this = &unk_1E33F1070;
  *((_QWORD *)this + 1) = &unk_1E33F10D0;
  v1 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this - 2) = off_1E33F0FD8;
  v2 = (WebCore::PageHeapAgent *)((char *)this - 16);
  if (v1)
  {
    *(_QWORD *)(v1 + 32) = off_1E32051C0;
    v3 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 32));
    v5 = *(WTF **)(v1 + 16);
    if (v5)
    {
      *(_QWORD *)(v1 + 16) = 0;
      *(_DWORD *)(v1 + 24) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::fastFree((WTF *)v1, v4);
  }
  Inspector::InspectorHeapAgent::~InspectorHeapAgent(v2);
}

{
  uint64_t v1;
  Inspector::InspectorHeapAgent *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;

  *((_QWORD *)this - 1) = &unk_1E33F1070;
  *(_QWORD *)this = &unk_1E33F10D0;
  v1 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this - 3) = off_1E33F0FD8;
  v2 = (WebCore::PageHeapAgent *)((char *)this - 24);
  if (v1)
  {
    *(_QWORD *)(v1 + 32) = off_1E32051C0;
    v3 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 32));
    v5 = *(WTF **)(v1 + 16);
    if (v5)
    {
      *(_QWORD *)(v1 + 16) = 0;
      *(_DWORD *)(v1 + 24) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::fastFree((WTF *)v1, v4);
  }
  Inspector::InspectorHeapAgent::~InspectorHeapAgent(v2);
}

{
  uint64_t v1;
  Inspector::InspectorHeapAgent *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = &unk_1E33F1070;
  *((_QWORD *)this + 1) = &unk_1E33F10D0;
  v1 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this - 2) = off_1E33F0FD8;
  v2 = (WebCore::PageHeapAgent *)((char *)this - 16);
  if (v1)
  {
    *(_QWORD *)(v1 + 32) = off_1E32051C0;
    v3 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 32));
    v5 = *(WTF **)(v1 + 16);
    if (v5)
    {
      *(_QWORD *)(v1 + 16) = 0;
      *(_DWORD *)(v1 + 24) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::fastFree((WTF *)v1, v4);
  }
  Inspector::InspectorHeapAgent::~InspectorHeapAgent(v2);
  WTF::fastFree(v6, v7);
}

{
  uint64_t v1;
  Inspector::InspectorHeapAgent *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  WTF *v6;
  void *v7;

  *((_QWORD *)this - 1) = &unk_1E33F1070;
  *(_QWORD *)this = &unk_1E33F10D0;
  v1 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this - 3) = off_1E33F0FD8;
  v2 = (WebCore::PageHeapAgent *)((char *)this - 24);
  if (v1)
  {
    *(_QWORD *)(v1 + 32) = off_1E32051C0;
    v3 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 32));
    v5 = *(WTF **)(v1 + 16);
    if (v5)
    {
      *(_QWORD *)(v1 + 16) = 0;
      *(_DWORD *)(v1 + 24) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::fastFree((WTF *)v1, v4);
  }
  Inspector::InspectorHeapAgent::~InspectorHeapAgent(v2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::PageHeapAgent::enable(WebCore::PageHeapAgent *this)
{
  uint64_t result;
  uint64_t v3;

  result = Inspector::InspectorHeapAgent::enable(this);
  v3 = *(_QWORD *)(*((_QWORD *)this + 10) + 16);
  if (v3)
    *(_QWORD *)(v3 + 48) = this;
  *(_QWORD *)(*((_QWORD *)this + 12) + 168) = this;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::PageHeapAgent::enable(WebCore::PageHeapAgent *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (char *)this - 16;
  result = Inspector::InspectorHeapAgent::enable((WebCore::PageHeapAgent *)((char *)this - 16));
  v4 = *(_QWORD *)(*((_QWORD *)this + 8) + 16);
  if (v4)
    *(_QWORD *)(v4 + 48) = v2;
  *(_QWORD *)(*((_QWORD *)this + 10) + 168) = v2;
  return result;
}

uint64_t WebCore::PageHeapAgent::disable(WebCore::WebHeapAgent *this, void *a2)
{
  *(_QWORD *)(*((_QWORD *)this + 12) + 168) = 0;
  return WebCore::WebHeapAgent::disable(this, a2);
}

uint64_t `non-virtual thunk to'WebCore::PageHeapAgent::disable(WebCore::PageHeapAgent *this, void *a2)
{
  *(_QWORD *)(*((_QWORD *)this + 10) + 168) = 0;
  return WebCore::WebHeapAgent::disable((WebCore::PageHeapAgent *)((char *)this - 16), a2);
}

void `non-virtual thunk to'WebCore::PageNetworkAgent::~PageNetworkAgent(WebCore::PageNetworkAgent *this, WTF::StringImpl *a2)
{
  WebCore::InspectorNetworkAgent::~InspectorNetworkAgent((WebCore::PageNetworkAgent *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorNetworkAgent::~InspectorNetworkAgent((WebCore::PageNetworkAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::PageNetworkAgent::~PageNetworkAgent(WebCore::PageNetworkAgent *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::InspectorNetworkAgent::~InspectorNetworkAgent(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WebCore::PageNetworkAgent::loaderIdentifier@<X0>(uint64_t *this@<X0>, WebCore::DocumentLoader *a2@<X1>, _QWORD *a3@<X8>)
{
  if (a2)
  {
    this = *(uint64_t **)(this[2] + 200);
    if (this)
      return WebCore::InspectorPageAgent::loaderId(this, (uint64_t)a2, a3);
  }
  *a3 = 0;
  return this;
}

unsigned int *WebCore::PageNetworkAgent::frameIdentifier@<X0>(unsigned int *this@<X0>, WebCore::DocumentLoader *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  WebCore::Frame *v4;

  if (a2 && (this = *(unsigned int **)(*((_QWORD *)this + 2) + 200)) != 0)
  {
    v3 = *((_QWORD *)a2 + 2);
    if (v3)
      v4 = *(WebCore::Frame **)(v3 + 8);
    else
      v4 = 0;
    return WebCore::InspectorPageAgent::frameId(this, v4, a3);
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

uint64_t WebCore::PageNetworkAgent::activeWebSockets@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  {
    if (WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets
      && *(_DWORD *)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets - 12))
    {
      v3 = this;
      v4 = *(unsigned int *)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets - 4);
      if ((_DWORD)v4)
      {
        v5 = 8 * v4;
        for (i = (uint64_t *)WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets;
              (unint64_t)(*i + 1) <= 1;
              ++i)
        {
          v5 -= 8;
          if (!v5)
            return this;
        }
      }
      else
      {
        i = (uint64_t *)WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets;
      }
      v7 = WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets + 8 * v4;
      if ((uint64_t *)v7 != i)
      {
        v8 = 0;
        v9 = 0;
LABEL_12:
        v22 = 0;
        v22 = *i;
        v10 = *(_QWORD *)(v22 + 72);
        if (v10)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 160))(v10);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 112))(v10))
          {
            v12 = v22;
            v13 = *(_QWORD *)(v22 + 40);
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 8);
              if (v14)
              {
                if (!*(_BYTE *)(v14 + 178))
                {
                  v15 = (int *)(v14 - 264);
                  v16 = *(_DWORD *)(v14 - 264) + 2;
                  *(_DWORD *)(v14 - 264) = v16;
                  v17 = *(_QWORD *)(v14 + 240);
                  if (v17)
                  {
                    v17 = *(_QWORD *)(v17 + 8);
                    if (v17)
                    {
                      v17 = *(_QWORD *)(v17 + 24);
                      if (v17)
                        v17 = *(_QWORD *)(v17 + 8);
                    }
                  }
                  if (v17 == *(_QWORD *)(v3 + 184))
                  {
                    v18 = v9;
                    if (v9 == *(_DWORD *)(a2 + 8))
                    {
                      v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v9 + 1, (unint64_t)&v22);
                      v20 = *(unsigned int *)(a2 + 12);
                      v9 = v20 + 1;
                      v8 = *(char **)a2;
                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v20) = *(_QWORD *)v19;
                      *(_DWORD *)(a2 + 12) = v20 + 1;
                      v16 = *v15;
                    }
                    else
                    {
                      ++v9;
                      *(_QWORD *)&v8[8 * v18] = v12;
                      *(_DWORD *)(a2 + 12) = v9;
                    }
                  }
                  v21 = v16 - 2;
                  if (v21)
                  {
                    *v15 = v21;
                  }
                  else if ((*(_WORD *)(v14 - 258) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)(v14 - 288), v11);
                  }
                }
              }
            }
          }
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 168))(v10);
        }
        while (++i != (uint64_t *)v7)
        {
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != (uint64_t *)v7)
              goto LABEL_12;
            return this;
          }
        }
      }
    }
  }
  else
  {
    WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets = 0;
  }
  return this;
}

uint64_t WebCore::PageNetworkAgent::setResourceCachingDisabledInternal(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 184) + 1092) = a2;
  return this;
}

uint64_t WebCore::PageNetworkAgent::scriptExecutionContext(WebCore::PageNetworkAgent *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  WebCore::InspectorPageAgent *v4;
  uint64_t result;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v4 = *(WebCore::InspectorPageAgent **)(*((_QWORD *)this + 2) + 200);
  if (v4)
  {
    result = WebCore::InspectorPageAgent::assertFrame(v4, a2, a3);
    if (!result)
      return result;
    v6 = *(_QWORD *)(result + 296);
    if (v6)
      return v6 + 192;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = *a2;
  *a2 = v9;
  if (!v8)
    return 0;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::destroy(v8, v7);
    return 0;
  }
  result = 0;
  *(_DWORD *)v8 -= 2;
  return result;
}

uint64_t *WebCore::PageNetworkAgent::addConsoleMessage(uint64_t a1, Inspector::ScriptArguments ***a2)
{
  return WebCore::PageConsoleClient::addMessage(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 792), a2);
}

_QWORD *WebCore::PageRuntimeAgent::PageRuntimeAgent(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  Inspector::BackendDispatcher *v7;
  WTF::StringImpl *v8;
  WTF *v10;
  void *v11;
  uint64_t v12;

  v4 = (_QWORD *)Inspector::InspectorRuntimeAgent::InspectorRuntimeAgent();
  *v4 = &off_1E33F1C08;
  v4[2] = &unk_1E33F1D00;
  v5 = a2[2];
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v6 = v5;
  a1[7] = v6;
  v7 = (Inspector::BackendDispatcher *)a2[3];
  ++*(_DWORD *)v7;
  Inspector::RuntimeBackendDispatcher::create();
  a1[8] = v12;
  if (*(_DWORD *)v7 == 1)
  {
    Inspector::BackendDispatcher::~BackendDispatcher(v7, v8);
    WTF::fastFree(v10, v11);
  }
  else
  {
    --*(_DWORD *)v7;
  }
  a1[9] = a2[4];
  a1[10] = a2[5];
  return a1;
}

void WebCore::PageRuntimeAgent::~PageRuntimeAgent(WebCore::PageRuntimeAgent *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  JUMPOUT(0x19AEA6384);
}

{
  _DWORD *v3;
  WTF *v4;
  WTF *v5;
  void *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF *)MEMORY[0x19AEA6384](this);
  WTF::fastFree(v5, v6);
}

void `non-virtual thunk to'WebCore::PageRuntimeAgent::~PageRuntimeAgent(WebCore::PageRuntimeAgent *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  JUMPOUT(0x19AEA6384);
}

{
  _DWORD *v3;
  WTF *v4;
  WTF *v5;
  void *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF *)MEMORY[0x19AEA6384]((char *)this - 16);
  WTF::fastFree(v5, v6);
}

_QWORD *WebCore::PageRuntimeAgent::enable@<X0>(_QWORD *this@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_QWORD **)(this[9] + 208) == this)
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = this;
    this = (_QWORD *)Inspector::InspectorRuntimeAgent::enable((Inspector::InspectorRuntimeAgent *)this);
    if (!a2[8])
    {
      v4 = v3[9];
      v8 = *(_QWORD *)(v4 + 200);
      if (v8)
      {
        v5 = v3[10];
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v6 = off_1E33F2160;
        v6[1] = &v8;
        v6[2] = v3;
        v7 = v6;
        WebCore::Page::forEachLocalFrame(v5, &v7);
        this = v7;
        v7 = 0;
        if (this)
          this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v4 = v3[9];
      }
      *(_QWORD *)(v4 + 208) = v3;
    }
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::PageRuntimeAgent::enable@<X0>(_QWORD *this@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = this - 2;
  if (*(_QWORD **)(this[7] + 208) == this - 2)
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v4 = this;
    this = (_QWORD *)Inspector::InspectorRuntimeAgent::enable((Inspector::InspectorRuntimeAgent *)(this - 2));
    if (!a2[8])
    {
      v5 = v4[7];
      v9 = *(_QWORD *)(v5 + 200);
      if (v9)
      {
        v6 = v4[8];
        v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v7 = off_1E33F2160;
        v7[1] = &v9;
        v7[2] = v3;
        v8 = v7;
        WebCore::Page::forEachLocalFrame(v6, &v8);
        this = v8;
        v8 = 0;
        if (this)
          this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v5 = v4[7];
      }
      *(_QWORD *)(v5 + 208) = v3;
    }
  }
  return this;
}

uint64_t WebCore::PageRuntimeAgent::disable(Inspector::InspectorRuntimeAgent *this)
{
  *(_QWORD *)(*((_QWORD *)this + 9) + 208) = 0;
  return Inspector::InspectorRuntimeAgent::disable(this);
}

uint64_t `non-virtual thunk to'WebCore::PageRuntimeAgent::disable(WebCore::PageRuntimeAgent *this)
{
  *(_QWORD *)(*((_QWORD *)this + 7) + 208) = 0;
  return Inspector::InspectorRuntimeAgent::disable((WebCore::PageRuntimeAgent *)((char *)this - 16));
}

uint64_t WebCore::PageRuntimeAgent::frameNavigated(WebCore::PageRuntimeAgent *this, WebCore::WindowProxy **a2)
{
  uint64_t v3;
  WebCore::WindowProxy *v4;

    return WebCore::WindowProxy::jsWindowProxy(a2[14], (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld);
  v4 = a2[14];
  v3 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
    v3 = WebCore::commonVMSlow(0);
  WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = *(_QWORD *)(*(_QWORD *)(v3 + 41456) + 16);
  return WebCore::WindowProxy::jsWindowProxy(v4, (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld);
}

void WebCore::PageRuntimeAgent::notifyContextCreated(Inspector::InjectedScriptManager **this, const WTF::String *a2, JSC::JSGlobalObject *a3, const WebCore::DOMWrapperWorld *a4, WebCore::SecurityOrigin *a5)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::JSONImpl::Value *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  const WTF::String *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  const WTF::String *v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  const WTF::String *v43;
  WTF::StringImpl *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  _DWORD **v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD **v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD **v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD **v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  _BYTE v69[24];
  _QWORD *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  _DWORD *v73;
  _QWORD v74[2];
  char v75;

  v10 = (WTF::StringImpl *)Inspector::InjectedScriptManager::injectedScriptFor(this[3], a3);
  if (v70 && *v70)
  {
    v11 = (WTF::StringImpl *)*((_QWORD *)a4 + 5);
    if (v11)
    {
      v12 = *((_DWORD *)v11 + 1);
      *(_DWORD *)v11 += 2;
      v13 = v12 == 0;
    }
    else
    {
      v13 = 1;
    }
    v68 = v11;
    if (a5)
    {
      if (v13)
      {
        v10 = (WTF::StringImpl *)WebCore::SecurityOriginData::toString((WebCore::SecurityOrigin *)((char *)a5 + 8), v74);
        v15 = (WTF::StringImpl *)v74[0];
        v74[0] = 0;
        v68 = v15;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::destroy(v11, v14);
            v10 = (WTF::StringImpl *)v74[0];
            v74[0] = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                v10 = (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v54);
              else
                *(_DWORD *)v10 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v11 -= 2;
          }
        }
      }
    }
    WTF::JSONImpl::Object::create(v10);
    v16 = (WTF::JSONImpl::Value *)Inspector::InjectedScriptManager::injectedScriptIdFor(this[3], a3);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v16);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v67 + 16), &v72, (const WTF::StringImpl *)&v73, (uint64_t)v74);
    if (v75)
    {
      v18 = (uint64_t *)(v67 + 24);
      v19 = *(unsigned int *)(v67 + 36);
      if ((_DWORD)v19 == *(_DWORD *)(v67 + 32))
      {
        v55 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v72);
        v19 = *(unsigned int *)(v67 + 36);
        v56 = *(_QWORD *)(v67 + 24);
        v57 = *v55;
        if (*v55)
          *v57 += 2;
        *(_QWORD *)(v56 + 8 * v19) = v57;
      }
      else
      {
        v20 = *v18;
        v21 = v72;
        if (v72)
          *(_DWORD *)v72 += 2;
        *(_QWORD *)(v20 + 8 * v19) = v21;
      }
      *(_DWORD *)(v67 + 36) = v19 + 1;
    }
    v22 = v73;
    v73 = 0;
    if (v22)
    {
      if (*v22 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v22;
    }
    v23 = v72;
    v72 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v17);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = *((int *)a4 + 12);
    if (v24 > 2)
      v25 = 256;
    else
      v25 = dword_1969F244C[v24];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v25);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v71, v26);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v67 + 16), &v72, (const WTF::StringImpl *)&v73, (uint64_t)v74);
    if (v75)
    {
      v28 = (uint64_t *)(v67 + 24);
      v29 = *(unsigned int *)(v67 + 36);
      if ((_DWORD)v29 == *(_DWORD *)(v67 + 32))
      {
        v58 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1, (unint64_t)&v72);
        v29 = *(unsigned int *)(v67 + 36);
        v59 = *(_QWORD *)(v67 + 24);
        v60 = *v58;
        if (*v58)
          *v60 += 2;
        *(_QWORD *)(v59 + 8 * v29) = v60;
      }
      else
      {
        v30 = *v28;
        v31 = v72;
        if (v72)
          *(_DWORD *)v72 += 2;
        *(_QWORD *)(v30 + 8 * v29) = v31;
      }
      *(_DWORD *)(v67 + 36) = v29 + 1;
    }
    v32 = v73;
    v73 = 0;
    if (v32)
    {
      if (*v32 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v32;
    }
    v33 = v71;
    v71 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v27);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v72;
    v72 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v27);
      else
        *(_DWORD *)v34 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v68, v35);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v67 + 16), &v72, (const WTF::StringImpl *)&v73, (uint64_t)v74);
    if (v75)
    {
      v37 = (uint64_t *)(v67 + 24);
      v38 = *(unsigned int *)(v67 + 36);
      if ((_DWORD)v38 == *(_DWORD *)(v67 + 32))
      {
        v61 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v72);
        v38 = *(unsigned int *)(v67 + 36);
        v62 = *(_QWORD *)(v67 + 24);
        v63 = *v61;
        if (*v61)
          *v63 += 2;
        *(_QWORD *)(v62 + 8 * v38) = v63;
      }
      else
      {
        v39 = *v37;
        v40 = v72;
        if (v72)
          *(_DWORD *)v72 += 2;
        *(_QWORD *)(v39 + 8 * v38) = v40;
      }
      *(_DWORD *)(v67 + 36) = v38 + 1;
    }
    v41 = v73;
    v73 = 0;
    if (v41)
    {
      if (*v41 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v41;
    }
    v42 = v72;
    v72 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v36);
      else
        *(_DWORD *)v42 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(a2, v43);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v67 + 16), &v72, (const WTF::StringImpl *)&v73, (uint64_t)v74);
    if (v75)
    {
      v45 = (uint64_t *)(v67 + 24);
      v46 = *(unsigned int *)(v67 + 36);
      if ((_DWORD)v46 == *(_DWORD *)(v67 + 32))
      {
        v64 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v72);
        v46 = *(unsigned int *)(v67 + 36);
        v65 = *(_QWORD *)(v67 + 24);
        v66 = *v64;
        if (*v64)
          *v66 += 2;
        *(_QWORD *)(v65 + 8 * v46) = v66;
      }
      else
      {
        v47 = *v45;
        v48 = v72;
        if (v72)
          *(_DWORD *)v72 += 2;
        *(_QWORD *)(v47 + 8 * v46) = v48;
      }
      *(_DWORD *)(v67 + 36) = v46 + 1;
    }
    v49 = v73;
    v73 = 0;
    if (v49)
    {
      if (*v49 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v49;
    }
    v50 = v72;
    v72 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v44);
      else
        *(_DWORD *)v50 -= 2;
    }
    v74[0] = v67;
    Inspector::RuntimeFrontendDispatcher::executionContextCreated();
    v52 = (_DWORD *)v74[0];
    v74[0] = 0;
    if (v52)
    {
      if (*v52 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v52;
    }
    v53 = v68;
    v68 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v51);
      else
        *(_DWORD *)v53 -= 2;
    }
  }
  Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)v69);
}

WTF::StringImpl *WebCore::PageRuntimeAgent::injectedScriptForEval@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, Inspector::InjectedScript *a4@<X8>)
{
  WTF::StringImpl *result;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  Inspector::InjectedScriptManager *v10;
  WebCore::WindowProxy *v11;
  WebCore::DOMWrapperWorld *v12;
  WebCore::JSWindowProxy *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::WindowProxy *v17;
  WTF::StringImpl *v18;

  if (*(_BYTE *)(a3 + 4))
  {
    result = (WTF::StringImpl *)Inspector::InjectedScriptManager::injectedScriptForId(*(Inspector::InjectedScriptManager **)(a1 + 24));
    v7 = (_QWORD *)*((_QWORD *)a4 + 3);
    if (v7 && *v7)
      return result;
    goto LABEL_14;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 160);
  if (v8)
    v9 = *(_BYTE *)(v8 + 144) == 0;
  else
    v9 = 0;
  if (!v9)
    return (WTF::StringImpl *)Inspector::InjectedScript::InjectedScript(a4);
  v10 = *(Inspector::InjectedScriptManager **)(a1 + 24);
  v11 = *(WebCore::WindowProxy **)(v8 + 112);
  {
    v12 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  }
  else
  {
    v17 = *(WebCore::WindowProxy **)(v8 + 112);
    v16 = WebCore::g_commonVMOrNull;
    if (!WebCore::g_commonVMOrNull)
      v16 = WebCore::commonVMSlow(0);
    v12 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v16 + 41456) + 16);
    WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v12;
    v11 = v17;
  }
  v13 = WebCore::WindowProxy::jsWindowProxy(v11, v12);
  result = (WTF::StringImpl *)Inspector::InjectedScriptManager::injectedScriptFor(v10, *((JSC::JSGlobalObject **)v13 + 2));
  v14 = (_QWORD *)*((_QWORD *)a4 + 3);
  if (!v14 || !*v14)
  {
LABEL_14:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = *a2;
    *a2 = v18;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::PageRuntimeAgent::muteConsole(WebCore::PageRuntimeAgent *this)
{
  ++WebCore::muteCount;
}

void WebCore::PageRuntimeAgent::unmuteConsole(WebCore::PageRuntimeAgent *this)
{
  --WebCore::muteCount;
}

void WebCore::PageRuntimeAgent::evaluate(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>, uint64_t a4, _BYTE *a5)
{
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  _BYTE v20[16];
  WebCore *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  WebCore::PageRuntimeAgent::injectedScriptForEval(a1, &v23, a2, (Inspector::InjectedScript *)v20);
  if (v22 && *v22)
  {
    v8 = *(_QWORD *)(a1 + 80);
    if (a5[1])
      v9 = *a5 == 0;
    else
      v9 = 1;
    v10 = !v9;
    v11 = WebCore::executionContext(v21, v7);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 274))
        v12 = 0;
      else
        v12 = v11 - 192;
    }
    else
    {
      v12 = 0;
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 16);
    LOBYTE(v24) = 0;
    v25 = 0;
    v13 = 256;
    if (!v10)
      v13 = 0;
    WebCore::UserGestureIndicator::UserGestureIndicator(&v17, v13 | v10, v12, 1, 0, &v24, 1);
    v18 = v10;
    v19 = 0;
    if (v10)
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 1656))(v16);
      if ((v19 & 1) == 0)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 1664))(v16, 1);
    }
    Inspector::InspectorRuntimeAgent::evaluate();
    if (v18 && !v19 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 1656))(v16))
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 1664))(v16, 0);
    WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v17);
    v14 = v23;
  }
  else
  {
    v14 = v23;
    if (v23)
      *(_DWORD *)v23 += 2;
    *(_QWORD *)a3 = v14;
    *(_DWORD *)(a3 + 24) = 1;
  }
  Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)v20);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
}

void `non-virtual thunk to'WebCore::PageRuntimeAgent::evaluate(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>, uint64_t a4, _BYTE *a5)
{
  WebCore::PageRuntimeAgent::evaluate(a1 - 16, a2, a3, a4, a5);
}

void WebCore::PageRuntimeAgent::callFunctionOn(uint64_t a1, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8, uint64_t a9, Inspector::BackendDispatcher::CallbackBase **a10)
{
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  Inspector::BackendDispatcher::CallbackBase *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  _BYTE v26[16];
  WebCore *v27;
  _QWORD *v28;
  __int128 v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  Inspector::InjectedScriptManager::injectedScriptForObjectId(*(Inspector::InjectedScriptManager **)(a1 + 24), a2);
  if (v28 && *v28)
  {
    v13 = *(_QWORD *)(a1 + 80);
    if (a8[1])
      v14 = *a8 == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = WebCore::executionContext(v27, v12);
    if (v16)
    {
      if (*(_BYTE *)(v16 + 274))
        v17 = 0;
      else
        v17 = v16 - 192;
    }
    else
    {
      v17 = 0;
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16);
    LOBYTE(v29) = 0;
    v30 = 0;
    v18 = 256;
    if (!v15)
      v18 = 0;
    WebCore::UserGestureIndicator::UserGestureIndicator(&v23, v18 | v15, v17, 1, 0, &v29, 1);
    v24 = v15;
    v25 = 0;
    if (v15)
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 1656))(v22);
      if ((v25 & 1) == 0)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 1664))(v22, 1);
    }
    Inspector::InspectorRuntimeAgent::callFunctionOn();
    if (v24 && !v25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 1656))(v22))
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 1664))(v22, 0);
    WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v23);
  }
  else
  {
    v19 = *a10;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v19, (const WTF::String *)&v29);
    v21 = (WTF::StringImpl *)v29;
    *(_QWORD *)&v29 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  Inspector::InjectedScript::~InjectedScript((Inspector::InjectedScript *)v26);
}

void `non-virtual thunk to'WebCore::PageRuntimeAgent::callFunctionOn(uint64_t a1, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8, uint64_t a9, Inspector::BackendDispatcher::CallbackBase **a10)
{
  WebCore::PageRuntimeAgent::callFunctionOn(a1 - 16, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void `non-virtual thunk to'WebCore::PageWorkerAgent::~PageWorkerAgent(WebCore::PageWorkerAgent *this, void *a2)
{
  WebCore::InspectorWorkerAgent::~InspectorWorkerAgent((WebCore::PageWorkerAgent *)((char *)this - 32), a2);
}

{
  WebCore::InspectorWorkerAgent::~InspectorWorkerAgent((WebCore::PageWorkerAgent *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorWorkerAgent::~InspectorWorkerAgent((WebCore::PageWorkerAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorWorkerAgent::~InspectorWorkerAgent((WebCore::PageWorkerAgent *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::PageWorkerAgent::~PageWorkerAgent(WebCore::PageWorkerAgent *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::InspectorWorkerAgent::~InspectorWorkerAgent(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::PageWorkerAgent::connectToAllWorkerInspectorProxies(WebCore::PageWorkerAgent *this)
{
  uint64_t result;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::WorkerInspectorProxy *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;

  if (__ldaxr(WebCore::proxiesLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::proxiesLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::proxiesLock);
LABEL_5:
  {
    WebCore::proxies(void)::proxies = 0;
    qword_1EE2F97C8 = 0;
  }
  result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::HashTable(&v29, &WebCore::proxies(void)::proxies);
  v30 = qword_1EE2F97C8;
  v5 = __ldxr(WebCore::proxiesLock);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, WebCore::proxiesLock))
LABEL_11:
    result = WTF::Lock::unlockSlow((WTF::Lock *)WebCore::proxiesLock);
  v6 = v29;
  if (!v29)
  {
    v7 = 0;
    v8 = 0;
LABEL_14:
    v9 = v7;
    v7 = v29 + 8 * v8;
    goto LABEL_15;
  }
  v8 = *(unsigned int *)(v29 - 4);
  v7 = v29 + 8 * v8;
  if (!*(_DWORD *)(v29 - 12))
    goto LABEL_14;
  if (!(_DWORD)v8)
  {
    v23 = 0;
    v9 = v29;
    goto LABEL_69;
  }
  v22 = 8 * v8;
  v9 = v29;
  while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
  {
    v9 += 8;
    v22 -= 8;
    if (!v22)
    {
      v9 = v7;
      break;
    }
  }
LABEL_15:
  if (!v29)
  {
    v10 = 0;
    goto LABEL_17;
  }
  v23 = *(unsigned int *)(v29 - 4);
LABEL_69:
  v10 = v29 + 8 * v23;
LABEL_17:
  if (v10 != v9)
  {
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v11 = v9 + 8;
      v9 = v7;
      if (v11 != v7)
      {
        v9 = v11;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  if (v29)
    v12 = v29 + 8 * *(unsigned int *)(v29 - 4);
  else
    v12 = 0;
  if (v9 != v12)
  {
    do
    {
      v13 = *(WebCore::WorkerInspectorProxy **)(*(_QWORD *)v9 + 8);
      v14 = *(_DWORD *)v13 + 1;
      *(_DWORD *)v13 = v14;
      v15 = *((_QWORD *)v13 + 2);
      if (v15 && !*(_BYTE *)(v15 + 274))
      {
        v16 = *(_QWORD *)(v15 + 336);
        if (v16)
        {
          v16 = *(_QWORD *)(v16 + 8);
          if (v16)
          {
            v16 = *(_QWORD *)(v16 + 24);
            if (v16)
              v16 = *(_QWORD *)(v16 + 8);
          }
        }
        if (v16 == *((_QWORD *)this + 12))
        {
          result = WebCore::InspectorWorkerAgent::connectToWorkerInspectorProxy(this, v13);
          v14 = *(_DWORD *)v13;
        }
      }
      v17 = v14 - 1;
      if (v17)
      {
        *(_DWORD *)v13 = v17;
      }
      else
      {
        WebCore::WorkerInspectorProxy::~WorkerInspectorProxy(v13, v4);
        result = WTF::fastFree(v20, v21);
      }
      v18 = v7;
      if (v9 + 8 != v7)
      {
        v18 = v9 + 8;
        while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
        {
          v18 += 8;
          if (v18 == v7)
          {
            v18 = v7;
            break;
          }
        }
      }
      v9 = v10;
      if (v18 != v10)
      {
        v9 = v18;
        if (!*(_QWORD *)(*(_QWORD *)v18 + 8))
        {
          while (1)
          {
            v19 = v9 + 8;
            v9 = v7;
            if (v19 != v7)
            {
              v9 = v19;
              while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
              {
                v9 += 8;
                if (v9 == v7)
                {
                  v9 = v7;
                  break;
                }
              }
            }
            if (v9 == v10)
              break;
            if (*(_QWORD *)(*(_QWORD *)v9 + 8))
              goto LABEL_55;
          }
          v9 = v10;
        }
      }
LABEL_55:
      LODWORD(v30) = v30 + 1;
    }
    while (v9 != v12);
    v6 = v29;
  }
  if (v6)
  {
    v24 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v24)
    {
      for (i = 0; i != v24; ++i)
      {
        v26 = *(unsigned int **)(v6 + 8 * i);
        if (v26 != (unsigned int *)-1)
        {
          *(_QWORD *)(v6 + 8 * i) = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v4);
            }
          }
        }
      }
    }
    return WTF::fastFree((WTF *)(v6 - 16), v4);
  }
  return result;
}

uint64_t WebCore::ServiceWorkerAgent::ServiceWorkerAgent(_QWORD *a1, _QWORD *a2)
{
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v8)
  {
    v5 = *(_DWORD *)v8;
    *(_DWORD *)v8 += 2;
    *a1 = off_1E33EFBF8;
    a1[1] = v8;
    a1[2] = a2[4];
    a1[3] = *a2;
    if (v5)
      *(_DWORD *)v8 = v5;
    else
      WTF::StringImpl::destroy(v8, v4);
  }
  else
  {
    a1[1] = 0;
    a1[2] = a2[4];
    a1[3] = *a2;
  }
  a1[4] = &unk_1E33F1EE0;
  *a1 = off_1E33F1E98;
  v6 = a2[5];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 488))(v6) == 1)
  {
    a1[5] = v6;
    Inspector::ServiceWorkerBackendDispatcher::create();
    a1[6] = v8;
    return (uint64_t)a1;
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void WebCore::ServiceWorkerAgent::~ServiceWorkerAgent(WebCore::ServiceWorkerAgent *this)
{
  _DWORD *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v2 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  Inspector::ServiceWorkerBackendDispatcherHandler::~ServiceWorkerBackendDispatcherHandler((WebCore::ServiceWorkerAgent *)((char *)this + 32));
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  _DWORD *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v2 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  Inspector::ServiceWorkerBackendDispatcherHandler::~ServiceWorkerBackendDispatcherHandler((WebCore::ServiceWorkerAgent *)((char *)this + 32));
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EFC38;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, v3);
}

void `non-virtual thunk to'WebCore::ServiceWorkerAgent::~ServiceWorkerAgent(WebCore::ServiceWorkerAgent *this)
{
  _DWORD *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  Inspector::ServiceWorkerBackendDispatcherHandler::~ServiceWorkerBackendDispatcherHandler(this);
  v4 = (WTF::StringImpl *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 4) = off_1E33EFC38;
  *((_QWORD *)this - 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = (WebCore::ServiceWorkerAgent *)((char *)this - 32);
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  Inspector::ServiceWorkerBackendDispatcherHandler::~ServiceWorkerBackendDispatcherHandler(this);
  v5 = (WTF::StringImpl *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 4) = off_1E33EFC38;
  *((_QWORD *)this - 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(v2, v4);
}

uint64_t *WebCore::ServiceWorkerAgent::getInitializationInfo@<X0>(WebCore::SecurityContext **this@<X0>, uint64_t a2@<X8>)
{
  WTF::JSONImpl::Value *v4;
  uint64_t *v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t *v15;
  const WTF::String *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::JSONImpl::Value *v24;
  uint64_t *v25;
  const WTF::String *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  uint64_t *v34;
  const WTF::String *v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  uint64_t *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t *result;
  _DWORD **v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD **v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD **v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD **v56;
  uint64_t v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t *v61;
  WTF::StringImpl *v62;
  _DWORD *v63;
  _BYTE v64[16];
  char v65;

  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)this);
  v4 = (WebCore::SecurityContext *)((char *)this[5] + 528);
  v5 = v61;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v4, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v61 + 2, &v62, (const WTF::StringImpl *)&v63, (uint64_t)v64);
  if (v65)
  {
    v8 = v61 + 3;
    v9 = *((unsigned int *)v61 + 9);
    if ((_DWORD)v9 == *((_DWORD *)v61 + 8))
    {
      v47 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v62);
      v9 = *((unsigned int *)v61 + 9);
      v48 = v61[3];
      v49 = *v47;
      if (*v47)
        *v49 += 2;
      *(_QWORD *)(v48 + 8 * v9) = v49;
    }
    else
    {
      v10 = *v8;
      v11 = v62;
      if (v62)
        *(_DWORD *)v62 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *((_DWORD *)v5 + 9) = v9 + 1;
  }
  v12 = v63;
  v63 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  v13 = v62;
  v62 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v7);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::SecurityContext::securityOrigin(this[5], v7);
  WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v14 + 8), &v60);
  v15 = v61;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v60, v16);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v15 + 2, &v62, (const WTF::StringImpl *)&v63, (uint64_t)v64);
  if (v65)
  {
    v18 = v15 + 3;
    v19 = *((unsigned int *)v15 + 9);
    if ((_DWORD)v19 == *((_DWORD *)v15 + 8))
    {
      v50 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v62);
      v19 = *((unsigned int *)v15 + 9);
      v51 = v15[3];
      v52 = *v50;
      if (*v50)
        *v52 += 2;
      *(_QWORD *)(v51 + 8 * v19) = v52;
    }
    else
    {
      v20 = *v18;
      v21 = v62;
      if (v62)
        *(_DWORD *)v62 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *((_DWORD *)v15 + 9) = v19 + 1;
  }
  v22 = v63;
  v63 = 0;
  if (v22)
  {
    if (*v22 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v22;
  }
  v23 = v62;
  v62 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WebCore::SecurityContext *)((char *)this[5] + 1672);
  v25 = v61;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v24, v26);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v25 + 2, &v62, (const WTF::StringImpl *)&v63, (uint64_t)v64);
  if (v65)
  {
    v28 = v25 + 3;
    v29 = *((unsigned int *)v25 + 9);
    if ((_DWORD)v29 == *((_DWORD *)v25 + 8))
    {
      v53 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1, (unint64_t)&v62);
      v29 = *((unsigned int *)v25 + 9);
      v54 = v25[3];
      v55 = *v53;
      if (*v53)
        *v55 += 2;
      *(_QWORD *)(v54 + 8 * v29) = v55;
    }
    else
    {
      v30 = *v28;
      v31 = v62;
      if (v62)
        *(_DWORD *)v62 += 2;
      *(_QWORD *)(v30 + 8 * v29) = v31;
    }
    *((_DWORD *)v25 + 9) = v29 + 1;
  }
  v32 = v63;
  v63 = 0;
  if (v32)
  {
    if (*v32 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v32;
  }
  v33 = v62;
  v62 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v27);
    else
      *(_DWORD *)v33 -= 2;
  }
  WebCore::ScriptBuffer::toString((WebCore::SecurityContext *)((char *)this[5] + 1600), &v59);
  v34 = v61;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v59, v35);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v34 + 2, &v62, (const WTF::StringImpl *)&v63, (uint64_t)v64);
  if (v65)
  {
    v37 = v34 + 3;
    v38 = *((unsigned int *)v34 + 9);
    if ((_DWORD)v38 == *((_DWORD *)v34 + 8))
    {
      v56 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v62);
      v38 = *((unsigned int *)v34 + 9);
      v57 = v34[3];
      v58 = *v56;
      if (*v56)
        *v58 += 2;
      *(_QWORD *)(v57 + 8 * v38) = v58;
    }
    else
    {
      v39 = *v37;
      v40 = v62;
      if (v62)
        *(_DWORD *)v62 += 2;
      *(_QWORD *)(v39 + 8 * v38) = v40;
    }
    *((_DWORD *)v34 + 9) = v38 + 1;
  }
  v41 = v63;
  v63 = 0;
  if (v41)
  {
    if (*v41 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v41;
  }
  v42 = v62;
  v62 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v36);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = v61;
  v61 = 0;
  *(_QWORD *)a2 = v43;
  *(_DWORD *)(a2 + 8) = 0;
  v44 = v59;
  v59 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v36);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = v60;
  v60 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v36);
    else
      *(_DWORD *)v45 -= 2;
  }
  result = v61;
  v61 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (uint64_t *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t *`non-virtual thunk to'WebCore::ServiceWorkerAgent::getInitializationInfo@<X0>(WebCore::SecurityContext **this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::ServiceWorkerAgent::getInitializationInfo(this - 4, a2);
}

void `non-virtual thunk to'WebCore::WorkerAuditAgent::~WorkerAuditAgent(WebCore::WorkerAuditAgent *this)
{
  Inspector::InspectorAuditAgent::~InspectorAuditAgent((WebCore::WorkerAuditAgent *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  Inspector::InspectorAuditAgent::~InspectorAuditAgent((WebCore::WorkerAuditAgent *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

void WebCore::WorkerAuditAgent::~WorkerAuditAgent(WebCore::WorkerAuditAgent *this)
{
  WTF *v1;
  void *v2;

  Inspector::InspectorAuditAgent::~InspectorAuditAgent(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::WorkerAuditAgent::injectedScriptForEval@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, Inspector::InjectedScript *a4@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  Inspector::InjectedScriptManager *v9;
  uint64_t v10;
  JSC::JSGlobalObject **v11;
  JSC::JSGlobalObject *v12;
  JSC::JSGlobalObject **v13;
  WTF::StringImpl *v14;

  if (*(_BYTE *)(a3 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = *a2;
    *a2 = v14;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    return Inspector::InjectedScript::InjectedScript(a4);
  }
  else
  {
    v9 = *(Inspector::InjectedScriptManager **)(a1 + 32);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 344);
    v11 = *(JSC::JSGlobalObject ***)(v10 + 24);
    if (!v11 || (v12 = *v11) == 0)
    {
      WebCore::WorkerOrWorkletScriptController::initScript(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 344));
      v13 = *(JSC::JSGlobalObject ***)(v10 + 24);
      if (v13)
        v12 = *v13;
      else
        v12 = 0;
    }
    return Inspector::InjectedScriptManager::injectedScriptFor(v9, v12);
  }
}

void `non-virtual thunk to'WebCore::WorkerCanvasAgent::~WorkerCanvasAgent(WebCore::WorkerCanvasAgent *this, WTF::StringImpl *a2)
{
  WebCore::InspectorCanvasAgent::~InspectorCanvasAgent((WebCore::WorkerCanvasAgent *)((char *)this - 32), a2);
}

{
  WebCore::InspectorCanvasAgent::~InspectorCanvasAgent((WebCore::WorkerCanvasAgent *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorCanvasAgent::~InspectorCanvasAgent((WebCore::WorkerCanvasAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorCanvasAgent::~InspectorCanvasAgent((WebCore::WorkerCanvasAgent *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::WorkerCanvasAgent::~WorkerCanvasAgent(WebCore::WorkerCanvasAgent *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::InspectorCanvasAgent::~InspectorCanvasAgent(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WorkerCanvasAgent::requestNode@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_DWORD *)(a1 + 8) = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WorkerCanvasAgent::requestNode@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_DWORD *)(a1 + 8) = 1;
  return result;
}

uint64_t WebCore::WorkerCanvasAgent::requestClientNodes@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_DWORD *)(a1 + 8) = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WorkerCanvasAgent::requestClientNodes@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_DWORD *)(a1 + 8) = 1;
  return result;
}

BOOL WebCore::WorkerCanvasAgent::matchesCurrentContext(WebCore::WorkerCanvasAgent *this, WebCore::ScriptExecutionContext *a2)
{
  return a2 && *((_BYTE *)a2 + 274) == 1 && *((_QWORD *)this + 39) == (_QWORD)a2;
}

uint64_t WebCore::PageNetworkAgent::shouldForceBufferingNetworkResourceData(WebCore::PageNetworkAgent *this)
{
  return 0;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PageRuntimeAgent::reportExecutionContextCreation(void)::$_0,void,WebCore::LocalFrame &>::call(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v3;
  Inspector::InjectedScriptManager **v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  WebCore::WindowProxy *v11;
  WebCore::DOMWrapperWorld *v12;
  JSC::JSGlobalObject *v13;
  const WebCore::DOMWrapperWorld *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  JSC::JSGlobalObject *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  const WebCore::DOMWrapperWorld *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;
  void *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  char v46;

  v3 = result;
  v4 = (Inspector::InjectedScriptManager **)*((_QWORD *)result + 2);
  v5 = *(_QWORD **)(*(_QWORD *)(a2 + 304) + 16);
  v6 = v5[37];
  if (!v6 || (*(_BYTE *)(v6 + 268) & 0x10) == 0)
  {
    v7 = v5[3];
    if (v7 && *(_QWORD *)(v7 + 8))
    {
      v8 = *(_QWORD *)(v5[35] + 16);
      v9 = v5[17];
      v10 = *(_BYTE *)(v9 + 245) ? *(_BYTE *)(v9 + 244) != 0 : (*(_QWORD *)(v9 + 688) >> 52) & 1;
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)v8 + 968))(v8, v10);
      if ((_DWORD)result)
      {
        WebCore::InspectorPageAgent::frameId(**((unsigned int ***)v3 + 1), (WebCore::Frame *)a2, &v45);
        v11 = *(WebCore::WindowProxy **)(a2 + 112);
        {
          v12 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
        }
        else
        {
          v40 = WebCore::g_commonVMOrNull;
          if (!WebCore::g_commonVMOrNull)
            v40 = WebCore::commonVMSlow(0);
          v12 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v40 + 41456) + 16);
          WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v12;
        }
        v13 = (JSC::JSGlobalObject *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(v11, v12) + 2);
        {
          v14 = (const WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
        }
        else
        {
          v41 = WebCore::g_commonVMOrNull;
          if (!WebCore::g_commonVMOrNull)
            v41 = WebCore::commonVMSlow(0);
          v14 = *(const WebCore::DOMWrapperWorld **)(*(_QWORD *)(v41 + 41456) + 16);
          WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v14;
        }
        WebCore::PageRuntimeAgent::notifyContextCreated(v4, (const WTF::String *)&v45, v13, v14, 0);
        WebCore::WindowProxy::jsWindowProxiesAsVector(*(WebCore::WindowProxy **)(a2 + 112), &v42);
        v16 = v42;
        if (v44)
        {
          v17 = (WTF *)((char *)v42 + 8 * v44);
          while (1)
          {
            if (*(_QWORD *)v16)
            {
              v18 = **(_QWORD **)v16;
              v19 = *(JSC::JSGlobalObject **)(v18 + 16);
              if (v19 != v13)
              {
                v20 = WebCore::JSDOMWindowBase::wrapped(*(WebCore::JSDOMWindowBase **)(v18 + 16));
                if (*(_BYTE *)(v20 + 56))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E6BAE0);
                }
                v22 = *(_QWORD *)(v20 + 72);
                if (v22)
                {
                  v22 = *(_QWORD *)(v22 + 8);
                  if (v22)
                  {
                    if (*(_BYTE *)(v22 + 178))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195E6BB00);
                    }
                    v22 -= 288;
                  }
                }
                WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v22 + 192), v21);
                v24 = v23;
                do
                  v25 = __ldaxr(v23);
                while (__stlxr(v25 + 1, v23));
                v26 = *(const WebCore::DOMWrapperWorld **)(**(_QWORD **)v16 + 24);
                ++*(_DWORD *)v26;
                WebCore::PageRuntimeAgent::notifyContextCreated(v4, (const WTF::String *)&v45, v19, v26, (WebCore::SecurityOrigin *)v23);
                if (*(_DWORD *)v26 == 1)
                {
                  WebCore::DOMWrapperWorld::~DOMWrapperWorld(v26, v15);
                  WTF::fastFree(v29, v30);
                  if (v24)
                  {
                    do
                    {
LABEL_25:
                      v27 = __ldaxr(v24);
                      v28 = v27 - 1;
                    }
                    while (__stlxr(v28, v24));
                    if (!v28)
                    {
                      atomic_store(1u, v24);
                      v31 = (WTF::StringImpl *)*((_QWORD *)v24 + 6);
                      *((_QWORD *)v24 + 6) = 0;
                      if (v31)
                      {
                        if (*(_DWORD *)v31 == 2)
                          WTF::StringImpl::destroy(v31, v15);
                        else
                          *(_DWORD *)v31 -= 2;
                      }
                      v32 = (WTF::StringImpl *)*((_QWORD *)v24 + 5);
                      *((_QWORD *)v24 + 5) = 0;
                      if (v32)
                      {
                        if (*(_DWORD *)v32 == 2)
                          WTF::StringImpl::destroy(v32, v15);
                        else
                          *(_DWORD *)v32 -= 2;
                      }
                      v33 = v24[8];
                      if ((_DWORD)v33 != -1)
                        ((void (*)(char *, unsigned int *))off_1E33F2178[v33])(&v46, v24 + 2);
                      v24[8] = -1;
                      WTF::fastFree((WTF *)v24, v15);
                    }
                  }
                }
                else
                {
                  --*(_DWORD *)v26;
                  if (v24)
                    goto LABEL_25;
                }
              }
            }
            v16 = (WTF *)((char *)v16 + 8);
            if (v16 == v17)
            {
              v16 = v42;
              if (v44)
              {
                v34 = 8 * v44;
                do
                {
                  v35 = *(uint64_t **)v16;
                  if (*(_QWORD *)v16)
                  {
                    v36 = v35 - 2;
                    v37 = *(_QWORD *)(((unint64_t)(v35 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v38 = (uint64_t *)*(v35 - 1);
                    if (v38)
                    {
                      v39 = *v36;
                      *v38 = *v36;
                      *(_QWORD *)(v39 + 8) = v38;
                      *v36 = 0;
                      v36[1] = 0;
                    }
                    *v36 = *(_QWORD *)(v37 + 40);
                    *(_QWORD *)(v37 + 40) = v36;
                    *(_QWORD *)v16 = 0;
                  }
                  v16 = (WTF *)((char *)v16 + 8);
                  v34 -= 8;
                }
                while (v34);
                v16 = v42;
              }
              break;
            }
          }
        }
        if (v16)
        {
          v42 = 0;
          v43 = 0;
          WTF::fastFree(v16, v15);
        }
        result = v45;
        v45 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void `non-virtual thunk to'WebCore::WorkerConsoleAgent::~WorkerConsoleAgent(WebCore::WorkerConsoleAgent *this)
{
  Inspector::InspectorConsoleAgent::~InspectorConsoleAgent((WebCore::WorkerConsoleAgent *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  Inspector::InspectorConsoleAgent::~InspectorConsoleAgent((WebCore::WorkerConsoleAgent *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

void WebCore::WorkerConsoleAgent::~WorkerConsoleAgent(WebCore::WorkerConsoleAgent *this)
{
  WTF *v1;
  void *v2;

  Inspector::InspectorConsoleAgent::~InspectorConsoleAgent(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebCore::WorkerDOMDebuggerAgent::~WorkerDOMDebuggerAgent(WebCore::WorkerDOMDebuggerAgent *this, WTF::StringImpl *a2)
{
  WebCore::InspectorDOMDebuggerAgent::~InspectorDOMDebuggerAgent((WebCore::WorkerDOMDebuggerAgent *)((char *)this - 32), a2);
}

{
  WebCore::InspectorDOMDebuggerAgent::~InspectorDOMDebuggerAgent((WebCore::WorkerDOMDebuggerAgent *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorDOMDebuggerAgent::~InspectorDOMDebuggerAgent((WebCore::WorkerDOMDebuggerAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorDOMDebuggerAgent::~InspectorDOMDebuggerAgent((WebCore::WorkerDOMDebuggerAgent *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::WorkerDOMDebuggerAgent::~WorkerDOMDebuggerAgent(WebCore::WorkerDOMDebuggerAgent *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::InspectorDOMDebuggerAgent::~InspectorDOMDebuggerAgent(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WorkerDOMDebuggerAgent::setDOMBreakpoint@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WorkerDOMDebuggerAgent::setDOMBreakpoint@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t WebCore::WorkerDOMDebuggerAgent::removeDOMBreakpoint@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WorkerDOMDebuggerAgent::removeDOMBreakpoint@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t WebCore::WorkerDOMDebuggerAgent::setAnimationFrameBreakpoint(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = *a2;
  *a2 = v6;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  return 0;
}

void WebCore::WorkerDebuggerAgent::~WorkerDebuggerAgent(WebCore::WorkerDebuggerAgent *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E33F0C10;
  *((_QWORD *)this + 2) = &unk_1E33F0DF8;
  *((_QWORD *)this + 3) = &unk_1E33F0F00;
  *((_QWORD *)this + 4) = &unk_1E33F0F40;
  v3 = *((_QWORD *)this + 35);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 34);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 33);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent(this);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E33F0C10;
  *((_QWORD *)this + 2) = &unk_1E33F0DF8;
  *((_QWORD *)this + 3) = &unk_1E33F0F00;
  *((_QWORD *)this + 4) = &unk_1E33F0F40;
  v3 = *((_QWORD *)this + 35);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 34);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 33);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent(this);
  WTF::fastFree(v6, v7);
}

void `non-virtual thunk to'WebCore::WorkerDebuggerAgent::~WorkerDebuggerAgent(WebCore::WorkerDebuggerAgent *this, void *a2)
{
  Inspector::InspectorDebuggerAgent *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this - 2) = off_1E33F0C10;
  v3 = (WebCore::WorkerDebuggerAgent *)((char *)this - 16);
  *(_QWORD *)this = &unk_1E33F0DF8;
  *((_QWORD *)this + 1) = &unk_1E33F0F00;
  *((_QWORD *)this + 2) = &unk_1E33F0F40;
  v4 = *((_QWORD *)this + 33);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 32);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  v6 = *((_QWORD *)this + 31);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent(v3);
}

{
  Inspector::InspectorDebuggerAgent *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this - 3) = off_1E33F0C10;
  v3 = (WebCore::WorkerDebuggerAgent *)((char *)this - 24);
  *((_QWORD *)this - 1) = &unk_1E33F0DF8;
  *(_QWORD *)this = &unk_1E33F0F00;
  *((_QWORD *)this + 1) = &unk_1E33F0F40;
  v4 = *((_QWORD *)this + 32);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 31);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  v6 = *((_QWORD *)this + 30);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent(v3);
}

{
  Inspector::InspectorDebuggerAgent *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this - 4) = off_1E33F0C10;
  v3 = (WebCore::WorkerDebuggerAgent *)((char *)this - 32);
  *((_QWORD *)this - 2) = &unk_1E33F0DF8;
  *((_QWORD *)this - 1) = &unk_1E33F0F00;
  *(_QWORD *)this = &unk_1E33F0F40;
  v4 = *((_QWORD *)this + 31);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 30);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  v6 = *((_QWORD *)this + 29);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent(v3);
}

{
  Inspector::InspectorDebuggerAgent *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this - 2) = off_1E33F0C10;
  v3 = (WebCore::WorkerDebuggerAgent *)((char *)this - 16);
  *(_QWORD *)this = &unk_1E33F0DF8;
  *((_QWORD *)this + 1) = &unk_1E33F0F00;
  *((_QWORD *)this + 2) = &unk_1E33F0F40;
  v4 = *((_QWORD *)this + 33);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 32);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  v6 = *((_QWORD *)this + 31);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent(v3);
  WTF::fastFree(v7, v8);
}

{
  Inspector::InspectorDebuggerAgent *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this - 3) = off_1E33F0C10;
  v3 = (WebCore::WorkerDebuggerAgent *)((char *)this - 24);
  *((_QWORD *)this - 1) = &unk_1E33F0DF8;
  *(_QWORD *)this = &unk_1E33F0F00;
  *((_QWORD *)this + 1) = &unk_1E33F0F40;
  v4 = *((_QWORD *)this + 32);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 31);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  v6 = *((_QWORD *)this + 30);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent(v3);
  WTF::fastFree(v7, v8);
}

{
  Inspector::InspectorDebuggerAgent *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this - 4) = off_1E33F0C10;
  v3 = (WebCore::WorkerDebuggerAgent *)((char *)this - 32);
  *((_QWORD *)this - 2) = &unk_1E33F0DF8;
  *((_QWORD *)this - 1) = &unk_1E33F0F00;
  *(_QWORD *)this = &unk_1E33F0F40;
  v4 = *((_QWORD *)this + 31);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 30);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  v6 = *((_QWORD *)this + 29);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent(v3);
  WTF::fastFree(v7, v8);
}

_DWORD *WebCore::WorkerDebuggerAgent::breakpointActionLog(WebCore::WorkerDebuggerAgent *this, JSC::JSGlobalObject *a2, const WTF::String *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  _DWORD *result;
  WTF *v11;
  void *v12;
  _DWORD *v13;
  uint64_t v14;

  v4 = *((_QWORD *)this + 37);
  Inspector::createScriptCallStack(a2, (JSC::JSGlobalObject *)0xC8);
  v5 = WTF::fastMalloc((WTF *)0x60);
  v14 = MEMORY[0x19AEA5F34](v5, 1, 0, 0, a3, &v13, 0, 0.0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 240))(v4, &v14);
  v7 = v14;
  v14 = 0;
  if (v7)
  {
    v8 = (WTF *)MEMORY[0x19AEA5F58]();
    WTF::fastFree(v8, v9);
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*result == 1)
    {
      v11 = (WTF *)MEMORY[0x19AEA6024](result, v6);
      return (_DWORD *)WTF::fastFree(v11, v12);
    }
    else
    {
      --*result;
    }
  }
  return result;
}

_DWORD *`non-virtual thunk to'WebCore::WorkerDebuggerAgent::breakpointActionLog(WebCore::WorkerDebuggerAgent *this, JSC::JSGlobalObject *a2, const WTF::String *a3)
{
  return WebCore::WorkerDebuggerAgent::breakpointActionLog((WebCore::WorkerDebuggerAgent *)((char *)this - 32), a2, a3);
}

uint64_t WebCore::WorkerDebuggerAgent::injectedScriptForEval@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, Inspector::InjectedScript *a4@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  Inspector::InjectedScriptManager *v9;
  uint64_t v10;
  JSC::JSGlobalObject **v11;
  JSC::JSGlobalObject *v12;
  JSC::JSGlobalObject **v13;
  WTF::StringImpl *v14;

  if (*(_BYTE *)(a3 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = *a2;
    *a2 = v14;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    return Inspector::InjectedScript::InjectedScript(a4);
  }
  else
  {
    v9 = *(Inspector::InjectedScriptManager **)(a1 + 64);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 344);
    v11 = *(JSC::JSGlobalObject ***)(v10 + 24);
    if (!v11 || (v12 = *v11) == 0)
    {
      WebCore::WorkerOrWorkletScriptController::initScript(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 344));
      v13 = *(JSC::JSGlobalObject ***)(v10 + 24);
      if (v13)
        v12 = *v13;
      else
        v12 = 0;
    }
    return Inspector::InjectedScriptManager::injectedScriptFor(v9, v12);
  }
}

void `non-virtual thunk to'WebCore::WorkerNetworkAgent::~WorkerNetworkAgent(WebCore::WorkerNetworkAgent *this, WTF::StringImpl *a2)
{
  WebCore::InspectorNetworkAgent::~InspectorNetworkAgent((WebCore::WorkerNetworkAgent *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorNetworkAgent::~InspectorNetworkAgent((WebCore::WorkerNetworkAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::WorkerNetworkAgent::~WorkerNetworkAgent(WebCore::WorkerNetworkAgent *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::InspectorNetworkAgent::~InspectorNetworkAgent(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::WorkerNetworkAgent::loaderIdentifier(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::WorkerNetworkAgent::frameIdentifier(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::WorkerNetworkAgent::activeWebSockets(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::WorkerNetworkAgent::setResourceCachingDisabledInternal(WebCore::WorkerNetworkAgent *this, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 23) + 360) + 40))(*(_QWORD *)(*((_QWORD *)this + 23) + 360));
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

uint64_t WebCore::WorkerNetworkAgent::scriptExecutionContext(WebCore::WorkerNetworkAgent *this, WTF::String *a2, const WTF::String *a3)
{
  return *((_QWORD *)this + 23);
}

uint64_t WebCore::WorkerNetworkAgent::addConsoleMessage(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 240))(*(_QWORD *)(a1 + 184));
}

void WebCore::WorkerRuntimeAgent::~WorkerRuntimeAgent(WebCore::WorkerRuntimeAgent *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  JUMPOUT(0x19AEA6384);
}

{
  _DWORD *v2;
  WTF *v3;
  void *v4;

  v2 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = (WTF *)MEMORY[0x19AEA6384](this);
  WTF::fastFree(v3, v4);
}

void `non-virtual thunk to'WebCore::WorkerRuntimeAgent::~WorkerRuntimeAgent(WebCore::WorkerRuntimeAgent *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  JUMPOUT(0x19AEA6384);
}

{
  _DWORD *v2;
  WTF *v3;
  void *v4;

  v2 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = (WTF *)MEMORY[0x19AEA6384]((char *)this - 16);
  WTF::fastFree(v3, v4);
}

uint64_t WebCore::WorkerRuntimeAgent::injectedScriptForEval@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, Inspector::InjectedScript *a4@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  Inspector::InjectedScriptManager *v9;
  uint64_t v10;
  JSC::JSGlobalObject **v11;
  JSC::JSGlobalObject *v12;
  JSC::JSGlobalObject **v13;
  WTF::StringImpl *v14;

  if (*(_BYTE *)(a3 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = *a2;
    *a2 = v14;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    return Inspector::InjectedScript::InjectedScript(a4);
  }
  else
  {
    v9 = *(Inspector::InjectedScriptManager **)(a1 + 24);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 344);
    v11 = *(JSC::JSGlobalObject ***)(v10 + 24);
    if (!v11 || (v12 = *v11) == 0)
    {
      WebCore::WorkerOrWorkletScriptController::initScript(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 344));
      v13 = *(JSC::JSGlobalObject ***)(v10 + 24);
      if (v13)
        v12 = *v13;
      else
        v12 = 0;
    }
    return Inspector::InjectedScriptManager::injectedScriptFor(v9, v12);
  }
}

void `non-virtual thunk to'WebCore::WorkerWorkerAgent::~WorkerWorkerAgent(WebCore::WorkerWorkerAgent *this, void *a2)
{
  WebCore::InspectorWorkerAgent::~InspectorWorkerAgent((WebCore::WorkerWorkerAgent *)((char *)this - 32), a2);
}

{
  WebCore::InspectorWorkerAgent::~InspectorWorkerAgent((WebCore::WorkerWorkerAgent *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorWorkerAgent::~InspectorWorkerAgent((WebCore::WorkerWorkerAgent *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::InspectorWorkerAgent::~InspectorWorkerAgent((WebCore::WorkerWorkerAgent *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::WorkerWorkerAgent::~WorkerWorkerAgent(WebCore::WorkerWorkerAgent *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::InspectorWorkerAgent::~InspectorWorkerAgent(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WorkerWorkerAgent::connectToAllWorkerInspectorProxies(WebCore::WorkerWorkerAgent *this)
{
  uint64_t result;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::WorkerInspectorProxy *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  if (__ldaxr(WebCore::proxiesLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::proxiesLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::proxiesLock);
LABEL_5:
  {
    WebCore::proxies(void)::proxies = 0;
    qword_1EE2F97C8 = 0;
  }
  result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::HashTable(&v28, &WebCore::proxies(void)::proxies);
  v29 = qword_1EE2F97C8;
  v5 = __ldxr(WebCore::proxiesLock);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, WebCore::proxiesLock))
LABEL_11:
    result = WTF::Lock::unlockSlow((WTF::Lock *)WebCore::proxiesLock);
  v6 = v28;
  if (!v28)
  {
    v7 = 0;
    v8 = 0;
LABEL_14:
    v9 = v7;
    v7 = v28 + 8 * v8;
    goto LABEL_15;
  }
  v8 = *(unsigned int *)(v28 - 4);
  v7 = v28 + 8 * v8;
  if (!*(_DWORD *)(v28 - 12))
    goto LABEL_14;
  if (!(_DWORD)v8)
  {
    v22 = 0;
    v9 = v28;
    goto LABEL_65;
  }
  v21 = 8 * v8;
  v9 = v28;
  while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
  {
    v9 += 8;
    v21 -= 8;
    if (!v21)
    {
      v9 = v7;
      break;
    }
  }
LABEL_15:
  if (!v28)
  {
    v10 = 0;
    goto LABEL_17;
  }
  v22 = *(unsigned int *)(v28 - 4);
LABEL_65:
  v10 = v28 + 8 * v22;
LABEL_17:
  if (v10 != v9)
  {
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v11 = v9 + 8;
      v9 = v7;
      if (v11 != v7)
      {
        v9 = v11;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  if (v28)
    v12 = v28 + 8 * *(unsigned int *)(v28 - 4);
  else
    v12 = 0;
  if (v9 != v12)
  {
    do
    {
      v13 = *(WebCore::WorkerInspectorProxy **)(*(_QWORD *)v9 + 8);
      v14 = *(_DWORD *)v13 + 1;
      *(_DWORD *)v13 = v14;
      v15 = *((_QWORD *)v13 + 2);
      if (v15 && *(_BYTE *)(v15 + 274) == 1 && v15 == *((_QWORD *)this + 12))
      {
        result = WebCore::InspectorWorkerAgent::connectToWorkerInspectorProxy(this, v13);
        v14 = *(_DWORD *)v13;
      }
      v16 = v14 - 1;
      if (v16)
      {
        *(_DWORD *)v13 = v16;
      }
      else
      {
        WebCore::WorkerInspectorProxy::~WorkerInspectorProxy(v13, v4);
        result = WTF::fastFree(v19, v20);
      }
      v17 = v7;
      if (v9 + 8 != v7)
      {
        v17 = v9 + 8;
        while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
        {
          v17 += 8;
          if (v17 == v7)
          {
            v17 = v7;
            break;
          }
        }
      }
      v9 = v10;
      if (v17 != v10)
      {
        v9 = v17;
        if (!*(_QWORD *)(*(_QWORD *)v17 + 8))
        {
          while (1)
          {
            v18 = v9 + 8;
            v9 = v7;
            if (v18 != v7)
            {
              v9 = v18;
              while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
              {
                v9 += 8;
                if (v9 == v7)
                {
                  v9 = v7;
                  break;
                }
              }
            }
            if (v9 == v10)
              break;
            if (*(_QWORD *)(*(_QWORD *)v9 + 8))
              goto LABEL_51;
          }
          v9 = v10;
        }
      }
LABEL_51:
      LODWORD(v29) = v29 + 1;
    }
    while (v9 != v12);
    v6 = v28;
  }
  if (v6)
  {
    v23 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v23)
    {
      for (i = 0; i != v23; ++i)
      {
        v25 = *(unsigned int **)(v6 + 8 * i);
        if (v25 != (unsigned int *)-1)
        {
          *(_QWORD *)(v6 + 8 * i) = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v4);
            }
          }
        }
      }
    }
    return WTF::fastFree((WTF *)(v6 - 16), v4);
  }
  return result;
}

uint64_t WebCore::WorkerNetworkAgent::shouldForceBufferingNetworkResourceData(WebCore::WorkerNetworkAgent *this)
{
  return 1;
}

uint64_t WebCore::Layout::BoxGeometry::borderBoxWidth(WebCore::Layout::BoxGeometry *this)
{
  int v1;
  unsigned int v2;
  int v3;
  BOOL v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v1 = *((_DWORD *)this + 2);
  v2 = *((_DWORD *)this + 12);
  v3 = *((_DWORD *)this + 13);
  v4 = __OFADD__(v2, v1);
  v5 = v2 + v1;
  v6 = (v2 >> 31) + 0x7FFFFFFF;
  if (v4)
    v5 = v6;
  v4 = __OFADD__(v5, v3);
  v7 = v5 + v3;
  v8 = (v5 >> 31) + 0x7FFFFFFF;
  if (!v4)
    v8 = v7;
  v9 = *((_DWORD *)this + 8);
  v10 = *((_DWORD *)this + 9);
  v4 = __OFADD__(v9, v8);
  v11 = v9 + v8;
  v12 = (v9 >> 31) + 0x7FFFFFFF;
  if (v4)
    v11 = v12;
  v13 = *((_DWORD *)this + 17);
  v4 = __OFADD__(v11, v13);
  v14 = v11 + v13;
  v15 = (v11 >> 31) + 0x7FFFFFFF;
  if (!v4)
    v15 = v14;
  v4 = __OFADD__(v15, v10);
  v16 = v15 + v10;
  v17 = (v15 >> 31) + 0x7FFFFFFF;
  if (v4)
    return v17;
  else
    return v16;
}

uint64_t WebCore::Layout::findAvailablePosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  BOOL v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  signed int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  int v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  signed int v68;
  signed int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  signed int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  int v92;
  int v93;
  signed int v94;
  signed int v95;
  __int128 v96;
  __int128 v97;
  uint64_t *v98;
  __int128 v99;
  __int128 v100;

  v6 = *(_DWORD *)(a1 + 12);
  if (*(_BYTE *)(a1 + 44))
  {
    v7 = *(_DWORD *)(a1 + 28);
    v8 = __OFSUB__(v6, v7);
    v9 = v6 - v7;
    if (v8)
      v6 = (v6 >> 31) + 0x7FFFFFFF;
    else
      v6 = v9;
  }
  v98 = (uint64_t *)a2;
  *(_QWORD *)&v99 = a2;
  BYTE8(v99) = 0;
  BYTE12(v99) = 0;
  LOBYTE(v100) = 0;
  BYTE4(v100) = 0;
  DWORD2(v100) = v6;
  v10 = *(_DWORD *)(a2 + 12);
  if (!v10)
    goto LABEL_102;
  if ((*((_QWORD *)&v99 + 1) & 0xFF00000000) != 0)
    LODWORD(v11) = DWORD2(v99);
  else
    LODWORD(v11) = *(_DWORD *)(a2 + 12);
  if (v10 < v11)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x195E6CA38);
  }
  while (1)
  {
    if (!(_DWORD)v11)
    {
      v11 = 0;
      goto LABEL_21;
    }
    v11 = v11;
    v12 = (int *)(*(_QWORD *)a2 + 120 * v11 - 112);
    while (1)
    {
      --v11;
      v13 = *v12;
      v12 -= 30;
      if (!v13)
        break;
      if (!v11)
        goto LABEL_21;
    }
    if (v11 >= (unint64_t)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x195E6D040);
    }
    v14 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(*(_QWORD *)a2 + 120 * v11 + 12));
    if (v6 >= SHIDWORD(v14))
    {
      v16 = (HIDWORD(v14) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v14), v15))
        v16 = HIDWORD(v14) + v15;
      if (v16 > v6)
        break;
    }
    v10 = *(_DWORD *)(a2 + 12);
    if (v10 < v11)
      goto LABEL_19;
  }
  v11 = v11 | 0x100000000;
  v10 = *(_DWORD *)(a2 + 12);
LABEL_21:
  DWORD2(v99) = v11;
  BYTE12(v99) = BYTE4(v11);
  if ((v100 & 0xFF00000000) != 0)
    LODWORD(v17) = v100;
  else
    LODWORD(v17) = v10;
  if (v10 < v17)
  {
LABEL_113:
    __break(0xC471u);
    JUMPOUT(0x195E6CE40);
  }
  while (1)
  {
    if (!(_DWORD)v17)
    {
LABEL_29:
      v20 = 0;
      goto LABEL_30;
    }
    v17 = v17;
    v18 = (int *)(*(_QWORD *)a2 + 120 * v17 - 112);
    while (1)
    {
      --v17;
      v19 = *v18;
      v18 -= 30;
      if (v19)
        break;
      if (!v17)
        goto LABEL_29;
    }
    if (v17 >= (unint64_t)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x195E6D048);
    }
    v73 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(*(_QWORD *)a2 + 120 * v17 + 12));
    if (v6 >= SHIDWORD(v73))
    {
      v75 = (HIDWORD(v73) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v73), v74))
        v75 = HIDWORD(v73) + v74;
      if (v75 > v6)
        break;
    }
    v10 = *(_DWORD *)(a2 + 12);
    if (v10 < v17)
      goto LABEL_113;
  }
  v20 = v17 | 0x100000000;
LABEL_30:
  LODWORD(v100) = v20;
  BYTE4(v100) = BYTE4(v20);
  if (((v11 | v20) & 0x100000000) == 0)
  {
LABEL_102:
    LOBYTE(v21) = 0;
    v62 = 0;
    v61 = 0;
    v60 = 0;
    return v62 & 0xFF00000000 | v21 | v61 | v60 & 0xFFFFFF00;
  }
  v21 = 0;
  v22 = 1;
  do
  {
    v96 = v99;
    v97 = v100;
    v24 = *((_QWORD *)&v99 + 1);
    v23 = v100;
    if ((v22 & 1) != 0)
      v21 = *((_QWORD *)&v96 + 1);
    if ((*((_QWORD *)&v99 + 1) & 0xFF00000000) == 0)
      goto LABEL_116;
    if (*(_DWORD *)(v96 + 12) <= DWORD2(v96))
    {
      __break(0xC471u);
      JUMPOUT(0x195E6D050);
    }
    if (*(_QWORD *)v96)
    {
      v25 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(*(_QWORD *)v96 + 120 * DWORD2(v96) + 12));
      LODWORD(v27) = v25 + v26;
      if (__OFADD__(v25, v26))
        v27 = (v25 >> 31) + 0x7FFFFFFF;
      else
        v27 = v27;
      v28 = v27 | 0x100000000;
    }
    else
    {
LABEL_116:
      v28 = 0;
    }
    if ((v23 & 0xFF00000000) != 0)
    {
      if (*(_DWORD *)(v96 + 12) <= v23)
      {
        __break(0xC471u);
        JUMPOUT(0x195E6D060);
      }
      v29 = *(_QWORD *)v96;
      if (*(_QWORD *)v96)
        v29 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v29 + 120 * v23 + 12)) | 0x100000000;
    }
    else
    {
      v29 = 0;
    }
    if (((v28 & 0x100000000) == 0 || (int)v28 <= (int)a3) && ((v29 & 0x100000000) == 0 || (int)v29 >= SHIDWORD(a3)))
    {
LABEL_86:
      v60 = v21 & 0xFFFFFF00;
      v61 = v21 & 0xFFFFFF0000000000;
      v62 = v21 & 0xFFFFFFFF00000000;
      return v62 & 0xFF00000000 | v21 | v61 | v60 & 0xFFFFFF00;
    }
    if (*(_BYTE *)(a1 + 45))
      v29 = v28;
    if ((v29 & 0x100000000) != 0)
    {
      WebCore::Layout::FloatAvoider::setHorizontalPosition(a1, v29);
      goto LABEL_53;
    }
    if (*(_BYTE *)(a1 + 45))
    {
      v93 = *(_DWORD *)(a1 + 20);
      v32 = *(_DWORD *)(a1 + 36);
      v8 = __OFADD__(v32, v93);
      v34 = v32 + v93;
      if (!v8)
        goto LABEL_52;
    }
    else
    {
      v30 = *(_DWORD *)(a1 + 24);
      v31 = *(_DWORD *)(a1 + 40);
      v8 = __OFSUB__(v31, v30);
      v32 = v31 - v30;
      if (v8)
        v32 = (v31 >> 31) + 0x7FFFFFFF;
      v33 = *(_DWORD *)(a1 + 16);
      v8 = __OFSUB__(v32, v33);
      v34 = v32 - v33;
      if (!v8)
        goto LABEL_52;
    }
    v34 = (v32 >> 31) + 0x7FFFFFFF;
LABEL_52:
    *(_DWORD *)(a1 + 8) = v34;
LABEL_53:
    v35 = DWORD2(v97);
    if (*(_BYTE *)(a1 + 44))
    {
      v36 = *(_DWORD *)(a1 + 28);
      v8 = __OFADD__(DWORD2(v97), v36);
      v37 = DWORD2(v97) + v36;
      v35 = (DWORD2(v97) >> 31) + 0x7FFFFFFF;
      if (!v8)
        v35 = v37;
    }
    *(_DWORD *)(a1 + 12) = v35;
    if ((v24 & 0xFF00000000) != 0)
    {
      if (*(_DWORD *)(v96 + 12) <= v24)
      {
        __break(0xC471u);
        JUMPOUT(0x195E6D058);
      }
      if (*(_QWORD *)v96)
      {
        v38 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(*(_QWORD *)v96 + 120 * v24 + 12));
        v41 = *(_DWORD *)(a1 + 8);
        v42 = v41;
        if (*(_BYTE *)(a1 + 44))
        {
          v43 = *(_DWORD *)(a1 + 20);
          v8 = __OFSUB__(v41, v43);
          v42 = v41 - v43;
          if (v8)
            v42 = (v41 >> 31) + 0x7FFFFFFF;
        }
        v44 = v38 + v39;
        if (__OFADD__((_DWORD)v38, v39))
          v44 = (v38 >> 31) + 0x7FFFFFFF;
        if (v42 < v44)
        {
          if (*(_BYTE *)(a1 + 44))
          {
            v45 = *(_DWORD *)(a1 + 20);
            v8 = __OFSUB__(v41, v45);
            v46 = v41 - v45;
            if (v8)
              v41 = (v41 >> 31) + 0x7FFFFFFF;
            else
              v41 = v46;
          }
          v47 = *(_DWORD *)(a1 + 16);
          v8 = __OFADD__(v41, v47);
          v48 = v41 + v47;
          if (v8)
            v48 = (v41 >> 31) + 0x7FFFFFFF;
          if (*(_BYTE *)(a1 + 44))
          {
            v49 = *(_DWORD *)(a1 + 24);
            v8 = __OFADD__(v48, v49);
            v50 = v48 + v49;
            if (v8)
              v50 = (v48 >> 31) + 0x7FFFFFFF;
            if (v50 <= (int)v38)
              goto LABEL_75;
            v66 = *(_DWORD *)(a1 + 12);
            v67 = *(_DWORD *)(a1 + 28);
            v8 = __OFSUB__(v66, v67);
            v64 = v66 - v67;
            if (v8)
              v64 = (v66 >> 31) + 0x7FFFFFFF;
            v65 = HIDWORD(v38);
            if (v64 < SHIDWORD(v38))
              goto LABEL_75;
          }
          else
          {
            if (v48 <= (int)v38)
              goto LABEL_75;
            v64 = *(_DWORD *)(a1 + 12);
            v65 = HIDWORD(v38);
            if (v64 < SHIDWORD(v38))
              goto LABEL_75;
          }
          v8 = __OFADD__((_DWORD)v65, v40);
          v68 = v65 + v40;
          v69 = (v65 >> 31) + 0x7FFFFFFF;
          if (!v8)
            v69 = v68;
          if (v64 < v69)
            goto LABEL_97;
        }
      }
    }
LABEL_75:
    if ((v23 & 0xFF00000000) != 0)
    {
      if (*(_DWORD *)(v96 + 12) <= v23)
      {
        __break(0xC471u);
        JUMPOUT(0x195E6D068);
      }
      if (*(_QWORD *)v96)
      {
        v76 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(*(_QWORD *)v96 + 120 * v23 + 12));
        v79 = *(_DWORD *)(a1 + 8);
        v80 = v79;
        if (*(_BYTE *)(a1 + 44))
        {
          v81 = *(_DWORD *)(a1 + 20);
          v8 = __OFSUB__(v79, v81);
          v80 = v79 - v81;
          if (v8)
            v80 = (v79 >> 31) + 0x7FFFFFFF;
        }
        v82 = v76 + v77;
        if (__OFADD__((_DWORD)v76, v77))
          v82 = (v76 >> 31) + 0x7FFFFFFF;
        if (v80 < v82)
        {
          if (*(_BYTE *)(a1 + 44))
          {
            v83 = *(_DWORD *)(a1 + 20);
            v8 = __OFSUB__(v79, v83);
            v84 = v79 - v83;
            if (v8)
              v79 = (v79 >> 31) + 0x7FFFFFFF;
            else
              v79 = v84;
          }
          v85 = *(_DWORD *)(a1 + 16);
          v8 = __OFADD__(v79, v85);
          v86 = v79 + v85;
          if (v8)
            v86 = (v79 >> 31) + 0x7FFFFFFF;
          if (*(_BYTE *)(a1 + 44))
          {
            v87 = *(_DWORD *)(a1 + 24);
            v8 = __OFADD__(v86, v87);
            v88 = v86 + v87;
            if (v8)
              v88 = (v86 >> 31) + 0x7FFFFFFF;
            if (v88 > (int)v76)
            {
              v89 = *(_DWORD *)(a1 + 12);
              v90 = *(_DWORD *)(a1 + 28);
              v91 = HIDWORD(v76);
              v8 = __OFSUB__(v89, v90);
              v92 = v89 - v90;
              if (v8)
                v92 = (v89 >> 31) + 0x7FFFFFFF;
              if (v92 >= SHIDWORD(v76))
              {
LABEL_148:
                v8 = __OFADD__((_DWORD)v91, v78);
                v94 = v91 + v78;
                v95 = (v91 >> 31) + 0x7FFFFFFF;
                if (!v8)
                  v95 = v94;
                if (v92 < v95)
                  goto LABEL_97;
              }
            }
          }
          else if (v86 > (int)v76)
          {
            v92 = *(_DWORD *)(a1 + 12);
            v91 = HIDWORD(v76);
            if (v92 >= SHIDWORD(v76))
              goto LABEL_148;
          }
        }
      }
    }
    v51 = *(_DWORD *)(a1 + 8);
    v52 = *(_DWORD *)(a1 + 20);
    v8 = __OFSUB__(v51, v52);
    v53 = v51 - v52;
    v54 = (v51 >> 31) + 0x7FFFFFFF;
    if (!v8)
      v54 = v53;
    if (*(_DWORD *)(a1 + 36) <= v54)
    {
      v55 = *(_DWORD *)(a1 + 16);
      v8 = __OFADD__(v52, v55);
      v56 = v52 + v55;
      if (v8)
        v56 = (v52 >> 31) + 0x7FFFFFFF;
      v57 = *(_DWORD *)(a1 + 24);
      v8 = __OFADD__(v56, v57);
      v58 = v56 + v57;
      if (v8)
        v58 = (v56 >> 31) + 0x7FFFFFFF;
      v59 = v54 + v58;
      if (__OFADD__(v54, v58))
        v59 = (v54 >> 31) + 0x7FFFFFFF;
      if (*(_DWORD *)(a1 + 40) >= v59)
        goto LABEL_86;
    }
LABEL_97:
    v70 = WebCore::Layout::FloatPair::bottom((uint64_t **)&v96);
    WebCore::Layout::Iterator::operator++(&v98);
    v22 = 0;
  }
  while (BYTE12(v99) | BYTE4(v100));
  v60 = v21 & 0xFFFFFF00;
  v62 = v21 & 0xFFFFFFFF00000000;
  v61 = v21 & 0xFFFFFF0000000000;
  if (*(_BYTE *)(a1 + 44))
  {
    v71 = *(_DWORD *)(a1 + 28);
    v8 = __OFADD__(v70, v71);
    v72 = v70 + v71;
    if (v8)
      v70 = (v70 >> 31) + 0x7FFFFFFF;
    else
      v70 = v72;
  }
  *(_DWORD *)(a1 + 12) = v70;
  WebCore::Layout::FloatAvoider::resetHorizontalPosition(a1);
  return v62 & 0xFF00000000 | v21 | v61 | v60 & 0xFFFFFF00;
}

unint64_t WebCore::Layout::FloatingContext::verticalPositionWithClearance(WebCore::Layout::FloatingContext *this, const WebCore::Layout::Box *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v8;
  char v9;
  char v10;
  unsigned __int8 v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _BOOL4 v20;
  unsigned int v21;
  int v22;
  uint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  _BOOL4 v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  WebCore::Layout::FormattingContext *v41;
  WebCore::Layout::FormattingContext *v42;
  const WebCore::Layout::Box *v43;
  unsigned int v44;
  WebCore::Layout::FormattingContext *v45;
  const WebCore::Layout::Box *v46;
  WebCore::Layout::FormattingContext *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  WebCore::Layout::FormattingContext *v51;
  const WebCore::Layout::Box *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;

  v3 = *((_QWORD *)this + 2);
  v4 = *(unsigned int *)(v3 + 20);
  if (!(_DWORD)v4)
    return 0;
  v8 = *((_WORD *)a2 + 17) & 7;
  if (v8 == 5)
  {
    v32 = *(_QWORD *)(v3 + 8);
    v33 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v32 + 12));
    if (__OFADD__(HIDWORD(v33), HIDWORD(a2)))
      v34 = (HIDWORD(v33) >> 31) + 0x7FFFFFFF;
    else
      v34 = HIDWORD(v33) + HIDWORD(a2);
    if ((_DWORD)v4 != 1)
    {
      v35 = 120 * v4 - 120;
      v36 = (_DWORD *)(v32 + 132);
      do
      {
        v37 = WebCore::Layout::BoxGeometry::marginBoxRect(v36);
        v38 = (HIDWORD(v37) >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(HIDWORD(v37), HIDWORD(a2)))
          v38 = HIDWORD(v37) + HIDWORD(a2);
        if (v34 <= v38)
          v34 = v38;
        v36 += 30;
        v35 -= 120;
      }
      while (v35);
    }
    v30 = v34;
    v31 = 0x100000000;
  }
  else
  {
    if ((*(_DWORD *)(*(_QWORD *)this + 56) & 0x4000000) != 0)
      v9 = 1;
    else
      v9 = 2;
    if ((*(_DWORD *)(*(_QWORD *)this + 56) & 0x4000000) != 0)
      v10 = 2;
    else
      v10 = 1;
    if (v8 != 3)
      v10 = *((_WORD *)a2 + 17) & 7;
    if (v8 == 4)
      v11 = v9;
    else
      v11 = v10;
    if (*(_BYTE *)(v3 + 28))
      v12 = 1;
    else
      v12 = 2;
    v13 = *(_QWORD *)(v3 + 8);
    if (v12 == v11)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 120 * v4;
      v18 = (_DWORD *)(v13 + 12);
      do
      {
        if (!*(v18 - 1))
        {
          v19 = WebCore::Layout::BoxGeometry::marginBoxRect(v18);
          v20 = __OFADD__(HIDWORD(v19), HIDWORD(a2));
          v21 = (HIDWORD(v19) >> 31) + 0x7FFFFFFF;
          if (v20)
            v22 = (HIDWORD(v19) >> 31) + 0x7FFFFFFF;
          else
            v22 = HIDWORD(v19) + HIDWORD(a2);
          if ((int)(v15 | (v14 << 8)) > v22)
            v22 = v15 | (v14 << 8);
          if (!v20)
            v21 = HIDWORD(v19) + HIDWORD(a2);
          if ((_DWORD)v16)
            v21 = v22;
          v15 = v21;
          v14 = v21 >> 8;
          v16 = 1;
        }
        v18 += 30;
        v17 -= 120;
      }
      while (v17);
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v24 = 120 * v4;
      v25 = (_DWORD *)(v13 + 12);
      do
      {
        if (*(v25 - 1))
        {
          v26 = WebCore::Layout::BoxGeometry::marginBoxRect(v25);
          v27 = __OFADD__(HIDWORD(v26), HIDWORD(a2));
          v28 = (HIDWORD(v26) >> 31) + 0x7FFFFFFF;
          if (v27)
            v29 = (HIDWORD(v26) >> 31) + 0x7FFFFFFF;
          else
            v29 = HIDWORD(v26) + HIDWORD(a2);
          if ((int)(v15 | (v14 << 8)) > v29)
            v29 = v15 | (v14 << 8);
          if (!v27)
            v28 = HIDWORD(v26) + HIDWORD(a2);
          if ((_DWORD)v16)
            v28 = v29;
          v15 = v28;
          v14 = v28 >> 8;
          v16 = 1;
        }
        v25 += 30;
        v24 -= 120;
      }
      while (v24);
    }
    v30 = v16 << 32;
    v31 = v15 | ((unint64_t)v14 << 8);
  }
  v39 = v31 | v30;
  if (((v31 | v30) & 0xFF00000000) != 0)
  {
    v40 = *(_DWORD *)(a3 + 4);
    v41 = (WebCore::Layout::FormattingContext *)**((_QWORD **)this + 2);
    v42 = WebCore::Layout::FormattingContext::containingBlock(a2, a2);
    while (v42 != v41)
    {
      v54 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v54 + 8))
      {
        v59 = *(_QWORD *)(v54 + 40);
        v60 = *(_DWORD *)(v59 - 8);
        v61 = ((unint64_t)v42 + ~((_QWORD)v42 << 32)) ^ (((unint64_t)v42 + ~((_QWORD)v42 << 32)) >> 22);
        v62 = 9 * ((v61 + ~(v61 << 13)) ^ ((v61 + ~(v61 << 13)) >> 8));
        v63 = (v62 ^ (v62 >> 15)) + ~((v62 ^ (v62 >> 15)) << 27);
        v64 = v60 & ((v63 >> 31) ^ v63);
        if (*(WebCore::Layout::FormattingContext **)(v59 + 16 * v64) != v42)
        {
          v65 = 1;
          do
            v64 = ((_DWORD)v64 + v65++) & v60;
          while (*(WebCore::Layout::FormattingContext **)(v59 + 16 * v64) != v42);
        }
        v55 = v59 + 16 * v64 + 8;
      }
      else
      {
        v55 = (uint64_t)v42 + 104;
      }
      v56 = *(_DWORD *)(*(_QWORD *)v55 + 4);
      v57 = __OFADD__(v40, v56);
      v58 = v40 + v56;
      if (v57)
        v40 = (v40 >> 31) + 0x7FFFFFFF;
      else
        v40 = v58;
      if ((*((_WORD *)v42 + 6) & 0x80) != 0)
        v42 = 0;
      else
        v42 = WebCore::Layout::FormattingContext::containingBlock(v42, v43);
    }
    if (__OFSUB__(v39, v40))
      a3 = (v39 >> 31) + 0x7FFFFFFF;
    else
      a3 = v39 - v40;
    if ((int)a3 < 1)
    {
      LOBYTE(v44) = 0;
      v53 = 0;
    }
    else
    {
      if (__OFADD__(v40, (_DWORD)a3))
        v44 = (v40 >> 31) + 0x7FFFFFFF;
      else
        v44 = v40 + a3;
      v45 = WebCore::Layout::FormattingContext::containingBlock(a2, v43);
      v47 = (WebCore::Layout::FormattingContext *)**((_QWORD **)this + 2);
      if (v45 != v47)
      {
        v48 = *((_QWORD *)this + 1);
        if (*(_DWORD *)(v48 + 8))
        {
          v77 = *(_QWORD *)(v48 + 40);
          v78 = *(_DWORD *)(v77 - 8);
          v79 = ((unint64_t)v45 + ~((_QWORD)v45 << 32)) ^ (((unint64_t)v45 + ~((_QWORD)v45 << 32)) >> 22);
          v80 = 9 * ((v79 + ~(v79 << 13)) ^ ((v79 + ~(v79 << 13)) >> 8));
          v81 = (v80 ^ (v80 >> 15)) + ~((v80 ^ (v80 >> 15)) << 27);
          v82 = v78 & ((v81 >> 31) ^ v81);
          if (*(WebCore::Layout::FormattingContext **)(v77 + 16 * v82) != v45)
          {
            v83 = 1;
            do
              v82 = ((_DWORD)v82 + v83++) & v78;
            while (*(WebCore::Layout::FormattingContext **)(v77 + 16 * v82) != v45);
          }
          v49 = v77 + 16 * v82 + 8;
        }
        else
        {
          v49 = (uint64_t)v45 + 104;
        }
        v50 = *(_DWORD *)(*(_QWORD *)v49 + 4);
        v51 = WebCore::Layout::FormattingContext::containingBlock(v45, v46);
        while (v51 != v47)
        {
          v66 = *((_QWORD *)this + 1);
          if (*(_DWORD *)(v66 + 8))
          {
            v70 = *(_QWORD *)(v66 + 40);
            v71 = *(_DWORD *)(v70 - 8);
            v72 = ((unint64_t)v51 + ~((_QWORD)v51 << 32)) ^ (((unint64_t)v51 + ~((_QWORD)v51 << 32)) >> 22);
            v73 = 9 * ((v72 + ~(v72 << 13)) ^ ((v72 + ~(v72 << 13)) >> 8));
            v74 = (v73 ^ (v73 >> 15)) + ~((v73 ^ (v73 >> 15)) << 27);
            v75 = v71 & ((v74 >> 31) ^ v74);
            if (*(WebCore::Layout::FormattingContext **)(v70 + 16 * v75) != v51)
            {
              v76 = 1;
              do
                v75 = ((_DWORD)v75 + v76++) & v71;
              while (*(WebCore::Layout::FormattingContext **)(v70 + 16 * v75) != v51);
            }
            v67 = v70 + 16 * v75 + 8;
          }
          else
          {
            v67 = (uint64_t)v51 + 104;
          }
          v68 = *(_DWORD *)(*(_QWORD *)v67 + 4);
          v57 = __OFADD__(v50, v68);
          v69 = v50 + v68;
          if (v57)
            v50 = (v50 >> 31) + 0x7FFFFFFF;
          else
            v50 = v69;
          if ((*((_WORD *)v51 + 6) & 0x80) != 0)
            v51 = 0;
          else
            v51 = WebCore::Layout::FormattingContext::containingBlock(v51, v52);
        }
        if (__OFSUB__(v44, v50))
          v44 = (v44 >> 31) + 0x7FFFFFFF;
        else
          v44 -= v50;
      }
      v53 = v44 & 0xFFFFFF00;
    }
  }
  else
  {
    LOBYTE(v44) = 0;
    v53 = 0;
  }
  return v53 | v44 | (a3 << 32);
}

unint64_t WebCore::Layout::FloatingContext::mapPointFromFormattingContextRootToPlacedFloatsRoot(WebCore::Layout::FloatingContext *this, const WebCore::Layout::Box *a2)
{
  unsigned int v2;
  WebCore::Layout::FormattingContext *v4;
  WebCore::Layout::FormattingContext *v5;
  unint64_t i;
  uint64_t v7;
  int **v8;
  int v9;
  int v10;
  int *v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;

  v2 = a2;
  v4 = *(WebCore::Layout::FormattingContext **)this;
  v5 = (WebCore::Layout::FormattingContext *)**((_QWORD **)this + 2);
  for (i = (unint64_t)a2 >> 32; v4 != v5; v4 = WebCore::Layout::FormattingContext::containingBlock(v4, a2))
  {
    v7 = *((_QWORD *)this + 1);
    if (*(_DWORD *)(v7 + 8))
    {
      v14 = *(_QWORD *)(v7 + 40);
      v15 = *(_DWORD *)(v14 - 8);
      v16 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      if (*(WebCore::Layout::FormattingContext **)(v14 + 16 * v19) != v4)
      {
        v20 = 1;
        do
          v19 = ((_DWORD)v19 + v20++) & v15;
        while (*(WebCore::Layout::FormattingContext **)(v14 + 16 * v19) != v4);
      }
      v8 = (int **)(v14 + 16 * v19 + 8);
    }
    else
    {
      v8 = (int **)((char *)v4 + 104);
    }
    v11 = *v8;
    v9 = **v8;
    v10 = v11[1];
    v12 = __OFADD__(v2, v9);
    v13 = v2 + v9;
    if (v12)
      v2 = (v2 >> 31) + 0x7FFFFFFF;
    else
      v2 = v13;
    if (__OFADD__((_DWORD)i, v10))
      i = (i >> 31) + 0x7FFFFFFF;
    else
      i = (i + v10);
  }
  return v2 | (i << 32);
}

unint64_t WebCore::Layout::FloatingContext::constraints(WebCore::LayoutUnit,WebCore::LayoutUnit,WebCore::Layout::FloatingContext::MayBeAboveLastFloat)const::$_1::operator()<WebCore::Layout::PlacedFloats::Item const>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v10;
  _DWORD **v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v27;
  signed int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  double v41;
  int v42;
  uint64_t v43;
  double v44;
  int v45;
  int v46;

  v4 = a2 + 12;
  v5 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(a2 + 12));
  v8 = v6;
  if (v6 < 1 || v7 < 1)
    goto LABEL_38;
  v10 = v5;
  v11 = *(_DWORD ***)a1;
  if (***(_DWORD ***)a1)
  {
    if (*v11[2] > SHIDWORD(v5))
    {
      v12 = HIDWORD(v5) + v7;
      if (__OFADD__(HIDWORD(v5), v7))
        v12 = (HIDWORD(v5) >> 31) + 0x7FFFFFFF;
      v13 = *v11[1];
      goto LABEL_15;
    }
LABEL_38:
    LOBYTE(v29) = 0;
    v30 = 0;
    return v30 | v29;
  }
  v13 = *v11[1];
  if (v13 < SHIDWORD(v5))
    goto LABEL_38;
  v12 = HIDWORD(v5) + v7;
  if (__OFADD__(HIDWORD(v5), v7))
    v12 = (HIDWORD(v5) >> 31) + 0x7FFFFFFF;
LABEL_15:
  if (v12 <= v13)
    goto LABEL_38;
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
  {
    v36 = v5 + v6;
    if (__OFADD__((_DWORD)v5, v6))
      v36 = (v5 >> 31) + 0x7FFFFFFF;
    if (*(_DWORD *)(a2 + 8))
      v37 = v5;
    else
      v37 = v36;
    LODWORD(v38) = HIDWORD(v5) + v7;
    if (__OFADD__(HIDWORD(v5), v7))
      v38 = ((HIDWORD(v5) >> 31) + 0x7FFFFFFF);
    else
      v38 = v38;
    v29 = v37 | (v38 << 32);
    goto LABEL_72;
  }
  v15 = WebCore::Layout::BoxGeometry::borderBoxRect(v4);
  v16 = v15;
  v17 = **(_DWORD **)(a1 + 8);
  v18 = __OFSUB__(v17, HIDWORD(v15));
  v19 = v17 - HIDWORD(v15);
  v20 = (v17 >> 31) + 0x7FFFFFFF;
  if (v18)
    v21 = v20;
  else
    v21 = v19;
  v22 = **(_DWORD **)(a1 + 16);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  if (v25 < 1 || v24 < 1)
    goto LABEL_38;
  v27 = HIDWORD(v23) + v24;
  if (__OFADD__(HIDWORD(v23), v24))
    v27 = (HIDWORD(v23) >> 31) + 0x7FFFFFFF;
  if (v27 > (int)v21)
  {
    v28 = v21 + v22;
    if (__OFADD__((_DWORD)v21, v22))
      v28 = (v21 >> 31) + 0x7FFFFFFF;
    if (v28 > SHIDWORD(v23))
      goto LABEL_34;
  }
  LOBYTE(v29) = 0;
  v30 = 0;
  if (!v22 && (_DWORD)v21 == HIDWORD(v23))
  {
LABEL_34:
    v31 = **(_DWORD **)(a1 + 16);
    if (v31 <= 64)
      v32 = 64;
    else
      v32 = v31;
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, v21, v32);
    if ((v34 & 1) == 0)
      goto LABEL_38;
    v39 = **(_DWORD **)(a1 + 8);
    v18 = __OFADD__(v39, 64);
    v40 = (v39 + 64);
    if (v18)
      v40 = 0x7FFFFFFFLL;
    if (*(_DWORD *)(a2 + 8))
    {
      v41 = *(float *)&v33 * 64.0;
      if (v41 >= 2147483650.0)
      {
        v42 = 0x7FFFFFFF;
      }
      else if (v41 <= -2147483650.0)
      {
        v42 = 0x80000000;
      }
      else
      {
        v42 = (int)v41;
      }
      v18 = __OFADD__(v16, v42);
      LODWORD(v43) = v16 + v42;
      if (v18)
        LODWORD(v43) = (v16 >> 31) + 0x7FFFFFFF;
      if ((int)v43 <= (int)v10)
        v43 = v10;
      else
        v43 = v43;
    }
    else
    {
      v44 = *((float *)&v33 + 1) * 64.0;
      if (v44 >= 2147483650.0)
      {
        v45 = 0x7FFFFFFF;
      }
      else if (v44 <= -2147483650.0)
      {
        v45 = 0x80000000;
      }
      else
      {
        v45 = (int)v44;
      }
      v18 = __OFADD__(v16, v45);
      LODWORD(v43) = v16 + v45;
      if (v18)
        LODWORD(v43) = (v16 >> 31) + 0x7FFFFFFF;
      v46 = v10 + v8;
      if (__OFADD__(v10, v8))
        v46 = (v10 >> 31) + 0x7FFFFFFF;
      if (v46 >= (int)v43)
        v43 = v43;
      else
        v43 = v46;
    }
    v29 = v43 | (v40 << 32);
LABEL_72:
    v30 = v29 & 0xFFFFFFFFFFFFFF00;
  }
  return v30 | v29;
}

uint64_t WebCore::Layout::LayoutState::geometryForBox(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (!*(_DWORD *)(a1 + 8))
  {
    v2 = a2 + 104;
    return *(_QWORD *)v2;
  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_9:
      v2 = v4 + 16 * v9 + 8;
      return *(_QWORD *)v2;
    }
    v11 = 1;
    while (v10)
    {
      v9 = ((_DWORD)v9 + v11) & v5;
      v10 = *(_QWORD *)(v4 + 16 * v9);
      ++v11;
      if (v10 == a2)
        goto LABEL_9;
    }
  }
  return 0;
}

unint64_t WebCore::Layout::FloatingContext::mapTopLeftToPlacedFloatsRoot(uint64_t a1, WebCore::Layout::FormattingContext *a2, unint64_t a3)
{
  unsigned int v3;
  unint64_t v5;
  WebCore::Layout::FormattingContext *v6;
  WebCore::Layout::FormattingContext *v7;
  WebCore::Layout::FormattingContext *v9;
  _DWORD *v10;
  const WebCore::Layout::Box *v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  v3 = a3;
  v5 = HIDWORD(a3);
  v6 = **(WebCore::Layout::FormattingContext ***)(a1 + 16);
  v7 = WebCore::Layout::FormattingContext::containingBlock(a2, a2);
  if (v7 != v6)
  {
    v9 = v7;
    do
    {
      v10 = (_DWORD *)WebCore::Layout::LayoutState::geometryForBox(*(_QWORD *)(a1 + 8), (uint64_t)v9);
      v12 = v10[1];
      if (__OFADD__(v3, *v10))
        v3 = (v3 >> 31) + 0x7FFFFFFF;
      else
        v3 += *v10;
      v13 = __OFADD__((_DWORD)v5, v12);
      v14 = v5 + v12;
      if (v13)
        v5 = (v5 >> 31) + 0x7FFFFFFF;
      else
        v5 = v14;
      if ((*((_WORD *)v9 + 6) & 0x80) != 0)
        v9 = 0;
      else
        v9 = WebCore::Layout::FormattingContext::containingBlock(v9, v11);
    }
    while (v9 != v6);
  }
  return v3 | (v5 << 32);
}

uint64_t WebCore::Layout::FloatPair::bottom(uint64_t **this)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v1 = *((unsigned __int8 *)this + 12);
  if (!*((_BYTE *)this + 12))
  {
    if (*((_BYTE *)this + 20))
      goto LABEL_25;
    goto LABEL_24;
  }
  v2 = *((_DWORD *)this + 2);
  v3 = *((_DWORD *)*this + 3);
  if (v3 <= v2)
    goto LABEL_28;
  v4 = **this;
  if (*((_BYTE *)this + 20))
  {
    v15 = *((_DWORD *)this + 4);
    if (v3 > v15)
    {
      if (!v4)
        goto LABEL_24;
      v5 = v4 + 120 * v15;
      goto LABEL_6;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x195E6DC0CLL);
  }
  if (!v4)
  {
    do
    {
LABEL_24:
      __break(1u);
LABEL_25:
      v16 = *((_DWORD *)this + 4);
      if (*((_DWORD *)*this + 3) <= v16)
        goto LABEL_28;
      v17 = **this;
    }
    while (!v17);
    v9 = 0;
    LOBYTE(v8) = 0;
    v5 = v17 + 120 * v16;
    goto LABEL_11;
  }
  v5 = 0;
LABEL_6:
  v6 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v4 + 120 * v2 + 12));
  if (__OFADD__(HIDWORD(v6), v7))
    v8 = ((HIDWORD(v6) >> 31) + 0x7FFFFFFF);
  else
    v8 = (HIDWORD(v6) + v7);
  if (!v5)
    return v8;
  v9 = v8 & 0xFFFFFF00;
LABEL_11:
  v10 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v5 + 12));
  LODWORD(v12) = (HIDWORD(v10) >> 31) + 0x7FFFFFFF;
  if (__OFADD__(HIDWORD(v10), v11))
    v12 = v12;
  else
    v12 = (HIDWORD(v10) + v11);
  if (!v1)
    return v12;
  v13 = v8 | v9;
  if (v13 <= (int)v12)
    return v12;
  else
    return v13;
}

uint64_t **WebCore::Layout::Iterator::operator++(uint64_t **a1)
{
  uint64_t *v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int *v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;

  if (*((_BYTE *)a1 + 20))
  {
    v2 = a1[1];
    v3 = *((_DWORD *)a1 + 4);
    if (*((_DWORD *)v2 + 3) <= v3)
    {
      __break(0xC471u);
      JUMPOUT(0x195E6DFD8);
    }
    v4 = *v2;
    if (v4)
    {
      v5 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v4 + 120 * v3 + 12));
      v6 = 0;
      v8 = HIDWORD(v5) + v7;
      if (__OFADD__(HIDWORD(v5), v7))
        v8 = (HIDWORD(v5) >> 31) + 0x7FFFFFFF;
      v9 = 1;
      goto LABEL_9;
    }
  }
  else if (!*((_BYTE *)a1 + 28))
  {
    return a1;
  }
  v8 = 0;
  v9 = 0;
  v6 = 1;
  if (!*((_BYTE *)a1 + 28))
    goto LABEL_10;
LABEL_9:
  v44 = a1[1];
  v45 = *((_DWORD *)a1 + 6);
  if (*((_DWORD *)v44 + 3) <= v45)
  {
LABEL_74:
    __break(0xC471u);
    JUMPOUT(0x195E6DF44);
  }
  v46 = *v44;
  if (v46)
  {
    v47 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v46 + 120 * v45 + 12));
    if (__OFADD__(HIDWORD(v47), v48))
      v12 = (HIDWORD(v47) >> 31) + 0x7FFFFFFF;
    else
      v12 = HIDWORD(v47) + v48;
    if (!v9)
      goto LABEL_35;
    if (v8 == v12)
    {
      v11 = 1;
      v10 = v8;
LABEL_12:
      v12 = v10;
      v10 = v11;
      if (v6)
        goto LABEL_68;
      goto LABEL_15;
    }
    LOBYTE(v11) = v8 > v12;
    if (v8 > v12)
    {
LABEL_35:
      *((_DWORD *)a1 + 8) = v12;
      if (*((_BYTE *)a1 + 28))
      {
        v28 = *((unsigned int *)a1 + 6);
        if (*((unsigned int *)*a1 + 3) <= v28)
        {
          __break(0xC471u);
          JUMPOUT(0x195E6DF84);
        }
        if (*((_DWORD *)a1 + 6))
        {
          v29 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(**a1 + 120 * v28 + 12));
          if (__OFADD__(HIDWORD(v29), v30))
            v31 = (HIDWORD(v29) >> 31) + 0x7FFFFFFF;
          else
            v31 = HIDWORD(v29) + v30;
          do
          {
            v32 = *((unsigned int *)*a1 + 3);
            if (v32 < v28)
              goto LABEL_69;
            if (!v28)
              goto LABEL_52;
            v33 = **a1;
            v34 = (int *)(v33 + 120 * v28 - 112);
            v35 = v28;
            while (1)
            {
              --v35;
              v36 = *v34;
              v34 -= 30;
              if (v36)
                break;
              if (!v35)
                goto LABEL_52;
            }
            v28 = v35;
            if (v35 >= v32)
            {
              __break(0xC471u);
              JUMPOUT(0x195E6DFE8);
            }
            v37 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v33 + 120 * v35 + 12));
            v39 = (HIDWORD(v37) >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(HIDWORD(v37), v38))
              v39 = HIDWORD(v37) + v38;
          }
          while (v39 <= v31);
          v40 = v35 & 0xFFFFFF00;
          v41 = v35;
          v42 = 0x100000000;
        }
        else
        {
LABEL_52:
          v41 = 0;
          v42 = 0;
          v40 = 0;
        }
        *((_BYTE *)a1 + 28) = BYTE4(v42);
        *((_DWORD *)a1 + 6) = v42 | v41 | v40;
        return a1;
      }
LABEL_68:
      __break(1u);
LABEL_69:
      __break(0xC471u);
      JUMPOUT(0x195E6DFB8);
    }
    v10 = 1;
    if (v6)
      goto LABEL_68;
  }
  else
  {
LABEL_10:
    v10 = 0;
    if ((v9 & 1) != 0)
    {
      v11 = 0;
      goto LABEL_12;
    }
    LOBYTE(v11) = 1;
    v12 = 0;
    if (v6)
      goto LABEL_68;
  }
LABEL_15:
  *((_DWORD *)a1 + 8) = v8;
  if (!*((_BYTE *)a1 + 20))
    goto LABEL_68;
  v13 = *((unsigned int *)a1 + 4);
  if (*((unsigned int *)*a1 + 3) <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x195E6DF64);
  }
  if (*((_DWORD *)a1 + 4))
  {
    v14 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(**a1 + 120 * v13 + 12));
    if (__OFADD__(HIDWORD(v14), v15))
      v16 = (HIDWORD(v14) >> 31) + 0x7FFFFFFF;
    else
      v16 = HIDWORD(v14) + v15;
    do
    {
      v17 = *((unsigned int *)*a1 + 3);
      if (v17 < v13)
        goto LABEL_74;
      if (!v13)
        goto LABEL_32;
      v18 = **a1;
      v19 = (int *)(v18 + 120 * v13 - 112);
      v20 = v13;
      while (1)
      {
        --v20;
        v21 = *v19;
        v19 -= 30;
        if (!v21)
          break;
        if (!v20)
          goto LABEL_32;
      }
      v13 = v20;
      if (v20 >= v17)
      {
        __break(0xC471u);
        JUMPOUT(0x195E6DFE0);
      }
      v22 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v18 + 120 * v20 + 12));
      v24 = (HIDWORD(v22) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v22), v23))
        v24 = HIDWORD(v22) + v23;
    }
    while (v24 <= v16);
    v25 = v20 & 0xFFFFFF00;
    v26 = v20;
    v27 = 0x100000000;
  }
  else
  {
LABEL_32:
    v26 = 0;
    v27 = 0;
    v25 = 0;
  }
  *((_BYTE *)a1 + 20) = BYTE4(v27);
  *((_DWORD *)a1 + 4) = v27 | v26 | v25;
  if ((v11 & 1) != 0)
  {
    if (!v10)
      goto LABEL_68;
    goto LABEL_35;
  }
  return a1;
}

uint64_t WebCore::Layout::FloatAvoider::resetHorizontalPosition(uint64_t this)
{
  int v1;
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;

  if (*(_BYTE *)(this + 45))
  {
    v9 = *(_DWORD *)(this + 20);
    v10 = *(_DWORD *)(this + 36);
    v3 = __OFADD__(v10, v9);
    v8 = v10 + v9;
    v11 = (v10 >> 31) + 0x7FFFFFFF;
    if (v3)
      v8 = v11;
  }
  else
  {
    v1 = *(_DWORD *)(this + 24);
    v2 = *(_DWORD *)(this + 40);
    v3 = __OFSUB__(v2, v1);
    v4 = v2 - v1;
    v5 = (v2 >> 31) + 0x7FFFFFFF;
    if (v3)
      v4 = v5;
    v6 = *(_DWORD *)(this + 16);
    v3 = __OFSUB__(v4, v6);
    v7 = v4 - v6;
    v8 = (v4 >> 31) + 0x7FFFFFFF;
    if (!v3)
      v8 = v7;
  }
  *(_DWORD *)(this + 8) = v8;
  return this;
}

uint64_t *WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  bmalloc::api *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  bmalloc::api *v27;
  uint64_t v28;
  uint64_t v29;
  bmalloc::api *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (bmalloc::api *)v26[1];
          v26[1] = 0;
          if (v27)
            bmalloc::api::isoDeallocate(v27, v10);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(bmalloc::api **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            bmalloc::api::isoDeallocate(v30, v10);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(bmalloc::api **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            bmalloc::api::isoDeallocate(v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebCore::Layout::PlacedFloats::Item::Item(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 12) = *(_QWORD *)a3;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 12);
  *(_OWORD *)(result + 28) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(result + 44) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(result + 60) = *(_OWORD *)(a3 + 48);
  *(_DWORD *)(result + 76) = *(_DWORD *)(a3 + 64);
  *(_DWORD *)(result + 80) = *(_DWORD *)(a3 + 68);
  *(_QWORD *)(result + 84) = a4;
  if (a5)
    ++*(_DWORD *)(a5 + 8);
  *(_QWORD *)(result + 96) = a5;
  *(_BYTE *)(result + 104) = 0;
  *(_BYTE *)(result + 112) = 0;
  return result;
}

void WebCore::Layout::PlacedFloats::Item::~Item(WebCore::Layout::PlacedFloats::Item *this)
{
  _DWORD *v2;
  uint64_t v3;
  int v4;

  v2 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = *(_DWORD *)(v3 + 8);
    if (v4)
      *(_DWORD *)(v3 + 8) = v4 - 1;
    else
      __break(0xC471u);
  }
}

BOOL WebCore::Layout::PlacedFloats::append(WebCore::Layout::PlacedFloats::Item)::$_0::operator()(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v10;

  v2 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(*(_QWORD *)a1 + 12)) >> 32;
  if ((int)v2 > (int)(WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(*(_QWORD *)(a1 + 8) + 12)) >> 32))
    return 1;
  if (**(_BYTE **)(a1 + 16))
  {
    v3 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(*(_QWORD *)a1 + 12));
    if (__OFADD__(v3, v4))
      v5 = (v3 >> 31) + 0x7FFFFFFF;
    else
      v5 = v3 + v4;
    v6 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(*(_QWORD *)(a1 + 8) + 12));
    v8 = v6 + v7;
    if (__OFADD__(v6, v7))
      v8 = (v6 >> 31) + 0x7FFFFFFF;
    if (v5 < v8)
    {
      if (**(_BYTE **)(a1 + 16))
        return 0;
      goto LABEL_13;
    }
    return 1;
  }
LABEL_13:
  v10 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(*(_QWORD *)a1 + 12));
  return v10 <= (int)WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(*(_QWORD *)(a1 + 8) + 12));
}

uint64_t WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::Layout::PlacedFloats::Item&>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v3 = a3;
  v5 = result;
  v6 = *(unsigned int *)(result + 12);
  if ((_DWORD)v6 == *(_DWORD *)(result + 8))
  {
    result = WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v6 + 1, a3);
    v3 = result;
    LODWORD(v6) = *(_DWORD *)(v5 + 12);
  }
  v7 = *(_QWORD *)v5;
  v8 = (_QWORD *)(*(_QWORD *)v5 + 120 * a2);
  if (v6 != a2)
  {
    v13 = 0;
    v14 = 120 * v6;
    v15 = v7 + v14;
    v16 = 120 * a2 - v14;
    v17 = v7 + 120 * a2 + 120 * ((v7 + v14 - (uint64_t)v8) / 120);
    do
    {
      v18 = v15 + v13;
      v19 = *(_QWORD *)(v15 + v13 - 120);
      *(_QWORD *)(v17 + v13) = v19;
      if (v19)
        ++*(_DWORD *)(v19 + 8);
      v20 = v17 + v13;
      *(_DWORD *)(v20 + 8) = *(_DWORD *)(v18 - 112);
      *(_QWORD *)(v20 + 12) = *(_QWORD *)(v18 - 108);
      *(_DWORD *)(v20 + 20) = *(_DWORD *)(v18 - 100);
      *(_DWORD *)(v20 + 24) = *(_DWORD *)(v18 - 96);
      *(_OWORD *)(v20 + 28) = *(_OWORD *)(v18 - 92);
      *(_OWORD *)(v20 + 44) = *(_OWORD *)(v18 - 76);
      *(_OWORD *)(v20 + 60) = *(_OWORD *)(v18 - 60);
      *(_DWORD *)(v20 + 76) = *(_DWORD *)(v18 - 44);
      *(_DWORD *)(v20 + 80) = *(_DWORD *)(v18 - 40);
      *(_QWORD *)(v20 + 84) = *(_QWORD *)(v18 - 36);
      v21 = *(_QWORD *)(v18 - 24);
      if (v21)
        ++*(_DWORD *)(v21 + 8);
      *(_QWORD *)(v20 + 96) = v21;
      *(_OWORD *)(v20 + 104) = *(_OWORD *)(v15 + v13 - 16);
      result = *(_QWORD *)(v18 - 24);
      *(_QWORD *)(v18 - 24) = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 8);
      }
      v22 = *(_QWORD *)(v18 - 120);
      if (v22)
      {
        v23 = *(_DWORD *)(v22 + 8);
        if (!v23)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        *(_DWORD *)(v22 + 8) = v23 - 1;
      }
      v13 -= 120;
    }
    while (v16 != v13);
  }
  v9 = *(_QWORD *)v3;
  *v8 = *(_QWORD *)v3;
  if (v9)
    ++*(_DWORD *)(v9 + 8);
  v10 = v7 + 120 * a2;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v3 + 8);
  *(_QWORD *)(v10 + 12) = *(_QWORD *)(v3 + 12);
  *(_DWORD *)(v10 + 20) = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(v3 + 24);
  *(_OWORD *)(v10 + 28) = *(_OWORD *)(v3 + 28);
  *(_OWORD *)(v10 + 44) = *(_OWORD *)(v3 + 44);
  *(_OWORD *)(v10 + 60) = *(_OWORD *)(v3 + 60);
  *(_DWORD *)(v10 + 76) = *(_DWORD *)(v3 + 76);
  *(_DWORD *)(v10 + 80) = *(_DWORD *)(v3 + 80);
  *(_QWORD *)(v10 + 84) = *(_QWORD *)(v3 + 84);
  v11 = *(_QWORD *)(v3 + 96);
  if (v11)
    ++*(_DWORD *)(v11 + 8);
  v12 = v7 + 120 * a2;
  *(_QWORD *)(v12 + 96) = v11;
  *(_OWORD *)(v12 + 104) = *(_OWORD *)(v3 + 104);
  ++*(_DWORD *)(v5 + 12);
  return result;
}

BOOL WebCore::Layout::Box::isContainingBlockForFixedPosition(WebCore::Layout::Box *this)
{
  uint64_t v2;

  if ((*((_WORD *)this + 6) & 0x80) != 0)
    return 1;
  if ((WebCore::Layout::Box::isLayoutContainmentBox(this) & 1) != 0)
    return 1;
  v2 = *((_QWORD *)this + 3);
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 40) + 20)
      || *(_QWORD *)(*(_QWORD *)(v2 + 40) + 328) != 0;
}

BOOL WebCore::Layout::Box::isContainingBlockForOutOfFlowPosition(WebCore::Layout::Box *this)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;

  if ((*((_WORD *)this + 6) & 0x80) != 0)
    return 1;
  v2 = *((_QWORD *)this + 4);
  result = 1;
  if ((v2 & 0x380000) != 0x80000 && (v2 & 0x380000) != 0x180000 && (v2 & 0x180000) != 0x100000)
  {
    if ((WebCore::Layout::Box::isLayoutContainmentBox(this) & 1) == 0)
    {
      v4 = *((_QWORD *)this + 3);
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 40) + 20))
        return *(_QWORD *)(*(_QWORD *)(v4 + 40) + 328) != 0;
    }
    return 1;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x2222223)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = *(_QWORD *)result + 120 * *(unsigned int *)(result + 12);
      v8 = 120 * v4;
      v9 = WTF::fastMalloc((WTF *)(120 * v4));
      *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x78;
      *(_QWORD *)v5 = v9;
      result = WTF::VectorMover<false,WebCore::Layout::PlacedFloats::Item>::move((uint64_t)v6, v7, v9);
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v10);
      }
    }
  }
  return result;
}

uint64_t WebCore::Layout::FlexFormattingContext::layout(WebCore::Layout::ElementBox **a1, uint64_t a2)
{
  WebCore::Layout::ElementBox **v2;
  WebCore::Layout::ElementBox *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  WebCore::Layout::ElementBox *v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  float v23;
  double v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unint64_t v31;
  float v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  float v64;
  char v65;
  int v66;
  double v67;
  unsigned int v68;
  char v69;
  unsigned int v70;
  int v71;
  float v72;
  double v73;
  char v74;
  int v75;
  char v76;
  unsigned int v77;
  int v78;
  int v79;
  float v80;
  double v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unint64_t v88;
  int v89;
  int v90;
  char v91;
  int v92;
  char v93;
  uint64_t v94;
  int v95;
  char v96;
  int v97;
  int v98;
  int v99;
  char v100;
  int v101;
  int v102;
  char v103;
  int v104;
  BOOL v105;
  char v106;
  int v107;
  int v108;
  char v109;
  float v110;
  float v111;
  unint64_t v112;
  float v113;
  unint64_t v114;
  int v115;
  float v116;
  uint64_t v117;
  int v118;
  WebCore::Layout::ElementBox *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  WebCore::Length *v123;
  uint64_t v124;
  unsigned int v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  BOOL v133;
  int v134;
  unint64_t v135;
  uint64_t v136;
  WebCore::Layout::ElementBox *v137;
  uint64_t v138;
  _OWORD *v139;
  WTF *v140;
  _OWORD *v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t *v146;
  uint64_t *v147;
  _OWORD *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  float v158;
  float v159;
  WebCore::Layout::ElementBox *v160;
  uint64_t v161;
  unint64_t v162;
  float v163;
  float v164;
  double v165;
  const std::nothrow_t *v167;
  unint64_t v168;
  __int128 *v169;
  BOOL v170;
  __int128 *v171;
  WTF *v172;
  WTF *v173;
  WTF *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  WTF *v185;
  uint64_t v186;
  BOOL v187;
  uint64_t result;
  void *v189;
  unsigned int v190;
  unsigned int v191;
  WebCore::Layout::ElementBox *v192;
  WebCore::Layout::ElementBox *v193;
  unsigned int v194;
  unsigned int v195;
  char v196;
  int v197;
  int v198;
  char v199;
  BOOL v200;
  int v201;
  char v202;
  int v203;
  int v204;
  char v205;
  int v206;
  int v207;
  char v208;
  int v209;
  char v210;
  uint64_t v211;
  char v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  WebCore::Layout::LayoutState **v217;
  unsigned int v219;
  int v220;
  WTF *v221;
  uint64_t v222;
  uint64_t v223;
  WTF *v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  _BYTE v228[64];
  uint64_t v229;

  v2 = a1;
  v224 = 0;
  v225 = 0;
  v3 = *a1;
  v4 = WebCore::Layout::ElementBox::firstInFlowChild(*a1);
  v217 = v2;
  if (!v4)
  {
    LODWORD(v154) = 0;
    v222 = 0;
    v223 = 0;
LABEL_260:
    v13 = a2;
    goto LABEL_261;
  }
  LOBYTE(v5) = 0;
  v6 = 0;
  v213 = 0;
  v214 = 0;
  v7 = 0;
  v8 = 0;
  v219 = 0;
  v215 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 32) + 16) + 20);
  v12 = v2[1];
  v13 = a2;
  v212 = v11;
LABEL_3:
  if (!*((_DWORD *)v12 + 2))
  {
    v14 = (_QWORD *)(v4 + 104);
    goto LABEL_5;
  }
  v124 = *((_QWORD *)v12 + 5);
  if (v124)
  {
    v125 = *(_DWORD *)(v124 - 8);
    v126 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v127 = 9 * ((v126 + ~(v126 << 13)) ^ ((v126 + ~(v126 << 13)) >> 8));
    v128 = (v127 ^ (v127 >> 15)) + ~((v127 ^ (v127 >> 15)) << 27);
    v129 = v125 & ((v128 >> 31) ^ v128);
    v130 = *(_QWORD *)(v124 + 16 * v129);
    if (v130 == v4)
    {
LABEL_169:
      v14 = (_QWORD *)(v124 + 16 * v129 + 8);
LABEL_5:
      v15 = (_DWORD *)*v14;
      if ((v11 & 2) == 0)
        goto LABEL_6;
      goto LABEL_171;
    }
    v131 = 1;
    while (v130)
    {
      v129 = ((_DWORD)v129 + v131) & v125;
      v130 = *(_QWORD *)(v124 + 16 * v129);
      ++v131;
      if (v130 == v4)
        goto LABEL_169;
    }
  }
  v15 = 0;
  if ((v11 & 2) == 0)
  {
LABEL_6:
    v16 = *(_QWORD *)(v4 + 24);
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 16);
    v18 = *(unsigned __int8 *)(v17 + 16);
    if (v18 != 12)
    {
      if (*(_BYTE *)(v17 + 16))
      {
        v20 = *(_QWORD *)(v13 + 4);
        if ((v18 - 3) >= 2 && v18 != 11)
          goto LABEL_212;
        if (v18 == 4)
        {
          v22 = *(unsigned __int8 *)(v17 + 18);
          v23 = *(float *)(v17 + 12);
LABEL_24:
          if (!v22)
            v23 = (float)SLODWORD(v23);
LABEL_26:
          v25 = v23 * 64.0;
          if (v25 >= 2147483650.0)
          {
            LODWORD(v26) = 0x7FFFFFFF;
          }
          else if (v25 <= -2147483650.0)
          {
            LODWORD(v26) = 0x80000000;
          }
          else
          {
            LODWORD(v26) = (int)v25;
          }
          goto LABEL_29;
        }
        v114 = HIDWORD(v20);
        if (v18 == 3)
        {
          v115 = *(unsigned __int8 *)(v17 + 18);
          v116 = *(float *)(v17 + 12);
LABEL_143:
          if (!v115)
            v116 = (float)SLODWORD(v116);
          v23 = (float)((float)((float)(int)v114 * 0.015625) * v116) / 100.0;
          goto LABEL_26;
        }
        if (v18 != 11)
        {
LABEL_163:
          LODWORD(v26) = 0;
LABEL_29:
          v214 = v26 >> 8;
          LODWORD(v211) = v26;
          BYTE4(v211) = 1;
LABEL_30:
          v27 = *(_QWORD *)(v4 + 24);
          v28 = *(unsigned __int8 **)(v27 + 8);
          v29 = v28[8];
          if (v29 > 0xB || ((1 << v29) & 0x818) == 0)
          {
            v35 = v7;
            v201 = 0;
LABEL_47:
            v37 = *(_DWORD *)(v4 + 56);
            v38 = (unsigned __int16)*(_DWORD *)(v4 + 60) >> 13;
            v39 = (v37 >> 26) & 1;
            v40 = v39;
            if ((v38 - 2) >= 2)
            {
              if ((_DWORD)v38 == 4)
              {
                v40 = (v37 & 0x4000000) == 0;
              }
              else
              {
                v40 = (v37 >> 26) & 1;
                if ((_DWORD)v38 != 5)
                {
                  if ((v37 & 0x4000000) != 0)
                    v41 = 1;
                  else
                    v41 = 3;
                  goto LABEL_53;
                }
              }
            }
            v21 = v40 == 0;
            v41 = 2;
            if (v21)
              v41 = 0;
LABEL_53:
            v42 = *(_QWORD *)(v27 + 24) + 40;
            if (*(_BYTE *)(v42 + 8 * v41 + 4))
            {
              v43 = v15[4];
              v44 = v15[4] >> 8;
              v210 = 1;
            }
            else
            {
              v210 = 0;
              v43 = 0;
              v44 = v35;
            }
            if ((v38 - 2) >= 2)
            {
              if ((_DWORD)v38 == 4)
              {
                v39 = (v37 & 0x4000000) == 0;
              }
              else if ((_DWORD)v38 != 5)
              {
                if ((v37 & 0x4000000) != 0)
                  v45 = 3;
                else
                  v45 = 1;
                goto LABEL_62;
              }
            }
            v21 = v39 == 0;
            v45 = 2;
            if (!v21)
              v45 = 0;
LABEL_62:
            if (*(_BYTE *)(v42 + 8 * v45 + 4))
            {
              v46 = v15[5];
              v8 = v15[5] >> 8;
              v47 = 1;
            }
            else
            {
              v47 = 0;
              v46 = 0;
            }
            v49 = v15[8];
            v48 = v15[9];
            v50 = __OFADD__(v49, v48);
            v51 = v49 + v48;
            v207 = v46;
            if (v50)
              v51 = (v49 >> 31) + 0x7FFFFFFF;
            v53 = v15[12];
            v52 = v15[13];
            v50 = __OFADD__(v53, v52);
            v54 = v53 + v52;
            if (v50)
              v54 = (v53 >> 31) + 0x7FFFFFFF;
            v50 = __OFADD__(v51, v54);
            v55 = v51 + v54;
            if (v50)
              v55 = (v51 >> 31) + 0x7FFFFFFF;
            v206 = v55;
            if ((v38 - 1) > 4)
              v56 = 0;
            else
              v56 = qword_1969F2458[v38 - 1];
            v57 = *(unsigned __int8 *)(v42 + 8 * v56 + 4);
            if (v57)
            {
              v58 = v15[6];
              v9 = v15[6] >> 8;
              LOBYTE(v57) = 1;
            }
            else
            {
              v58 = 0;
            }
            v59 = ((unsigned __int16)*(_DWORD *)(v4 + 60) >> 13) - 1;
            v205 = v57;
            if (v59 > 4)
              v60 = 2;
            else
              v60 = qword_1969F2480[v59];
            v61 = *(unsigned __int8 *)(v42 + 8 * v60 + 4);
            if (v61)
            {
              v62 = v15[7];
              v10 = v15[7] >> 8;
              LOBYTE(v61) = 1;
            }
            else
            {
              v62 = 0;
            }
            v63 = *(_QWORD *)(v27 + 8);
            v209 = v43;
            v204 = v58;
            v202 = v61;
            v200 = *(_BYTE *)(v63 + 16) == 0;
            if (*(_BYTE *)(v63 + 16) == 4)
            {
              if (*(_BYTE *)(v63 + 18))
                v64 = *(float *)(v63 + 12);
              else
                v64 = (float)*(int *)(v63 + 12);
              v67 = v64 * 64.0;
              if (v67 >= 2147483650.0)
              {
                v68 = 0x7FFFFFFF;
              }
              else if (v67 <= -2147483650.0)
              {
                v68 = 0x80000000;
              }
              else
              {
                v68 = (int)v67;
              }
              v66 = v68;
              v213 = v68 >> 8;
              v65 = 1;
            }
            else
            {
              v65 = 0;
              v66 = 0;
            }
            v198 = v66;
            v199 = v65;
            v69 = 0;
            v70 = *(unsigned __int8 *)(v63 + 48);
            v208 = v47;
            v203 = v62;
            if (v70 > 0xB || ((1 << v70) & 0x818) == 0)
            {
              v74 = v5;
              v75 = 0;
LABEL_106:
              v196 = v69;
              v197 = v75;
              v76 = 0;
              v77 = *(unsigned __int8 *)(v63 + 40);
              if (v77 > 0xB)
              {
                v78 = 0;
                goto LABEL_119;
              }
              v78 = 0;
              if (((1 << v77) & 0x818) == 0)
              {
LABEL_119:
                v82 = v15[10];
                v83 = v15[11];
                v50 = __OFADD__(v82, v83);
                v84 = v82 + v83;
                if (v50)
                  v84 = (v82 >> 31) + 0x7FFFFFFF;
                v85 = v44;
                v87 = v15[14];
                v86 = v15[15];
                v88 = v9;
                v50 = __OFADD__(v87, v86);
                v89 = v87 + v86;
                if (v50)
                  v89 = (v87 >> 31) + 0x7FFFFFFF;
                v90 = v6;
                v92 = v211;
                v91 = BYTE4(v211);
                v93 = v210;
                v94 = v8;
                v50 = __OFADD__(v84, v89);
                v95 = v84 + v89;
                if (v50)
                  v95 = (v84 >> 31) + 0x7FFFFFFF;
                v96 = v208;
                v97 = v209;
                v98 = v206;
                v99 = v207;
                v101 = v204;
                v100 = v205;
                v103 = v202;
                v102 = v203;
                v104 = v201;
                v106 = v199;
                v105 = v200;
                v107 = v197;
                v108 = v198;
                v109 = v196;
                goto LABEL_172;
              }
              if ((*(_QWORD *)(v13 + 16) & 0xFF00000000) != 0)
                v79 = *(_QWORD *)(v13 + 16);
              else
                v79 = 0;
              if (v77 - 3 >= 2 && v77 != 11)
              {
                if (v77 != 9)
                  v79 = 0;
                goto LABEL_118;
              }
              switch(v77)
              {
                case 4u:
                  v80 = *(float *)(v63 + 36);
                  if (!*(_BYTE *)(v63 + 42))
                    v80 = (float)SLODWORD(v80);
                  break;
                case 3u:
                  v111 = *(float *)(v63 + 36);
                  if (!*(_BYTE *)(v63 + 42))
                    v111 = (float)SLODWORD(v111);
                  v80 = (float)((float)((float)v79 * 0.015625) * v111) / 100.0;
                  break;
                case 0xBu:
                  v191 = v44;
                  v193 = v12;
                  v195 = v10;
                  v216 = v9;
                  WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v63 + 36), (float)v79 * 0.015625);
                  v81 = v159 * 64.0;
                  if (v81 >= 2147483650.0)
                  {
                    v79 = 0x7FFFFFFF;
                    v8 = v8;
                    v44 = v191;
                    v9 = v216;
                    v10 = v195;
                    v12 = v193;
                    goto LABEL_118;
                  }
                  v8 = v8;
                  v44 = v191;
                  v9 = v216;
                  v10 = v195;
                  v12 = v193;
                  if (v81 > -2147483650.0)
                  {
LABEL_117:
                    v79 = (int)v81;
LABEL_118:
                    v78 = v79;
                    v215 = v79 >> 8;
                    v76 = 1;
                    goto LABEL_119;
                  }
LABEL_194:
                  v79 = 0x80000000;
                  goto LABEL_118;
                default:
                  v79 = 0;
                  goto LABEL_118;
              }
              v81 = v80 * 64.0;
              if (v81 >= 2147483650.0)
              {
                v79 = 0x7FFFFFFF;
                goto LABEL_118;
              }
              if (v81 > -2147483650.0)
                goto LABEL_117;
              goto LABEL_194;
            }
            if ((*(_QWORD *)(v13 + 16) & 0xFF00000000) != 0)
              v71 = *(_QWORD *)(v13 + 16);
            else
              v71 = 0;
            if (v70 - 3 >= 2 && v70 != 11)
            {
              v74 = v5;
              if (v70 != 9)
                v71 = 0;
              v13 = a2;
              goto LABEL_104;
            }
            switch(v70)
            {
              case 4u:
                v72 = *(float *)(v63 + 44);
                if (!*(_BYTE *)(v63 + 50))
                  v72 = (float)SLODWORD(v72);
                break;
              case 3u:
                v110 = *(float *)(v63 + 44);
                if (!*(_BYTE *)(v63 + 50))
                  v110 = (float)SLODWORD(v110);
                v72 = (float)((float)((float)v71 * 0.015625) * v110) / 100.0;
                break;
              case 0xBu:
                v190 = v44;
                v74 = v5;
                v192 = v12;
                v194 = v10;
                v157 = v9;
                WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v63 + 44), (float)v71 * 0.015625);
                v73 = v158 * 64.0;
                if (v73 >= 2147483650.0)
                {
                  v71 = 0x7FFFFFFF;
                  v13 = a2;
                  v9 = v157;
                  v10 = v194;
                  v12 = v192;
                  v44 = v190;
                  goto LABEL_104;
                }
                v13 = a2;
                v9 = v157;
                v10 = v194;
                v12 = v192;
                v44 = v190;
                if (v73 > -2147483650.0)
                {
LABEL_103:
                  v71 = (int)v73;
LABEL_104:
                  v75 = v71;
                  v219 = v71 >> 8;
                  v63 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
                  v69 = 1;
                  goto LABEL_106;
                }
LABEL_191:
                v71 = 0x80000000;
                goto LABEL_104;
              default:
                v74 = v5;
                v71 = 0;
                goto LABEL_104;
            }
            v73 = v72 * 64.0;
            if (v73 >= 2147483650.0)
            {
              v74 = v5;
              v71 = 0x7FFFFFFF;
              goto LABEL_104;
            }
            v74 = v5;
            if (v73 > -2147483650.0)
              goto LABEL_103;
            goto LABEL_191;
          }
          v31 = *(_QWORD *)(v13 + 4);
          if (v29 - 3 >= 2 && v29 != 11)
          {
            v35 = v7;
            if (v29 == 9)
              v36 = HIDWORD(v31);
            else
              LODWORD(v36) = 0;
            v13 = a2;
            goto LABEL_45;
          }
          if (v29 == 4)
          {
            v33 = *((float *)v28 + 1);
            if (!v28[10])
              v33 = (float)SLODWORD(v33);
          }
          else
          {
            v112 = HIDWORD(v31);
            if (v29 != 3)
            {
              v35 = v7;
              if (v29 != 11)
              {
                LODWORD(v36) = 0;
                goto LABEL_45;
              }
              v160 = v12;
              v161 = v10;
              v162 = v9;
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v28 + 4), (float)(int)v112 * 0.015625);
              v34 = v163 * 64.0;
              if (v34 >= 2147483650.0)
              {
                LODWORD(v36) = 0x7FFFFFFF;
                v13 = a2;
                v9 = v162;
                v10 = v161;
                v12 = v160;
                goto LABEL_45;
              }
              v13 = a2;
              v9 = v162;
              v10 = v161;
              v12 = v160;
              if (v34 > -2147483650.0)
              {
LABEL_44:
                LODWORD(v36) = (int)v34;
LABEL_45:
                v201 = v36;
                v27 = *(_QWORD *)(v4 + 24);
                goto LABEL_47;
              }
LABEL_197:
              LODWORD(v36) = 0x80000000;
              goto LABEL_45;
            }
            v113 = *((float *)v28 + 1);
            if (!v28[10])
              v113 = (float)SLODWORD(v113);
            v33 = (float)((float)((float)(int)v112 * 0.015625) * v113) / 100.0;
          }
          v34 = v33 * 64.0;
          v35 = v7;
          if (v34 >= 2147483650.0)
          {
            LODWORD(v36) = 0x7FFFFFFF;
            goto LABEL_45;
          }
          if (v34 > -2147483650.0)
            goto LABEL_44;
          goto LABEL_197;
        }
        v117 = v7;
        v118 = v6;
        v119 = v12;
        v120 = v10;
        v121 = v9;
        v122 = v8;
        v123 = (WebCore::Length *)(v17 + 12);
LABEL_204:
        WebCore::Length::nonNanCalculatedValue(v123, (float)(int)v114 * 0.015625);
        v165 = v164 * 64.0;
        if (v165 >= 2147483650.0)
        {
          LODWORD(v26) = 0x7FFFFFFF;
          v13 = a2;
          v8 = v122;
          v9 = v121;
          v10 = v120;
          v12 = v119;
        }
        else
        {
          if (v165 <= -2147483650.0)
            LODWORD(v26) = 0x80000000;
          else
            LODWORD(v26) = (int)v165;
          v13 = a2;
          v8 = v122;
          v9 = v121;
          v10 = v120;
          v12 = v119;
        }
        v6 = v118;
        v7 = v117;
        goto LABEL_29;
      }
      v19 = *(_QWORD *)(v16 + 8);
      v18 = *(unsigned __int8 *)(v19 + 8);
      if (*(_BYTE *)(v19 + 8))
      {
        v20 = *(_QWORD *)(v13 + 4);
        v21 = (v18 - 3) < 2 || v18 == 11;
        if (!v21)
        {
LABEL_212:
          if (v18 == 1 || v18 == 9)
            v26 = HIDWORD(v20);
          else
            LODWORD(v26) = 0;
          v13 = a2;
          goto LABEL_29;
        }
        if (v18 == 4)
        {
          v22 = *(unsigned __int8 *)(v19 + 10);
          v23 = *(float *)(v19 + 4);
          goto LABEL_24;
        }
        v114 = HIDWORD(v20);
        if (v18 == 3)
        {
          v115 = *(unsigned __int8 *)(v19 + 10);
          v116 = *(float *)(v19 + 4);
          goto LABEL_143;
        }
        if (v18 != 11)
          goto LABEL_163;
        v117 = v7;
        v118 = v6;
        v119 = v12;
        v120 = v10;
        v121 = v9;
        v122 = v8;
        v123 = (WebCore::Length *)(v19 + 4);
        goto LABEL_204;
      }
    }
    v211 = 0;
    goto LABEL_30;
  }
LABEL_171:
  v90 = v6;
  v85 = v7;
  v88 = v9;
  v94 = v8;
  v74 = v5;
  v102 = 0;
  v105 = 0;
  v95 = 0;
  v103 = 0;
  v100 = 0;
  v76 = 0;
  v109 = 0;
  v101 = 0;
  v106 = 0;
  v78 = 0;
  v107 = 0;
  v108 = 0;
  v91 = 0;
  v104 = 0;
  v93 = 0;
  v96 = 0;
  v98 = 0;
  v99 = 0;
  v97 = 0;
  v92 = 0;
LABEL_172:
  v21 = v74 == 0;
  v132 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 32) + 144);
  v133 = v21 && v132 == v90;
  LODWORD(v226) = v92 | (v214 << 8);
  BYTE4(v226) = v91;
  DWORD2(v226) = v104;
  HIDWORD(v226) = v104;
  LODWORD(v227) = v97 | ((_DWORD)v85 << 8);
  BYTE4(v227) = v93;
  DWORD2(v227) = v99 | ((_DWORD)v94 << 8);
  BYTE12(v227) = v96;
  *(_DWORD *)v228 = v98;
  *(_DWORD *)&v228[4] = v108 | (v213 << 8);
  v228[8] = v106;
  *(_DWORD *)&v228[20] = v107 | (v219 << 8);
  v228[24] = v109;
  *(_DWORD *)&v228[28] = v78 | (v215 << 8);
  v228[32] = v76;
  *(_DWORD *)&v228[36] = v101 | ((_DWORD)v88 << 8);
  v228[40] = v100;
  *(_DWORD *)&v228[44] = v102 | ((_DWORD)v10 << 8);
  v228[48] = v103;
  *(_DWORD *)&v228[52] = v95;
  v5 = !v133;
  *(_DWORD *)&v228[12] = 0;
  *(_DWORD *)&v228[16] = 0;
  v228[56] = v105;
  *(_DWORD *)&v228[60] = v132;
  if ((*(_WORD *)(v4 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195E6FD98);
  }
  v7 = v85;
  v8 = v94;
  v9 = v88;
  v229 = v4;
  ++*(_DWORD *)(v4 + 8);
  v134 = HIDWORD(v225);
  if (HIDWORD(v225) == (_DWORD)v225)
  {
    v135 = v88;
    v136 = v10;
    v137 = v12;
    v138 = v7;
    v139 = (_OWORD *)WTF::Vector<WebCore::Layout::FlexFormattingContext::convertFlexItemsToLogicalSpace(WebCore::Layout::ConstraintsForFlexContent const&)::FlexItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v224, HIDWORD(v225) + 1, (unint64_t)&v226);
    v7 = v138;
    v12 = v137;
    v10 = v136;
    v9 = v135;
    v13 = a2;
    v140 = v224;
    v134 = HIDWORD(v225);
    v141 = (_OWORD *)((char *)v224 + 104 * HIDWORD(v225));
    v142 = v139[1];
    *v141 = *v139;
    v141[1] = v142;
    v143 = v139[5];
    v145 = v139[2];
    v144 = v139[3];
    v141[4] = v139[4];
    v141[5] = v143;
    v141[2] = v145;
    v141[3] = v144;
    v146 = (uint64_t *)(v141 + 6);
    v147 = (uint64_t *)(v139 + 6);
    v11 = v212;
  }
  else
  {
    v140 = v224;
    v148 = (_OWORD *)((char *)v224 + 104 * HIDWORD(v225));
    v149 = v227;
    *v148 = v226;
    v148[1] = v149;
    v150 = *(_OWORD *)&v228[48];
    v152 = *(_OWORD *)v228;
    v151 = *(_OWORD *)&v228[16];
    v148[4] = *(_OWORD *)&v228[32];
    v148[5] = v150;
    v148[2] = v152;
    v148[3] = v151;
    v146 = (uint64_t *)(v148 + 6);
    v147 = &v229;
    v11 = v212;
    v13 = a2;
  }
  v153 = *v147;
  *v147 = 0;
  *v146 = v153;
  v154 = (v134 + 1);
  HIDWORD(v225) = v134 + 1;
  if (v229)
  {
    v155 = *(_DWORD *)(v229 + 8);
    if (!v155)
    {
      __break(0xC471u);
      JUMPOUT(0x195E6FDB8);
    }
    *(_DWORD *)(v229 + 8) = v155 - 1;
  }
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 88);
    if (!v4)
      break;
    v156 = *(_QWORD *)(v4 + 32);
    if ((v156 & 0xE000000) == 0 && (v156 & 0x180000) != 0x100000)
    {
      v6 = v132;
      goto LABEL_3;
    }
  }
  if (v5)
  {
    if ((_DWORD)v154)
    {
      v167 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v168 = v154;
      while (1)
      {
        v169 = (__int128 *)operator new(104 * v168, v167);
        if (v169)
          break;
        v170 = v168 > 1;
        v168 >>= 1;
        if (!v170)
          goto LABEL_240;
      }
      v171 = v169;
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SB_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl((uint64_t)v140, (char *)v140 + 104 * v154, v154, v169, v168);
      operator delete(v171);
    }
    else
    {
LABEL_240:
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SB_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl((uint64_t)v140, (char *)v140 + 104 * v154, v154, 0, 0);
    }
    LODWORD(v154) = HIDWORD(v225);
    v13 = a2;
  }
  v2 = v217;
  v222 = 0;
  LODWORD(v223) = 0;
  HIDWORD(v223) = v154;
  if (!(_DWORD)v154)
  {
    v4 = 0;
    v174 = v224;
    if (!v224)
      goto LABEL_261;
    goto LABEL_259;
  }
  if (v154 >= 0x2762763)
  {
    __break(0xC471u);
    JUMPOUT(0x195E6FDE0);
  }
  v172 = (WTF *)(104 * v154);
  v4 = WTF::fastMalloc(v172);
  LODWORD(v223) = 104 * (int)v154 / 0x68u;
  v222 = v4;
  bzero((void *)v4, (size_t)v172 - ((int)v172 - 104) % 0x68u);
  v173 = 0;
  v174 = v224;
  do
  {
    v175 = *(_QWORD *)((char *)v173 + (_QWORD)v174 + 96);
    ++*(_DWORD *)(v175 + 8);
    v226 = *(_OWORD *)((char *)v173 + (_QWORD)v174);
    v227 = *(_OWORD *)((char *)v173 + (_QWORD)v174 + 16);
    *(_DWORD *)v228 = *(_DWORD *)((char *)v173 + (_QWORD)v174 + 32);
    *(_OWORD *)&v228[4] = *(_OWORD *)((char *)v173 + (_QWORD)v174 + 36);
    *(_OWORD *)&v228[20] = *(_OWORD *)((char *)v173 + (_QWORD)v174 + 52);
    *(_OWORD *)&v228[36] = *(_OWORD *)((char *)v173 + (_QWORD)v174 + 68);
    *(_QWORD *)&v228[52] = *(_QWORD *)((char *)v173 + (_QWORD)v174 + 84);
    v176 = *(_QWORD *)((char *)v173 + v4);
    *(_QWORD *)((char *)v173 + v4) = v175;
    if (v176)
    {
      v177 = *(_DWORD *)(v176 + 8);
      if (!v177)
      {
        __break(0xC471u);
        JUMPOUT(0x195E6FD58);
      }
      *(_DWORD *)(v176 + 8) = v177 - 1;
    }
    v178 = (char *)v173 + v4;
    *(_OWORD *)(v178 + 40) = *(_OWORD *)v228;
    *(_OWORD *)(v178 + 56) = *(_OWORD *)&v228[16];
    *(_OWORD *)(v178 + 72) = *(_OWORD *)&v228[32];
    *(_OWORD *)(v178 + 84) = *(_OWORD *)&v228[44];
    *(_OWORD *)(v178 + 8) = v226;
    *(_OWORD *)(v178 + 24) = v227;
    *((_WORD *)v178 + 50) = 0;
    v173 = (WTF *)((char *)v173 + 104);
  }
  while (v172 != v173);
  v179 = 0;
  v2 = v217;
  v13 = a2;
  do
  {
    v180 = *(_QWORD *)((char *)v174 + v179 + 96);
    if (v180)
    {
      v181 = *(_DWORD *)(v180 + 8);
      if (!v181)
      {
        __break(0xC471u);
        JUMPOUT(0x195E6FD78);
      }
      *(_DWORD *)(v180 + 8) = v181 - 1;
    }
    v179 += 104;
  }
  while (104 * v154 != v179);
  if (v174)
  {
LABEL_259:
    WTF::fastFree(v174, (void *)v9);
    v2 = v217;
    goto LABEL_260;
  }
LABEL_261:
  v224 = (WTF *)v2;
  v225 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v2 + 3) + 32) + 16) + 20) & 2) != 0)
  {
    v182 = *(unsigned int *)(v13 + 8) | 0x100000000;
    v183 = *(_QWORD *)(v13 + 16);
  }
  else
  {
    v182 = *(_QWORD *)(v13 + 16);
    v183 = *(unsigned int *)(v13 + 8) | 0x100000000;
  }
  LODWORD(v226) = v183;
  BYTE4(v226) = BYTE4(v183);
  BYTE8(v226) = 0;
  BYTE12(v226) = 0;
  LOBYTE(v227) = 0;
  BYTE4(v227) = 0;
  BYTE8(v227) = 0;
  BYTE12(v227) = 0;
  v228[0] = 0;
  v228[4] = 0;
  *(_DWORD *)&v228[8] = 0;
  *(_DWORD *)&v228[12] = v182;
  v228[16] = BYTE4(v182);
  v228[20] = 0;
  v228[24] = 0;
  v228[28] = 0;
  v228[32] = 0;
  v228[36] = 0;
  v228[40] = 0;
  v228[44] = 0;
  v228[48] = 0;
  *(_DWORD *)&v228[52] = 0;
  WebCore::Layout::FlexLayout::layout((unsigned int **)&v221, (uint64_t)&v224, (uint64_t)&v226, &v222);
  v185 = v221;
  if (*(_DWORD *)v221 < (*(_DWORD *)v221 - 1))
  {
    __break(0xC471u);
    JUMPOUT(0x195E6FDD8);
  }
  v220 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v217 + 3) + 32) + 16) + 20) & 0xC;
  if (v220 == 8)
  {
    if ((_DWORD)v154)
    {
LABEL_267:
      v186 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v217 + 3) + 32) + 16) + 20) & 3;
      if (*((_DWORD *)v217[1] + 2))
        v187 = 1;
      else
        v187 = *(_QWORD *)(*(_QWORD *)v4 + 104) == 0;
      if (v187)
        WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v217[1], *(_QWORD *)v4);
      if (*(_DWORD *)v185)
        __asm { BR              X10 }
      __break(0xC471u);
      JUMPOUT(0x195E6FD18);
    }
  }
  else if ((_DWORD)v154)
  {
    goto LABEL_267;
  }
  result = WTF::fastFree(v221, v184);
  if (v4)
    return WTF::fastFree((WTF *)v4, v189);
  return result;
}

uint64_t WebCore::Layout::FlexLayout::layout(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  char *v20;
  int v21;
  WTF *v22;
  uint64_t v23;
  const WebCore::RenderStyle *v24;
  WTF *v25;
  WebCore::Layout::Box *v26;
  int v27;
  WTF **v28;
  WTF *v29;
  WTF *v30;
  int v31;
  int v32;
  int v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  _DWORD **v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  WTF *v41;
  unsigned int v42;
  WTF *v43;
  WTF *v44;
  unsigned int v45;
  WTF *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  _BOOL4 v60;
  int v61;
  char *v62;
  int v63;
  uint64_t *v64;
  char *v65;
  WTF **v66;
  uint64_t v67;
  _DWORD *v68;
  size_t v69;
  uint64_t v70;
  _DWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _DWORD *v96;
  unint64_t v97;
  int *v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  char v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  _OWORD *v110;
  uint64_t v111;
  unint64_t v112;
  float v113;
  int *v114;
  int v115;
  int v116;
  _OWORD *v117;
  _QWORD *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unsigned int v122;
  int i;
  unsigned int v124;
  _QWORD **v125;
  _QWORD *v126;
  _QWORD *v127;
  int v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  _DWORD *v132;
  unsigned int v133;
  _DWORD *v134;
  void *v135;
  unsigned int v136;
  uint64_t v137;
  _QWORD **v138;
  _QWORD **v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  uint64_t v147;
  WTF *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int v159;
  int v160;
  _QWORD *v161;
  _DWORD *v162;
  uint64_t v163;
  unsigned int v164;
  int v165;
  int v166;
  unsigned int v167;
  int v168;
  int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  WTF *v175;
  float v176;
  uint64_t v177;
  double v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  WTF *v182;
  float v183;
  WTF *v184;
  WTF *v185;
  unint64_t *v186;
  unint64_t v187;
  WTF *v188;
  float v189;
  unint64_t *v190;
  unint64_t v191;
  float v192;
  float v193;
  double v194;
  int v195;
  uint64_t v196;
  int v197;
  WTF *v198;
  WTF *v199;
  int v200;
  int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  WTF **v206;
  int v207;
  int v208;
  _QWORD *v209;
  int v210;
  WTF *v211;
  WTF *v212;
  uint64_t v213;
  int v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unsigned int v218;
  int v219;
  unsigned int j;
  WTF *v221;
  _DWORD *v222;
  unint64_t v223;
  int k;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  _DWORD *v230;
  void *v231;
  uint64_t v232;
  int v233;
  _QWORD *v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t *v242;
  WTF **v243;
  uint64_t v244;
  int v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unsigned int v249;
  int v250;
  unsigned int m;
  WTF *v252;
  unint64_t v253;
  int n;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  _DWORD *v260;
  void *v261;
  uint64_t v262;
  int v263;
  _QWORD *v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  uint64_t v271;
  WTF *v272;
  WTF *v273;
  WTF *v274;
  WTF *v275;
  WTF *v276;
  WTF *v277;
  WTF *v278;
  WTF *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  WebCore::Layout::Box *v287;
  WTF *v288;
  const WebCore::RenderStyle *v289;
  uint64_t v290;
  WTF::StringImpl *v291;
  double v292;
  WTF *v293;
  WTF *v294;
  WebCore::Layout::Box *v295;
  int v296;
  WTF **v297;
  WTF *v298;
  WTF *v299;
  int v300;
  int v301;
  int v302;
  WTF *v303;
  void *v304;
  uint64_t v305;
  _DWORD **v306;
  _DWORD *v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  WTF *v313;
  uint64_t v314;
  int v315;
  int v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t v319;
  int v320;
  unint64_t v321;
  int32x2_t *v322;
  int32x2_t v323;
  unsigned __int32 v324;
  __int32 v325;
  unsigned int v326;
  unsigned int v327;
  __int32 v328;
  unsigned int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int *v334;
  int v335;
  int *v336;
  int v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  WTF *v341;
  uint64_t v342;
  int v343;
  unsigned int v344;
  BOOL v345;
  int v346;
  int v347;
  unint64_t v348;
  uint64_t v349;
  int *v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  _DWORD *v354;
  size_t v355;
  WTF *v356;
  unint64_t v357;
  _DWORD *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  _BYTE *v363;
  uint64_t v364;
  int v365;
  BOOL v366;
  unsigned int v367;
  int v368;
  int v369;
  int v370;
  unsigned int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _DWORD *v380;
  _DWORD *v381;
  WTF *v382;
  unsigned int v383;
  _DWORD *v384;
  _DWORD *v385;
  unint64_t *v386;
  unint64_t v387;
  unint64_t v388;
  int v389;
  WTF *v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int v395;
  int v396;
  int v397;
  int v398;
  BOOL v399;
  int v400;
  _DWORD *v401;
  _DWORD *v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  int v406;
  unint64_t v407;
  uint64_t v408;
  unsigned int v409;
  _DWORD *v410;
  unsigned int v411;
  unsigned int v412;
  int v413;
  unsigned int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  unint64_t v420;
  int64_t v421;
  uint64_t v422;
  uint64_t v423;
  WTF *v424;
  uint64_t v425;
  uint64_t v426;
  unsigned int v427;
  int v428;
  unint64_t v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  unsigned int v433;
  uint64_t v434;
  int v435;
  uint64_t v436;
  char v437;
  int v438;
  int v439;
  _DWORD *v440;
  _DWORD *v441;
  unint64_t v442;
  int v443;
  unsigned int v444;
  unsigned int *v445;
  unsigned int v446;
  unsigned int v447;
  uint64_t v448;
  int v449;
  unsigned int v450;
  int v451;
  unsigned int v452;
  int v453;
  unsigned int v454;
  int v455;
  int v456;
  int v457;
  unsigned int v458;
  unsigned int v459;
  int64_t v460;
  unint64_t *v461;
  int v462;
  unint64_t v463;
  uint64_t v464;
  _DWORD *v465;
  unint64_t v466;
  unsigned int *v467;
  unint64_t v468;
  unsigned int v469;
  unsigned int v470;
  unsigned int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int v474;
  unsigned int v475;
  unsigned int v476;
  int v477;
  unsigned int v478;
  unsigned int v479;
  int v480;
  int v481;
  unsigned int v482;
  uint64_t v483;
  WTF *v484;
  uint64_t v485;
  uint64_t v486;
  char *v487;
  unint64_t *v488;
  unint64_t v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  _DWORD *v494;
  int *v495;
  unsigned int v496;
  uint64_t v497;
  int v498;
  int v499;
  uint64_t v500;
  unsigned int v502;
  int v503;
  unsigned int v504;
  unsigned int v505;
  unsigned int v506;
  int v507;
  int v508;
  int v509;
  unsigned int v510;
  int v511;
  BOOL v512;
  unsigned int v513;
  unsigned int v514;
  _DWORD *v515;
  unsigned int v516;
  int v517;
  unsigned int v518;
  uint64_t v519;
  int v520;
  unsigned int v521;
  int v522;
  int v523;
  int v524;
  char v525;
  int v526;
  unsigned int v528;
  unsigned int v529;
  int v530;
  int v531;
  int v532;
  unint64_t v533;
  int v534;
  uint64_t v535;
  WTF *v536;
  int v537;
  int v538;
  _DWORD *v539;
  unsigned int v540;
  unsigned int v541;
  _BOOL4 v542;
  int v543;
  int v544;
  uint64_t v545;
  unint64_t v546;
  int64_t v547;
  int *v548;
  int v549;
  unint64_t v550;
  int64_t v551;
  char v552;
  int v553;
  int v554;
  int v555;
  int v556;
  unint64_t v557;
  int64_t v558;
  uint64_t v559;
  int v560;
  unsigned int v561;
  unsigned int v562;
  unsigned int v563;
  uint64_t v564;
  unsigned int *v565;
  uint64_t v566;
  char *v567;
  unint64_t *v568;
  unint64_t v569;
  unint64_t v570;
  BOOL v571;
  unint64_t v572;
  uint64_t v573;
  _DWORD *v574;
  uint64_t v575;
  unsigned int v576;
  unsigned int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  uint64_t v582;
  uint64_t v583;
  char *v584;
  void *v585;
  uint64_t result;
  WTF *v588;
  WTF *v589;
  WTF *v590;
  WTF *v591;
  WTF *v592;
  WTF *v593;
  _DWORD *v594;
  unsigned int v596;
  uint64_t v597;
  unint64_t *v598;
  int v599;
  unint64_t v600;
  _DWORD *v601;
  _BOOL4 v602;
  unint64_t v603;
  unsigned int v604;
  WTF *v605;
  WTF *v606;
  WTF *v607;
  WTF *v608;
  WTF *v609;
  WTF *v610;
  WTF *v611;
  int v612;
  int v613;
  unint64_t v614;
  WTF *v615;
  WTF *v616;
  WTF *v617;
  WTF *v619;
  WTF *v620;
  char v621[4];
  uint64_t v622;
  uint64_t v623;
  WTF *v624;
  WTF *v625;
  uint64_t v626;
  int v627;
  BOOL v628;
  WTF *v629[2];
  WebCore::Layout::Box *v630;
  WTF *v631;
  WTF **v632;
  WTF **v633;
  WTF **v634;
  uint64_t v635;
  WTF ***v636;
  uint64_t v637;
  char v638;
  char v639;
  uint64_t v640;
  char v641;
  uint64_t v642;
  uint64_t v643;
  char v644;
  char v645;
  WTF *v646;
  int v647;
  char v648;
  char v649;
  char v650;
  WTF **v651;
  uint64_t v652;
  char v653;
  char v654;
  uint64_t v655;
  char v656;
  WTF **v657;
  char v658;
  WTF *v659;
  _DWORD **v660;
  uint64_t v661;
  int v662;
  BOOL v663;

  v4 = (_DWORD *)a3;
  if (!*(_BYTE *)(a3 + 4))
  {
    if (*(_BYTE *)(a3 + 28))
    {
      v4 = (_DWORD *)(a3 + 24);
    }
    else
    {
      v4 = (_DWORD *)(a3 + 32);
      if (!*(_BYTE *)(a3 + 36))
        v4 = (_DWORD *)(a3 + 40);
    }
  }
  *(_DWORD *)(a2 + 8) = *v4;
  v5 = (_DWORD *)(a3 + 44);
  v589 = (WTF *)(a3 + 44);
  if (!*(_BYTE *)(a3 + 48))
  {
    if (*(_BYTE *)(a3 + 72))
    {
      v5 = (_DWORD *)(a3 + 68);
    }
    else
    {
      v5 = (_DWORD *)(a3 + 76);
      if (!*(_BYTE *)(a3 + 80))
        v5 = (_DWORD *)(a3 + 84);
    }
  }
  v601 = (_DWORD *)a2;
  *(_DWORD *)(a2 + 12) = *v5;
  v6 = *((unsigned int *)a4 + 3);
  if ((_DWORD)v6)
  {
    v591 = (WTF *)WTF::fastMalloc((WTF *)(4 * v6 + 4));
    *(_DWORD *)v591 = v6;
    bzero((char *)v591 + 4, 4 * v6);
    v7 = *((unsigned int *)a4 + 3);
    if ((_DWORD)v7)
    {
      v588 = (WTF *)WTF::fastMalloc((WTF *)(4 * v7 + 4));
      *(_DWORD *)v588 = v7;
      bzero((char *)v588 + 4, 4 * v7);
      v8 = *((_DWORD *)a4 + 3);
      v9 = *a4;
      v659 = 0;
      v660 = 0;
      if (v8)
      {
        v10 = 0;
        v11 = 0;
        v12 = v9 + 104 * v8;
        v13 = v601;
        while (1)
        {
          v14 = *(_QWORD *)(v9 + 8);
          if ((v14 & 0xFF00000000) == 0)
            break;
LABEL_28:
          v19 = *(_DWORD *)(v9 + 20);
          if (v19 <= (int)v14)
            v19 = v14;
          if (v19 >= *(_DWORD *)(v9 + 16))
            v19 = *(_DWORD *)(v9 + 16);
          v629[0] = (WTF *)__PAIR64__(v19, v14);
          if (v11 == (_DWORD)v660)
          {
            v20 = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v659, v11 + 1, (unint64_t)v629);
            v11 = HIDWORD(v660);
            v10 = v659;
            *((_QWORD *)v659 + HIDWORD(v660)) = *(_QWORD *)v20;
          }
          else
          {
            *((WTF **)v10 + v11) = v629[0];
          }
          HIDWORD(v660) = ++v11;
          v9 += 104;
          if (v9 == v12)
            goto LABEL_84;
        }
        v15 = *(WTF **)v9;
        v16 = *(_QWORD *)(*(_QWORD *)v9 + 24);
        v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 16) + 16);
        if (*(_BYTE *)(v9 + 100) && v17 == 12)
        {
          if (*(_BYTE *)(v9 + 48))
          {
LABEL_26:
            LODWORD(v14) = 0;
LABEL_27:
            v13 = v601;
            goto LABEL_28;
          }
          v17 = 12;
        }
        v18 = v17 == 12 && (*(unsigned __int8 *)(a3 + 28) | *(unsigned __int8 *)(a3 + 36)) != 0;
        if (v18 || v17 == 12 && *(_BYTE *)(v9 + 101))
          goto LABEL_26;
        if (!WebCore::Layout::Box::establishesInlineFormattingContext(*(WebCore::Layout::Box **)v9)
          || *(_BYTE *)(v9 + 101) && !*(_BYTE *)(v9 + 48))
        {
          LODWORD(v14) = 0;
LABEL_63:
          if ((*(_BYTE *)(*(_QWORD *)(v16 + 8) + 68) & 4) != 0)
          {
            v32 = *(_DWORD *)(v9 + 40);
            v345 = __OFADD__((_DWORD)v14, v32);
            v33 = v14 + v32;
            if (v345)
              LODWORD(v14) = (v14 >> 31) + 0x7FFFFFFF;
            else
              LODWORD(v14) = v33;
          }
          goto LABEL_27;
        }
        v624 = v15;
        v21 = *((_DWORD *)v15 + 2);
        v627 = 0;
        v625 = 0;
        v626 = 0;
        v628 = (*((_DWORD *)v15 + 14) & 0x4000000) == 0;
        v651 = &v624;
        LOBYTE(v652) = 0;
        v653 = 0;
        v654 = 0;
        v655 = 0;
        v656 = 0;
        v658 = 0;
        v22 = *(WTF **)(*(_QWORD *)v601 + 8);
        v629[0] = v15;
        v629[1] = v22;
        v630 = v15;
        *((_DWORD *)v15 + 2) = v21 + 2;
        v631 = v22;
        v632 = &v624;
        v633 = v629;
        v634 = v629;
        v635 = WebCore::Layout::LayoutState::inlineContentCache(v22, (uint64_t)v15);
        v636 = &v651;
        v639 = 0;
        LOBYTE(v640) = 0;
        v641 = 0;
        v645 = 0;
        LOBYTE(v646) = 0;
        v648 = 0;
        v650 = 0;
        v637 = 0;
        v638 = 0;
        v642 = 0;
        v643 = 0;
        v644 = 0;
        if (*(__int16 *)(*((_QWORD *)v629[0] + 5) + 300) != -1)
        {
          v640 = *(__int16 *)(*((_QWORD *)v629[0] + 5) + 300);
          v641 = 1;
        }
        v649 = 1;
        if (!*((_DWORD *)v22 + 12))
          v650 = 1;
        LODWORD(v14) = WebCore::Layout::InlineFormattingContext::maximumContentSize((WebCore::Layout::InlineFormattingContext *)v629, 0, v23, v24);
        if (v648)
        {
          v25 = v646;
          if (v646)
          {
            v646 = 0;
            v647 = 0;
            WTF::fastFree(v25, (void *)a2);
          }
        }
        if (v643)
          WTF::fastFree((WTF *)(v643 - 16), (void *)a2);
        v26 = v630;
        v630 = 0;
        if (v26)
        {
          v27 = *((_DWORD *)v26 + 2);
          if (!v27)
          {
            __break(0xC471u);
            JUMPOUT(0x195E73238);
          }
          *((_DWORD *)v26 + 2) = v27 - 1;
        }
        if (v658)
        {
          v28 = v657;
          v657 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
            {
              WebCore::Font::~Font(v28);
              WTF::fastFree(v34, v35);
            }
            else
            {
              --*(_DWORD *)v28;
            }
          }
        }
        v29 = v625;
        if (HIDWORD(v626))
        {
          v36 = 120 * HIDWORD(v626);
          v37 = (_DWORD **)((char *)v625 + 96);
          do
          {
            v38 = *v37;
            *v37 = 0;
            if (v38)
            {
              if (v38[2] == 1)
              {
                v619 = (WTF *)v36;
                (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
                v36 = (uint64_t)v619;
              }
              else
              {
                --v38[2];
              }
            }
            v39 = (uint64_t)*(v37 - 12);
            if (v39)
            {
              v40 = *(_DWORD *)(v39 + 8);
              if (!v40)
              {
                __break(0xC471u);
                JUMPOUT(0x195E732C0);
              }
              *(_DWORD *)(v39 + 8) = v40 - 1;
            }
            v37 += 15;
            v36 -= 120;
          }
          while (v36);
          v29 = v625;
          if (!v625)
            goto LABEL_59;
        }
        else if (!v625)
        {
LABEL_59:
          v30 = v624;
          v624 = 0;
          if (v30)
          {
            v31 = *((_DWORD *)v30 + 2);
            if (!v31)
            {
              __break(0xC471u);
              JUMPOUT(0x195E73258);
            }
            *((_DWORD *)v30 + 2) = v31 - 1;
          }
          v16 = *(_QWORD *)(*(_QWORD *)v9 + 24);
          goto LABEL_63;
        }
        v625 = 0;
        LODWORD(v626) = 0;
        WTF::fastFree(v29, (void *)a2);
        goto LABEL_59;
      }
      v11 = 0;
      v13 = v601;
      goto LABEL_84;
    }
    v41 = v591;
  }
  else
  {
    v41 = 0;
  }
  v591 = v41;
  v588 = 0;
  v11 = 0;
  v659 = 0;
  v660 = 0;
  v13 = v601;
LABEL_84:
  v612 = v13[2];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)v13 + 24) + 32) + 16) + 20) & 0xC) == 0)
  {
    v66 = (WTF **)WTF::fastMalloc((WTF *)0x10);
    v596 = 1;
    LODWORD(v652) = 1;
    v651 = v66;
    *v66 = 0;
    v66[1] = (WTF *)v11;
    v64 = a4;
    goto LABEL_127;
  }
  v651 = 0;
  v652 = 0;
  v42 = 0;
  if (!v11)
    goto LABEL_121;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = (WTF *)v11;
  v47 = (_DWORD *)((char *)v659 + 4);
  v48 = 24;
  do
  {
    if ((unint64_t)v44 >= *((unsigned int *)a4 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x195E73358);
    }
    v49 = *a4 + v48;
    if (*(_BYTE *)(v49 + 4))
      v50 = *(_DWORD *)v49;
    else
      v50 = 0;
    if (*(_BYTE *)(v49 + 12))
      v51 = *(_DWORD *)(v49 + 8);
    else
      v51 = 0;
    v345 = __OFADD__(v50, v51);
    v52 = v50 + v51;
    v53 = (v50 >> 31) + 0x7FFFFFFF;
    if (!v345)
      v53 = v52;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 - 24) + 24) + 8) + 68) & 4) == 0)
    {
      v54 = *(_DWORD *)(v49 + 16);
      v345 = __OFADD__(v53, v54);
      v55 = v53 + v54;
      v53 = (v53 >> 31) + 0x7FFFFFFF;
      if (!v345)
        v53 = v55;
    }
    v345 = __OFADD__(v53, *v47);
    v56 = v53 + *v47;
    v57 = (v53 >> 31) + 0x7FFFFFFF;
    if (v345)
      v58 = v57;
    else
      v58 = v56;
    v59 = v45 + v58;
    v60 = __OFADD__(v45, v58);
    if (v44 == v43)
    {
      v61 = (v45 >> 31) + 0x7FFFFFFF;
      if (v60)
        v58 = v61;
      else
        v58 = v59;
    }
    else
    {
      if (v60)
      {
        v63 = (v45 >> 31) + 0x7FFFFFFF;
        if (v63 <= v612)
        {
          v58 = v63;
          goto LABEL_116;
        }
      }
      else if (v59 <= v612)
      {
        v58 += v45;
        goto LABEL_116;
      }
      v629[0] = v43;
      v629[1] = v44;
      if (v42 == (_DWORD)v652)
      {
        v62 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v651, v42 + 1, (unint64_t)v629);
        *(_OWORD *)&v651[2 * HIDWORD(v652)] = *(_OWORD *)v62;
      }
      else
      {
        *(_OWORD *)&v651[2 * v42] = *(_OWORD *)v629;
      }
      v42 = ++HIDWORD(v652);
      v43 = v44;
    }
LABEL_116:
    v44 = (WTF *)((char *)v44 + 1);
    v48 += 104;
    v47 += 2;
    v45 = v58;
  }
  while (v46 != v44);
  v629[0] = v43;
  v629[1] = v46;
  if (v43 == v46)
  {
LABEL_121:
    v629[0] = 0;
    v629[1] = 0;
  }
  v64 = a4;
  if (v42 == (_DWORD)v652)
  {
    v65 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v651, v42 + 1, (unint64_t)v629);
    *(_OWORD *)&v651[2 * HIDWORD(v652)] = *(_OWORD *)v65;
  }
  else
  {
    *(_OWORD *)&v651[2 * v42] = *(_OWORD *)v629;
  }
  v596 = HIDWORD(v652) + 1;
LABEL_127:
  v605 = (WTF *)v651;
  v67 = *((unsigned int *)v64 + 3);
  if ((_DWORD)v67)
  {
    v68 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v67 + 4));
    *v68 = v67;
    bzero(v68 + 1, 4 * v67);
    v69 = *((unsigned int *)v64 + 3);
    if ((_DWORD)v69)
    {
      v608 = (WTF *)*((unsigned int *)v64 + 3);
      v610 = (WTF *)WTF::fastMalloc(v608);
      bzero(v610, v69);
      goto LABEL_132;
    }
  }
  else
  {
    v68 = 0;
  }
  v608 = 0;
  v610 = 0;
LABEL_132:
  v620 = (WTF *)v68;
  if (!v596)
    goto LABEL_447;
  v70 = 0;
  v71 = v68 + 1;
  while (2)
  {
    v72 = (unint64_t *)((char *)v605 + 16 * v70);
    v73 = *v72;
    v74 = *((unsigned int *)v64 + 3);
    v614 = v72[1];
    v75 = v614 - *v72;
    v603 = v73;
    v597 = v70;
    if (v614 > v73)
    {
      if (v73 <= v74)
        v76 = *((unsigned int *)v64 + 3);
      else
        v76 = v73;
      if (v73 >= v74)
        goto LABEL_1078;
      v77 = v73;
      if (v73 >= HIDWORD(v660))
        goto LABEL_1079;
      v78 = *v64;
      v79 = *v64 + 104 * v77;
      if (*(_BYTE *)(v79 + 28))
        v80 = *(_DWORD *)(v79 + 24);
      else
        v80 = 0;
      v81 = *(unsigned __int8 *)(v79 + 36);
      v82 = *(_DWORD *)(v79 + 32);
      if (!v81)
        v82 = 0;
      v345 = __OFADD__(v80, v82);
      v83 = v80 + v82;
      v84 = (v80 >> 31) + 0x7FFFFFFF;
      if (v345)
        v83 = v84;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v64 + 104 * v77) + 24) + 8) + 68) & 4) == 0)
      {
        v85 = *(_DWORD *)(v78 + 104 * v77 + 40);
        v345 = __OFADD__(v83, v85);
        v86 = v83 + v85;
        v83 = (v83 >> 31) + 0x7FFFFFFF;
        if (!v345)
          v83 = v86;
      }
      v87 = *((_DWORD *)v659 + 2 * v77 + 1);
      v345 = __OFADD__(v83, v87);
      v88 = v83 + v87;
      v89 = (v83 >> 31) + 0x7FFFFFFF;
      if (v345)
        v90 = v89;
      else
        v90 = v88;
      if (v77 + 1 != v614)
      {
        v91 = v76 + ~v77;
        if (v77 + 1 <= HIDWORD(v660))
          v92 = HIDWORD(v660);
        else
          v92 = v77 + 1;
        v93 = v92 + ~v77;
        if (v91 >= v93)
          v94 = v93;
        else
          v94 = v91;
        v95 = v75 - 2;
        if (v94 < v95)
          v95 = v94;
        if (v91 != v95)
        {
          if (v93 != v95)
          {
            v96 = (_DWORD *)(v78 + 104 * v77 + 144);
            v97 = ~v77 + v614;
            v98 = (int *)((char *)v659 + 8 * v77 + 12);
            do
            {
              v100 = *v98;
              v98 += 2;
              v99 = v100;
              if (*((_BYTE *)v96 - 12))
                v101 = *(v96 - 4);
              else
                v101 = 0;
              if (*((_BYTE *)v96 - 4))
                v102 = *(v96 - 2);
              else
                v102 = 0;
              v345 = __OFADD__(v101, v102);
              v103 = v101 + v102;
              v104 = v345;
              v105 = (v101 >> 31) + 0x7FFFFFFF;
              if ((v104 & 1) == 0)
                v105 = v103;
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v96 - 5) + 24) + 8) + 68) & 4) == 0)
              {
                v345 = __OFADD__(v105, *v96);
                v106 = v105 + *v96;
                v105 = (v105 >> 31) + 0x7FFFFFFF;
                if (!v345)
                  v105 = v106;
              }
              v345 = __OFADD__(v105, v99);
              v107 = v105 + v99;
              v108 = (v105 >> 31) + 0x7FFFFFFF;
              if (v345)
                v107 = v108;
              v345 = __OFADD__(v90, v107);
              v109 = v90 + v107;
              if (v345)
                v90 = (v90 >> 31) + 0x7FFFFFFF;
              else
                v90 = v109;
              v96 += 26;
              --v97;
            }
            while (v97);
            goto LABEL_187;
          }
LABEL_1079:
          __break(0xC471u);
          JUMPOUT(0x195E73388);
        }
LABEL_1078:
        __break(0xC471u);
        JUMPOUT(0x195E73380);
      }
LABEL_187:
      v616 = 0;
      v606 = 0;
      v110 = 0;
      v602 = v90 < v612;
      v599 = v90;
LABEL_188:
      if (v77 >= *((unsigned int *)v64 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x195E73320);
      }
      v111 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v64 + 104 * v77) + 24) + 32) + 16);
      if (*(float *)(v111 + 4) == 0.0)
      {
        v113 = *(float *)(v111 + 8);
        v112 = HIDWORD(v660);
        if (v113 == 0.0)
          goto LABEL_205;
      }
      else
      {
        v112 = HIDWORD(v660);
      }
      if (v77 >= v112)
      {
        __break(0xC471u);
        JUMPOUT(0x195E73328);
      }
      v114 = (int *)((char *)v659 + 8 * v77);
      v115 = *v114;
      v116 = v114[1];
      if (v90 >= v612)
      {
        if (v115 < v116)
        {
LABEL_205:
          if (v77 >= v112)
          {
            __break(0xC471u);
            JUMPOUT(0x195E73350);
          }
          if (*v68 <= v77)
          {
            __break(0xC471u);
            JUMPOUT(0x195E72C74);
          }
          v71[v77] = *((_DWORD *)v659 + 2 * v77 + 1);
          if (v77 >= (unint64_t)v608)
          {
            __break(0xC471u);
            JUMPOUT(0x195E73348);
          }
          *((_BYTE *)v610 + v77) = 1;
          goto LABEL_232;
        }
      }
      else if (v115 > v116)
      {
        goto LABEL_205;
      }
      if (!v110)
      {
        v117 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x50);
        *v117 = xmmword_1968A5190;
        v110 = v117 + 1;
      }
      v118 = 0;
      v119 = (v77 + ~(v77 << 32)) ^ ((v77 + ~(v77 << 32)) >> 22);
      v120 = 9 * ((v119 + ~(v119 << 13)) ^ ((v119 + ~(v119 << 13)) >> 8));
      v121 = (v120 ^ (v120 >> 15)) + ~((v120 ^ (v120 >> 15)) << 27);
      v122 = (v121 >> 31) ^ v121;
      for (i = 1; ; ++i)
      {
        v124 = v122 & *((_DWORD *)v110 - 2);
        v125 = (_QWORD **)v110 + v124;
        v126 = *v125;
        if (*v125 == (_QWORD *)-1)
        {
          v118 = (_QWORD *)v110 + v124;
        }
        else
        {
          if (!v126)
          {
            if (v118)
            {
              *v118 = 0;
              --*((_DWORD *)v110 - 4);
              v125 = (_QWORD **)v118;
            }
            v127 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            v127[1] = 0;
            v127[2] = 0;
            *v127 = v77;
            *v125 = v127;
            v128 = *((_DWORD *)v110 - 4);
            v129 = *((_DWORD *)v110 - 3) + 1;
            *((_DWORD *)v110 - 3) = v129;
            v130 = (v128 + v129);
            v131 = *((unsigned int *)v110 - 1);
            if (v131 > 0x400)
            {
              if (v131 <= 2 * v130)
                goto LABEL_215;
LABEL_213:
              v132 = v110;
            }
            else
            {
              if (3 * v131 > 4 * v130)
                goto LABEL_213;
              if ((_DWORD)v131)
LABEL_215:
                v133 = (_DWORD)v131 << (6 * v129 >= (2 * v131));
              else
                v133 = 8;
              v134 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v133 + 16));
              v132 = v134 + 4;
              v136 = v133 - 1;
              v134[2] = v133 - 1;
              v134[3] = v133;
              *v134 = 0;
              v134[1] = v129;
              if ((_DWORD)v131)
              {
                v137 = 0;
                v138 = 0;
                v64 = a4;
                do
                {
                  v139 = (_QWORD **)v110 + v137;
                  v140 = *v139;
                  if ((unint64_t)*v139 + 1 >= 2)
                  {
                    v141 = *v140 + ~(*v140 << 32);
                    v142 = (v141 ^ (v141 >> 22)) + ~((v141 ^ (v141 >> 22)) << 13);
                    v143 = (9 * (v142 ^ (v142 >> 8))) ^ ((9 * (v142 ^ (v142 >> 8))) >> 15);
                    v144 = v136 & (((v143 + ~(v143 << 27)) >> 31) ^ (v143 + ~((_DWORD)v143 << 27)));
                    v145 = 1;
                    do
                    {
                      v146 = v144;
                      v147 = *(_QWORD *)&v132[2 * v144];
                      v144 = (v144 + v145++) & v136;
                    }
                    while (v147);
                    *(_QWORD *)&v132[2 * v146] = v140;
                    if (v139 == v125)
                      v138 = (_QWORD **)&v132[2 * v146];
                  }
                  ++v137;
                }
                while (v137 != v131);
              }
              else
              {
                v138 = 0;
                v64 = a4;
              }
              WTF::fastFree((WTF *)(v110 - 1), v135);
              v127 = *v138;
            }
            v127[1] = v606;
            v127[2] = 0;
            v90 = v599;
            if (v606)
              *((_QWORD *)v606 + 2) = v127;
            else
              v616 = (WTF *)v127;
            v606 = (WTF *)v127;
            v110 = v132;
            v68 = v620;
LABEL_232:
            if (++v77 == v614)
            {
              v74 = *((unsigned int *)v64 + 3);
              goto LABEL_237;
            }
            goto LABEL_188;
          }
          if (*v126 == v77)
            goto LABEL_232;
        }
        v122 = i + v124;
      }
    }
    v616 = 0;
    v110 = 0;
    v602 = v612 > 0;
LABEL_237:
    v629[0] = 0;
    v629[1] = 0;
    v651 = 0;
    v652 = 0;
    if (v74)
    {
      if (v74 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195E73370);
      }
      v148 = (WTF *)WTF::fastMalloc((WTF *)(8 * v74));
      LODWORD(v629[1]) = v74;
      v629[0] = v148;
      v149 = *((unsigned int *)v64 + 3);
      if ((_DWORD)v149)
      {
        if (v149 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195E73378);
        }
        v150 = WTF::fastMalloc((WTF *)(8 * v149));
        LODWORD(v652) = v149;
        v651 = (WTF **)v150;
      }
    }
    if (!v110)
    {
LABEL_432:
      v272 = v616;
      goto LABEL_436;
    }
    while (2)
    {
      if (!*((_DWORD *)v110 - 3))
        goto LABEL_432;
      v151 = v603;
      v152 = 0;
      if (v614 <= v603)
      {
        a2 = 1015021568;
        goto LABEL_277;
      }
      v153 = *((unsigned int *)v64 + 3);
      if (v603 > v153)
        v153 = v603;
      v154 = *v64;
      a2 = 1015021568;
      while (2)
      {
        if (v151 == v153)
        {
          __break(0xC471u);
          JUMPOUT(0x195E73290);
        }
        v155 = *((_DWORD *)v110 - 2);
        v156 = (v151 + ~(v151 << 32)) ^ ((v151 + ~(v151 << 32)) >> 22);
        v157 = 9 * ((v156 + ~(v156 << 13)) ^ ((v156 + ~(v156 << 13)) >> 8));
        v158 = (v157 ^ (v157 >> 15)) + ~((v157 ^ (v157 >> 15)) << 27);
        v159 = v155 & ((v158 >> 31) ^ v158);
        v160 = 1;
        while (2)
        {
          v161 = (_QWORD *)*((_QWORD *)v110 + v159);
          if (v161 == (_QWORD *)-1)
          {
LABEL_253:
            v159 = (v159 + v160++) & v155;
            continue;
          }
          break;
        }
        if (v161)
        {
          if (*v161 == v151)
          {
            if (v151 >= HIDWORD(v660))
            {
              __break(0xC471u);
              JUMPOUT(0x195E732F8);
            }
            v162 = (_DWORD *)((char *)v659 + 8 * v151);
            goto LABEL_258;
          }
          goto LABEL_253;
        }
        if (*v68 <= v151)
        {
          __break(0xC471u);
          JUMPOUT(0x195E72A6CLL);
        }
        v162 = &v71[v151];
LABEL_258:
        v163 = v154 + 104 * v151;
        if (*(_BYTE *)(v163 + 28))
          v164 = *(_DWORD *)(v163 + 24);
        else
          v164 = 0;
        v165 = *(unsigned __int8 *)(v163 + 36);
        v166 = *(_DWORD *)(v163 + 32);
        if (!v165)
          v166 = 0;
        v345 = __OFADD__(v164, v166);
        v167 = v164 + v166;
        v168 = (v164 >> 31) + 0x7FFFFFFF;
        if (v345)
          v167 = v168;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v154 + 104 * v151) + 24) + 8) + 68) & 4) == 0)
        {
          v169 = *(_DWORD *)(v154 + 104 * v151 + 40);
          v345 = __OFADD__(v167, v169);
          v170 = v167 + v169;
          v167 = (v167 >> 31) + 0x7FFFFFFF;
          if (!v345)
            v167 = v170;
        }
        v171 = v167 + *v162;
        if (__OFADD__(v167, *v162))
          v171 = (v167 >> 31) + 0x7FFFFFFF;
        v345 = __OFADD__(v152, v171);
        v172 = v152 + v171;
        v152 = (v152 >> 31) + 0x7FFFFFFF;
        if (!v345)
          v152 = v172;
        if (++v151 != v614)
          continue;
        break;
      }
LABEL_277:
      v345 = __OFSUB__(v612, v152);
      v173 = v612 - v152;
      if (v345)
        v174 = (v612 >> 31) + 0x7FFFFFFF;
      else
        v174 = v173;
      v175 = v616;
      if (v616)
      {
        v176 = 0.0;
        do
        {
          if (*(_QWORD *)v175 >= (unint64_t)*((unsigned int *)v64 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195E73288);
          }
          v177 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v64 + 104 * *(_QWORD *)v175) + 24) + 32) + 16);
          v176 = v176 + (float)(*(float *)(v177 + 4) + *(float *)(v177 + 8));
          v175 = (WTF *)*((_QWORD *)v175 + 2);
        }
        while (v175);
        v175 = v616;
        if (v176 < 1.0)
          goto LABEL_287;
LABEL_292:
        v179 = *((unsigned int *)v64 + 3);
        v180 = HIDWORD(v660);
        v181 = *v64;
        v182 = v659;
        if (!v602)
        {
          v183 = 0.0;
          if (v179 > HIDWORD(v660))
          {
            v186 = (unint64_t *)v616;
            while (1)
            {
              v187 = *v186;
              if (*v186 >= v179)
                break;
              if (v187 >= HIDWORD(v660))
              {
                __break(0xC471u);
                JUMPOUT(0x195E73300);
              }
              v183 = v183
                   + (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v181 + 104 * v187) + 24) + 32)
                                                  + 16)
                                      + 8)
                           * (float)((float)*((int *)v659 + 2 * v187) * 0.015625));
              v186 = (unint64_t *)v186[2];
              if (!v186)
                goto LABEL_306;
            }
          }
          else
          {
            v185 = v616;
            while (*(_QWORD *)v185 < v179)
            {
              v183 = v183
                   + (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v181 + 104 * *(_QWORD *)v185)
                                                                          + 24)
                                                              + 32)
                                                  + 16)
                                      + 8)
                           * (float)((float)*((int *)v659 + 2 * *(_QWORD *)v185) * 0.015625));
              v185 = (WTF *)*((_QWORD *)v185 + 2);
              if (!v185)
                goto LABEL_306;
            }
          }
          __break(0xC471u);
          JUMPOUT(0x195E73298);
        }
        v183 = 0.0;
        v184 = v616;
        do
        {
          if (*(_QWORD *)v184 >= v179)
          {
            __break(0xC471u);
            JUMPOUT(0x195E732A0);
          }
          v183 = v183
               + *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v181 + 104 * *(_QWORD *)v184) + 24)
                                                  + 32)
                                      + 16)
                          + 4);
          v184 = (WTF *)*((_QWORD *)v184 + 2);
        }
        while (v184);
LABEL_306:
        v188 = v616;
        if (v183 == 0.0)
        {
          do
          {
            v196 = *(_QWORD *)v188;
            if (*(_QWORD *)v188 >= v180)
            {
              __break(0xC471u);
              JUMPOUT(0x195E732C8);
            }
            if (*v68 <= v196)
            {
              __break(0xC471u);
              JUMPOUT(0x195E71FE4);
            }
            v71[v196] = *((_DWORD *)v182 + 2 * v196);
            v188 = (WTF *)*((_QWORD *)v188 + 2);
          }
          while (v188);
        }
        else
        {
          v189 = (float)v174 * 0.015625;
          v190 = (unint64_t *)v616;
          do
          {
            v191 = *v190;
            if (v602)
            {
              if (v191 >= *((unsigned int *)v64 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x195E732E0);
              }
              if (v191 >= v180)
              {
                __break(0xC471u);
                JUMPOUT(0x195E732E8);
              }
              if (*v68 <= v191)
              {
                __break(0xC471u);
                JUMPOUT(0x195E72004);
              }
              v192 = (float)((float)*((int *)v182 + 2 * v191) * 0.015625)
                   + (float)(v189
                           * (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v181 + 104 * v191) + 24)
                                                                      + 32)
                                                          + 16)
                                              + 4)
                                   / v183));
            }
            else
            {
              if (v191 >= v180)
              {
                __break(0xC471u);
                JUMPOUT(0x195E732D0);
              }
              if (v191 >= *((unsigned int *)v64 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x195E732D8);
              }
              if (*v68 <= v191)
              {
                __break(0xC471u);
                JUMPOUT(0x195E72024);
              }
              v193 = (float)*((int *)v182 + 2 * v191) * 0.015625;
              v192 = v193
                   - fabsf(v189* (float)((float)(v193* *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v181 + 104 * v191)+ 24)+ 32)+ 16)+ 8))/ v183));
            }
            v194 = v192 * 64.0;
            if (v194 >= 2147483650.0)
            {
              v195 = 0x7FFFFFFF;
            }
            else if (v194 <= -2147483650.0)
            {
              v195 = 0x80000000;
            }
            else
            {
              v195 = (int)v194;
            }
            v71[*v190] = v195;
            v190 = (unint64_t *)v190[2];
          }
          while (v190);
        }
        v197 = 0;
        HIDWORD(v629[1]) = 0;
        HIDWORD(v652) = 0;
        v198 = v616;
        do
        {
          v624 = 0;
          v199 = *(WTF **)v198;
          v624 = v199;
          if (*v68 <= v199)
          {
            __break(0xC471u);
            JUMPOUT(0x195E719D4);
          }
          if ((unint64_t)v199 >= *((unsigned int *)v64 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195E73280);
          }
          v200 = v71[v199];
          v201 = *(_DWORD *)(*v64 + 104 * (_QWORD)v199 + 20);
          if (v201 <= v200)
            v201 = v71[v199];
          if (v201 >= *(_DWORD *)(*v64 + 104 * (_QWORD)v199 + 16))
            v202 = *(_DWORD *)(*v64 + 104 * (_QWORD)v199 + 16);
          else
            v202 = v201;
          v203 = v202 - v200;
          if (__OFSUB__(v202, v200))
            v203 = (v202 >> 31) + 0x7FFFFFFF;
          v345 = __OFADD__(v197, v203);
          v204 = v197 + v203;
          if (v345)
            v197 = (v197 >> 31) + 0x7FFFFFFF;
          else
            v197 = v204;
          if ((int)v202 >= v200)
          {
            if ((int)v202 > v200)
            {
              v208 = HIDWORD(v629[1]);
              if (HIDWORD(v629[1]) == LODWORD(v629[1]))
              {
                v209 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v629, HIDWORD(v629[1]) + 1, (unint64_t)&v624);
                v210 = HIDWORD(v629[1]) + 1;
                *((_QWORD *)v629[0] + HIDWORD(v629[1])) = *v209;
                HIDWORD(v629[1]) = v210;
              }
              else
              {
                *((_QWORD *)v629[0] + HIDWORD(v629[1])) = v199;
                HIDWORD(v629[1]) = v208 + 1;
              }
            }
          }
          else
          {
            v205 = HIDWORD(v652);
            if (HIDWORD(v652) == (_DWORD)v652)
            {
              v206 = (WTF **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v651, HIDWORD(v652) + 1, (unint64_t)&v624);
              v207 = HIDWORD(v652) + 1;
              v651[HIDWORD(v652)] = *v206;
              HIDWORD(v652) = v207;
            }
            else
            {
              v651[HIDWORD(v652)] = v199;
              HIDWORD(v652) = v205 + 1;
            }
          }
          if (*v68 <= v624)
          {
            __break(0xC471u);
            JUMPOUT(0x195E719F4);
          }
          v71[v624] = v202;
          v198 = (WTF *)*((_QWORD *)v198 + 2);
        }
        while (v198);
        if (v197)
        {
          if (v197 >= 1)
          {
            if (!HIDWORD(v629[1]))
              goto LABEL_427;
            v211 = v629[0];
            v212 = (WTF *)((char *)v629[0] + 8 * HIDWORD(v629[1]));
            while (2)
            {
              if (!v110)
              {
                v222 = 0;
                goto LABEL_376;
              }
              v213 = *(_QWORD *)v211;
              v214 = *((_DWORD *)v110 - 2);
              v215 = *(_QWORD *)v211 + ~(*(_QWORD *)v211 << 32);
              v216 = (v215 ^ (v215 >> 22)) + ~((v215 ^ (v215 >> 22)) << 13);
              v217 = (9 * (v216 ^ (v216 >> 8))) ^ ((9 * (v216 ^ (v216 >> 8))) >> 15);
              v218 = v214 & (((v217 + ~(v217 << 27)) >> 31) ^ (v217 + ~((_DWORD)v217 << 27)));
              v219 = 1;
              for (j = v218; ; j = (j + v219++) & v214)
              {
                v221 = (WTF *)*((_QWORD *)v110 + j);
                if (v221 != (WTF *)-1)
                {
                  if (!v221)
                  {
                    v222 = v110;
                    goto LABEL_376;
                  }
                  if (*(_QWORD *)v221 == v213)
                    break;
                }
              }
              v223 = *((unsigned int *)v110 - 1);
              if (j == (_DWORD)v223)
              {
                v222 = v110;
                goto LABEL_376;
              }
              for (k = 1; ; ++k)
              {
                v225 = v218;
                v226 = (_QWORD *)*((_QWORD *)v110 + v218);
                if (v226 != (_QWORD *)-1)
                {
                  if (!v226)
                    goto LABEL_371;
                  if (*v226 == v213)
                    break;
                }
                v218 = (v225 + k) & v214;
              }
              if ((_DWORD)v223 == (_DWORD)v225)
              {
LABEL_371:
                v222 = v110;
                goto LABEL_372;
              }
              *((_QWORD *)v110 + v225) = -1;
              ++*((_DWORD *)v110 - 4);
              v229 = *((_DWORD *)v110 - 3) - 1;
              *((_DWORD *)v110 - 3) = v229;
              if (v223 < 9 || 6 * v229 >= v223)
              {
                v222 = v110;
                v68 = v620;
              }
              else
              {
                v230 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * (v223 >> 1) + 16));
                v232 = 0;
                v233 = (v223 >> 1) - 1;
                v230[2] = v233;
                v230[3] = v223 >> 1;
                v222 = v230 + 4;
                *v230 = 0;
                v230[1] = v229;
                v64 = a4;
                v68 = v620;
                do
                {
                  v234 = (_QWORD *)*((_QWORD *)v110 + v232);
                  if ((unint64_t)v234 + 1 >= 2)
                  {
                    v235 = *v234 + ~(*v234 << 32);
                    v236 = (v235 ^ (v235 >> 22)) + ~((v235 ^ (v235 >> 22)) << 13);
                    v237 = (9 * (v236 ^ (v236 >> 8))) ^ ((9 * (v236 ^ (v236 >> 8))) >> 15);
                    v238 = v233 & (((v237 + ~(v237 << 27)) >> 31) ^ (v237 + ~((_DWORD)v237 << 27)));
                    v239 = 1;
                    do
                    {
                      v240 = v238;
                      v241 = *(_QWORD *)&v222[2 * v238];
                      v238 = (v238 + v239++) & v233;
                    }
                    while (v241);
                    *(_QWORD *)&v222[2 * v240] = v234;
                  }
                  ++v232;
                }
                while (v232 != v223);
                WTF::fastFree((WTF *)(v110 - 1), v231);
              }
LABEL_372:
              v227 = *((_QWORD *)v221 + 1);
              v228 = *((_QWORD *)v221 + 2);
              if (v227)
              {
                *(_QWORD *)(v227 + 16) = v228;
                v228 = *((_QWORD *)v221 + 2);
                if (v228)
                  goto LABEL_374;
              }
              else
              {
                v616 = (WTF *)*((_QWORD *)v221 + 2);
                if (v228)
LABEL_374:
                  *(_QWORD *)(v228 + 8) = v227;
              }
              WTF::fastFree(v221, (void *)a2);
LABEL_376:
              v211 = (WTF *)((char *)v211 + 8);
              v110 = v222;
              if (v211 == v212)
                goto LABEL_428;
              continue;
            }
          }
          if (!HIDWORD(v652))
          {
LABEL_427:
            v222 = v110;
LABEL_428:
            v110 = v222;
            if (!v222)
              goto LABEL_432;
            continue;
          }
          v242 = (uint64_t *)v651;
          v243 = &v651[HIDWORD(v652)];
          while (2)
          {
            if (!v110)
            {
              v222 = 0;
              goto LABEL_413;
            }
            v244 = *v242;
            v245 = *((_DWORD *)v110 - 2);
            v246 = *v242 + ~(*v242 << 32);
            v247 = (v246 ^ (v246 >> 22)) + ~((v246 ^ (v246 >> 22)) << 13);
            v248 = (9 * (v247 ^ (v247 >> 8))) ^ ((9 * (v247 ^ (v247 >> 8))) >> 15);
            v249 = v245 & (((v248 + ~(v248 << 27)) >> 31) ^ (v248 + ~((_DWORD)v248 << 27)));
            v250 = 1;
            for (m = v249; ; m = (m + v250++) & v245)
            {
              v252 = (WTF *)*((_QWORD *)v110 + m);
              if (v252 != (WTF *)-1)
              {
                if (!v252)
                {
                  v222 = v110;
                  goto LABEL_413;
                }
                if (*(_QWORD *)v252 == v244)
                  break;
              }
            }
            v253 = *((unsigned int *)v110 - 1);
            if (m == (_DWORD)v253)
            {
              v222 = v110;
              goto LABEL_413;
            }
            for (n = 1; ; ++n)
            {
              v255 = v249;
              v256 = (_QWORD *)*((_QWORD *)v110 + v249);
              if (v256 != (_QWORD *)-1)
              {
                if (!v256)
                  goto LABEL_408;
                if (*v256 == v244)
                  break;
              }
              v249 = (v255 + n) & v245;
            }
            if ((_DWORD)v253 == (_DWORD)v255)
            {
LABEL_408:
              v222 = v110;
              goto LABEL_409;
            }
            *((_QWORD *)v110 + v255) = -1;
            ++*((_DWORD *)v110 - 4);
            v259 = *((_DWORD *)v110 - 3) - 1;
            *((_DWORD *)v110 - 3) = v259;
            if (v253 < 9 || 6 * v259 >= v253)
            {
              v222 = v110;
              v68 = v620;
            }
            else
            {
              v260 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * (v253 >> 1) + 16));
              v262 = 0;
              v263 = (v253 >> 1) - 1;
              v260[2] = v263;
              v260[3] = v253 >> 1;
              v222 = v260 + 4;
              *v260 = 0;
              v260[1] = v259;
              v64 = a4;
              v68 = v620;
              do
              {
                v264 = (_QWORD *)*((_QWORD *)v110 + v262);
                if ((unint64_t)v264 + 1 >= 2)
                {
                  v265 = *v264 + ~(*v264 << 32);
                  v266 = (v265 ^ (v265 >> 22)) + ~((v265 ^ (v265 >> 22)) << 13);
                  v267 = (9 * (v266 ^ (v266 >> 8))) ^ ((9 * (v266 ^ (v266 >> 8))) >> 15);
                  v268 = v263 & (((v267 + ~(v267 << 27)) >> 31) ^ (v267 + ~((_DWORD)v267 << 27)));
                  v269 = 1;
                  do
                  {
                    v270 = v268;
                    v271 = *(_QWORD *)&v222[2 * v268];
                    v268 = (v268 + v269++) & v263;
                  }
                  while (v271);
                  *(_QWORD *)&v222[2 * v270] = v264;
                }
                ++v262;
              }
              while (v262 != v253);
              WTF::fastFree((WTF *)(v110 - 1), v261);
            }
LABEL_409:
            v257 = *((_QWORD *)v252 + 1);
            v258 = *((_QWORD *)v252 + 2);
            if (v257)
            {
              *(_QWORD *)(v257 + 16) = v258;
              v258 = *((_QWORD *)v252 + 2);
              if (v258)
                goto LABEL_411;
            }
            else
            {
              v616 = (WTF *)*((_QWORD *)v252 + 2);
              if (v258)
LABEL_411:
                *(_QWORD *)(v258 + 8) = v257;
            }
            WTF::fastFree(v252, (void *)a2);
LABEL_413:
            ++v242;
            v110 = v222;
            if (v242 == (uint64_t *)v243)
              goto LABEL_428;
            continue;
          }
        }
        v273 = v616;
        do
        {
          v274 = (WTF *)*((_QWORD *)v273 + 2);
          WTF::fastFree(v273, (void *)a2);
          v273 = v274;
        }
        while (v274);
      }
      else
      {
        v176 = 0.0;
LABEL_287:
        v178 = (float)((float)((float)v174 * 0.015625) * v176) * 64.0;
        if (v178 >= 2147483650.0)
        {
          v174 = 0x7FFFFFFF;
          if (v175)
            goto LABEL_292;
        }
        else
        {
          if (v178 > -2147483650.0)
            v174 = (int)v178;
          else
            v174 = 0x80000000;
          if (v616)
            goto LABEL_292;
        }
        HIDWORD(v629[1]) = 0;
        HIDWORD(v652) = 0;
      }
      break;
    }
    WTF::fastFree((WTF *)(v110 - 1), (void *)a2);
    v272 = 0;
    v110 = 0;
LABEL_436:
    v275 = (WTF *)v651;
    if (v651)
    {
      v651 = 0;
      LODWORD(v652) = 0;
      v278 = v272;
      WTF::fastFree(v275, (void *)a2);
      v272 = v278;
    }
    v276 = v629[0];
    if (v629[0])
    {
      v629[0] = 0;
      LODWORD(v629[1]) = 0;
      v279 = v272;
      WTF::fastFree(v276, (void *)a2);
      v272 = v279;
      if (v279)
        goto LABEL_440;
    }
    else if (v272)
    {
      do
      {
LABEL_440:
        v277 = (WTF *)*((_QWORD *)v272 + 2);
        WTF::fastFree(v272, (void *)a2);
        v272 = v277;
      }
      while (v277);
    }
    if (v110)
      WTF::fastFree((WTF *)(v110 - 1), (void *)a2);
    v70 = v597 + 1;
    if (v597 + 1 != v596)
      continue;
    break;
  }
LABEL_447:
  if (v610)
    WTF::fastFree(v610, (void *)a2);
  if (v591)
    WTF::fastFree(v591, (void *)a2);
  if (v659)
    WTF::fastFree(v659, (void *)a2);
  v280 = *((unsigned int *)v64 + 3);
  if ((_DWORD)v280)
  {
    v281 = WTF::fastMalloc((WTF *)(4 * v280 + 4));
    *(_DWORD *)v281 = v280;
    bzero((void *)(v281 + 4), 4 * v280);
    if (*((_DWORD *)v64 + 3))
    {
      v282 = v64;
      v283 = 0;
      while (1)
      {
        v284 = *v282;
        v285 = *v282 + 104 * v283;
        v286 = *(_QWORD *)(v285 + 44);
        if ((v286 & 0xFF00000000) == 0)
          break;
        if (v280 <= v283)
        {
          __break(0xC471u);
          JUMPOUT(0x195E73118);
        }
LABEL_495:
        *(_DWORD *)(v281 + 4 + 4 * v283++) = v286;
        v282 = a4;
        if (v283 >= *((unsigned int *)a4 + 3))
        {
          v64 = a4;
          v68 = v620;
          goto LABEL_516;
        }
      }
      v287 = *(WebCore::Layout::Box **)v285;
      if (WebCore::Layout::Box::establishesInlineFormattingContext(*(WebCore::Layout::Box **)v285))
      {
        v659 = v287;
        ++*((_DWORD *)v287 + 2);
        v660 = 0;
        v661 = 0;
        v662 = 0;
        v663 = (*((_DWORD *)v287 + 14) & 0x4000000) == 0;
        v651 = &v659;
        LOBYTE(v652) = 0;
        v653 = 0;
        v654 = 0;
        v655 = 0;
        v656 = 0;
        v658 = 0;
        v288 = *(WTF **)(*(_QWORD *)v601 + 8);
        v629[0] = v287;
        v629[1] = v288;
        v630 = v287;
        ++*((_DWORD *)v287 + 2);
        v631 = v288;
        v632 = &v659;
        v633 = v629;
        v634 = v629;
        v635 = WebCore::Layout::LayoutState::inlineContentCache(v288, (uint64_t)v287);
        v636 = &v651;
        v639 = 0;
        LOBYTE(v640) = 0;
        v641 = 0;
        v645 = 0;
        LOBYTE(v646) = 0;
        v648 = 0;
        v650 = 0;
        v637 = 0;
        v638 = 0;
        v642 = 0;
        v643 = 0;
        v644 = 0;
        if (*(__int16 *)(*((_QWORD *)v629[0] + 5) + 300) != -1)
        {
          v640 = *(__int16 *)(*((_QWORD *)v629[0] + 5) + 300);
          v641 = 1;
        }
        v649 = 1;
        if (!*((_DWORD *)v288 + 12))
          v650 = 1;
        if (*(_DWORD *)v620 <= v283)
        {
          __break(0xC471u);
          JUMPOUT(0x195E731A0);
        }
        v290 = *((unsigned int *)v620 + v283 + 1);
        v621[0] = 2;
        v622 = v290 << 32;
        v623 = 0;
        WebCore::Layout::InlineFormattingContext::layout((uint64_t *)v629, (uint64_t)v621, 0, v289, (uint64_t)&v624);
        if (!HIDWORD(v625))
        {
          __break(0xC471u);
          JUMPOUT(0x195E73390);
        }
        v292 = (float)(*((float *)v624 + 38 * HIDWORD(v625) - 29) + *((float *)v624 + 38 * HIDWORD(v625) - 27)) * 64.0;
        if (v292 >= 2147483650.0)
        {
          LODWORD(v286) = 0x7FFFFFFF;
        }
        else if (v292 <= -2147483650.0)
        {
          LODWORD(v286) = 0x80000000;
        }
        else
        {
          LODWORD(v286) = (int)v292;
        }
        WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v626, v291);
        v293 = v624;
        if (v624)
        {
          v624 = 0;
          LODWORD(v625) = 0;
          WTF::fastFree(v293, (void *)a2);
        }
        if (v648)
        {
          v294 = v646;
          if (v646)
          {
            v646 = 0;
            v647 = 0;
            WTF::fastFree(v294, (void *)a2);
          }
        }
        if (v643)
          WTF::fastFree((WTF *)(v643 - 16), (void *)a2);
        v295 = v630;
        v630 = 0;
        if (v295)
        {
          v296 = *((_DWORD *)v295 + 2);
          if (!v296)
          {
            __break(0xC471u);
            JUMPOUT(0x195E731C0);
          }
          *((_DWORD *)v295 + 2) = v296 - 1;
        }
        if (v658)
        {
          v297 = v657;
          v657 = 0;
          if (v297)
          {
            if (*(_DWORD *)v297 == 1)
            {
              WebCore::Font::~Font(v297);
              WTF::fastFree(v303, v304);
            }
            else
            {
              --*(_DWORD *)v297;
            }
          }
        }
        v298 = (WTF *)v660;
        if (HIDWORD(v661))
        {
          v305 = 120 * HIDWORD(v661);
          v306 = v660 + 12;
          do
          {
            v307 = *v306;
            *v306 = 0;
            if (v307)
            {
              if (v307[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v307 + 8))(v307);
              else
                --v307[2];
            }
            v308 = (uint64_t)*(v306 - 12);
            if (v308)
            {
              v309 = *(_DWORD *)(v308 + 8);
              if (!v309)
              {
                __break(0xC471u);
                JUMPOUT(0x195E73278);
              }
              *(_DWORD *)(v308 + 8) = v309 - 1;
            }
            v306 += 15;
            v305 -= 120;
          }
          while (v305);
          v298 = (WTF *)v660;
          if (v660)
            goto LABEL_509;
        }
        else
        {
          if (!v660)
            goto LABEL_485;
LABEL_509:
          v660 = 0;
          LODWORD(v661) = 0;
          WTF::fastFree(v298, (void *)a2);
        }
LABEL_485:
        v299 = v659;
        v659 = 0;
        if (v299)
        {
          v300 = *((_DWORD *)v299 + 2);
          if (!v300)
          {
            __break(0xC471u);
            JUMPOUT(0x195E731E0);
          }
          *((_DWORD *)v299 + 2) = v300 - 1;
        }
        v287 = *(WebCore::Layout::Box **)v285;
      }
      else
      {
        LODWORD(v286) = 0;
      }
      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v287 + 3) + 8) + 68) & 4) != 0)
      {
        v301 = *(_DWORD *)(v284 + 104 * v283 + 92);
        v345 = __OFADD__((_DWORD)v286, v301);
        v302 = v286 + v301;
        if (v345)
          LODWORD(v286) = (v286 >> 31) + 0x7FFFFFFF;
        else
          LODWORD(v286) = v302;
      }
      LODWORD(v280) = *(_DWORD *)v281;
      if (*(_DWORD *)v281 <= v283)
      {
        __break(0xC471u);
        JUMPOUT(0x195E73178);
      }
      goto LABEL_495;
    }
    v68 = v620;
  }
  else
  {
    v281 = 0;
  }
LABEL_516:
  if (v596)
  {
    if (v596 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x195E73398);
    }
    v609 = (WTF *)WTF::fastMalloc((WTF *)(4 * v596));
    bzero(v609, 4 * v596);
  }
  else
  {
    v609 = 0;
  }
  v310 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v601 + 24) + 32);
  v311 = *(_QWORD *)(v310 + 16);
  if ((*(_BYTE *)(v311 + 20) & 0xC) != 0 || *(_BYTE *)(a3 + 48) == 0)
  {
    v313 = v609;
    if (v596)
    {
      v314 = 0;
      v315 = *(unsigned __int8 *)(a3 + 56);
      v316 = *(unsigned __int8 *)(a3 + 64);
      do
      {
        v317 = (unint64_t *)((char *)v605 + 16 * v314);
        v318 = *v317;
        v319 = v317[1];
        if (*v317 >= v319)
        {
          v320 = 0;
          v323 = 0;
        }
        else
        {
          v320 = 0;
          v321 = *((unsigned int *)v64 + 3);
          if (v318 > v321)
            v321 = v318;
          v322 = (int32x2_t *)(*v64 + 104 * v318 + 52);
          v323 = 0;
          do
          {
            if (v321 == v318)
            {
              __break(0xC471u);
              JUMPOUT(0x195E73308);
            }
            if (!v322[6].i8[1]
              && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&v322[-7] + 4) + 24) + 32) + 125) & 0xF) == 4
              && v322[3].i8[4]
              && v322[4].i8[4])
            {
              v323 = vmax_s32(v323, *v322);
            }
            else
            {
              if (*(_DWORD *)v281 <= v318)
              {
                __break(0xC471u);
                JUMPOUT(0x195E72B74);
              }
              if (v322[3].i8[4])
                v324 = v322[3].u32[0];
              else
                v324 = 0;
              if (v322[4].i8[4])
                v325 = v322[4].i32[0];
              else
                v325 = 0;
              v345 = __OFADD__(v324, v325);
              v326 = v324 + v325;
              v327 = (v324 >> 31) + 0x7FFFFFFF;
              if (!v345)
                v327 = v326;
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&v322[-7] + 4) + 24) + 8) + 68) & 4) == 0)
              {
                v328 = v322[5].i32[0];
                v345 = __OFADD__(v327, v328);
                v329 = v327 + v328;
                v327 = (v327 >> 31) + 0x7FFFFFFF;
                if (!v345)
                  v327 = v329;
              }
              v330 = *(_DWORD *)(v281 + 4 + 4 * v318);
              v345 = __OFADD__(v327, v330);
              v331 = v327 + v330;
              v332 = (v327 >> 31) + 0x7FFFFFFF;
              if (!v345)
                v332 = v331;
              if (v320 <= v332)
                v320 = v332;
            }
            ++v318;
            v322 += 13;
          }
          while (v319 != v318);
        }
        if (__OFADD__(v323.i32[0], v323.i32[1]))
          v333 = 0x7FFFFFFF;
        else
          v333 = v323.i32[0] + v323.i32[1];
        a2 = (uint64_t)v609 + 4 * v314;
        if (v320 <= v333)
          v320 = v333;
        *(_DWORD *)a2 = v320;
        if ((*(_BYTE *)(v311 + 20) & 0xC) == 0)
        {
          if (v315)
            v334 = (int *)(a3 + 52);
          else
            v334 = (int *)((char *)v609 + 4 * v314);
          v335 = *v334;
          if (v316)
            v336 = (int *)(a3 + 60);
          else
            v336 = (int *)((char *)v609 + 4 * v314);
          v337 = *v336;
          if (v335 > v320)
            v320 = v335;
          if (v320 >= v337)
            v320 = v337;
          *(_DWORD *)a2 = v320;
        }
        ++v314;
      }
      while (v314 != v596);
    }
  }
  else
  {
    v313 = v609;
    if (!v596)
    {
      __break(0xC471u);
      JUMPOUT(0x195E733A0);
    }
    *(_DWORD *)v609 = *(_DWORD *)v589;
  }
  v338 = *(unsigned __int8 *)(v310 + 120);
  v339 = (v338 >> 4) & 7;
  if ((v339 == 4 || !v339 && (v338 & 0xF) == 0) && *(_BYTE *)(a3 + 48))
  {
    v340 = v596;
    if (v596)
    {
      v340 = 0;
      v341 = v313;
      v342 = v596;
      do
      {
        v343 = *(_DWORD *)v341;
        v341 = (WTF *)((char *)v341 + 4);
        v345 = __OFADD__(v340, v343);
        v344 = v340 + v343;
        v340 = (v340 >> 31) + 0x7FFFFFFF;
        if (!v345)
          v340 = v344;
        --v342;
      }
      while (v342);
    }
    v345 = __OFSUB__(*(_DWORD *)v589, v340);
    v346 = *(_DWORD *)v589 - v340;
    if (!((v346 < 0) ^ v345 | (v346 == 0)))
    {
      v347 = (*(_DWORD *)v589 >> 31) + 0x7FFFFFFF;
      if (!v345)
        v347 = v346;
      v348 = (unint64_t)v596 << 6;
      if (v348 >= 0x7FFFFFFF)
        v348 = 0x7FFFFFFFLL;
      v349 = ((uint64_t)v347 << 6) / (uint64_t)v348;
      if (v349 <= (uint64_t)0xFFFFFFFF80000000)
        v349 = 0xFFFFFFFF80000000;
      if (v349 >= 0x7FFFFFFF)
        LODWORD(v349) = 0x7FFFFFFF;
      if (v596)
      {
        v350 = (int *)v313;
        v351 = v596;
        do
        {
          v352 = (*v350 >> 31) + 0x7FFFFFFF;
          if (!__OFADD__(*v350, (_DWORD)v349))
            v352 = *v350 + v349;
          *v350++ = v352;
          --v351;
        }
        while (v351);
      }
    }
  }
  v593 = (WTF *)(4 * v596);
  v353 = *((unsigned int *)v64 + 3);
  if ((_DWORD)v353)
  {
    v354 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v353 + 4));
    *v354 = v353;
    v355 = 4 * v353;
    v356 = (WTF *)v354;
    bzero(v354 + 1, v355);
    v313 = v609;
  }
  else
  {
    v356 = 0;
  }
  if (v596)
  {
    v357 = 0;
    v358 = (_DWORD *)((char *)v356 + 4);
    do
    {
      if (v357 == v596)
      {
        __break(0xC471u);
        JUMPOUT(0x195E73360);
      }
      v359 = (unint64_t *)((char *)v605 + 16 * v357);
      v360 = *v359;
      v361 = v359[1];
      if (v361 <= *v359)
        v362 = *v359;
      else
        v362 = v359[1];
      if (v360 < v361)
      {
        v363 = (_BYTE *)(*v64 + 104 * v360 + 96);
        do
        {
          if (v360 >= *((unsigned int *)v64 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195E732F0);
          }
          v364 = *(_QWORD *)(*((_QWORD *)v363 - 12) + 24);
          v365 = *(_BYTE *)(*(_QWORD *)(v364 + 32) + 125) & 0xF;
          if (v365 == 1)
            LOBYTE(v365) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)v601 + 24) + 32) + 124) & 0xF;
          v366 = (v365 & 0xE) != 2 || *v363 == 0;
          if (!v366 && *(v363 - 16) && *(v363 - 8))
          {
            v367 = *((_DWORD *)v363 - 5);
            v368 = *((_DWORD *)v363 - 3);
            v345 = __OFADD__(v367, v368);
            v369 = v367 + v368;
            v370 = (v367 >> 31) + 0x7FFFFFFF;
            v371 = *((_DWORD *)v313 + v357);
            if (!v345)
              v370 = v369;
            v345 = __OFSUB__(v371, v370);
            v372 = v371 - v370;
            if (v345)
              v372 = (v371 >> 31) + 0x7FFFFFFF;
            if ((*(_BYTE *)(*(_QWORD *)(v364 + 8) + 68) & 4) == 0)
            {
              v373 = *((_DWORD *)v363 - 1);
              v345 = __OFSUB__(v372, v373);
              v374 = v372 - v373;
              v372 = (v372 >> 31) + 0x7FFFFFFF;
              if (!v345)
                v372 = v374;
            }
            v375 = v372;
            if (*(v363 - 32))
              v375 = *((_DWORD *)v363 - 9);
            v376 = v372;
            if (*(v363 - 24))
              v376 = *((_DWORD *)v363 - 7);
            a2 = *(unsigned int *)v356;
            if (a2 <= v360)
            {
              __break(0xC471u);
              JUMPOUT(0x195E730B8);
            }
            if (v376 > v372)
              v372 = v376;
            if (v372 < v375)
              v375 = v372;
            v358[v360] = v375;
          }
          else
          {
            if (*(_DWORD *)v281 <= v360)
            {
              __break(0xC471u);
              JUMPOUT(0x195E72B34);
            }
            if (*(_DWORD *)v356 <= v360)
            {
              __break(0xC471u);
              JUMPOUT(0x195E72B54);
            }
            v358[v360] = *(_DWORD *)(v281 + 4 + 4 * v360);
          }
          ++v360;
          v363 += 104;
        }
        while (v362 != v360);
      }
      ++v357;
    }
    while (v357 < v596);
  }
  if (v588)
  {
    WTF::fastFree(v588, (void *)a2);
    v313 = v609;
  }
  if (v281)
  {
    WTF::fastFree((WTF *)v281, (void *)a2);
    v313 = v609;
  }
  v377 = *((unsigned int *)v64 + 3);
  v617 = v356;
  if (!(_DWORD)v377)
  {
    v592 = 0;
LABEL_652:
    v590 = 0;
    v382 = 0;
    v380 = v601;
    v604 = v601[2];
    v383 = v596;
    goto LABEL_658;
  }
  v592 = (WTF *)WTF::fastMalloc((WTF *)(12 * v377 + 4));
  *(_DWORD *)v592 = v377;
  bzero((char *)v592 + 4, 12 * ((12 * v377 - 12) / 0xCuLL) + 12);
  v378 = *((unsigned int *)v64 + 3);
  if (!(_DWORD)v378)
  {
    v313 = v609;
    goto LABEL_652;
  }
  v590 = (WTF *)WTF::fastMalloc((WTF *)(12 * v378 + 4));
  *(_DWORD *)v590 = v378;
  v64 = a4;
  bzero((char *)v590 + 4, 12 * ((12 * v378 - 12) / 0xCuLL) + 12);
  v379 = *((unsigned int *)a4 + 3);
  v380 = v601;
  v604 = v601[2];
  if ((_DWORD)v379)
  {
    v381 = (_DWORD *)WTF::fastMalloc((WTF *)(12 * v379 + 4));
    *v381 = v379;
    v380 = v601;
    bzero(v381 + 1, 12 * ((12 * v379 - 12) / 0xCuLL) + 12);
    v382 = (WTF *)v381;
  }
  else
  {
    v382 = 0;
  }
  v383 = v596;
  v313 = v609;
LABEL_658:
  v615 = v382;
  if (v383)
  {
    v384 = (_DWORD *)((char *)v382 + 4);
    v385 = v68 + 1;
    v594 = (_DWORD *)((char *)v382 + 8);
    v386 = (unint64_t *)v605;
    while (1)
    {
      v388 = *v386;
      v387 = v386[1];
      v629[0] = 0;
      v629[1] = 0;
      v651 = (WTF **)v388;
      v598 = v386;
      v600 = v387 - v388;
      v611 = (WTF *)v388;
      v389 = 0;
      v390 = 0;
      v391 = 0;
      if (v387 > v388)
      {
        v392 = v388;
        v607 = (WTF *)v387;
        do
        {
          if (v392 >= *((unsigned int *)v64 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195E73310);
          }
          v393 = *v64;
          v394 = v393 + 104 * v392;
          v395 = *(_DWORD *)(v394 + 24);
          v396 = *(unsigned __int8 *)(v394 + 28);
          v397 = *(_DWORD *)(v394 + 32);
          v398 = *(unsigned __int8 *)(v394 + 36);
          if (*(_BYTE *)(v394 + 28))
            v399 = v398 == 0;
          else
            v399 = 1;
          if (v399)
          {
            v400 = HIDWORD(v629[1]);
            if (HIDWORD(v629[1]) == LODWORD(v629[1]))
            {
              v401 = v384;
              v402 = v385;
              v403 = v391;
              v613 = *(_DWORD *)(v394 + 32);
              v404 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v629, HIDWORD(v629[1]) + 1, (unint64_t)&v651);
              v397 = v613;
              v391 = v403;
              v387 = (unint64_t)v607;
              v313 = v609;
              v385 = v402;
              v388 = (unint64_t)v611;
              v384 = v401;
              v382 = v615;
              v405 = (_QWORD *)v404;
              v406 = HIDWORD(v629[1]);
              v390 = v629[0];
              *((_QWORD *)v629[0] + HIDWORD(v629[1])) = *v405;
              v400 = v406;
            }
            else
            {
              *((_QWORD *)v390 + HIDWORD(v629[1])) = v392;
            }
            HIDWORD(v629[1]) = v400 + 1;
            if (v396)
              v408 = v391;
            else
              v408 = v391 + 1;
            if (v398)
              v391 = v408;
            else
              v391 = v408 + 1;
            v407 = (unint64_t)v651;
          }
          else
          {
            v407 = v392;
          }
          if (v396)
            v409 = v395;
          else
            v409 = 0;
          if (*(_DWORD *)v382 <= v407)
          {
            __break(0xC471u);
            JUMPOUT(0x195E72B94);
          }
          v410 = &v384[3 * v407];
          if (!v398)
            v397 = 0;
          v410[1] = v409;
          v410[2] = v397;
          if (*(_DWORD *)v620 <= v407)
          {
            __break(0xC471u);
            JUMPOUT(0x195E72BB4);
          }
          v345 = __OFADD__(v409, v397);
          v411 = v409 + v397;
          v412 = (v409 >> 31) + 0x7FFFFFFF;
          if (!v345)
            v412 = v411;
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v394 + 24) + 8) + 68) & 4) == 0)
          {
            v413 = *(_DWORD *)(v393 + 104 * v392 + 40);
            v345 = __OFADD__(v412, v413);
            v414 = v412 + v413;
            v412 = (v412 >> 31) + 0x7FFFFFFF;
            if (!v345)
              v412 = v414;
          }
          v64 = a4;
          v68 = v620;
          v415 = v385[v407];
          v345 = __OFADD__(v412, v415);
          v416 = v412 + v415;
          v417 = (v412 >> 31) + 0x7FFFFFFF;
          if (v345)
            v416 = v417;
          v345 = __OFADD__(v389, v416);
          v418 = v389 + v416;
          if (v345)
            v389 = (v389 >> 31) + 0x7FFFFFFF;
          else
            v389 = v418;
          v392 = v407 + 1;
          v651 = (WTF **)(v407 + 1);
        }
        while (v407 + 1 < v387);
      }
      v419 = v604 - v389;
      if (__OFSUB__(v604, v389))
        v419 = (v604 >> 31) + 0x7FFFFFFF;
      v380 = v601;
      if (v391 && v419 >= 1)
      {
        v420 = v391 << 6;
        if ((unint64_t)(v391 << 6) >= 0x7FFFFFFF)
          v420 = 0x7FFFFFFFLL;
        v421 = ((unint64_t)v419 << 6) / v420;
        if (v421 >= 0x7FFFFFFF)
          LODWORD(v421) = 0x7FFFFFFF;
        v389 = v604;
        if (HIDWORD(v629[1]))
        {
          v422 = *v64;
          v423 = 8 * HIDWORD(v629[1]);
          v424 = v390;
          do
          {
            v425 = *(_QWORD *)v424;
            if (*(_QWORD *)v424 >= (unint64_t)*((unsigned int *)v64 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x195E73340);
            }
            if (!*(_BYTE *)(v422 + 104 * v425 + 28))
            {
              if (*(_DWORD *)v382 <= v425)
              {
                __break(0xC471u);
                JUMPOUT(0x195E730D8);
              }
              v384[3 * v425 + 1] = v421;
            }
            if (!*(_BYTE *)(v422 + 104 * v425 + 36))
            {
              if (*(_DWORD *)v382 <= v425)
              {
                __break(0xC471u);
                JUMPOUT(0x195E730F8);
              }
              v384[3 * v425 + 2] = v421;
            }
            v424 = (WTF *)((char *)v424 + 8);
            v423 -= 8;
          }
          while (v423);
          v389 = v604;
        }
      }
      if (v390)
      {
        v629[0] = 0;
        LODWORD(v629[1]) = 0;
        v440 = v384;
        v441 = v385;
        v442 = v387;
        WTF::fastFree(v390, v382);
        v387 = v442;
        v385 = v441;
        v313 = v609;
        v388 = (unint64_t)v611;
        v384 = v440;
        v382 = v615;
      }
      v426 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v601 + 24) + 32);
      v427 = *(unsigned __int16 *)(v426 + 122);
      v428 = (v427 >> 4) & 7;
      if (v428 == 1)
      {
        v433 = 0;
        v429 = v600;
      }
      else
      {
        v429 = v600;
        if (v428 == 3)
        {
          v434 = (v600 << 6) + 64;
          if ((unint64_t)v434 >= 0x7FFFFFFF)
            v434 = 0x7FFFFFFFLL;
          v435 = v604 - v389;
          if (__OFSUB__(v604, v389))
            v435 = (v604 >> 31) + 0x7FFFFFFF;
          if (v389 >= (int)v604)
            v434 = 128;
          v436 = ((uint64_t)v435 << 6) / v434;
          if (v436 <= (uint64_t)0xFFFFFFFF80000000)
            v436 = 0xFFFFFFFF80000000;
          v433 = v436 >= 0x7FFFFFFF ? 0x7FFFFFFF : v436;
        }
        else if (v428 == 2)
        {
          v430 = v600 << 6;
          if (v600 << 6 >= 0x7FFFFFFF)
            v430 = 0x7FFFFFFFLL;
          v431 = v604 - v389;
          if (__OFSUB__(v604, v389))
            v431 = (v604 >> 31) + 0x7FFFFFFF;
          if (v389 >= (int)v604)
            v430 = 64;
          v432 = ((uint64_t)v431 << 6) / v430;
          if (v432 <= (uint64_t)0xFFFFFFFF80000000)
            v432 = 0xFFFFFFFF80000000;
          if (v432 >= 0x7FFFFFFF)
            LODWORD(v432) = 0x7FFFFFFF;
          v433 = (int)v432 / 2;
        }
        else
        {
          v433 = 0;
          v437 = *(_BYTE *)(*(_QWORD *)(v426 + 16) + 20);
          v438 = v427 & 0xF;
          if ((v427 & 0xE) == 8)
            v439 = 4;
          else
            v439 = v427 & 0xF;
          if ((v437 & 2) == 0)
            v439 = v438;
          switch(v439)
          {
            case 3:
              if (v389 >= 0)
                v443 = v389;
              else
                v443 = v389 + 1;
              v433 = (int)v604 / 2 - (v443 >> 1);
              break;
            case 4:
            case 8:
              if ((v437 & 1) == 0)
                goto LABEL_758;
              goto LABEL_754;
            case 5:
            case 9:
              if ((v437 & 1) == 0)
                goto LABEL_754;
LABEL_758:
              v433 = 0;
              break;
            case 7:
LABEL_754:
              v433 = v604 - v389;
              if (__OFSUB__(v604, v389))
                v433 = (v604 >> 31) + 0x7FFFFFFF;
              break;
            default:
              break;
          }
        }
      }
      v444 = *(_DWORD *)v382;
      if (*(_DWORD *)v382 <= v388)
      {
        __break(0xC471u);
        JUMPOUT(0x195E73138);
      }
      v445 = &v384[3 * v388];
      v446 = v445[1];
      v447 = v433 + v446;
      if (__OFADD__(v433, v446))
        v447 = (v433 >> 31) + 0x7FFFFFFF;
      *v445 = v447;
      if (v388 >= *((unsigned int *)v64 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x195E73368);
      }
      if (*v68 <= v388)
      {
        __break(0xC471u);
        JUMPOUT(0x195E73158);
      }
      v448 = *v64;
      v449 = v384[3 * v388 + 2];
      v345 = __OFADD__(v446, v449);
      v450 = v446 + v449;
      if (v345)
        v450 = (v446 >> 31) + 0x7FFFFFFF;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v64 + 104 * v388) + 24) + 8) + 68) & 4) == 0)
      {
        v451 = *(_DWORD *)(v448 + 104 * v388 + 40);
        v345 = __OFADD__(v450, v451);
        v452 = v450 + v451;
        v450 = (v450 >> 31) + 0x7FFFFFFF;
        if (!v345)
          v450 = v452;
      }
      v453 = v385[v388];
      v345 = __OFADD__(v450, v453);
      v454 = v450 + v453;
      v455 = (v450 >> 31) + 0x7FFFFFFF;
      if (v345)
        v454 = v455;
      v345 = __OFSUB__(v454, v446);
      v456 = v454 - v446;
      v457 = (v454 >> 31) + 0x7FFFFFFF;
      if (!v345)
        v457 = v456;
      v345 = __OFADD__(v447, v457);
      v458 = v447 + v457;
      v459 = (v447 >> 31) + 0x7FFFFFFF;
      if (!v345)
        v459 = v458;
      if (v428 == 3)
        break;
      if (v428 == 2)
      {
        v462 = v604 - v389;
        if (__OFSUB__(v604, v389))
          v462 = (v604 >> 31) + 0x7FFFFFFF;
        v463 = v429 << 6;
LABEL_797:
        v461 = v598;
LABEL_798:
        if (v463 >= 0x7FFFFFFF)
          v463 = 0x7FFFFFFFLL;
        v460 = ((unint64_t)(v462 & ~(v462 >> 31)) << 6) / v463;
        if (v460 >= 0x7FFFFFFF)
          LODWORD(v460) = 0x7FFFFFFF;
        goto LABEL_802;
      }
      if (v428 == 1 && v429 != 1)
      {
        v462 = v604 - v389;
        if (__OFSUB__(v604, v389))
          v462 = (v604 >> 31) + 0x7FFFFFFF;
        v463 = (v429 << 6) - 64;
        goto LABEL_797;
      }
      LODWORD(v460) = 0;
      v461 = v598;
LABEL_802:
      if (v388 + 1 < v387)
      {
        v464 = 0;
        v465 = (_DWORD *)(v448 + 104 * v388 + 144);
        v466 = ~v388 + v387;
        v467 = &v594[3 * (v388 + 1)];
        do
        {
          v468 = v388 + v464 + 1;
          v345 = __OFADD__(v459, (_DWORD)v460);
          v469 = v459 + v460;
          v470 = (v459 >> 31) + 0x7FFFFFFF;
          if (!v345)
            v470 = v469;
          if (v444 <= v468)
          {
            __break(0xC471u);
            JUMPOUT(0x195E72BD4);
          }
          v471 = *v467;
          v345 = __OFADD__(v470, *v467);
          v472 = v470 + *v467;
          v473 = (v470 >> 31) + 0x7FFFFFFF;
          if (!v345)
            v473 = v472;
          *(v467 - 1) = v473;
          if (v468 >= *((unsigned int *)v64 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195E73318);
          }
          if (*v68 <= v468)
          {
            __break(0xC471u);
            JUMPOUT(0x195E72BF4);
          }
          v474 = v467[1];
          v345 = __OFADD__(v471, v474);
          v475 = v471 + v474;
          if (v345)
            v475 = (v471 >> 31) + 0x7FFFFFFF;
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v465 - 5) + 24) + 8) + 68) & 4) == 0)
          {
            v345 = __OFADD__(v475, *v465);
            v476 = v475 + *v465;
            v475 = (v475 >> 31) + 0x7FFFFFFF;
            if (!v345)
              v475 = v476;
          }
          v477 = v385[(v388 + 1) + v464];
          v345 = __OFADD__(v475, v477);
          v478 = v475 + v477;
          v479 = (v475 >> 31) + 0x7FFFFFFF;
          if (!v345)
            v479 = v478;
          v345 = __OFSUB__(v479, v471);
          v480 = v479 - v471;
          v481 = (v479 >> 31) + 0x7FFFFFFF;
          if (v345)
            v480 = v481;
          v345 = __OFADD__(v473, v480);
          v482 = v473 + v480;
          v459 = (v473 >> 31) + 0x7FFFFFFF;
          if (!v345)
            v459 = v482;
          v465 += 26;
          ++v464;
          v467 += 3;
        }
        while (v466 != v464);
      }
      v386 = v461 + 2;
      if (v386 == (unint64_t *)((char *)v605 + 16 * v596))
        goto LABEL_826;
    }
    v462 = v604 - v389;
    if (__OFSUB__(v604, v389))
      v462 = (v604 >> 31) + 0x7FFFFFFF;
    v461 = v598;
    v463 = (v429 << 6) + 64;
    goto LABEL_798;
  }
LABEL_826:
  if (v592)
  {
    WTF::fastFree(v592, v382);
    v313 = v609;
  }
  v483 = *((unsigned int *)v64 + 3);
  v484 = v617;
  if ((_DWORD)v483)
  {
    v485 = WTF::fastMalloc((WTF *)(12 * v483 + 4));
    *(_DWORD *)v485 = v483;
    v380 = v601;
    bzero((void *)(v485 + 4), 12 * ((12 * v483 - 12) / 0xCuLL) + 12);
    v313 = v609;
  }
  else
  {
    v485 = 0;
  }
  if (v596)
  {
    v486 = 0;
    v487 = (char *)v617 + 4;
    do
    {
      v488 = (unint64_t *)((char *)v605 + 16 * v486);
      v489 = *v488;
      v490 = v488[1];
      if (v490 > v489)
      {
        v491 = 0;
        v492 = v489;
        v493 = 12 * v489;
        v494 = (_DWORD *)(*v64 + 104 * v489 + 92);
        v495 = (int *)(v485 + 12 + v493);
        do
        {
          v496 = v489 + v491;
          if (v489 + v491 >= *((unsigned int *)v64 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195E73330);
          }
          v497 = *((_QWORD *)v494 - 2);
          v498 = *(v494 - 2);
          v499 = *((unsigned __int8 *)v494 - 4);
          v500 = v497 & 0xFF00000000;
          if ((v497 & 0xFF00000000) == 0 || v499 == 0)
          {
            if (*(_DWORD *)v484 <= v496)
            {
              __break(0xC471u);
              JUMPOUT(0x195E7308CLL);
            }
            if (v500)
              v502 = *((_QWORD *)v494 - 2);
            else
              v502 = 0;
            if (*((_BYTE *)v494 - 4))
              v503 = *(v494 - 2);
            else
              v503 = 0;
            v345 = __OFADD__(v502, v503);
            v504 = v502 + v503;
            v505 = (v502 >> 31) + 0x7FFFFFFF;
            if (!v345)
              v505 = v504;
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v494 - 23) + 24) + 8) + 68) & 4) == 0)
            {
              v345 = __OFADD__(v505, *v494);
              v506 = v505 + *v494;
              v505 = (v505 >> 31) + 0x7FFFFFFF;
              if (!v345)
                v505 = v506;
            }
            v507 = *(_DWORD *)&v487[4 * v489 + 4 * v491];
            v345 = __OFADD__(v505, v507);
            v508 = v505 + v507;
            v509 = (v505 >> 31) + 0x7FFFFFFF;
            if (!v345)
              v509 = v508;
            v510 = *((_DWORD *)v313 + v486);
            v345 = __OFSUB__(v510, v509);
            v511 = v510 - v509;
            if (v345)
              v511 = (v510 >> 31) + 0x7FFFFFFF;
            if (v511 < 1)
            {
              if (__OFSUB__(v510, v507))
                v498 = (v510 >> 31) + 0x7FFFFFFF;
              else
                v498 = v510 - v507;
              if (v500)
                LODWORD(v497) = v498;
              else
                LODWORD(v497) = 0;
              if (v500)
                v498 = 0;
            }
            else
            {
              v512 = v499 == 0;
              if (*((_BYTE *)v494 - 4))
                v513 = v511;
              else
                v513 = v511 >> 1;
              if (v512)
                v498 = v511 >> 1;
              if (v500)
                v498 = v511;
              else
                LODWORD(v497) = v513;
            }
            v484 = v617;
            v64 = a4;
          }
          else
          {
            v64 = a4;
          }
          v514 = *(_DWORD *)v485;
          if (*(_DWORD *)v485 <= v496)
          {
            __break(0xC471u);
            JUMPOUT(0x195E72C14);
          }
          *(v495 - 1) = v497;
          *v495 = v498;
          v494 += 26;
          ++v491;
          v495 += 3;
        }
        while (v490 - v489 != v491);
        v515 = (_DWORD *)(*v64 + 104 * v489);
        v382 = (WTF *)(v485 + 8 + v493);
        v380 = v601;
        do
        {
          if (v489 >= *((unsigned int *)v64 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195E73338);
          }
          if (*(_DWORD *)v484 <= v492)
          {
            __break(0xC471u);
            JUMPOUT(0x195E72C34);
          }
          if (v514 <= v492)
          {
            __break(0xC471u);
            JUMPOUT(0x195E72C54);
          }
          v516 = *(_DWORD *)v382;
          v517 = *((_DWORD *)v382 + 1);
          v345 = __OFADD__(*(_DWORD *)v382, v517);
          v518 = *(_DWORD *)v382 + v517;
          if (v345)
            v518 = (*(_DWORD *)v382 >> 31) + 0x7FFFFFFF;
          v519 = *(_QWORD *)(*(_QWORD *)v515 + 24);
          if ((*(_BYTE *)(*(_QWORD *)(v519 + 8) + 68) & 4) == 0)
          {
            v520 = v515[23];
            v345 = __OFADD__(v518, v520);
            v521 = v518 + v520;
            v518 = (v518 >> 31) + 0x7FFFFFFF;
            if (!v345)
              v518 = v521;
          }
          v522 = *(_DWORD *)&v487[4 * v492];
          v345 = __OFADD__(v518, v522);
          v523 = v518 + v522;
          v524 = (v518 >> 31) + 0x7FFFFFFF;
          if (!v345)
            v524 = v523;
          v525 = *(_BYTE *)(*(_QWORD *)(v519 + 32) + 125);
          if ((v525 & 0xF) == 1)
            v525 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)v601 + 24) + 32) + 124);
          v526 = v525 & 0xF;
          if (v526 == 12 || v526 == 8)
          {
            v528 = *((_DWORD *)v313 + v486);
            v345 = __OFSUB__(v528, v524);
            v529 = v528 - v524;
            v530 = (v528 >> 31) + 0x7FFFFFFF;
            if (v345)
              v529 = v530;
          }
          else if (v526 == 6)
          {
            v529 = *((_DWORD *)v313 + v486) / 2 - v524 / 2;
          }
          else
          {
            v529 = 0;
          }
          v345 = __OFADD__(v529, v516);
          v531 = v529 + v516;
          v532 = (v529 >> 31) + 0x7FFFFFFF;
          if (v345)
            v531 = v532;
          *((_DWORD *)v382 - 1) = v531;
          ++v489;
          v515 += 26;
          v382 = (WTF *)((char *)v382 + 12);
          ++v492;
        }
        while (v490 != v489);
      }
      ++v486;
    }
    while (v486 != v596);
  }
  if (v590)
  {
    WTF::fastFree(v590, v382);
    v313 = v609;
  }
  v533 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v380 + 24) + 32);
  if ((*(_BYTE *)(*(_QWORD *)(v533 + 16) + 20) & 0xC) != 0)
  {
    if (v596)
    {
      v534 = 0;
      v535 = 4 * v596;
      v536 = v313;
      do
      {
        v537 = *(_DWORD *)v536;
        v536 = (WTF *)((char *)v536 + 4);
        v538 = v534 + v537;
        if (__OFADD__(v534, v537))
          v534 = (v534 >> 31) + 0x7FFFFFFF;
        else
          v534 = v538;
        v535 -= 4;
      }
      while (v535);
    }
    else
    {
      v534 = 0;
    }
    if (*(_BYTE *)(a3 + 48))
      v541 = *(_DWORD *)(a3 + 44);
    else
      v541 = v534;
    v542 = __OFSUB__(v541, v534);
    v543 = (v541 >> 31) + 0x7FFFFFFF;
    if (!__OFSUB__(v541, v534))
      v543 = v541 - v534;
    if (v543 >= 1)
    {
      v544 = 0;
      switch((*(unsigned __int8 *)(v533 + 120) >> 4) & 7)
      {
        case 0:
        case 4:
          v545 = v596;
          v546 = (unint64_t)v596 << 6;
          if (v546 >= 0x7FFFFFFF)
            v546 = 0x7FFFFFFFLL;
          v547 = ((unint64_t)v543 << 6) / v546;
          if (v547 >= 0x7FFFFFFF)
            LODWORD(v547) = 0x7FFFFFFF;
          if (!v596)
          {
            v544 = 0;
            goto LABEL_1033;
          }
          v548 = (int *)v313;
          do
          {
            v549 = (*v548 >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(*v548, (_DWORD)v547))
              v549 = *v548 + v547;
            *v548++ = v549;
            --v545;
          }
          while (v545);
          break;
        case 1:
          v550 = ((unint64_t)v596 << 6) - 64;
          goto LABEL_954;
        case 2:
          v550 = (unint64_t)v596 << 6;
LABEL_954:
          if (v550 >= 0x7FFFFFFF)
            v550 = 0x7FFFFFFFLL;
          v551 = ((unint64_t)v543 << 6) / v550;
          if (v551 >= 0x7FFFFFFF)
            v544 = 0x7FFFFFFF;
          else
            v544 = v551;
          goto LABEL_959;
        default:
          goto LABEL_959;
      }
    }
    v544 = 0;
LABEL_959:
    if (v596)
    {
      if (v596 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x195E733B0);
      }
      v539 = (_DWORD *)WTF::fastMalloc(v593);
      bzero(v539, (size_t)v593);
      v533 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v380 + 24) + 32);
      v313 = v609;
    }
    else
    {
LABEL_1033:
      v539 = 0;
    }
    v552 = *(_BYTE *)(v533 + 120);
    LODWORD(v533) = 0;
    switch(v552 & 0xF)
    {
      case 0:
      case 4:
        break;
      case 3:
        if ((v541 & 0x80000000) == 0)
          v553 = v541;
        else
          v553 = v541 + 1;
        v554 = v553 >> 1;
        if (v534 >= 0)
          v555 = v534;
        else
          v555 = v534 + 1;
        LODWORD(v533) = v554 - (v555 >> 1);
        break;
      case 5:
        LODWORD(v533) = (v541 >> 31) + 0x7FFFFFFF;
        if (!v542)
          LODWORD(v533) = v541 - v534;
        break;
      default:
        if ((v552 & 0x70) != 0x20)
          goto LABEL_982;
        v556 = (v541 >> 31) + 0x7FFFFFFF;
        if (!v542)
          v556 = v541 - v534;
        if (v556 >= 1)
        {
          v557 = (unint64_t)v596 << 6;
          if (v557 >= 0x7FFFFFFF)
            v557 = 0x7FFFFFFFLL;
          v558 = ((unint64_t)v556 << 6) / v557;
          if (v558 >= 0x7FFFFFFF)
            v558 = 0x7FFFFFFFLL;
          v533 = (unint64_t)v558 >> 1;
        }
        else
        {
LABEL_982:
          LODWORD(v533) = 0;
        }
        break;
    }
    if (!v596)
    {
      __break(0xC471u);
      JUMPOUT(0x195E733A8);
    }
    *v539 = v533;
    if (v596 == 1)
    {
      v540 = 1;
    }
    else
    {
      v559 = 0;
      do
      {
        v560 = *((_DWORD *)v313 + v559);
        v345 = __OFADD__((_DWORD)v533, v560);
        v561 = v533 + v560;
        v562 = (v533 >> 31) + 0x7FFFFFFF;
        if (!v345)
          v562 = v561;
        v345 = __OFADD__(v562, v544);
        v563 = v562 + v544;
        LODWORD(v533) = (v562 >> 31) + 0x7FFFFFFF;
        if (!v345)
          LODWORD(v533) = v563;
        v539[++v559] = v533;
      }
      while (v596 - 1 != v559);
      v540 = v596;
    }
    v64 = a4;
  }
  else
  {
    v539 = (_DWORD *)WTF::fastMalloc((WTF *)4);
    *v539 = 0;
    v540 = 1;
  }
  v564 = *((unsigned int *)v64 + 3);
  if ((_DWORD)v564)
  {
    v565 = (unsigned int *)WTF::fastMalloc((WTF *)((32 * *((unsigned int *)v64 + 3)) | 4));
    *v565 = v564;
    bzero(v565 + 1, 32 * v564);
  }
  else
  {
    v565 = 0;
  }
  *a1 = v565;
  if (v596)
  {
    v566 = 0;
    v567 = (char *)v615 + 8;
    do
    {
      v568 = (unint64_t *)((char *)v605 + 16 * v566);
      v569 = *v568;
      v570 = v568[1];
      v571 = v570 > v569;
      v572 = v570 - v569;
      if (v571)
      {
        if (v540 <= v566)
        {
          if (*(_DWORD *)v615 > v569)
          {
            __break(0xC471u);
            JUMPOUT(0x195E733B8);
          }
        }
        else
        {
          v573 = 0;
          v382 = (WTF *)(32 * v569);
          v574 = (_DWORD *)(v485 + 4 + 12 * v566);
          v575 = 12 * v569;
          while (1)
          {
            v576 = v569 + v573;
            if (*(_DWORD *)v615 <= (v569 + v573))
              break;
            if (*(_DWORD *)v485 <= v566)
            {
              __break(0xC471u);
              JUMPOUT(0x195E72FECLL);
            }
            v577 = v539[v566];
            v345 = __OFADD__(v577, *v574);
            v578 = v577 + *v574;
            v579 = (v577 >> 31) + 0x7FFFFFFF;
            if (!v345)
              v579 = v578;
            if (*(_DWORD *)v620 <= v576)
            {
              __break(0xC471u);
              JUMPOUT(0x195E7300CLL);
            }
            if (*(_DWORD *)v617 <= v576)
            {
              __break(0xC471u);
              JUMPOUT(0x195E7302CLL);
            }
            if (*(_DWORD *)v485 <= v576)
            {
              __break(0xC471u);
              JUMPOUT(0x195E7304CLL);
            }
            if (*v565 <= v576)
            {
              __break(0xC471u);
              JUMPOUT(0x195E7306CLL);
            }
            v580 = *((_DWORD *)v620 + v569 + v573 + 1);
            v581 = *((_DWORD *)v617 + v569 + v573 + 1);
            v582 = *(_QWORD *)&v567[v575];
            v583 = *(_QWORD *)(v485 + 12 + v575 - 4);
            v584 = (char *)v382 + (_QWORD)v565;
            *((_DWORD *)v584 + 1) = *(_DWORD *)&v567[v575 - 4];
            *((_DWORD *)v584 + 2) = v579;
            *((_DWORD *)v584 + 3) = v580;
            *((_DWORD *)v584 + 4) = v581;
            *(_QWORD *)(v584 + 20) = v582;
            *(_QWORD *)(v584 + 28) = v583;
            ++v573;
            v382 = (WTF *)((char *)v382 + 32);
            v575 += 12;
            if (v572 == v573)
              goto LABEL_1012;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x195E73210);
      }
LABEL_1012:
      ++v566;
    }
    while (v566 != v596);
  }
  WTF::fastFree((WTF *)v539, v382);
  if (v485)
    WTF::fastFree((WTF *)v485, v585);
  if (v615)
    WTF::fastFree(v615, v585);
  if (v605)
    WTF::fastFree(v605, v585);
  result = (uint64_t)v609;
  if (v609)
    result = WTF::fastFree(v609, v585);
  if (v617)
    result = WTF::fastFree(v617, v585);
  if (v620)
    return WTF::fastFree(v620, v585);
  return result;
}

void WebCore::Layout::AbstractLineBuilder::eligibleOverflowWidthAsLeading(uint64_t a1, uint64_t ***a2, uint64_t a3, int a4)
{
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  __int16 v8;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v5 == 1)
  {
    v6 = *a2;
    v7 = **a2;
    v8 = *(_WORD *)((char *)v7 + 21);
    if ((v8 & 0xF) == 0)
    {
      v10 = 0;
      goto LABEL_13;
    }
  }
  if (*(_DWORD *)a3 == 1 && *(_BYTE *)(a3 + 56) != 0)
  {
    v10 = *(_QWORD *)(a3 + 8);
    if (v10 >= v5)
      goto LABEL_25;
    v6 = *a2;
    v7 = (*a2)[3 * v10];
    v8 = *(_WORD *)((char *)v7 + 21);
    if ((v8 & 0xF) != 0)
      return;
LABEL_13:
    if ((v8 & 0xF) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      if ((v8 & 0x30) == 0x10)
        return;
      if (a4)
      {
        v11 = v6[3 * v10 + 1];
        v12 = *v7;
        if (v11 != (uint64_t *)(v12 + 16)
          && !WebCore::FontCascade::operator==(v11[4] + 32, *(_QWORD *)(v12 + 48) + 32))
        {
          return;
        }
      }
      if (*(_DWORD *)a3 != 1 || *(_BYTE *)(a3 + 56))
        return;
    }
    __break(1u);
LABEL_25:
    __break(0xC471u);
  }
}

uint64_t WebCore::Layout::AbstractLineBuilder::layoutState(WebCore::Layout::AbstractLineBuilder *this)
{
  return *((_QWORD *)this + 220) + 64;
}

unint64_t WTF::Vector<WebCore::Layout::FlexFormattingContext::convertFlexItemsToLogicalSpace(WebCore::Layout::ConstraintsForFlexContent const&)::FlexItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 104 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::Layout::FlexFormattingContext::convertFlexItemsToLogicalSpace(WebCore::Layout::ConstraintsForFlexContent const&)::FlexItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::Layout::FlexFormattingContext::convertFlexItemsToLogicalSpace(WebCore::Layout::ConstraintsForFlexContent const&)::FlexItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Layout::FlexFormattingContext::convertFlexItemsToLogicalSpace(WebCore::Layout::ConstraintsForFlexContent const&)::FlexItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  int v8;
  void *v9;
  WTF *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x2762763)
    {
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x195E73714);
    }
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(_DWORD *)(result + 12);
    v8 = 104 * v4;
    result = WTF::fastMalloc((WTF *)(104 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x68;
    *(_QWORD *)v5 = result;
    if (v7)
    {
      v10 = v6;
      do
      {
        v11 = *((_OWORD *)v10 + 1);
        *(_OWORD *)result = *(_OWORD *)v10;
        *(_OWORD *)(result + 16) = v11;
        v12 = *((_OWORD *)v10 + 2);
        v13 = *((_OWORD *)v10 + 3);
        v14 = *((_OWORD *)v10 + 5);
        *(_OWORD *)(result + 64) = *((_OWORD *)v10 + 4);
        *(_OWORD *)(result + 80) = v14;
        *(_OWORD *)(result + 32) = v12;
        *(_OWORD *)(result + 48) = v13;
        v15 = *((_QWORD *)v10 + 12);
        *((_QWORD *)v10 + 12) = 0;
        *(_QWORD *)(result + 96) = v15;
        v16 = *((_QWORD *)v10 + 12);
        if (v16)
        {
          v17 = *(_DWORD *)(v16 + 8);
          if (!v17)
            goto LABEL_19;
          *(_DWORD *)(v16 + 8) = v17 - 1;
        }
        v10 = (WTF *)((char *)v10 + 104);
        result += 104;
      }
      while (v10 != (WTF *)((char *)v6 + 104 * v7));
    }
    if (v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      return WTF::fastFree(v6, v9);
    }
  }
  return result;
}

void _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SB_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(uint64_t a1, char *a2, unint64_t a3, __int128 *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[28];
  __int128 v95;

  if (a3 >= 2)
  {
    v6 = a1;
    if (a3 == 2)
    {
      if (*((_DWORD *)a2 - 3) < *(_DWORD *)(a1 + 92))
      {
        v89 = *(_OWORD *)(a1 + 32);
        v91 = *(_OWORD *)(a1 + 48);
        v93 = *(_OWORD *)(a1 + 64);
        v95 = *(_OWORD *)(a1 + 80);
        v85 = *(_OWORD *)a1;
        v87 = *(_OWORD *)(a1 + 16);
        v7 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = 0;
        v8 = *(_OWORD *)(a2 - 72);
        v9 = *(_OWORD *)(a2 - 56);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 80) = v10;
        *(_OWORD *)(a1 + 32) = v8;
        *(_OWORD *)(a1 + 48) = v9;
        v11 = *(_OWORD *)(a2 - 88);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 104);
        *(_OWORD *)(a1 + 16) = v11;
        v12 = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = 0;
        v13 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v12;
        if (v13)
        {
          v14 = *(_DWORD *)(v13 + 8);
          if (!v14)
          {
            __break(0xC471u);
            JUMPOUT(0x195E73CD0);
          }
          *(_DWORD *)(v13 + 8) = v14 - 1;
        }
        *(_OWORD *)(a2 - 72) = v89;
        *(_OWORD *)(a2 - 56) = v91;
        *(_OWORD *)(a2 - 40) = v93;
        *(_OWORD *)(a2 - 24) = v95;
        *(_OWORD *)(a2 - 104) = v85;
        *(_OWORD *)(a2 - 88) = v87;
        v15 = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v7;
        if (v15)
        {
          v16 = *(_DWORD *)(v15 + 8);
          if (!v16)
          {
LABEL_71:
            __break(0xC471u);
            JUMPOUT(0x195E73BF0);
          }
          *(_DWORD *)(v15 + 8) = v16 - 1;
        }
      }
    }
    else
    {
      v17 = a3;
      if ((uint64_t)a3 <= 0)
      {
        if ((char *)a1 != a2)
        {
          v23 = a1 + 104;
          if ((char *)(a1 + 104) != a2)
          {
            v24 = 0;
            v25 = a1;
            do
            {
              v26 = v23;
              v27 = *(_DWORD *)(v25 + 196);
              if (v27 < *(_DWORD *)(v25 + 92))
              {
                v86 = *(_OWORD *)v26;
                v88 = *(_OWORD *)(v26 + 16);
                *(_OWORD *)&v94[12] = *(_OWORD *)(v26 + 76);
                v92 = *(_OWORD *)(v26 + 48);
                *(_OWORD *)v94 = *(_OWORD *)(v26 + 64);
                v90 = *(_OWORD *)(v26 + 32);
                v28 = *(_QWORD *)(v25 + 200);
                *(_QWORD *)(v25 + 200) = 0;
                v29 = *(_QWORD *)(v26 + 96);
                v30 = *(_OWORD *)(v25 + 48);
                *(_OWORD *)(v26 + 32) = *(_OWORD *)(v25 + 32);
                *(_OWORD *)(v26 + 48) = v30;
                v31 = *(_OWORD *)(v25 + 80);
                *(_OWORD *)(v26 + 64) = *(_OWORD *)(v25 + 64);
                *(_OWORD *)(v26 + 80) = v31;
                v32 = *(_OWORD *)(v25 + 16);
                *(_OWORD *)v26 = *(_OWORD *)v25;
                *(_OWORD *)(v26 + 16) = v32;
                v33 = *(_QWORD *)(v25 + 96);
                *(_QWORD *)(v25 + 96) = 0;
                *(_QWORD *)(v26 + 96) = v33;
                if (v29)
                {
                  v34 = *(_DWORD *)(v29 + 8);
                  if (!v34)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195E73C50);
                  }
                  *(_DWORD *)(v29 + 8) = v34 - 1;
                }
                v35 = a1;
                if (v25 != a1)
                {
                  v36 = v24;
                  v35 = v25;
                  if (v27 < *(_DWORD *)(v25 - 12))
                  {
                    while (1)
                    {
                      v37 = a1 + v36;
                      v38 = *(_OWORD *)(a1 + v36 - 56);
                      *(_OWORD *)(v37 + 32) = *(_OWORD *)(a1 + v36 - 72);
                      *(_OWORD *)(v37 + 48) = v38;
                      v39 = *(_OWORD *)(a1 + v36 - 24);
                      *(_OWORD *)(v37 + 64) = *(_OWORD *)(a1 + v36 - 40);
                      *(_OWORD *)(v37 + 80) = v39;
                      v40 = *(_OWORD *)(a1 + v36 - 88);
                      *(_OWORD *)v37 = *(_OWORD *)(a1 + v36 - 104);
                      *(_OWORD *)(v37 + 16) = v40;
                      v41 = *(_QWORD *)(a1 + v36 - 8);
                      *(_QWORD *)(v37 - 8) = 0;
                      *(_QWORD *)(v37 + 96) = v41;
                      v36 -= 104;
                      if (!v36)
                        break;
                      if (v27 >= *(_DWORD *)(v37 - 116))
                      {
                        v35 = a1 + v36;
                        goto LABEL_26;
                      }
                    }
                    v35 = a1;
                  }
                }
LABEL_26:
                *(_OWORD *)v35 = v86;
                *(_OWORD *)(v35 + 16) = v88;
                *(_OWORD *)(v35 + 76) = *(_OWORD *)&v94[12];
                *(_OWORD *)(v35 + 48) = v92;
                *(_OWORD *)(v35 + 64) = *(_OWORD *)v94;
                *(_OWORD *)(v35 + 32) = v90;
                *(_DWORD *)(v35 + 92) = v27;
                v42 = *(_QWORD *)(v35 + 96);
                *(_QWORD *)(v35 + 96) = v28;
                if (v42)
                {
                  v43 = *(_DWORD *)(v42 + 8);
                  if (!v43)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195E73C70);
                  }
                  *(_DWORD *)(v42 + 8) = v43 - 1;
                }
              }
              v23 = v26 + 104;
              v24 += 104;
              v25 = v26;
            }
            while ((char *)(v26 + 104) != a2);
          }
        }
      }
      else
      {
        v20 = a3 >> 1;
        v21 = a1 + 104 * (a3 >> 1);
        v22 = a3 >> 1;
        if ((uint64_t)v17 <= a5)
        {
          _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SB_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeE(a1, v21, v22, (uint64_t)a4);
          v44 = (uint64_t)a4 + 104 * v20;
          _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SB_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeE(v6 + 104 * (v17 >> 1), (uint64_t)a2, v17 - (v17 >> 1), v44);
          v45 = (char *)a4 + 104 * v17;
          v46 = v44;
          v47 = a4;
          while ((char *)v46 != v45)
          {
            if (*(_DWORD *)(v46 + 92) >= *((_DWORD *)v47 + 23))
            {
              v55 = v47[1];
              *(_OWORD *)v6 = *v47;
              *(_OWORD *)(v6 + 16) = v55;
              v56 = v47[2];
              v57 = v47[3];
              v58 = v47[5];
              *(_OWORD *)(v6 + 64) = v47[4];
              *(_OWORD *)(v6 + 80) = v58;
              *(_OWORD *)(v6 + 32) = v56;
              *(_OWORD *)(v6 + 48) = v57;
              v59 = *((_QWORD *)v47 + 12);
              *((_QWORD *)v47 + 12) = 0;
              v60 = *(_QWORD *)(v6 + 96);
              *(_QWORD *)(v6 + 96) = v59;
              if (v60)
              {
                v61 = *(_DWORD *)(v60 + 8);
                if (!v61)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E73CB0);
                }
                *(_DWORD *)(v60 + 8) = v61 - 1;
              }
              v47 = (__int128 *)((char *)v47 + 104);
            }
            else
            {
              v48 = *(_OWORD *)(v46 + 16);
              *(_OWORD *)v6 = *(_OWORD *)v46;
              *(_OWORD *)(v6 + 16) = v48;
              v49 = *(_OWORD *)(v46 + 32);
              v50 = *(_OWORD *)(v46 + 48);
              v51 = *(_OWORD *)(v46 + 80);
              *(_OWORD *)(v6 + 64) = *(_OWORD *)(v46 + 64);
              *(_OWORD *)(v6 + 80) = v51;
              *(_OWORD *)(v6 + 32) = v49;
              *(_OWORD *)(v6 + 48) = v50;
              v52 = *(_QWORD *)(v46 + 96);
              *(_QWORD *)(v46 + 96) = 0;
              v53 = *(_QWORD *)(v6 + 96);
              *(_QWORD *)(v6 + 96) = v52;
              if (v53)
              {
                v54 = *(_DWORD *)(v53 + 8);
                if (!v54)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E73C90);
                }
                *(_DWORD *)(v53 + 8) = v54 - 1;
              }
              v46 += 104;
            }
            v6 += 104;
            if (v47 == (__int128 *)v44)
            {
              if ((char *)v46 != v45)
              {
                v62 = 0;
                do
                {
                  v63 = v46 + v62;
                  v64 = v6 + v62;
                  v65 = *(_OWORD *)(v46 + v62 + 16);
                  *(_OWORD *)v64 = *(_OWORD *)(v46 + v62);
                  *(_OWORD *)(v64 + 16) = v65;
                  v66 = *(_OWORD *)(v46 + v62 + 32);
                  v67 = *(_OWORD *)(v46 + v62 + 48);
                  v68 = *(_OWORD *)(v46 + v62 + 80);
                  *(_OWORD *)(v64 + 64) = *(_OWORD *)(v46 + v62 + 64);
                  *(_OWORD *)(v64 + 80) = v68;
                  *(_OWORD *)(v64 + 32) = v66;
                  *(_OWORD *)(v64 + 48) = v67;
                  v69 = *(_QWORD *)(v46 + v62 + 96);
                  *(_QWORD *)(v46 + v62 + 96) = 0;
                  v70 = *(_QWORD *)(v6 + v62 + 96);
                  *(_QWORD *)(v64 + 96) = v69;
                  if (v70)
                  {
                    v71 = *(_DWORD *)(v70 + 8);
                    if (!v71)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195E73C30);
                    }
                    *(_DWORD *)(v70 + 8) = v71 - 1;
                  }
                  v62 += 104;
                }
                while ((char *)(v63 + 104) != v45);
              }
              goto LABEL_56;
            }
          }
          if (v47 != (__int128 *)v44)
          {
            v72 = 0;
            do
            {
              v73 = v6 + v72;
              v74 = (char *)v47 + v72;
              v75 = *(__int128 *)((char *)v47 + v72 + 16);
              *(_OWORD *)v73 = *(__int128 *)((char *)v47 + v72);
              *(_OWORD *)(v73 + 16) = v75;
              v76 = *(__int128 *)((char *)v47 + v72 + 32);
              v77 = *(__int128 *)((char *)v47 + v72 + 48);
              v78 = *(__int128 *)((char *)v47 + v72 + 80);
              *(_OWORD *)(v73 + 64) = *(__int128 *)((char *)v47 + v72 + 64);
              *(_OWORD *)(v73 + 80) = v78;
              *(_OWORD *)(v73 + 32) = v76;
              *(_OWORD *)(v73 + 48) = v77;
              v79 = *(_QWORD *)((char *)v47 + v72 + 96);
              *(_QWORD *)((char *)v47 + v72 + 96) = 0;
              v80 = *(_QWORD *)(v6 + v72 + 96);
              *(_QWORD *)(v73 + 96) = v79;
              if (v80)
              {
                v81 = *(_DWORD *)(v80 + 8);
                if (!v81)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E73C10);
                }
                *(_DWORD *)(v80 + 8) = v81 - 1;
              }
              v72 += 104;
            }
            while (v74 + 104 != (char *)v44);
          }
LABEL_56:
          if (a4)
          {
            v82 = (uint64_t *)(a4 + 6);
            do
            {
              v83 = *v82;
              if (*v82)
              {
                v84 = *(_DWORD *)(v83 + 8);
                if (!v84)
                  goto LABEL_71;
                *(_DWORD *)(v83 + 8) = v84 - 1;
              }
              v82 += 13;
              --v17;
            }
            while (v17);
          }
        }
        else
        {
          _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SB_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(a1, v21, v22, a4, a5);
          _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SB_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(v6 + 104 * (v17 >> 1), a2, v17 - (v17 >> 1), a4, a5);
          _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SH_OSB_NS_15iterator_traitsISH_E15difference_typeESL_PNSK_10value_typeEl((__int128 *)v6, (__int128 *)(v6 + 104 * (v17 >> 1)), a2, v17 >> 1, v17 - (v17 >> 1), a4, a5);
        }
      }
    }
  }
}

__n128 _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SB_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeE(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  if (a3)
  {
    v4 = a4;
    v7 = a1;
    if (a3 == 2)
    {
      v13 = (_OWORD *)(a2 - 104);
      v14 = (_OWORD *)(a4 + 104);
      v12 = (_QWORD *)(a4 + 200);
      if (*(_DWORD *)(a2 - 12) >= *(_DWORD *)(a1 + 92))
      {
        v54 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a4 = *(_OWORD *)a1;
        *(_OWORD *)(a4 + 16) = v54;
        v55 = *(_OWORD *)(a1 + 32);
        v56 = *(_OWORD *)(a1 + 48);
        v57 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(a4 + 80) = v57;
        *(_OWORD *)(a4 + 32) = v55;
        *(_OWORD *)(a4 + 48) = v56;
        v58 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = 0;
        *(_QWORD *)(a4 + 96) = v58;
        v59 = *(_OWORD *)(a2 - 88);
        *v14 = *v13;
        *(_OWORD *)(a4 + 120) = v59;
        result = *(__n128 *)(a2 - 72);
        v60 = *(_OWORD *)(a2 - 56);
        v61 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)(a4 + 168) = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a4 + 184) = v61;
        *(__n128 *)(a4 + 136) = result;
        *(_OWORD *)(a4 + 152) = v60;
        v23 = (uint64_t *)(a2 - 8);
        goto LABEL_28;
      }
      v15 = *(_OWORD *)(a2 - 88);
      *(_OWORD *)a4 = *v13;
      *(_OWORD *)(a4 + 16) = v15;
      v16 = *(_OWORD *)(a2 - 72);
      v17 = *(_OWORD *)(a2 - 56);
      v18 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)(a4 + 64) = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a4 + 80) = v18;
      *(_OWORD *)(a4 + 32) = v16;
      *(_OWORD *)(a4 + 48) = v17;
      v19 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 8) = 0;
      *(_QWORD *)(a4 + 96) = v19;
      v20 = *(_OWORD *)(a1 + 16);
      *v14 = *(_OWORD *)a1;
      *(_OWORD *)(a4 + 120) = v20;
      result = *(__n128 *)(a1 + 32);
      v21 = *(_OWORD *)(a1 + 48);
      v22 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a4 + 168) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a4 + 184) = v22;
      *(__n128 *)(a4 + 136) = result;
      *(_OWORD *)(a4 + 152) = v21;
LABEL_7:
      v23 = (uint64_t *)(a1 + 96);
LABEL_28:
      v62 = *v23;
      *v23 = 0;
      *v12 = v62;
      return result;
    }
    if (a3 == 1)
    {
      v8 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(_OWORD *)(a4 + 16) = v8;
      result = *(__n128 *)(a1 + 32);
      v10 = *(_OWORD *)(a1 + 48);
      v11 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a4 + 80) = v11;
      *(__n128 *)(a4 + 32) = result;
      *(_OWORD *)(a4 + 48) = v10;
      v12 = (_QWORD *)(a4 + 96);
      goto LABEL_7;
    }
    if ((uint64_t)a3 > 8)
    {
      v63 = 104 * (a3 >> 1);
      v64 = a1 + v63;
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SB_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(a1, a1 + v63, a3 >> 1, a4, a3 >> 1);
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SB_NS_15iterator_traitsISH_E15difference_typeEPNSJ_10value_typeEl(v7 + v63, a2, a3 - (a3 >> 1), v4 + v63, a3 - (a3 >> 1));
      v65 = v7 + v63;
      while (v65 != a2)
      {
        if (*(_DWORD *)(v65 + 92) >= *(_DWORD *)(v7 + 92))
        {
          v70 = *(_OWORD *)(v7 + 16);
          *(_OWORD *)v4 = *(_OWORD *)v7;
          *(_OWORD *)(v4 + 16) = v70;
          result = *(__n128 *)(v7 + 32);
          v71 = *(_OWORD *)(v7 + 48);
          v72 = *(_OWORD *)(v7 + 80);
          *(_OWORD *)(v4 + 64) = *(_OWORD *)(v7 + 64);
          *(_OWORD *)(v4 + 80) = v72;
          *(__n128 *)(v4 + 32) = result;
          *(_OWORD *)(v4 + 48) = v71;
          v69 = *(_QWORD *)(v7 + 96);
          *(_QWORD *)(v7 + 96) = 0;
          v7 += 104;
        }
        else
        {
          v66 = *(_OWORD *)(v65 + 16);
          *(_OWORD *)v4 = *(_OWORD *)v65;
          *(_OWORD *)(v4 + 16) = v66;
          result = *(__n128 *)(v65 + 32);
          v67 = *(_OWORD *)(v65 + 48);
          v68 = *(_OWORD *)(v65 + 80);
          *(_OWORD *)(v4 + 64) = *(_OWORD *)(v65 + 64);
          *(_OWORD *)(v4 + 80) = v68;
          *(__n128 *)(v4 + 32) = result;
          *(_OWORD *)(v4 + 48) = v67;
          v69 = *(_QWORD *)(v65 + 96);
          *(_QWORD *)(v65 + 96) = 0;
          v65 += 104;
        }
        *(_QWORD *)(v4 + 96) = v69;
        v4 += 104;
        if (v7 == v64)
        {
          if (v65 != a2)
          {
            v73 = 0;
            do
            {
              v74 = v65 + v73;
              v75 = v4 + v73;
              v76 = *(_OWORD *)(v65 + v73 + 16);
              *(_OWORD *)v75 = *(_OWORD *)(v65 + v73);
              *(_OWORD *)(v75 + 16) = v76;
              result = *(__n128 *)(v65 + v73 + 32);
              v77 = *(_OWORD *)(v65 + v73 + 48);
              v78 = *(_OWORD *)(v65 + v73 + 80);
              *(_OWORD *)(v75 + 64) = *(_OWORD *)(v65 + v73 + 64);
              *(_OWORD *)(v75 + 80) = v78;
              *(__n128 *)(v75 + 32) = result;
              *(_OWORD *)(v75 + 48) = v77;
              v79 = *(_QWORD *)(v65 + v73 + 96);
              *(_QWORD *)(v74 + 96) = 0;
              *(_QWORD *)(v75 + 96) = v79;
              v73 += 104;
            }
            while (v74 + 104 != a2);
          }
          return result;
        }
      }
      if (v7 != v64)
      {
        v80 = 0;
        do
        {
          v81 = v4 + v80;
          v82 = v7 + v80;
          v83 = *(_OWORD *)(v7 + v80 + 16);
          *(_OWORD *)v81 = *(_OWORD *)(v7 + v80);
          *(_OWORD *)(v81 + 16) = v83;
          result = *(__n128 *)(v7 + v80 + 32);
          v84 = *(_OWORD *)(v7 + v80 + 48);
          v85 = *(_OWORD *)(v7 + v80 + 80);
          *(_OWORD *)(v81 + 64) = *(_OWORD *)(v7 + v80 + 64);
          *(_OWORD *)(v81 + 80) = v85;
          *(__n128 *)(v81 + 32) = result;
          *(_OWORD *)(v81 + 48) = v84;
          v86 = *(_QWORD *)(v7 + v80 + 96);
          *(_QWORD *)(v82 + 96) = 0;
          *(_QWORD *)(v81 + 96) = v86;
          v80 += 104;
        }
        while (v82 + 104 != v64);
      }
    }
    else if (a1 != a2)
    {
      v24 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(_OWORD *)(a4 + 16) = v24;
      result = *(__n128 *)(a1 + 32);
      v25 = *(_OWORD *)(a1 + 48);
      v26 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a4 + 80) = v26;
      *(__n128 *)(a4 + 32) = result;
      *(_OWORD *)(a4 + 48) = v25;
      v27 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a4 + 96) = v27;
      v28 = a1 + 104;
      if (a1 + 104 != a2)
      {
        v29 = 0;
        v30 = a4;
        do
        {
          v31 = v7;
          v32 = v30;
          v7 = v28;
          v30 += 104;
          if (*(_DWORD *)(v31 + 196) >= *(_DWORD *)(v32 + 92))
          {
            v50 = *(_OWORD *)(v28 + 16);
            *(_OWORD *)v30 = *(_OWORD *)v28;
            *(_OWORD *)(v30 + 16) = v50;
            result = *(__n128 *)(v28 + 32);
            v51 = *(_OWORD *)(v28 + 48);
            v52 = *(_OWORD *)(v28 + 80);
            *(_OWORD *)(v30 + 64) = *(_OWORD *)(v28 + 64);
            *(_OWORD *)(v30 + 80) = v52;
            *(__n128 *)(v30 + 32) = result;
            *(_OWORD *)(v30 + 48) = v51;
            v53 = *(_QWORD *)(v31 + 200);
            *(_QWORD *)(v31 + 200) = 0;
            *(_QWORD *)(v32 + 200) = v53;
          }
          else
          {
            v33 = *(_OWORD *)(v32 + 48);
            *(_OWORD *)(v30 + 32) = *(_OWORD *)(v32 + 32);
            *(_OWORD *)(v30 + 48) = v33;
            v34 = *(_OWORD *)(v32 + 80);
            *(_OWORD *)(v30 + 64) = *(_OWORD *)(v32 + 64);
            *(_OWORD *)(v30 + 80) = v34;
            v35 = *(_OWORD *)(v32 + 16);
            *(_OWORD *)v30 = *(_OWORD *)v32;
            *(_OWORD *)(v30 + 16) = v35;
            *(_QWORD *)(v32 + 200) = *(_QWORD *)(v32 + 96);
            v36 = a4;
            *(_QWORD *)(v32 + 96) = 0;
            if (v32 != a4)
            {
              v37 = v29;
              while (1)
              {
                v36 = a4 + v37;
                if (*(_DWORD *)(v31 + 196) >= *(_DWORD *)(a4 + v37 - 12))
                  break;
                v38 = *(_OWORD *)(v36 - 56);
                *(_OWORD *)(v36 + 32) = *(_OWORD *)(v36 - 72);
                *(_OWORD *)(v36 + 48) = v38;
                v39 = *(_OWORD *)(v36 - 24);
                *(_OWORD *)(v36 + 64) = *(_OWORD *)(v36 - 40);
                *(_OWORD *)(v36 + 80) = v39;
                v40 = *(_OWORD *)(v36 - 88);
                *(_OWORD *)v36 = *(_OWORD *)(v36 - 104);
                *(_OWORD *)(v36 + 16) = v40;
                v41 = *(_QWORD *)(v36 - 8);
                *(_QWORD *)(v36 - 8) = 0;
                v42 = *(_QWORD *)(v36 + 96);
                *(_QWORD *)(v36 + 96) = v41;
                if (v42)
                {
                  v43 = *(_DWORD *)(v42 + 8);
                  if (!v43)
                    goto LABEL_44;
                  *(_DWORD *)(v42 + 8) = v43 - 1;
                }
                v37 -= 104;
                if (!v37)
                {
                  v36 = a4;
                  break;
                }
              }
            }
            v44 = *(_OWORD *)(v7 + 16);
            *(_OWORD *)v36 = *(_OWORD *)v7;
            *(_OWORD *)(v36 + 16) = v44;
            result = *(__n128 *)(v7 + 32);
            v45 = *(_OWORD *)(v7 + 48);
            v46 = *(_OWORD *)(v7 + 80);
            *(_OWORD *)(v36 + 64) = *(_OWORD *)(v7 + 64);
            *(_OWORD *)(v36 + 80) = v46;
            *(__n128 *)(v36 + 32) = result;
            *(_OWORD *)(v36 + 48) = v45;
            v47 = *(_QWORD *)(v31 + 200);
            *(_QWORD *)(v31 + 200) = 0;
            v48 = *(_QWORD *)(v36 + 96);
            *(_QWORD *)(v36 + 96) = v47;
            if (v48)
            {
              v49 = *(_DWORD *)(v48 + 8);
              if (!v49)
              {
LABEL_44:
                __break(0xC471u);
                JUMPOUT(0x195E740E8);
              }
              *(_DWORD *)(v48 + 8) = v49 - 1;
            }
          }
          v28 = v7 + 104;
          v29 += 104;
        }
        while (v7 + 104 != a2);
      }
    }
  }
  return result;
}

__int128 *_ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SH_OSB_NS_15iterator_traitsISH_E15difference_typeESL_PNSK_10value_typeEl(__int128 *result, __int128 *a2, char *a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  __int128 *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  __int128 *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  char *v29;
  char *v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  __int128 *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  __int128 *v56;
  char *v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  int v79;
  int v80;
  __int128 *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 *v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  char *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t *v144;
  uint64_t v145;
  int v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;

  if (!a5)
    return result;
  while (a4 > a7 && a5 > a7)
  {
    if (!a4)
      return result;
    v9 = 0;
    v10 = -a4;
    while (1)
    {
      v11 = (__int128 *)((char *)result + v9);
      if (*((_DWORD *)a2 + 23) < *(_DWORD *)((char *)result + v9 + 92))
        break;
      v9 += 104;
      if (__CFADD__(v10++, 1))
        return result;
    }
    v13 = -v10;
    if (-v10 >= a5)
    {
      if (v10 == -1)
      {
        v114 = (uint64_t)result + v9;
        v149 = *(__int128 *)((char *)result + v9);
        v152 = *(__int128 *)((char *)result + v9 + 16);
        v161 = *(__int128 *)((char *)result + v9 + 64);
        v164 = *(__int128 *)((char *)result + v9 + 80);
        v155 = *(__int128 *)((char *)result + v9 + 32);
        v158 = *(__int128 *)((char *)result + v9 + 48);
        v115 = *(_QWORD *)((char *)result + v9 + 96);
        *(_QWORD *)(v114 + 96) = 0;
        v116 = a2[1];
        *(_OWORD *)v114 = *a2;
        *(_OWORD *)(v114 + 16) = v116;
        v117 = a2[2];
        v118 = a2[3];
        v119 = a2[5];
        *(_OWORD *)(v114 + 64) = a2[4];
        *(_OWORD *)(v114 + 80) = v119;
        *(_OWORD *)(v114 + 32) = v117;
        *(_OWORD *)(v114 + 48) = v118;
        v120 = *((_QWORD *)a2 + 12);
        *((_QWORD *)a2 + 12) = 0;
        v121 = *(_QWORD *)((char *)result + v9 + 96);
        *(_QWORD *)(v114 + 96) = v120;
        if (v121)
        {
          v122 = *(_DWORD *)(v121 + 8);
          if (!v122)
          {
            __break(0xC471u);
            JUMPOUT(0x195E74A3CLL);
          }
          *(_DWORD *)(v121 + 8) = v122 - 1;
        }
        *a2 = v149;
        a2[1] = v152;
        a2[4] = v161;
        a2[5] = v164;
        a2[2] = v155;
        a2[3] = v158;
        v123 = *((_QWORD *)a2 + 12);
        *((_QWORD *)a2 + 12) = v115;
        if (v123)
        {
          v124 = *(_DWORD *)(v123 + 8);
          if (!v124)
          {
LABEL_137:
            __break(0xC471u);
            JUMPOUT(0x195E748DCLL);
          }
          *(_DWORD *)(v123 + 8) = v124 - 1;
        }
        return result;
      }
      if (v10 > 0)
        v13 = 1 - v10;
      v24 = v13 >> 1;
      v19 = (__int128 *)((char *)result + 104 * (v13 >> 1) + v9);
      if (a3 == (char *)a2)
      {
        v16 = a3;
        v30 = a3;
      }
      else
      {
        v25 = 0x4EC4EC4EC4EC4EC5 * ((a3 - (char *)a2) >> 3);
        v16 = (char *)a2;
        do
        {
          v26 = v25 >> 1;
          v27 = &v16[104 * (v25 >> 1)];
          v28 = *((_DWORD *)v27 + 23);
          v29 = v27 + 104;
          v25 += ~(v25 >> 1);
          if (v28 < *((_DWORD *)v19 + 23))
            v16 = v29;
          else
            v25 = v26;
        }
        while (v25);
        v30 = (char *)a2;
      }
      v15 = 0x4EC4EC4EC4EC4EC5 * ((v16 - v30) >> 3);
    }
    else
    {
      if (a5 >= 0)
        v14 = a5;
      else
        v14 = a5 + 1;
      v15 = v14 >> 1;
      v16 = (char *)a2 + 104 * (v14 >> 1);
      if (v11 == a2)
      {
        v19 = a2;
        v17 = (char *)a2;
      }
      else
      {
        v17 = (char *)result + v9;
        v18 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)result - v9) >> 3);
        v19 = v11;
        do
        {
          v20 = v18 >> 1;
          v21 = (uint64_t)v19 + 104 * (v18 >> 1);
          v22 = *(_DWORD *)(v21 + 92);
          v23 = (__int128 *)(v21 + 104);
          v18 += ~(v18 >> 1);
          if (v22 > *((_DWORD *)v16 + 23))
            v18 = v20;
          else
            v19 = v23;
        }
        while (v18);
      }
      v24 = 0x4EC4EC4EC4EC4EC5 * (((char *)v19 - v17) >> 3);
    }
    v31 = (__int128 *)v16;
    if (v19 != a2)
    {
      v31 = v19;
      if (a2 != (__int128 *)v16)
      {
        v32 = (__int128 *)((char *)v19 + 104);
        v31 = a2;
        while (1)
        {
          v147 = *(__int128 *)((char *)v32 - 104);
          v150 = *(__int128 *)((char *)v32 - 88);
          v159 = *(__int128 *)((char *)v32 - 40);
          v162 = *(__int128 *)((char *)v32 - 24);
          v153 = *(__int128 *)((char *)v32 - 72);
          v156 = *(__int128 *)((char *)v32 - 56);
          v33 = *((_QWORD *)v32 - 1);
          *((_QWORD *)v32 - 1) = 0;
          v34 = *a2;
          *(__int128 *)((char *)v32 - 88) = a2[1];
          *(__int128 *)((char *)v32 - 104) = v34;
          v35 = a2[2];
          v36 = a2[3];
          v37 = a2[4];
          *(__int128 *)((char *)v32 - 24) = a2[5];
          *(__int128 *)((char *)v32 - 40) = v37;
          *(__int128 *)((char *)v32 - 56) = v36;
          *(__int128 *)((char *)v32 - 72) = v35;
          v38 = *((_QWORD *)a2 + 12);
          *((_QWORD *)a2 + 12) = 0;
          v39 = *((_QWORD *)v32 - 1);
          *((_QWORD *)v32 - 1) = v38;
          if (v39)
          {
            v40 = *(_DWORD *)(v39 + 8);
            if (!v40)
              goto LABEL_137;
            *(_DWORD *)(v39 + 8) = v40 - 1;
          }
          *a2 = v147;
          a2[1] = v150;
          a2[4] = v159;
          a2[5] = v162;
          a2[2] = v153;
          a2[3] = v156;
          v41 = *((_QWORD *)a2 + 12);
          *((_QWORD *)a2 + 12) = v33;
          if (v41)
          {
            v42 = *(_DWORD *)(v41 + 8);
            if (!v42)
            {
              __break(0xC471u);
              JUMPOUT(0x195E748FCLL);
            }
            *(_DWORD *)(v41 + 8) = v42 - 1;
          }
          a2 = (__int128 *)((char *)a2 + 104);
          if (a2 == (__int128 *)v16)
            break;
          if (v32 == v31)
            v31 = a2;
          v32 = (__int128 *)((char *)v32 + 104);
        }
        if (v32 != v31)
        {
          v43 = v32;
          v44 = v31;
          do
          {
            while (1)
            {
              v148 = *v43;
              v151 = v43[1];
              v160 = v43[4];
              v163 = v43[5];
              v154 = v43[2];
              v157 = v43[3];
              v45 = *((_QWORD *)v43 + 12);
              *((_QWORD *)v43 + 12) = 0;
              v46 = v31[1];
              *v43 = *v31;
              v43[1] = v46;
              v47 = v31[2];
              v48 = v31[3];
              v49 = v31[5];
              v43[4] = v31[4];
              v43[5] = v49;
              v43[2] = v47;
              v43[3] = v48;
              v50 = *((_QWORD *)v31 + 12);
              *((_QWORD *)v31 + 12) = 0;
              v51 = *((_QWORD *)v43 + 12);
              *((_QWORD *)v43 + 12) = v50;
              if (v51)
              {
                v52 = *(_DWORD *)(v51 + 8);
                if (!v52)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E7491CLL);
                }
                *(_DWORD *)(v51 + 8) = v52 - 1;
              }
              *v31 = v148;
              v31[1] = v151;
              v31[4] = v160;
              v31[5] = v163;
              v31[2] = v154;
              v31[3] = v157;
              v53 = *((_QWORD *)v31 + 12);
              *((_QWORD *)v31 + 12) = v45;
              if (v53)
              {
                v54 = *(_DWORD *)(v53 + 8);
                if (!v54)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E7493CLL);
                }
                *(_DWORD *)(v53 + 8) = v54 - 1;
              }
              v43 = (__int128 *)((char *)v43 + 104);
              v31 = (__int128 *)((char *)v31 + 104);
              if (v31 == (__int128 *)v16)
                break;
              if (v43 == v44)
                v44 = v31;
            }
            v31 = v44;
          }
          while (v43 != v44);
          v31 = v32;
        }
      }
    }
    a4 = -v24 - v10;
    v55 = a5 - v15;
    if (v24 + v15 >= a5 - (v24 + v15) - v10)
    {
      v59 = v24;
      v58 = a6;
      v55 = v15;
      _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SH_OSB_NS_15iterator_traitsISH_E15difference_typeESL_PNSK_10value_typeEl(v31, v16, a3, a4, a5 - v15, a6, a7);
      v16 = (char *)v19;
      a4 = v59;
      a3 = (char *)v31;
    }
    else
    {
      v56 = v11;
      v57 = a3;
      v58 = a6;
      _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZZN7WebCore6Layout21FlexFormattingContext30convertFlexItemsToLogicalSpaceERKNS3_25ConstraintsForFlexContentEENK3__1clEvEUlRT_RT0_E_PZNS4_30convertFlexItemsToLogicalSpaceES7_E8FlexItemEEvT1_SH_SH_OSB_NS_15iterator_traitsISH_E15difference_typeESL_PNSK_10value_typeEl(v56, v19, v31, v24, v15, a6, a7);
      a3 = v57;
      v11 = v31;
    }
    a5 = v55;
    result = v11;
    a2 = (__int128 *)v16;
    a6 = v58;
    if (!v55)
      return result;
  }
  if (a4 > a5)
  {
    if (a2 == (__int128 *)a3)
      return result;
    v60 = 0;
    v61 = 0;
    do
    {
      v62 = (uint64_t)a6 + v60;
      v63 = (uint64_t)a2 + v60;
      v64 = *(__int128 *)((char *)a2 + v60 + 16);
      *(_OWORD *)v62 = *(__int128 *)((char *)a2 + v60);
      *(_OWORD *)(v62 + 16) = v64;
      v65 = *(__int128 *)((char *)a2 + v60 + 32);
      v66 = *(__int128 *)((char *)a2 + v60 + 48);
      v67 = *(__int128 *)((char *)a2 + v60 + 80);
      *(_OWORD *)(v62 + 64) = *(__int128 *)((char *)a2 + v60 + 64);
      *(_OWORD *)(v62 + 80) = v67;
      *(_OWORD *)(v62 + 32) = v65;
      *(_OWORD *)(v62 + 48) = v66;
      v68 = *(_QWORD *)((char *)a2 + v60 + 96);
      *(_QWORD *)(v63 + 96) = 0;
      *(_QWORD *)(v62 + 96) = v68;
      ++v61;
      v60 += 104;
    }
    while ((char *)(v63 + 104) != a3);
    if (!v60)
      goto LABEL_118;
    v69 = (__int128 *)((char *)a6 + v60);
    v70 = a3 - 8;
    while (1)
    {
      if (a2 == result)
      {
        v125 = 0;
        do
        {
          v126 = &v70[v125];
          v127 = *(__int128 *)((char *)v69 + v125 - 88);
          *((_OWORD *)v126 - 6) = *(__int128 *)((char *)v69 + v125 - 104);
          *((_OWORD *)v126 - 5) = v127;
          v128 = *(__int128 *)((char *)v69 + v125 - 72);
          v129 = *(__int128 *)((char *)v69 + v125 - 56);
          v130 = *(__int128 *)((char *)v69 + v125 - 24);
          *((_OWORD *)v126 - 2) = *(__int128 *)((char *)v69 + v125 - 40);
          *((_OWORD *)v126 - 1) = v130;
          *((_OWORD *)v126 - 4) = v128;
          *((_OWORD *)v126 - 3) = v129;
          v131 = *(_QWORD *)((char *)v69 + v125 - 8);
          *(_QWORD *)((char *)v69 + v125 - 8) = 0;
          v132 = *(_QWORD *)&v70[v125];
          *(_QWORD *)v126 = v131;
          if (v132)
          {
            v133 = *(_DWORD *)(v132 + 8);
            if (!v133)
            {
              __break(0xC471u);
              JUMPOUT(0x195E7497CLL);
            }
            *(_DWORD *)(v132 + 8) = v133 - 1;
          }
          v125 -= 104;
        }
        while ((__int128 *)((char *)v69 + v125) != a6);
        goto LABEL_118;
      }
      v71 = v70 - 96;
      if (*((_DWORD *)v69 - 3) < *((_DWORD *)a2 - 3))
        break;
      v81 = (__int128 *)((char *)v69 - 104);
      v82 = *(__int128 *)((char *)v69 - 88);
      *(_OWORD *)v71 = *(__int128 *)((char *)v69 - 104);
      *((_OWORD *)v70 - 5) = v82;
      v83 = *(__int128 *)((char *)v69 - 72);
      v84 = *(__int128 *)((char *)v69 - 56);
      v85 = *(__int128 *)((char *)v69 - 24);
      *((_OWORD *)v70 - 2) = *(__int128 *)((char *)v69 - 40);
      *((_OWORD *)v70 - 1) = v85;
      *((_OWORD *)v70 - 4) = v83;
      *((_OWORD *)v70 - 3) = v84;
      v86 = *((_QWORD *)v69 - 1);
      *((_QWORD *)v69 - 1) = 0;
      v87 = *(_QWORD *)v70;
      *(_QWORD *)v70 = v86;
      if (v87)
      {
        v88 = *(_DWORD *)(v87 + 8);
        v78 = (_DWORD *)(v87 + 8);
        v79 = v88;
        if (!v88)
        {
          __break(0xC471u);
          JUMPOUT(0x195E749DCLL);
        }
LABEL_80:
        *v78 = v79 - 1;
      }
LABEL_81:
      v70 -= 104;
      v69 = v81;
      if (v81 == a6)
        goto LABEL_118;
    }
    v72 = *(__int128 *)((char *)a2 - 88);
    *(_OWORD *)v71 = *(__int128 *)((char *)a2 - 104);
    *((_OWORD *)v70 - 5) = v72;
    v73 = *(__int128 *)((char *)a2 - 72);
    v74 = *(__int128 *)((char *)a2 - 56);
    v75 = *(__int128 *)((char *)a2 - 24);
    *((_OWORD *)v70 - 2) = *(__int128 *)((char *)a2 - 40);
    *((_OWORD *)v70 - 1) = v75;
    *((_OWORD *)v70 - 4) = v73;
    *((_OWORD *)v70 - 3) = v74;
    v76 = *((_QWORD *)a2 - 1);
    *((_QWORD *)a2 - 1) = 0;
    v77 = *(_QWORD *)v70;
    *(_QWORD *)v70 = v76;
    if (!v77)
    {
      a2 = (__int128 *)((char *)a2 - 104);
      v81 = v69;
      goto LABEL_81;
    }
    v80 = *(_DWORD *)(v77 + 8);
    v78 = (_DWORD *)(v77 + 8);
    v79 = v80;
    if (!v80)
    {
      __break(0xC471u);
      JUMPOUT(0x195E749BCLL);
    }
    a2 = (__int128 *)((char *)a2 - 104);
    v81 = v69;
    goto LABEL_80;
  }
  if (result != a2)
  {
    v89 = 0;
    v61 = 0;
    do
    {
      v90 = (uint64_t)a6 + v89;
      v91 = (uint64_t)result + v89;
      v92 = *(__int128 *)((char *)result + v89 + 16);
      *(_OWORD *)v90 = *(__int128 *)((char *)result + v89);
      *(_OWORD *)(v90 + 16) = v92;
      v93 = *(__int128 *)((char *)result + v89 + 32);
      v94 = *(__int128 *)((char *)result + v89 + 48);
      v95 = *(__int128 *)((char *)result + v89 + 80);
      *(_OWORD *)(v90 + 64) = *(__int128 *)((char *)result + v89 + 64);
      *(_OWORD *)(v90 + 80) = v95;
      *(_OWORD *)(v90 + 32) = v93;
      *(_OWORD *)(v90 + 48) = v94;
      v96 = *(_QWORD *)((char *)result + v89 + 96);
      *(_QWORD *)(v91 + 96) = 0;
      *(_QWORD *)(v90 + 96) = v96;
      ++v61;
      v89 += 104;
    }
    while ((__int128 *)(v91 + 104) != a2);
    if (!v89)
      goto LABEL_118;
    v97 = (__int128 *)((char *)a6 + v89);
    v98 = (uint64_t)a6 + v89 - 104;
    v99 = a6;
    while (a2 != (__int128 *)a3)
    {
      if (*((_DWORD *)a2 + 23) >= *((_DWORD *)v99 + 23))
      {
        v107 = v99[1];
        *result = *v99;
        result[1] = v107;
        v108 = v99[2];
        v109 = v99[3];
        v110 = v99[5];
        result[4] = v99[4];
        result[5] = v110;
        result[2] = v108;
        result[3] = v109;
        v111 = *((_QWORD *)v99 + 12);
        *((_QWORD *)v99 + 12) = 0;
        v112 = *((_QWORD *)result + 12);
        *((_QWORD *)result + 12) = v111;
        if (v112)
        {
          v113 = *(_DWORD *)(v112 + 8);
          if (!v113)
          {
            __break(0xC471u);
            JUMPOUT(0x195E74A1CLL);
          }
          *(_DWORD *)(v112 + 8) = v113 - 1;
        }
        v99 = (__int128 *)((char *)v99 + 104);
      }
      else
      {
        v100 = a2[1];
        *result = *a2;
        result[1] = v100;
        v101 = a2[2];
        v102 = a2[3];
        v103 = a2[5];
        result[4] = a2[4];
        result[5] = v103;
        result[2] = v101;
        result[3] = v102;
        v104 = *((_QWORD *)a2 + 12);
        *((_QWORD *)a2 + 12) = 0;
        v105 = *((_QWORD *)result + 12);
        *((_QWORD *)result + 12) = v104;
        if (v105)
        {
          v106 = *(_DWORD *)(v105 + 8);
          if (!v106)
          {
            __break(0xC471u);
            JUMPOUT(0x195E749FCLL);
          }
          *(_DWORD *)(v105 + 8) = v106 - 1;
        }
        a2 = (__int128 *)((char *)a2 + 104);
      }
      result = (__int128 *)((char *)result + 104);
      if (v97 == v99)
        goto LABEL_118;
    }
    v134 = 0;
    do
    {
      v135 = (uint64_t)result + v134;
      v136 = (uint64_t)v99 + v134;
      v137 = *(__int128 *)((char *)v99 + v134 + 16);
      *(_OWORD *)v135 = *(__int128 *)((char *)v99 + v134);
      *(_OWORD *)(v135 + 16) = v137;
      v138 = *(__int128 *)((char *)v99 + v134 + 32);
      v139 = *(__int128 *)((char *)v99 + v134 + 48);
      v140 = *(__int128 *)((char *)v99 + v134 + 80);
      *(_OWORD *)(v135 + 64) = *(__int128 *)((char *)v99 + v134 + 64);
      *(_OWORD *)(v135 + 80) = v140;
      *(_OWORD *)(v135 + 32) = v138;
      *(_OWORD *)(v135 + 48) = v139;
      v141 = *(_QWORD *)((char *)v99 + v134 + 96);
      *(_QWORD *)((char *)v99 + v134 + 96) = 0;
      v142 = *(_QWORD *)((char *)result + v134 + 96);
      *(_QWORD *)(v135 + 96) = v141;
      if (v142)
      {
        v143 = *(_DWORD *)(v142 + 8);
        if (!v143)
        {
          __break(0xC471u);
          JUMPOUT(0x195E7499CLL);
        }
        *(_DWORD *)(v142 + 8) = v143 - 1;
      }
      v134 += 104;
    }
    while (v98 != v136);
LABEL_118:
    if (a6)
    {
      v144 = (uint64_t *)(a6 + 6);
      do
      {
        v145 = *v144;
        if (*v144)
        {
          v146 = *(_DWORD *)(v145 + 8);
          if (!v146)
          {
            __break(0xC471u);
            JUMPOUT(0x195E7495CLL);
          }
          *(_DWORD *)(v145 + 8) = v146 - 1;
        }
        v144 += 13;
        --v61;
      }
      while (v61);
    }
  }
  return result;
}

float WebCore::Layout::InlineContentAligner::applyTextAlignJustify(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  float v4;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  float v16;
  WTF *v17;
  WTF *v18;
  WTF *v20[2];
  WTF *v21[2];
  uint64_t v22;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = 0.0;
  if (a3 > 0.0 && (_DWORD)v3 != 0)
  {
    v22 = 0;
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)v21 = 0u;
    WebCore::Layout::computedExpansions(a1, 0, v3, a2, (uint64_t)v20, 1);
    if (v20[0] && v3 <= *(_DWORD *)(a1 + 12))
    {
      v10 = 0;
      v11 = a3 / (float)(unint64_t)v20[0];
      v12 = 24;
      do
      {
        if (v10 >= *(unsigned int *)(a1 + 12))
          goto LABEL_19;
        v13 = *(_QWORD *)a1;
        *(float *)(*(_QWORD *)a1 + v12) = v4 + *(float *)(*(_QWORD *)a1 + v12);
        if (v10 >= HIDWORD(v21[0]))
        {
          __break(0xC471u);
          JUMPOUT(0x195E74BACLL);
        }
        if (v10 >= HIDWORD(v22))
        {
LABEL_19:
          __break(0xC471u);
          JUMPOUT(0x195E74BA4);
        }
        *(float *)&v14 = v11 * (float)*((unint64_t *)v20[1] + v10);
        v9 = v9 & 0xFFFFFF00 | *((unsigned __int8 *)v21[1] + v10);
        v15 = v13 + v12;
        v16 = *(float *)&v14 + *(float *)(v15 + 4);
        v4 = v4 + *(float *)&v14;
        *(_QWORD *)(v15 + 8) = v9 | ((unint64_t)v14 << 32);
        *(float *)(v15 + 4) = v16;
        ++v10;
        v12 += 120;
      }
      while (v3 != v10);
    }
    v17 = v21[1];
    if (v21[1])
    {
      v21[1] = 0;
      LODWORD(v22) = 0;
      WTF::fastFree(v17, v8);
    }
    v18 = v20[1];
    if (v20[1])
    {
      v20[1] = 0;
      LODWORD(v21[0]) = 0;
      WTF::fastFree(v18, v8);
    }
  }
  return v4;
}

uint64_t WebCore::Layout::computedExpansions(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  WTF *v6;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  void *v23;
  WTF *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WTF *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  WTF *v34;
  char v35;
  WTF *v36;
  _BYTE *v37;
  char *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v77;
  char v78;
  uint64_t v79;

  *(_QWORD *)a5 = 0;
  v6 = (WTF *)(a3 - a2);
  if (a3 - a2 > (unint64_t)*(unsigned int *)(result + 12))
    return result;
  v10 = result;
  v11 = (void **)(a5 + 8);
  result = WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a5 + 8, a3 - a2);
  v13 = *(unsigned int *)(a5 + 20);
  if ((unint64_t)v6 > v13)
  {
    v14 = *(unsigned int *)(a5 + 16);
    if ((unint64_t)v6 > v14)
    {
      v15 = v14 + (v14 >> 2);
      if (v15 >= 0x10)
        v16 = v15 + 1;
      else
        v16 = 16;
      if (v16 <= (unint64_t)v6)
        v17 = (unint64_t)v6;
      else
        v17 = v16;
      if (v17 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195E751C8);
      }
      v18 = *v11;
      v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(a5 + 16) = v17;
      *(_QWORD *)(a5 + 8) = v19;
      result = (uint64_t)memcpy(v19, v18, 8 * v13);
      if (v18)
      {
        if (*v11 == v18)
        {
          *(_QWORD *)(a5 + 8) = 0;
          *(_DWORD *)(a5 + 16) = 0;
        }
        result = WTF::fastFree((WTF *)v18, v20);
      }
    }
  }
  *(_DWORD *)(a5 + 20) = (_DWORD)v6;
  if ((unint64_t)v6 > *(unsigned int *)(a5 + 32))
  {
    v21 = *(WTF **)(a5 + 24);
    v22 = *(unsigned int *)(a5 + 36);
    result = WTF::fastMalloc(v6);
    *(_DWORD *)(a5 + 32) = (_DWORD)v6;
    *(_QWORD *)(a5 + 24) = result;
    if ((_DWORD)v22)
    {
      v24 = v21;
      do
      {
        v25 = *(_BYTE *)v24;
        v24 = (WTF *)((char *)v24 + 1);
        *(_BYTE *)result++ = v25;
        --v22;
      }
      while (v22);
    }
    if (v21)
    {
      if (*(WTF **)(a5 + 24) == v21)
      {
        *(_QWORD *)(a5 + 24) = 0;
        *(_DWORD *)(a5 + 32) = 0;
      }
      result = WTF::fastFree(v21, v23);
    }
  }
  v26 = *(unsigned int *)(a5 + 36);
  v27 = a4;
  if ((unint64_t)v6 <= v26)
    goto LABEL_41;
  v28 = *(unsigned int *)(a5 + 32);
  v29 = *(WTF **)(a5 + 24);
  if ((unint64_t)v6 <= v28)
  {
LABEL_37:
    if (v29)
      goto LABEL_38;
    goto LABEL_41;
  }
  v30 = v28 + (v28 >> 2);
  if (v30 >= 0x10)
    v31 = v30 + 1;
  else
    v31 = 16;
  if (v31 <= (unint64_t)v6)
    v32 = (unint64_t)v6;
  else
    v32 = v31;
  if (HIDWORD(v32))
  {
    __break(0xC471u);
    JUMPOUT(0x195E751D0);
  }
  result = WTF::fastMalloc((WTF *)v32);
  *(_DWORD *)(a5 + 32) = v32;
  *(_QWORD *)(a5 + 24) = result;
  if ((_DWORD)v26)
  {
    v34 = v29;
    do
    {
      v35 = *(_BYTE *)v34;
      v34 = (WTF *)((char *)v34 + 1);
      *(_BYTE *)result++ = v35;
      --v26;
    }
    while (v26);
    result = *(_QWORD *)(a5 + 24);
  }
  v27 = a4;
  if (v29)
  {
    if ((WTF *)result == v29)
    {
      *(_QWORD *)(a5 + 24) = 0;
      *(_DWORD *)(a5 + 32) = 0;
    }
    result = WTF::fastFree(v29, v33);
    v29 = *(WTF **)(a5 + 24);
    v27 = a4;
    goto LABEL_37;
  }
  v29 = (WTF *)result;
  if (result)
  {
LABEL_38:
    v36 = (WTF *)*(unsigned int *)(a5 + 36);
    if (v6 != v36)
    {
      v37 = (char *)v36 + (_QWORD)v29;
      v38 = (char *)v36 + a2 - a3;
      do
      {
        *v37 = *v37 & 0xF0 | 4;
        ++v37;
        ++v38;
      }
      while (v38);
    }
  }
LABEL_41:
  *(_DWORD *)(a5 + 36) = (_DWORD)v6;
  if (v27)
  {
    v39 = *(unsigned int *)(v10 + 12);
    v40 = (unsigned __int8 *)(*(_QWORD *)v10 + 120 * v39 - 120);
    while (v39)
    {
      --v39;
      v41 = *v40;
      v40 -= 120;
      if (v41 <= 2)
      {
        v42 = v39 & 0xFFFFFFFFFFFFFF00;
        v39 = v39;
        v78 = 1;
        goto LABEL_48;
      }
    }
    v42 = 0;
    v78 = 0;
  }
  else
  {
    v42 = 0;
    v78 = 0;
    v39 = 0;
  }
LABEL_48:
  if (a3 == a2)
    return result;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v77 = v39 | v42;
  LOBYTE(v39) = 1;
  result = 671088640;
  v46 = a6;
  do
  {
    v47 = v43 + a2;
    v48 = *(unsigned int *)(v10 + 12);
    if (v43 + a2 >= v48)
    {
      __break(0xC471u);
      JUMPOUT(0x195E751A0);
    }
    v49 = *(_QWORD *)v10;
    if (v46)
    {
      v50 = *(_QWORD *)(v49 + 120 * v47 + 8);
      if ((*(_QWORD *)(v50 + 32) & 0x1FLL) == 0x16)
      {
        v51 = 120 * v47;
        while (1)
        {
          if (v43 >= *(unsigned int *)(a5 + 36))
          {
            __break(0xC471u);
            JUMPOUT(0x195E75188);
          }
          *(_BYTE *)(*(_QWORD *)(a5 + 24) + v43) = 4;
          if (v43 >= *(unsigned int *)(a5 + 20))
          {
            __break(0xC471u);
            JUMPOUT(0x195E75190);
          }
          *((_QWORD *)*v11 + v43) = 0;
          v48 = *(unsigned int *)(v10 + 12);
          if (a2 + v43 >= v48)
          {
            __break(0xC471u);
            JUMPOUT(0x195E75198);
          }
          v49 = *(_QWORD *)v10;
          if (*(_BYTE *)(*(_QWORD *)v10 + v51) == 10 && *(_QWORD *)(v49 + v51 + 8) == v50)
            break;
          ++v43;
          v51 += 120;
          if (v43 >= (unint64_t)v6)
          {
            LOBYTE(v39) = 0;
            goto LABEL_62;
          }
        }
        LOBYTE(v39) = 0;
        ++v43;
      }
    }
LABEL_62:
    if (v43 >= (unint64_t)v6)
      break;
    v52 = v43 + a2;
    if (v43 + a2 >= v48)
    {
      __break(0xC471u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(0xC471u);
      JUMPOUT(0x195E751B0);
    }
    v53 = (unsigned __int8 *)(v49 + 120 * v52);
    v54 = *((_QWORD *)v53 + 1);
    v55 = *v53;
    if (v27)
      v56 = 0;
    else
      v56 = (*(_DWORD *)(v54 + 56) & 0x28000000) == 0x8000000;
    v57 = v56;
    if (v55 > 2 || (v57 & 1) != 0)
    {
      v72 = 0;
      if (v55 == 6)
        LOBYTE(v39) = 0;
      v73 = 4;
      goto LABEL_95;
    }
    v58 = *(_QWORD *)(v49 + 120 * v52 + 16);
    if ((*(_BYTE *)(*(_QWORD *)(v58 + 24) + 231) & 1) == 0)
    {
      v59 = v49 + 120 * v52;
      if (!*(_BYTE *)(v59 + 112))
        goto LABEL_124;
      if ((v78 & (v52 == v77)) != 0)
        v60 = v27;
      else
        v60 = 0;
      if ((*(_WORD *)(v54 + 12) & 0x20) == 0)
        goto LABEL_131;
      v61 = v12 & 0xFFFFFF0000000000;
      v62 = *(_QWORD *)(v54 + 120);
      if (v62)
      {
        v63 = (uint64_t *)(v59 + 88);
        v64 = *(unsigned int *)(v62 + 4);
        v65 = ((unint64_t)*(unsigned int *)(v62 + 16) >> 2) & 1;
        v66 = v61 | (v65 << 32) | v64;
        v67 = *v63;
        v79 = v66;
        if (v64 > *v63)
        {
          v68 = v63[1] - v60;
          v69 = *(unsigned __int8 **)(v62 + 8);
          if ((int)v64 - (int)v67 <= v68)
          {
            if ((_DWORD)v67)
            {
              LODWORD(v68) = v64 - v67;
              goto LABEL_81;
            }
            v70 = v66;
          }
          else
          {
LABEL_81:
            v70 = v68;
            v71 = v64 - v67;
            if ((_DWORD)v65)
            {
              if (v71 < v68)
                goto LABEL_124;
              v69 += v67;
              v70 = v68 | 0x100000000;
            }
            else
            {
              if (v71 < v68)
                goto LABEL_124;
              v69 += 2 * v67;
            }
          }
LABEL_94:
          v73 = v39 ^ 5;
          v74 = WebCore::FontCascade::expansionOpportunityCount(v69, v70, (*(_DWORD *)(v58 + 40) & 0x4000000) != 0, v39 ^ 5u);
          v39 = HIDWORD(v74);
          v72 = v74;
          v46 = a6;
          v12 = v79;
          v27 = a4;
          result = 671088640;
          goto LABEL_95;
        }
      }
      else
      {
        v79 = v61 | 0x100000000;
      }
      v70 = 0x100000000;
      v69 = "";
      goto LABEL_94;
    }
    v72 = 0;
    v73 = 0;
LABEL_95:
    if (v43 >= *(unsigned int *)(a5 + 36))
      goto LABEL_125;
    *(_BYTE *)(*(_QWORD *)(a5 + 24) + v43) = v73;
    if (v43 >= *(unsigned int *)(a5 + 20))
    {
      __break(0xC471u);
      JUMPOUT(0x195E751B8);
    }
    *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8 * v43) = v72;
    *(_QWORD *)a5 += v72;
    v75 = *v53;
    if (v75 < 3 || v75 == 6)
    {
      v45 = v43;
      v44 = 1;
    }
    ++v43;
  }
  while (v43 < (unint64_t)v6);
  if (v44)
  {
    if (v45 >= *(unsigned int *)(a5 + 20))
    {
      __break(0xC471u);
      JUMPOUT(0x195E751C0);
    }
    if (*((_QWORD *)*v11 + v45))
    {
      if (v45 >= *(unsigned int *)(a5 + 36))
      {
        __break(0xC471u);
        JUMPOUT(0x195E751D8);
      }
      *(_BYTE *)(*(_QWORD *)(a5 + 24) + v45) &= 0xF3u;
      if ((_BYTE)v39)
      {
        --*(_QWORD *)a5;
        if (v45 >= *(unsigned int *)(a5 + 20))
        {
LABEL_131:
          __break(0xC471u);
          JUMPOUT(0x195E75180);
        }
        --*((_QWORD *)*v11 + v45);
      }
    }
  }
  return result;
}

unsigned int *WebCore::Layout::InlineContentAligner::applyRubyAlignSpaceAround(unsigned int *result, unint64_t a2, unint64_t a3, float a4)
{
  unint64_t v5;
  unsigned int *v10;
  unsigned __int8 *v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  float v23;
  WTF *v24;
  WTF *v25[2];
  WTF *v26[2];
  uint64_t v27;

  v5 = result[3];
  if (a4 > 0.0 && (_DWORD)v5 != 0 && a3 > a2)
  {
    v10 = result;
    if (a2 > v5)
      v5 = a2;
    v11 = (unsigned __int8 *)(*(_QWORD *)result + 120 * a2);
    v12 = 1;
    v13 = a2;
    do
    {
      if (v5 == v13)
      {
        __break(0xC471u);
        goto LABEL_32;
      }
      if (*v11 - 9 >= 4)
        break;
      v12 = ++v13 < a3;
      v11 += 120;
    }
    while (a3 != v13);
    if (v12)
    {
      v27 = 0;
      *(_OWORD *)v25 = 0u;
      *(_OWORD *)v26 = 0u;
      WebCore::Layout::computedExpansions((uint64_t)result, a2, a3, 0, (uint64_t)v25, 0);
      if (v25[0] && a3 <= v10[3])
      {
        v16 = 0;
        v17 = (float)(a4 - (float)(a4 / (float)((unint64_t)v25[0] + 1))) / (float)(unint64_t)v25[0];
        v18 = 120 * a2;
        v19 = 0.0;
        while (1)
        {
          if (a2 + v16 >= v10[3])
          {
            __break(0xC471u);
            JUMPOUT(0x195E753C4);
          }
          v20 = *(_QWORD *)v10;
          *(float *)(*(_QWORD *)v10 + v18 + 24) = v19 + *(float *)(*(_QWORD *)v10 + v18 + 24);
          if (v16 >= HIDWORD(v26[0]))
          {
            __break(0xC471u);
            JUMPOUT(0x195E753CCLL);
          }
          if (v16 >= HIDWORD(v27))
            break;
          *(float *)&v21 = v17 * (float)*((unint64_t *)v25[1] + v16);
          v15 = v15 & 0xFFFFFF00 | *((unsigned __int8 *)v26[1] + v16);
          v22 = v20 + v18;
          v23 = *(float *)&v21 + *(float *)(v22 + 28);
          v19 = v19 + *(float *)&v21;
          *(_QWORD *)(v22 + 32) = v15 | ((unint64_t)v21 << 32);
          *(float *)(v22 + 28) = v23;
          ++v16;
          v18 += 120;
          if (a3 - a2 == v16)
            goto LABEL_23;
        }
        __break(0xC471u);
LABEL_32:
        JUMPOUT(0x195E753BCLL);
      }
LABEL_23:
      v24 = v26[1];
      if (v26[1])
      {
        v26[1] = 0;
        LODWORD(v27) = 0;
        WTF::fastFree(v24, v14);
      }
      result = (unsigned int *)v25[1];
      if (v25[1])
      {
        v25[1] = 0;
        LODWORD(v26[0]) = 0;
        return (unsigned int *)WTF::fastFree((WTF *)result, v14);
      }
    }
  }
  return result;
}

unint64_t WebCore::Layout::InlineContentAligner::applyRubyBaseAlignmentOffset(unint64_t result, uint64_t *a2, char a3, _QWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  float v9;
  uint64_t *v10;
  WebCore::Layout::LayoutState *v11;
  unsigned int v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  __int16 v18;
  int v19;
  int v20;
  float v22;
  _DWORD *v23;
  BOOL v24;
  double v25;
  int v26;
  BOOL v27;
  int v28;
  float v29;
  unint64_t v30;

  v7 = result;
  v8 = *(unsigned int *)(result + 12);
  if ((_DWORD)v8)
  {
    result = 0;
    if ((a3 & 1) != 0)
    {
      do
      {
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 80 * result) + 32) & 0x1FLL) == 0x18)
        {
          result = WebCore::Layout::shiftRubyBaseContentByAlignmentOffset(result, 0, v7, a2, 1, a4);
          v8 = *(unsigned int *)(v7 + 12);
        }
        else
        {
          ++result;
        }
      }
      while (result < v8);
    }
    else
    {
      v9 = 0.0;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)v7 + 80 * result);
        if (v9 != 0.0)
        {
          v11 = (WebCore::Layout::LayoutState *)a4[1];
          v12 = ((*(_DWORD *)(*a4 + 60) >> 13) & 6) - 2;
          v13 = *(_QWORD *)v7 + 80 * result;
          v14 = v12 >= 4 ? v9 : 0.0;
          v15 = v12 >= 4 ? 0.0 : v9;
          v16 = *(float *)(v13 + 12) + v15;
          *(float *)(v13 + 8) = *(float *)(v13 + 8) + v14;
          *(float *)(v13 + 12) = v16;
          v17 = v15 + *(float *)(v13 + 28);
          *(float *)(v13 + 24) = *(float *)(v13 + 24) + v14;
          *(float *)(v13 + 28) = v17;
          v18 = *(_WORD *)(v13 + 50);
          v19 = v18 & 0xE;
          v20 = v18 & 0xB;
          if (v19 && v20 != 3)
          {
            v29 = v9;
            v30 = result;
            v23 = *(_DWORD **)(*v10 + 104);
            if (*((_DWORD *)v11 + 2))
              v24 = 1;
            else
              v24 = v23 == 0;
            if (v24)
              v23 = (_DWORD *)WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v11, *v10);
            v9 = v29;
            v25 = v29 * 64.0;
            v26 = (int)v25;
            if (v25 <= -2147483650.0)
              v26 = 0x80000000;
            if (v25 >= 2147483650.0)
              v26 = 0x7FFFFFFF;
            v27 = __OFADD__(*v23, v26);
            v28 = *v23 + v26;
            if (v27)
              v28 = (*v23 >> 31) + 0x7FFFFFFF;
            *v23 = v28;
            result = v30;
          }
        }
        if ((*(_QWORD *)(*v10 + 32) & 0x1FLL) == 0x18)
        {
          result = WebCore::Layout::shiftRubyBaseContentByAlignmentOffset(result, SLODWORD(v9), v7, a2, 0, a4);
          v9 = v22;
        }
        else
        {
          ++result;
        }
      }
      while (result < *(unsigned int *)(v7 + 12));
    }
  }
  if ((a3 & 1) == 0)
    return WebCore::Layout::expandInlineBoxWithDescendants(0, v7, a2, a4);
  return result;
}

unint64_t WebCore::Layout::shiftRubyBaseContentByAlignmentOffset(unint64_t result, int a2, uint64_t a3, uint64_t *a4, int a5, _QWORD *a6)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v12;
  float v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::Layout::LayoutState *v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  __int16 v34;
  int v35;
  int v36;
  float v38;
  float v39;
  _DWORD *v40;
  BOOL v41;
  double v42;
  int v43;
  BOOL v44;
  int v45;
  unint64_t v46;
  WebCore::Layout::Box *v47;

  v6 = *(unsigned int *)(a3 + 12);
  if (result < v6)
  {
    v8 = *(_QWORD *)(*(_QWORD *)a3 + 80 * result);
    if ((*(_QWORD *)(v8 + 32) & 0x1FLL) == 0x18)
    {
      v12 = *a4;
      v13 = 0.0;
      if (*a4)
      {
        v14 = *(_DWORD *)(v12 - 8);
        v15 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = *(_QWORD *)(v12 + 16 * v18);
        if (v19 != v8)
        {
          v20 = 1;
          while (v19)
          {
            v18 = ((_DWORD)v18 + v20) & v14;
            v19 = *(_QWORD *)(v12 + 16 * v18);
            ++v20;
            if (v19 == v8)
              goto LABEL_11;
          }
          v18 = *(unsigned int *)(v12 - 4);
        }
LABEL_11:
        if (v18 != *(_DWORD *)(v12 - 4))
          v13 = *(float *)(v12 + 16 * v18 + 8);
      }
      if (++result < v6)
      {
        v21 = *a6;
        do
        {
          v22 = *(_QWORD *)(*(_QWORD *)a3 + 80 * result);
          v23 = v22;
          while (1)
          {
            v23 = *(_QWORD *)(v23 + 80);
            if (v23 == v8)
              break;
            v24 = *(_QWORD *)(v23 + 32) & 0x1FLL;
            if (v24 == 22 || v24 == 24 || v23 == v21)
              return result;
          }
          if ((*(_QWORD *)(v22 + 32) & 0x1FLL) != 0x19 && (float)(v13 + *(float *)&a2) != 0.0)
          {
            v27 = (WebCore::Layout::LayoutState *)a6[1];
            v28 = ((*(_DWORD *)(*a6 + 60) >> 13) & 6) - 2;
            v29 = *(_QWORD *)a3 + 80 * result;
            v30 = v28 >= 4 ? v13 + *(float *)&a2 : 0.0;
            v31 = v28 >= 4 ? 0.0 : v13 + *(float *)&a2;
            v32 = *(float *)(v29 + 12) + v31;
            *(float *)(v29 + 8) = *(float *)(v29 + 8) + v30;
            *(float *)(v29 + 12) = v32;
            v33 = v31 + *(float *)(v29 + 28);
            *(float *)(v29 + 24) = *(float *)(v29 + 24) + v30;
            *(float *)(v29 + 28) = v33;
            v34 = *(_WORD *)(v29 + 50);
            v35 = v34 & 0xE;
            v36 = v34 & 0xB;
            if (v35 && v36 != 3)
            {
              v46 = result;
              v47 = (WebCore::Layout::Box *)v22;
              v40 = *(_DWORD **)(v22 + 104);
              if (*((_DWORD *)v27 + 2))
                v41 = 1;
              else
                v41 = v40 == 0;
              if (v41)
                v40 = (_DWORD *)WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v27, v22);
              v42 = (float)(v13 + *(float *)&a2) * 64.0;
              if (v42 >= 2147483650.0)
              {
                v43 = 0x7FFFFFFF;
              }
              else if (v42 <= -2147483650.0)
              {
                v43 = 0x80000000;
              }
              else
              {
                v43 = (int)v42;
              }
              v44 = __OFADD__(*v40, v43);
              v45 = *v40 + v43;
              if (v44)
                v45 = (*v40 >> 31) + 0x7FFFFFFF;
              *v40 = v45;
              result = v46;
              v22 = (uint64_t)v47;
            }
          }
          if ((*(_QWORD *)(v22 + 32) & 0x1FLL) == 0x18)
          {
            result = WebCore::Layout::shiftRubyBaseContentByAlignmentOffset();
            v39 = v38;
            if (a5)
              v39 = -0.0;
            *(float *)&a2 = *(float *)&a2 + v39;
          }
          else
          {
            ++result;
          }
        }
        while (result < *(unsigned int *)(a3 + 12));
      }
    }
  }
  return result;
}

unint64_t WebCore::Layout::expandInlineBoxWithDescendants(unint64_t result, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  _WORD *v13;
  float v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  float v23;
  uint64_t v25;
  WebCore::Layout::LayoutState *v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  double v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;

  v4 = result;
  v5 = *(unsigned int *)(a2 + 12);
  if (v5 <= result || (*(_WORD *)(*(_QWORD *)a2 + 80 * result + 50) & 0xE) != 6)
    return result;
  v9 = *(_QWORD *)(*(_QWORD *)a2 + 80 * result);
  v10 = result + 1;
  v11 = 0.0;
  v12 = 0.0;
  if (result + 1 < v5)
  {
    while (2)
    {
      v13 = (_WORD *)(*(_QWORD *)a2 + 80 * v10);
      result = v10;
      while (1)
      {
        if (*(_QWORD *)(*(_QWORD *)v13 + 80) != v9)
        {
          v10 = result;
          goto LABEL_16;
        }
        if ((v13[25] & 0xE) == 6)
          break;
        ++result;
        v13 += 40;
        if (result >= v5)
        {
          if (v5 <= v10 + 1)
            ++v10;
          else
            v10 = v5;
          goto LABEL_16;
        }
      }
      result = WebCore::Layout::expandInlineBoxWithDescendants(result, a2, a3, a4);
      v10 = result;
      v12 = v12 + v14;
      v5 = *(unsigned int *)(a2 + 12);
      if (result < v5)
        continue;
      break;
    }
  }
LABEL_16:
  v15 = *a3;
  if (*a3)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(_QWORD *)(v15 + 16 * v20);
    if (v21 != v9)
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(_QWORD *)(v15 + 16 * v20);
        ++v22;
        if (v21 == v9)
          goto LABEL_23;
      }
      v20 = *(unsigned int *)(v15 - 4);
    }
LABEL_23:
    if (v20 != *(_DWORD *)(v15 - 4))
      v11 = *(float *)(v15 + 16 * v20 + 8);
  }
  v23 = v12 + (float)(v11 * 2.0);
  if (!v4)
    return v10;
  if (v5 > v4)
  {
    if (v23 != 0.0 && (*(_WORD *)(*(_QWORD *)a2 + 80 * v4 + 50) & 0xE) == 6)
    {
      v25 = *(_QWORD *)a2 + 80 * v4;
      v26 = (WebCore::Layout::LayoutState *)a4[1];
      v27 = ((*(_DWORD *)(*a4 + 60) >> 13) & 6) - 2;
      v28 = 0.0;
      if (v27 >= 4)
        v29 = v23;
      else
        v29 = 0.0;
      if (v27 < 4)
        v28 = v23;
      v30 = *(float *)(v25 + 20) + v28;
      *(float *)(v25 + 16) = *(float *)(v25 + 16) + v29;
      *(float *)(v25 + 20) = v30;
      v31 = v28 + *(float *)(v25 + 36);
      *(float *)(v25 + 32) = *(float *)(v25 + 32) + v29;
      *(float *)(v25 + 36) = v31;
      v32 = *(_QWORD *)v25;
      if (*((_DWORD *)v26 + 2) || (v33 = *(_QWORD *)(v32 + 104)) == 0)
        v33 = WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v26, v32);
      v34 = *(_DWORD *)(v33 + 8);
      v35 = v23 * 64.0;
      if (v35 > -2147483650.0)
        v36 = (int)v35;
      else
        v36 = 0x80000000;
      if (v35 >= 2147483650.0)
        v36 = 0x7FFFFFFF;
      v37 = __OFADD__(v34, v36);
      v38 = v34 + v36;
      v39 = (v34 >> 31) + 0x7FFFFFFF;
      if (!v37)
        v39 = v38;
      *(_DWORD *)(v33 + 8) = v39;
    }
    return v10;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WebCore::Layout::InlineContentAligner::applyRubyAnnotationAlignmentOffset(uint64_t *result, _QWORD *a2, float a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  int v7;
  int v8;
  uint64_t v9;
  WebCore::Layout::LayoutState *v10;
  unsigned int v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  __int16 v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  _DWORD *v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  float v29;
  unint64_t v30;

  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3 && a3 != 0.0)
  {
    v4 = 0;
    v5 = 0;
    v6 = a3 * 64.0;
    v7 = (int)fmax(v6, -2147483650.0);
    if (v6 < 2147483650.0)
      v8 = v7;
    else
      v8 = 0x7FFFFFFF;
    do
    {
      v9 = *result;
      v10 = (WebCore::Layout::LayoutState *)a2[1];
      v11 = ((*(_DWORD *)(*a2 + 60) >> 13) & 6) - 2;
      v12 = *result + v4;
      if (v11 >= 4)
        v13 = a3;
      else
        v13 = 0.0;
      if (v11 >= 4)
        v14 = 0.0;
      else
        v14 = a3;
      v15 = *(float *)(v12 + 12) + v14;
      *(float *)(v12 + 8) = *(float *)(v12 + 8) + v13;
      *(float *)(v12 + 12) = v15;
      v16 = v14 + *(float *)(v12 + 28);
      *(float *)(v12 + 24) = *(float *)(v12 + 24) + v13;
      *(float *)(v12 + 28) = v16;
      v17 = *(_WORD *)(v12 + 50);
      v18 = v17 & 0xE;
      v19 = v17 & 0xB;
      if (v18)
        v20 = v19 == 3;
      else
        v20 = 1;
      if (!v20)
      {
        v25 = v8;
        v30 = v5;
        v26 = result;
        v29 = a3;
        v27 = v4;
        v28 = a2;
        v21 = *(_QWORD *)(v9 + v4);
        v22 = *(_DWORD **)(v21 + 104);
        if (*((_DWORD *)v10 + 2))
          v23 = 1;
        else
          v23 = v22 == 0;
        if (v23)
          v22 = (_DWORD *)WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v10, v21);
        v8 = v25;
        v24 = (*v22 >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(*v22, v25))
          v24 = *v22 + v25;
        *v22 = v24;
        result = v26;
        v4 = v27;
        v3 = *((unsigned int *)v26 + 3);
        a2 = v28;
        a3 = v29;
        v5 = v30;
      }
      ++v5;
      v4 += 80;
    }
    while (v5 < v3);
  }
  return result;
}

void WebCore::Layout::InlineContentBalancer::initialize(uint64_t **this)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t *v6;
  unint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  const WebCore::Layout::InlineItem *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  __int16 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  int *v40;
  float v41;
  float v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  __int128 v46;
  __int128 v47;
  BOOL v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  float v61;
  void *v62;
  float v63;
  float v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  BOOL v69;
  WTF *v70;
  int v71;
  int v72;
  WTF *v73;
  int v74;
  WTF *v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  char **v79;
  int v80;
  float v81;
  WebCore::Layout::InlineContentBalancer *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  float v86;
  float v87[5];
  char v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  WTF *v94;
  uint64_t v95;
  unsigned __int8 v96;
  int v97;
  char v98;
  char v99;
  __int128 v100;
  BOOL v101;
  BOOL v102;
  char v103;
  WTF *v104;
  int v105;
  int v106;
  unsigned __int8 v107;
  uint64_t (**v108)();
  uint64_t *v109;
  _QWORD v110[2];
  _QWORD v111[151];
  char v112;
  char v113;
  char v114;
  __int128 v115;
  char v116;
  char v117;
  int v118;
  uint64_t v119;
  char v120;
  char v121;
  _QWORD v122[2];
  int v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  _BYTE v130[336];
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  __int16 v134;
  char v135;
  char v136;
  uint64_t *v137;
  __int128 v138;
  uint64_t v139;
  int v140;
  __int128 v141;
  __int128 v142;
  char v143;
  char v144;
  _BYTE *v145;
  uint64_t v146;
  _BYTE v147[48];

  v3 = (*this)[8];
  v80 = *(unsigned __int8 *)(v3 + 24);
  if (*(_BYTE *)(v3 + 24))
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)(v3 + 16);
  else
    v4 = 0;
  if (*(_DWORD *)(*(_QWORD *)v3 + 20))
  {
LABEL_5:
    *((_BYTE *)this + 128) = 1;
    return;
  }
  if (*(_BYTE *)(v3 + 24))
    v5 = v4 == 1;
  else
    v5 = 0;
  if (v5)
  {
    *((_BYTE *)this + 129) = 1;
  }
  else
  {
    v76 = v4;
    v6 = this[2];
    v7 = *((unsigned int *)this[1] + 3);
    this[14] = (uint64_t *)v7;
    *((double *)this + 15) = (double)*((int *)v6 + 1) * 0.015625;
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)(this + 9), v7);
    if (this[14])
    {
      v1 = 0;
      do
      {
        v9 = this[1];
        if (v1 >= *((unsigned int *)v9 + 3))
        {
LABEL_105:
          __break(0xC471u);
          JUMPOUT(0x195E7653CLL);
        }
        v10 = *v9;
        v11 = (const WebCore::Layout::InlineItem *)(*v9 + 24 * v1);
        v12 = *(_QWORD *)v11;
        v13 = *(_QWORD *)(*(_QWORD *)v11 + 32);
        v14 = (v13 & 0x1Fu) > 0x19 || ((1 << (v13 & 0x1F)) & 0x3528001) == 0;
        v15 = *(_QWORD *)(*(_QWORD *)v11 + 32) & 0x1FLL;
        v16 = !v14 || v15 == 5;
        if (!v16 && v15 != 3)
          goto LABEL_5;
        v18 = *(_WORD *)(v10 + 24 * v1 + 21);
        if ((*(_BYTE *)(*(_QWORD *)(v12 + 40) + 230) & 0xC0) != 0 && (v18 & 0x8F) == 0x80)
          goto LABEL_5;
        if ((v18 & 0x3F) == 0x10)
        {
          if ((*(_WORD *)(v12 + 12) & 0x20) == 0)
            goto LABEL_105;
          if ((*(_DWORD *)(v12 + 56) & 0x28000000) == 0x8000000)
          {
            v20 = *(_DWORD *)(v10 + 24 * v1 + 12);
            v19 = *(unsigned int *)(v10 + 24 * v1 + 16);
            v21 = (v20 + v19);
            if (v19 < v21)
            {
              v22 = *(_QWORD *)(v12 + 120);
              if (v22)
              {
                do
                {
                  if (*(_DWORD *)(v22 + 4) > v19)
                  {
                    v23 = *(_QWORD *)(v22 + 8);
                    v24 = (*(_BYTE *)(v22 + 16) & 4) != 0
                        ? *(unsigned __int8 *)(v23 + v19)
                        : *(unsigned __int16 *)(v23 + 2 * v19);
                    if (v24 == 9)
                      goto LABEL_5;
                  }
                }
                while (v21 != ++v19);
              }
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 68) & 8) != 0)
          goto LABEL_5;
        v25 = WebCore::Layout::InlineFormattingUtils::inlineItemWidth((WebCore::Layout::InlineFormattingUtils *)(*this + 5), v11, 0.0, 0);
        *(float *)&v108 = v25;
        v26 = *((unsigned int *)this + 21);
        if ((_DWORD)v26 == *((_DWORD *)this + 20))
        {
          WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>((uint64_t)(this + 9), (unint64_t)&v108);
        }
        else
        {
          *((float *)this[9] + v26) = v25;
          *((_DWORD *)this + 21) = v26 + 1;
        }
        v27 = WebCore::Layout::InlineFormattingUtils::inlineItemWidth((WebCore::Layout::InlineFormattingUtils *)(*this + 5), v11, 0.0, 1);
        *(float *)&v108 = v27;
        v28 = *((unsigned int *)this + 25);
        if ((_DWORD)v28 == *((_DWORD *)this + 24))
        {
          WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>((uint64_t)(this + 11), (unint64_t)&v108);
        }
        else
        {
          *((float *)this[11] + v28) = v27;
          *((_DWORD *)this + 25) = v28 + 1;
        }
      }
      while (++v1 < (unint64_t)this[14]);
    }
    v29 = this[1];
    v30 = *((unsigned int *)v29 + 3);
    v31 = *this[2];
    v32 = **this;
    v109 = *this;
    v110[0] = v111;
    v110[1] = 10;
    v111[150] = v110;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v116 = 0;
    v117 = 0;
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v123 = 0;
    v115 = 0u;
    *(_QWORD *)((char *)v122 + 7) = 0;
    v122[0] = 0;
    v124 = 0u;
    v125 = 0u;
    v33 = *v29;
    v34 = *((unsigned int *)v29 + 3);
    v126 = v33;
    v127 = v34;
    v128 = v130;
    v129 = 32;
    v130[256] = 0;
    v130[280] = 0;
    v130[288] = 0;
    v130[328] = 0;
    v131 = v109;
    v132 = v32;
    v133 = v31;
    v134 = 0;
    v135 = 0;
    v136 = 0;
    v108 = &off_1E33F2C50;
    v137 = v109 + 2;
    v144 = 0;
    v140 = 0;
    v139 = 0;
    v138 = 0u;
    v143 = 0;
    v142 = 0u;
    v141 = 0u;
    v145 = v147;
    v146 = 1;
    v147[24] = 0;
    v147[28] = 0;
    v147[32] = 0;
    LOBYTE(v100) = 0;
    v107 = 0;
    if ((_DWORD)v30)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v79 = (char **)(this + 7);
      v78 = this + 3;
      v39 = 1;
      v77 = v30;
      while (1)
      {
        v40 = (int *)this[2];
        v41 = (float)*v40 * 0.015625;
        v42 = (float)v40[1] * 0.015625;
        v82 = (WebCore::Layout::InlineContentBalancer *)v37;
        v83 = v36;
        v84 = v30;
        v85 = 0;
        v86 = v41;
        v87[0] = 0.0;
        v87[1] = v42;
        v87[2] = 0.0;
        WebCore::Layout::LineBuilder::layoutInlineContent((uint64_t)&v108, &v82, &v100, (uint64_t)&v89);
        v43 = *((unsigned int *)this + 9);
        if ((_DWORD)v43 == *((_DWORD *)this + 8))
        {
          v44 = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v78, v43 + 1, (unint64_t)&v89);
          v45 = &this[3][4 * *((unsigned int *)this + 9)];
          v46 = *(_OWORD *)v44;
          v47 = *((_OWORD *)v44 + 1);
        }
        else
        {
          v45 = (uint64_t *)(*v78 + 32 * v43);
          v46 = v89;
          v47 = v90;
        }
        *(_OWORD *)v45 = v46;
        *((_OWORD *)v45 + 1) = v47;
        ++*((_DWORD *)this + 9);
        v48 = v92 && *(unsigned __int8 *)(v91 + 120 * v92 - 120) - 3 < 2;
        LOBYTE(v82) = v48;
        v49 = *((unsigned int *)this + 17);
        if ((_DWORD)v49 == *((_DWORD *)this + 16))
        {
          v50 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v79, (WTF *)(v49 + 1), (unint64_t)&v82);
          v49 = *((unsigned int *)this + 17);
          v51 = (char *)this[7];
          v51[v49] = *v50;
        }
        else
        {
          v51 = *v79;
          (*v79)[v49] = v48;
        }
        v52 = (v49 + 1);
        *((_DWORD *)this + 17) = v52;
        if (v35)
        {
          v53 = v35 - 1;
          if (v35 - 1 >= v52)
          {
            __break(0xC471u);
            JUMPOUT(0x195E76554);
          }
          v54 = v51[v53];
          v55 = (unint64_t)this[1];
          v56 = v90;
          v82 = (WebCore::Layout::InlineContentBalancer *)this;
          v83 = v55;
          v84 = v89;
          v85 = v89;
          LOBYTE(v86) = 0;
          BYTE1(v86) = v54;
          v88 = 0;
          memset(v87, 0, 13);
          if ((unint64_t)v89 < (unint64_t)v90)
          {
            do
              WebCore::Layout::InlineContentBalancer::SlidingWidth::advanceEnd((uint64_t *)&v82);
            while (v85 < v56);
            v52 = *((unsigned int *)this + 17);
          }
          if (v53 >= v52)
          {
            __break(0xC471u);
            JUMPOUT(0x195E7655CLL);
          }
          v57 = (*v79)[v53];
          v58 = 256;
        }
        else
        {
          v57 = 0;
          v58 = 0;
          v59 = (unint64_t)this[1];
          v60 = v90;
          v82 = (WebCore::Layout::InlineContentBalancer *)this;
          v83 = v59;
          v84 = v89;
          v85 = v89;
          LOWORD(v86) = 257;
          v88 = 0;
          memset(v87, 0, 13);
          if ((unint64_t)v89 < (unint64_t)v90)
          {
            do
              WebCore::Layout::InlineContentBalancer::SlidingWidth::advanceEnd((uint64_t *)&v82);
            while (v85 < v60);
            v57 = 0;
            v58 = 0;
          }
        }
        v61 = *((double *)this + 15);
        v1 = v1 & 0xFFFFFFFFFFFF0000 | v57 | v58;
        v63 = WebCore::Layout::InlineFormattingUtils::computedTextIndent((uint64_t **)*this + 5, 0, v1, v61);
        v64 = v63 + (float)((float)(v87[0] - v87[1]) - v87[2]);
        v81 = v64;
        v65 = *((unsigned int *)this + 13);
        if ((_DWORD)v65 == *((_DWORD *)this + 12))
        {
          WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>((uint64_t)(this + 5), (unint64_t)&v81);
        }
        else
        {
          *((float *)this[5] + v65) = v64;
          *((_DWORD *)this + 13) = v65 + 1;
        }
        v66 = v35 + 1;
        if (v80)
        {
          if (v66 >= v76)
            break;
        }
        v67 = v37 | v38;
        v68 = (v96 | v93) != 0;
        if (v39 & 1 | (v67 < (unint64_t)v90))
          goto LABEL_73;
        if (v67 != (_QWORD)v90)
          goto LABEL_90;
        if (*((_QWORD *)&v90 + 1) != v36)
          v68 = 0;
        if (v36 < *((_QWORD *)&v90 + 1) || v68)
        {
LABEL_73:
          v36 = *((_QWORD *)&v90 + 1);
          v37 = v90;
        }
        else
        {
LABEL_90:
          if (v90 == v77)
          {
            v36 = 0;
            v37 = v77;
          }
          else
          {
            v36 = 0;
            if (v77 >= (uint64_t)v90 + 1)
              v37 = v90 + 1;
            else
              v37 = v77;
          }
        }
        if (v92)
          v69 = *(unsigned __int8 *)(v91 + 120 * v92 - 120) - 3 < 2;
        else
          v69 = 0;
        v70 = v94;
        v94 = 0;
        v71 = v95;
        v72 = HIDWORD(v95);
        v95 = 0;
        *(_QWORD *)&v100 = v35;
        DWORD2(v100) = v97;
        BYTE12(v100) = v98;
        v101 = v69;
        v102 = v92 != 0;
        v103 = v99;
        if (v107)
        {
          v73 = v104;
          if (v104)
          {
            v104 = 0;
            v105 = 0;
            WTF::fastFree(v73, v62);
          }
          v104 = v70;
          v105 = v71;
          v106 = v72;
        }
        else
        {
          v104 = v70;
          v105 = v71;
          v106 = v72;
          v107 = 1;
        }
        v38 = v37 & 0xFFFFFFFFFFFFFF00;
        WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)&v89, v62);
        v39 = 0;
        ++v35;
        v30 = v77;
        if (v37 == v77)
        {
          v35 = v66;
          if (!v36)
            goto LABEL_97;
        }
      }
      WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)&v89, v62);
      v66 = v35;
LABEL_97:
      v74 = v107;
      this[13] = (uint64_t *)v66;
      if (v74)
      {
        v75 = v104;
        if (v104)
        {
          v104 = 0;
          v105 = 0;
          WTF::fastFree(v75, v8);
        }
      }
    }
    else
    {
      this[13] = 0;
    }
    WebCore::Layout::LineBuilder::~LineBuilder((WebCore::Layout::LineBuilder *)&v108, v8);
  }
}

WTF *WebCore::Layout::InlineContentBalancer::computeBalanceConstraints@<X0>(WTF *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  double *v4;
  unint64_t v5;
  WTF *v6;
  unsigned int v7;
  unint64_t i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  WTF *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float *v23;
  float v24;
  unint64_t v25;
  float v26;
  float v27;
  WTF *v28;
  WTF *WrapOpportunity;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  WTF *v34;
  WTF *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  float v41;
  float v42;
  float v43;
  unint64_t v44;
  float v45;
  unint64_t v46;
  WTF *v47;
  _QWORD *v48;
  unint64_t v49;
  BOOL v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  WTF *v56;
  WTF *v57;
  unint64_t v58;
  WTF *v59;
  _QWORD *v60;
  unint64_t v61;
  int v62;
  float v63;
  unint64_t v64;
  float v65;
  float v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  float v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  float v98;
  double v99;
  unint64_t v100;
  int v101;
  _QWORD *v102;
  unint64_t v103;
  float v104;
  float v105;
  float v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  __int16 v118;
  char *v119;
  __int16 v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  float v124;
  __int16 v125;
  __int16 v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  float v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  _WORD *v138;
  unint64_t v139;
  int v140;
  int v141;
  char *v142;
  _QWORD *v143;
  void *v144;
  float v145;
  float v146;
  unint64_t v147;
  float v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  float v157;
  uint64_t v158;
  uint64_t v159;
  __int16 v160;
  _WORD *v161;
  unint64_t v162;
  int v163;
  int v164;
  float v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  size_t v174;
  WTF *v175;
  WTF *v176;
  WTF *v177;
  _OWORD *v178;
  uint64_t v179;
  WTF *v180;
  __int128 v181;
  WTF *v182;
  unint64_t v183;
  WTF *v184;
  float v185;
  WTF *v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  WTF *v193;
  uint64_t v194;
  size_t v195;
  unint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  unint64_t v199;
  unint64_t v200;
  WTF *v201;
  float v202;
  unint64_t v203;
  unint64_t v204;
  float v205;
  int v206;
  unint64_t v207;
  float v208;
  float v209;
  _QWORD *v210;
  float v211;
  uint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int16 v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __int16 v222;
  _QWORD *v223;
  int v224;
  BOOL v225;
  _BOOL4 v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  float v239;
  int v240;
  WTF *v241;
  int v242;
  float v243;
  float v244;
  float v245;
  unint64_t j;
  unint64_t v247;
  _QWORD *v248;
  float v249;
  uint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  __int16 v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  __int16 v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  float v274;
  double v275;
  _DWORD *v276;
  unint64_t v277;
  int v278;
  _QWORD *v279;
  unint64_t v280;
  float v281;
  float v282;
  float v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  BOOL v289;
  uint64_t v290;
  float v291;
  uint64_t v292;
  unint64_t v293;
  char *v294;
  __int16 v295;
  char *v296;
  __int16 v297;
  int v298;
  unint64_t v299;
  uint64_t v300;
  float v301;
  __int16 v302;
  __int16 v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  float v311;
  uint64_t v312;
  uint64_t v313;
  __int16 v314;
  _WORD *v315;
  unint64_t v316;
  int v317;
  int v318;
  _QWORD *v319;
  unint64_t v320;
  unint64_t v321;
  float v322;
  float v323;
  float v324;
  char *v325;
  void *v326;
  unint64_t v327;
  void *v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  float v334;
  uint64_t v335;
  uint64_t v336;
  __int16 v337;
  _WORD *v338;
  unint64_t v339;
  int v340;
  int v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  float v346;
  float v347;
  float v348;
  float v349;
  BOOL v351;
  float v352;
  float v354;
  BOOL v356;
  unint64_t v357;
  WTF *v358;
  char *v359;
  float v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  char *v368;
  char *v369;
  WTF *v370;
  void *v371;
  unint64_t v372;
  _QWORD *v373;
  _QWORD *v374;
  unint64_t v375;
  WTF *v376;
  WTF *v377;
  float v378;
  unint64_t *v379;
  unint64_t v380;
  unint64_t v381;
  float v382;
  int v383;
  unint64_t v384;
  float v385;
  float v386;
  _QWORD *v387;
  float v388;
  uint64_t *v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  __int16 v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  __int16 v399;
  _QWORD *v400;
  int v401;
  BOOL v402;
  _BOOL4 v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  int v417;
  float v418;
  int v419;
  uint64_t v420;
  WTF *v421;
  char *v422;
  unsigned int v423;
  WTF *v424;
  uint64_t v425;
  unsigned int v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  unint64_t v430;
  WTF *v431;
  double v432;
  int v433;
  double v434;
  int v435;
  uint64_t v436;
  WTF *v437;
  WTF *v438;
  int v439;
  uint64_t v440;
  unsigned int v441;
  unint64_t v442;
  _DWORD *v443;
  _DWORD *v444;
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  float v449;
  float v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  float v463;
  float v464;
  float v465;
  float v466;
  float v467;
  float v468;
  unint64_t v469;
  unint64_t v470;
  float v471;
  float v472;
  float v473;
  float v474;
  float v475;
  float v476;
  float v477;
  float v478;
  float v479;
  float v480;
  float v481;
  float v482;
  uint64_t v483;
  unsigned int v484;
  float v485;
  float v486;
  WTF *v487;
  uint64_t v488;
  uint64_t v489;
  WTF *v490;
  float v491;
  float v492;
  float v493;
  float v494;
  float v495;
  float v496;
  BOOL v497;
  WTF *v498;
  unint64_t v499;
  unint64_t v500;
  WTF *v501;
  unint64_t v502;
  WTF *v503;
  unint64_t v504;
  float v505;
  float v506;
  BOOL v507;
  WTF *v508;
  unint64_t v509;
  uint64_t v510;
  float v511;
  float v512;
  WTF *v513;
  WTF *v514;
  WTF *v515;
  WTF *v516;
  WTF *v517;
  uint64_t v518;
  uint64_t v519;
  WTF *v520;
  uint64_t v521;
  WTF *v522;
  uint64_t v523;
  WTF *v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  _QWORD *v528;
  uint64_t v529;

  if (*((_BYTE *)this + 128) || (v4 = (double *)this, *((_BYTE *)this + 129)))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return this;
  }
  v520 = 0;
  v521 = 0;
  v5 = *((unsigned int *)this + 9);
  if (!(_DWORD)v5)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  v6 = 0;
  v7 = 0;
  for (i = 0; i < v5; i += v9 + 1)
  {
    v9 = 0;
    v10 = *((unsigned int *)v4 + 17);
    v112 = v10 >= i;
    v11 = v10 - i;
    if (v112)
      v12 = v11;
    else
      v12 = 0;
    while (1)
    {
      v13 = v9 + 1;
      if (v12 == v9)
      {
        v519 = v9 + 1;
        __break(0xC471u);
        JUMPOUT(0x195E79440);
      }
      if (*(_BYTE *)(*((_QWORD *)v4 + 7) + i + v9))
        break;
      ++v9;
      if (i + v13 >= v5)
      {
        v519 = v13;
        v14 = v521;
        if (v7 == (_DWORD)v521)
        {
          this = (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v520, v7 + 1, (unint64_t)&v519);
          v7 = HIDWORD(v521);
          v6 = v520;
          *((_QWORD *)v520 + HIDWORD(v521)) = *(_QWORD *)this;
        }
        else
        {
          *((_QWORD *)v6 + v7) = v13;
        }
        HIDWORD(v521) = ++v7;
        goto LABEL_24;
      }
    }
    v519 = v9 + 1;
    v14 = v7;
    if (v7 == (_DWORD)v521)
    {
      this = (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v520, v7 + 1, (unint64_t)&v519);
      v7 = HIDWORD(v521);
      v6 = v520;
      *((_QWORD *)v520 + HIDWORD(v521)) = *(_QWORD *)this;
      v5 = *((unsigned int *)v4 + 9);
    }
    else
    {
      *((_QWORD *)v6 + v7) = v9 + 1;
    }
    HIDWORD(v521) = ++v7;
    v519 = 0;
  }
LABEL_24:
  v517 = 0;
  v518 = 0;
  if (!v7)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
LABEL_777:
    v520 = 0;
    LODWORD(v521) = 0;
    return (WTF *)WTF::fastFree(v6, a2);
  }
  v483 = a3;
  v15 = 0;
  v498 = (WTF *)((char *)v6 + 8 * v7);
  do
  {
    v16 = *((unsigned int *)v4 + 9);
    if (v15 >= v16)
    {
      __break(0xC471u);
      JUMPOUT(0x195E79448);
    }
    v17 = *(_QWORD *)v6;
    v502 = *(_QWORD *)v6 + v15;
    if (v502 - 1 >= v16)
    {
      __break(0xC471u);
      JUMPOUT(0x195E79450);
    }
    v18 = *((_QWORD *)v4 + 3);
    v19 = *(WTF **)(v18 + 32 * v15);
    v20 = *(_QWORD *)(v18 + 32 * (v502 - 1) + 16);
    v501 = v6;
    if ((unint64_t)v19 >= v20)
      goto LABEL_728;
    if (v17)
    {
      v21 = *((unsigned int *)v4 + 13);
      v112 = v21 >= v15;
      v22 = v21 - v15;
      if (!v112)
        v22 = 0;
      if (v22 <= v17 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195E79458);
      }
      v23 = (float *)(*((_QWORD *)v4 + 5) + 4 * v15);
      v24 = 0.0;
      v25 = *(_QWORD *)v6;
      do
      {
        v26 = *v23++;
        v24 = v24 + v26;
        --v25;
      }
      while (v25);
    }
    else
    {
      v24 = 0.0;
    }
    v499 = v14;
    v500 = v15;
    v27 = v24 / (float)v17;
    v503 = v19;
    if (*((_QWORD *)v4 + 13) < 0xDuLL)
    {
      v524 = v19;
      v525 = 0;
      v526 = v20;
      v527 = 0;
      v528 = 0;
      v529 = 0;
      v28 = v19;
      v522 = v19;
      do
      {
        WrapOpportunity = WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity((uint64_t **)(*(_QWORD *)v4 + 40), (unint64_t)v28, (uint64_t)&v524, **((_QWORD **)v4 + 1), *(unsigned int *)(*((_QWORD *)v4 + 1) + 12));
        v522 = WrapOpportunity;
        v30 = HIDWORD(v529);
        if (HIDWORD(v529) == (_DWORD)v529)
        {
          v31 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v528, HIDWORD(v529) + 1, (unint64_t)&v522);
          v30 = HIDWORD(v529);
          v528[HIDWORD(v529)] = *v31;
        }
        else
        {
          v528[HIDWORD(v529)] = WrapOpportunity;
        }
        v32 = (v30 + 1);
        HIDWORD(v529) = v32;
        v28 = v522;
      }
      while ((unint64_t)v522 < v20);
      v522 = v503;
      if ((_DWORD)v32 == (_DWORD)v529)
      {
        v33 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v528, v32 + 1, (unint64_t)&v522);
        LODWORD(v32) = HIDWORD(v529);
      }
      else
      {
        v33 = &v522;
      }
      v40 = v528;
      memmove(v528 + 1, v528, 8 * v32);
      *v40 = *v33;
      v504 = ++HIDWORD(v529);
      v41 = v4[15];
      v42 = WebCore::Layout::InlineFormattingUtils::computedTextIndent((uint64_t **)(*(_QWORD *)v4 + 40), 0, (v15 != 0) | ((v15 != 0) << 8), v41);
      v43 = v4[15];
      v45 = WebCore::Layout::InlineFormattingUtils::computedTextIndent((uint64_t **)(*(_QWORD *)v4 + 40), 0, 256, v43);
      v46 = v17 + 1;
      if (v17 == -1)
      {
        v47 = 0;
      }
      else
      {
        if (v46 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x195E79498);
        }
        v166 = WTF::fastMalloc((WTF *)(16 * v46));
        v47 = (WTF *)v166;
        if ((_DWORD)v17 != -1)
        {
          v167 = 0;
          v168 = v4 + 9;
          v169 = v4 + 11;
          v170 = v500;
          v172 = (unint64_t)v503;
          v171 = v504;
          do
          {
            v173 = (_QWORD *)(v166 + v167);
            *v173 = 0;
            v173[1] = 0;
            *(_DWORD *)v173 = 2139095040;
            v167 += 16;
          }
          while (16 * v17 + 16 != v167);
          goto LABEL_274;
        }
      }
      v168 = v4 + 9;
      v169 = v4 + 11;
      v170 = v500;
      v172 = (unint64_t)v503;
      v171 = v504;
LABEL_274:
      v174 = 16 * v171;
      v510 = 16 * v171;
      if ((_DWORD)v171)
      {
        if (v171 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x195E794A0);
        }
        v175 = (WTF *)WTF::fastMalloc((WTF *)(16 * v171));
        if ((_DWORD)v17 == -1)
        {
          v241 = v175;
          bzero(v175, v174);
          v182 = v241;
          v168 = v4 + 9;
          v169 = v4 + 11;
          v170 = v500;
          v172 = (unint64_t)v503;
        }
        else
        {
          if (v46 >> 28)
          {
            *(_QWORD *)v175 = 0;
            *((_QWORD *)v175 + 1) = 0;
            *((_DWORD *)v175 + 3) = v46;
            __break(0xC471u);
            JUMPOUT(0x195E794B0);
          }
          v176 = (WTF *)((char *)v175 + 16 * v504);
          v514 = v175;
          v177 = v175;
          do
          {
            *(_QWORD *)v177 = 0;
            *((_QWORD *)v177 + 1) = 0;
            *((_DWORD *)v177 + 3) = v46;
            v178 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * (v17 + 1)));
            *((_DWORD *)v177 + 2) = v46;
            *(_QWORD *)v177 = v178;
            v179 = 16 * (v17 + 1);
            v180 = v47;
            do
            {
              v181 = *(_OWORD *)v180;
              v180 = (WTF *)((char *)v180 + 16);
              *v178++ = v181;
              v179 -= 16;
            }
            while (v179);
            v177 = (WTF *)((char *)v177 + 16);
          }
          while (v177 != v176);
          v168 = v4 + 9;
          v169 = v4 + 11;
          v170 = v500;
          v172 = (unint64_t)v503;
          v182 = v514;
        }
        v171 = v504;
      }
      else
      {
        v182 = 0;
      }
      v515 = v182;
      if (v47)
      {
        WTF::fastFree(v47, (void *)v44);
        v172 = (unint64_t)v503;
        v171 = v504;
        v182 = v515;
        v170 = v500;
        v168 = v4 + 9;
        v169 = v4 + 11;
      }
      if (!(_DWORD)v171)
      {
        __break(0xC471u);
        JUMPOUT(0x195E79488);
      }
      if (!*((_DWORD *)v182 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x195E79490);
      }
      **(_DWORD **)v182 = 0;
      if (v171 >= 2)
      {
        v242 = 0;
        v243 = 0.0;
        v244 = 0.0;
        v245 = 0.0;
        for (j = 1; j != v171; ++j)
        {
          if (j >= HIDWORD(v529))
          {
            __break(0xC471u);
            JUMPOUT(0x195E7940CLL);
          }
          v247 = v528[j];
          if (v172 < v247)
          {
            while (1)
            {
              if (v170)
              {
                v248 = v168;
                if (v172 >= *((unsigned int *)v4 + 21))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E792E4);
                }
              }
              else
              {
                v248 = v169;
                if (v172 >= *((unsigned int *)v4 + 25))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E79324);
                }
              }
              v249 = *(float *)(*v248 + 4 * v172);
              v250 = (uint64_t *)*((_QWORD *)v4 + 1);
              v251 = *((unsigned int *)v250 + 3);
              if (v242)
              {
                if (v172 >= v251)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E792ECLL);
                }
                v252 = *v250;
                v253 = *(_QWORD *)(*v250 + 24 * v172);
                if (v170 || (*(_WORD *)(v253 + 12) & 0x200) == 0)
                  goto LABEL_396;
                v479 = v249;
                v463 = v245;
                v471 = v243;
                v449 = v244;
                v262 = WebCore::Layout::Box::rareDataMap(void)::map;
                v445 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
                v263 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v253) & v445;
                if (*(_QWORD *)(v262 + 16 * v263) != v253)
                {
                  v264 = 1;
                  do
                    v263 = ((_DWORD)v263 + v264++) & v445;
                  while (*(_QWORD *)(v262 + 16 * v263) != v253);
                }
                v244 = v449;
                v245 = v463;
                v243 = v471;
                v249 = v479;
                v168 = v4 + 9;
                v169 = v4 + 11;
                v170 = v500;
                v182 = v515;
                v171 = v504;
                if (*(_QWORD *)(*(_QWORD *)(v262 + 16 * v263 + 8) + 24))
                {
                  v265 = WebCore::Layout::Box::rareDataMap(void)::map;
                  v446 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
                  v266 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v253) & v446;
                  if (*(_QWORD *)(v265 + 16 * v266) != v253)
                  {
                    v267 = 1;
                    do
                      v266 = ((_DWORD)v266 + v267++) & v446;
                    while (*(_QWORD *)(v265 + 16 * v266) != v253);
                  }
                  v254 = *(_QWORD *)(*(_QWORD *)(v265 + 16 * v266 + 8) + 24);
                  v244 = v449;
                  v245 = v463;
                  v243 = v471;
                  v249 = v479;
                  v168 = v4 + 9;
                  v169 = v4 + 11;
                  v170 = v500;
                  v182 = v515;
                  v171 = v504;
                }
                else
                {
LABEL_396:
                  v254 = v253 + 16;
                }
                v255 = *(_WORD *)(v252 + 24 * v172 + 21);
                if ((v255 & 0xFu) - 1 >= 2)
                {
                  if ((v255 & 0xF) != 0)
                  {
                    if (v170)
                    {
                      v256 = v168;
                      if (v172 >= *((unsigned int *)v4 + 21))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195E79354);
                      }
                    }
                    else
                    {
                      v256 = v169;
                      if (v172 >= *((unsigned int *)v4 + 25))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195E7941CLL);
                      }
                    }
                    if (*(float *)(*v256 + 4 * v172) > 0.0)
                    {
LABEL_417:
                      v242 = 1;
                      v243 = 0.0;
                      goto LABEL_424;
                    }
                  }
                  else if ((v255 & 0x30) != 0x10 || (*(_DWORD *)(v254 + 40) & 0x38000000) == 0x18000000)
                  {
                    goto LABEL_417;
                  }
                }
                v243 = v243 + v249;
              }
              else
              {
                if (v172 >= v251)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E7932CLL);
                }
                v257 = *v250;
                v258 = *(_QWORD *)(*v250 + 24 * v172);
                if (v170 || (*(_WORD *)(v258 + 12) & 0x200) == 0)
                  goto LABEL_405;
                v480 = v249;
                v464 = v245;
                v472 = v243;
                v450 = v244;
                v268 = WebCore::Layout::Box::rareDataMap(void)::map;
                v447 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
                v269 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v258) & v447;
                if (*(_QWORD *)(v268 + 16 * v269) != v258)
                {
                  v270 = 1;
                  do
                    v269 = ((_DWORD)v269 + v270++) & v447;
                  while (*(_QWORD *)(v268 + 16 * v269) != v258);
                }
                v244 = v450;
                v245 = v464;
                v243 = v472;
                v249 = v480;
                v168 = v4 + 9;
                v169 = v4 + 11;
                v170 = v500;
                v182 = v515;
                v171 = v504;
                if (*(_QWORD *)(*(_QWORD *)(v268 + 16 * v269 + 8) + 24))
                {
                  v271 = WebCore::Layout::Box::rareDataMap(void)::map;
                  v448 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
                  v272 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v258) & v448;
                  if (*(_QWORD *)(v271 + 16 * v272) != v258)
                  {
                    v273 = 1;
                    do
                      v272 = ((_DWORD)v272 + v273++) & v448;
                    while (*(_QWORD *)(v271 + 16 * v272) != v258);
                  }
                  v259 = *(_QWORD *)(*(_QWORD *)(v271 + 16 * v272 + 8) + 24);
                  v244 = v450;
                  v245 = v464;
                  v243 = v472;
                  v249 = v480;
                  v168 = v4 + 9;
                  v169 = v4 + 11;
                  v170 = v500;
                  v182 = v515;
                  v171 = v504;
                }
                else
                {
LABEL_405:
                  v259 = v258 + 16;
                }
                v260 = *(_WORD *)(v257 + 24 * v172 + 21);
                if ((v260 & 0xFu) - 1 < 2)
                {
LABEL_423:
                  v242 = 0;
                  v244 = v244 + v249;
                  goto LABEL_424;
                }
                if ((v260 & 0xF) != 0)
                {
                  if (v170)
                  {
                    v261 = v168;
                    if (v172 >= *((unsigned int *)v4 + 21))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195E79414);
                    }
                  }
                  else
                  {
                    v261 = v169;
                    if (v172 >= *((unsigned int *)v4 + 25))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195E79424);
                    }
                  }
                  if (*(float *)(*v261 + 4 * v172) <= 0.0)
                    goto LABEL_423;
                }
                else if ((v260 & 0x30) == 0x10 && (*(_DWORD *)(v259 + 40) & 0x28000000) != 0x8000000)
                {
                  goto LABEL_423;
                }
              }
              v242 = 1;
LABEL_424:
              v245 = v245 + v249;
              if (++v172 == v247)
              {
                v172 = v247;
                break;
              }
            }
          }
          v274 = v42 + (float)((float)(v245 - v244) - v243);
          v275 = v4[15];
          if (v275 < v274)
            break;
          v276 = (_DWORD *)((char *)v182 + 16 * j);
          if (v276[3] <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x195E79434);
          }
          *(float *)(*(_QWORD *)v276 + 16) = (float)(v27 - v274) * (float)(v27 - v274);
        }
        v277 = HIDWORD(v529);
        if (HIDWORD(v529) <= 1)
        {
LABEL_852:
          __break(0xC471u);
          JUMPOUT(0x195E79478);
        }
        v278 = 0;
        v279 = v528;
        v280 = v528[1];
        v281 = 0.0;
        v282 = 0.0;
        v283 = 0.0;
        v284 = v280;
        v285 = 1;
        v286 = 1;
        while (1)
        {
          if (v285 == v277)
          {
            __break(0xC471u);
            JUMPOUT(0x195E79374);
          }
          v287 = v279[v285];
          if (v280 < v287)
          {
            v288 = *((unsigned int *)v4 + 21);
            v289 = v280 >= v288;
            if (v280 > v288)
              v288 = v280;
            if (v289)
            {
LABEL_804:
              __break(0xC471u);
              JUMPOUT(0x195E7929CLL);
            }
            v290 = *((_QWORD *)v4 + 9);
            v291 = *(float *)(v290 + 4 * v280);
            v292 = *((_QWORD *)v4 + 1);
            v293 = *(unsigned int *)(v292 + 12);
            if (v278)
            {
              if (v280 >= v293)
              {
LABEL_809:
                __break(0xC471u);
                JUMPOUT(0x195E792CCLL);
              }
              v44 = *(_QWORD *)v292;
              v294 = (char *)(v44 + 24 * v280);
              v295 = *(_WORD *)(v294 + 21);
              if ((v295 & 0xFu) - 1 < 2)
                goto LABEL_466;
              if ((v295 & 0xF) != 0)
              {
                if (v291 <= 0.0)
                {
LABEL_466:
                  v283 = v283 + v291;
LABEL_470:
                  v298 = 1;
                  goto LABEL_472;
                }
              }
              else if ((v295 & 0x30) == 0x10 && (*(_DWORD *)(*(_QWORD *)v294 + 56) & 0x38000000) != 0x18000000)
              {
                goto LABEL_466;
              }
              v298 = 1;
              v283 = 0.0;
LABEL_472:
              v281 = v281 + v291;
              v299 = v280 + 1;
              if (v280 + 1 == v287)
              {
LABEL_496:
                v280 = v279[v285];
                goto LABEL_497;
              }
              v300 = 24 * v280;
              while (1)
              {
                if (v288 == v299)
                  goto LABEL_804;
                v301 = *(float *)(v290 + 4 * v299);
                if (!v298)
                  break;
                if (v299 >= v293)
                  goto LABEL_809;
                v302 = *(_WORD *)(v44 + v300 + 45);
                if ((v302 & 0xFu) - 1 < 2)
                {
LABEL_489:
                  v283 = v283 + v301;
LABEL_493:
                  v298 = 1;
                  goto LABEL_495;
                }
                if ((v302 & 0xF) != 0)
                {
                  if (v301 <= 0.0)
                    goto LABEL_489;
                }
                else if ((v302 & 0x30) == 0x10
                       && (*(_DWORD *)(*(_QWORD *)(v44 + v300 + 24) + 56) & 0x38000000) != 0x18000000)
                {
                  goto LABEL_489;
                }
                v298 = 1;
                v283 = 0.0;
LABEL_495:
                v281 = v281 + v301;
                ++v299;
                v300 += 24;
                if (v287 == v299)
                  goto LABEL_496;
              }
              if (v299 >= v293)
                goto LABEL_815;
              v303 = *(_WORD *)(v44 + v300 + 45);
              if ((v303 & 0xFu) - 1 < 2)
              {
LABEL_494:
                v298 = 0;
                v282 = v282 + v301;
                goto LABEL_495;
              }
              if ((v303 & 0xF) != 0)
              {
                if (v301 <= 0.0)
                  goto LABEL_494;
              }
              else if ((v303 & 0x30) == 0x10
                     && (*(_DWORD *)(*(_QWORD *)(v44 + v300 + 24) + 56) & 0x38000000) != 0x18000000)
              {
                goto LABEL_494;
              }
              v278 = 1;
              goto LABEL_493;
            }
            if (v280 >= v293)
            {
LABEL_815:
              __break(0xC471u);
              JUMPOUT(0x195E7930CLL);
            }
            v44 = *(_QWORD *)v292;
            v296 = (char *)(v44 + 24 * v280);
            v297 = *(_WORD *)(v296 + 21);
            if ((v297 & 0xFu) - 1 >= 2)
            {
              if ((v297 & 0xF) != 0)
              {
                if (v291 <= 0.0)
                  goto LABEL_471;
              }
              else if ((v297 & 0x30) == 0x10 && (*(_DWORD *)(*(_QWORD *)v296 + 56) & 0x38000000) != 0x18000000)
              {
                goto LABEL_471;
              }
              v278 = 1;
              goto LABEL_470;
            }
LABEL_471:
            v278 = 0;
            v298 = 0;
            v282 = v282 + v291;
            goto LABEL_472;
          }
LABEL_497:
          while (v275 < (float)(v45 + (float)((float)(v281 - v282) - v283)))
          {
            if (++v286 > v285)
              break;
            v304 = v279[v286];
            if (v284 < v304)
            {
              v305 = *((unsigned int *)v4 + 21);
              if (v284 <= v305)
                v306 = *((unsigned int *)v4 + 21);
              else
                v306 = v284;
              v307 = 24 * v284 + 45;
              while (1)
              {
                if (v284 == v306)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E79244);
                }
                v308 = v284;
                v309 = (uint64_t *)*((_QWORD *)v4 + 1);
                v44 = *((unsigned int *)v309 + 3);
                if (v284 >= v44)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E7925CLL);
                }
                v310 = *((_QWORD *)v4 + 9);
                v311 = *(float *)(v310 + 4 * v284);
                v281 = v281 - v311;
                ++v284;
                v312 = *v309;
                v313 = v312 + 24 * v308;
                v314 = *(_WORD *)(v313 + 21);
                if ((v314 & 0xFu) - 1 >= 2)
                {
                  if ((v314 & 0xF) != 0)
                  {
                    if (v311 > 0.0)
                      goto LABEL_512;
                  }
                  else if ((v314 & 0x30) != 0x10 || (*(_DWORD *)(*(_QWORD *)v313 + 56) & 0x38000000) == 0x18000000)
                  {
LABEL_512:
                    if (v284 < v280)
                    {
                      v315 = (_WORD *)(v312 + v307);
                      v282 = 0.0;
                      v316 = v284;
                      if (v44 <= v305)
                      {
                        while (v316 < v44)
                        {
                          v317 = *v315 & 0xF;
                          if ((v317 - 1) >= 2)
                          {
                            if (v317)
                            {
                              if (v316 >= v305)
                                goto LABEL_798;
                              if (*(float *)(v310 + 4 * v316) > 0.0)
                                goto LABEL_539;
                            }
                            else if ((*v315 & 0x30) != 0x10
                                   || (*(_DWORD *)(*(_QWORD *)((char *)v315 - 21) + 56) & 0x38000000) == 0x18000000)
                            {
                              goto LABEL_539;
                            }
                          }
                          v282 = v282 + *(float *)(v310 + 4 * v316++);
                          v315 += 12;
                          if (v316 >= v280)
                            goto LABEL_534;
                        }
LABEL_783:
                        __break(0xC471u);
                        JUMPOUT(0x195E791ECLL);
                      }
                      while (1)
                      {
                        if (v316 >= v44)
                          goto LABEL_783;
                        v318 = *v315 & 0xF;
                        if ((v318 - 1) >= 2)
                        {
                          if (v318)
                          {
                            if (v316 >= v305)
                            {
LABEL_798:
                              __break(0xC471u);
                              JUMPOUT(0x195E79264);
                            }
                            if (*(float *)(v310 + 4 * v316) > 0.0)
                            {
LABEL_539:
                              v278 = 1;
                              goto LABEL_540;
                            }
                          }
                          else if ((*v315 & 0x30) != 0x10
                                 || (*(_DWORD *)(*(_QWORD *)((char *)v315 - 21) + 56) & 0x38000000) == 0x18000000)
                          {
                            goto LABEL_539;
                          }
                        }
                        if (v316 >= v305)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x195E79234);
                        }
                        v282 = v282 + *(float *)(v310 + 4 * v316++);
                        v315 += 12;
                        if (v316 >= v280)
                        {
LABEL_534:
                          v278 = 0;
                          goto LABEL_540;
                        }
                      }
                    }
                    v278 = 0;
                    v282 = 0.0;
LABEL_540:
                    if ((float)(v283 + v282) > v281)
                      v283 = v281 - v282;
                    goto LABEL_536;
                  }
                }
                v282 = v282 - v311;
LABEL_536:
                v307 += 24;
                if (v284 == v304)
                {
                  v284 = v279[v286];
                  goto LABEL_497;
                }
              }
            }
          }
          if (v286 < v285)
          {
            v319 = v528;
            if (v286 <= v277)
              v320 = v277;
            else
              v320 = v286;
            v321 = v286;
            v44 = v284;
            v322 = v283;
            v323 = v282;
            v324 = v281;
            v325 = (char *)v515 + 16 * v285;
            while (1)
            {
              if (v321 == v320)
              {
                __break(0xC471u);
                JUMPOUT(0x195E7927CLL);
              }
              v326 = (void *)v319[v321];
              if (v44 < (unint64_t)v326)
                break;
LABEL_588:
              if (v17)
              {
                v342 = 0;
                v343 = (char *)v515 + 16 * v321;
                v344 = *((unsigned int *)v343 + 3);
                v345 = 16;
                do
                {
                  if (v344 == v342)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195E791F4);
                  }
                  if (v342 + 1 >= (unint64_t)*((unsigned int *)v325 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195E791FCLL);
                  }
                  v346 = (float)((float)(v27 - (float)(v45 + (float)((float)(v324 - v323) - v322)))
                               * (float)(v27 - (float)(v45 + (float)((float)(v324 - v323) - v322))))
                       + *(float *)(*(_QWORD *)v343 + v345 - 16);
                  v347 = *(float *)(*(_QWORD *)v325 + v345);
                  if (v346 <= v347)
                    goto LABEL_614;
                  v348 = vabds_f32(v346, v347);
                  v349 = fabsf(v346);
                  if (v349 >= 1.0 || (float)(v349 * 3.4028e38) >= v348)
                  {
                    v351 = (float)(v349 * 1.1755e-38) <= v348 || v349 <= 1.0;
                    v352 = v348 / v349;
                    if (!v351 || v352 <= 0.00000011921)
                    {
                      v354 = fabsf(v347);
                      if (v354 >= 1.0 || (float)(v354 * 3.4028e38) >= v348)
                      {
                        v356 = (float)(v354 * 1.1755e-38) <= v348 || v354 <= 1.0;
                        if (!v356 || (float)(v348 / v354) <= 0.00000011921)
                        {
LABEL_614:
                          *(float *)(*(_QWORD *)v325 + v345) = v346;
                          *(_QWORD *)(*(_QWORD *)v325 + v345 + 8) = v321;
                        }
                      }
                    }
                  }
                  ++v342;
                  v345 += 16;
                }
                while (v17 != v342);
              }
              if (++v321 == v285)
                goto LABEL_617;
            }
            v327 = *((unsigned int *)v4 + 21);
            if (v44 <= v327)
              v328 = (void *)*((unsigned int *)v4 + 21);
            else
              v328 = (void *)v44;
            v329 = 24 * v44 + 45;
            while (2)
            {
              if ((void *)v44 == v328)
              {
                __break(0xC471u);
                JUMPOUT(0x195E7921CLL);
              }
              v330 = v44;
              v331 = (uint64_t *)*((_QWORD *)v4 + 1);
              v332 = *((unsigned int *)v331 + 3);
              if (v44 >= v332)
              {
                __break(0xC471u);
                JUMPOUT(0x195E7920CLL);
              }
              v333 = *((_QWORD *)v4 + 9);
              v334 = *(float *)(v333 + 4 * v44);
              v324 = v324 - v334;
              ++v44;
              v335 = *v331;
              v336 = v335 + 24 * v330;
              v337 = *(_WORD *)(v336 + 21);
              if ((v337 & 0xFu) - 1 >= 2)
              {
                if ((v337 & 0xF) != 0)
                {
                  if (v334 <= 0.0)
                    break;
LABEL_561:
                  v323 = 0.0;
                  if (v44 < v280)
                  {
                    v338 = (_WORD *)(v335 + v329);
                    v339 = v44;
                    if (v332 > v327)
                    {
                      while (v339 < v332)
                      {
                        v341 = *v338 & 0xF;
                        if ((v341 - 1) >= 2)
                        {
                          if (v341)
                          {
                            if (v339 >= v327)
                            {
LABEL_791:
                              __break(0xC471u);
                              JUMPOUT(0x195E7922CLL);
                            }
                            if (*(float *)(v333 + 4 * v339) > 0.0)
                              goto LABEL_583;
                          }
                          else if ((*v338 & 0x30) != 0x10
                                 || (*(_DWORD *)(*(_QWORD *)((char *)v338 - 21) + 56) & 0x38000000) == 0x18000000)
                          {
                            goto LABEL_583;
                          }
                        }
                        if (v339 >= v327)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x195E791DCLL);
                        }
                        v323 = v323 + *(float *)(v333 + 4 * v339++);
                        v338 += 12;
                        if (v339 >= v280)
                          goto LABEL_583;
                      }
                    }
                    else
                    {
                      while (v339 < v332)
                      {
                        v340 = *v338 & 0xF;
                        if ((v340 - 1) >= 2)
                        {
                          if (v340)
                          {
                            if (v339 >= v327)
                              goto LABEL_791;
                            if (*(float *)(v333 + 4 * v339) > 0.0)
                              goto LABEL_583;
                          }
                          else if ((*v338 & 0x30) != 0x10
                                 || (*(_DWORD *)(*(_QWORD *)((char *)v338 - 21) + 56) & 0x38000000) == 0x18000000)
                          {
                            goto LABEL_583;
                          }
                        }
                        v323 = v323 + *(float *)(v333 + 4 * v339++);
                        v338 += 12;
                        if (v339 >= v280)
                          goto LABEL_583;
                      }
                    }
                    __break(0xC471u);
                    JUMPOUT(0x195E791CCLL);
                  }
LABEL_583:
                  if ((float)(v322 + v323) > v324)
                    v322 = v324 - v323;
LABEL_586:
                  v329 += 24;
                  if ((void *)v44 == v326)
                  {
                    v44 = v319[v321];
                    goto LABEL_588;
                  }
                  continue;
                }
                if ((v337 & 0x30) != 0x10 || (*(_DWORD *)(*(_QWORD *)v336 + 56) & 0x38000000) == 0x18000000)
                  goto LABEL_561;
              }
              break;
            }
            v323 = v323 - v334;
            goto LABEL_586;
          }
LABEL_617:
          ++v285;
          v171 = v504;
          if (v285 == v504)
            goto LABEL_620;
        }
      }
      if (HIDWORD(v529) <= 1)
        goto LABEL_852;
LABEL_620:
      v357 = v171 - 1;
      v358 = v515;
      v359 = (char *)v515 + 16 * v171 - 16;
      if (v17 >= *((unsigned int *)v359 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x195E79480);
      }
      v360 = fabsf(*(float *)(*(_QWORD *)v359 + 16 * v17));
      v497 = v360 == INFINITY;
      v361 = v510;
      if (v360 != INFINITY)
      {
        if (!v17)
        {
          v516 = 0;
          v484 = 0;
          goto LABEL_711;
        }
        if (v17 >> 29)
          goto LABEL_860;
        v362 = WTF::fastMalloc((WTF *)(8 * v17));
        v363 = HIDWORD(v529);
        v364 = v528;
        v365 = (16 * v17) | 8;
        v366 = v362 - 8;
        v367 = v17;
        if (HIDWORD(v529) <= v504)
        {
          while (v357 < v363)
          {
            *(_QWORD *)(v366 + 8 * v367) = v364[v357];
            v368 = (char *)v515 + 16 * v357;
            if (v367 >= *((unsigned int *)v368 + 3))
              goto LABEL_826;
            v357 = *(_QWORD *)(*(_QWORD *)v368 + v365);
            v365 -= 16;
            if (!--v367)
              goto LABEL_634;
          }
LABEL_825:
          __break(0xC471u);
          JUMPOUT(0x195E7937CLL);
        }
        do
        {
          if (v357 >= v363)
            goto LABEL_825;
          *(_QWORD *)(v366 + 8 * v367) = v364[v357];
          if (v357 >= v504)
          {
            __break(0xC471u);
            JUMPOUT(0x195E7942CLL);
          }
          v369 = (char *)v515 + 16 * v357;
          if (v367 >= *((unsigned int *)v369 + 3))
          {
LABEL_826:
            __break(0xC471u);
            JUMPOUT(0x195E79384);
          }
          v357 = *(_QWORD *)(*(_QWORD *)v369 + v365);
          v365 -= 16;
          --v367;
        }
        while (v367);
LABEL_634:
        v508 = (WTF *)v362;
        v370 = (WTF *)WTF::fastMalloc((WTF *)(4 * v17));
        v516 = v370;
        if ((_DWORD)v17)
        {
          bzero(v370, (4 * v17) & 0x3FFFFFFFCLL);
          v370 = v516;
        }
        v372 = 0;
        v374 = v4 + 9;
        v373 = v4 + 11;
        v375 = v500;
        v376 = v503;
        v377 = v508;
        while (1)
        {
          v378 = v42;
          v379 = (unint64_t *)v377;
          v380 = (unint64_t)v376;
          if (v372)
          {
            if (v372 - 1 >= v17)
            {
              __break(0xC471u);
              JUMPOUT(0x195E793CCLL);
            }
            if (v372 >= v17)
            {
              __break(0xC471u);
              JUMPOUT(0x195E793D4);
            }
            v380 = *((_QWORD *)v377 + v372 - 1);
            v378 = v45;
            v379 = (unint64_t *)((char *)v377 + 8 * v372);
          }
          v381 = *v379;
          v382 = 0.0;
          if (v380 < *v379)
            break;
LABEL_703:
          v418 = ceilf((float)((float)(v378 + v382) + 0.015625) * 64.0);
          if (v418 >= 2147500000.0)
          {
            v419 = 0x7FFFFFFF;
          }
          else if (v418 <= -2147500000.0)
          {
            v419 = 0x80000000;
          }
          else
          {
            v419 = (int)v418;
          }
          if (v372 == v17)
          {
            __break(0xC471u);
            JUMPOUT(0x195E793A4);
          }
          *((_DWORD *)v370 + v372++) = v419;
          if (v372 == v17)
          {
            WTF::fastFree(v377, v371);
            v484 = v17;
            v361 = v510;
            v358 = v515;
            goto LABEL_711;
          }
        }
        v383 = 0;
        v384 = v372 | v375;
        v385 = 0.0;
        v386 = 0.0;
        while (2)
        {
          if (v384)
          {
            v387 = v374;
            if (v380 >= *((unsigned int *)v4 + 21))
            {
              __break(0xC471u);
              JUMPOUT(0x195E79284);
            }
          }
          else
          {
            v387 = v373;
            if (v380 >= *((unsigned int *)v4 + 25))
            {
              __break(0xC471u);
              JUMPOUT(0x195E792B4);
            }
          }
          v388 = *(float *)(*v387 + 4 * v380);
          v389 = (uint64_t *)*((_QWORD *)v4 + 1);
          v390 = *((unsigned int *)v389 + 3);
          if (v383)
          {
            if (v380 >= v390)
            {
              __break(0xC471u);
              JUMPOUT(0x195E7928CLL);
            }
            v391 = *v389;
            v392 = *(_QWORD *)(*v389 + 24 * v380);
            if (v384 || (*(_WORD *)(v392 + 12) & 0x200) == 0)
              goto LABEL_651;
            v485 = v388;
            v481 = v386;
            v465 = v382;
            v473 = v385;
            v404 = WebCore::Layout::Box::rareDataMap(void)::map;
            v451 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
            v488 = *(_QWORD *)(*v389 + 24 * v380);
            v405 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v392) & v451;
            if (*(_QWORD *)(v404 + 16 * v405) != v488)
            {
              v406 = 1;
              do
                v405 = ((_DWORD)v405 + v406++) & v451;
              while (*(_QWORD *)(v404 + 16 * v405) != v488);
            }
            v407 = *(_QWORD *)(*(_QWORD *)(v404 + 16 * v405 + 8) + 24);
            v392 = v488;
            v382 = v465;
            v385 = v473;
            v386 = v481;
            v388 = v485;
            v374 = v4 + 9;
            v373 = v4 + 11;
            v375 = v500;
            v376 = v503;
            v377 = v508;
            v370 = v516;
            if (v407)
            {
              v408 = WebCore::Layout::Box::rareDataMap(void)::map;
              v452 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
              v409 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v488) & v452;
              if (*(_QWORD *)(v408 + 16 * v409) != v488)
              {
                v410 = 1;
                do
                  v409 = ((_DWORD)v409 + v410++) & v452;
                while (*(_QWORD *)(v408 + 16 * v409) != v488);
              }
              v393 = *(_QWORD *)(*(_QWORD *)(v408 + 16 * v409 + 8) + 24);
              v382 = v465;
              v385 = v473;
              v386 = v481;
              v388 = v485;
              v374 = v4 + 9;
              v373 = v4 + 11;
              v375 = v500;
              v376 = v503;
              v377 = v508;
              v370 = v516;
            }
            else
            {
LABEL_651:
              v393 = v392 + 16;
            }
            v394 = *(_WORD *)(v391 + 24 * v380 + 21);
            if ((v394 & 0xFu) - 1 >= 2)
            {
              if ((v394 & 0xF) != 0)
              {
                if (v384)
                {
                  v395 = v374;
                  if (v380 >= *((unsigned int *)v4 + 21))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195E79334);
                  }
                }
                else
                {
                  v395 = v373;
                  if (v380 >= *((unsigned int *)v4 + 25))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195E79394);
                  }
                }
                if (*(float *)(*v395 + 4 * v380) > 0.0)
                {
LABEL_672:
                  v383 = 1;
                  v386 = 0.0;
                  goto LABEL_685;
                }
              }
              else if ((v394 & 0x30) != 0x10 || (*(_DWORD *)(v393 + 40) & 0x38000000) == 0x18000000)
              {
                goto LABEL_672;
              }
            }
            v386 = v386 + v388;
LABEL_669:
            v383 = 1;
            goto LABEL_685;
          }
          if (v380 >= v390)
          {
            __break(0xC471u);
            JUMPOUT(0x195E792BCLL);
          }
          v396 = *v389;
          v397 = *(_QWORD *)(*v389 + 24 * v380);
          if (v384 || (*(_WORD *)(v397 + 12) & 0x200) == 0)
            goto LABEL_660;
          v486 = v388;
          v482 = v386;
          v466 = v382;
          v474 = v385;
          v411 = WebCore::Layout::Box::rareDataMap(void)::map;
          v453 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
          v489 = *(_QWORD *)(*v389 + 24 * v380);
          v412 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v397) & v453;
          if (*(_QWORD *)(v411 + 16 * v412) != v489)
          {
            v413 = 1;
            do
              v412 = ((_DWORD)v412 + v413++) & v453;
            while (*(_QWORD *)(v411 + 16 * v412) != v489);
          }
          v414 = *(_QWORD *)(*(_QWORD *)(v411 + 16 * v412 + 8) + 24);
          v397 = v489;
          v382 = v466;
          v385 = v474;
          v386 = v482;
          v388 = v486;
          v374 = v4 + 9;
          v373 = v4 + 11;
          v375 = v500;
          v376 = v503;
          v377 = v508;
          v370 = v516;
          if (v414)
          {
            v415 = WebCore::Layout::Box::rareDataMap(void)::map;
            v454 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
            v416 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v489) & v454;
            if (*(_QWORD *)(v415 + 16 * v416) != v489)
            {
              v417 = 1;
              do
                v416 = ((_DWORD)v416 + v417++) & v454;
              while (*(_QWORD *)(v415 + 16 * v416) != v489);
            }
            v398 = *(_QWORD *)(*(_QWORD *)(v415 + 16 * v416 + 8) + 24);
            v382 = v466;
            v385 = v474;
            v386 = v482;
            v388 = v486;
            v374 = v4 + 9;
            v373 = v4 + 11;
            v375 = v500;
            v376 = v503;
            v377 = v508;
            v370 = v516;
          }
          else
          {
LABEL_660:
            v398 = v397 + 16;
          }
          v399 = *(_WORD *)(v396 + 24 * v380 + 21);
          if ((v399 & 0xFu) - 1 >= 2)
          {
            if ((v399 & 0xF) != 0)
            {
              if (v384)
              {
                v400 = v374;
                if (v380 >= *((unsigned int *)v4 + 21))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E7938CLL);
                }
              }
              else
              {
                v400 = v373;
                if (v380 >= *((unsigned int *)v4 + 25))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E7939CLL);
                }
              }
              if (*(float *)(*v400 + 4 * v380) > 0.0)
                goto LABEL_669;
            }
            else
            {
              if ((v399 & 0x30) != 0x10)
                goto LABEL_669;
              v401 = (*(_DWORD *)(v398 + 40) >> 27) & 7;
              v402 = !v372 && v401 == 1;
              v403 = v402;
              if ((v401 != 3) == v403)
                goto LABEL_669;
            }
          }
          v383 = 0;
          v385 = v385 + v388;
LABEL_685:
          v382 = v382 + v388;
          if (++v380 == v381)
          {
            v382 = (float)(v382 - v385) - v386;
            goto LABEL_703;
          }
          continue;
        }
      }
      v516 = (WTF *)((unint64_t)v487 & 0xFFFFFFFFFFFFFF00);
LABEL_711:
      v420 = 0;
      do
      {
        v421 = *(WTF **)((char *)v358 + v420);
        if (v421)
        {
          v422 = (char *)v358 + v420;
          *(_QWORD *)v422 = 0;
          *((_DWORD *)v422 + 2) = 0;
          WTF::fastFree(v421, (void *)v44);
          v361 = v510;
          v358 = v515;
        }
        v420 += 16;
      }
      while (v361 != v420);
      WTF::fastFree(v358, (void *)v44);
      this = (WTF *)v528;
      if (v528)
      {
        v528 = 0;
        LODWORD(v529) = 0;
        this = (WTF *)WTF::fastFree(this, a2);
      }
      if (v497)
      {
        v487 = v516;
LABEL_727:
        v6 = v501;
        v14 = v499;
LABEL_728:
        if (v17)
        {
          v425 = 0;
          v426 = HIDWORD(v518);
          do
          {
            if (v426 == (_DWORD)v518)
            {
              v427 = v426 + ((unint64_t)v426 >> 2);
              if (v427 >= 0x10)
                v428 = v427 + 1;
              else
                v428 = 16;
              if (v428 <= (unint64_t)v426 + 1)
                v429 = v426 + 1;
              else
                v429 = v428;
              if (v429 >> 30)
              {
                __break(0xC471u);
                JUMPOUT(0x195E7933CLL);
              }
              v430 = v14;
              v431 = v517;
              this = (WTF *)WTF::fastMalloc((WTF *)(4 * v429));
              LODWORD(v518) = v429;
              v517 = this;
              if (v426)
              {
                v436 = 4 * v426;
                v437 = this;
                v438 = v431;
                do
                {
                  v439 = *(_DWORD *)v438;
                  v438 = (WTF *)((char *)v438 + 4);
                  *(_DWORD *)v437 = v439;
                  v437 = (WTF *)((char *)v437 + 4);
                  v436 -= 4;
                }
                while (v436);
              }
              if (v431)
              {
                if (this == v431)
                {
                  v517 = 0;
                  LODWORD(v518) = 0;
                }
                WTF::fastFree(v431, a2);
                this = v517;
              }
              v426 = HIDWORD(v518);
              v432 = v4[15] * 64.0;
              if (v432 >= 2147483650.0)
              {
                v433 = 0x7FFFFFFF;
              }
              else if (v432 <= -2147483650.0)
              {
                v433 = 0x80000000;
              }
              else
              {
                v433 = (int)v432;
              }
              *((_DWORD *)this + HIDWORD(v518)) = v433;
              v14 = v430;
            }
            else
            {
              v434 = v4[15] * 64.0;
              if (v434 >= 2147483650.0)
              {
                v435 = 0x7FFFFFFF;
              }
              else if (v434 <= -2147483650.0)
              {
                v435 = 0x80000000;
              }
              else
              {
                v435 = (int)v434;
              }
              *((_DWORD *)v517 + v426) = v435;
            }
            HIDWORD(v518) = ++v426;
            ++v425;
          }
          while (v425 != v17);
          v6 = v501;
        }
        v15 = v502;
        goto LABEL_771;
      }
      v487 = 0;
      v423 = v484;
      goto LABEL_762;
    }
    v524 = v19;
    v525 = 0;
    v526 = v20;
    v527 = 0;
    v528 = 0;
    v529 = 0;
    v34 = v19;
    v522 = v19;
    do
    {
      v35 = WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity((uint64_t **)(*(_QWORD *)v4 + 40), (unint64_t)v34, (uint64_t)&v524, **((_QWORD **)v4 + 1), *(unsigned int *)(*((_QWORD *)v4 + 1) + 12));
      v522 = v35;
      v36 = HIDWORD(v529);
      if (HIDWORD(v529) == (_DWORD)v529)
      {
        v37 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v528, HIDWORD(v529) + 1, (unint64_t)&v522);
        v36 = HIDWORD(v529);
        v528[HIDWORD(v529)] = *v37;
      }
      else
      {
        v528[HIDWORD(v529)] = v35;
      }
      v38 = (v36 + 1);
      HIDWORD(v529) = v38;
      v34 = v522;
    }
    while ((unint64_t)v522 < v20);
    v522 = v503;
    if ((_DWORD)v38 == (_DWORD)v529)
    {
      v39 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v528, v38 + 1, (unint64_t)&v522);
      LODWORD(v38) = HIDWORD(v529);
    }
    else
    {
      v39 = &v522;
    }
    v48 = v528;
    memmove(v528 + 1, v528, 8 * v38);
    *v48 = *v39;
    v49 = (HIDWORD(v529) + 1);
    v50 = HIDWORD(v529)++ == -1;
    v51 = v4[15];
    v52 = WebCore::Layout::InlineFormattingUtils::computedTextIndent((uint64_t **)(*(_QWORD *)v4 + 40), 0, (v15 != 0) | ((v15 != 0) << 8), v51);
    v53 = v4[15];
    v54 = WebCore::Layout::InlineFormattingUtils::computedTextIndent((uint64_t **)(*(_QWORD *)v4 + 40), 0, 256, v53);
    if (v50)
    {
      __break(0xC471u);
      JUMPOUT(0x195E79460);
    }
    if (v49 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x195E79468);
    }
    v55 = v54;
    v509 = v49;
    v56 = (WTF *)(16 * v49);
    v57 = (WTF *)WTF::fastMalloc(v56);
    v59 = 0;
    do
    {
      v60 = (_QWORD *)((char *)v59 + (_QWORD)v57);
      *v60 = 0;
      v60[1] = 0;
      *(_DWORD *)v60 = 2139095040;
      v59 = (WTF *)((char *)v59 + 16);
    }
    while (v56 != v59);
    *(_DWORD *)v57 = 0;
    v61 = v509;
    v513 = v57;
    if (v509 >= 2)
    {
      v62 = 0;
      v63 = 0.0;
      v64 = (unint64_t)v503;
      v65 = 0.0;
      v66 = 0.0;
      v67 = 1;
      v69 = v4 + 9;
      v68 = v4 + 11;
      v70 = v500;
      do
      {
        if (v67 >= HIDWORD(v529))
        {
          __break(0xC471u);
          JUMPOUT(0x195E793DCLL);
        }
        v71 = v528[v67];
        if (v64 < v71)
        {
          while (1)
          {
            if (v70)
            {
              v72 = v69;
              if (v64 >= *((unsigned int *)v4 + 21))
              {
                __break(0xC471u);
                JUMPOUT(0x195E792D4);
              }
            }
            else
            {
              v72 = v68;
              if (v64 >= *((unsigned int *)v4 + 25))
              {
                __break(0xC471u);
                JUMPOUT(0x195E79314);
              }
            }
            v73 = *(float *)(*v72 + 4 * v64);
            v74 = (uint64_t *)*((_QWORD *)v4 + 1);
            v75 = *((unsigned int *)v74 + 3);
            if (v62)
            {
              if (v64 >= v75)
              {
                __break(0xC471u);
                JUMPOUT(0x195E792DCLL);
              }
              v76 = *v74;
              v77 = *(_QWORD *)(*v74 + 24 * v64);
              if (v70 || (*(_WORD *)(v77 + 12) & 0x200) == 0)
                goto LABEL_72;
              v505 = v73;
              v493 = v63;
              v475 = v66;
              v467 = v65;
              v86 = WebCore::Layout::Box::rareDataMap(void)::map;
              v455 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
              v87 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v77) & v455;
              if (*(_QWORD *)(v86 + 16 * v87) != v77)
              {
                v88 = 1;
                do
                  v87 = ((_DWORD)v87 + v88++) & v455;
                while (*(_QWORD *)(v86 + 16 * v87) != v77);
              }
              v65 = v467;
              v66 = v475;
              v63 = v493;
              v73 = v505;
              v69 = v4 + 9;
              v68 = v4 + 11;
              v70 = v500;
              v61 = v509;
              v57 = v513;
              if (*(_QWORD *)(*(_QWORD *)(v86 + 16 * v87 + 8) + 24))
              {
                v89 = WebCore::Layout::Box::rareDataMap(void)::map;
                v456 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
                v90 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v77) & v456;
                if (*(_QWORD *)(v89 + 16 * v90) != v77)
                {
                  v91 = 1;
                  do
                    v90 = ((_DWORD)v90 + v91++) & v456;
                  while (*(_QWORD *)(v89 + 16 * v90) != v77);
                }
                v78 = *(_QWORD *)(*(_QWORD *)(v89 + 16 * v90 + 8) + 24);
                v65 = v467;
                v66 = v475;
                v63 = v493;
                v73 = v505;
                v69 = v4 + 9;
                v68 = v4 + 11;
                v70 = v500;
                v61 = v509;
                v57 = v513;
              }
              else
              {
LABEL_72:
                v78 = v77 + 16;
              }
              v79 = *(_WORD *)(v76 + 24 * v64 + 21);
              if ((v79 & 0xFu) - 1 >= 2)
              {
                if ((v79 & 0xF) != 0)
                {
                  if (v70)
                  {
                    v80 = v69;
                    if (v64 >= *((unsigned int *)v4 + 21))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195E7934CLL);
                    }
                  }
                  else
                  {
                    v80 = v68;
                    if (v64 >= *((unsigned int *)v4 + 25))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195E793ECLL);
                    }
                  }
                  if (*(float *)(*v80 + 4 * v64) > 0.0)
                  {
LABEL_93:
                    v62 = 1;
                    v63 = 0.0;
                    goto LABEL_100;
                  }
                }
                else if ((v79 & 0x30) != 0x10 || (*(_DWORD *)(v78 + 40) & 0x38000000) == 0x18000000)
                {
                  goto LABEL_93;
                }
              }
              v63 = v63 + v73;
            }
            else
            {
              if (v64 >= v75)
              {
                __break(0xC471u);
                JUMPOUT(0x195E7931CLL);
              }
              v81 = *v74;
              v82 = *(_QWORD *)(*v74 + 24 * v64);
              if (v70 || (*(_WORD *)(v82 + 12) & 0x200) == 0)
                goto LABEL_81;
              v506 = v73;
              v494 = v63;
              v476 = v66;
              v468 = v65;
              v92 = WebCore::Layout::Box::rareDataMap(void)::map;
              v457 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
              v93 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v82) & v457;
              if (*(_QWORD *)(v92 + 16 * v93) != v82)
              {
                v94 = 1;
                do
                  v93 = ((_DWORD)v93 + v94++) & v457;
                while (*(_QWORD *)(v92 + 16 * v93) != v82);
              }
              v65 = v468;
              v66 = v476;
              v63 = v494;
              v73 = v506;
              v69 = v4 + 9;
              v68 = v4 + 11;
              v70 = v500;
              v61 = v509;
              v57 = v513;
              if (*(_QWORD *)(*(_QWORD *)(v92 + 16 * v93 + 8) + 24))
              {
                v95 = WebCore::Layout::Box::rareDataMap(void)::map;
                v458 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
                v96 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v82) & v458;
                if (*(_QWORD *)(v95 + 16 * v96) != v82)
                {
                  v97 = 1;
                  do
                    v96 = ((_DWORD)v96 + v97++) & v458;
                  while (*(_QWORD *)(v95 + 16 * v96) != v82);
                }
                v83 = *(_QWORD *)(*(_QWORD *)(v95 + 16 * v96 + 8) + 24);
                v65 = v468;
                v66 = v476;
                v63 = v494;
                v73 = v506;
                v69 = v4 + 9;
                v68 = v4 + 11;
                v70 = v500;
                v61 = v509;
                v57 = v513;
              }
              else
              {
LABEL_81:
                v83 = v82 + 16;
              }
              v84 = *(_WORD *)(v81 + 24 * v64 + 21);
              if ((v84 & 0xFu) - 1 < 2)
              {
LABEL_99:
                v62 = 0;
                v65 = v65 + v73;
                goto LABEL_100;
              }
              if ((v84 & 0xF) != 0)
              {
                if (v70)
                {
                  v85 = v69;
                  if (v64 >= *((unsigned int *)v4 + 21))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195E793E4);
                  }
                }
                else
                {
                  v85 = v68;
                  if (v64 >= *((unsigned int *)v4 + 25))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195E793F4);
                  }
                }
                if (*(float *)(*v85 + 4 * v64) <= 0.0)
                  goto LABEL_99;
              }
              else if ((v84 & 0x30) == 0x10 && (*(_DWORD *)(v83 + 40) & 0x28000000) != 0x8000000)
              {
                goto LABEL_99;
              }
            }
            v62 = 1;
LABEL_100:
            v66 = v66 + v73;
            if (++v64 == v71)
            {
              v64 = v71;
              break;
            }
          }
        }
        v98 = v52 + (float)((float)(v66 - v65) - v63);
        v99 = v4[15];
        if (v99 < v98)
          break;
        *((float *)v57 + 4 * v67++) = (float)(v27 - v98) * (float)(v27 - v98);
      }
      while (v67 != v61);
      v100 = HIDWORD(v529);
      if (HIDWORD(v529) <= 1)
      {
LABEL_851:
        __break(0xC471u);
        JUMPOUT(0x195E79470);
      }
      v101 = 0;
      v102 = v528;
      v103 = v528[1];
      v104 = 0.0;
      v105 = 0.0;
      v106 = 0.0;
      v107 = v103;
      v108 = 1;
      v109 = 1;
      while (1)
      {
        if (v108 == v100)
        {
          __break(0xC471u);
          JUMPOUT(0x195E7935CLL);
        }
        v110 = v102[v108];
        if (v103 < v110)
        {
          v111 = *((unsigned int *)v4 + 21);
          v112 = v103 >= v111;
          if (v103 > v111)
            v111 = v103;
          if (v112)
          {
LABEL_803:
            __break(0xC471u);
            JUMPOUT(0x195E79294);
          }
          v113 = *((_QWORD *)v4 + 9);
          v114 = *(float *)(v113 + 4 * v103);
          v115 = *((_QWORD *)v4 + 1);
          v116 = *(unsigned int *)(v115 + 12);
          if (v101)
          {
            if (v103 >= v116)
            {
LABEL_808:
              __break(0xC471u);
              JUMPOUT(0x195E792C4);
            }
            v58 = *(_QWORD *)v115;
            v117 = (char *)(v58 + 24 * v103);
            v118 = *(_WORD *)(v117 + 21);
            if ((v118 & 0xFu) - 1 < 2)
              goto LABEL_141;
            if ((v118 & 0xF) != 0)
            {
              if (v114 <= 0.0)
              {
LABEL_141:
                v106 = v106 + v114;
LABEL_145:
                v121 = 1;
                goto LABEL_147;
              }
            }
            else if ((v118 & 0x30) == 0x10 && (*(_DWORD *)(*(_QWORD *)v117 + 56) & 0x38000000) != 0x18000000)
            {
              goto LABEL_141;
            }
            v121 = 1;
            v106 = 0.0;
LABEL_147:
            v104 = v104 + v114;
            v122 = v103 + 1;
            if (v103 + 1 == v110)
            {
LABEL_171:
              v103 = v102[v108];
              goto LABEL_172;
            }
            v123 = 24 * v103;
            while (1)
            {
              if (v111 == v122)
                goto LABEL_803;
              v124 = *(float *)(v113 + 4 * v122);
              if (!v121)
                break;
              if (v122 >= v116)
                goto LABEL_808;
              v125 = *(_WORD *)(v58 + v123 + 45);
              if ((v125 & 0xFu) - 1 < 2)
              {
LABEL_164:
                v106 = v106 + v124;
LABEL_168:
                v121 = 1;
                goto LABEL_170;
              }
              if ((v125 & 0xF) != 0)
              {
                if (v124 <= 0.0)
                  goto LABEL_164;
              }
              else if ((v125 & 0x30) == 0x10
                     && (*(_DWORD *)(*(_QWORD *)(v58 + v123 + 24) + 56) & 0x38000000) != 0x18000000)
              {
                goto LABEL_164;
              }
              v121 = 1;
              v106 = 0.0;
LABEL_170:
              v104 = v104 + v124;
              ++v122;
              v123 += 24;
              if (v110 == v122)
                goto LABEL_171;
            }
            if (v122 >= v116)
              goto LABEL_814;
            v126 = *(_WORD *)(v58 + v123 + 45);
            if ((v126 & 0xFu) - 1 < 2)
            {
LABEL_169:
              v121 = 0;
              v105 = v105 + v124;
              goto LABEL_170;
            }
            if ((v126 & 0xF) != 0)
            {
              if (v124 <= 0.0)
                goto LABEL_169;
            }
            else if ((v126 & 0x30) == 0x10
                   && (*(_DWORD *)(*(_QWORD *)(v58 + v123 + 24) + 56) & 0x38000000) != 0x18000000)
            {
              goto LABEL_169;
            }
            v101 = 1;
            goto LABEL_168;
          }
          if (v103 >= v116)
          {
LABEL_814:
            __break(0xC471u);
            JUMPOUT(0x195E79304);
          }
          v58 = *(_QWORD *)v115;
          v119 = (char *)(v58 + 24 * v103);
          v120 = *(_WORD *)(v119 + 21);
          if ((v120 & 0xFu) - 1 >= 2)
          {
            if ((v120 & 0xF) != 0)
            {
              if (v114 <= 0.0)
                goto LABEL_146;
            }
            else if ((v120 & 0x30) == 0x10 && (*(_DWORD *)(*(_QWORD *)v119 + 56) & 0x38000000) != 0x18000000)
            {
              goto LABEL_146;
            }
            v101 = 1;
            goto LABEL_145;
          }
LABEL_146:
          v101 = 0;
          v121 = 0;
          v105 = v105 + v114;
          goto LABEL_147;
        }
LABEL_172:
        while (v99 < (float)(v55 + (float)((float)(v104 - v105) - v106)))
        {
          if (++v109 > v108)
            break;
          v127 = v102[v109];
          if (v107 < v127)
          {
            v128 = *((unsigned int *)v4 + 21);
            if (v107 <= v128)
              v129 = *((unsigned int *)v4 + 21);
            else
              v129 = v107;
            v130 = 24 * v107 + 45;
            while (1)
            {
              if (v107 == v129)
              {
                __break(0xC471u);
                JUMPOUT(0x195E7924CLL);
              }
              v131 = v107;
              v132 = (uint64_t *)*((_QWORD *)v4 + 1);
              v58 = *((unsigned int *)v132 + 3);
              if (v107 >= v58)
              {
                __break(0xC471u);
                JUMPOUT(0x195E79254);
              }
              v133 = *((_QWORD *)v4 + 9);
              v134 = *(float *)(v133 + 4 * v107);
              v104 = v104 - v134;
              ++v107;
              v135 = *v132;
              v136 = v135 + 24 * v131;
              v137 = *(_WORD *)(v136 + 21);
              if ((v137 & 0xFu) - 1 >= 2)
              {
                if ((v137 & 0xF) != 0)
                {
                  if (v134 > 0.0)
                    goto LABEL_187;
                }
                else if ((v137 & 0x30) != 0x10 || (*(_DWORD *)(*(_QWORD *)v136 + 56) & 0x38000000) == 0x18000000)
                {
LABEL_187:
                  if (v107 < v103)
                  {
                    v138 = (_WORD *)(v135 + v130);
                    v105 = 0.0;
                    v139 = v107;
                    if (v58 <= v128)
                    {
                      while (v139 < v58)
                      {
                        v140 = *v138 & 0xF;
                        if ((v140 - 1) >= 2)
                        {
                          if (v140)
                          {
                            if (v139 >= v128)
                              goto LABEL_799;
                            if (*(float *)(v133 + 4 * v139) > 0.0)
                              goto LABEL_214;
                          }
                          else if ((*v138 & 0x30) != 0x10
                                 || (*(_DWORD *)(*(_QWORD *)((char *)v138 - 21) + 56) & 0x38000000) == 0x18000000)
                          {
                            goto LABEL_214;
                          }
                        }
                        v105 = v105 + *(float *)(v133 + 4 * v139++);
                        v138 += 12;
                        if (v139 >= v103)
                          goto LABEL_209;
                      }
LABEL_782:
                      __break(0xC471u);
                      JUMPOUT(0x195E791E4);
                    }
                    while (1)
                    {
                      if (v139 >= v58)
                        goto LABEL_782;
                      v141 = *v138 & 0xF;
                      if ((v141 - 1) >= 2)
                      {
                        if (v141)
                        {
                          if (v139 >= v128)
                          {
LABEL_799:
                            __break(0xC471u);
                            JUMPOUT(0x195E7926CLL);
                          }
                          if (*(float *)(v133 + 4 * v139) > 0.0)
                          {
LABEL_214:
                            v101 = 1;
                            goto LABEL_215;
                          }
                        }
                        else if ((*v138 & 0x30) != 0x10
                               || (*(_DWORD *)(*(_QWORD *)((char *)v138 - 21) + 56) & 0x38000000) == 0x18000000)
                        {
                          goto LABEL_214;
                        }
                      }
                      if (v139 >= v128)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195E7923CLL);
                      }
                      v105 = v105 + *(float *)(v133 + 4 * v139++);
                      v138 += 12;
                      if (v139 >= v103)
                      {
LABEL_209:
                        v101 = 0;
                        goto LABEL_215;
                      }
                    }
                  }
                  v101 = 0;
                  v105 = 0.0;
LABEL_215:
                  if ((float)(v106 + v105) > v104)
                    v106 = v104 - v105;
                  goto LABEL_211;
                }
              }
              v105 = v105 - v134;
LABEL_211:
              v130 += 24;
              if (v107 == v127)
              {
                v107 = v102[v109];
                goto LABEL_172;
              }
            }
          }
        }
        if (v109 < v108)
        {
          v142 = (char *)v513 + 16 * v108;
          v143 = v528;
          if (v109 <= v100)
            v144 = (void *)v100;
          else
            v144 = (void *)v109;
          v58 = v109;
          v145 = v106;
          v146 = v105;
          v147 = v107;
          v148 = v104;
          while (1)
          {
            if ((void *)v58 == v144)
            {
              __break(0xC471u);
              JUMPOUT(0x195E79274);
            }
            v149 = v143[v58];
            if (v147 < v149)
              break;
LABEL_263:
            v165 = *((float *)v513 + 4 * v58)
                 + (float)((float)(v27 - (float)(v55 + (float)((float)(v148 - v146) - v145)))
                         * (float)(v27 - (float)(v55 + (float)((float)(v148 - v146) - v145))));
            if (v165 < *(float *)v142)
            {
              *(float *)v142 = v165;
              *((_QWORD *)v142 + 1) = v58;
            }
            if (++v58 == v108)
              goto LABEL_266;
          }
          v150 = *((unsigned int *)v4 + 21);
          if (v147 <= v150)
            v151 = *((unsigned int *)v4 + 21);
          else
            v151 = v147;
          v152 = 24 * v147 + 45;
          while (2)
          {
            if (v147 == v151)
            {
              __break(0xC471u);
              JUMPOUT(0x195E79214);
            }
            v153 = v147;
            v154 = (uint64_t *)*((_QWORD *)v4 + 1);
            v155 = *((unsigned int *)v154 + 3);
            if (v147 >= v155)
            {
              __break(0xC471u);
              JUMPOUT(0x195E79204);
            }
            v156 = *((_QWORD *)v4 + 9);
            v157 = *(float *)(v156 + 4 * v147);
            v148 = v148 - v157;
            ++v147;
            v158 = *v154;
            v159 = v158 + 24 * v153;
            v160 = *(_WORD *)(v159 + 21);
            if ((v160 & 0xFu) - 1 >= 2)
            {
              if ((v160 & 0xF) != 0)
              {
                if (v157 <= 0.0)
                  break;
LABEL_236:
                v146 = 0.0;
                if (v147 < v103)
                {
                  v161 = (_WORD *)(v158 + v152);
                  v162 = v147;
                  if (v155 > v150)
                  {
                    while (v162 < v155)
                    {
                      v164 = *v161 & 0xF;
                      if ((v164 - 1) >= 2)
                      {
                        if (v164)
                        {
                          if (v162 >= v150)
                          {
LABEL_790:
                            __break(0xC471u);
                            JUMPOUT(0x195E79224);
                          }
                          if (*(float *)(v156 + 4 * v162) > 0.0)
                            goto LABEL_258;
                        }
                        else if ((*v161 & 0x30) != 0x10
                               || (*(_DWORD *)(*(_QWORD *)((char *)v161 - 21) + 56) & 0x38000000) == 0x18000000)
                        {
                          goto LABEL_258;
                        }
                      }
                      if (v162 >= v150)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195E791D4);
                      }
                      v146 = v146 + *(float *)(v156 + 4 * v162++);
                      v161 += 12;
                      if (v162 >= v103)
                        goto LABEL_258;
                    }
                  }
                  else
                  {
                    while (v162 < v155)
                    {
                      v163 = *v161 & 0xF;
                      if ((v163 - 1) >= 2)
                      {
                        if (v163)
                        {
                          if (v162 >= v150)
                            goto LABEL_790;
                          if (*(float *)(v156 + 4 * v162) > 0.0)
                            goto LABEL_258;
                        }
                        else if ((*v161 & 0x30) != 0x10
                               || (*(_DWORD *)(*(_QWORD *)((char *)v161 - 21) + 56) & 0x38000000) == 0x18000000)
                        {
                          goto LABEL_258;
                        }
                      }
                      v146 = v146 + *(float *)(v156 + 4 * v162++);
                      v161 += 12;
                      if (v162 >= v103)
                        goto LABEL_258;
                    }
                  }
LABEL_860:
                  __break(0xC471u);
                  JUMPOUT(0x195E791C4);
                }
LABEL_258:
                if ((float)(v145 + v146) > v148)
                  v145 = v148 - v146;
LABEL_261:
                v152 += 24;
                if (v147 == v149)
                {
                  v147 = v143[v58];
                  goto LABEL_263;
                }
                continue;
              }
              if ((v160 & 0x30) != 0x10 || (*(_DWORD *)(*(_QWORD *)v159 + 56) & 0x38000000) == 0x18000000)
                goto LABEL_236;
            }
            break;
          }
          v146 = v146 - v157;
          goto LABEL_261;
        }
LABEL_266:
        ++v108;
        v61 = v509;
        if (v108 == v509)
          goto LABEL_284;
      }
    }
    if (HIDWORD(v529) <= 1)
      goto LABEL_851;
LABEL_284:
    v183 = v61 - 1;
    v184 = v513;
    v185 = fabsf(*((float *)v513 + 4 * v61 - 4));
    v507 = v185 == INFINITY;
    if (v185 == INFINITY)
    {
      v516 = (WTF *)((unint64_t)v490 & 0xFFFFFFFFFFFFFF00);
    }
    else
    {
      v186 = 0;
      LODWORD(v187) = 0;
      v522 = 0;
      v523 = 0;
      do
      {
        if (v183 >= HIDWORD(v529))
        {
          __break(0xC471u);
          JUMPOUT(0x195E79364);
        }
        v188 = &v528[v183];
        if ((_DWORD)v187 == (_DWORD)v523)
        {
          v189 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v522, v187 + 1, (unint64_t)v188);
          v61 = v509;
          v188 = (_QWORD *)v189;
          LODWORD(v190) = HIDWORD(v523);
          v186 = v522;
          v191 = (_QWORD *)((char *)v522 + 8 * HIDWORD(v523));
        }
        else
        {
          v191 = (_QWORD *)((char *)v186 + 8 * v187);
          LODWORD(v190) = v187;
        }
        *v191 = *v188;
        v187 = (v190 + 1);
        HIDWORD(v523) = v190 + 1;
        if (v183 >= v61)
        {
          __break(0xC471u);
          JUMPOUT(0x195E7936CLL);
        }
        v183 = *((_QWORD *)v513 + 2 * v183 + 1);
      }
      while (v183);
      if (v187 > 1)
      {
        v192 = 0;
        v193 = v522;
        v190 = v190;
        do
        {
          if (8 * v187 == v192)
          {
            __break(0xC471u);
            JUMPOUT(0x195E793FCLL);
          }
          if (v190 >= v187)
          {
            __break(0xC471u);
            JUMPOUT(0x195E79404);
          }
          v194 = *(_QWORD *)((char *)v193 + v192);
          *(_QWORD *)((char *)v193 + v192) = *((_QWORD *)v193 + v190);
          *((_QWORD *)v193 + v190) = v194;
          v192 += 8;
          --v190;
        }
        while (8 * (v187 >> 1) != v192);
      }
      v499 = v187;
      if ((_DWORD)v187)
      {
        if (v187 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x195E794B8);
        }
        v195 = 4 * v187;
        v516 = (WTF *)WTF::fastMalloc((WTF *)(4 * v187));
        bzero(v516, v195);
        if (HIDWORD(v523))
        {
          v196 = 0;
          v198 = v4 + 9;
          v197 = v4 + 11;
          v199 = v499;
          v200 = v500;
          v201 = v516;
          while (1)
          {
            if (v196)
              v202 = v55;
            else
              v202 = v52;
            v203 = (unint64_t)v503;
            if (v196)
              v203 = *((_QWORD *)v522 + v196 - 1);
            v204 = *((_QWORD *)v522 + v196);
            v205 = 0.0;
            if (v203 < v204)
              break;
LABEL_369:
            v239 = ceilf((float)((float)(v202 + v205) + 0.015625) * 64.0);
            if (v239 >= 2147500000.0)
            {
              v240 = 0x7FFFFFFF;
            }
            else if (v239 <= -2147500000.0)
            {
              v240 = 0x80000000;
            }
            else
            {
              v240 = (int)v239;
            }
            if (v196 == v199)
            {
              __break(0xC471u);
              JUMPOUT(0x195E793C4);
            }
            *((_DWORD *)v201 + v196++) = v240;
            if (v196 >= HIDWORD(v523))
              goto LABEL_721;
          }
          v206 = 0;
          v207 = v196 | v200;
          v208 = 0.0;
          v209 = 0.0;
          while (1)
          {
            if (v207)
            {
              v210 = v198;
              if (v203 >= *((unsigned int *)v4 + 21))
              {
                __break(0xC471u);
                JUMPOUT(0x195E792A4);
              }
            }
            else
            {
              v210 = v197;
              if (v203 >= *((unsigned int *)v4 + 25))
              {
                __break(0xC471u);
                JUMPOUT(0x195E792F4);
              }
            }
            v211 = *(float *)(*v210 + 4 * v203);
            v212 = (uint64_t *)*((_QWORD *)v4 + 1);
            v213 = *((unsigned int *)v212 + 3);
            if (v206)
            {
              if (v203 >= v213)
              {
                __break(0xC471u);
                JUMPOUT(0x195E792ACLL);
              }
              v214 = *v212;
              v215 = *(_QWORD *)(*v212 + 24 * v203);
              if (v207 || (*(_WORD *)(v215 + 12) & 0x200) == 0)
                goto LABEL_317;
              v469 = v196;
              v511 = v211;
              v495 = v209;
              v491 = v208;
              v477 = v205;
              v227 = WebCore::Layout::Box::rareDataMap(void)::map;
              v459 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
              v228 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v215) & v459;
              if (*(_QWORD *)(v227 + 16 * v228) != v215)
              {
                v229 = 1;
                do
                  v228 = ((_DWORD)v228 + v229++) & v459;
                while (*(_QWORD *)(v227 + 16 * v228) != v215);
              }
              v205 = v477;
              v208 = v491;
              v209 = v495;
              v211 = v511;
              v198 = v4 + 9;
              v197 = v4 + 11;
              v199 = v499;
              v200 = v500;
              v201 = v516;
              v196 = v469;
              if (*(_QWORD *)(*(_QWORD *)(v227 + 16 * v228 + 8) + 24))
              {
                v230 = WebCore::Layout::Box::rareDataMap(void)::map;
                v460 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
                v231 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v215) & v460;
                if (*(_QWORD *)(v230 + 16 * v231) != v215)
                {
                  v232 = 1;
                  do
                    v231 = ((_DWORD)v231 + v232++) & v460;
                  while (*(_QWORD *)(v230 + 16 * v231) != v215);
                }
                v216 = *(_QWORD *)(*(_QWORD *)(v230 + 16 * v231 + 8) + 24);
                v205 = v477;
                v208 = v491;
                v209 = v495;
                v211 = v511;
                v198 = v4 + 9;
                v197 = v4 + 11;
                v199 = v499;
                v200 = v500;
                v201 = v516;
                v196 = v469;
              }
              else
              {
LABEL_317:
                v216 = v215 + 16;
              }
              v217 = *(_WORD *)(v214 + 24 * v203 + 21);
              if ((v217 & 0xFu) - 1 >= 2)
              {
                if ((v217 & 0xF) != 0)
                {
                  if (v207)
                  {
                    v218 = v198;
                    if (v203 >= *((unsigned int *)v4 + 21))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195E79344);
                    }
                  }
                  else
                  {
                    v218 = v197;
                    if (v203 >= *((unsigned int *)v4 + 25))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195E793B4);
                    }
                  }
                  if (*(float *)(*v218 + 4 * v203) > 0.0)
                  {
LABEL_338:
                    v206 = 1;
                    v209 = 0.0;
                    goto LABEL_351;
                  }
                }
                else if ((v217 & 0x30) != 0x10 || (*(_DWORD *)(v216 + 40) & 0x38000000) == 0x18000000)
                {
                  goto LABEL_338;
                }
              }
              v209 = v209 + v211;
            }
            else
            {
              if (v203 >= v213)
              {
                __break(0xC471u);
                JUMPOUT(0x195E792FCLL);
              }
              v219 = *v212;
              v220 = *(_QWORD *)(*v212 + 24 * v203);
              if (v207 || (*(_WORD *)(v220 + 12) & 0x200) == 0)
                goto LABEL_326;
              v470 = v196;
              v512 = v211;
              v496 = v209;
              v492 = v208;
              v478 = v205;
              v233 = WebCore::Layout::Box::rareDataMap(void)::map;
              v461 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
              v234 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v220) & v461;
              if (*(_QWORD *)(v233 + 16 * v234) != v220)
              {
                v235 = 1;
                do
                  v234 = ((_DWORD)v234 + v235++) & v461;
                while (*(_QWORD *)(v233 + 16 * v234) != v220);
              }
              v205 = v478;
              v208 = v492;
              v209 = v496;
              v211 = v512;
              v198 = v4 + 9;
              v197 = v4 + 11;
              v199 = v499;
              v200 = v500;
              v201 = v516;
              v196 = v470;
              if (*(_QWORD *)(*(_QWORD *)(v233 + 16 * v234 + 8) + 24))
              {
                v236 = WebCore::Layout::Box::rareDataMap(void)::map;
                v462 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
                v237 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v220) & v462;
                if (*(_QWORD *)(v236 + 16 * v237) != v220)
                {
                  v238 = 1;
                  do
                    v237 = ((_DWORD)v237 + v238++) & v462;
                  while (*(_QWORD *)(v236 + 16 * v237) != v220);
                }
                v221 = *(_QWORD *)(*(_QWORD *)(v236 + 16 * v237 + 8) + 24);
                v205 = v478;
                v208 = v492;
                v209 = v496;
                v211 = v512;
                v198 = v4 + 9;
                v197 = v4 + 11;
                v199 = v499;
                v200 = v500;
                v201 = v516;
                v196 = v470;
              }
              else
              {
LABEL_326:
                v221 = v220 + 16;
              }
              v222 = *(_WORD *)(v219 + 24 * v203 + 21);
              if ((v222 & 0xFu) - 1 < 2)
              {
LABEL_350:
                v206 = 0;
                v208 = v208 + v211;
                goto LABEL_351;
              }
              if ((v222 & 0xF) != 0)
              {
                if (v207)
                {
                  v223 = v198;
                  if (v203 >= *((unsigned int *)v4 + 21))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195E793ACLL);
                  }
                }
                else
                {
                  v223 = v197;
                  if (v203 >= *((unsigned int *)v4 + 25))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195E793BCLL);
                  }
                }
                if (*(float *)(*v223 + 4 * v203) <= 0.0)
                  goto LABEL_350;
              }
              else if ((v222 & 0x30) == 0x10)
              {
                v224 = (*(_DWORD *)(v221 + 40) >> 27) & 7;
                v225 = !v196 && v224 == 1;
                v226 = v225;
                if ((v224 != 3) != v226)
                  goto LABEL_350;
              }
            }
            v206 = 1;
LABEL_351:
            v205 = v205 + v211;
            if (++v203 == v204)
            {
              v205 = (float)(v205 - v208) - v209;
              goto LABEL_369;
            }
          }
        }
      }
      else
      {
        v516 = 0;
      }
LABEL_721:
      v424 = v522;
      v184 = v513;
      if (v522)
      {
        v522 = 0;
        LODWORD(v523) = 0;
        WTF::fastFree(v424, (void *)v58);
        v184 = v513;
      }
    }
    WTF::fastFree(v184, (void *)v58);
    this = (WTF *)v528;
    if (v528)
    {
      v528 = 0;
      LODWORD(v529) = 0;
      this = (WTF *)WTF::fastFree(this, a2);
    }
    if (v507)
    {
      v490 = v516;
      goto LABEL_727;
    }
    v490 = 0;
    v423 = v499;
LABEL_762:
    v15 = v502;
    if (v423)
    {
      v440 = v423;
      v441 = HIDWORD(v518);
      v442 = (unint64_t)v516;
      do
      {
        if (v441 == (_DWORD)v518)
        {
          v443 = (_DWORD *)WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v517, v441 + 1, v442);
          v444 = (_DWORD *)((char *)v517 + 4 * HIDWORD(v518));
        }
        else
        {
          v444 = (_DWORD *)((char *)v517 + 4 * v441);
          v443 = (_DWORD *)v442;
        }
        *v444 = *v443;
        v441 = ++HIDWORD(v518);
        v442 += 4;
        --v440;
      }
      while (v440);
    }
    this = v516;
    if (v516)
      this = (WTF *)WTF::fastFree(v516, a2);
    v6 = v501;
    v14 = v499;
LABEL_771:
    v6 = (WTF *)((char *)v6 + 8);
  }
  while (v6 != v498);
  v6 = v520;
  *(_QWORD *)v483 = v517;
  *(_QWORD *)(v483 + 8) = v518;
  *(_BYTE *)(v483 + 16) = 1;
  if (v6)
    goto LABEL_777;
  return this;
}

